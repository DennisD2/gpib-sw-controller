
gpib_004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a00  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000342  00800060  00002a00  00002a74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000172  008003a2  00002d42  00002db6  2**0
                  ALLOC
  3 .stab         00005688  00000000  00000000  00002db8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000285d  00000000  00000000  00008440  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__ctors_end>
       4:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
       8:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
       c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      10:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      14:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      18:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      1c:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__vector_7>
      20:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      24:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      28:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      2c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      30:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      34:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__vector_13>
      38:	0c 94 8f 13 	jmp	0x271e	; 0x271e <__vector_14>
      3c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      40:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      44:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      48:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      4c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      50:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>

00000054 <__c.1856>:
      54:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
      64:	65 72 72 6f 72 3a 20 00                             error: .

0000006c <__c.1854>:
      6c:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
      7c:	6f 72 3a 20 00                                      or: .

00000081 <__c.1852>:
      81:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
      91:	3a 20 00                                            : .

00000094 <__c.1878>:
      94:	43 6f 6d 6d 61 6e 64 20 6f 76 65 72 66 6c 6f 77     Command overflow
      a4:	2e 00                                               ..

000000a6 <__c.1946>:
      a6:	75 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 0a     unknown command.
      b6:	0d 00                                               ..

000000b8 <__c.1943>:
      b8:	43 68 65 63 6b 20 65 72 72 6f 72 73 0a 0d 00        Check errors...

000000c7 <__c.1938>:
      c7:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      d7:	74 72 6f 6c 20 6f 66 66 0a 0d 00                    trol off...

000000e2 <__c.1936>:
      e2:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      f2:	74 72 6f 6c 20 6f 6e 0a 0d 00                       trol on...

000000fc <__c.1986>:
      fc:	0a 0d 00                                            ...

000000ff <__c.2003>:
      ff:	0a 0d 53 52 51 20 64 65 74 65 63 74 65 64 2e 0a     ..SRQ detected..
     10f:	0d 00                                               ..

00000111 <__c.2033>:
     111:	0a 0d 53 52 51 73 20 61 72 65 20 64 69 73 61 62     ..SRQs are disab
     121:	6c 65 64 20 6e 6f 77 2e 0a 0d 00                    led now....

0000012c <__c.2031>:
     12c:	0a 0d 53 52 51 20 65 6d 69 74 74 65 72 20 69 73     ..SRQ emitter is
     13c:	20 6e 6f 74 20 69 6e 20 6c 69 73 74 20 6f 66 20      not in list of 
     14c:	6b 6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 20 53     known devices. S
     15c:	52 51 20 49 67 6e 6f 72 65 64 2e 0a 0d 00           RQ Ignored....

0000016a <__c.2065>:
     16a:	2e 69 20 2d 20 64 75 6d 70 20 69 6e 66 6f 20 61     .i - dump info a
     17a:	62 6f 75 74 20 47 50 49 42 20 6c 69 6e 65 73 2e     bout GPIB lines.
     18a:	0a 0d 00                                            ...

0000018d <__c.2063>:
     18d:	2e 68 20 2d 20 70 72 69 6e 74 20 68 65 6c 70 2e     .h - print help.
     19d:	0a 0d 00                                            ...

000001a0 <__c.2061>:
     1a0:	2e 78 20 2d 20 74 6f 67 67 6c 65 20 58 6f 6e 2f     .x - toggle Xon/
     1b0:	58 6f 66 66 20 66 6c 6f 77 20 63 6f 6e 74 72 6f     Xoff flow contro
     1c0:	6c 2e 0a 0d 00                                      l....

000001c5 <__c.2059>:
     1c5:	2e 2d 20 3c 6e 3e 20 2d 20 72 65 6d 6f 76 65 20     .- <n> - remove 
     1d5:	70 61 72 74 6e 65 72 20 64 65 76 69 63 65 20 61     partner device a
     1e5:	64 64 72 65 73 73 20 66 72 6f 6d 20 6c 69 73 74     ddress from list
     1f5:	20 6f 66 20 6b 6e 6f 77 6e 20 64 65 76 69 63 65      of known device
     205:	73 2e 0a 0d 00                                      s....

0000020a <__c.2057>:
     20a:	2e 2b 20 3c 6e 3e 20 2d 20 61 64 64 20 70 61 72     .+ <n> - add par
     21a:	74 6e 65 72 20 64 65 76 69 63 65 20 61 64 64 72     tner device addr
     22a:	65 73 73 20 74 6f 20 6c 69 73 74 20 6f 66 20 6b     ess to list of k
     23a:	6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 0a 0d 00     nown devices....

0000024a <__c.2055>:
     24a:	2e 73 20 3c 73 65 63 6f 6e 64 61 72 79 3e 20 2d     .s <secondary> -
     25a:	20 73 65 74 20 73 65 63 6f 6e 64 61 72 79 20 61      set secondary a
     26a:	64 64 72 65 73 73 20 6f 66 20 72 65 6d 6f 74 65     ddress of remote
     27a:	20 64 65 76 69 63 65 0a 0d 00                        device...

00000284 <__c.2053>:
     284:	49 6e 74 65 72 6e 61 6c 20 63 6f 6d 6d 61 6e 64     Internal command
     294:	73 3a 0a 0d 00                                      s:...

00000299 <__c.2085>:
     299:	0a 0d 00                                            ...

0000029c <__c.2083>:
     29c:	0a 0d 00                                            ...

0000029f <__c.2080>:
     29f:	44 65 76 69 63 65 20 61 64 64 72 65 73 73 20 69     Device address i
     2af:	73 20 6e 6f 74 20 73 65 74 2e 20 43 61 6e 20 6e     s not set. Can n
     2bf:	6f 74 20 73 65 6e 64 20 63 6f 6d 6d 61 6e 64 2e     ot send command.
     2cf:	0a 0d 00                                            ...

000002d2 <__c.2078>:
     2d2:	0a 0d 00 00                                         ....

000002d6 <__ctors_end>:
     2d6:	11 24       	eor	r1, r1
     2d8:	1f be       	out	0x3f, r1	; 63
     2da:	cf e5       	ldi	r28, 0x5F	; 95
     2dc:	d8 e0       	ldi	r29, 0x08	; 8
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	cd bf       	out	0x3d, r28	; 61

000002e2 <__do_copy_data>:
     2e2:	13 e0       	ldi	r17, 0x03	; 3
     2e4:	a0 e6       	ldi	r26, 0x60	; 96
     2e6:	b0 e0       	ldi	r27, 0x00	; 0
     2e8:	e0 e0       	ldi	r30, 0x00	; 0
     2ea:	fa e2       	ldi	r31, 0x2A	; 42
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <.do_copy_data_start>

000002ee <.do_copy_data_loop>:
     2ee:	05 90       	lpm	r0, Z+
     2f0:	0d 92       	st	X+, r0

000002f2 <.do_copy_data_start>:
     2f2:	a2 3a       	cpi	r26, 0xA2	; 162
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <.do_copy_data_loop>

000002f8 <__do_clear_bss>:
     2f8:	15 e0       	ldi	r17, 0x05	; 5
     2fa:	a2 ea       	ldi	r26, 0xA2	; 162
     2fc:	b3 e0       	ldi	r27, 0x03	; 3
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a4 31       	cpi	r26, 0x14	; 20
     304:	b1 07       	cpc	r27, r17
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 90 12 	call	0x2520	; 0x2520 <main>
     30c:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <_exit>

00000310 <__bad_interrupt>:
     310:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000314 <atoi>:
     314:	fc 01       	movw	r30, r24
     316:	88 27       	eor	r24, r24
     318:	99 27       	eor	r25, r25
     31a:	e8 94       	clt
     31c:	21 91       	ld	r18, Z+
     31e:	20 32       	cpi	r18, 0x20	; 32
     320:	e9 f3       	breq	.-6      	; 0x31c <atoi+0x8>
     322:	29 30       	cpi	r18, 0x09	; 9
     324:	10 f0       	brcs	.+4      	; 0x32a <atoi+0x16>
     326:	2e 30       	cpi	r18, 0x0E	; 14
     328:	c8 f3       	brcs	.-14     	; 0x31c <atoi+0x8>
     32a:	2b 32       	cpi	r18, 0x2B	; 43
     32c:	41 f0       	breq	.+16     	; 0x33e <atoi+0x2a>
     32e:	2d 32       	cpi	r18, 0x2D	; 45
     330:	39 f4       	brne	.+14     	; 0x340 <atoi+0x2c>
     332:	68 94       	set
     334:	04 c0       	rjmp	.+8      	; 0x33e <atoi+0x2a>
     336:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__mulhi_const_10>
     33a:	82 0f       	add	r24, r18
     33c:	91 1d       	adc	r25, r1
     33e:	21 91       	ld	r18, Z+
     340:	20 53       	subi	r18, 0x30	; 48
     342:	2a 30       	cpi	r18, 0x0A	; 10
     344:	c0 f3       	brcs	.-16     	; 0x336 <atoi+0x22>
     346:	1e f4       	brtc	.+6      	; 0x34e <atoi+0x3a>
     348:	90 95       	com	r25
     34a:	81 95       	neg	r24
     34c:	9f 4f       	sbci	r25, 0xFF	; 255
     34e:	08 95       	ret

00000350 <strtok>:
     350:	42 ea       	ldi	r20, 0xA2	; 162
     352:	53 e0       	ldi	r21, 0x03	; 3
     354:	0e 94 b6 01 	call	0x36c	; 0x36c <strtok_r>
     358:	08 95       	ret

0000035a <strlen>:
     35a:	fc 01       	movw	r30, r24
     35c:	01 90       	ld	r0, Z+
     35e:	00 20       	and	r0, r0
     360:	e9 f7       	brne	.-6      	; 0x35c <strlen+0x2>
     362:	80 95       	com	r24
     364:	90 95       	com	r25
     366:	8e 0f       	add	r24, r30
     368:	9f 1f       	adc	r25, r31
     36a:	08 95       	ret

0000036c <strtok_r>:
     36c:	00 97       	sbiw	r24, 0x00	; 0
     36e:	31 f4       	brne	.+12     	; 0x37c <strtok_r+0x10>
     370:	da 01       	movw	r26, r20
     372:	8d 91       	ld	r24, X+
     374:	9c 91       	ld	r25, X
     376:	00 97       	sbiw	r24, 0x00	; 0
     378:	09 f4       	brne	.+2      	; 0x37c <strtok_r+0x10>
     37a:	0e c0       	rjmp	.+28     	; 0x398 <strtok_r+0x2c>
     37c:	dc 01       	movw	r26, r24
     37e:	fb 01       	movw	r30, r22
     380:	3d 91       	ld	r19, X+
     382:	21 91       	ld	r18, Z+
     384:	22 23       	and	r18, r18
     386:	19 f0       	breq	.+6      	; 0x38e <strtok_r+0x22>
     388:	32 17       	cp	r19, r18
     38a:	c9 f3       	breq	.-14     	; 0x37e <strtok_r+0x12>
     38c:	fa cf       	rjmp	.-12     	; 0x382 <strtok_r+0x16>
     38e:	33 23       	and	r19, r19
     390:	31 f4       	brne	.+12     	; 0x39e <strtok_r+0x32>
     392:	da 01       	movw	r26, r20
     394:	1d 92       	st	X+, r1
     396:	1c 92       	st	X, r1
     398:	88 27       	eor	r24, r24
     39a:	99 27       	eor	r25, r25
     39c:	08 95       	ret
     39e:	11 97       	sbiw	r26, 0x01	; 1
     3a0:	af 93       	push	r26
     3a2:	bf 93       	push	r27
     3a4:	fb 01       	movw	r30, r22
     3a6:	3d 91       	ld	r19, X+
     3a8:	21 91       	ld	r18, Z+
     3aa:	32 17       	cp	r19, r18
     3ac:	71 f4       	brne	.+28     	; 0x3ca <strtok_r+0x5e>
     3ae:	33 23       	and	r19, r19
     3b0:	21 f4       	brne	.+8      	; 0x3ba <strtok_r+0x4e>
     3b2:	88 27       	eor	r24, r24
     3b4:	99 27       	eor	r25, r25
     3b6:	11 97       	sbiw	r26, 0x01	; 1
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <strtok_r+0x52>
     3ba:	1e 92       	st	-X, r1
     3bc:	11 96       	adiw	r26, 0x01	; 1
     3be:	fa 01       	movw	r30, r20
     3c0:	a1 93       	st	Z+, r26
     3c2:	b0 83       	st	Z, r27
     3c4:	9f 91       	pop	r25
     3c6:	8f 91       	pop	r24
     3c8:	08 95       	ret
     3ca:	22 23       	and	r18, r18
     3cc:	69 f7       	brne	.-38     	; 0x3a8 <strtok_r+0x3c>
     3ce:	ea cf       	rjmp	.-44     	; 0x3a4 <strtok_r+0x38>

000003d0 <__mulhi_const_10>:
     3d0:	7a e0       	ldi	r23, 0x0A	; 10
     3d2:	97 9f       	mul	r25, r23
     3d4:	90 2d       	mov	r25, r0
     3d6:	87 9f       	mul	r24, r23
     3d8:	80 2d       	mov	r24, r0
     3da:	91 0d       	add	r25, r1
     3dc:	11 24       	eor	r1, r1
     3de:	08 95       	ret

000003e0 <sprintf>:
     3e0:	ae e0       	ldi	r26, 0x0E	; 14
     3e2:	b0 e0       	ldi	r27, 0x00	; 0
     3e4:	e6 ef       	ldi	r30, 0xF6	; 246
     3e6:	f1 e0       	ldi	r31, 0x01	; 1
     3e8:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <__prologue_saves__+0x1c>
     3ec:	0d 89       	ldd	r16, Y+21	; 0x15
     3ee:	1e 89       	ldd	r17, Y+22	; 0x16
     3f0:	86 e0       	ldi	r24, 0x06	; 6
     3f2:	8c 83       	std	Y+4, r24	; 0x04
     3f4:	1a 83       	std	Y+2, r17	; 0x02
     3f6:	09 83       	std	Y+1, r16	; 0x01
     3f8:	8f ef       	ldi	r24, 0xFF	; 255
     3fa:	9f e7       	ldi	r25, 0x7F	; 127
     3fc:	9e 83       	std	Y+6, r25	; 0x06
     3fe:	8d 83       	std	Y+5, r24	; 0x05
     400:	9e 01       	movw	r18, r28
     402:	27 5e       	subi	r18, 0xE7	; 231
     404:	3f 4f       	sbci	r19, 0xFF	; 255
     406:	ce 01       	movw	r24, r28
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	6f 89       	ldd	r22, Y+23	; 0x17
     40c:	78 8d       	ldd	r23, Y+24	; 0x18
     40e:	a9 01       	movw	r20, r18
     410:	0e 94 14 02 	call	0x428	; 0x428 <vfprintf>
     414:	2f 81       	ldd	r18, Y+7	; 0x07
     416:	38 85       	ldd	r19, Y+8	; 0x08
     418:	02 0f       	add	r16, r18
     41a:	13 1f       	adc	r17, r19
     41c:	f8 01       	movw	r30, r16
     41e:	10 82       	st	Z, r1
     420:	2e 96       	adiw	r28, 0x0e	; 14
     422:	e4 e0       	ldi	r30, 0x04	; 4
     424:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__epilogue_restores__+0x1c>

00000428 <vfprintf>:
     428:	ab e0       	ldi	r26, 0x0B	; 11
     42a:	b0 e0       	ldi	r27, 0x00	; 0
     42c:	ea e1       	ldi	r30, 0x1A	; 26
     42e:	f2 e0       	ldi	r31, 0x02	; 2
     430:	0c 94 c7 14 	jmp	0x298e	; 0x298e <__prologue_saves__>
     434:	3c 01       	movw	r6, r24
     436:	2b 01       	movw	r4, r22
     438:	5a 01       	movw	r10, r20
     43a:	fc 01       	movw	r30, r24
     43c:	17 82       	std	Z+7, r1	; 0x07
     43e:	16 82       	std	Z+6, r1	; 0x06
     440:	83 81       	ldd	r24, Z+3	; 0x03
     442:	81 fd       	sbrc	r24, 1
     444:	03 c0       	rjmp	.+6      	; 0x44c <vfprintf+0x24>
     446:	6f ef       	ldi	r22, 0xFF	; 255
     448:	7f ef       	ldi	r23, 0xFF	; 255
     44a:	c6 c1       	rjmp	.+908    	; 0x7d8 <vfprintf+0x3b0>
     44c:	9a e0       	ldi	r25, 0x0A	; 10
     44e:	89 2e       	mov	r8, r25
     450:	1e 01       	movw	r2, r28
     452:	08 94       	sec
     454:	21 1c       	adc	r2, r1
     456:	31 1c       	adc	r3, r1
     458:	f3 01       	movw	r30, r6
     45a:	23 81       	ldd	r18, Z+3	; 0x03
     45c:	f2 01       	movw	r30, r4
     45e:	23 fd       	sbrc	r18, 3
     460:	85 91       	lpm	r24, Z+
     462:	23 ff       	sbrs	r18, 3
     464:	81 91       	ld	r24, Z+
     466:	2f 01       	movw	r4, r30
     468:	88 23       	and	r24, r24
     46a:	09 f4       	brne	.+2      	; 0x46e <vfprintf+0x46>
     46c:	b2 c1       	rjmp	.+868    	; 0x7d2 <vfprintf+0x3aa>
     46e:	85 32       	cpi	r24, 0x25	; 37
     470:	39 f4       	brne	.+14     	; 0x480 <vfprintf+0x58>
     472:	23 fd       	sbrc	r18, 3
     474:	85 91       	lpm	r24, Z+
     476:	23 ff       	sbrs	r18, 3
     478:	81 91       	ld	r24, Z+
     47a:	2f 01       	movw	r4, r30
     47c:	85 32       	cpi	r24, 0x25	; 37
     47e:	29 f4       	brne	.+10     	; 0x48a <vfprintf+0x62>
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	b3 01       	movw	r22, r6
     484:	0e 94 07 04 	call	0x80e	; 0x80e <fputc>
     488:	e7 cf       	rjmp	.-50     	; 0x458 <vfprintf+0x30>
     48a:	98 2f       	mov	r25, r24
     48c:	ff 24       	eor	r15, r15
     48e:	ee 24       	eor	r14, r14
     490:	99 24       	eor	r9, r9
     492:	ff e1       	ldi	r31, 0x1F	; 31
     494:	ff 15       	cp	r31, r15
     496:	d0 f0       	brcs	.+52     	; 0x4cc <vfprintf+0xa4>
     498:	9b 32       	cpi	r25, 0x2B	; 43
     49a:	69 f0       	breq	.+26     	; 0x4b6 <vfprintf+0x8e>
     49c:	9c 32       	cpi	r25, 0x2C	; 44
     49e:	28 f4       	brcc	.+10     	; 0x4aa <vfprintf+0x82>
     4a0:	90 32       	cpi	r25, 0x20	; 32
     4a2:	59 f0       	breq	.+22     	; 0x4ba <vfprintf+0x92>
     4a4:	93 32       	cpi	r25, 0x23	; 35
     4a6:	91 f4       	brne	.+36     	; 0x4cc <vfprintf+0xa4>
     4a8:	0e c0       	rjmp	.+28     	; 0x4c6 <vfprintf+0x9e>
     4aa:	9d 32       	cpi	r25, 0x2D	; 45
     4ac:	49 f0       	breq	.+18     	; 0x4c0 <vfprintf+0x98>
     4ae:	90 33       	cpi	r25, 0x30	; 48
     4b0:	69 f4       	brne	.+26     	; 0x4cc <vfprintf+0xa4>
     4b2:	41 e0       	ldi	r20, 0x01	; 1
     4b4:	24 c0       	rjmp	.+72     	; 0x4fe <vfprintf+0xd6>
     4b6:	52 e0       	ldi	r21, 0x02	; 2
     4b8:	f5 2a       	or	r15, r21
     4ba:	84 e0       	ldi	r24, 0x04	; 4
     4bc:	f8 2a       	or	r15, r24
     4be:	28 c0       	rjmp	.+80     	; 0x510 <vfprintf+0xe8>
     4c0:	98 e0       	ldi	r25, 0x08	; 8
     4c2:	f9 2a       	or	r15, r25
     4c4:	25 c0       	rjmp	.+74     	; 0x510 <vfprintf+0xe8>
     4c6:	e0 e1       	ldi	r30, 0x10	; 16
     4c8:	fe 2a       	or	r15, r30
     4ca:	22 c0       	rjmp	.+68     	; 0x510 <vfprintf+0xe8>
     4cc:	f7 fc       	sbrc	r15, 7
     4ce:	29 c0       	rjmp	.+82     	; 0x522 <vfprintf+0xfa>
     4d0:	89 2f       	mov	r24, r25
     4d2:	80 53       	subi	r24, 0x30	; 48
     4d4:	8a 30       	cpi	r24, 0x0A	; 10
     4d6:	70 f4       	brcc	.+28     	; 0x4f4 <vfprintf+0xcc>
     4d8:	f6 fe       	sbrs	r15, 6
     4da:	05 c0       	rjmp	.+10     	; 0x4e6 <vfprintf+0xbe>
     4dc:	98 9c       	mul	r9, r8
     4de:	90 2c       	mov	r9, r0
     4e0:	11 24       	eor	r1, r1
     4e2:	98 0e       	add	r9, r24
     4e4:	15 c0       	rjmp	.+42     	; 0x510 <vfprintf+0xe8>
     4e6:	e8 9c       	mul	r14, r8
     4e8:	e0 2c       	mov	r14, r0
     4ea:	11 24       	eor	r1, r1
     4ec:	e8 0e       	add	r14, r24
     4ee:	f0 e2       	ldi	r31, 0x20	; 32
     4f0:	ff 2a       	or	r15, r31
     4f2:	0e c0       	rjmp	.+28     	; 0x510 <vfprintf+0xe8>
     4f4:	9e 32       	cpi	r25, 0x2E	; 46
     4f6:	29 f4       	brne	.+10     	; 0x502 <vfprintf+0xda>
     4f8:	f6 fc       	sbrc	r15, 6
     4fa:	6b c1       	rjmp	.+726    	; 0x7d2 <vfprintf+0x3aa>
     4fc:	40 e4       	ldi	r20, 0x40	; 64
     4fe:	f4 2a       	or	r15, r20
     500:	07 c0       	rjmp	.+14     	; 0x510 <vfprintf+0xe8>
     502:	9c 36       	cpi	r25, 0x6C	; 108
     504:	19 f4       	brne	.+6      	; 0x50c <vfprintf+0xe4>
     506:	50 e8       	ldi	r21, 0x80	; 128
     508:	f5 2a       	or	r15, r21
     50a:	02 c0       	rjmp	.+4      	; 0x510 <vfprintf+0xe8>
     50c:	98 36       	cpi	r25, 0x68	; 104
     50e:	49 f4       	brne	.+18     	; 0x522 <vfprintf+0xfa>
     510:	f2 01       	movw	r30, r4
     512:	23 fd       	sbrc	r18, 3
     514:	95 91       	lpm	r25, Z+
     516:	23 ff       	sbrs	r18, 3
     518:	91 91       	ld	r25, Z+
     51a:	2f 01       	movw	r4, r30
     51c:	99 23       	and	r25, r25
     51e:	09 f0       	breq	.+2      	; 0x522 <vfprintf+0xfa>
     520:	b8 cf       	rjmp	.-144    	; 0x492 <vfprintf+0x6a>
     522:	89 2f       	mov	r24, r25
     524:	85 54       	subi	r24, 0x45	; 69
     526:	83 30       	cpi	r24, 0x03	; 3
     528:	18 f0       	brcs	.+6      	; 0x530 <vfprintf+0x108>
     52a:	80 52       	subi	r24, 0x20	; 32
     52c:	83 30       	cpi	r24, 0x03	; 3
     52e:	38 f4       	brcc	.+14     	; 0x53e <vfprintf+0x116>
     530:	44 e0       	ldi	r20, 0x04	; 4
     532:	50 e0       	ldi	r21, 0x00	; 0
     534:	a4 0e       	add	r10, r20
     536:	b5 1e       	adc	r11, r21
     538:	5f e3       	ldi	r21, 0x3F	; 63
     53a:	59 83       	std	Y+1, r21	; 0x01
     53c:	0f c0       	rjmp	.+30     	; 0x55c <vfprintf+0x134>
     53e:	93 36       	cpi	r25, 0x63	; 99
     540:	31 f0       	breq	.+12     	; 0x54e <vfprintf+0x126>
     542:	93 37       	cpi	r25, 0x73	; 115
     544:	79 f0       	breq	.+30     	; 0x564 <vfprintf+0x13c>
     546:	93 35       	cpi	r25, 0x53	; 83
     548:	09 f0       	breq	.+2      	; 0x54c <vfprintf+0x124>
     54a:	56 c0       	rjmp	.+172    	; 0x5f8 <vfprintf+0x1d0>
     54c:	20 c0       	rjmp	.+64     	; 0x58e <vfprintf+0x166>
     54e:	f5 01       	movw	r30, r10
     550:	80 81       	ld	r24, Z
     552:	89 83       	std	Y+1, r24	; 0x01
     554:	42 e0       	ldi	r20, 0x02	; 2
     556:	50 e0       	ldi	r21, 0x00	; 0
     558:	a4 0e       	add	r10, r20
     55a:	b5 1e       	adc	r11, r21
     55c:	61 01       	movw	r12, r2
     55e:	01 e0       	ldi	r16, 0x01	; 1
     560:	10 e0       	ldi	r17, 0x00	; 0
     562:	12 c0       	rjmp	.+36     	; 0x588 <vfprintf+0x160>
     564:	f5 01       	movw	r30, r10
     566:	c0 80       	ld	r12, Z
     568:	d1 80       	ldd	r13, Z+1	; 0x01
     56a:	f6 fc       	sbrc	r15, 6
     56c:	03 c0       	rjmp	.+6      	; 0x574 <vfprintf+0x14c>
     56e:	6f ef       	ldi	r22, 0xFF	; 255
     570:	7f ef       	ldi	r23, 0xFF	; 255
     572:	02 c0       	rjmp	.+4      	; 0x578 <vfprintf+0x150>
     574:	69 2d       	mov	r22, r9
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	42 e0       	ldi	r20, 0x02	; 2
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	a4 0e       	add	r10, r20
     57e:	b5 1e       	adc	r11, r21
     580:	c6 01       	movw	r24, r12
     582:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <strnlen>
     586:	8c 01       	movw	r16, r24
     588:	5f e7       	ldi	r21, 0x7F	; 127
     58a:	f5 22       	and	r15, r21
     58c:	14 c0       	rjmp	.+40     	; 0x5b6 <vfprintf+0x18e>
     58e:	f5 01       	movw	r30, r10
     590:	c0 80       	ld	r12, Z
     592:	d1 80       	ldd	r13, Z+1	; 0x01
     594:	f6 fc       	sbrc	r15, 6
     596:	03 c0       	rjmp	.+6      	; 0x59e <vfprintf+0x176>
     598:	6f ef       	ldi	r22, 0xFF	; 255
     59a:	7f ef       	ldi	r23, 0xFF	; 255
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <vfprintf+0x17a>
     59e:	69 2d       	mov	r22, r9
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	42 e0       	ldi	r20, 0x02	; 2
     5a4:	50 e0       	ldi	r21, 0x00	; 0
     5a6:	a4 0e       	add	r10, r20
     5a8:	b5 1e       	adc	r11, r21
     5aa:	c6 01       	movw	r24, r12
     5ac:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <strnlen_P>
     5b0:	8c 01       	movw	r16, r24
     5b2:	50 e8       	ldi	r21, 0x80	; 128
     5b4:	f5 2a       	or	r15, r21
     5b6:	f3 fe       	sbrs	r15, 3
     5b8:	07 c0       	rjmp	.+14     	; 0x5c8 <vfprintf+0x1a0>
     5ba:	1a c0       	rjmp	.+52     	; 0x5f0 <vfprintf+0x1c8>
     5bc:	80 e2       	ldi	r24, 0x20	; 32
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	b3 01       	movw	r22, r6
     5c2:	0e 94 07 04 	call	0x80e	; 0x80e <fputc>
     5c6:	ea 94       	dec	r14
     5c8:	8e 2d       	mov	r24, r14
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	08 17       	cp	r16, r24
     5ce:	19 07       	cpc	r17, r25
     5d0:	a8 f3       	brcs	.-22     	; 0x5bc <vfprintf+0x194>
     5d2:	0e c0       	rjmp	.+28     	; 0x5f0 <vfprintf+0x1c8>
     5d4:	f6 01       	movw	r30, r12
     5d6:	f7 fc       	sbrc	r15, 7
     5d8:	85 91       	lpm	r24, Z+
     5da:	f7 fe       	sbrs	r15, 7
     5dc:	81 91       	ld	r24, Z+
     5de:	6f 01       	movw	r12, r30
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	b3 01       	movw	r22, r6
     5e4:	0e 94 07 04 	call	0x80e	; 0x80e <fputc>
     5e8:	e1 10       	cpse	r14, r1
     5ea:	ea 94       	dec	r14
     5ec:	01 50       	subi	r16, 0x01	; 1
     5ee:	10 40       	sbci	r17, 0x00	; 0
     5f0:	01 15       	cp	r16, r1
     5f2:	11 05       	cpc	r17, r1
     5f4:	79 f7       	brne	.-34     	; 0x5d4 <vfprintf+0x1ac>
     5f6:	ea c0       	rjmp	.+468    	; 0x7cc <vfprintf+0x3a4>
     5f8:	94 36       	cpi	r25, 0x64	; 100
     5fa:	11 f0       	breq	.+4      	; 0x600 <vfprintf+0x1d8>
     5fc:	99 36       	cpi	r25, 0x69	; 105
     5fe:	69 f5       	brne	.+90     	; 0x65a <vfprintf+0x232>
     600:	f7 fe       	sbrs	r15, 7
     602:	08 c0       	rjmp	.+16     	; 0x614 <vfprintf+0x1ec>
     604:	f5 01       	movw	r30, r10
     606:	20 81       	ld	r18, Z
     608:	31 81       	ldd	r19, Z+1	; 0x01
     60a:	42 81       	ldd	r20, Z+2	; 0x02
     60c:	53 81       	ldd	r21, Z+3	; 0x03
     60e:	84 e0       	ldi	r24, 0x04	; 4
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0a c0       	rjmp	.+20     	; 0x628 <vfprintf+0x200>
     614:	f5 01       	movw	r30, r10
     616:	80 81       	ld	r24, Z
     618:	91 81       	ldd	r25, Z+1	; 0x01
     61a:	9c 01       	movw	r18, r24
     61c:	44 27       	eor	r20, r20
     61e:	37 fd       	sbrc	r19, 7
     620:	40 95       	com	r20
     622:	54 2f       	mov	r21, r20
     624:	82 e0       	ldi	r24, 0x02	; 2
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	a8 0e       	add	r10, r24
     62a:	b9 1e       	adc	r11, r25
     62c:	9f e6       	ldi	r25, 0x6F	; 111
     62e:	f9 22       	and	r15, r25
     630:	57 ff       	sbrs	r21, 7
     632:	09 c0       	rjmp	.+18     	; 0x646 <vfprintf+0x21e>
     634:	50 95       	com	r21
     636:	40 95       	com	r20
     638:	30 95       	com	r19
     63a:	21 95       	neg	r18
     63c:	3f 4f       	sbci	r19, 0xFF	; 255
     63e:	4f 4f       	sbci	r20, 0xFF	; 255
     640:	5f 4f       	sbci	r21, 0xFF	; 255
     642:	e0 e8       	ldi	r30, 0x80	; 128
     644:	fe 2a       	or	r15, r30
     646:	ca 01       	movw	r24, r20
     648:	b9 01       	movw	r22, r18
     64a:	a1 01       	movw	r20, r2
     64c:	2a e0       	ldi	r18, 0x0A	; 10
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	0e 94 33 04 	call	0x866	; 0x866 <__ultoa_invert>
     654:	d8 2e       	mov	r13, r24
     656:	d2 18       	sub	r13, r2
     658:	40 c0       	rjmp	.+128    	; 0x6da <vfprintf+0x2b2>
     65a:	95 37       	cpi	r25, 0x75	; 117
     65c:	29 f4       	brne	.+10     	; 0x668 <vfprintf+0x240>
     65e:	1f 2d       	mov	r17, r15
     660:	1f 7e       	andi	r17, 0xEF	; 239
     662:	2a e0       	ldi	r18, 0x0A	; 10
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	1d c0       	rjmp	.+58     	; 0x6a2 <vfprintf+0x27a>
     668:	1f 2d       	mov	r17, r15
     66a:	19 7f       	andi	r17, 0xF9	; 249
     66c:	9f 36       	cpi	r25, 0x6F	; 111
     66e:	61 f0       	breq	.+24     	; 0x688 <vfprintf+0x260>
     670:	90 37       	cpi	r25, 0x70	; 112
     672:	20 f4       	brcc	.+8      	; 0x67c <vfprintf+0x254>
     674:	98 35       	cpi	r25, 0x58	; 88
     676:	09 f0       	breq	.+2      	; 0x67a <vfprintf+0x252>
     678:	ac c0       	rjmp	.+344    	; 0x7d2 <vfprintf+0x3aa>
     67a:	0f c0       	rjmp	.+30     	; 0x69a <vfprintf+0x272>
     67c:	90 37       	cpi	r25, 0x70	; 112
     67e:	39 f0       	breq	.+14     	; 0x68e <vfprintf+0x266>
     680:	98 37       	cpi	r25, 0x78	; 120
     682:	09 f0       	breq	.+2      	; 0x686 <vfprintf+0x25e>
     684:	a6 c0       	rjmp	.+332    	; 0x7d2 <vfprintf+0x3aa>
     686:	04 c0       	rjmp	.+8      	; 0x690 <vfprintf+0x268>
     688:	28 e0       	ldi	r18, 0x08	; 8
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	0a c0       	rjmp	.+20     	; 0x6a2 <vfprintf+0x27a>
     68e:	10 61       	ori	r17, 0x10	; 16
     690:	14 fd       	sbrc	r17, 4
     692:	14 60       	ori	r17, 0x04	; 4
     694:	20 e1       	ldi	r18, 0x10	; 16
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	04 c0       	rjmp	.+8      	; 0x6a2 <vfprintf+0x27a>
     69a:	14 fd       	sbrc	r17, 4
     69c:	16 60       	ori	r17, 0x06	; 6
     69e:	20 e1       	ldi	r18, 0x10	; 16
     6a0:	32 e0       	ldi	r19, 0x02	; 2
     6a2:	17 ff       	sbrs	r17, 7
     6a4:	08 c0       	rjmp	.+16     	; 0x6b6 <vfprintf+0x28e>
     6a6:	f5 01       	movw	r30, r10
     6a8:	60 81       	ld	r22, Z
     6aa:	71 81       	ldd	r23, Z+1	; 0x01
     6ac:	82 81       	ldd	r24, Z+2	; 0x02
     6ae:	93 81       	ldd	r25, Z+3	; 0x03
     6b0:	44 e0       	ldi	r20, 0x04	; 4
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	08 c0       	rjmp	.+16     	; 0x6c6 <vfprintf+0x29e>
     6b6:	f5 01       	movw	r30, r10
     6b8:	80 81       	ld	r24, Z
     6ba:	91 81       	ldd	r25, Z+1	; 0x01
     6bc:	bc 01       	movw	r22, r24
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	42 e0       	ldi	r20, 0x02	; 2
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	a4 0e       	add	r10, r20
     6c8:	b5 1e       	adc	r11, r21
     6ca:	a1 01       	movw	r20, r2
     6cc:	0e 94 33 04 	call	0x866	; 0x866 <__ultoa_invert>
     6d0:	d8 2e       	mov	r13, r24
     6d2:	d2 18       	sub	r13, r2
     6d4:	8f e7       	ldi	r24, 0x7F	; 127
     6d6:	f8 2e       	mov	r15, r24
     6d8:	f1 22       	and	r15, r17
     6da:	f6 fe       	sbrs	r15, 6
     6dc:	0b c0       	rjmp	.+22     	; 0x6f4 <vfprintf+0x2cc>
     6de:	5e ef       	ldi	r21, 0xFE	; 254
     6e0:	f5 22       	and	r15, r21
     6e2:	d9 14       	cp	r13, r9
     6e4:	38 f4       	brcc	.+14     	; 0x6f4 <vfprintf+0x2cc>
     6e6:	f4 fe       	sbrs	r15, 4
     6e8:	07 c0       	rjmp	.+14     	; 0x6f8 <vfprintf+0x2d0>
     6ea:	f2 fc       	sbrc	r15, 2
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <vfprintf+0x2d0>
     6ee:	8f ee       	ldi	r24, 0xEF	; 239
     6f0:	f8 22       	and	r15, r24
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <vfprintf+0x2d0>
     6f4:	1d 2d       	mov	r17, r13
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <vfprintf+0x2d2>
     6f8:	19 2d       	mov	r17, r9
     6fa:	f4 fe       	sbrs	r15, 4
     6fc:	0d c0       	rjmp	.+26     	; 0x718 <vfprintf+0x2f0>
     6fe:	fe 01       	movw	r30, r28
     700:	ed 0d       	add	r30, r13
     702:	f1 1d       	adc	r31, r1
     704:	80 81       	ld	r24, Z
     706:	80 33       	cpi	r24, 0x30	; 48
     708:	19 f4       	brne	.+6      	; 0x710 <vfprintf+0x2e8>
     70a:	99 ee       	ldi	r25, 0xE9	; 233
     70c:	f9 22       	and	r15, r25
     70e:	08 c0       	rjmp	.+16     	; 0x720 <vfprintf+0x2f8>
     710:	1f 5f       	subi	r17, 0xFF	; 255
     712:	f2 fe       	sbrs	r15, 2
     714:	05 c0       	rjmp	.+10     	; 0x720 <vfprintf+0x2f8>
     716:	03 c0       	rjmp	.+6      	; 0x71e <vfprintf+0x2f6>
     718:	8f 2d       	mov	r24, r15
     71a:	86 78       	andi	r24, 0x86	; 134
     71c:	09 f0       	breq	.+2      	; 0x720 <vfprintf+0x2f8>
     71e:	1f 5f       	subi	r17, 0xFF	; 255
     720:	0f 2d       	mov	r16, r15
     722:	f3 fc       	sbrc	r15, 3
     724:	14 c0       	rjmp	.+40     	; 0x74e <vfprintf+0x326>
     726:	f0 fe       	sbrs	r15, 0
     728:	0f c0       	rjmp	.+30     	; 0x748 <vfprintf+0x320>
     72a:	1e 15       	cp	r17, r14
     72c:	10 f0       	brcs	.+4      	; 0x732 <vfprintf+0x30a>
     72e:	9d 2c       	mov	r9, r13
     730:	0b c0       	rjmp	.+22     	; 0x748 <vfprintf+0x320>
     732:	9d 2c       	mov	r9, r13
     734:	9e 0c       	add	r9, r14
     736:	91 1a       	sub	r9, r17
     738:	1e 2d       	mov	r17, r14
     73a:	06 c0       	rjmp	.+12     	; 0x748 <vfprintf+0x320>
     73c:	80 e2       	ldi	r24, 0x20	; 32
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	b3 01       	movw	r22, r6
     742:	0e 94 07 04 	call	0x80e	; 0x80e <fputc>
     746:	1f 5f       	subi	r17, 0xFF	; 255
     748:	1e 15       	cp	r17, r14
     74a:	c0 f3       	brcs	.-16     	; 0x73c <vfprintf+0x314>
     74c:	04 c0       	rjmp	.+8      	; 0x756 <vfprintf+0x32e>
     74e:	1e 15       	cp	r17, r14
     750:	10 f4       	brcc	.+4      	; 0x756 <vfprintf+0x32e>
     752:	e1 1a       	sub	r14, r17
     754:	01 c0       	rjmp	.+2      	; 0x758 <vfprintf+0x330>
     756:	ee 24       	eor	r14, r14
     758:	04 ff       	sbrs	r16, 4
     75a:	0f c0       	rjmp	.+30     	; 0x77a <vfprintf+0x352>
     75c:	80 e3       	ldi	r24, 0x30	; 48
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	b3 01       	movw	r22, r6
     762:	0e 94 07 04 	call	0x80e	; 0x80e <fputc>
     766:	02 ff       	sbrs	r16, 2
     768:	1d c0       	rjmp	.+58     	; 0x7a4 <vfprintf+0x37c>
     76a:	01 fd       	sbrc	r16, 1
     76c:	03 c0       	rjmp	.+6      	; 0x774 <vfprintf+0x34c>
     76e:	88 e7       	ldi	r24, 0x78	; 120
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e c0       	rjmp	.+28     	; 0x790 <vfprintf+0x368>
     774:	88 e5       	ldi	r24, 0x58	; 88
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0b c0       	rjmp	.+22     	; 0x790 <vfprintf+0x368>
     77a:	80 2f       	mov	r24, r16
     77c:	86 78       	andi	r24, 0x86	; 134
     77e:	91 f0       	breq	.+36     	; 0x7a4 <vfprintf+0x37c>
     780:	01 ff       	sbrs	r16, 1
     782:	02 c0       	rjmp	.+4      	; 0x788 <vfprintf+0x360>
     784:	8b e2       	ldi	r24, 0x2B	; 43
     786:	01 c0       	rjmp	.+2      	; 0x78a <vfprintf+0x362>
     788:	80 e2       	ldi	r24, 0x20	; 32
     78a:	f7 fc       	sbrc	r15, 7
     78c:	8d e2       	ldi	r24, 0x2D	; 45
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	b3 01       	movw	r22, r6
     792:	0e 94 07 04 	call	0x80e	; 0x80e <fputc>
     796:	06 c0       	rjmp	.+12     	; 0x7a4 <vfprintf+0x37c>
     798:	80 e3       	ldi	r24, 0x30	; 48
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	b3 01       	movw	r22, r6
     79e:	0e 94 07 04 	call	0x80e	; 0x80e <fputc>
     7a2:	9a 94       	dec	r9
     7a4:	d9 14       	cp	r13, r9
     7a6:	c0 f3       	brcs	.-16     	; 0x798 <vfprintf+0x370>
     7a8:	da 94       	dec	r13
     7aa:	f1 01       	movw	r30, r2
     7ac:	ed 0d       	add	r30, r13
     7ae:	f1 1d       	adc	r31, r1
     7b0:	80 81       	ld	r24, Z
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	b3 01       	movw	r22, r6
     7b6:	0e 94 07 04 	call	0x80e	; 0x80e <fputc>
     7ba:	dd 20       	and	r13, r13
     7bc:	a9 f7       	brne	.-22     	; 0x7a8 <vfprintf+0x380>
     7be:	06 c0       	rjmp	.+12     	; 0x7cc <vfprintf+0x3a4>
     7c0:	80 e2       	ldi	r24, 0x20	; 32
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	b3 01       	movw	r22, r6
     7c6:	0e 94 07 04 	call	0x80e	; 0x80e <fputc>
     7ca:	ea 94       	dec	r14
     7cc:	ee 20       	and	r14, r14
     7ce:	c1 f7       	brne	.-16     	; 0x7c0 <vfprintf+0x398>
     7d0:	43 ce       	rjmp	.-890    	; 0x458 <vfprintf+0x30>
     7d2:	f3 01       	movw	r30, r6
     7d4:	66 81       	ldd	r22, Z+6	; 0x06
     7d6:	77 81       	ldd	r23, Z+7	; 0x07
     7d8:	cb 01       	movw	r24, r22
     7da:	2b 96       	adiw	r28, 0x0b	; 11
     7dc:	e2 e1       	ldi	r30, 0x12	; 18
     7de:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <__epilogue_restores__>

000007e2 <strnlen_P>:
     7e2:	fc 01       	movw	r30, r24
     7e4:	05 90       	lpm	r0, Z+
     7e6:	61 50       	subi	r22, 0x01	; 1
     7e8:	70 40       	sbci	r23, 0x00	; 0
     7ea:	01 10       	cpse	r0, r1
     7ec:	d8 f7       	brcc	.-10     	; 0x7e4 <strnlen_P+0x2>
     7ee:	80 95       	com	r24
     7f0:	90 95       	com	r25
     7f2:	8e 0f       	add	r24, r30
     7f4:	9f 1f       	adc	r25, r31
     7f6:	08 95       	ret

000007f8 <strnlen>:
     7f8:	fc 01       	movw	r30, r24
     7fa:	61 50       	subi	r22, 0x01	; 1
     7fc:	70 40       	sbci	r23, 0x00	; 0
     7fe:	01 90       	ld	r0, Z+
     800:	01 10       	cpse	r0, r1
     802:	d8 f7       	brcc	.-10     	; 0x7fa <strnlen+0x2>
     804:	80 95       	com	r24
     806:	90 95       	com	r25
     808:	8e 0f       	add	r24, r30
     80a:	9f 1f       	adc	r25, r31
     80c:	08 95       	ret

0000080e <fputc>:
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	8c 01       	movw	r16, r24
     818:	eb 01       	movw	r28, r22
     81a:	8b 81       	ldd	r24, Y+3	; 0x03
     81c:	81 ff       	sbrs	r24, 1
     81e:	1b c0       	rjmp	.+54     	; 0x856 <fputc+0x48>
     820:	82 ff       	sbrs	r24, 2
     822:	0d c0       	rjmp	.+26     	; 0x83e <fputc+0x30>
     824:	2e 81       	ldd	r18, Y+6	; 0x06
     826:	3f 81       	ldd	r19, Y+7	; 0x07
     828:	8c 81       	ldd	r24, Y+4	; 0x04
     82a:	9d 81       	ldd	r25, Y+5	; 0x05
     82c:	28 17       	cp	r18, r24
     82e:	39 07       	cpc	r19, r25
     830:	64 f4       	brge	.+24     	; 0x84a <fputc+0x3c>
     832:	e8 81       	ld	r30, Y
     834:	f9 81       	ldd	r31, Y+1	; 0x01
     836:	01 93       	st	Z+, r16
     838:	f9 83       	std	Y+1, r31	; 0x01
     83a:	e8 83       	st	Y, r30
     83c:	06 c0       	rjmp	.+12     	; 0x84a <fputc+0x3c>
     83e:	e8 85       	ldd	r30, Y+8	; 0x08
     840:	f9 85       	ldd	r31, Y+9	; 0x09
     842:	80 2f       	mov	r24, r16
     844:	09 95       	icall
     846:	89 2b       	or	r24, r25
     848:	31 f4       	brne	.+12     	; 0x856 <fputc+0x48>
     84a:	8e 81       	ldd	r24, Y+6	; 0x06
     84c:	9f 81       	ldd	r25, Y+7	; 0x07
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	9f 83       	std	Y+7, r25	; 0x07
     852:	8e 83       	std	Y+6, r24	; 0x06
     854:	02 c0       	rjmp	.+4      	; 0x85a <fputc+0x4c>
     856:	0f ef       	ldi	r16, 0xFF	; 255
     858:	1f ef       	ldi	r17, 0xFF	; 255
     85a:	c8 01       	movw	r24, r16
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	08 95       	ret

00000866 <__ultoa_invert>:
     866:	fa 01       	movw	r30, r20
     868:	aa 27       	eor	r26, r26
     86a:	28 30       	cpi	r18, 0x08	; 8
     86c:	51 f1       	breq	.+84     	; 0x8c2 <__ultoa_invert+0x5c>
     86e:	20 31       	cpi	r18, 0x10	; 16
     870:	81 f1       	breq	.+96     	; 0x8d2 <__ultoa_invert+0x6c>
     872:	e8 94       	clt
     874:	6f 93       	push	r22
     876:	6e 7f       	andi	r22, 0xFE	; 254
     878:	6e 5f       	subi	r22, 0xFE	; 254
     87a:	7f 4f       	sbci	r23, 0xFF	; 255
     87c:	8f 4f       	sbci	r24, 0xFF	; 255
     87e:	9f 4f       	sbci	r25, 0xFF	; 255
     880:	af 4f       	sbci	r26, 0xFF	; 255
     882:	b1 e0       	ldi	r27, 0x01	; 1
     884:	3e d0       	rcall	.+124    	; 0x902 <__ultoa_invert+0x9c>
     886:	b4 e0       	ldi	r27, 0x04	; 4
     888:	3c d0       	rcall	.+120    	; 0x902 <__ultoa_invert+0x9c>
     88a:	67 0f       	add	r22, r23
     88c:	78 1f       	adc	r23, r24
     88e:	89 1f       	adc	r24, r25
     890:	9a 1f       	adc	r25, r26
     892:	a1 1d       	adc	r26, r1
     894:	68 0f       	add	r22, r24
     896:	79 1f       	adc	r23, r25
     898:	8a 1f       	adc	r24, r26
     89a:	91 1d       	adc	r25, r1
     89c:	a1 1d       	adc	r26, r1
     89e:	6a 0f       	add	r22, r26
     8a0:	71 1d       	adc	r23, r1
     8a2:	81 1d       	adc	r24, r1
     8a4:	91 1d       	adc	r25, r1
     8a6:	a1 1d       	adc	r26, r1
     8a8:	20 d0       	rcall	.+64     	; 0x8ea <__ultoa_invert+0x84>
     8aa:	09 f4       	brne	.+2      	; 0x8ae <__ultoa_invert+0x48>
     8ac:	68 94       	set
     8ae:	3f 91       	pop	r19
     8b0:	2a e0       	ldi	r18, 0x0A	; 10
     8b2:	26 9f       	mul	r18, r22
     8b4:	11 24       	eor	r1, r1
     8b6:	30 19       	sub	r19, r0
     8b8:	30 5d       	subi	r19, 0xD0	; 208
     8ba:	31 93       	st	Z+, r19
     8bc:	de f6       	brtc	.-74     	; 0x874 <__ultoa_invert+0xe>
     8be:	cf 01       	movw	r24, r30
     8c0:	08 95       	ret
     8c2:	46 2f       	mov	r20, r22
     8c4:	47 70       	andi	r20, 0x07	; 7
     8c6:	40 5d       	subi	r20, 0xD0	; 208
     8c8:	41 93       	st	Z+, r20
     8ca:	b3 e0       	ldi	r27, 0x03	; 3
     8cc:	0f d0       	rcall	.+30     	; 0x8ec <__ultoa_invert+0x86>
     8ce:	c9 f7       	brne	.-14     	; 0x8c2 <__ultoa_invert+0x5c>
     8d0:	f6 cf       	rjmp	.-20     	; 0x8be <__ultoa_invert+0x58>
     8d2:	46 2f       	mov	r20, r22
     8d4:	4f 70       	andi	r20, 0x0F	; 15
     8d6:	40 5d       	subi	r20, 0xD0	; 208
     8d8:	4a 33       	cpi	r20, 0x3A	; 58
     8da:	18 f0       	brcs	.+6      	; 0x8e2 <__ultoa_invert+0x7c>
     8dc:	49 5d       	subi	r20, 0xD9	; 217
     8de:	31 fd       	sbrc	r19, 1
     8e0:	40 52       	subi	r20, 0x20	; 32
     8e2:	41 93       	st	Z+, r20
     8e4:	02 d0       	rcall	.+4      	; 0x8ea <__ultoa_invert+0x84>
     8e6:	a9 f7       	brne	.-22     	; 0x8d2 <__ultoa_invert+0x6c>
     8e8:	ea cf       	rjmp	.-44     	; 0x8be <__ultoa_invert+0x58>
     8ea:	b4 e0       	ldi	r27, 0x04	; 4
     8ec:	a6 95       	lsr	r26
     8ee:	97 95       	ror	r25
     8f0:	87 95       	ror	r24
     8f2:	77 95       	ror	r23
     8f4:	67 95       	ror	r22
     8f6:	ba 95       	dec	r27
     8f8:	c9 f7       	brne	.-14     	; 0x8ec <__ultoa_invert+0x86>
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	61 05       	cpc	r22, r1
     8fe:	71 05       	cpc	r23, r1
     900:	08 95       	ret
     902:	9b 01       	movw	r18, r22
     904:	ac 01       	movw	r20, r24
     906:	0a 2e       	mov	r0, r26
     908:	06 94       	lsr	r0
     90a:	57 95       	ror	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	ba 95       	dec	r27
     914:	c9 f7       	brne	.-14     	; 0x908 <__ultoa_invert+0xa2>
     916:	62 0f       	add	r22, r18
     918:	73 1f       	adc	r23, r19
     91a:	84 1f       	adc	r24, r20
     91c:	95 1f       	adc	r25, r21
     91e:	a0 1d       	adc	r26, r0
     920:	08 95       	ret

00000922 <delay_ms>:
uchar cmd_buf[100];

/**
 * Some basic delay function
 */
void delay_ms(unsigned short ms) {
     922:	df 93       	push	r29
     924:	cf 93       	push	r28
     926:	00 d0       	rcall	.+0      	; 0x928 <delay_ms+0x6>
     928:	00 d0       	rcall	.+0      	; 0x92a <delay_ms+0x8>
     92a:	00 d0       	rcall	.+0      	; 0x92c <delay_ms+0xa>
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	9e 83       	std	Y+6, r25	; 0x06
     932:	8d 83       	std	Y+5, r24	; 0x05
	unsigned short outer1, outer2;
	outer1 = 200 * 12;
     934:	80 e6       	ldi	r24, 0x60	; 96
     936:	99 e0       	ldi	r25, 0x09	; 9
     938:	9c 83       	std	Y+4, r25	; 0x04
     93a:	8b 83       	std	Y+3, r24	; 0x03
     93c:	1c c0       	rjmp	.+56     	; 0x976 <delay_ms+0x54>

	while (outer1) {
		outer2 = 100;
     93e:	84 e6       	ldi	r24, 0x64	; 100
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	9a 83       	std	Y+2, r25	; 0x02
     944:	89 83       	std	Y+1, r24	; 0x01
     946:	0e c0       	rjmp	.+28     	; 0x964 <delay_ms+0x42>
		while (outer2) {
			while (ms)
				ms--;
     948:	8d 81       	ldd	r24, Y+5	; 0x05
     94a:	9e 81       	ldd	r25, Y+6	; 0x06
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	9e 83       	std	Y+6, r25	; 0x06
     950:	8d 83       	std	Y+5, r24	; 0x05
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
			while (ms)
     952:	8d 81       	ldd	r24, Y+5	; 0x05
     954:	9e 81       	ldd	r25, Y+6	; 0x06
     956:	00 97       	sbiw	r24, 0x00	; 0
     958:	b9 f7       	brne	.-18     	; 0x948 <delay_ms+0x26>
				ms--;
			outer2--;
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	9a 81       	ldd	r25, Y+2	; 0x02
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	9a 83       	std	Y+2, r25	; 0x02
     962:	89 83       	std	Y+1, r24	; 0x01
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
     964:	89 81       	ldd	r24, Y+1	; 0x01
     966:	9a 81       	ldd	r25, Y+2	; 0x02
     968:	00 97       	sbiw	r24, 0x00	; 0
     96a:	99 f7       	brne	.-26     	; 0x952 <delay_ms+0x30>
			while (ms)
				ms--;
			outer2--;
		}
		outer1--;
     96c:	8b 81       	ldd	r24, Y+3	; 0x03
     96e:	9c 81       	ldd	r25, Y+4	; 0x04
     970:	01 97       	sbiw	r24, 0x01	; 1
     972:	9c 83       	std	Y+4, r25	; 0x04
     974:	8b 83       	std	Y+3, r24	; 0x03
 */
void delay_ms(unsigned short ms) {
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
     976:	8b 81       	ldd	r24, Y+3	; 0x03
     978:	9c 81       	ldd	r25, Y+4	; 0x04
     97a:	00 97       	sbiw	r24, 0x00	; 0
     97c:	01 f7       	brne	.-64     	; 0x93e <delay_ms+0x1c>
				ms--;
			outer2--;
		}
		outer1--;
	}
}
     97e:	26 96       	adiw	r28, 0x06	; 6
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	f8 94       	cli
     984:	de bf       	out	0x3e, r29	; 62
     986:	0f be       	out	0x3f, r0	; 63
     988:	cd bf       	out	0x3d, r28	; 61
     98a:	cf 91       	pop	r28
     98c:	df 91       	pop	r29
     98e:	08 95       	ret

00000990 <gpib_init>:
 * Init GPIB pins and variables.
 * \brief All signal lines not related to the controller part
 * 		are initialized with useful values.
 *		(The controller part initialization is done on gpib_controller_assert())
 */
void gpib_init(void) {
     990:	df 93       	push	r29
     992:	cf 93       	push	r28
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
	// data lines - complete port A as input
	DDRA = 0x00;
     998:	ea e3       	ldi	r30, 0x3A	; 58
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	10 82       	st	Z, r1

	// handshake lines - on port D , everything as input
	DDRD &= ~_BV(G_DAV); // DAV 
     99e:	a1 e3       	ldi	r26, 0x31	; 49
     9a0:	b0 e0       	ldi	r27, 0x00	; 0
     9a2:	e1 e3       	ldi	r30, 0x31	; 49
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	80 81       	ld	r24, Z
     9a8:	8b 7f       	andi	r24, 0xFB	; 251
     9aa:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_EOI); // EOI 
     9ac:	a1 e3       	ldi	r26, 0x31	; 49
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	e1 e3       	ldi	r30, 0x31	; 49
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	8f 7e       	andi	r24, 0xEF	; 239
     9b8:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_SRQ); // SRQ 
     9ba:	a1 e3       	ldi	r26, 0x31	; 49
     9bc:	b0 e0       	ldi	r27, 0x00	; 0
     9be:	e1 e3       	ldi	r30, 0x31	; 49
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	80 81       	ld	r24, Z
     9c4:	8f 7b       	andi	r24, 0xBF	; 191
     9c6:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_ATN); // ATN  
     9c8:	a1 e3       	ldi	r26, 0x31	; 49
     9ca:	b0 e0       	ldi	r27, 0x00	; 0
     9cc:	e1 e3       	ldi	r30, 0x31	; 49
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	80 81       	ld	r24, Z
     9d2:	8f 77       	andi	r24, 0x7F	; 127
     9d4:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_REN); // REN  
     9d6:	a7 e3       	ldi	r26, 0x37	; 55
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	e7 e3       	ldi	r30, 0x37	; 55
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	8d 7f       	andi	r24, 0xFD	; 253
     9e2:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_IFC); // IFC  
     9e4:	a7 e3       	ldi	r26, 0x37	; 55
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	e7 e3       	ldi	r30, 0x37	; 55
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	8e 7f       	andi	r24, 0xFE	; 254
     9f0:	8c 93       	st	X, r24

	// init handshake lines
	assign_bit(DDRD, PORTD, G_NRFD);
     9f2:	a2 e3       	ldi	r26, 0x32	; 50
     9f4:	b0 e0       	ldi	r27, 0x00	; 0
     9f6:	e2 e3       	ldi	r30, 0x32	; 50
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	80 81       	ld	r24, Z
     9fc:	87 7f       	andi	r24, 0xF7	; 247
     9fe:	8c 93       	st	X, r24
     a00:	a1 e3       	ldi	r26, 0x31	; 49
     a02:	b0 e0       	ldi	r27, 0x00	; 0
     a04:	e1 e3       	ldi	r30, 0x31	; 49
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	80 81       	ld	r24, Z
     a0a:	88 60       	ori	r24, 0x08	; 8
     a0c:	8c 93       	st	X, r24
     a0e:	a2 e3       	ldi	r26, 0x32	; 50
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	e2 e3       	ldi	r30, 0x32	; 50
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	80 81       	ld	r24, Z
     a18:	87 7f       	andi	r24, 0xF7	; 247
     a1a:	8c 93       	st	X, r24
	// not ready for data now
	release_bit(DDRD, PORTD, G_NDAC);
     a1c:	a1 e3       	ldi	r26, 0x31	; 49
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	e1 e3       	ldi	r30, 0x31	; 49
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	8f 7d       	andi	r24, 0xDF	; 223
     a28:	8c 93       	st	X, r24
     a2a:	a2 e3       	ldi	r26, 0x32	; 50
     a2c:	b0 e0       	ldi	r27, 0x00	; 0
     a2e:	e2 e3       	ldi	r30, 0x32	; 50
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	80 81       	ld	r24, Z
     a34:	80 62       	ori	r24, 0x20	; 32
     a36:	8c 93       	st	X, r24
	// initially: ok so far
}
     a38:	cf 91       	pop	r28
     a3a:	df 91       	pop	r29
     a3c:	08 95       	ret

00000a3e <gpib_prepare_write>:

/**
 * Prepare partner for writing
 */
void gpib_prepare_write() {
     a3e:	df 93       	push	r29
     a40:	cf 93       	push	r28
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
     a46:	28 97       	sbiw	r28, 0x08	; 8
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	// untalk/unlisten all partbners
	gpib_untalkUnlisten();
     a52:	0e 94 8d 05 	call	0xb1a	; 0xb1a <gpib_untalkUnlisten>
	// set device to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_partner_pad());
     a56:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <gpib_get_partner_pad>
     a5a:	80 5e       	subi	r24, 0xE0	; 224
     a5c:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     a5e:	ce 01       	movw	r24, r28
     a60:	01 96       	adiw	r24, 0x01	; 1
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	0e 94 4a 07 	call	0xe94	; 0xe94 <gpib_cmd>
	// send secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
     a6a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <gpib_get_partner_sad>
     a6e:	8f 3f       	cpi	r24, 0xFF	; 255
     a70:	51 f0       	breq	.+20     	; 0xa86 <gpib_prepare_write+0x48>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
     a72:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <gpib_get_partner_sad>
     a76:	80 66       	ori	r24, 0x60	; 96
     a78:	89 83       	std	Y+1, r24	; 0x01
		gpib_cmd(controlString, 1);
     a7a:	ce 01       	movw	r24, r28
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	61 e0       	ldi	r22, 0x01	; 1
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	0e 94 4a 07 	call	0xe94	; 0xe94 <gpib_cmd>
	}
	// set myself (controller) to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_address());
     a86:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <gpib_get_address>
     a8a:	80 5c       	subi	r24, 0xC0	; 192
     a8c:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     a8e:	ce 01       	movw	r24, r28
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	61 e0       	ldi	r22, 0x01	; 1
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	0e 94 4a 07 	call	0xe94	; 0xe94 <gpib_cmd>
}
     a9a:	28 96       	adiw	r28, 0x08	; 8
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
     aa6:	cf 91       	pop	r28
     aa8:	df 91       	pop	r29
     aaa:	08 95       	ret

00000aac <gpib_prepare_read>:

/**
 * Prepare partner for writing
 */
void gpib_prepare_read() {
     aac:	df 93       	push	r29
     aae:	cf 93       	push	r28
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
     ab4:	28 97       	sbiw	r28, 0x08	; 8
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// untalk/unlisten all partbners
	gpib_untalkUnlisten();
     ac0:	0e 94 8d 05 	call	0xb1a	; 0xb1a <gpib_untalkUnlisten>
	// set myself (controller) to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_address());
     ac4:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <gpib_get_address>
     ac8:	80 5e       	subi	r24, 0xE0	; 224
     aca:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     acc:	ce 01       	movw	r24, r28
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	61 e0       	ldi	r22, 0x01	; 1
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	0e 94 4a 07 	call	0xe94	; 0xe94 <gpib_cmd>
	// set device to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_partner_pad());
     ad8:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <gpib_get_partner_pad>
     adc:	80 5c       	subi	r24, 0xC0	; 192
     ade:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	0e 94 4a 07 	call	0xe94	; 0xe94 <gpib_cmd>
	// secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
     aec:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <gpib_get_partner_sad>
     af0:	8f 3f       	cpi	r24, 0xFF	; 255
     af2:	51 f0       	breq	.+20     	; 0xb08 <gpib_prepare_read+0x5c>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
     af4:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <gpib_get_partner_sad>
     af8:	80 66       	ori	r24, 0x60	; 96
     afa:	89 83       	std	Y+1, r24	; 0x01
		gpib_cmd(controlString, 1);
     afc:	ce 01       	movw	r24, r28
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	61 e0       	ldi	r22, 0x01	; 1
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	0e 94 4a 07 	call	0xe94	; 0xe94 <gpib_cmd>
	}
}
     b08:	28 96       	adiw	r28, 0x08	; 8
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	cf 91       	pop	r28
     b16:	df 91       	pop	r29
     b18:	08 95       	ret

00000b1a <gpib_untalkUnlisten>:

/**
 * Untalk / unlisten all partners on bus.
 */
void gpib_untalkUnlisten() {
     b1a:	df 93       	push	r29
     b1c:	cf 93       	push	r28
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
     b22:	28 97       	sbiw	r28, 0x08	; 8
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
     b2e:	8f e5       	ldi	r24, 0x5F	; 95
     b30:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     b32:	ce 01       	movw	r24, r28
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	61 e0       	ldi	r22, 0x01	; 1
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	0e 94 4a 07 	call	0xe94	; 0xe94 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
     b3e:	8f e3       	ldi	r24, 0x3F	; 63
     b40:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     b42:	ce 01       	movw	r24, r28
     b44:	01 96       	adiw	r24, 0x01	; 1
     b46:	61 e0       	ldi	r22, 0x01	; 1
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	0e 94 4a 07 	call	0xe94	; 0xe94 <gpib_cmd>
}
     b4e:	28 96       	adiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	cf 91       	pop	r28
     b5c:	df 91       	pop	r29
     b5e:	08 95       	ret

00000b60 <gpib_receive>:
 *  \returns		On any error, 0xff is returned. in this case, the value of parameter *_byte is undefined.
 * 		Otherwise the value of the EOI signal line during read is returned. If EOI was assigned, a 0x01 is
 * 		returned. If EOI was not assigned, a 0x00 is returned. Assignment of EOI means that the talker
 * 		is sending the last character for this transmission.
 */
uchar gpib_receive(uchar* _byte) {
     b60:	df 93       	push	r29
     b62:	cf 93       	push	r28
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	27 97       	sbiw	r28, 0x07	; 7
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	9e 83       	std	Y+6, r25	; 0x06
     b76:	8d 83       	std	Y+5, r24	; 0x05
	int timeout;
	uchar byte, eoi;

	//uart_puts("\n\rgpib_receive()\n\r");

	if (controller.talks == 1) {
     b78:	80 91 a7 03 	lds	r24, 0x03A7
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	39 f4       	brne	.+14     	; 0xb8e <gpib_receive+0x2e>
		*_byte = 0xff;
     b80:	ed 81       	ldd	r30, Y+5	; 0x05
     b82:	fe 81       	ldd	r31, Y+6	; 0x06
     b84:	8f ef       	ldi	r24, 0xFF	; 255
     b86:	80 83       	st	Z, r24
		return 0xff;
     b88:	8f ef       	ldi	r24, 0xFF	; 255
     b8a:	8f 83       	std	Y+7, r24	; 0x07
     b8c:	c6 c0       	rjmp	.+396    	; 0xd1a <gpib_receive+0x1ba>
	}

	// handshake: set nrfd, means i am ready to receive some data
	release_bit(DDRD, PORTD, G_NRFD);
     b8e:	a1 e3       	ldi	r26, 0x31	; 49
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e1 e3       	ldi	r30, 0x31	; 49
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	87 7f       	andi	r24, 0xF7	; 247
     b9a:	8c 93       	st	X, r24
     b9c:	a2 e3       	ldi	r26, 0x32	; 50
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e2 e3       	ldi	r30, 0x32	; 50
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	88 60       	ori	r24, 0x08	; 8
     ba8:	8c 93       	st	X, r24
	assign_bit(DDRD, PORTD, G_NDAC);
     baa:	a2 e3       	ldi	r26, 0x32	; 50
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e2 e3       	ldi	r30, 0x32	; 50
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	8f 7d       	andi	r24, 0xDF	; 223
     bb6:	8c 93       	st	X, r24
     bb8:	a1 e3       	ldi	r26, 0x31	; 49
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	e1 e3       	ldi	r30, 0x31	; 49
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	80 62       	ori	r24, 0x20	; 32
     bc4:	8c 93       	st	X, r24
     bc6:	a2 e3       	ldi	r26, 0x32	; 50
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e2 e3       	ldi	r30, 0x32	; 50
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	8f 7d       	andi	r24, 0xDF	; 223
     bd2:	8c 93       	st	X, r24

	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     bd4:	80 91 13 05 	lds	r24, 0x0513
     bd8:	88 2f       	mov	r24, r24
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	05 96       	adiw	r24, 0x05	; 5
     bde:	9c 83       	std	Y+4, r25	; 0x04
     be0:	8b 83       	std	Y+3, r24	; 0x03
     be2:	10 c0       	rjmp	.+32     	; 0xc04 <gpib_receive+0xa4>
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     be4:	80 91 13 05 	lds	r24, 0x0513
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	9c 81       	ldd	r25, Y+4	; 0x04
     bf0:	28 17       	cp	r18, r24
     bf2:	39 07       	cpc	r19, r25
     bf4:	39 f4       	brne	.+14     	; 0xc04 <gpib_receive+0xa4>
			uart_puts("\n\rError: DAV timeout (1)\n\r");
     bf6:	80 e6       	ldi	r24, 0x60	; 96
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>
			return 0xff;
     bfe:	8f ef       	ldi	r24, 0xFF	; 255
     c00:	8f 83       	std	Y+7, r24	; 0x07
     c02:	8b c0       	rjmp	.+278    	; 0xd1a <gpib_receive+0x1ba>
	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
     c04:	e0 e3       	ldi	r30, 0x30	; 48
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	88 2f       	mov	r24, r24
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	84 70       	andi	r24, 0x04	; 4
     c10:	90 70       	andi	r25, 0x00	; 0
     c12:	00 97       	sbiw	r24, 0x00	; 0
     c14:	49 f0       	breq	.+18     	; 0xc28 <gpib_receive+0xc8>
     c16:	80 91 13 05 	lds	r24, 0x0513
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	82 17       	cp	r24, r18
     c24:	93 07       	cpc	r25, r19
     c26:	f4 f6       	brge	.-68     	; 0xbe4 <gpib_receive+0x84>
#else
	loop_until_bit_is_clear(PIND,G_DAV);
#endif

	// handshake: clear NRFD, means i am busy now to read data
	assign_bit(DDRD, PORTD, G_NRFD);
     c28:	a2 e3       	ldi	r26, 0x32	; 50
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	e2 e3       	ldi	r30, 0x32	; 50
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	87 7f       	andi	r24, 0xF7	; 247
     c34:	8c 93       	st	X, r24
     c36:	a1 e3       	ldi	r26, 0x31	; 49
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e1 e3       	ldi	r30, 0x31	; 49
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	88 60       	ori	r24, 0x08	; 8
     c42:	8c 93       	st	X, r24
     c44:	a2 e3       	ldi	r26, 0x32	; 50
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e2 e3       	ldi	r30, 0x32	; 50
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	87 7f       	andi	r24, 0xF7	; 247
     c50:	8c 93       	st	X, r24
	// read data
	byte = PINA ^ 0xff;
     c52:	e9 e3       	ldi	r30, 0x39	; 57
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	80 95       	com	r24
     c5a:	8a 83       	std	Y+2, r24	; 0x02

	// handshake: set ndac, means i have completed/accepted the read
	release_bit(DDRD, PORTD, G_NDAC);
     c5c:	a1 e3       	ldi	r26, 0x31	; 49
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e1 e3       	ldi	r30, 0x31	; 49
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	8f 7d       	andi	r24, 0xDF	; 223
     c68:	8c 93       	st	X, r24
     c6a:	a2 e3       	ldi	r26, 0x32	; 50
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e2 e3       	ldi	r30, 0x32	; 50
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	80 62       	ori	r24, 0x20	; 32
     c76:	8c 93       	st	X, r24

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     c78:	80 91 13 05 	lds	r24, 0x0513
     c7c:	88 2f       	mov	r24, r24
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	05 96       	adiw	r24, 0x05	; 5
     c82:	9c 83       	std	Y+4, r25	; 0x04
     c84:	8b 83       	std	Y+3, r24	; 0x03
     c86:	10 c0       	rjmp	.+32     	; 0xca8 <gpib_receive+0x148>
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     c88:	80 91 13 05 	lds	r24, 0x0513
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	9c 81       	ldd	r25, Y+4	; 0x04
     c94:	28 17       	cp	r18, r24
     c96:	39 07       	cpc	r19, r25
     c98:	39 f4       	brne	.+14     	; 0xca8 <gpib_receive+0x148>
			uart_puts("\n\rError: DAV timeout (2)\n\r");
     c9a:	8b e7       	ldi	r24, 0x7B	; 123
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>
			return 0xff;
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	8f 83       	std	Y+7, r24	; 0x07
     ca6:	39 c0       	rjmp	.+114    	; 0xd1a <gpib_receive+0x1ba>
	release_bit(DDRD, PORTD, G_NDAC);

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
     ca8:	e0 e3       	ldi	r30, 0x30	; 48
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	88 2f       	mov	r24, r24
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	84 70       	andi	r24, 0x04	; 4
     cb4:	90 70       	andi	r25, 0x00	; 0
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	49 f4       	brne	.+18     	; 0xccc <gpib_receive+0x16c>
     cba:	80 91 13 05 	lds	r24, 0x0513
     cbe:	28 2f       	mov	r18, r24
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	9c 81       	ldd	r25, Y+4	; 0x04
     cc6:	82 17       	cp	r24, r18
     cc8:	93 07       	cpc	r25, r19
     cca:	f4 f6       	brge	.-68     	; 0xc88 <gpib_receive+0x128>
	}
#else
	loop_until_bit_is_set(PIND,G_DAV);
#endif
	// handshake: clear ndac (this is a prerequisite for receive next byte)
	assign_bit(DDRD, PORTD, G_NDAC);
     ccc:	a2 e3       	ldi	r26, 0x32	; 50
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e2 e3       	ldi	r30, 0x32	; 50
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	8f 7d       	andi	r24, 0xDF	; 223
     cd8:	8c 93       	st	X, r24
     cda:	a1 e3       	ldi	r26, 0x31	; 49
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e1 e3       	ldi	r30, 0x31	; 49
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	80 62       	ori	r24, 0x20	; 32
     ce6:	8c 93       	st	X, r24
     ce8:	a2 e3       	ldi	r26, 0x32	; 50
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	e2 e3       	ldi	r30, 0x32	; 50
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	8f 7d       	andi	r24, 0xDF	; 223
     cf4:	8c 93       	st	X, r24

	// check if last byte of transmission
	eoi = bit_is_clear(PIND, G_EOI);
     cf6:	e0 e3       	ldi	r30, 0x30	; 48
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	88 2f       	mov	r24, r24
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	80 71       	andi	r24, 0x10	; 16
     d02:	90 70       	andi	r25, 0x00	; 0
     d04:	19 82       	std	Y+1, r1	; 0x01
     d06:	00 97       	sbiw	r24, 0x00	; 0
     d08:	11 f4       	brne	.+4      	; 0xd0e <gpib_receive+0x1ae>
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	89 83       	std	Y+1, r24	; 0x01

	*_byte = byte;
     d0e:	ed 81       	ldd	r30, Y+5	; 0x05
     d10:	fe 81       	ldd	r31, Y+6	; 0x06
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	80 83       	st	Z, r24

	return eoi;
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	8f 83       	std	Y+7, r24	; 0x07
     d1a:	8f 81       	ldd	r24, Y+7	; 0x07
}
     d1c:	27 96       	adiw	r28, 0x07	; 7
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <gpib_controller_assign>:
 * You have to change the initialization of the partner array according to your environment.
 * The partners-array is used by gpib_serial_poll() for looping over all existing devices.
 * 
 * \param address the address to be used by the controller. Usually 0x00.
 */
void gpib_controller_assign(uchar address) {
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	0f 92       	push	r0
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	89 83       	std	Y+1, r24	; 0x01
	controller.myaddress = address;
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	80 93 a4 03 	sts	0x03A4, r24
	controller.talks = 0;
     d40:	10 92 a7 03 	sts	0x03A7, r1
	controller.partner.primary = ADDRESS_NOT_SET; // init default active partner
     d44:	8f ef       	ldi	r24, 0xFF	; 255
     d46:	80 93 a5 03 	sts	0x03A5, r24
	controller.partner.secondary = ADDRESS_NOT_SET;
     d4a:	8f ef       	ldi	r24, 0xFF	; 255
     d4c:	80 93 a6 03 	sts	0x03A6, r24
	controller.flavour = FLAVOUR_NONE;
     d50:	10 92 a8 03 	sts	0x03A8, r1
	/** clear list of partners */
	gpib_clear_partners();
     d54:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <gpib_clear_partners>
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     d58:	a8 e3       	ldi	r26, 0x38	; 56
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e8 e3       	ldi	r30, 0x38	; 56
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	8e 7f       	andi	r24, 0xFE	; 254
     d64:	8c 93       	st	X, r24
     d66:	a7 e3       	ldi	r26, 0x37	; 55
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e7 e3       	ldi	r30, 0x37	; 55
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	81 60       	ori	r24, 0x01	; 1
     d72:	8c 93       	st	X, r24
     d74:	a8 e3       	ldi	r26, 0x38	; 56
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e8 e3       	ldi	r30, 0x38	; 56
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	8e 7f       	andi	r24, 0xFE	; 254
     d80:	8c 93       	st	X, r24
	delay_ms(200);
     d82:	88 ec       	ldi	r24, 0xC8	; 200
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 91 04 	call	0x922	; 0x922 <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     d8a:	a7 e3       	ldi	r26, 0x37	; 55
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e7 e3       	ldi	r30, 0x37	; 55
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	8e 7f       	andi	r24, 0xFE	; 254
     d96:	8c 93       	st	X, r24
     d98:	a8 e3       	ldi	r26, 0x38	; 56
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e8 e3       	ldi	r30, 0x38	; 56
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	81 60       	ori	r24, 0x01	; 1
     da4:	8c 93       	st	X, r24
	// set up all devices for remote control
	assign_bit(DDRB, PORTB, G_REN);
     da6:	a8 e3       	ldi	r26, 0x38	; 56
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e8 e3       	ldi	r30, 0x38	; 56
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8d 7f       	andi	r24, 0xFD	; 253
     db2:	8c 93       	st	X, r24
     db4:	a7 e3       	ldi	r26, 0x37	; 55
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e7 e3       	ldi	r30, 0x37	; 55
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	82 60       	ori	r24, 0x02	; 2
     dc0:	8c 93       	st	X, r24
     dc2:	a8 e3       	ldi	r26, 0x38	; 56
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e8 e3       	ldi	r30, 0x38	; 56
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	8d 7f       	andi	r24, 0xFD	; 253
     dce:	8c 93       	st	X, r24

	// DCL - device clear for all devices on bus
	cmd_buf[0] = G_CMD_DCL;
     dd0:	84 e1       	ldi	r24, 0x14	; 20
     dd2:	80 93 5e 04 	sts	0x045E, r24
	gpib_cmd(cmd_buf, 1);
     dd6:	8e e5       	ldi	r24, 0x5E	; 94
     dd8:	94 e0       	ldi	r25, 0x04	; 4
     dda:	61 e0       	ldi	r22, 0x01	; 1
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	0e 94 4a 07 	call	0xe94	; 0xe94 <gpib_cmd>
}
     de2:	0f 90       	pop	r0
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <gpib_controller_release>:

/**
 * Release bus 
 */
void gpib_controller_release(void) {
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     df2:	a8 e3       	ldi	r26, 0x38	; 56
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e8 e3       	ldi	r30, 0x38	; 56
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	8e 7f       	andi	r24, 0xFE	; 254
     dfe:	8c 93       	st	X, r24
     e00:	a7 e3       	ldi	r26, 0x37	; 55
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e7 e3       	ldi	r30, 0x37	; 55
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	81 60       	ori	r24, 0x01	; 1
     e0c:	8c 93       	st	X, r24
     e0e:	a8 e3       	ldi	r26, 0x38	; 56
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e8 e3       	ldi	r30, 0x38	; 56
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	8e 7f       	andi	r24, 0xFE	; 254
     e1a:	8c 93       	st	X, r24
	delay_ms(200);
     e1c:	88 ec       	ldi	r24, 0xC8	; 200
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 91 04 	call	0x922	; 0x922 <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     e24:	a7 e3       	ldi	r26, 0x37	; 55
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e7 e3       	ldi	r30, 0x37	; 55
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8e 7f       	andi	r24, 0xFE	; 254
     e30:	8c 93       	st	X, r24
     e32:	a8 e3       	ldi	r26, 0x38	; 56
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e8 e3       	ldi	r30, 0x38	; 56
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	81 60       	ori	r24, 0x01	; 1
     e3e:	8c 93       	st	X, r24
	// set up all devices for local control
	release_bit(DDRB, PORTB, G_REN);
     e40:	a7 e3       	ldi	r26, 0x37	; 55
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e7 e3       	ldi	r30, 0x37	; 55
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	8d 7f       	andi	r24, 0xFD	; 253
     e4c:	8c 93       	st	X, r24
     e4e:	a8 e3       	ldi	r26, 0x38	; 56
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e8 e3       	ldi	r30, 0x38	; 56
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	82 60       	ori	r24, 0x02	; 2
     e5a:	8c 93       	st	X, r24
}
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <gpib_write>:

/**
 * Write GPIB string to bus
 * \brief See _gpib_write() for further information.
 */
uchar gpib_write(uchar *bytes, int length) {
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	00 d0       	rcall	.+0      	; 0xe68 <gpib_write+0x6>
     e68:	00 d0       	rcall	.+0      	; 0xe6a <gpib_write+0x8>
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	9a 83       	std	Y+2, r25	; 0x02
     e70:	89 83       	std	Y+1, r24	; 0x01
     e72:	7c 83       	std	Y+4, r23	; 0x04
     e74:	6b 83       	std	Y+3, r22	; 0x03
	// set attention arg false for ordinary strings
	return _gpib_write(bytes, length, (uchar) 0);
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	2b 81       	ldd	r18, Y+3	; 0x03
     e7c:	3c 81       	ldd	r19, Y+4	; 0x04
     e7e:	b9 01       	movw	r22, r18
     e80:	40 e0       	ldi	r20, 0x00	; 0
     e82:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_gpib_write>
}
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <gpib_cmd>:

/**
 * Write GPIB command to bus
 * \brief See _gpib_write() for further information.
 */
uchar gpib_cmd(uchar *bytes, int length) {
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <gpib_cmd+0x6>
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <gpib_cmd+0x8>
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	9a 83       	std	Y+2, r25	; 0x02
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	7c 83       	std	Y+4, r23	; 0x04
     ea6:	6b 83       	std	Y+3, r22	; 0x03
	// set attention arg true for commands
	return _gpib_write(bytes, length, (uchar) 1);
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	2b 81       	ldd	r18, Y+3	; 0x03
     eae:	3c 81       	ldd	r19, Y+4	; 0x04
     eb0:	b9 01       	movw	r22, r18
     eb2:	41 e0       	ldi	r20, 0x01	; 1
     eb4:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_gpib_write>
}
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <gpib_write_prologue>:

/**
 * Emits prologue before writing to a listener.
 *
 */
void gpib_write_prologue(uchar attention) {
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	0f 92       	push	r0
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	89 83       	std	Y+1, r24	; 0x01
	// set talks state. This is used by ISR to recognize own talk
	// (controller must not talk to itself and must not take part in listener handshake when talking)
	controller.talks = 1;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	80 93 a7 03 	sts	0x03A7, r24
	if (attention) {
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	88 23       	and	r24, r24
     edc:	a9 f0       	breq	.+42     	; 0xf08 <gpib_write_prologue+0x42>
		//uart_puts("\n\rgpib_controller_write()\n\r");
		// assign ATN for commands
		assign_bit(DDRD, PORTD, G_ATN);
     ede:	a2 e3       	ldi	r26, 0x32	; 50
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e2 e3       	ldi	r30, 0x32	; 50
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8f 77       	andi	r24, 0x7F	; 127
     eea:	8c 93       	st	X, r24
     eec:	a1 e3       	ldi	r26, 0x31	; 49
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e1 e3       	ldi	r30, 0x31	; 49
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	80 68       	ori	r24, 0x80	; 128
     ef8:	8c 93       	st	X, r24
     efa:	a2 e3       	ldi	r26, 0x32	; 50
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e2 e3       	ldi	r30, 0x32	; 50
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8f 77       	andi	r24, 0x7F	; 127
     f06:	8c 93       	st	X, r24
	}
	// release EOI during transmission
	release_bit(DDRD, PORTD, G_EOI);
     f08:	a1 e3       	ldi	r26, 0x31	; 49
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e1 e3       	ldi	r30, 0x31	; 49
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	8f 7e       	andi	r24, 0xEF	; 239
     f14:	8c 93       	st	X, r24
     f16:	a2 e3       	ldi	r26, 0x32	; 50
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e2 e3       	ldi	r30, 0x32	; 50
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	80 61       	ori	r24, 0x10	; 16
     f22:	8c 93       	st	X, r24
	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
     f24:	a1 e3       	ldi	r26, 0x31	; 49
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e1 e3       	ldi	r30, 0x31	; 49
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8b 7f       	andi	r24, 0xFB	; 251
     f30:	8c 93       	st	X, r24
     f32:	a2 e3       	ldi	r26, 0x32	; 50
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e2 e3       	ldi	r30, 0x32	; 50
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	84 60       	ori	r24, 0x04	; 4
     f3e:	8c 93       	st	X, r24
	// release NRFD (just to be sure)
	release_bit(DDRD, PORTD, G_NRFD);
     f40:	a1 e3       	ldi	r26, 0x31	; 49
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e1 e3       	ldi	r30, 0x31	; 49
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	87 7f       	andi	r24, 0xF7	; 247
     f4c:	8c 93       	st	X, r24
     f4e:	a2 e3       	ldi	r26, 0x32	; 50
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e2 e3       	ldi	r30, 0x32	; 50
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	88 60       	ori	r24, 0x08	; 8
     f5a:	8c 93       	st	X, r24
}
     f5c:	0f 90       	pop	r0
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <gpib_write_epilogue>:

/**
 * Emits epilogue after writing to a listener.
 *
 */
void gpib_write_epilogue(uchar attention) {
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	0f 92       	push	r0
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	89 83       	std	Y+1, r24	; 0x01
	if (attention) {
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	88 23       	and	r24, r24
     f74:	71 f0       	breq	.+28     	; 0xf92 <gpib_write_epilogue+0x2e>
		// assign ATN for commands
		release_bit(DDRD, PORTD, G_ATN);
     f76:	a1 e3       	ldi	r26, 0x31	; 49
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e1 e3       	ldi	r30, 0x31	; 49
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	8f 77       	andi	r24, 0x7F	; 127
     f82:	8c 93       	st	X, r24
     f84:	a2 e3       	ldi	r26, 0x32	; 50
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e2 e3       	ldi	r30, 0x32	; 50
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	80 68       	ori	r24, 0x80	; 128
     f90:	8c 93       	st	X, r24
	}
	// clear talk state.Controller does not talk anymore.
	controller.talks = 0;
     f92:	10 92 a7 03 	sts	0x03A7, r1
}
     f96:	0f 90       	pop	r0
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <gpib_write_byte>:

/**
 * Emits single byte to GPIB port pins.
 */
uchar gpib_write_byte(uchar c, uchar isLastByte) {
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <gpib_write_byte+0x6>
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <gpib_write_byte+0x8>
     fa6:	0f 92       	push	r0
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	8b 83       	std	Y+3, r24	; 0x03
     fae:	6c 83       	std	Y+4, r22	; 0x04
	int timeout;

	// wait for NDAC assign from all listeners
	release_bit(DDRD, PORTD, G_NDAC);
     fb0:	a1 e3       	ldi	r26, 0x31	; 49
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e1 e3       	ldi	r30, 0x31	; 49
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8f 7d       	andi	r24, 0xDF	; 223
     fbc:	8c 93       	st	X, r24
     fbe:	a2 e3       	ldi	r26, 0x32	; 50
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e2 e3       	ldi	r30, 0x32	; 50
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	80 62       	ori	r24, 0x20	; 32
     fca:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
	timeout = s + 5;
     fcc:	80 91 13 05 	lds	r24, 0x0513
     fd0:	88 2f       	mov	r24, r24
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	05 96       	adiw	r24, 0x05	; 5
     fd6:	9a 83       	std	Y+2, r25	; 0x02
     fd8:	89 83       	std	Y+1, r24	; 0x01
     fda:	10 c0       	rjmp	.+32     	; 0xffc <gpib_write_byte+0x5e>
	//gpib_info();
	while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
		if (s == timeout) {
     fdc:	80 91 13 05 	lds	r24, 0x0513
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	28 17       	cp	r18, r24
     fea:	39 07       	cpc	r19, r25
     fec:	39 f4       	brne	.+14     	; 0xffc <gpib_write_byte+0x5e>
			uart_puts("\n\rError: NDAC timeout\n\r");
     fee:	86 e9       	ldi	r24, 0x96	; 150
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>
			return 0xff;
     ff6:	8f ef       	ldi	r24, 0xFF	; 255
     ff8:	8d 83       	std	Y+5, r24	; 0x05
     ffa:	f7 c1       	rjmp	.+1006   	; 0x13ea <gpib_write_byte+0x44c>
	// wait for NDAC assign from all listeners
	release_bit(DDRD, PORTD, G_NDAC);
#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
     ffc:	e0 e3       	ldi	r30, 0x30	; 48
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	80 72       	andi	r24, 0x20	; 32
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	49 f0       	breq	.+18     	; 0x1020 <gpib_write_byte+0x82>
    100e:	80 91 13 05 	lds	r24, 0x0513
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	9a 81       	ldd	r25, Y+2	; 0x02
    101a:	82 17       	cp	r24, r18
    101c:	93 07       	cpc	r25, r19
    101e:	f4 f6       	brge	.-68     	; 0xfdc <gpib_write_byte+0x3e>
	}
#else
	loop_until_bit_is_clear(PIND,G_NDAC);
#endif

	DDRA = 0x00;
    1020:	ea e3       	ldi	r30, 0x3A	; 58
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	10 82       	st	Z, r1
	if (c & 0x01) {
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	88 2f       	mov	r24, r24
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	81 70       	andi	r24, 0x01	; 1
    102e:	90 70       	andi	r25, 0x00	; 0
    1030:	88 23       	and	r24, r24
    1032:	b1 f0       	breq	.+44     	; 0x1060 <gpib_write_byte+0xc2>
		assign_bit(DDRA, PORTA, PA0);
    1034:	ab e3       	ldi	r26, 0x3B	; 59
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	eb e3       	ldi	r30, 0x3B	; 59
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	8e 7f       	andi	r24, 0xFE	; 254
    1040:	8c 93       	st	X, r24
    1042:	aa e3       	ldi	r26, 0x3A	; 58
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	ea e3       	ldi	r30, 0x3A	; 58
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	81 60       	ori	r24, 0x01	; 1
    104e:	8c 93       	st	X, r24
    1050:	ab e3       	ldi	r26, 0x3B	; 59
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	eb e3       	ldi	r30, 0x3B	; 59
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8e 7f       	andi	r24, 0xFE	; 254
    105c:	8c 93       	st	X, r24
    105e:	0e c0       	rjmp	.+28     	; 0x107c <gpib_write_byte+0xde>
	} else {
		release_bit(DDRA, PORTA, PA0)
    1060:	aa e3       	ldi	r26, 0x3A	; 58
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	ea e3       	ldi	r30, 0x3A	; 58
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	8e 7f       	andi	r24, 0xFE	; 254
    106c:	8c 93       	st	X, r24
    106e:	ab e3       	ldi	r26, 0x3B	; 59
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	eb e3       	ldi	r30, 0x3B	; 59
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	81 60       	ori	r24, 0x01	; 1
    107a:	8c 93       	st	X, r24
	}
	if (c & 0x02) {
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	88 2f       	mov	r24, r24
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	82 70       	andi	r24, 0x02	; 2
    1084:	90 70       	andi	r25, 0x00	; 0
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	b1 f0       	breq	.+44     	; 0x10b6 <gpib_write_byte+0x118>
		assign_bit(DDRA, PORTA, PA1)
    108a:	ab e3       	ldi	r26, 0x3B	; 59
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	eb e3       	ldi	r30, 0x3B	; 59
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	8d 7f       	andi	r24, 0xFD	; 253
    1096:	8c 93       	st	X, r24
    1098:	aa e3       	ldi	r26, 0x3A	; 58
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	ea e3       	ldi	r30, 0x3A	; 58
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	82 60       	ori	r24, 0x02	; 2
    10a4:	8c 93       	st	X, r24
    10a6:	ab e3       	ldi	r26, 0x3B	; 59
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	eb e3       	ldi	r30, 0x3B	; 59
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	8d 7f       	andi	r24, 0xFD	; 253
    10b2:	8c 93       	st	X, r24
    10b4:	0e c0       	rjmp	.+28     	; 0x10d2 <gpib_write_byte+0x134>
	} else {
		release_bit(DDRA, PORTA, PA1);
    10b6:	aa e3       	ldi	r26, 0x3A	; 58
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	ea e3       	ldi	r30, 0x3A	; 58
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	8d 7f       	andi	r24, 0xFD	; 253
    10c2:	8c 93       	st	X, r24
    10c4:	ab e3       	ldi	r26, 0x3B	; 59
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	eb e3       	ldi	r30, 0x3B	; 59
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	82 60       	ori	r24, 0x02	; 2
    10d0:	8c 93       	st	X, r24
	}
	if (c & 0x04) {
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	84 70       	andi	r24, 0x04	; 4
    10da:	90 70       	andi	r25, 0x00	; 0
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	b1 f0       	breq	.+44     	; 0x110c <gpib_write_byte+0x16e>
		assign_bit(DDRA, PORTA, PA2);
    10e0:	ab e3       	ldi	r26, 0x3B	; 59
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	eb e3       	ldi	r30, 0x3B	; 59
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8b 7f       	andi	r24, 0xFB	; 251
    10ec:	8c 93       	st	X, r24
    10ee:	aa e3       	ldi	r26, 0x3A	; 58
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	ea e3       	ldi	r30, 0x3A	; 58
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	84 60       	ori	r24, 0x04	; 4
    10fa:	8c 93       	st	X, r24
    10fc:	ab e3       	ldi	r26, 0x3B	; 59
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	eb e3       	ldi	r30, 0x3B	; 59
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	8b 7f       	andi	r24, 0xFB	; 251
    1108:	8c 93       	st	X, r24
    110a:	0e c0       	rjmp	.+28     	; 0x1128 <gpib_write_byte+0x18a>
	} else {
		release_bit(DDRA, PORTA, PA2);
    110c:	aa e3       	ldi	r26, 0x3A	; 58
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	ea e3       	ldi	r30, 0x3A	; 58
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8b 7f       	andi	r24, 0xFB	; 251
    1118:	8c 93       	st	X, r24
    111a:	ab e3       	ldi	r26, 0x3B	; 59
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	eb e3       	ldi	r30, 0x3B	; 59
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	84 60       	ori	r24, 0x04	; 4
    1126:	8c 93       	st	X, r24
	}
	if (c & 0x08) {
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	88 70       	andi	r24, 0x08	; 8
    1130:	90 70       	andi	r25, 0x00	; 0
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	b1 f0       	breq	.+44     	; 0x1162 <gpib_write_byte+0x1c4>
		assign_bit(DDRA, PORTA, PA3);
    1136:	ab e3       	ldi	r26, 0x3B	; 59
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	eb e3       	ldi	r30, 0x3B	; 59
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	87 7f       	andi	r24, 0xF7	; 247
    1142:	8c 93       	st	X, r24
    1144:	aa e3       	ldi	r26, 0x3A	; 58
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	ea e3       	ldi	r30, 0x3A	; 58
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	88 60       	ori	r24, 0x08	; 8
    1150:	8c 93       	st	X, r24
    1152:	ab e3       	ldi	r26, 0x3B	; 59
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	eb e3       	ldi	r30, 0x3B	; 59
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	87 7f       	andi	r24, 0xF7	; 247
    115e:	8c 93       	st	X, r24
    1160:	0e c0       	rjmp	.+28     	; 0x117e <gpib_write_byte+0x1e0>
	} else {
		release_bit(DDRA, PORTA, PA3);
    1162:	aa e3       	ldi	r26, 0x3A	; 58
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	ea e3       	ldi	r30, 0x3A	; 58
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	87 7f       	andi	r24, 0xF7	; 247
    116e:	8c 93       	st	X, r24
    1170:	ab e3       	ldi	r26, 0x3B	; 59
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	eb e3       	ldi	r30, 0x3B	; 59
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	88 60       	ori	r24, 0x08	; 8
    117c:	8c 93       	st	X, r24
	}
	if (c & 0x10) {
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	88 2f       	mov	r24, r24
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	80 71       	andi	r24, 0x10	; 16
    1186:	90 70       	andi	r25, 0x00	; 0
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	b1 f0       	breq	.+44     	; 0x11b8 <gpib_write_byte+0x21a>
		assign_bit(DDRA, PORTA, PA4);
    118c:	ab e3       	ldi	r26, 0x3B	; 59
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	eb e3       	ldi	r30, 0x3B	; 59
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	8f 7e       	andi	r24, 0xEF	; 239
    1198:	8c 93       	st	X, r24
    119a:	aa e3       	ldi	r26, 0x3A	; 58
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	ea e3       	ldi	r30, 0x3A	; 58
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	80 61       	ori	r24, 0x10	; 16
    11a6:	8c 93       	st	X, r24
    11a8:	ab e3       	ldi	r26, 0x3B	; 59
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	eb e3       	ldi	r30, 0x3B	; 59
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	8f 7e       	andi	r24, 0xEF	; 239
    11b4:	8c 93       	st	X, r24
    11b6:	0e c0       	rjmp	.+28     	; 0x11d4 <gpib_write_byte+0x236>
	} else {
		release_bit(DDRA, PORTA, PA4);
    11b8:	aa e3       	ldi	r26, 0x3A	; 58
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	ea e3       	ldi	r30, 0x3A	; 58
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	8f 7e       	andi	r24, 0xEF	; 239
    11c4:	8c 93       	st	X, r24
    11c6:	ab e3       	ldi	r26, 0x3B	; 59
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	eb e3       	ldi	r30, 0x3B	; 59
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	80 61       	ori	r24, 0x10	; 16
    11d2:	8c 93       	st	X, r24
	}
	if (c & 0x20) {
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	88 2f       	mov	r24, r24
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	80 72       	andi	r24, 0x20	; 32
    11dc:	90 70       	andi	r25, 0x00	; 0
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	b1 f0       	breq	.+44     	; 0x120e <gpib_write_byte+0x270>
		assign_bit(DDRA, PORTA, PA5);
    11e2:	ab e3       	ldi	r26, 0x3B	; 59
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	eb e3       	ldi	r30, 0x3B	; 59
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	8f 7d       	andi	r24, 0xDF	; 223
    11ee:	8c 93       	st	X, r24
    11f0:	aa e3       	ldi	r26, 0x3A	; 58
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ea e3       	ldi	r30, 0x3A	; 58
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	80 62       	ori	r24, 0x20	; 32
    11fc:	8c 93       	st	X, r24
    11fe:	ab e3       	ldi	r26, 0x3B	; 59
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	eb e3       	ldi	r30, 0x3B	; 59
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	8f 7d       	andi	r24, 0xDF	; 223
    120a:	8c 93       	st	X, r24
    120c:	0e c0       	rjmp	.+28     	; 0x122a <gpib_write_byte+0x28c>
	} else {
		release_bit(DDRA, PORTA, PA5);
    120e:	aa e3       	ldi	r26, 0x3A	; 58
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	ea e3       	ldi	r30, 0x3A	; 58
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	8f 7d       	andi	r24, 0xDF	; 223
    121a:	8c 93       	st	X, r24
    121c:	ab e3       	ldi	r26, 0x3B	; 59
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	eb e3       	ldi	r30, 0x3B	; 59
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	80 62       	ori	r24, 0x20	; 32
    1228:	8c 93       	st	X, r24
	}
	if (c & 0x40) {
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	80 74       	andi	r24, 0x40	; 64
    1232:	90 70       	andi	r25, 0x00	; 0
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	b1 f0       	breq	.+44     	; 0x1264 <gpib_write_byte+0x2c6>
		assign_bit(DDRA, PORTA, PA6);
    1238:	ab e3       	ldi	r26, 0x3B	; 59
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	eb e3       	ldi	r30, 0x3B	; 59
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	8f 7b       	andi	r24, 0xBF	; 191
    1244:	8c 93       	st	X, r24
    1246:	aa e3       	ldi	r26, 0x3A	; 58
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	ea e3       	ldi	r30, 0x3A	; 58
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	80 64       	ori	r24, 0x40	; 64
    1252:	8c 93       	st	X, r24
    1254:	ab e3       	ldi	r26, 0x3B	; 59
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	eb e3       	ldi	r30, 0x3B	; 59
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	8f 7b       	andi	r24, 0xBF	; 191
    1260:	8c 93       	st	X, r24
    1262:	0e c0       	rjmp	.+28     	; 0x1280 <gpib_write_byte+0x2e2>
	} else {
		release_bit(DDRA, PORTA, PA6);
    1264:	aa e3       	ldi	r26, 0x3A	; 58
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	ea e3       	ldi	r30, 0x3A	; 58
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	8f 7b       	andi	r24, 0xBF	; 191
    1270:	8c 93       	st	X, r24
    1272:	ab e3       	ldi	r26, 0x3B	; 59
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	eb e3       	ldi	r30, 0x3B	; 59
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	80 64       	ori	r24, 0x40	; 64
    127e:	8c 93       	st	X, r24
	}
	if (c & 0x80) {
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	88 23       	and	r24, r24
    1284:	b4 f4       	brge	.+44     	; 0x12b2 <gpib_write_byte+0x314>
		assign_bit(DDRA, PORTA, PA7);
    1286:	ab e3       	ldi	r26, 0x3B	; 59
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	eb e3       	ldi	r30, 0x3B	; 59
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8f 77       	andi	r24, 0x7F	; 127
    1292:	8c 93       	st	X, r24
    1294:	aa e3       	ldi	r26, 0x3A	; 58
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	ea e3       	ldi	r30, 0x3A	; 58
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	80 68       	ori	r24, 0x80	; 128
    12a0:	8c 93       	st	X, r24
    12a2:	ab e3       	ldi	r26, 0x3B	; 59
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	eb e3       	ldi	r30, 0x3B	; 59
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	8f 77       	andi	r24, 0x7F	; 127
    12ae:	8c 93       	st	X, r24
    12b0:	0e c0       	rjmp	.+28     	; 0x12ce <gpib_write_byte+0x330>
	} else {
		release_bit(DDRA, PORTA, PA7);
    12b2:	aa e3       	ldi	r26, 0x3A	; 58
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	ea e3       	ldi	r30, 0x3A	; 58
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	8f 77       	andi	r24, 0x7F	; 127
    12be:	8c 93       	st	X, r24
    12c0:	ab e3       	ldi	r26, 0x3B	; 59
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	eb e3       	ldi	r30, 0x3B	; 59
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	80 68       	ori	r24, 0x80	; 128
    12cc:	8c 93       	st	X, r24
	}

	// wait until listeners release NRFD
	//uart_puts("1");
	release_bit(DDRD, PORTD, G_NRFD);
    12ce:	a1 e3       	ldi	r26, 0x31	; 49
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e1 e3       	ldi	r30, 0x31	; 49
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	87 7f       	andi	r24, 0xF7	; 247
    12da:	8c 93       	st	X, r24
    12dc:	a2 e3       	ldi	r26, 0x32	; 50
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e2 e3       	ldi	r30, 0x32	; 50
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	88 60       	ori	r24, 0x08	; 8
    12e8:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
	//gpib_info();
	timeout = s + 5;
    12ea:	80 91 13 05 	lds	r24, 0x0513
    12ee:	88 2f       	mov	r24, r24
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	05 96       	adiw	r24, 0x05	; 5
    12f4:	9a 83       	std	Y+2, r25	; 0x02
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	10 c0       	rjmp	.+32     	; 0x131a <gpib_write_byte+0x37c>
	while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
		if (s == timeout) {
    12fa:	80 91 13 05 	lds	r24, 0x0513
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	28 17       	cp	r18, r24
    1308:	39 07       	cpc	r19, r25
    130a:	39 f4       	brne	.+14     	; 0x131a <gpib_write_byte+0x37c>
			uart_puts("\n\rError: NRFD timeout\n\r");
    130c:	8e ea       	ldi	r24, 0xAE	; 174
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>
			return 0xff;
    1314:	8f ef       	ldi	r24, 0xFF	; 255
    1316:	8d 83       	std	Y+5, r24	; 0x05
    1318:	68 c0       	rjmp	.+208    	; 0x13ea <gpib_write_byte+0x44c>
	//uart_puts("1");
	release_bit(DDRD, PORTD, G_NRFD);
#ifdef WITH_TIMEOUT
	//gpib_info();
	timeout = s + 5;
	while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
    131a:	e0 e3       	ldi	r30, 0x30	; 48
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	88 70       	andi	r24, 0x08	; 8
    1326:	90 70       	andi	r25, 0x00	; 0
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	49 f4       	brne	.+18     	; 0x133e <gpib_write_byte+0x3a0>
    132c:	80 91 13 05 	lds	r24, 0x0513
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	9a 81       	ldd	r25, Y+2	; 0x02
    1338:	82 17       	cp	r24, r18
    133a:	93 07       	cpc	r25, r19
    133c:	f4 f6       	brge	.-68     	; 0x12fa <gpib_write_byte+0x35c>
#else
	loop_until_bit_is_set(PIND,G_NRFD);
#endif

	// assign EOI during transmission of only last byte
	if (isLastByte) {
    133e:	8c 81       	ldd	r24, Y+4	; 0x04
    1340:	88 23       	and	r24, r24
    1342:	a9 f0       	breq	.+42     	; 0x136e <gpib_write_byte+0x3d0>
		//uart_puts("\n\rE\n\r");
		assign_bit(DDRD, PORTD, G_EOI);
    1344:	a2 e3       	ldi	r26, 0x32	; 50
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e2 e3       	ldi	r30, 0x32	; 50
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	8f 7e       	andi	r24, 0xEF	; 239
    1350:	8c 93       	st	X, r24
    1352:	a1 e3       	ldi	r26, 0x31	; 49
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e1 e3       	ldi	r30, 0x31	; 49
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	80 61       	ori	r24, 0x10	; 16
    135e:	8c 93       	st	X, r24
    1360:	a2 e3       	ldi	r26, 0x32	; 50
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e2 e3       	ldi	r30, 0x32	; 50
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	8f 7e       	andi	r24, 0xEF	; 239
    136c:	8c 93       	st	X, r24
	}

	// assign DAV, data valid for listeners
	assign_bit(DDRD, PORTD, G_DAV);
    136e:	a2 e3       	ldi	r26, 0x32	; 50
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e2 e3       	ldi	r30, 0x32	; 50
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	8b 7f       	andi	r24, 0xFB	; 251
    137a:	8c 93       	st	X, r24
    137c:	a1 e3       	ldi	r26, 0x31	; 49
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e1 e3       	ldi	r30, 0x31	; 49
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	84 60       	ori	r24, 0x04	; 4
    1388:	8c 93       	st	X, r24
    138a:	a2 e3       	ldi	r26, 0x32	; 50
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e2 e3       	ldi	r30, 0x32	; 50
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	8b 7f       	andi	r24, 0xFB	; 251
    1396:	8c 93       	st	X, r24

	// wait for NDAC release
	//uart_puts("2");
	release_bit(DDRD, PORTD, G_NDAC);
    1398:	a1 e3       	ldi	r26, 0x31	; 49
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e1 e3       	ldi	r30, 0x31	; 49
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	8f 7d       	andi	r24, 0xDF	; 223
    13a4:	8c 93       	st	X, r24
    13a6:	a2 e3       	ldi	r26, 0x32	; 50
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e2 e3       	ldi	r30, 0x32	; 50
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	80 62       	ori	r24, 0x20	; 32
    13b2:	8c 93       	st	X, r24
	loop_until_bit_is_set(PIND, G_NDAC);
    13b4:	e0 e3       	ldi	r30, 0x30	; 48
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	80 72       	andi	r24, 0x20	; 32
    13c0:	90 70       	andi	r25, 0x00	; 0
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	b9 f3       	breq	.-18     	; 0x13b4 <gpib_write_byte+0x416>

	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
    13c6:	a1 e3       	ldi	r26, 0x31	; 49
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e1 e3       	ldi	r30, 0x31	; 49
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	8b 7f       	andi	r24, 0xFB	; 251
    13d2:	8c 93       	st	X, r24
    13d4:	a2 e3       	ldi	r26, 0x32	; 50
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e2 e3       	ldi	r30, 0x32	; 50
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	84 60       	ori	r24, 0x04	; 4
    13e0:	8c 93       	st	X, r24

	// reset Port to all input
	DDRA = 0x00;
    13e2:	ea e3       	ldi	r30, 0x3A	; 58
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	10 82       	st	Z, r1

	//uart_puts("3\r\n");

	return 0;
    13e8:	1d 82       	std	Y+5, r1	; 0x05
    13ea:	8d 81       	ldd	r24, Y+5	; 0x05
}
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <_gpib_write>:
 * \param length length of valid bytes in byte array or zero.
 * for binary data, lenght must be defined. For strings, length can be set to zero. Then the length of
 * the string is calculated internally.
 * \param attention attention tur means assign ATN signal line during write.
 */
static uchar _gpib_write(uchar *bytes, int length, uchar attention) {
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	2b 97       	sbiw	r28, 0x0b	; 11
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	9e 83       	std	Y+6, r25	; 0x06
    1412:	8d 83       	std	Y+5, r24	; 0x05
    1414:	78 87       	std	Y+8, r23	; 0x08
    1416:	6f 83       	std	Y+7, r22	; 0x07
    1418:	49 87       	std	Y+9, r20	; 0x09
	uchar c;
	int i;

	gpib_write_prologue(attention);
    141a:	89 85       	ldd	r24, Y+9	; 0x09
    141c:	0e 94 63 07 	call	0xec6	; 0xec6 <gpib_write_prologue>

	if (length == 0) {
    1420:	8f 81       	ldd	r24, Y+7	; 0x07
    1422:	98 85       	ldd	r25, Y+8	; 0x08
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	31 f4       	brne	.+12     	; 0x1434 <_gpib_write+0x38>
		// length==0 means this is a common C string, null-terminated.
		// then, length can be easily calculated
		length = strlen((char*) bytes);
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	9e 81       	ldd	r25, Y+6	; 0x06
    142c:	0e 94 ad 01 	call	0x35a	; 0x35a <strlen>
    1430:	98 87       	std	Y+8, r25	; 0x08
    1432:	8f 83       	std	Y+7, r24	; 0x07
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif

	for (i = 0; i < length; i++) {
    1434:	1b 82       	std	Y+3, r1	; 0x03
    1436:	1a 82       	std	Y+2, r1	; 0x02
    1438:	28 c0       	rjmp	.+80     	; 0x148a <_gpib_write+0x8e>
		// put data on bus
		c = bytes[i];
    143a:	2a 81       	ldd	r18, Y+2	; 0x02
    143c:	3b 81       	ldd	r19, Y+3	; 0x03
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	9e 81       	ldd	r25, Y+6	; 0x06
    1442:	fc 01       	movw	r30, r24
    1444:	e2 0f       	add	r30, r18
    1446:	f3 1f       	adc	r31, r19
    1448:	80 81       	ld	r24, Z
    144a:	8c 83       	std	Y+4, r24	; 0x04
		//sprintf( buf, "char: %c\n\r", c );
		//uart_puts(buf);		

		uchar isLastByte = (i == length - 1) && !attention;
    144c:	8f 81       	ldd	r24, Y+7	; 0x07
    144e:	98 85       	ldd	r25, Y+8	; 0x08
    1450:	9c 01       	movw	r18, r24
    1452:	21 50       	subi	r18, 0x01	; 1
    1454:	30 40       	sbci	r19, 0x00	; 0
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	9b 81       	ldd	r25, Y+3	; 0x03
    145a:	28 17       	cp	r18, r24
    145c:	39 07       	cpc	r19, r25
    145e:	41 f4       	brne	.+16     	; 0x1470 <_gpib_write+0x74>
    1460:	89 85       	ldd	r24, Y+9	; 0x09
    1462:	88 23       	and	r24, r24
    1464:	29 f4       	brne	.+10     	; 0x1470 <_gpib_write+0x74>
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	9b 87       	std	Y+11, r25	; 0x0b
    146c:	8a 87       	std	Y+10, r24	; 0x0a
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <_gpib_write+0x78>
    1470:	1b 86       	std	Y+11, r1	; 0x0b
    1472:	1a 86       	std	Y+10, r1	; 0x0a
    1474:	9a 85       	ldd	r25, Y+10	; 0x0a
    1476:	99 83       	std	Y+1, r25	; 0x01
		gpib_write_byte(c, isLastByte);
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	69 81       	ldd	r22, Y+1	; 0x01
    147c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <gpib_write_byte>
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif

	for (i = 0; i < length; i++) {
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	9b 81       	ldd	r25, Y+3	; 0x03
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	9b 83       	std	Y+3, r25	; 0x03
    1488:	8a 83       	std	Y+2, r24	; 0x02
    148a:	2a 81       	ldd	r18, Y+2	; 0x02
    148c:	3b 81       	ldd	r19, Y+3	; 0x03
    148e:	8f 81       	ldd	r24, Y+7	; 0x07
    1490:	98 85       	ldd	r25, Y+8	; 0x08
    1492:	28 17       	cp	r18, r24
    1494:	39 07       	cpc	r19, r25
    1496:	8c f2       	brlt	.-94     	; 0x143a <_gpib_write+0x3e>

		uchar isLastByte = (i == length - 1) && !attention;
		gpib_write_byte(c, isLastByte);
	}

	gpib_write_epilogue(attention);
    1498:	89 85       	ldd	r24, Y+9	; 0x09
    149a:	0e 94 b2 07 	call	0xf64	; 0xf64 <gpib_write_epilogue>

	return 0x00;
    149e:	80 e0       	ldi	r24, 0x00	; 0
}
    14a0:	2b 96       	adiw	r28, 0x0b	; 11
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <gpib_info>:

/**
 * print some useful info about bus state (for example value of handshake pins)
 */
void gpib_info(void) {
    14b2:	af 92       	push	r10
    14b4:	bf 92       	push	r11
    14b6:	cf 92       	push	r12
    14b8:	df 92       	push	r13
    14ba:	ef 92       	push	r14
    14bc:	ff 92       	push	r15
    14be:	0f 93       	push	r16
    14c0:	1f 93       	push	r17
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	2a 97       	sbiw	r28, 0x0a	; 10
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
	uchar dav, nrfd, ndac, eoi, atn, srq, ifc, ren;
	extern uchar buf[80];

	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    14d6:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <gpib_get_partner_pad>
    14da:	08 2f       	mov	r16, r24
    14dc:	10 e0       	ldi	r17, 0x00	; 0
    14de:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <gpib_get_partner_sad>
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	8d b7       	in	r24, 0x3d	; 61
    14e8:	9e b7       	in	r25, 0x3e	; 62
    14ea:	08 97       	sbiw	r24, 0x08	; 8
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	9e bf       	out	0x3e, r25	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	8d bf       	out	0x3d, r24	; 61
    14f6:	ed b7       	in	r30, 0x3d	; 61
    14f8:	fe b7       	in	r31, 0x3e	; 62
    14fa:	31 96       	adiw	r30, 0x01	; 1
    14fc:	82 ec       	ldi	r24, 0xC2	; 194
    14fe:	94 e0       	ldi	r25, 0x04	; 4
    1500:	91 83       	std	Z+1, r25	; 0x01
    1502:	80 83       	st	Z, r24
    1504:	86 ec       	ldi	r24, 0xC6	; 198
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	93 83       	std	Z+3, r25	; 0x03
    150a:	82 83       	std	Z+2, r24	; 0x02
    150c:	15 83       	std	Z+5, r17	; 0x05
    150e:	04 83       	std	Z+4, r16	; 0x04
    1510:	37 83       	std	Z+7, r19	; 0x07
    1512:	26 83       	std	Z+6, r18	; 0x06
    1514:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <sprintf>
    1518:	8d b7       	in	r24, 0x3d	; 61
    151a:	9e b7       	in	r25, 0x3e	; 62
    151c:	08 96       	adiw	r24, 0x08	; 8
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	9e bf       	out	0x3e, r25	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	8d bf       	out	0x3d, r24	; 61
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);
    1528:	82 ec       	ldi	r24, 0xC2	; 194
    152a:	94 e0       	ldi	r25, 0x04	; 4
    152c:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>

	uart_puts("Partner list\n\r");
    1530:	84 ef       	ldi	r24, 0xF4	; 244
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>
	for (int i = 0; i < MAX_PARTNER; i++) {
    1538:	1a 82       	std	Y+2, r1	; 0x02
    153a:	19 82       	std	Y+1, r1	; 0x01
    153c:	49 c0       	rjmp	.+146    	; 0x15d0 <gpib_info+0x11e>
		if (controller.partners[i].primary != ADDRESS_NOT_SET) {
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	fc 01       	movw	r30, r24
    1548:	e7 55       	subi	r30, 0x57	; 87
    154a:	fc 4f       	sbci	r31, 0xFC	; 252
    154c:	80 81       	ld	r24, Z
    154e:	8f 3f       	cpi	r24, 0xFF	; 255
    1550:	d1 f1       	breq	.+116    	; 0x15c6 <gpib_info+0x114>
			sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	9a 81       	ldd	r25, Y+2	; 0x02
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	fc 01       	movw	r30, r24
    155c:	e7 55       	subi	r30, 0x57	; 87
    155e:	fc 4f       	sbci	r31, 0xFC	; 252
    1560:	80 81       	ld	r24, Z
    1562:	48 2f       	mov	r20, r24
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	9a 81       	ldd	r25, Y+2	; 0x02
    156a:	03 96       	adiw	r24, 0x03	; 3
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	fc 01       	movw	r30, r24
    1572:	ec 55       	subi	r30, 0x5C	; 92
    1574:	fc 4f       	sbci	r31, 0xFC	; 252
    1576:	80 81       	ld	r24, Z
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	8d b7       	in	r24, 0x3d	; 61
    157e:	9e b7       	in	r25, 0x3e	; 62
    1580:	08 97       	sbiw	r24, 0x08	; 8
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	9e bf       	out	0x3e, r25	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	8d bf       	out	0x3d, r24	; 61
    158c:	ed b7       	in	r30, 0x3d	; 61
    158e:	fe b7       	in	r31, 0x3e	; 62
    1590:	31 96       	adiw	r30, 0x01	; 1
    1592:	82 ec       	ldi	r24, 0xC2	; 194
    1594:	94 e0       	ldi	r25, 0x04	; 4
    1596:	91 83       	std	Z+1, r25	; 0x01
    1598:	80 83       	st	Z, r24
    159a:	86 ec       	ldi	r24, 0xC6	; 198
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	93 83       	std	Z+3, r25	; 0x03
    15a0:	82 83       	std	Z+2, r24	; 0x02
    15a2:	55 83       	std	Z+5, r21	; 0x05
    15a4:	44 83       	std	Z+4, r20	; 0x04
    15a6:	37 83       	std	Z+7, r19	; 0x07
    15a8:	26 83       	std	Z+6, r18	; 0x06
    15aa:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <sprintf>
    15ae:	8d b7       	in	r24, 0x3d	; 61
    15b0:	9e b7       	in	r25, 0x3e	; 62
    15b2:	08 96       	adiw	r24, 0x08	; 8
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	9e bf       	out	0x3e, r25	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	8d bf       	out	0x3d, r24	; 61
					controller.partners[i].primary,
					controller.partners[i].secondary);
			uart_puts(buf);
    15be:	82 ec       	ldi	r24, 0xC2	; 194
    15c0:	94 e0       	ldi	r25, 0x04	; 4
    15c2:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>
	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);

	uart_puts("Partner list\n\r");
	for (int i = 0; i < MAX_PARTNER; i++) {
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ca:	01 96       	adiw	r24, 0x01	; 1
    15cc:	9a 83       	std	Y+2, r25	; 0x02
    15ce:	89 83       	std	Y+1, r24	; 0x01
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	9a 81       	ldd	r25, Y+2	; 0x02
    15d4:	85 30       	cpi	r24, 0x05	; 5
    15d6:	91 05       	cpc	r25, r1
    15d8:	0c f4       	brge	.+2      	; 0x15dc <gpib_info+0x12a>
    15da:	b1 cf       	rjmp	.-158    	; 0x153e <gpib_info+0x8c>
					controller.partners[i].secondary);
			uart_puts(buf);
		}
	}

	dav = bit_is_set(PIND, G_DAV);
    15dc:	e0 e3       	ldi	r30, 0x30	; 48
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	84 70       	andi	r24, 0x04	; 4
    15e4:	8a 87       	std	Y+10, r24	; 0x0a
	nrfd = bit_is_set(PIND, G_NRFD);
    15e6:	e0 e3       	ldi	r30, 0x30	; 48
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	88 70       	andi	r24, 0x08	; 8
    15ee:	89 87       	std	Y+9, r24	; 0x09
	ndac = bit_is_set(PIND, G_NDAC);
    15f0:	e0 e3       	ldi	r30, 0x30	; 48
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	80 72       	andi	r24, 0x20	; 32
    15f8:	88 87       	std	Y+8, r24	; 0x08
	eoi = bit_is_set(PIND, G_EOI);
    15fa:	e0 e3       	ldi	r30, 0x30	; 48
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	80 71       	andi	r24, 0x10	; 16
    1602:	8f 83       	std	Y+7, r24	; 0x07
	atn = bit_is_set(PIND, G_ATN);
    1604:	e0 e3       	ldi	r30, 0x30	; 48
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	80 78       	andi	r24, 0x80	; 128
    160c:	8e 83       	std	Y+6, r24	; 0x06
	srq = bit_is_set(PIND, G_SRQ);
    160e:	e0 e3       	ldi	r30, 0x30	; 48
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	80 74       	andi	r24, 0x40	; 64
    1616:	8d 83       	std	Y+5, r24	; 0x05
	ifc = bit_is_set(PINB, G_IFC);
    1618:	e6 e3       	ldi	r30, 0x36	; 54
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	81 70       	andi	r24, 0x01	; 1
    1620:	8c 83       	std	Y+4, r24	; 0x04
	ren = bit_is_set(PINB, G_REN);
    1622:	e6 e3       	ldi	r30, 0x36	; 54
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	82 70       	andi	r24, 0x02	; 2
    162a:	8b 83       	std	Y+3, r24	; 0x03
	//d = PINA;
	//di = d ^ 0xff;
	if (dav == 0x00)
    162c:	8a 85       	ldd	r24, Y+10	; 0x0a
    162e:	88 23       	and	r24, r24
    1630:	19 f4       	brne	.+6      	; 0x1638 <gpib_info+0x186>
		dav = '0';
    1632:	80 e3       	ldi	r24, 0x30	; 48
    1634:	8a 87       	std	Y+10, r24	; 0x0a
    1636:	02 c0       	rjmp	.+4      	; 0x163c <gpib_info+0x18a>
	else
		dav = '1';
    1638:	81 e3       	ldi	r24, 0x31	; 49
    163a:	8a 87       	std	Y+10, r24	; 0x0a
	if (nrfd == 0x00)
    163c:	89 85       	ldd	r24, Y+9	; 0x09
    163e:	88 23       	and	r24, r24
    1640:	19 f4       	brne	.+6      	; 0x1648 <gpib_info+0x196>
		nrfd = '0';
    1642:	80 e3       	ldi	r24, 0x30	; 48
    1644:	89 87       	std	Y+9, r24	; 0x09
    1646:	02 c0       	rjmp	.+4      	; 0x164c <gpib_info+0x19a>
	else
		nrfd = '1';
    1648:	81 e3       	ldi	r24, 0x31	; 49
    164a:	89 87       	std	Y+9, r24	; 0x09
	if (ndac == 0x00)
    164c:	88 85       	ldd	r24, Y+8	; 0x08
    164e:	88 23       	and	r24, r24
    1650:	19 f4       	brne	.+6      	; 0x1658 <gpib_info+0x1a6>
		ndac = '0';
    1652:	80 e3       	ldi	r24, 0x30	; 48
    1654:	88 87       	std	Y+8, r24	; 0x08
    1656:	02 c0       	rjmp	.+4      	; 0x165c <gpib_info+0x1aa>
	else
		ndac = '1';
    1658:	81 e3       	ldi	r24, 0x31	; 49
    165a:	88 87       	std	Y+8, r24	; 0x08
	if (eoi == 0x00)
    165c:	8f 81       	ldd	r24, Y+7	; 0x07
    165e:	88 23       	and	r24, r24
    1660:	19 f4       	brne	.+6      	; 0x1668 <gpib_info+0x1b6>
		eoi = '0';
    1662:	80 e3       	ldi	r24, 0x30	; 48
    1664:	8f 83       	std	Y+7, r24	; 0x07
    1666:	02 c0       	rjmp	.+4      	; 0x166c <gpib_info+0x1ba>
	else
		eoi = '1';
    1668:	81 e3       	ldi	r24, 0x31	; 49
    166a:	8f 83       	std	Y+7, r24	; 0x07
	if (atn == 0x00)
    166c:	8e 81       	ldd	r24, Y+6	; 0x06
    166e:	88 23       	and	r24, r24
    1670:	19 f4       	brne	.+6      	; 0x1678 <gpib_info+0x1c6>
		atn = '0';
    1672:	80 e3       	ldi	r24, 0x30	; 48
    1674:	8e 83       	std	Y+6, r24	; 0x06
    1676:	02 c0       	rjmp	.+4      	; 0x167c <gpib_info+0x1ca>
	else
		atn = '1';
    1678:	81 e3       	ldi	r24, 0x31	; 49
    167a:	8e 83       	std	Y+6, r24	; 0x06
	if (srq == 0x00)
    167c:	8d 81       	ldd	r24, Y+5	; 0x05
    167e:	88 23       	and	r24, r24
    1680:	19 f4       	brne	.+6      	; 0x1688 <gpib_info+0x1d6>
		srq = '0';
    1682:	80 e3       	ldi	r24, 0x30	; 48
    1684:	8d 83       	std	Y+5, r24	; 0x05
    1686:	02 c0       	rjmp	.+4      	; 0x168c <gpib_info+0x1da>
	else
		srq = '1';
    1688:	81 e3       	ldi	r24, 0x31	; 49
    168a:	8d 83       	std	Y+5, r24	; 0x05
	if (ifc == 0x00)
    168c:	8c 81       	ldd	r24, Y+4	; 0x04
    168e:	88 23       	and	r24, r24
    1690:	19 f4       	brne	.+6      	; 0x1698 <gpib_info+0x1e6>
		ifc = '0';
    1692:	80 e3       	ldi	r24, 0x30	; 48
    1694:	8c 83       	std	Y+4, r24	; 0x04
    1696:	02 c0       	rjmp	.+4      	; 0x169c <gpib_info+0x1ea>
	else
		ifc = '1';
    1698:	81 e3       	ldi	r24, 0x31	; 49
    169a:	8c 83       	std	Y+4, r24	; 0x04
	if (ren == 0x00)
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	88 23       	and	r24, r24
    16a0:	19 f4       	brne	.+6      	; 0x16a8 <gpib_info+0x1f6>
		ren = '0';
    16a2:	80 e3       	ldi	r24, 0x30	; 48
    16a4:	8b 83       	std	Y+3, r24	; 0x03
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <gpib_info+0x1fa>
	else
		ren = '1';
    16a8:	81 e3       	ldi	r24, 0x31	; 49
    16aa:	8b 83       	std	Y+3, r24	; 0x03

	sprintf(buf,
    16ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    16ae:	a8 2e       	mov	r10, r24
    16b0:	bb 24       	eor	r11, r11
    16b2:	89 85       	ldd	r24, Y+9	; 0x09
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	88 85       	ldd	r24, Y+8	; 0x08
    16ba:	48 2f       	mov	r20, r24
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	8f 81       	ldd	r24, Y+7	; 0x07
    16c0:	68 2f       	mov	r22, r24
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	8c 81       	ldd	r24, Y+4	; 0x04
    16c6:	a8 2f       	mov	r26, r24
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	08 2f       	mov	r16, r24
    16ce:	10 e0       	ldi	r17, 0x00	; 0
    16d0:	8e 81       	ldd	r24, Y+6	; 0x06
    16d2:	e8 2e       	mov	r14, r24
    16d4:	ff 24       	eor	r15, r15
    16d6:	8d 81       	ldd	r24, Y+5	; 0x05
    16d8:	c8 2e       	mov	r12, r24
    16da:	dd 24       	eor	r13, r13
    16dc:	8d b7       	in	r24, 0x3d	; 61
    16de:	9e b7       	in	r25, 0x3e	; 62
    16e0:	44 97       	sbiw	r24, 0x14	; 20
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	9e bf       	out	0x3e, r25	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	8d bf       	out	0x3d, r24	; 61
    16ec:	ed b7       	in	r30, 0x3d	; 61
    16ee:	fe b7       	in	r31, 0x3e	; 62
    16f0:	31 96       	adiw	r30, 0x01	; 1
    16f2:	82 ec       	ldi	r24, 0xC2	; 194
    16f4:	94 e0       	ldi	r25, 0x04	; 4
    16f6:	91 83       	std	Z+1, r25	; 0x01
    16f8:	80 83       	st	Z, r24
    16fa:	83 e0       	ldi	r24, 0x03	; 3
    16fc:	91 e0       	ldi	r25, 0x01	; 1
    16fe:	93 83       	std	Z+3, r25	; 0x03
    1700:	82 83       	std	Z+2, r24	; 0x02
    1702:	b5 82       	std	Z+5, r11	; 0x05
    1704:	a4 82       	std	Z+4, r10	; 0x04
    1706:	37 83       	std	Z+7, r19	; 0x07
    1708:	26 83       	std	Z+6, r18	; 0x06
    170a:	51 87       	std	Z+9, r21	; 0x09
    170c:	40 87       	std	Z+8, r20	; 0x08
    170e:	73 87       	std	Z+11, r23	; 0x0b
    1710:	62 87       	std	Z+10, r22	; 0x0a
    1712:	b5 87       	std	Z+13, r27	; 0x0d
    1714:	a4 87       	std	Z+12, r26	; 0x0c
    1716:	17 87       	std	Z+15, r17	; 0x0f
    1718:	06 87       	std	Z+14, r16	; 0x0e
    171a:	f1 8a       	std	Z+17, r15	; 0x11
    171c:	e0 8a       	std	Z+16, r14	; 0x10
    171e:	d3 8a       	std	Z+19, r13	; 0x13
    1720:	c2 8a       	std	Z+18, r12	; 0x12
    1722:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <sprintf>
    1726:	8d b7       	in	r24, 0x3d	; 61
    1728:	9e b7       	in	r25, 0x3e	; 62
    172a:	44 96       	adiw	r24, 0x14	; 20
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	9e bf       	out	0x3e, r25	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	8d bf       	out	0x3d, r24	; 61
			"dav=%c,nrfd=%c,ndac=%c, eoi=%c, ifc=%c,ren=%c,atn=%c,srq=%c\n\r",
			dav, nrfd, ndac, eoi, ifc, ren, atn, srq);
	uart_puts(buf);
    1736:	82 ec       	ldi	r24, 0xC2	; 194
    1738:	94 e0       	ldi	r25, 0x04	; 4
    173a:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>
}
    173e:	2a 96       	adiw	r28, 0x0a	; 10
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	de bf       	out	0x3e, r29	; 62
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	cd bf       	out	0x3d, r28	; 61
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
    1752:	ff 90       	pop	r15
    1754:	ef 90       	pop	r14
    1756:	df 90       	pop	r13
    1758:	cf 90       	pop	r12
    175a:	bf 90       	pop	r11
    175c:	af 90       	pop	r10
    175e:	08 95       	ret

00001760 <gpib_serial_poll>:
 * I haven't looked how a device with two byte address behaves.
 *
 * Secondary/primary is returned in inout parameters
 * If any emitter is found, return value is != 0.
 */
uchar gpib_serial_poll(uint8_t *primary_v, uint8_t* secondary_v) {
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	2c 97       	sbiw	r28, 0x0c	; 12
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	9a 87       	std	Y+10, r25	; 0x0a
    1776:	89 87       	std	Y+9, r24	; 0x09
    1778:	7c 87       	std	Y+12, r23	; 0x0c
    177a:	6b 87       	std	Y+11, r22	; 0x0b
	uchar b, e;
	uchar primary = 0, secondary = 0, found = 0, foundPhysical =
    177c:	1e 82       	std	Y+6, r1	; 0x06
    177e:	1d 82       	std	Y+5, r1	; 0x05
    1780:	1c 82       	std	Y+4, r1	; 0x04
	ADDRESS_NOT_SET;
    1782:	8f ef       	ldi	r24, 0xFF	; 255
    1784:	8b 83       	std	Y+3, r24	; 0x03
	int i;

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	cmd_buf[0] = G_CMD_UNT;
    1786:	8f e5       	ldi	r24, 0x5F	; 95
    1788:	80 93 5e 04 	sts	0x045E, r24
	gpib_cmd(cmd_buf, 1);
    178c:	8e e5       	ldi	r24, 0x5E	; 94
    178e:	94 e0       	ldi	r25, 0x04	; 4
    1790:	61 e0       	ldi	r22, 0x01	; 1
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	0e 94 4a 07 	call	0xe94	; 0xe94 <gpib_cmd>
	cmd_buf[0] = G_CMD_UNL;
    1798:	8f e3       	ldi	r24, 0x3F	; 63
    179a:	80 93 5e 04 	sts	0x045E, r24
	gpib_cmd(cmd_buf, 1);
    179e:	8e e5       	ldi	r24, 0x5E	; 94
    17a0:	94 e0       	ldi	r25, 0x04	; 4
    17a2:	61 e0       	ldi	r22, 0x01	; 1
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	0e 94 4a 07 	call	0xe94	; 0xe94 <gpib_cmd>

	// serial poll enable
	// effect: all devices will send status byte instead of normal data when addressed
	// as talker
	//uart_puts("before SPE\r\n");
	cmd_buf[0] = G_CMD_SPE;
    17aa:	88 e1       	ldi	r24, 0x18	; 24
    17ac:	80 93 5e 04 	sts	0x045E, r24
	gpib_cmd(cmd_buf, 1);
    17b0:	8e e5       	ldi	r24, 0x5E	; 94
    17b2:	94 e0       	ldi	r25, 0x04	; 4
    17b4:	61 e0       	ldi	r22, 0x01	; 1
    17b6:	70 e0       	ldi	r23, 0x00	; 0
    17b8:	0e 94 4a 07 	call	0xe94	; 0xe94 <gpib_cmd>
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    17bc:	1a 82       	std	Y+2, r1	; 0x02
    17be:	19 82       	std	Y+1, r1	; 0x01
    17c0:	de c0       	rjmp	.+444    	; 0x197e <gpib_serial_poll+0x21e>
			i++) {

		// set partner to talker mode
		primary = address2TalkerAddress(controller.partners[i].primary);
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	9a 81       	ldd	r25, Y+2	; 0x02
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	fc 01       	movw	r30, r24
    17cc:	e7 55       	subi	r30, 0x57	; 87
    17ce:	fc 4f       	sbci	r31, 0xFC	; 252
    17d0:	80 81       	ld	r24, Z
    17d2:	80 5c       	subi	r24, 0xC0	; 192
    17d4:	8e 83       	std	Y+6, r24	; 0x06
		secondary = secondaryAdressToAdressByte(
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	9a 81       	ldd	r25, Y+2	; 0x02
    17da:	03 96       	adiw	r24, 0x03	; 3
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	fc 01       	movw	r30, r24
    17e2:	ec 55       	subi	r30, 0x5C	; 92
    17e4:	fc 4f       	sbci	r31, 0xFC	; 252
    17e6:	80 81       	ld	r24, Z
    17e8:	80 66       	ori	r24, 0x60	; 96
    17ea:	8d 83       	std	Y+5, r24	; 0x05
				controller.partners[i].secondary);

		cmd_buf[0] = primary;
    17ec:	8e 81       	ldd	r24, Y+6	; 0x06
    17ee:	80 93 5e 04 	sts	0x045E, r24
		//uart_puts("before talker address write\r\n");
		gpib_cmd(cmd_buf, 1);
    17f2:	8e e5       	ldi	r24, 0x5E	; 94
    17f4:	94 e0       	ldi	r25, 0x04	; 4
    17f6:	61 e0       	ldi	r22, 0x01	; 1
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	0e 94 4a 07 	call	0xe94	; 0xe94 <gpib_cmd>
		//uart_puts("after talker address write\r\n");
		// handle secondary address if required
		if (secondary != ADDRESS_NOT_SET) {
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	8f 3f       	cpi	r24, 0xFF	; 255
    1802:	49 f0       	breq	.+18     	; 0x1816 <gpib_serial_poll+0xb6>
			cmd_buf[0] = secondary;
    1804:	8d 81       	ldd	r24, Y+5	; 0x05
    1806:	80 93 5e 04 	sts	0x045E, r24
			//uart_puts("before talker address write\r\n");
			gpib_cmd(cmd_buf, 1);
    180a:	8e e5       	ldi	r24, 0x5E	; 94
    180c:	94 e0       	ldi	r25, 0x04	; 4
    180e:	61 e0       	ldi	r22, 0x01	; 1
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	0e 94 4a 07 	call	0xe94	; 0xe94 <gpib_cmd>
		}

		// now receive data
		//uart_puts("before status byte receive\r\n");
		e = gpib_receive(&b);
    1816:	ce 01       	movw	r24, r28
    1818:	08 96       	adiw	r24, 0x08	; 8
    181a:	0e 94 b0 05 	call	0xb60	; 0xb60 <gpib_receive>
    181e:	8f 83       	std	Y+7, r24	; 0x07
		//uart_puts("after status byte receive\r\n");
		// status byte is now in b

		if (secondary != ADDRESS_NOT_SET) {
    1820:	8d 81       	ldd	r24, Y+5	; 0x05
    1822:	8f 3f       	cpi	r24, 0xFF	; 255
    1824:	81 f1       	breq	.+96     	; 0x1886 <gpib_serial_poll+0x126>
			sprintf((char*) cmd_buf,
    1826:	8e 81       	ldd	r24, Y+6	; 0x06
    1828:	88 2f       	mov	r24, r24
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	bc 01       	movw	r22, r24
    182e:	60 54       	subi	r22, 0x40	; 64
    1830:	70 40       	sbci	r23, 0x00	; 0
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	88 85       	ldd	r24, Y+8	; 0x08
    183a:	48 2f       	mov	r20, r24
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	8d b7       	in	r24, 0x3d	; 61
    1840:	9e b7       	in	r25, 0x3e	; 62
    1842:	0a 97       	sbiw	r24, 0x0a	; 10
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	9e bf       	out	0x3e, r25	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	8d bf       	out	0x3d, r24	; 61
    184e:	ed b7       	in	r30, 0x3d	; 61
    1850:	fe b7       	in	r31, 0x3e	; 62
    1852:	31 96       	adiw	r30, 0x01	; 1
    1854:	8e e5       	ldi	r24, 0x5E	; 94
    1856:	94 e0       	ldi	r25, 0x04	; 4
    1858:	91 83       	std	Z+1, r25	; 0x01
    185a:	80 83       	st	Z, r24
    185c:	81 e4       	ldi	r24, 0x41	; 65
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	93 83       	std	Z+3, r25	; 0x03
    1862:	82 83       	std	Z+2, r24	; 0x02
    1864:	75 83       	std	Z+5, r23	; 0x05
    1866:	64 83       	std	Z+4, r22	; 0x04
    1868:	37 83       	std	Z+7, r19	; 0x07
    186a:	26 83       	std	Z+6, r18	; 0x06
    186c:	51 87       	std	Z+9, r21	; 0x09
    186e:	40 87       	std	Z+8, r20	; 0x08
    1870:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <sprintf>
    1874:	8d b7       	in	r24, 0x3d	; 61
    1876:	9e b7       	in	r25, 0x3e	; 62
    1878:	0a 96       	adiw	r24, 0x0a	; 10
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	f8 94       	cli
    187e:	9e bf       	out	0x3e, r25	; 62
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	8d bf       	out	0x3d, r24	; 61
    1884:	2a c0       	rjmp	.+84     	; 0x18da <gpib_serial_poll+0x17a>
					"Status byte from device primary=0x%02x,secondary=0x%02x (physical) = 0x%02x\n\r",
					TalkerAddress2Address(primary), secondary, b);
		} else {
			sprintf((char*) cmd_buf,
    1886:	8e 81       	ldd	r24, Y+6	; 0x06
    1888:	88 2f       	mov	r24, r24
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	9c 01       	movw	r18, r24
    188e:	20 54       	subi	r18, 0x40	; 64
    1890:	30 40       	sbci	r19, 0x00	; 0
    1892:	88 85       	ldd	r24, Y+8	; 0x08
    1894:	48 2f       	mov	r20, r24
    1896:	50 e0       	ldi	r21, 0x00	; 0
    1898:	8d b7       	in	r24, 0x3d	; 61
    189a:	9e b7       	in	r25, 0x3e	; 62
    189c:	08 97       	sbiw	r24, 0x08	; 8
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	9e bf       	out	0x3e, r25	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	8d bf       	out	0x3d, r24	; 61
    18a8:	ed b7       	in	r30, 0x3d	; 61
    18aa:	fe b7       	in	r31, 0x3e	; 62
    18ac:	31 96       	adiw	r30, 0x01	; 1
    18ae:	8e e5       	ldi	r24, 0x5E	; 94
    18b0:	94 e0       	ldi	r25, 0x04	; 4
    18b2:	91 83       	std	Z+1, r25	; 0x01
    18b4:	80 83       	st	Z, r24
    18b6:	8f e8       	ldi	r24, 0x8F	; 143
    18b8:	91 e0       	ldi	r25, 0x01	; 1
    18ba:	93 83       	std	Z+3, r25	; 0x03
    18bc:	82 83       	std	Z+2, r24	; 0x02
    18be:	35 83       	std	Z+5, r19	; 0x05
    18c0:	24 83       	std	Z+4, r18	; 0x04
    18c2:	57 83       	std	Z+7, r21	; 0x07
    18c4:	46 83       	std	Z+6, r20	; 0x06
    18c6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <sprintf>
    18ca:	8d b7       	in	r24, 0x3d	; 61
    18cc:	9e b7       	in	r25, 0x3e	; 62
    18ce:	08 96       	adiw	r24, 0x08	; 8
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	9e bf       	out	0x3e, r25	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	8d bf       	out	0x3d, r24	; 61
					"Status byte from device primary=0x%02x (physical) = 0x%02x\n\r",
					TalkerAddress2Address(primary), b);
		}
		uart_puts((char*) cmd_buf);
    18da:	8e e5       	ldi	r24, 0x5E	; 94
    18dc:	94 e0       	ldi	r25, 0x04	; 4
    18de:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>

		// send UNT and UNL commands (unlisten and untalk)
		// effect: all talker stop talking and all listeners stop listening
		cmd_buf[0] = G_CMD_UNT;
    18e2:	8f e5       	ldi	r24, 0x5F	; 95
    18e4:	80 93 5e 04 	sts	0x045E, r24
		gpib_cmd(cmd_buf, 1);
    18e8:	8e e5       	ldi	r24, 0x5E	; 94
    18ea:	94 e0       	ldi	r25, 0x04	; 4
    18ec:	61 e0       	ldi	r22, 0x01	; 1
    18ee:	70 e0       	ldi	r23, 0x00	; 0
    18f0:	0e 94 4a 07 	call	0xe94	; 0xe94 <gpib_cmd>
		cmd_buf[0] = G_CMD_UNL;
    18f4:	8f e3       	ldi	r24, 0x3F	; 63
    18f6:	80 93 5e 04 	sts	0x045E, r24
		gpib_cmd(cmd_buf, 1);
    18fa:	8e e5       	ldi	r24, 0x5E	; 94
    18fc:	94 e0       	ldi	r25, 0x04	; 4
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	0e 94 4a 07 	call	0xe94	; 0xe94 <gpib_cmd>

		if (b & (1 << 6)) {
    1906:	88 85       	ldd	r24, Y+8	; 0x08
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	80 74       	andi	r24, 0x40	; 64
    190e:	90 70       	andi	r25, 0x00	; 0
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	81 f1       	breq	.+96     	; 0x1974 <gpib_serial_poll+0x214>
			found = primary;
    1914:	8e 81       	ldd	r24, Y+6	; 0x06
    1916:	8c 83       	std	Y+4, r24	; 0x04
			foundPhysical = TalkerAddress2Address(found);
    1918:	8c 81       	ldd	r24, Y+4	; 0x04
    191a:	80 54       	subi	r24, 0x40	; 64
    191c:	8b 83       	std	Y+3, r24	; 0x03
			// bit 6 of status byte of SRQ emitter is 1
			// when reading status byte from emitter, he releases SRQ line (may also be tested here)
			sprintf((char*) cmd_buf,
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	8d 81       	ldd	r24, Y+5	; 0x05
    1926:	48 2f       	mov	r20, r24
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	8d b7       	in	r24, 0x3d	; 61
    192c:	9e b7       	in	r25, 0x3e	; 62
    192e:	08 97       	sbiw	r24, 0x08	; 8
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	9e bf       	out	0x3e, r25	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	8d bf       	out	0x3d, r24	; 61
    193a:	ed b7       	in	r30, 0x3d	; 61
    193c:	fe b7       	in	r31, 0x3e	; 62
    193e:	31 96       	adiw	r30, 0x01	; 1
    1940:	8e e5       	ldi	r24, 0x5E	; 94
    1942:	94 e0       	ldi	r25, 0x04	; 4
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	80 83       	st	Z, r24
    1948:	8c ec       	ldi	r24, 0xCC	; 204
    194a:	91 e0       	ldi	r25, 0x01	; 1
    194c:	93 83       	std	Z+3, r25	; 0x03
    194e:	82 83       	std	Z+2, r24	; 0x02
    1950:	35 83       	std	Z+5, r19	; 0x05
    1952:	24 83       	std	Z+4, r18	; 0x04
    1954:	57 83       	std	Z+7, r21	; 0x07
    1956:	46 83       	std	Z+6, r20	; 0x06
    1958:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <sprintf>
    195c:	8d b7       	in	r24, 0x3d	; 61
    195e:	9e b7       	in	r25, 0x3e	; 62
    1960:	08 96       	adiw	r24, 0x08	; 8
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	9e bf       	out	0x3e, r25	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	8d bf       	out	0x3d, r24	; 61
					"SRQ emitter is device = 0x%02x (physical address), secondary = 0x%02x\n\r",
					foundPhysical, secondary);
			uart_puts((char*) cmd_buf);
    196c:	8e e5       	ldi	r24, 0x5E	; 94
    196e:	94 e0       	ldi	r25, 0x04	; 4
    1970:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>
	gpib_cmd(cmd_buf, 1);
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
			i++) {
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	9a 81       	ldd	r25, Y+2	; 0x02
    1978:	01 96       	adiw	r24, 0x01	; 1
    197a:	9a 83       	std	Y+2, r25	; 0x02
    197c:	89 83       	std	Y+1, r24	; 0x01
	cmd_buf[0] = G_CMD_SPE;
	gpib_cmd(cmd_buf, 1);
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	fc 01       	movw	r30, r24
    1988:	e7 55       	subi	r30, 0x57	; 87
    198a:	fc 4f       	sbci	r31, 0xFC	; 252
    198c:	80 81       	ld	r24, Z
    198e:	8f 3f       	cpi	r24, 0xFF	; 255
    1990:	21 f0       	breq	.+8      	; 0x199a <gpib_serial_poll+0x23a>
    1992:	8c 81       	ldd	r24, Y+4	; 0x04
    1994:	88 23       	and	r24, r24
    1996:	09 f4       	brne	.+2      	; 0x199a <gpib_serial_poll+0x23a>
    1998:	14 cf       	rjmp	.-472    	; 0x17c2 <gpib_serial_poll+0x62>
		}
	}

	// serial poll disable
	// effect: all devices will return to normal behaviour as talker
	cmd_buf[0] = G_CMD_SPD;
    199a:	89 e1       	ldi	r24, 0x19	; 25
    199c:	80 93 5e 04 	sts	0x045E, r24
	//uart_puts("before SPD\r\n");
	gpib_cmd(cmd_buf, 1);
    19a0:	8e e5       	ldi	r24, 0x5E	; 94
    19a2:	94 e0       	ldi	r25, 0x04	; 4
    19a4:	61 e0       	ldi	r22, 0x01	; 1
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	0e 94 4a 07 	call	0xe94	; 0xe94 <gpib_cmd>
	//uart_puts("after SPD\r\n");

	// "return" values determined
	*primary_v = primary;
    19ac:	e9 85       	ldd	r30, Y+9	; 0x09
    19ae:	fa 85       	ldd	r31, Y+10	; 0x0a
    19b0:	8e 81       	ldd	r24, Y+6	; 0x06
    19b2:	80 83       	st	Z, r24
	*secondary_v = secondary;
    19b4:	eb 85       	ldd	r30, Y+11	; 0x0b
    19b6:	fc 85       	ldd	r31, Y+12	; 0x0c
    19b8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ba:	80 83       	st	Z, r24

	return found;
    19bc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    19be:	2c 96       	adiw	r28, 0x0c	; 12
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <gpib_set_partner_address>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_address(uchar primary, uchar secondary) {
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	00 d0       	rcall	.+0      	; 0x19d6 <gpib_set_partner_address+0x6>
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	6a 83       	std	Y+2, r22	; 0x02
	controller.partner.primary = primary;
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	80 93 a5 03 	sts	0x03A5, r24
	controller.partner.secondary = secondary;
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	80 93 a6 03 	sts	0x03A6, r24
}
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	08 95       	ret

000019f4 <gpib_set_partner_secondary>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_secondary(uchar secondary) {
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	0f 92       	push	r0
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	89 83       	std	Y+1, r24	; 0x01
	controller.partner.secondary = secondary;
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	80 93 a6 03 	sts	0x03A6, r24
}
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <gpib_get_partner_pad>:

/**
 * Get primary address of device currently controlled.
 * \returns primary address Address of device.
 */
uchar gpib_get_partner_pad(void) {
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.primary;
    1a16:	80 91 a5 03 	lds	r24, 0x03A5
}
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <gpib_get_partner_sad>:

/**
 * Get secondary address of device currently controlled.
 * \returns secondary address Address of device.
 */
uchar gpib_get_partner_sad(void) {
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.secondary;
    1a28:	80 91 a6 03 	lds	r24, 0x03A6
}
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <gpib_get_address>:

/**
 * Get controller address.
 * \returns address of controller.
 */
uchar gpib_get_address(void) {
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
	return controller.myaddress;
    1a3a:	80 91 a4 03 	lds	r24, 0x03A4
}
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	08 95       	ret

00001a44 <gpib_set_flavour>:

void gpib_set_flavour(uchar flavour) {
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	0f 92       	push	r0
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	89 83       	std	Y+1, r24	; 0x01
	controller.flavour = flavour;
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	80 93 a8 03 	sts	0x03A8, r24
}
    1a56:	0f 90       	pop	r0
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	08 95       	ret

00001a5e <gpib_get_flavour>:

uchar gpib_get_flavour(void) {
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
	return controller.flavour;
    1a66:	80 91 a8 03 	lds	r24, 0x03A8
}
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <gpib_clear_partners>:

/**
 * Clear partners list
 */
void gpib_clear_partners() {
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <gpib_clear_partners+0x6>
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < MAX_PARTNER; i++) {
    1a7a:	1a 82       	std	Y+2, r1	; 0x02
    1a7c:	19 82       	std	Y+1, r1	; 0x01
    1a7e:	0e c0       	rjmp	.+28     	; 0x1a9c <gpib_clear_partners+0x2c>
		controller.partners[i].primary = ADDRESS_NOT_SET;
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	9a 81       	ldd	r25, Y+2	; 0x02
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	fc 01       	movw	r30, r24
    1a8a:	e7 55       	subi	r30, 0x57	; 87
    1a8c:	fc 4f       	sbci	r31, 0xFC	; 252
    1a8e:	8f ef       	ldi	r24, 0xFF	; 255
    1a90:	80 83       	st	Z, r24

/**
 * Clear partners list
 */
void gpib_clear_partners() {
	for (int i = 0; i < MAX_PARTNER; i++) {
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	9a 81       	ldd	r25, Y+2	; 0x02
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	9a 83       	std	Y+2, r25	; 0x02
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa0:	85 30       	cpi	r24, 0x05	; 5
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	6c f3       	brlt	.-38     	; 0x1a80 <gpib_clear_partners+0x10>
		controller.partners[i].primary = ADDRESS_NOT_SET;
	}
}
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <gpib_add_partner_address>:

/**
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	00 d0       	rcall	.+0      	; 0x1ab6 <gpib_add_partner_address+0x6>
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <gpib_add_partner_address+0x8>
    1ab8:	0f 92       	push	r0
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	8b 83       	std	Y+3, r24	; 0x03
    1ac0:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1ac2:	1a 82       	std	Y+2, r1	; 0x02
    1ac4:	19 82       	std	Y+1, r1	; 0x01
    1ac6:	05 c0       	rjmp	.+10     	; 0x1ad2 <gpib_add_partner_address+0x22>
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
			i++) {
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	9a 81       	ldd	r25, Y+2	; 0x02
    1acc:	01 96       	adiw	r24, 0x01	; 1
    1ace:	9a 83       	std	Y+2, r25	; 0x02
    1ad0:	89 83       	std	Y+1, r24	; 0x01
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad6:	85 30       	cpi	r24, 0x05	; 5
    1ad8:	91 05       	cpc	r25, r1
    1ada:	54 f4       	brge	.+20     	; 0x1af0 <gpib_add_partner_address+0x40>
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	e7 55       	subi	r30, 0x57	; 87
    1ae8:	fc 4f       	sbci	r31, 0xFC	; 252
    1aea:	80 81       	ld	r24, Z
    1aec:	8f 3f       	cpi	r24, 0xFF	; 255
    1aee:	61 f7       	brne	.-40     	; 0x1ac8 <gpib_add_partner_address+0x18>
			i++) {
	}
	if (i == MAX_PARTNER) {
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	85 30       	cpi	r24, 0x05	; 5
    1af6:	91 05       	cpc	r25, r1
    1af8:	39 f4       	brne	.+14     	; 0x1b08 <gpib_add_partner_address+0x58>
		uart_puts("Too much partners.\n\r");
    1afa:	84 e1       	ldi	r24, 0x14	; 20
    1afc:	92 e0       	ldi	r25, 0x02	; 2
    1afe:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>
		return 1;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	8d 83       	std	Y+5, r24	; 0x05
    1b06:	14 c0       	rjmp	.+40     	; 0x1b30 <gpib_add_partner_address+0x80>
	}
	controller.partners[i].primary = primary;
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	fc 01       	movw	r30, r24
    1b12:	e7 55       	subi	r30, 0x57	; 87
    1b14:	fc 4f       	sbci	r31, 0xFC	; 252
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	80 83       	st	Z, r24
	controller.partners[i].secondary = secondary;
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1e:	03 96       	adiw	r24, 0x03	; 3
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	fc 01       	movw	r30, r24
    1b26:	ec 55       	subi	r30, 0x5C	; 92
    1b28:	fc 4f       	sbci	r31, 0xFC	; 252
    1b2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2c:	80 83       	st	Z, r24
	return 0;
    1b2e:	1d 82       	std	Y+5, r1	; 0x05
    1b30:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <gpib_remove_partner_address>:

/**
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <gpib_remove_partner_address+0x6>
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <gpib_remove_partner_address+0x8>
    1b4a:	0f 92       	push	r0
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	8b 83       	std	Y+3, r24	; 0x03
    1b52:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1b54:	1a 82       	std	Y+2, r1	; 0x02
    1b56:	19 82       	std	Y+1, r1	; 0x01
    1b58:	05 c0       	rjmp	.+10     	; 0x1b64 <gpib_remove_partner_address+0x22>
			i < MAX_PARTNER
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5e:	01 96       	adiw	r24, 0x01	; 1
    1b60:	9a 83       	std	Y+2, r25	; 0x02
    1b62:	89 83       	std	Y+1, r24	; 0x01
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	9a 81       	ldd	r25, Y+2	; 0x02
    1b68:	85 30       	cpi	r24, 0x05	; 5
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	bc f4       	brge	.+46     	; 0x1b9c <gpib_remove_partner_address+0x5a>
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	fc 01       	movw	r30, r24
    1b78:	e7 55       	subi	r30, 0x57	; 87
    1b7a:	fc 4f       	sbci	r31, 0xFC	; 252
    1b7c:	90 81       	ld	r25, Z
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	98 17       	cp	r25, r24
    1b82:	59 f7       	brne	.-42     	; 0x1b5a <gpib_remove_partner_address+0x18>
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	9a 81       	ldd	r25, Y+2	; 0x02
    1b88:	03 96       	adiw	r24, 0x03	; 3
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	fc 01       	movw	r30, r24
    1b90:	ec 55       	subi	r30, 0x5C	; 92
    1b92:	fc 4f       	sbci	r31, 0xFC	; 252
    1b94:	90 81       	ld	r25, Z
    1b96:	8c 81       	ldd	r24, Y+4	; 0x04
    1b98:	98 17       	cp	r25, r24
    1b9a:	f9 f6       	brne	.-66     	; 0x1b5a <gpib_remove_partner_address+0x18>
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
	}
	if (i == MAX_PARTNER) {
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba0:	85 30       	cpi	r24, 0x05	; 5
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	39 f4       	brne	.+14     	; 0x1bb4 <gpib_remove_partner_address+0x72>
		uart_puts("Partner unknown.\n\r");
    1ba6:	89 e2       	ldi	r24, 0x29	; 41
    1ba8:	92 e0       	ldi	r25, 0x02	; 2
    1baa:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>
		return 1;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	8d 83       	std	Y+5, r24	; 0x05
    1bb2:	14 c0       	rjmp	.+40     	; 0x1bdc <gpib_remove_partner_address+0x9a>
	}
	controller.partners[i].primary = ADDRESS_NOT_SET;
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	e7 55       	subi	r30, 0x57	; 87
    1bc0:	fc 4f       	sbci	r31, 0xFC	; 252
    1bc2:	8f ef       	ldi	r24, 0xFF	; 255
    1bc4:	80 83       	st	Z, r24
	controller.partners[i].secondary = ADDRESS_NOT_SET;
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bca:	03 96       	adiw	r24, 0x03	; 3
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	ec 55       	subi	r30, 0x5C	; 92
    1bd4:	fc 4f       	sbci	r31, 0xFC	; 252
    1bd6:	8f ef       	ldi	r24, 0xFF	; 255
    1bd8:	80 83       	st	Z, r24
	return 0;
    1bda:	1d 82       	std	Y+5, r1	; 0x05
    1bdc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <stringToTwoUchars>:

/**
 * Read two integers from string like "45 56" or one integer. In latter case
 * the second integer is initialized with a special value.
 */
static void stringToTwoUchars(char *string, uchar *a, uchar *b) {
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	28 97       	sbiw	r28, 0x08	; 8
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	9c 83       	std	Y+4, r25	; 0x04
    1c04:	8b 83       	std	Y+3, r24	; 0x03
    1c06:	7e 83       	std	Y+6, r23	; 0x06
    1c08:	6d 83       	std	Y+5, r22	; 0x05
    1c0a:	58 87       	std	Y+8, r21	; 0x08
    1c0c:	4f 83       	std	Y+7, r20	; 0x07
	char *token = strtok(string, " ");
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	9c 81       	ldd	r25, Y+4	; 0x04
    1c12:	2c e3       	ldi	r18, 0x3C	; 60
    1c14:	32 e0       	ldi	r19, 0x02	; 2
    1c16:	b9 01       	movw	r22, r18
    1c18:	0e 94 a8 01 	call	0x350	; 0x350 <strtok>
    1c1c:	9a 83       	std	Y+2, r25	; 0x02
    1c1e:	89 83       	std	Y+1, r24	; 0x01
	*a = atoi((char*) token);
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	9a 81       	ldd	r25, Y+2	; 0x02
    1c24:	0e 94 8a 01 	call	0x314	; 0x314 <atoi>
    1c28:	ed 81       	ldd	r30, Y+5	; 0x05
    1c2a:	fe 81       	ldd	r31, Y+6	; 0x06
    1c2c:	80 83       	st	Z, r24
	token = strtok(NULL, " ");
    1c2e:	2c e3       	ldi	r18, 0x3C	; 60
    1c30:	32 e0       	ldi	r19, 0x02	; 2
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	b9 01       	movw	r22, r18
    1c38:	0e 94 a8 01 	call	0x350	; 0x350 <strtok>
    1c3c:	9a 83       	std	Y+2, r25	; 0x02
    1c3e:	89 83       	std	Y+1, r24	; 0x01
	if (token != NULL) {
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	9a 81       	ldd	r25, Y+2	; 0x02
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	41 f0       	breq	.+16     	; 0x1c58 <stringToTwoUchars+0x6a>
		*b = atoi((char*) token);
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	0e 94 8a 01 	call	0x314	; 0x314 <atoi>
    1c50:	ef 81       	ldd	r30, Y+7	; 0x07
    1c52:	f8 85       	ldd	r31, Y+8	; 0x08
    1c54:	80 83       	st	Z, r24
    1c56:	04 c0       	rjmp	.+8      	; 0x1c60 <stringToTwoUchars+0x72>
	} else {
		*b = ADDRESS_NOT_SET;
    1c58:	ef 81       	ldd	r30, Y+7	; 0x07
    1c5a:	f8 85       	ldd	r31, Y+8	; 0x08
    1c5c:	8f ef       	ldi	r24, 0xFF	; 255
    1c5e:	80 83       	st	Z, r24
	}
}
    1c60:	28 96       	adiw	r28, 0x08	; 8
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <check_errors>:
 *
 * Reads error queue first entry.
 * TODO: read complete queue in while loop.
 *
 */
void check_errors() {
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <check_errors+0x6>
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
	char *error_cmd = "SYST:ERR?";
    1c7c:	8e e3       	ldi	r24, 0x3E	; 62
    1c7e:	92 e0       	ldi	r25, 0x02	; 2
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	89 83       	std	Y+1, r24	; 0x01
	//send_command(error_cmd, SEND_FULL_CMD);
	receiveAnswer();
    1c84:	0e 94 9a 10 	call	0x2134	; 0x2134 <receiveAnswer>
}
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	cf 91       	pop	r28
    1c8e:	df 91       	pop	r29
    1c90:	08 95       	ret

00001c92 <input_char>:

/**
 * Reads in character into parameter c. Checks for errors and prints them out.
 * Returns 0 if there is no char to read, 1 if there was a char read in.
 */
uchar input_char(uchar *ch) {
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <input_char+0x6>
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <input_char+0x8>
    1c9a:	0f 92       	push	r0
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	9c 83       	std	Y+4, r25	; 0x04
    1ca2:	8b 83       	std	Y+3, r24	; 0x03
	 * uart_getc() returns in the lower byte the received character and
	 * in the higher byte (bitmask) the last receive error
	 * UART_NO_DATA is returned when no data is available.
	 *
	 */
	c = uart_getc();
    1ca4:	0e 94 05 14 	call	0x280a	; 0x280a <uart_getc>
    1ca8:	9a 83       	std	Y+2, r25	; 0x02
    1caa:	89 83       	std	Y+1, r24	; 0x01
	if (c & UART_NO_DATA) {
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb0:	80 70       	andi	r24, 0x00	; 0
    1cb2:	91 70       	andi	r25, 0x01	; 1
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	11 f0       	breq	.+4      	; 0x1cbc <input_char+0x2a>
		// no data available from UART
		return 0;
    1cb8:	1d 82       	std	Y+5, r1	; 0x05
    1cba:	24 c0       	rjmp	.+72     	; 0x1d04 <input_char+0x72>
	}
	// make uchar from character in int value
	*ch = (uchar) c;
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	eb 81       	ldd	r30, Y+3	; 0x03
    1cc0:	fc 81       	ldd	r31, Y+4	; 0x04
    1cc2:	80 83       	st	Z, r24

	/*
	 * new data available from UART
	 * check for Frame or Overrun error
	 */
	if (c & UART_FRAME_ERROR) {
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc8:	80 70       	andi	r24, 0x00	; 0
    1cca:	98 70       	andi	r25, 0x08	; 8
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	21 f0       	breq	.+8      	; 0x1cd8 <input_char+0x46>
		/* Framing Error detected, i.e no stop bit detected */
		uart_puts_P("UART Frame Error: ");
    1cd0:	81 e8       	ldi	r24, 0x81	; 129
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
	}
	if (c & UART_OVERRUN_ERROR) {
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	9a 81       	ldd	r25, Y+2	; 0x02
    1cdc:	80 70       	andi	r24, 0x00	; 0
    1cde:	94 70       	andi	r25, 0x04	; 4
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	21 f0       	breq	.+8      	; 0x1cec <input_char+0x5a>
		/*
		 * Overrun, a character already present in the UART UDR register was
		 * not read by the interrupt handler before the next character arrived,
		 * one or more received characters have been dropped
		 */
		uart_puts_P("UART Overrun Error: ");
    1ce4:	8c e6       	ldi	r24, 0x6C	; 108
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
	}
	if (c & UART_BUFFER_OVERFLOW) {
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	80 70       	andi	r24, 0x00	; 0
    1cf2:	92 70       	andi	r25, 0x02	; 2
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	21 f0       	breq	.+8      	; 0x1d00 <input_char+0x6e>
		/*
		 * We are not reading the receive buffer fast enough,
		 * one or more received character have been dropped
		 */
		uart_puts_P("Buffer overflow error: ");
    1cf8:	84 e5       	ldi	r24, 0x54	; 84
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
	}
	return 1;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	8d 83       	std	Y+5, r24	; 0x05
    1d04:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <process_char>:
 * a) xon/xoff mode forward buffer to GPIB
 * b) no flow control: prints error message that input buffer is full.
 *
 * Returns 1 if command end is detected, 0 otherwise.
 */
uchar process_char(uchar ch) {
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <process_char+0x6>
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
    1d20:	8a 83       	std	Y+2, r24	; 0x02
	uchar ret = 0;
    1d22:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * send received character back depending on global flag
	 */
	if (rs232_remote_echo) {
    1d24:	80 91 9d 03 	lds	r24, 0x039D
    1d28:	88 23       	and	r24, r24
    1d2a:	19 f0       	breq	.+6      	; 0x1d32 <process_char+0x1c>
		uart_putc((unsigned char) ch);
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <uart_putc>
	}

	// if input buffer is not full, add char
	if (buf_ptr < COMMAND_INPUT_BUFFER_SIZE - 1) {
    1d32:	80 91 b3 03 	lds	r24, 0x03B3
    1d36:	90 91 b4 03 	lds	r25, 0x03B4
    1d3a:	8f 34       	cpi	r24, 0x4F	; 79
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	bc f4       	brge	.+46     	; 0x1d6e <process_char+0x58>
		buf[buf_ptr++] = ch;
    1d40:	20 91 b3 03 	lds	r18, 0x03B3
    1d44:	30 91 b4 03 	lds	r19, 0x03B4
    1d48:	f9 01       	movw	r30, r18
    1d4a:	ee 53       	subi	r30, 0x3E	; 62
    1d4c:	fb 4f       	sbci	r31, 0xFB	; 251
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	80 83       	st	Z, r24
    1d52:	c9 01       	movw	r24, r18
    1d54:	01 96       	adiw	r24, 0x01	; 1
    1d56:	90 93 b4 03 	sts	0x03B4, r25
    1d5a:	80 93 b3 03 	sts	0x03B3, r24
		buf[buf_ptr] = '\0';
    1d5e:	80 91 b3 03 	lds	r24, 0x03B3
    1d62:	90 91 b4 03 	lds	r25, 0x03B4
    1d66:	fc 01       	movw	r30, r24
    1d68:	ee 53       	subi	r30, 0x3E	; 62
    1d6a:	fb 4f       	sbci	r31, 0xFB	; 251
    1d6c:	10 82       	st	Z, r1
	}

	// if command ends or buffer is full ...
	if (ch == ASCII_CODE_CR || buf_ptr >= COMMAND_INPUT_BUFFER_SIZE - 1) {
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	8d 30       	cpi	r24, 0x0D	; 13
    1d72:	39 f0       	breq	.+14     	; 0x1d82 <process_char+0x6c>
    1d74:	80 91 b3 03 	lds	r24, 0x03B3
    1d78:	90 91 b4 03 	lds	r25, 0x03B4
    1d7c:	8f 34       	cpi	r24, 0x4F	; 79
    1d7e:	91 05       	cpc	r25, r1
    1d80:	fc f0       	brlt	.+62     	; 0x1dc0 <process_char+0xaa>
		if (ch == ASCII_CODE_CR) {
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	8d 30       	cpi	r24, 0x0D	; 13
    1d86:	a1 f4       	brne	.+40     	; 0x1db0 <process_char+0x9a>
			// adjust string terminator
			buf[--buf_ptr] = '\0';
    1d88:	80 91 b3 03 	lds	r24, 0x03B3
    1d8c:	90 91 b4 03 	lds	r25, 0x03B4
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	90 93 b4 03 	sts	0x03B4, r25
    1d96:	80 93 b3 03 	sts	0x03B3, r24
    1d9a:	80 91 b3 03 	lds	r24, 0x03B3
    1d9e:	90 91 b4 03 	lds	r25, 0x03B4
    1da2:	fc 01       	movw	r30, r24
    1da4:	ee 53       	subi	r30, 0x3E	; 62
    1da6:	fb 4f       	sbci	r31, 0xFB	; 251
    1da8:	10 82       	st	Z, r1
			// let calling function send last command part (or command itself)
			ret = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	08 c0       	rjmp	.+16     	; 0x1dc0 <process_char+0xaa>
		} else {
			// send intermediate part of command.
			uart_puts_P("Command overflow.");
    1db0:	84 e9       	ldi	r24, 0x94	; 148
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
			buf_ptr = 0;
    1db8:	10 92 b4 03 	sts	0x03B4, r1
    1dbc:	10 92 b3 03 	sts	0x03B3, r1
		}
	}
	return ret;
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <input_process>:
 * This approach handles small single line commands (needing no flow control) and large
 * multi-line commands if flow control is xon/xoff.
 *
 * \returns The character read in
 */
uchar input_process(void) {
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	00 d0       	rcall	.+0      	; 0x1dd2 <input_process+0x6>
    1dd2:	0f 92       	push	r0
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
	uchar ch, ret = 0;
    1dd8:	19 82       	std	Y+1, r1	; 0x01

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
    1dda:	0e 94 ff 12 	call	0x25fe	; 0x25fe <uart_get_flow_control>
    1dde:	81 30       	cpi	r24, 0x01	; 1
    1de0:	89 f4       	brne	.+34     	; 0x1e04 <input_process+0x38>
    1de2:	0c c0       	rjmp	.+24     	; 0x1dfc <input_process+0x30>
		while (!ret) {
			// if nothing can be read in, return
			if (!input_char(&ch)) {
    1de4:	ce 01       	movw	r24, r28
    1de6:	02 96       	adiw	r24, 0x02	; 2
    1de8:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <input_char>
    1dec:	88 23       	and	r24, r24
    1dee:	11 f4       	brne	.+4      	; 0x1df4 <input_process+0x28>
				return 0;
    1df0:	1b 82       	std	Y+3, r1	; 0x03
    1df2:	16 c0       	rjmp	.+44     	; 0x1e20 <input_process+0x54>
			}
			ret = process_char(ch);
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <process_char>
    1dfa:	89 83       	std	Y+1, r24	; 0x01
 */
uchar input_process(void) {
	uchar ch, ret = 0;

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
		while (!ret) {
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	88 23       	and	r24, r24
    1e00:	89 f3       	breq	.-30     	; 0x1de4 <input_process+0x18>
    1e02:	0c c0       	rjmp	.+24     	; 0x1e1c <input_process+0x50>
			}
			ret = process_char(ch);
		}
	} else {
		// if nothing can be read in, return
		if (!input_char(&ch)) {
    1e04:	ce 01       	movw	r24, r28
    1e06:	02 96       	adiw	r24, 0x02	; 2
    1e08:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <input_char>
    1e0c:	88 23       	and	r24, r24
    1e0e:	11 f4       	brne	.+4      	; 0x1e14 <input_process+0x48>
			return 0;
    1e10:	1b 82       	std	Y+3, r1	; 0x03
    1e12:	06 c0       	rjmp	.+12     	; 0x1e20 <input_process+0x54>
		}
		ret = process_char(ch);
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <process_char>
    1e1a:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	8b 83       	std	Y+3, r24	; 0x03
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <handle_internal_commands>:

/**
 * Handles builtin commands.
 */
void handle_internal_commands(uchar *commandString) {
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <handle_internal_commands+0x6>
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <handle_internal_commands+0x8>
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <handle_internal_commands+0xa>
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	9c 83       	std	Y+4, r25	; 0x04
    1e3e:	8b 83       	std	Y+3, r24	; 0x03
	uchar val, val1;

	switch (buf[1]) {
    1e40:	80 91 c3 04 	lds	r24, 0x04C3
    1e44:	28 2f       	mov	r18, r24
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	3e 83       	std	Y+6, r19	; 0x06
    1e4a:	2d 83       	std	Y+5, r18	; 0x05
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e50:	88 36       	cpi	r24, 0x68	; 104
    1e52:	91 05       	cpc	r25, r1
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <handle_internal_commands+0x2a>
    1e56:	30 c1       	rjmp	.+608    	; 0x20b8 <handle_internal_commands+0x28a>
    1e58:	2d 81       	ldd	r18, Y+5	; 0x05
    1e5a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e5c:	29 36       	cpi	r18, 0x69	; 105
    1e5e:	31 05       	cpc	r19, r1
    1e60:	f4 f4       	brge	.+60     	; 0x1e9e <handle_internal_commands+0x70>
    1e62:	8d 81       	ldd	r24, Y+5	; 0x05
    1e64:	9e 81       	ldd	r25, Y+6	; 0x06
    1e66:	81 36       	cpi	r24, 0x61	; 97
    1e68:	91 05       	cpc	r25, r1
    1e6a:	61 f1       	breq	.+88     	; 0x1ec4 <handle_internal_commands+0x96>
    1e6c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e6e:	3e 81       	ldd	r19, Y+6	; 0x06
    1e70:	22 36       	cpi	r18, 0x62	; 98
    1e72:	31 05       	cpc	r19, r1
    1e74:	6c f4       	brge	.+26     	; 0x1e90 <handle_internal_commands+0x62>
    1e76:	8d 81       	ldd	r24, Y+5	; 0x05
    1e78:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7a:	8b 32       	cpi	r24, 0x2B	; 43
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	09 f4       	brne	.+2      	; 0x1e82 <handle_internal_commands+0x54>
    1e80:	88 c0       	rjmp	.+272    	; 0x1f92 <handle_internal_commands+0x164>
    1e82:	2d 81       	ldd	r18, Y+5	; 0x05
    1e84:	3e 81       	ldd	r19, Y+6	; 0x06
    1e86:	2d 32       	cpi	r18, 0x2D	; 45
    1e88:	31 05       	cpc	r19, r1
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <handle_internal_commands+0x60>
    1e8c:	bf c0       	rjmp	.+382    	; 0x200c <handle_internal_commands+0x1de>
    1e8e:	43 c1       	rjmp	.+646    	; 0x2116 <handle_internal_commands+0x2e8>
    1e90:	8d 81       	ldd	r24, Y+5	; 0x05
    1e92:	9e 81       	ldd	r25, Y+6	; 0x06
    1e94:	85 36       	cpi	r24, 0x65	; 101
    1e96:	91 05       	cpc	r25, r1
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <handle_internal_commands+0x6e>
    1e9a:	36 c1       	rjmp	.+620    	; 0x2108 <handle_internal_commands+0x2da>
    1e9c:	3c c1       	rjmp	.+632    	; 0x2116 <handle_internal_commands+0x2e8>
    1e9e:	2d 81       	ldd	r18, Y+5	; 0x05
    1ea0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ea2:	23 37       	cpi	r18, 0x73	; 115
    1ea4:	31 05       	cpc	r19, r1
    1ea6:	09 f4       	brne	.+2      	; 0x1eaa <handle_internal_commands+0x7c>
    1ea8:	4a c0       	rjmp	.+148    	; 0x1f3e <handle_internal_commands+0x110>
    1eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1eac:	9e 81       	ldd	r25, Y+6	; 0x06
    1eae:	88 37       	cpi	r24, 0x78	; 120
    1eb0:	91 05       	cpc	r25, r1
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <handle_internal_commands+0x88>
    1eb4:	e8 c0       	rjmp	.+464    	; 0x2086 <handle_internal_commands+0x258>
    1eb6:	2d 81       	ldd	r18, Y+5	; 0x05
    1eb8:	3e 81       	ldd	r19, Y+6	; 0x06
    1eba:	29 36       	cpi	r18, 0x69	; 105
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <handle_internal_commands+0x94>
    1ec0:	fe c0       	rjmp	.+508    	; 0x20be <handle_internal_commands+0x290>
    1ec2:	29 c1       	rjmp	.+594    	; 0x2116 <handle_internal_commands+0x2e8>
	case 'a':
		/* set partner primary+secondary address */
		stringToTwoUchars((char*) (&(buf[2])), &val, &val1);
    1ec4:	84 ec       	ldi	r24, 0xC4	; 196
    1ec6:	94 e0       	ldi	r25, 0x04	; 4
    1ec8:	ae 01       	movw	r20, r28
    1eca:	4e 5f       	subi	r20, 0xFE	; 254
    1ecc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ece:	9e 01       	movw	r18, r28
    1ed0:	2f 5f       	subi	r18, 0xFF	; 255
    1ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed4:	b9 01       	movw	r22, r18
    1ed6:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <stringToTwoUchars>
		sprintf(buf, "Set partner address, primary: %u , secondary: %u\n\r",
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	48 2f       	mov	r20, r24
    1ee4:	50 e0       	ldi	r21, 0x00	; 0
    1ee6:	8d b7       	in	r24, 0x3d	; 61
    1ee8:	9e b7       	in	r25, 0x3e	; 62
    1eea:	08 97       	sbiw	r24, 0x08	; 8
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	9e bf       	out	0x3e, r25	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	8d bf       	out	0x3d, r24	; 61
    1ef6:	ed b7       	in	r30, 0x3d	; 61
    1ef8:	fe b7       	in	r31, 0x3e	; 62
    1efa:	31 96       	adiw	r30, 0x01	; 1
    1efc:	82 ec       	ldi	r24, 0xC2	; 194
    1efe:	94 e0       	ldi	r25, 0x04	; 4
    1f00:	91 83       	std	Z+1, r25	; 0x01
    1f02:	80 83       	st	Z, r24
    1f04:	88 e4       	ldi	r24, 0x48	; 72
    1f06:	92 e0       	ldi	r25, 0x02	; 2
    1f08:	93 83       	std	Z+3, r25	; 0x03
    1f0a:	82 83       	std	Z+2, r24	; 0x02
    1f0c:	35 83       	std	Z+5, r19	; 0x05
    1f0e:	24 83       	std	Z+4, r18	; 0x04
    1f10:	57 83       	std	Z+7, r21	; 0x07
    1f12:	46 83       	std	Z+6, r20	; 0x06
    1f14:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <sprintf>
    1f18:	2d b7       	in	r18, 0x3d	; 61
    1f1a:	3e b7       	in	r19, 0x3e	; 62
    1f1c:	28 5f       	subi	r18, 0xF8	; 248
    1f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	3e bf       	out	0x3e, r19	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	2d bf       	out	0x3d, r18	; 61
				val, val1);
		uart_puts(buf);
    1f2a:	82 ec       	ldi	r24, 0xC2	; 194
    1f2c:	94 e0       	ldi	r25, 0x04	; 4
    1f2e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>
		gpib_set_partner_address(val, val1);
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	9a 81       	ldd	r25, Y+2	; 0x02
    1f36:	69 2f       	mov	r22, r25
    1f38:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <gpib_set_partner_address>
    1f3c:	f2 c0       	rjmp	.+484    	; 0x2122 <handle_internal_commands+0x2f4>
		break;
	case 's':
		/* set partner secondary address */
		val = atoi((char*) (&(buf[2])));
    1f3e:	84 ec       	ldi	r24, 0xC4	; 196
    1f40:	94 e0       	ldi	r25, 0x04	; 4
    1f42:	0e 94 8a 01 	call	0x314	; 0x314 <atoi>
    1f46:	89 83       	std	Y+1, r24	; 0x01
		sprintf(buf, "Set partner secondary address to %u\n\r", val);
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <handle_internal_commands+0x122>
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <handle_internal_commands+0x124>
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <handle_internal_commands+0x126>
    1f54:	ed b7       	in	r30, 0x3d	; 61
    1f56:	fe b7       	in	r31, 0x3e	; 62
    1f58:	31 96       	adiw	r30, 0x01	; 1
    1f5a:	82 ec       	ldi	r24, 0xC2	; 194
    1f5c:	94 e0       	ldi	r25, 0x04	; 4
    1f5e:	91 83       	std	Z+1, r25	; 0x01
    1f60:	80 83       	st	Z, r24
    1f62:	8b e7       	ldi	r24, 0x7B	; 123
    1f64:	92 e0       	ldi	r25, 0x02	; 2
    1f66:	93 83       	std	Z+3, r25	; 0x03
    1f68:	82 83       	std	Z+2, r24	; 0x02
    1f6a:	35 83       	std	Z+5, r19	; 0x05
    1f6c:	24 83       	std	Z+4, r18	; 0x04
    1f6e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <sprintf>
    1f72:	8d b7       	in	r24, 0x3d	; 61
    1f74:	9e b7       	in	r25, 0x3e	; 62
    1f76:	06 96       	adiw	r24, 0x06	; 6
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	9e bf       	out	0x3e, r25	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	8d bf       	out	0x3d, r24	; 61
		uart_puts(buf);
    1f82:	82 ec       	ldi	r24, 0xC2	; 194
    1f84:	94 e0       	ldi	r25, 0x04	; 4
    1f86:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>
		gpib_set_partner_secondary(val);
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <gpib_set_partner_secondary>
    1f90:	c8 c0       	rjmp	.+400    	; 0x2122 <handle_internal_commands+0x2f4>
		break;
	case '+':
		/* add device */
		stringToTwoUchars((char*) (&(buf[2])), &val, &val1);
    1f92:	84 ec       	ldi	r24, 0xC4	; 196
    1f94:	94 e0       	ldi	r25, 0x04	; 4
    1f96:	ae 01       	movw	r20, r28
    1f98:	4e 5f       	subi	r20, 0xFE	; 254
    1f9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f9c:	9e 01       	movw	r18, r28
    1f9e:	2f 5f       	subi	r18, 0xFF	; 255
    1fa0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa2:	b9 01       	movw	r22, r18
    1fa4:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <stringToTwoUchars>
		sprintf(buf, "Add device, primary: %u , secondary: %u\n\r", val, val1);
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	28 2f       	mov	r18, r24
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	48 2f       	mov	r20, r24
    1fb2:	50 e0       	ldi	r21, 0x00	; 0
    1fb4:	8d b7       	in	r24, 0x3d	; 61
    1fb6:	9e b7       	in	r25, 0x3e	; 62
    1fb8:	08 97       	sbiw	r24, 0x08	; 8
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	f8 94       	cli
    1fbe:	9e bf       	out	0x3e, r25	; 62
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	8d bf       	out	0x3d, r24	; 61
    1fc4:	ed b7       	in	r30, 0x3d	; 61
    1fc6:	fe b7       	in	r31, 0x3e	; 62
    1fc8:	31 96       	adiw	r30, 0x01	; 1
    1fca:	82 ec       	ldi	r24, 0xC2	; 194
    1fcc:	94 e0       	ldi	r25, 0x04	; 4
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	80 83       	st	Z, r24
    1fd2:	81 ea       	ldi	r24, 0xA1	; 161
    1fd4:	92 e0       	ldi	r25, 0x02	; 2
    1fd6:	93 83       	std	Z+3, r25	; 0x03
    1fd8:	82 83       	std	Z+2, r24	; 0x02
    1fda:	35 83       	std	Z+5, r19	; 0x05
    1fdc:	24 83       	std	Z+4, r18	; 0x04
    1fde:	57 83       	std	Z+7, r21	; 0x07
    1fe0:	46 83       	std	Z+6, r20	; 0x06
    1fe2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <sprintf>
    1fe6:	2d b7       	in	r18, 0x3d	; 61
    1fe8:	3e b7       	in	r19, 0x3e	; 62
    1fea:	28 5f       	subi	r18, 0xF8	; 248
    1fec:	3f 4f       	sbci	r19, 0xFF	; 255
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	3e bf       	out	0x3e, r19	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	2d bf       	out	0x3d, r18	; 61
		uart_puts(buf);
    1ff8:	82 ec       	ldi	r24, 0xC2	; 194
    1ffa:	94 e0       	ldi	r25, 0x04	; 4
    1ffc:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>
		gpib_add_partner_address(val, val1);
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	9a 81       	ldd	r25, Y+2	; 0x02
    2004:	69 2f       	mov	r22, r25
    2006:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <gpib_add_partner_address>
    200a:	8b c0       	rjmp	.+278    	; 0x2122 <handle_internal_commands+0x2f4>
		break;
	case '-':
		/* add device */
		stringToTwoUchars((char*) (&(buf[2])), &val, &val1);
    200c:	84 ec       	ldi	r24, 0xC4	; 196
    200e:	94 e0       	ldi	r25, 0x04	; 4
    2010:	ae 01       	movw	r20, r28
    2012:	4e 5f       	subi	r20, 0xFE	; 254
    2014:	5f 4f       	sbci	r21, 0xFF	; 255
    2016:	9e 01       	movw	r18, r28
    2018:	2f 5f       	subi	r18, 0xFF	; 255
    201a:	3f 4f       	sbci	r19, 0xFF	; 255
    201c:	b9 01       	movw	r22, r18
    201e:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <stringToTwoUchars>
		sprintf(buf, "Remove device, primary: %u , secondary: %u\n\r", val,
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	28 2f       	mov	r18, r24
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	48 2f       	mov	r20, r24
    202c:	50 e0       	ldi	r21, 0x00	; 0
    202e:	8d b7       	in	r24, 0x3d	; 61
    2030:	9e b7       	in	r25, 0x3e	; 62
    2032:	08 97       	sbiw	r24, 0x08	; 8
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	9e bf       	out	0x3e, r25	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	8d bf       	out	0x3d, r24	; 61
    203e:	ed b7       	in	r30, 0x3d	; 61
    2040:	fe b7       	in	r31, 0x3e	; 62
    2042:	31 96       	adiw	r30, 0x01	; 1
    2044:	82 ec       	ldi	r24, 0xC2	; 194
    2046:	94 e0       	ldi	r25, 0x04	; 4
    2048:	91 83       	std	Z+1, r25	; 0x01
    204a:	80 83       	st	Z, r24
    204c:	8b ec       	ldi	r24, 0xCB	; 203
    204e:	92 e0       	ldi	r25, 0x02	; 2
    2050:	93 83       	std	Z+3, r25	; 0x03
    2052:	82 83       	std	Z+2, r24	; 0x02
    2054:	35 83       	std	Z+5, r19	; 0x05
    2056:	24 83       	std	Z+4, r18	; 0x04
    2058:	57 83       	std	Z+7, r21	; 0x07
    205a:	46 83       	std	Z+6, r20	; 0x06
    205c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <sprintf>
    2060:	2d b7       	in	r18, 0x3d	; 61
    2062:	3e b7       	in	r19, 0x3e	; 62
    2064:	28 5f       	subi	r18, 0xF8	; 248
    2066:	3f 4f       	sbci	r19, 0xFF	; 255
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	3e bf       	out	0x3e, r19	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	2d bf       	out	0x3d, r18	; 61
				val1);
		uart_puts(buf);
    2072:	82 ec       	ldi	r24, 0xC2	; 194
    2074:	94 e0       	ldi	r25, 0x04	; 4
    2076:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>
		gpib_remove_partner_address(val, val1);
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	9a 81       	ldd	r25, Y+2	; 0x02
    207e:	69 2f       	mov	r22, r25
    2080:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <gpib_remove_partner_address>
    2084:	4e c0       	rjmp	.+156    	; 0x2122 <handle_internal_commands+0x2f4>
		break;
	case 'x':
		/* Xon/Xoff flow control */
		if (!xonXoffMode) {
    2086:	80 91 9e 03 	lds	r24, 0x039E
    208a:	88 23       	and	r24, r24
    208c:	59 f4       	brne	.+22     	; 0x20a4 <handle_internal_commands+0x276>
			xonXoffMode = 1;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	80 93 9e 03 	sts	0x039E, r24
			uart_set_flow_control(FLOWCONTROL_XONXOFF);
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol on\n\r");
    209a:	82 ee       	ldi	r24, 0xE2	; 226
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
    20a2:	3f c0       	rjmp	.+126    	; 0x2122 <handle_internal_commands+0x2f4>
		} else {
			xonXoffMode = 0;
    20a4:	10 92 9e 03 	sts	0x039E, r1
			uart_set_flow_control(FLOWCONTROL_NONE);
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol off\n\r");
    20ae:	87 ec       	ldi	r24, 0xC7	; 199
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
    20b6:	35 c0       	rjmp	.+106    	; 0x2122 <handle_internal_commands+0x2f4>
		}
		break;
	case 'h':
		/* print some usage infos */
		printHelp();
    20b8:	0e 94 73 11 	call	0x22e6	; 0x22e6 <printHelp>
    20bc:	32 c0       	rjmp	.+100    	; 0x2122 <handle_internal_commands+0x2f4>
		break;
	case 'i':
		gpib_info();
    20be:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <gpib_info>
		sprintf(buf, "Xon/Xoff flow control: %u\n\r", xonXoffMode);
    20c2:	80 91 9e 03 	lds	r24, 0x039E
    20c6:	28 2f       	mov	r18, r24
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	00 d0       	rcall	.+0      	; 0x20cc <handle_internal_commands+0x29e>
    20cc:	00 d0       	rcall	.+0      	; 0x20ce <handle_internal_commands+0x2a0>
    20ce:	00 d0       	rcall	.+0      	; 0x20d0 <handle_internal_commands+0x2a2>
    20d0:	ed b7       	in	r30, 0x3d	; 61
    20d2:	fe b7       	in	r31, 0x3e	; 62
    20d4:	31 96       	adiw	r30, 0x01	; 1
    20d6:	82 ec       	ldi	r24, 0xC2	; 194
    20d8:	94 e0       	ldi	r25, 0x04	; 4
    20da:	91 83       	std	Z+1, r25	; 0x01
    20dc:	80 83       	st	Z, r24
    20de:	88 ef       	ldi	r24, 0xF8	; 248
    20e0:	92 e0       	ldi	r25, 0x02	; 2
    20e2:	93 83       	std	Z+3, r25	; 0x03
    20e4:	82 83       	std	Z+2, r24	; 0x02
    20e6:	35 83       	std	Z+5, r19	; 0x05
    20e8:	24 83       	std	Z+4, r18	; 0x04
    20ea:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <sprintf>
    20ee:	8d b7       	in	r24, 0x3d	; 61
    20f0:	9e b7       	in	r25, 0x3e	; 62
    20f2:	06 96       	adiw	r24, 0x06	; 6
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	f8 94       	cli
    20f8:	9e bf       	out	0x3e, r25	; 62
    20fa:	0f be       	out	0x3f, r0	; 63
    20fc:	8d bf       	out	0x3d, r24	; 61
		uart_puts(buf);
    20fe:	82 ec       	ldi	r24, 0xC2	; 194
    2100:	94 e0       	ldi	r25, 0x04	; 4
    2102:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>
    2106:	0d c0       	rjmp	.+26     	; 0x2122 <handle_internal_commands+0x2f4>
		break;
	case 'e':
		uart_puts_P("Check errors\n\r");
    2108:	88 eb       	ldi	r24, 0xB8	; 184
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
		check_errors();
    2110:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <check_errors>
    2114:	06 c0       	rjmp	.+12     	; 0x2122 <handle_internal_commands+0x2f4>
		arb_ramp();
		uart_puts("arb done\n\r");
		break;
#endif
	default:
		uart_puts_P("unknown command\n\r");
    2116:	86 ea       	ldi	r24, 0xA6	; 166
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
		printHelp();
    211e:	0e 94 73 11 	call	0x22e6	; 0x22e6 <printHelp>
		break;
	}
}
    2122:	26 96       	adiw	r28, 0x06	; 6
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <receiveAnswer>:

/**
 * Receives answer after command was sent.
 */
void receiveAnswer() {
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	00 d0       	rcall	.+0      	; 0x213a <receiveAnswer+0x6>
    213a:	00 d0       	rcall	.+0      	; 0x213c <receiveAnswer+0x8>
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
	uchar b, e;
	uchar colptr = 0;
    2140:	19 82       	std	Y+1, r1	; 0x01

	gpib_prepare_read();
    2142:	0e 94 56 05 	call	0xaac	; 0xaac <gpib_prepare_read>
	// read the answer until EOI is detected (then e becomes true)
	do {
		// gpib bus receive
		e = gpib_receive(&b);
    2146:	ce 01       	movw	r24, r28
    2148:	03 96       	adiw	r24, 0x03	; 3
    214a:	0e 94 b0 05 	call	0xb60	; 0xb60 <gpib_receive>
    214e:	8a 83       	std	Y+2, r24	; 0x02
		// write out character
		uart_putc(b);
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <uart_putc>
		if (linebreak && (colptr++ == linebreak)) {
    2156:	80 91 a0 03 	lds	r24, 0x03A0
    215a:	88 23       	and	r24, r24
    215c:	99 f0       	breq	.+38     	; 0x2184 <receiveAnswer+0x50>
    215e:	90 91 a0 03 	lds	r25, 0x03A0
    2162:	1c 82       	std	Y+4, r1	; 0x04
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	89 17       	cp	r24, r25
    2168:	11 f4       	brne	.+4      	; 0x216e <receiveAnswer+0x3a>
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	8c 83       	std	Y+4, r24	; 0x04
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	8f 5f       	subi	r24, 0xFF	; 255
    2172:	89 83       	std	Y+1, r24	; 0x01
    2174:	8c 81       	ldd	r24, Y+4	; 0x04
    2176:	88 23       	and	r24, r24
    2178:	29 f0       	breq	.+10     	; 0x2184 <receiveAnswer+0x50>
			uart_puts_P("\n\r");
    217a:	8c ef       	ldi	r24, 0xFC	; 252
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
			colptr = 0;
    2182:	19 82       	std	Y+1, r1	; 0x01
		}
		//sprintf((char*)buf,"%02x - %c\n\r", b, b);
		//uart_puts((char*)buf);
	} while (!e);
    2184:	8a 81       	ldd	r24, Y+2	; 0x02
    2186:	88 23       	and	r24, r24
    2188:	f1 f2       	breq	.-68     	; 0x2146 <receiveAnswer+0x12>
}
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	08 95       	ret

00002198 <srq_occured>:

/**
 * Check if a SRQ occured
 */
uchar srq_occured(int* old_time) {
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	00 d0       	rcall	.+0      	; 0x219e <srq_occured+0x6>
    219e:	0f 92       	push	r0
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	9b 83       	std	Y+3, r25	; 0x03
    21a6:	8a 83       	std	Y+2, r24	; 0x02
	uchar srq = 0;
    21a8:	19 82       	std	Y+1, r1	; 0x01
	if (*old_time == 0) {
    21aa:	ea 81       	ldd	r30, Y+2	; 0x02
    21ac:	fb 81       	ldd	r31, Y+3	; 0x03
    21ae:	80 81       	ld	r24, Z
    21b0:	91 81       	ldd	r25, Z+1	; 0x01
    21b2:	00 97       	sbiw	r24, 0x00	; 0
    21b4:	49 f4       	brne	.+18     	; 0x21c8 <srq_occured+0x30>
		// old_time value initialization on first call with value s
		*old_time = s;
    21b6:	80 91 13 05 	lds	r24, 0x0513
    21ba:	88 2f       	mov	r24, r24
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	ea 81       	ldd	r30, Y+2	; 0x02
    21c0:	fb 81       	ldd	r31, Y+3	; 0x03
    21c2:	91 83       	std	Z+1, r25	; 0x01
    21c4:	80 83       	st	Z, r24
    21c6:	1e c0       	rjmp	.+60     	; 0x2204 <srq_occured+0x6c>
	} else {
		if (s > *old_time) {
    21c8:	80 91 13 05 	lds	r24, 0x0513
    21cc:	28 2f       	mov	r18, r24
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	ea 81       	ldd	r30, Y+2	; 0x02
    21d2:	fb 81       	ldd	r31, Y+3	; 0x03
    21d4:	80 81       	ld	r24, Z
    21d6:	91 81       	ldd	r25, Z+1	; 0x01
    21d8:	82 17       	cp	r24, r18
    21da:	93 07       	cpc	r25, r19
    21dc:	9c f4       	brge	.+38     	; 0x2204 <srq_occured+0x6c>
			// some time has passed - check if srq was set
			srq = bit_is_clear(PIND, G_SRQ);
    21de:	e0 e3       	ldi	r30, 0x30	; 48
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	88 2f       	mov	r24, r24
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	80 74       	andi	r24, 0x40	; 64
    21ea:	90 70       	andi	r25, 0x00	; 0
    21ec:	19 82       	std	Y+1, r1	; 0x01
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	11 f4       	brne	.+4      	; 0x21f6 <srq_occured+0x5e>
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	89 83       	std	Y+1, r24	; 0x01
			if (srq)
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	88 23       	and	r24, r24
    21fa:	21 f0       	breq	.+8      	; 0x2204 <srq_occured+0x6c>
				uart_puts_P("\n\rSRQ detected.\n\r");
    21fc:	8f ef       	ldi	r24, 0xFF	; 255
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
		}
	}
	return srq;
    2204:	89 81       	ldd	r24, Y+1	; 0x01
}
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <handle_srq>:

/**
 * Handles SRQs by doing serial poll
 *
 */
uchar handle_srq(uchar *buf, int *buf_ptr) {
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	28 97       	sbiw	r28, 0x08	; 8
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	9d 83       	std	Y+5, r25	; 0x05
    2228:	8c 83       	std	Y+4, r24	; 0x04
    222a:	7f 83       	std	Y+7, r23	; 0x07
    222c:	6e 83       	std	Y+6, r22	; 0x06
	uchar command_ready = 0;
    222e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t primary, secondary;

	if (!gpib_serial_poll(&primary, &secondary)) {
    2230:	ce 01       	movw	r24, r28
    2232:	02 96       	adiw	r24, 0x02	; 2
    2234:	9e 01       	movw	r18, r28
    2236:	2d 5f       	subi	r18, 0xFD	; 253
    2238:	3f 4f       	sbci	r19, 0xFF	; 255
    223a:	b9 01       	movw	r22, r18
    223c:	0e 94 b0 0b 	call	0x1760	; 0x1760 <gpib_serial_poll>
    2240:	88 23       	and	r24, r24
    2242:	69 f4       	brne	.+26     	; 0x225e <handle_srq+0x4c>
		uart_puts_P(
    2244:	8c e2       	ldi	r24, 0x2C	; 44
    2246:	91 e0       	ldi	r25, 0x01	; 1
    2248:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
				"\n\rSRQ emitter is not in list of known devices. SRQ Ignored.\n\r");
		uart_puts_P("\n\rSRQs are disabled now.\n\r");
    224c:	81 e1       	ldi	r24, 0x11	; 17
    224e:	91 e0       	ldi	r25, 0x01	; 1
    2250:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
		srq_enabled = 0;
    2254:	10 92 9f 03 	sts	0x039F, r1
		return command_ready;
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	88 87       	std	Y+8, r24	; 0x08
    225c:	3a c0       	rjmp	.+116    	; 0x22d2 <handle_srq+0xc0>
	}
	gpib_set_partner_address(primary, secondary);
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	9b 81       	ldd	r25, Y+3	; 0x03
    2262:	69 2f       	mov	r22, r25
    2264:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <gpib_set_partner_address>

	if (gpib_get_flavour() == FLAVOUR_TEK) {
    2268:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <gpib_get_flavour>
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	79 f5       	brne	.+94     	; 0x22ce <handle_srq+0xbc>
		// Tek: check status for reason
		buf[0] = 'E';
    2270:	ec 81       	ldd	r30, Y+4	; 0x04
    2272:	fd 81       	ldd	r31, Y+5	; 0x05
    2274:	85 e4       	ldi	r24, 0x45	; 69
    2276:	80 83       	st	Z, r24
		buf[1] = 'V';
    2278:	8c 81       	ldd	r24, Y+4	; 0x04
    227a:	9d 81       	ldd	r25, Y+5	; 0x05
    227c:	fc 01       	movw	r30, r24
    227e:	31 96       	adiw	r30, 0x01	; 1
    2280:	86 e5       	ldi	r24, 0x56	; 86
    2282:	80 83       	st	Z, r24
		buf[2] = 'E';
    2284:	8c 81       	ldd	r24, Y+4	; 0x04
    2286:	9d 81       	ldd	r25, Y+5	; 0x05
    2288:	fc 01       	movw	r30, r24
    228a:	32 96       	adiw	r30, 0x02	; 2
    228c:	85 e4       	ldi	r24, 0x45	; 69
    228e:	80 83       	st	Z, r24
		buf[3] = 'N';
    2290:	8c 81       	ldd	r24, Y+4	; 0x04
    2292:	9d 81       	ldd	r25, Y+5	; 0x05
    2294:	fc 01       	movw	r30, r24
    2296:	33 96       	adiw	r30, 0x03	; 3
    2298:	8e e4       	ldi	r24, 0x4E	; 78
    229a:	80 83       	st	Z, r24
		buf[4] = 'T';
    229c:	8c 81       	ldd	r24, Y+4	; 0x04
    229e:	9d 81       	ldd	r25, Y+5	; 0x05
    22a0:	fc 01       	movw	r30, r24
    22a2:	34 96       	adiw	r30, 0x04	; 4
    22a4:	84 e5       	ldi	r24, 0x54	; 84
    22a6:	80 83       	st	Z, r24
		buf[5] = '?';
    22a8:	8c 81       	ldd	r24, Y+4	; 0x04
    22aa:	9d 81       	ldd	r25, Y+5	; 0x05
    22ac:	fc 01       	movw	r30, r24
    22ae:	35 96       	adiw	r30, 0x05	; 5
    22b0:	8f e3       	ldi	r24, 0x3F	; 63
    22b2:	80 83       	st	Z, r24
		buf[6] = '\0';
    22b4:	8c 81       	ldd	r24, Y+4	; 0x04
    22b6:	9d 81       	ldd	r25, Y+5	; 0x05
    22b8:	fc 01       	movw	r30, r24
    22ba:	36 96       	adiw	r30, 0x06	; 6
    22bc:	10 82       	st	Z, r1
		*buf_ptr = 6;
    22be:	ee 81       	ldd	r30, Y+6	; 0x06
    22c0:	ff 81       	ldd	r31, Y+7	; 0x07
    22c2:	86 e0       	ldi	r24, 0x06	; 6
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	91 83       	std	Z+1, r25	; 0x01
    22c8:	80 83       	st	Z, r24
		command_ready = 1;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	89 83       	std	Y+1, r24	; 0x01
	}
	return command_ready;
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	88 87       	std	Y+8, r24	; 0x08
    22d2:	88 85       	ldd	r24, Y+8	; 0x08
}
    22d4:	28 96       	adiw	r28, 0x08	; 8
    22d6:	0f b6       	in	r0, 0x3f	; 63
    22d8:	f8 94       	cli
    22da:	de bf       	out	0x3e, r29	; 62
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	cd bf       	out	0x3d, r28	; 61
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	08 95       	ret

000022e6 <printHelp>:

void printHelp() {
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
#ifdef WRITE
	sprintf(buf, "\n\rGPIB Controller (Rev.%s) (c) spurtikus.de 2008-2015\n\r",
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <printHelp+0xa>
    22f0:	00 d0       	rcall	.+0      	; 0x22f2 <printHelp+0xc>
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <printHelp+0xe>
    22f4:	ed b7       	in	r30, 0x3d	; 61
    22f6:	fe b7       	in	r31, 0x3e	; 62
    22f8:	31 96       	adiw	r30, 0x01	; 1
    22fa:	82 ec       	ldi	r24, 0xC2	; 194
    22fc:	94 e0       	ldi	r25, 0x04	; 4
    22fe:	91 83       	std	Z+1, r25	; 0x01
    2300:	80 83       	st	Z, r24
    2302:	84 e1       	ldi	r24, 0x14	; 20
    2304:	93 e0       	ldi	r25, 0x03	; 3
    2306:	93 83       	std	Z+3, r25	; 0x03
    2308:	82 83       	std	Z+2, r24	; 0x02
    230a:	8c e4       	ldi	r24, 0x4C	; 76
    230c:	93 e0       	ldi	r25, 0x03	; 3
    230e:	95 83       	std	Z+5, r25	; 0x05
    2310:	84 83       	std	Z+4, r24	; 0x04
    2312:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <sprintf>
    2316:	8d b7       	in	r24, 0x3d	; 61
    2318:	9e b7       	in	r25, 0x3e	; 62
    231a:	06 96       	adiw	r24, 0x06	; 6
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	f8 94       	cli
    2320:	9e bf       	out	0x3e, r25	; 62
    2322:	0f be       	out	0x3f, r0	; 63
    2324:	8d bf       	out	0x3d, r24	; 61
	REVISION);
	uart_puts(buf);
    2326:	82 ec       	ldi	r24, 0xC2	; 194
    2328:	94 e0       	ldi	r25, 0x04	; 4
    232a:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>
#else
	uart_puts("\n\rGPIB Listener Only (Rev.%s) (c) spurtikus.de 2008-2015\n\r", REVISION);
	uart_puts(buf);
#endif
	uart_puts_P("Internal commands:\n\r");
    232e:	84 e8       	ldi	r24, 0x84	; 132
    2330:	92 e0       	ldi	r25, 0x02	; 2
    2332:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
	uart_puts(
    2336:	80 e5       	ldi	r24, 0x50	; 80
    2338:	93 e0       	ldi	r25, 0x03	; 3
    233a:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>
			".a <primary> [<secondary>] - set prim./second. address of remote device\n\r");
	uart_puts_P(".s <secondary> - set secondary address of remote device\n\r");
    233e:	8a e4       	ldi	r24, 0x4A	; 74
    2340:	92 e0       	ldi	r25, 0x02	; 2
    2342:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
	uart_puts_P(
    2346:	8a e0       	ldi	r24, 0x0A	; 10
    2348:	92 e0       	ldi	r25, 0x02	; 2
    234a:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
			".+ <n> - add partner device address to list of known devices.\n\r");
	uart_puts_P(
    234e:	85 ec       	ldi	r24, 0xC5	; 197
    2350:	91 e0       	ldi	r25, 0x01	; 1
    2352:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
			".- <n> - remove partner device address from list of known devices.\n\r");
	uart_puts_P(".x - toggle Xon/Xoff flow control.\n\r");
    2356:	80 ea       	ldi	r24, 0xA0	; 160
    2358:	91 e0       	ldi	r25, 0x01	; 1
    235a:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
	uart_puts_P(".h - print help.\n\r");
    235e:	8d e8       	ldi	r24, 0x8D	; 141
    2360:	91 e0       	ldi	r25, 0x01	; 1
    2362:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
	uart_puts_P(".i - dump info about GPIB lines.\n\r");
    2366:	8a e6       	ldi	r24, 0x6A	; 106
    2368:	91 e0       	ldi	r25, 0x01	; 1
    236a:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
}
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <state_machine>:
 * 2. send user entered command, if available, to listeners (act as talker, set devices to listeners)
 * 3. if command was a query, read the answer from device (become listener and set device to talker)
 * 4. check if SRQ occured and handle that
 *
 */
void state_machine() {
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	27 97       	sbiw	r28, 0x07	; 7
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	de bf       	out	0x3e, r29	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	cd bf       	out	0x3d, r28	; 61
	int old_time = 0;
    2388:	1e 82       	std	Y+6, r1	; 0x06
    238a:	1d 82       	std	Y+5, r1	; 0x05
	uchar is_query = 0;
    238c:	1c 82       	std	Y+4, r1	; 0x04
	uchar do_prompt = 1;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	8b 83       	std	Y+3, r24	; 0x03
	uchar ch;

	uchar state = S_INITIAL;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	8a 83       	std	Y+2, r24	; 0x02
	for (;;) {
		if (state == S_INITIAL) {
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	81 30       	cpi	r24, 0x01	; 1
    239a:	49 f4       	brne	.+18     	; 0x23ae <state_machine+0x3a>
			if (do_prompt) {
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	88 23       	and	r24, r24
    23a0:	31 f0       	breq	.+12     	; 0x23ae <state_machine+0x3a>
				uart_puts("> ");
    23a2:	8a e9       	ldi	r24, 0x9A	; 154
    23a4:	93 e0       	ldi	r25, 0x03	; 3
    23a6:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_puts>
				do_prompt = 0;
    23aa:	1b 82       	std	Y+3, r1	; 0x03
				is_query = 0;
    23ac:	1c 82       	std	Y+4, r1	; 0x04
			}
		}

		if (!input_char(&ch))
    23ae:	ce 01       	movw	r24, r28
    23b0:	07 96       	adiw	r24, 0x07	; 7
    23b2:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <input_char>
    23b6:	88 23       	and	r24, r24
    23b8:	71 f3       	breq	.-36     	; 0x2396 <state_machine+0x22>
			continue;

		// byte received. Decide with state what to do.

		if (state == S_INITIAL) {
    23ba:	8a 81       	ldd	r24, Y+2	; 0x02
    23bc:	81 30       	cpi	r24, 0x01	; 1
    23be:	41 f4       	brne	.+16     	; 0x23d0 <state_machine+0x5c>
			// internal or external command?
			if (ch == '.') {
    23c0:	8f 81       	ldd	r24, Y+7	; 0x07
    23c2:	8e 32       	cpi	r24, 0x2E	; 46
    23c4:	19 f4       	brne	.+6      	; 0x23cc <state_machine+0x58>
				// internal command
				state = S_FIRST_BYTE_INT;
    23c6:	82 e0       	ldi	r24, 0x02	; 2
    23c8:	8a 83       	std	Y+2, r24	; 0x02
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <state_machine+0x5c>
			} else {
				// gpib command
				state = S_FIRST_BYTE_GPIB;
    23cc:	83 e0       	ldi	r24, 0x03	; 3
    23ce:	8a 83       	std	Y+2, r24	; 0x02

			}
		}

		if (state == S_FIRST_BYTE_INT) {
    23d0:	8a 81       	ldd	r24, Y+2	; 0x02
    23d2:	82 30       	cpi	r24, 0x02	; 2
    23d4:	21 f5       	brne	.+72     	; 0x241e <state_machine+0xaa>
			buf[0] = ch;
    23d6:	8f 81       	ldd	r24, Y+7	; 0x07
    23d8:	80 93 c2 04 	sts	0x04C2, r24
			buf_ptr = 1;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	90 93 b4 03 	sts	0x03B4, r25
    23e4:	80 93 b3 03 	sts	0x03B3, r24
			// send received character back depending on global flag
			if (rs232_remote_echo) {
    23e8:	80 91 9d 03 	lds	r24, 0x039D
    23ec:	88 23       	and	r24, r24
    23ee:	19 f0       	breq	.+6      	; 0x23f6 <state_machine+0x82>
				uart_putc((unsigned char) ch);
    23f0:	8f 81       	ldd	r24, Y+7	; 0x07
    23f2:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <uart_putc>
			}
			// collect line until CR
			while (!input_process())
    23f6:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <input_process>
    23fa:	88 23       	and	r24, r24
    23fc:	e1 f3       	breq	.-8      	; 0x23f6 <state_machine+0x82>
				;
			uart_puts_P("\n\r");
    23fe:	82 ed       	ldi	r24, 0xD2	; 210
    2400:	92 e0       	ldi	r25, 0x02	; 2
    2402:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
			// execute internal command
			handle_internal_commands(buf);
    2406:	82 ec       	ldi	r24, 0xC2	; 194
    2408:	94 e0       	ldi	r25, 0x04	; 4
    240a:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <handle_internal_commands>
			// reset local vars
			state = S_INITIAL;
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	8a 83       	std	Y+2, r24	; 0x02
			buf_ptr = 0;
    2412:	10 92 b4 03 	sts	0x03B4, r1
    2416:	10 92 b3 03 	sts	0x03B3, r1
			do_prompt = 1;
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	8b 83       	std	Y+3, r24	; 0x03
		}

		if (state == S_FIRST_BYTE_GPIB) {
    241e:	8a 81       	ldd	r24, Y+2	; 0x02
    2420:	83 30       	cpi	r24, 0x03	; 3
    2422:	c9 f4       	brne	.+50     	; 0x2456 <state_machine+0xe2>
			// GPIB command. Check if a partner was defined.
			if (gpib_get_partner_pad() == ADDRESS_NOT_SET) {
    2424:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <gpib_get_partner_pad>
    2428:	8f 3f       	cpi	r24, 0xFF	; 255
    242a:	71 f4       	brne	.+28     	; 0x2448 <state_machine+0xd4>
				uart_puts_P(
    242c:	8f e9       	ldi	r24, 0x9F	; 159
    242e:	92 e0       	ldi	r25, 0x02	; 2
    2430:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
						"Device address is not set. Can not send command.\n\r");
				// reset local vars
				state = S_INITIAL;
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	8a 83       	std	Y+2, r24	; 0x02
				buf_ptr = 0;
    2438:	10 92 b4 03 	sts	0x03B4, r1
    243c:	10 92 b3 03 	sts	0x03B3, r1
				do_prompt = 1;
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	8b 83       	std	Y+3, r24	; 0x03
				is_query = 0;
    2444:	1c 82       	std	Y+4, r1	; 0x04
    2446:	07 c0       	rjmp	.+14     	; 0x2456 <state_machine+0xe2>
			} else {
				// write prologue
				state = S_SEND_BYTES;
    2448:	84 e0       	ldi	r24, 0x04	; 4
    244a:	8a 83       	std	Y+2, r24	; 0x02
				gpib_prepare_write();
    244c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <gpib_prepare_write>
				gpib_write_prologue(0);
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	0e 94 63 07 	call	0xec6	; 0xec6 <gpib_write_prologue>
			}
		}

		if (state == S_SEND_BYTES) {
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	84 30       	cpi	r24, 0x04	; 4
    245a:	29 f5       	brne	.+74     	; 0x24a6 <state_machine+0x132>
			// send received character back depending on global flag
			if (rs232_remote_echo) {
    245c:	80 91 9d 03 	lds	r24, 0x039D
    2460:	88 23       	and	r24, r24
    2462:	19 f0       	breq	.+6      	; 0x246a <state_machine+0xf6>
				uart_putc((unsigned char) ch);
    2464:	8f 81       	ldd	r24, Y+7	; 0x07
    2466:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <uart_putc>
			}
			uchar isLastByte = (ch == ASCII_CODE_CR);
    246a:	8f 81       	ldd	r24, Y+7	; 0x07
    246c:	19 82       	std	Y+1, r1	; 0x01
    246e:	8d 30       	cpi	r24, 0x0D	; 13
    2470:	11 f4       	brne	.+4      	; 0x2476 <state_machine+0x102>
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	89 83       	std	Y+1, r24	; 0x01
			gpib_write_byte(ch, isLastByte);
    2476:	8f 81       	ldd	r24, Y+7	; 0x07
    2478:	69 81       	ldd	r22, Y+1	; 0x01
    247a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <gpib_write_byte>

			if (ch == '?') {
    247e:	8f 81       	ldd	r24, Y+7	; 0x07
    2480:	8f 33       	cpi	r24, 0x3F	; 63
    2482:	11 f4       	brne	.+4      	; 0x2488 <state_machine+0x114>
				is_query = 1;
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	8c 83       	std	Y+4, r24	; 0x04
			}

			if (isLastByte) {
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	88 23       	and	r24, r24
    248c:	61 f0       	breq	.+24     	; 0x24a6 <state_machine+0x132>
				uart_puts_P("\n\r");
    248e:	8c e9       	ldi	r24, 0x9C	; 156
    2490:	92 e0       	ldi	r25, 0x02	; 2
    2492:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
				if (is_query) {
    2496:	8c 81       	ldd	r24, Y+4	; 0x04
    2498:	88 23       	and	r24, r24
    249a:	19 f0       	breq	.+6      	; 0x24a2 <state_machine+0x12e>
					//uart_puts("Query. Will check for answer.\n\r");
					state = S_GPIB_ANSWER;
    249c:	85 e0       	ldi	r24, 0x05	; 5
    249e:	8a 83       	std	Y+2, r24	; 0x02
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <state_machine+0x132>
				} else {
					//uart_puts("Command only.\n\r");
					state = S_GPIB_NO_ANSWER;
    24a2:	86 e0       	ldi	r24, 0x06	; 6
    24a4:	8a 83       	std	Y+2, r24	; 0x02
				}
			}
		}

		// write epilogue
		if (state == S_GPIB_ANSWER || state == S_GPIB_NO_ANSWER) {
    24a6:	8a 81       	ldd	r24, Y+2	; 0x02
    24a8:	85 30       	cpi	r24, 0x05	; 5
    24aa:	19 f0       	breq	.+6      	; 0x24b2 <state_machine+0x13e>
    24ac:	8a 81       	ldd	r24, Y+2	; 0x02
    24ae:	86 30       	cpi	r24, 0x06	; 6
    24b0:	39 f4       	brne	.+14     	; 0x24c0 <state_machine+0x14c>
			gpib_write_epilogue(0);
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	0e 94 b2 07 	call	0xf64	; 0xf64 <gpib_write_epilogue>
			buf_ptr = 0;
    24b8:	10 92 b4 03 	sts	0x03B4, r1
    24bc:	10 92 b3 03 	sts	0x03B3, r1
		}

		// if we sent a query, read the answer
		if (state == S_GPIB_ANSWER) {
    24c0:	8a 81       	ldd	r24, Y+2	; 0x02
    24c2:	85 30       	cpi	r24, 0x05	; 5
    24c4:	21 f4       	brne	.+8      	; 0x24ce <state_machine+0x15a>
			receiveAnswer();
    24c6:	0e 94 9a 10 	call	0x2134	; 0x2134 <receiveAnswer>
			state = S_FINAL;
    24ca:	87 e0       	ldi	r24, 0x07	; 7
    24cc:	8a 83       	std	Y+2, r24	; 0x02
		}

		// finalize state machine
		if (state == S_GPIB_NO_ANSWER || state == S_FINAL) {
    24ce:	8a 81       	ldd	r24, Y+2	; 0x02
    24d0:	86 30       	cpi	r24, 0x06	; 6
    24d2:	19 f0       	breq	.+6      	; 0x24da <state_machine+0x166>
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	87 30       	cpi	r24, 0x07	; 7
    24d8:	51 f4       	brne	.+20     	; 0x24ee <state_machine+0x17a>
			// untalk/unlisten all partners
			gpib_untalkUnlisten();
    24da:	0e 94 8d 05 	call	0xb1a	; 0xb1a <gpib_untalkUnlisten>
			// some devices do not send cr,lf at command end, so create it always itself
			uart_puts_P("\n\r");
    24de:	89 e9       	ldi	r24, 0x99	; 153
    24e0:	92 e0       	ldi	r25, 0x02	; 2
    24e2:	0e 94 9f 14 	call	0x293e	; 0x293e <uart_puts_p>
			do_prompt = 1;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	8b 83       	std	Y+3, r24	; 0x03
			state = S_INITIAL;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	8a 83       	std	Y+2, r24	; 0x02
		}

		// SRQ detection - do this every time when time value s has changed
		// s is incremented every second. So we check once a second.
		if (srq_enabled && srq_occured(&old_time)) {
    24ee:	80 91 9f 03 	lds	r24, 0x039F
    24f2:	88 23       	and	r24, r24
    24f4:	09 f4       	brne	.+2      	; 0x24f8 <state_machine+0x184>
    24f6:	4f cf       	rjmp	.-354    	; 0x2396 <state_machine+0x22>
    24f8:	ce 01       	movw	r24, r28
    24fa:	05 96       	adiw	r24, 0x05	; 5
    24fc:	0e 94 cc 10 	call	0x2198	; 0x2198 <srq_occured>
    2500:	88 23       	and	r24, r24
    2502:	09 f4       	brne	.+2      	; 0x2506 <state_machine+0x192>
    2504:	48 cf       	rjmp	.-368    	; 0x2396 <state_machine+0x22>
			// TODO: make handle srq work again
			// the returned command_ready was interpreted to read in an answer
			// but this was turned of for new input loop
			// next two lines replace that but must be tested.
			if (handle_srq(buf, &buf_ptr)) {
    2506:	82 ec       	ldi	r24, 0xC2	; 194
    2508:	94 e0       	ldi	r25, 0x04	; 4
    250a:	23 eb       	ldi	r18, 0xB3	; 179
    250c:	33 e0       	ldi	r19, 0x03	; 3
    250e:	b9 01       	movw	r22, r18
    2510:	0e 94 09 11 	call	0x2212	; 0x2212 <handle_srq>
    2514:	88 23       	and	r24, r24
    2516:	09 f4       	brne	.+2      	; 0x251a <state_machine+0x1a6>
    2518:	3e cf       	rjmp	.-388    	; 0x2396 <state_machine+0x22>
				state = S_GPIB_ANSWER;
    251a:	85 e0       	ldi	r24, 0x05	; 5
    251c:	8a 83       	std	Y+2, r24	; 0x02
    251e:	3b cf       	rjmp	.-394    	; 0x2396 <state_machine+0x22>

00002520 <main>:
 * \brief Implementation of GPIB controller. Reads a command from RS232, sends it via bus.
 * If The command contains a '?', an answer from the device is expected and read in. The
 * answer then is printed out. If an SRQ occured, a serial poll is initiated.
 * 
 */
int main(void) {
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
	/*
	 *  Initialize UART library, pass baudrate and avr cpu clock 
	 *  with the macro UART_BAUD_SELECT()
	 */DI();
    2528:	8c e0       	ldi	r24, 0x0C	; 12
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <uart_init>

	/*
	 * now enable interrupt, since UART and TIMER library is interrupt controlled
	 */sei();
    2530:	78 94       	sei

	/** print some usage infos */
	printHelp();
    2532:	0e 94 73 11 	call	0x22e6	; 0x22e6 <printHelp>

	// init timer for timeout detection
	timer16_init();
    2536:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <timer16_init>

	// init gpib lines
	gpib_init();
    253a:	0e 94 c8 04 	call	0x990	; 0x990 <gpib_init>
	// init controller part - assign bus 
	gpib_controller_assign(0x00);
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	0e 94 97 06 	call	0xd2e	; 0xd2e <gpib_controller_assign>

	if (xonXoffMode) {
    2544:	80 91 9e 03 	lds	r24, 0x039E
    2548:	88 23       	and	r24, r24
    254a:	19 f0       	breq	.+6      	; 0x2552 <main+0x32>
		uart_set_flow_control(FLOWCONTROL_XONXOFF);
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <uart_set_flow_control>
	}
	/* state machine loops forever:
	 */
	state_machine();
    2552:	0e 94 ba 11 	call	0x2374	; 0x2374 <state_machine>
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	90 e0       	ldi	r25, 0x00	; 0
}
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	08 95       	ret

00002560 <__vector_7>:

/**
 * Interrupt Service Routine - do not call directly
 *  This routine is called when the Timer Value TCNT1 reaches the Output Compare Register Value OCR1A
 */ 
ISR(TIMER1_COMPA_vect) {
    2560:	1f 92       	push	r1
    2562:	0f 92       	push	r0
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	0f 92       	push	r0
    2568:	11 24       	eor	r1, r1
    256a:	8f 93       	push	r24
    256c:	df 93       	push	r29
    256e:	cf 93       	push	r28
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
#if XTAL_CPU % DEBOUNCE
	OCR1A = XTAL_CPU / DEBOUNCE - 1;
#endif
	if (--timer==0) {
    2574:	80 91 12 05 	lds	r24, 0x0512
    2578:	81 50       	subi	r24, 0x01	; 1
    257a:	80 93 12 05 	sts	0x0512, r24
    257e:	80 91 12 05 	lds	r24, 0x0512
    2582:	88 23       	and	r24, r24
    2584:	39 f4       	brne	.+14     	; 0x2594 <__vector_7+0x34>
		timer=(uint8_t) DEBOUNCE;
    2586:	10 92 12 05 	sts	0x0512, r1
		s++;
    258a:	80 91 13 05 	lds	r24, 0x0513
    258e:	8f 5f       	subi	r24, 0xFF	; 255
    2590:	80 93 13 05 	sts	0x0513, r24
#if XTAL_CPU % DEBOUNCE
		OCR1A = XTAL_CPU / DEBOUNCE + XTAL_CPU % DEBOUNCE - 1;
#endif
	}
}
    2594:	cf 91       	pop	r28
    2596:	df 91       	pop	r29
    2598:	8f 91       	pop	r24
    259a:	0f 90       	pop	r0
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	0f 90       	pop	r0
    25a0:	1f 90       	pop	r1
    25a2:	18 95       	reti

000025a4 <timer16_init>:
/**
 * Timer initialisation.
 *  \brief initializes all registers ands sets second value 's' to zero. Timer is immediately
 * started.
 */ 
void timer16_init( void ) {
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62

	// OCR1A=XTAL/DEBOUNCE-1 -> Bei Erreichen dieses Wertes (31249) wird die ISR besucht
	// die ISR wird also alle 1/256s aufgerufen. Wenn man dort also bis 256 hochzählt, ist genau
	// 1 Sekunde um! 256 ist der Wert der Variable timer und wird über das define DEBOUNCE festgelegt

	TCCR1B = (1<<CS10) ^ (1<<WGM12);	// Prescaler of 1 | CTC mode
    25ac:	ee e4       	ldi	r30, 0x4E	; 78
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	89 e0       	ldi	r24, 0x09	; 9
    25b2:	80 83       	st	Z, r24
	OCR1A  = F_CPU/DEBOUNCE-1;		// Output compare register value 
    25b4:	ea e4       	ldi	r30, 0x4A	; 74
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	81 e1       	ldi	r24, 0x11	; 17
    25ba:	9a e7       	ldi	r25, 0x7A	; 122
    25bc:	91 83       	std	Z+1, r25	; 0x01
    25be:	80 83       	st	Z, r24
	TCNT1 = 0; // Start value for timer register
    25c0:	ec e4       	ldi	r30, 0x4C	; 76
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	11 82       	std	Z+1, r1	; 0x01
    25c6:	10 82       	st	Z, r1
	s=0; // Initialize second value (s) to zero
    25c8:	10 92 13 05 	sts	0x0513, r1
	timer = (uint8_t)DEBOUNCE; 
    25cc:	10 92 12 05 	sts	0x0512, r1
	TIMSK |= (1<<OCIE1A);		// activate timer interrupts which starts timer run
    25d0:	a9 e5       	ldi	r26, 0x59	; 89
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	e9 e5       	ldi	r30, 0x59	; 89
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	80 61       	ori	r24, 0x10	; 16
    25dc:	8c 93       	st	X, r24
}
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	08 95       	ret

000025e4 <uart_set_flow_control>:
/** number of chars in rx buffer */
static volatile unsigned char chars_in_rx_buffer = 0;

void SendOutOfBand(unsigned char c);

void uart_set_flow_control(unsigned char _flowControl) {
    25e4:	df 93       	push	r29
    25e6:	cf 93       	push	r28
    25e8:	0f 92       	push	r0
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
    25ee:	89 83       	std	Y+1, r24	; 0x01
	flowControl = _flowControl;
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	80 93 b5 03 	sts	0x03B5, r24
}
    25f6:	0f 90       	pop	r0
    25f8:	cf 91       	pop	r28
    25fa:	df 91       	pop	r29
    25fc:	08 95       	ret

000025fe <uart_get_flow_control>:

unsigned char uart_get_flow_control() {
    25fe:	df 93       	push	r29
    2600:	cf 93       	push	r28
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
	return flowControl;
    2606:	80 91 b5 03 	lds	r24, 0x03B5
}
    260a:	cf 91       	pop	r28
    260c:	df 91       	pop	r29
    260e:	08 95       	ret

00002610 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
 Function: UART Receive Complete interrupt
 Purpose:  called when the UART has received a character
 **************************************************************************/
{
    2610:	1f 92       	push	r1
    2612:	0f 92       	push	r0
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	0f 92       	push	r0
    2618:	11 24       	eor	r1, r1
    261a:	2f 93       	push	r18
    261c:	3f 93       	push	r19
    261e:	4f 93       	push	r20
    2620:	5f 93       	push	r21
    2622:	6f 93       	push	r22
    2624:	7f 93       	push	r23
    2626:	8f 93       	push	r24
    2628:	9f 93       	push	r25
    262a:	af 93       	push	r26
    262c:	bf 93       	push	r27
    262e:	ef 93       	push	r30
    2630:	ff 93       	push	r31
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	00 d0       	rcall	.+0      	; 0x2638 <__vector_13+0x28>
    2638:	00 d0       	rcall	.+0      	; 0x263a <__vector_13+0x2a>
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	unsigned char usr;
	unsigned char lastRxError;

	/* read UART status register and UART data register */
	usr = UART0_STATUS;
    263e:	eb e2       	ldi	r30, 0x2B	; 43
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	8a 83       	std	Y+2, r24	; 0x02
	data = UART0_DATA;
    2646:	ec e2       	ldi	r30, 0x2C	; 44
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	80 81       	ld	r24, Z
    264c:	8b 83       	std	Y+3, r24	; 0x03

	/* */
#if defined( AT90_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
    264e:	8a 81       	ldd	r24, Y+2	; 0x02
    2650:	88 71       	andi	r24, 0x18	; 24
    2652:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif

	/* calculate buffer index */
	tmphead = (UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    2654:	80 91 5b 04 	lds	r24, 0x045B
    2658:	8f 5f       	subi	r24, 0xFF	; 255
    265a:	8f 77       	andi	r24, 0x7F	; 127
    265c:	8c 83       	std	Y+4, r24	; 0x04

	if (tmphead == UART_RxTail) {
    265e:	90 91 5c 04 	lds	r25, 0x045C
    2662:	8c 81       	ldd	r24, Y+4	; 0x04
    2664:	89 17       	cp	r24, r25
    2666:	19 f4       	brne	.+6      	; 0x266e <__vector_13+0x5e>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    2668:	82 e0       	ldi	r24, 0x02	; 2
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	10 c0       	rjmp	.+32     	; 0x268e <__vector_13+0x7e>
	} else {
		/* store new index */
		UART_RxHead = tmphead;
    266e:	8c 81       	ldd	r24, Y+4	; 0x04
    2670:	80 93 5b 04 	sts	0x045B, r24
		/* store received data in buffer */
		UART_RxBuf[tmphead] = data;
    2674:	8c 81       	ldd	r24, Y+4	; 0x04
    2676:	88 2f       	mov	r24, r24
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	fc 01       	movw	r30, r24
    267c:	e7 52       	subi	r30, 0x27	; 39
    267e:	fc 4f       	sbci	r31, 0xFC	; 252
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	80 83       	st	Z, r24
		chars_in_rx_buffer++;
    2684:	80 91 b8 03 	lds	r24, 0x03B8
    2688:	8f 5f       	subi	r24, 0xFF	; 255
    268a:	80 93 b8 03 	sts	0x03B8, r24
	}

	if (flowControl == FLOWCONTROL_XONXOFF
    268e:	80 91 b5 03 	lds	r24, 0x03B5
    2692:	81 30       	cpi	r24, 0x01	; 1
    2694:	99 f4       	brne	.+38     	; 0x26bc <__vector_13+0xac>
    2696:	80 91 b8 03 	lds	r24, 0x03B8
    269a:	81 36       	cpi	r24, 0x61	; 97
    269c:	78 f0       	brcs	.+30     	; 0x26bc <__vector_13+0xac>
			&& chars_in_rx_buffer > UART_RX_BUFFER_MAX_MARK) {
		/* immediately send XOFF */
		oob_event = 1;
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	80 93 b6 03 	sts	0x03B6, r24
		if (!after_xoff_sent) {
    26a4:	80 91 b7 03 	lds	r24, 0x03B7
    26a8:	88 23       	and	r24, r24
    26aa:	31 f4       	brne	.+12     	; 0x26b8 <__vector_13+0xa8>
			SendOutOfBand(XOFF);
    26ac:	83 e1       	ldi	r24, 0x13	; 19
    26ae:	0e 94 78 13 	call	0x26f0	; 0x26f0 <SendOutOfBand>
			after_xoff_sent = 1;
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	80 93 b7 03 	sts	0x03B7, r24
		}
		oob_event = 0;
    26b8:	10 92 b6 03 	sts	0x03B6, r1
	}

	UART_LastRxError = lastRxError;
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	80 93 5d 04 	sts	0x045D, r24
}
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	ff 91       	pop	r31
    26d0:	ef 91       	pop	r30
    26d2:	bf 91       	pop	r27
    26d4:	af 91       	pop	r26
    26d6:	9f 91       	pop	r25
    26d8:	8f 91       	pop	r24
    26da:	7f 91       	pop	r23
    26dc:	6f 91       	pop	r22
    26de:	5f 91       	pop	r21
    26e0:	4f 91       	pop	r20
    26e2:	3f 91       	pop	r19
    26e4:	2f 91       	pop	r18
    26e6:	0f 90       	pop	r0
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	0f 90       	pop	r0
    26ec:	1f 90       	pop	r1
    26ee:	18 95       	reti

000026f0 <SendOutOfBand>:

void SendOutOfBand(unsigned char c) {
    26f0:	df 93       	push	r29
    26f2:	cf 93       	push	r28
    26f4:	0f 92       	push	r0
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << UDRE)))
    26fc:	eb e2       	ldi	r30, 0x2B	; 43
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	88 2f       	mov	r24, r24
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	80 72       	andi	r24, 0x20	; 32
    2708:	90 70       	andi	r25, 0x00	; 0
    270a:	00 97       	sbiw	r24, 0x00	; 0
    270c:	b9 f3       	breq	.-18     	; 0x26fc <SendOutOfBand+0xc>
		;
	UDR = c;
    270e:	ec e2       	ldi	r30, 0x2C	; 44
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	80 83       	st	Z, r24
}
    2716:	0f 90       	pop	r0
    2718:	cf 91       	pop	r28
    271a:	df 91       	pop	r29
    271c:	08 95       	ret

0000271e <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
 Function: UART Data Register Empty interrupt
 Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
    271e:	1f 92       	push	r1
    2720:	0f 92       	push	r0
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	0f 92       	push	r0
    2726:	11 24       	eor	r1, r1
    2728:	8f 93       	push	r24
    272a:	9f 93       	push	r25
    272c:	af 93       	push	r26
    272e:	bf 93       	push	r27
    2730:	ef 93       	push	r30
    2732:	ff 93       	push	r31
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	0f 92       	push	r0
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;

	if (oob_event) {
    273e:	80 91 b6 03 	lds	r24, 0x03B6
    2742:	88 23       	and	r24, r24
    2744:	01 f5       	brne	.+64     	; 0x2786 <__vector_14+0x68>
		/* suppress transmitting during oob handling */
		return;
	}
	if (UART_TxHead != UART_TxTail) {
    2746:	90 91 59 04 	lds	r25, 0x0459
    274a:	80 91 5a 04 	lds	r24, 0x045A
    274e:	98 17       	cp	r25, r24
    2750:	99 f0       	breq	.+38     	; 0x2778 <__vector_14+0x5a>
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    2752:	80 91 5a 04 	lds	r24, 0x045A
    2756:	8f 5f       	subi	r24, 0xFF	; 255
    2758:	8f 71       	andi	r24, 0x1F	; 31
    275a:	89 83       	std	Y+1, r24	; 0x01
		UART_TxTail = tmptail;
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	80 93 5a 04 	sts	0x045A, r24
		/* get one byte from buffer and write it to UART */
		UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
    2762:	ac e2       	ldi	r26, 0x2C	; 44
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	88 2f       	mov	r24, r24
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	fc 01       	movw	r30, r24
    276e:	e7 54       	subi	r30, 0x47	; 71
    2770:	fc 4f       	sbci	r31, 0xFC	; 252
    2772:	80 81       	ld	r24, Z
    2774:	8c 93       	st	X, r24
    2776:	07 c0       	rjmp	.+14     	; 0x2786 <__vector_14+0x68>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
    2778:	aa e2       	ldi	r26, 0x2A	; 42
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	ea e2       	ldi	r30, 0x2A	; 42
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	8f 7d       	andi	r24, 0xDF	; 223
    2784:	8c 93       	st	X, r24
	}
}
    2786:	0f 90       	pop	r0
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	ff 91       	pop	r31
    278e:	ef 91       	pop	r30
    2790:	bf 91       	pop	r27
    2792:	af 91       	pop	r26
    2794:	9f 91       	pop	r25
    2796:	8f 91       	pop	r24
    2798:	0f 90       	pop	r0
    279a:	0f be       	out	0x3f, r0	; 63
    279c:	0f 90       	pop	r0
    279e:	1f 90       	pop	r1
    27a0:	18 95       	reti

000027a2 <uart_init>:
 Function: uart_init()
 Purpose:  initialize UART and set baudrate
 Input:    baudrate using macro UART_BAUD_SELECT()
 Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate) {
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	00 d0       	rcall	.+0      	; 0x27a8 <uart_init+0x6>
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
    27ac:	9a 83       	std	Y+2, r25	; 0x02
    27ae:	89 83       	std	Y+1, r24	; 0x01
	UART_TxHead = 0;
    27b0:	10 92 59 04 	sts	0x0459, r1
	UART_TxTail = 0;
    27b4:	10 92 5a 04 	sts	0x045A, r1
	UART_RxHead = 0;
    27b8:	10 92 5b 04 	sts	0x045B, r1
	UART_RxTail = 0;
    27bc:	10 92 5c 04 	sts	0x045C, r1
	/* enable UART receiver and transmmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if (baudrate & 0x8000) {
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	9a 81       	ldd	r25, Y+2	; 0x02
    27c4:	99 23       	and	r25, r25
    27c6:	4c f4       	brge	.+18     	; 0x27da <uart_init+0x38>
		UART0_STATUS = (1 << U2X);  //Enable 2x speed
    27c8:	eb e2       	ldi	r30, 0x2B	; 43
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	82 e0       	ldi	r24, 0x02	; 2
    27ce:	80 83       	st	Z, r24
		baudrate &= ~0x8000;
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	9a 81       	ldd	r25, Y+2	; 0x02
    27d4:	9f 77       	andi	r25, 0x7F	; 127
    27d6:	9a 83       	std	Y+2, r25	; 0x02
    27d8:	89 83       	std	Y+1, r24	; 0x01
	}
	UBRRH = (unsigned char) (baudrate >> 8);
    27da:	e0 e4       	ldi	r30, 0x40	; 64
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	9a 81       	ldd	r25, Y+2	; 0x02
    27e2:	89 2f       	mov	r24, r25
    27e4:	99 27       	eor	r25, r25
    27e6:	80 83       	st	Z, r24
	UBRRL = (unsigned char) baudrate;
    27e8:	e9 e2       	ldi	r30, 0x29	; 41
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	80 83       	st	Z, r24

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | (1 << RXEN) | (1 << TXEN);
    27f0:	ea e2       	ldi	r30, 0x2A	; 42
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	88 e9       	ldi	r24, 0x98	; 152
    27f6:	80 83       	st	Z, r24

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
    27f8:	e0 e4       	ldi	r30, 0x40	; 64
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	86 e8       	ldi	r24, 0x86	; 134
    27fe:	80 83       	st	Z, r24
	/* Enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <uart_getc>:
 Function: uart_getc()
 Purpose:  return byte from ringbuffer
 Returns:  lower byte:  received byte from ringbuffer
 higher byte: last receive error
 **************************************************************************/
unsigned int uart_getc(void) {
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	00 d0       	rcall	.+0      	; 0x2810 <uart_getc+0x6>
    2810:	00 d0       	rcall	.+0      	; 0x2812 <uart_getc+0x8>
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;
	unsigned char data;

	if (UART_RxHead == UART_RxTail) {
    2816:	90 91 5b 04 	lds	r25, 0x045B
    281a:	80 91 5c 04 	lds	r24, 0x045C
    281e:	98 17       	cp	r25, r24
    2820:	29 f4       	brne	.+10     	; 0x282c <uart_getc+0x22>
		return UART_NO_DATA; /* no data available */
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	91 e0       	ldi	r25, 0x01	; 1
    2826:	9c 83       	std	Y+4, r25	; 0x04
    2828:	8b 83       	std	Y+3, r24	; 0x03
    282a:	3c c0       	rjmp	.+120    	; 0x28a4 <uart_getc+0x9a>
	}

	/* calculate /store buffer index */
	tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    282c:	80 91 5c 04 	lds	r24, 0x045C
    2830:	8f 5f       	subi	r24, 0xFF	; 255
    2832:	8f 77       	andi	r24, 0x7F	; 127
    2834:	8a 83       	std	Y+2, r24	; 0x02
	UART_RxTail = tmptail;
    2836:	8a 81       	ldd	r24, Y+2	; 0x02
    2838:	80 93 5c 04 	sts	0x045C, r24

	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];
    283c:	8a 81       	ldd	r24, Y+2	; 0x02
    283e:	88 2f       	mov	r24, r24
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	fc 01       	movw	r30, r24
    2844:	e7 52       	subi	r30, 0x27	; 39
    2846:	fc 4f       	sbci	r31, 0xFC	; 252
    2848:	80 81       	ld	r24, Z
    284a:	89 83       	std	Y+1, r24	; 0x01
	if (chars_in_rx_buffer > 0) {
    284c:	80 91 b8 03 	lds	r24, 0x03B8
    2850:	88 23       	and	r24, r24
    2852:	29 f0       	breq	.+10     	; 0x285e <uart_getc+0x54>
		chars_in_rx_buffer--;
    2854:	80 91 b8 03 	lds	r24, 0x03B8
    2858:	81 50       	subi	r24, 0x01	; 1
    285a:	80 93 b8 03 	sts	0x03B8, r24
	}
	if ((flowControl == FLOWCONTROL_XONXOFF) && after_xoff_sent) {
    285e:	80 91 b5 03 	lds	r24, 0x03B5
    2862:	81 30       	cpi	r24, 0x01	; 1
    2864:	91 f4       	brne	.+36     	; 0x288a <uart_getc+0x80>
    2866:	80 91 b7 03 	lds	r24, 0x03B7
    286a:	88 23       	and	r24, r24
    286c:	71 f0       	breq	.+28     	; 0x288a <uart_getc+0x80>
		if (chars_in_rx_buffer <= UART_RX_BUFFER_MIN_MARK) {
    286e:	80 91 b8 03 	lds	r24, 0x03B8
    2872:	81 31       	cpi	r24, 0x11	; 17
    2874:	50 f4       	brcc	.+20     	; 0x288a <uart_getc+0x80>
			/* immediately send XON */
			oob_event = 1;
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	80 93 b6 03 	sts	0x03B6, r24
			SendOutOfBand(XON);
    287c:	81 e1       	ldi	r24, 0x11	; 17
    287e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <SendOutOfBand>
			after_xoff_sent = 0;
    2882:	10 92 b7 03 	sts	0x03B7, r1
			oob_event = 0;
    2886:	10 92 b6 03 	sts	0x03B6, r1
		}
	}

	return (UART_LastRxError << 8) + data;
    288a:	80 91 5d 04 	lds	r24, 0x045D
    288e:	88 2f       	mov	r24, r24
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	38 2f       	mov	r19, r24
    2894:	22 27       	eor	r18, r18
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	88 2f       	mov	r24, r24
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	82 0f       	add	r24, r18
    289e:	93 1f       	adc	r25, r19
    28a0:	9c 83       	std	Y+4, r25	; 0x04
    28a2:	8b 83       	std	Y+3, r24	; 0x03
    28a4:	8b 81       	ldd	r24, Y+3	; 0x03
    28a6:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <uart_putc>:
 Function: uart_putc()
 Purpose:  write byte to ringbuffer for transmitting via UART
 Input:    byte to be transmitted
 Returns:  none
 **************************************************************************/
void uart_putc(unsigned char data) {
    28b6:	df 93       	push	r29
    28b8:	cf 93       	push	r28
    28ba:	00 d0       	rcall	.+0      	; 0x28bc <uart_putc+0x6>
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char tmphead;

	tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    28c2:	80 91 59 04 	lds	r24, 0x0459
    28c6:	8f 5f       	subi	r24, 0xFF	; 255
    28c8:	8f 71       	andi	r24, 0x1F	; 31
    28ca:	89 83       	std	Y+1, r24	; 0x01

	while (tmphead == UART_TxTail) {
    28cc:	90 91 5a 04 	lds	r25, 0x045A
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	89 17       	cp	r24, r25
    28d4:	d9 f3       	breq	.-10     	; 0x28cc <uart_putc+0x16>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	88 2f       	mov	r24, r24
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	fc 01       	movw	r30, r24
    28de:	e7 54       	subi	r30, 0x47	; 71
    28e0:	fc 4f       	sbci	r31, 0xFC	; 252
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
    28e4:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	80 93 59 04 	sts	0x0459, r24

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    28ec:	aa e2       	ldi	r26, 0x2A	; 42
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	ea e2       	ldi	r30, 0x2A	; 42
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	80 62       	ori	r24, 0x20	; 32
    28f8:	8c 93       	st	X, r24

}/* uart_putc */
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <uart_puts>:
 Function: uart_puts()
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	00 d0       	rcall	.+0      	; 0x290a <uart_puts+0x6>
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	9a 83       	std	Y+2, r25	; 0x02
    2910:	89 83       	std	Y+1, r24	; 0x01
    2912:	0b c0       	rjmp	.+22     	; 0x292a <uart_puts+0x26>
	while (*s)
		uart_putc(*s++);
    2914:	e9 81       	ldd	r30, Y+1	; 0x01
    2916:	fa 81       	ldd	r31, Y+2	; 0x02
    2918:	20 81       	ld	r18, Z
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	9a 81       	ldd	r25, Y+2	; 0x02
    291e:	01 96       	adiw	r24, 0x01	; 1
    2920:	9a 83       	std	Y+2, r25	; 0x02
    2922:	89 83       	std	Y+1, r24	; 0x01
    2924:	82 2f       	mov	r24, r18
    2926:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <uart_putc>
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
	while (*s)
    292a:	e9 81       	ldd	r30, Y+1	; 0x01
    292c:	fa 81       	ldd	r31, Y+2	; 0x02
    292e:	80 81       	ld	r24, Z
    2930:	88 23       	and	r24, r24
    2932:	81 f7       	brne	.-32     	; 0x2914 <uart_puts+0x10>
		uart_putc(*s++);

}/* uart_puts */
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	cf 91       	pop	r28
    293a:	df 91       	pop	r29
    293c:	08 95       	ret

0000293e <uart_puts_p>:
 Function: uart_puts_p()
 Purpose:  transmit string from program memory to UART
 Input:    program memory string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
    293e:	df 93       	push	r29
    2940:	cf 93       	push	r28
    2942:	00 d0       	rcall	.+0      	; 0x2944 <uart_puts_p+0x6>
    2944:	00 d0       	rcall	.+0      	; 0x2946 <uart_puts_p+0x8>
    2946:	00 d0       	rcall	.+0      	; 0x2948 <uart_puts_p+0xa>
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	9d 83       	std	Y+5, r25	; 0x05
    294e:	8c 83       	std	Y+4, r24	; 0x04
    2950:	03 c0       	rjmp	.+6      	; 0x2958 <uart_puts_p+0x1a>
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
		uart_putc(c);
    2952:	8e 81       	ldd	r24, Y+6	; 0x06
    2954:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <uart_putc>
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
    2958:	8c 81       	ldd	r24, Y+4	; 0x04
    295a:	9d 81       	ldd	r25, Y+5	; 0x05
    295c:	9b 83       	std	Y+3, r25	; 0x03
    295e:	8a 83       	std	Y+2, r24	; 0x02
    2960:	8c 81       	ldd	r24, Y+4	; 0x04
    2962:	9d 81       	ldd	r25, Y+5	; 0x05
    2964:	01 96       	adiw	r24, 0x01	; 1
    2966:	9d 83       	std	Y+5, r25	; 0x05
    2968:	8c 83       	std	Y+4, r24	; 0x04
    296a:	ea 81       	ldd	r30, Y+2	; 0x02
    296c:	fb 81       	ldd	r31, Y+3	; 0x03
    296e:	84 91       	lpm	r24, Z+
    2970:	89 83       	std	Y+1, r24	; 0x01
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	8e 83       	std	Y+6, r24	; 0x06
    2976:	8e 81       	ldd	r24, Y+6	; 0x06
    2978:	88 23       	and	r24, r24
    297a:	59 f7       	brne	.-42     	; 0x2952 <uart_puts_p+0x14>
		uart_putc(c);

}/* uart_puts_p */
    297c:	26 96       	adiw	r28, 0x06	; 6
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	cf 91       	pop	r28
    298a:	df 91       	pop	r29
    298c:	08 95       	ret

0000298e <__prologue_saves__>:
    298e:	2f 92       	push	r2
    2990:	3f 92       	push	r3
    2992:	4f 92       	push	r4
    2994:	5f 92       	push	r5
    2996:	6f 92       	push	r6
    2998:	7f 92       	push	r7
    299a:	8f 92       	push	r8
    299c:	9f 92       	push	r9
    299e:	af 92       	push	r10
    29a0:	bf 92       	push	r11
    29a2:	cf 92       	push	r12
    29a4:	df 92       	push	r13
    29a6:	ef 92       	push	r14
    29a8:	ff 92       	push	r15
    29aa:	0f 93       	push	r16
    29ac:	1f 93       	push	r17
    29ae:	cf 93       	push	r28
    29b0:	df 93       	push	r29
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
    29b6:	ca 1b       	sub	r28, r26
    29b8:	db 0b       	sbc	r29, r27
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	de bf       	out	0x3e, r29	; 62
    29c0:	0f be       	out	0x3f, r0	; 63
    29c2:	cd bf       	out	0x3d, r28	; 61
    29c4:	09 94       	ijmp

000029c6 <__epilogue_restores__>:
    29c6:	2a 88       	ldd	r2, Y+18	; 0x12
    29c8:	39 88       	ldd	r3, Y+17	; 0x11
    29ca:	48 88       	ldd	r4, Y+16	; 0x10
    29cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    29ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    29d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    29d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    29d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    29d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    29d8:	b9 84       	ldd	r11, Y+9	; 0x09
    29da:	c8 84       	ldd	r12, Y+8	; 0x08
    29dc:	df 80       	ldd	r13, Y+7	; 0x07
    29de:	ee 80       	ldd	r14, Y+6	; 0x06
    29e0:	fd 80       	ldd	r15, Y+5	; 0x05
    29e2:	0c 81       	ldd	r16, Y+4	; 0x04
    29e4:	1b 81       	ldd	r17, Y+3	; 0x03
    29e6:	aa 81       	ldd	r26, Y+2	; 0x02
    29e8:	b9 81       	ldd	r27, Y+1	; 0x01
    29ea:	ce 0f       	add	r28, r30
    29ec:	d1 1d       	adc	r29, r1
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	f8 94       	cli
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	0f be       	out	0x3f, r0	; 63
    29f6:	cd bf       	out	0x3d, r28	; 61
    29f8:	ed 01       	movw	r28, r26
    29fa:	08 95       	ret

000029fc <_exit>:
    29fc:	f8 94       	cli

000029fe <__stop_program>:
    29fe:	ff cf       	rjmp	.-2      	; 0x29fe <__stop_program>

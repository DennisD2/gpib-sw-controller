
gpib_004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e8c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000436  00800060  00002e8c  00002f00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000170  00800496  000032c2  00003336  2**0
                  ALLOC
  3 .stab         00005cd0  00000000  00000000  00003338  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002a78  00000000  00000000  00009008  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__ctors_end>
       4:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
       8:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
       c:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      10:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      14:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      18:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      1c:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__vector_7>
      20:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      24:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      28:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      2c:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      30:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      34:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__vector_13>
      38:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <__vector_14>
      3c:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      40:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      44:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      48:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      4c:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      50:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>

00000054 <__c.1890>:
      54:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
      64:	65 72 72 6f 72 3a 20 00                             error: .

0000006c <__c.1888>:
      6c:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
      7c:	6f 72 3a 20 00                                      or: .

00000081 <__c.1886>:
      81:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
      91:	3a 20 00                                            : .

00000094 <__c.1914>:
      94:	43 6f 6d 6d 61 6e 64 20 6f 76 65 72 66 6c 6f 77     Command overflow
      a4:	2e 00                                               ..

000000a6 <__c.1990>:
      a6:	75 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 0a     unknown command.
      b6:	0d 00                                               ..

000000b8 <__c.1986>:
      b8:	43 68 65 63 6b 20 65 72 72 6f 72 73 0a 0d 00        Check errors...

000000c7 <__c.1981>:
      c7:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      d7:	74 72 6f 6c 20 6f 66 66 0a 0d 00                    trol off...

000000e2 <__c.1979>:
      e2:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      f2:	74 72 6f 6c 20 6f 6e 0a 0d 00                       trol on...

000000fc <__c.2042>:
      fc:	0a 0d 00                                            ...

000000ff <__c.2059>:
      ff:	0a 0d 53 52 51 20 64 65 74 65 63 74 65 64 2e 0a     ..SRQ detected..
     10f:	0d 00                                               ..

00000111 <__c.2089>:
     111:	0a 0d 53 52 51 73 20 61 72 65 20 64 69 73 61 62     ..SRQs are disab
     121:	6c 65 64 20 6e 6f 77 2e 0a 0d 00                    led now....

0000012c <__c.2087>:
     12c:	0a 0d 53 52 51 20 65 6d 69 74 74 65 72 20 69 73     ..SRQ emitter is
     13c:	20 6e 6f 74 20 69 6e 20 6c 69 73 74 20 6f 66 20      not in list of 
     14c:	6b 6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 20 53     known devices. S
     15c:	52 51 20 49 67 6e 6f 72 65 64 2e 0a 0d 00           RQ Ignored....

0000016a <__c.2124>:
     16a:	2e 69 20 2d 20 64 75 6d 70 20 69 6e 66 6f 20 61     .i - dump info a
     17a:	62 6f 75 74 20 63 6f 6e 74 72 6f 6c 6c 65 72 20     bout controller 
     18a:	73 74 61 74 65 2e 0a 0d 00                          state....

00000193 <__c.2122>:
     193:	2e 65 20 2d 20 64 75 6d 70 20 65 72 72 6f 72 20     .e - dump error 
     1a3:	71 75 65 75 65 2e 0a 0d 00                          queue....

000001ac <__c.2120>:
     1ac:	2e 68 20 2d 20 70 72 69 6e 74 20 68 65 6c 70 2e     .h - print help.
     1bc:	0a 0d 00                                            ...

000001bf <__c.2118>:
     1bf:	2e 78 20 2d 20 74 6f 67 67 6c 65 20 58 6f 6e 2f     .x - toggle Xon/
     1cf:	58 6f 66 66 20 66 6c 6f 77 20 63 6f 6e 74 72 6f     Xoff flow contro
     1df:	6c 2e 0a 0d 00                                      l....

000001e4 <__c.2116>:
     1e4:	2e 2d 20 3c 6e 3e 20 2d 20 72 65 6d 6f 76 65 20     .- <n> - remove 
     1f4:	70 61 72 74 6e 65 72 20 64 65 76 69 63 65 20 61     partner device a
     204:	64 64 72 65 73 73 20 66 72 6f 6d 20 6c 69 73 74     ddress from list
     214:	20 6f 66 20 6b 6e 6f 77 6e 20 64 65 76 69 63 65      of known device
     224:	73 2e 0a 0d 00                                      s....

00000229 <__c.2114>:
     229:	2e 2b 20 3c 6e 3e 20 2d 20 61 64 64 20 70 61 72     .+ <n> - add par
     239:	74 6e 65 72 20 64 65 76 69 63 65 20 61 64 64 72     tner device addr
     249:	65 73 73 20 74 6f 20 6c 69 73 74 20 6f 66 20 6b     ess to list of k
     259:	6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 0a 0d 00     nown devices....

00000269 <__c.2112>:
     269:	2e 73 20 3c 73 65 63 6f 6e 64 61 72 79 3e 20 2d     .s <secondary> -
     279:	20 73 65 74 20 73 65 63 6f 6e 64 61 72 79 20 61      set secondary a
     289:	64 64 72 65 73 73 20 6f 66 20 72 65 6d 6f 74 65     ddress of remote
     299:	20 64 65 76 69 63 65 0a 0d 00                        device...

000002a3 <__c.2110>:
     2a3:	49 6e 74 65 72 6e 61 6c 20 63 6f 6d 6d 61 6e 64     Internal command
     2b3:	73 3a 0a 0d 00                                      s:...

000002b8 <__c.2146>:
     2b8:	0a 0d 00                                            ...

000002bb <__c.2144>:
     2bb:	0a 0d 00                                            ...

000002be <__c.2141>:
     2be:	44 65 76 69 63 65 20 61 64 64 72 65 73 73 20 69     Device address i
     2ce:	73 20 6e 6f 74 20 73 65 74 2e 20 43 61 6e 20 6e     s not set. Can n
     2de:	6f 74 20 73 65 6e 64 20 63 6f 6d 6d 61 6e 64 2e     ot send command.
     2ee:	0a 0d 00                                            ...

000002f1 <__c.2139>:
     2f1:	0a 0d 00                                            ...

000002f4 <__ctors_end>:
     2f4:	11 24       	eor	r1, r1
     2f6:	1f be       	out	0x3f, r1	; 63
     2f8:	cf e5       	ldi	r28, 0x5F	; 95
     2fa:	d8 e0       	ldi	r29, 0x08	; 8
     2fc:	de bf       	out	0x3e, r29	; 62
     2fe:	cd bf       	out	0x3d, r28	; 61

00000300 <__do_copy_data>:
     300:	14 e0       	ldi	r17, 0x04	; 4
     302:	a0 e6       	ldi	r26, 0x60	; 96
     304:	b0 e0       	ldi	r27, 0x00	; 0
     306:	ec e8       	ldi	r30, 0x8C	; 140
     308:	fe e2       	ldi	r31, 0x2E	; 46
     30a:	02 c0       	rjmp	.+4      	; 0x310 <.do_copy_data_start>

0000030c <.do_copy_data_loop>:
     30c:	05 90       	lpm	r0, Z+
     30e:	0d 92       	st	X+, r0

00000310 <.do_copy_data_start>:
     310:	a6 39       	cpi	r26, 0x96	; 150
     312:	b1 07       	cpc	r27, r17
     314:	d9 f7       	brne	.-10     	; 0x30c <.do_copy_data_loop>

00000316 <__do_clear_bss>:
     316:	16 e0       	ldi	r17, 0x06	; 6
     318:	a6 e9       	ldi	r26, 0x96	; 150
     31a:	b4 e0       	ldi	r27, 0x04	; 4
     31c:	01 c0       	rjmp	.+2      	; 0x320 <.do_clear_bss_start>

0000031e <.do_clear_bss_loop>:
     31e:	1d 92       	st	X+, r1

00000320 <.do_clear_bss_start>:
     320:	a6 30       	cpi	r26, 0x06	; 6
     322:	b1 07       	cpc	r27, r17
     324:	e1 f7       	brne	.-8      	; 0x31e <.do_clear_bss_loop>
     326:	0e 94 af 14 	call	0x295e	; 0x295e <main>
     32a:	0c 94 44 17 	jmp	0x2e88	; 0x2e88 <_exit>

0000032e <__bad_interrupt>:
     32e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000332 <atoi>:
     332:	fc 01       	movw	r30, r24
     334:	88 27       	eor	r24, r24
     336:	99 27       	eor	r25, r25
     338:	e8 94       	clt
     33a:	21 91       	ld	r18, Z+
     33c:	20 32       	cpi	r18, 0x20	; 32
     33e:	e9 f3       	breq	.-6      	; 0x33a <atoi+0x8>
     340:	29 30       	cpi	r18, 0x09	; 9
     342:	10 f0       	brcs	.+4      	; 0x348 <atoi+0x16>
     344:	2e 30       	cpi	r18, 0x0E	; 14
     346:	c8 f3       	brcs	.-14     	; 0x33a <atoi+0x8>
     348:	2b 32       	cpi	r18, 0x2B	; 43
     34a:	41 f0       	breq	.+16     	; 0x35c <atoi+0x2a>
     34c:	2d 32       	cpi	r18, 0x2D	; 45
     34e:	39 f4       	brne	.+14     	; 0x35e <atoi+0x2c>
     350:	68 94       	set
     352:	04 c0       	rjmp	.+8      	; 0x35c <atoi+0x2a>
     354:	0e 94 05 02 	call	0x40a	; 0x40a <__mulhi_const_10>
     358:	82 0f       	add	r24, r18
     35a:	91 1d       	adc	r25, r1
     35c:	21 91       	ld	r18, Z+
     35e:	20 53       	subi	r18, 0x30	; 48
     360:	2a 30       	cpi	r18, 0x0A	; 10
     362:	c0 f3       	brcs	.-16     	; 0x354 <atoi+0x22>
     364:	1e f4       	brtc	.+6      	; 0x36c <atoi+0x3a>
     366:	90 95       	com	r25
     368:	81 95       	neg	r24
     36a:	9f 4f       	sbci	r25, 0xFF	; 255
     36c:	08 95       	ret

0000036e <strtok>:
     36e:	46 e9       	ldi	r20, 0x96	; 150
     370:	54 e0       	ldi	r21, 0x04	; 4
     372:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <strtok_r>
     376:	08 95       	ret

00000378 <strlen>:
     378:	fc 01       	movw	r30, r24
     37a:	01 90       	ld	r0, Z+
     37c:	00 20       	and	r0, r0
     37e:	e9 f7       	brne	.-6      	; 0x37a <strlen+0x2>
     380:	80 95       	com	r24
     382:	90 95       	com	r25
     384:	8e 0f       	add	r24, r30
     386:	9f 1f       	adc	r25, r31
     388:	08 95       	ret

0000038a <strncmp>:
     38a:	fb 01       	movw	r30, r22
     38c:	dc 01       	movw	r26, r24
     38e:	41 50       	subi	r20, 0x01	; 1
     390:	50 40       	sbci	r21, 0x00	; 0
     392:	30 f0       	brcs	.+12     	; 0x3a0 <strncmp+0x16>
     394:	8d 91       	ld	r24, X+
     396:	01 90       	ld	r0, Z+
     398:	80 19       	sub	r24, r0
     39a:	19 f4       	brne	.+6      	; 0x3a2 <strncmp+0x18>
     39c:	00 20       	and	r0, r0
     39e:	b9 f7       	brne	.-18     	; 0x38e <strncmp+0x4>
     3a0:	88 1b       	sub	r24, r24
     3a2:	99 0b       	sbc	r25, r25
     3a4:	08 95       	ret

000003a6 <strtok_r>:
     3a6:	00 97       	sbiw	r24, 0x00	; 0
     3a8:	31 f4       	brne	.+12     	; 0x3b6 <strtok_r+0x10>
     3aa:	da 01       	movw	r26, r20
     3ac:	8d 91       	ld	r24, X+
     3ae:	9c 91       	ld	r25, X
     3b0:	00 97       	sbiw	r24, 0x00	; 0
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <strtok_r+0x10>
     3b4:	0e c0       	rjmp	.+28     	; 0x3d2 <strtok_r+0x2c>
     3b6:	dc 01       	movw	r26, r24
     3b8:	fb 01       	movw	r30, r22
     3ba:	3d 91       	ld	r19, X+
     3bc:	21 91       	ld	r18, Z+
     3be:	22 23       	and	r18, r18
     3c0:	19 f0       	breq	.+6      	; 0x3c8 <strtok_r+0x22>
     3c2:	32 17       	cp	r19, r18
     3c4:	c9 f3       	breq	.-14     	; 0x3b8 <strtok_r+0x12>
     3c6:	fa cf       	rjmp	.-12     	; 0x3bc <strtok_r+0x16>
     3c8:	33 23       	and	r19, r19
     3ca:	31 f4       	brne	.+12     	; 0x3d8 <strtok_r+0x32>
     3cc:	da 01       	movw	r26, r20
     3ce:	1d 92       	st	X+, r1
     3d0:	1c 92       	st	X, r1
     3d2:	88 27       	eor	r24, r24
     3d4:	99 27       	eor	r25, r25
     3d6:	08 95       	ret
     3d8:	11 97       	sbiw	r26, 0x01	; 1
     3da:	af 93       	push	r26
     3dc:	bf 93       	push	r27
     3de:	fb 01       	movw	r30, r22
     3e0:	3d 91       	ld	r19, X+
     3e2:	21 91       	ld	r18, Z+
     3e4:	32 17       	cp	r19, r18
     3e6:	71 f4       	brne	.+28     	; 0x404 <strtok_r+0x5e>
     3e8:	33 23       	and	r19, r19
     3ea:	21 f4       	brne	.+8      	; 0x3f4 <strtok_r+0x4e>
     3ec:	88 27       	eor	r24, r24
     3ee:	99 27       	eor	r25, r25
     3f0:	11 97       	sbiw	r26, 0x01	; 1
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <strtok_r+0x52>
     3f4:	1e 92       	st	-X, r1
     3f6:	11 96       	adiw	r26, 0x01	; 1
     3f8:	fa 01       	movw	r30, r20
     3fa:	a1 93       	st	Z+, r26
     3fc:	b0 83       	st	Z, r27
     3fe:	9f 91       	pop	r25
     400:	8f 91       	pop	r24
     402:	08 95       	ret
     404:	22 23       	and	r18, r18
     406:	69 f7       	brne	.-38     	; 0x3e2 <strtok_r+0x3c>
     408:	ea cf       	rjmp	.-44     	; 0x3de <strtok_r+0x38>

0000040a <__mulhi_const_10>:
     40a:	7a e0       	ldi	r23, 0x0A	; 10
     40c:	97 9f       	mul	r25, r23
     40e:	90 2d       	mov	r25, r0
     410:	87 9f       	mul	r24, r23
     412:	80 2d       	mov	r24, r0
     414:	91 0d       	add	r25, r1
     416:	11 24       	eor	r1, r1
     418:	08 95       	ret

0000041a <sprintf>:
     41a:	ae e0       	ldi	r26, 0x0E	; 14
     41c:	b0 e0       	ldi	r27, 0x00	; 0
     41e:	e3 e1       	ldi	r30, 0x13	; 19
     420:	f2 e0       	ldi	r31, 0x02	; 2
     422:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <__prologue_saves__+0x1c>
     426:	0d 89       	ldd	r16, Y+21	; 0x15
     428:	1e 89       	ldd	r17, Y+22	; 0x16
     42a:	86 e0       	ldi	r24, 0x06	; 6
     42c:	8c 83       	std	Y+4, r24	; 0x04
     42e:	1a 83       	std	Y+2, r17	; 0x02
     430:	09 83       	std	Y+1, r16	; 0x01
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	9f e7       	ldi	r25, 0x7F	; 127
     436:	9e 83       	std	Y+6, r25	; 0x06
     438:	8d 83       	std	Y+5, r24	; 0x05
     43a:	9e 01       	movw	r18, r28
     43c:	27 5e       	subi	r18, 0xE7	; 231
     43e:	3f 4f       	sbci	r19, 0xFF	; 255
     440:	ce 01       	movw	r24, r28
     442:	01 96       	adiw	r24, 0x01	; 1
     444:	6f 89       	ldd	r22, Y+23	; 0x17
     446:	78 8d       	ldd	r23, Y+24	; 0x18
     448:	a9 01       	movw	r20, r18
     44a:	0e 94 31 02 	call	0x462	; 0x462 <vfprintf>
     44e:	2f 81       	ldd	r18, Y+7	; 0x07
     450:	38 85       	ldd	r19, Y+8	; 0x08
     452:	02 0f       	add	r16, r18
     454:	13 1f       	adc	r17, r19
     456:	f8 01       	movw	r30, r16
     458:	10 82       	st	Z, r1
     45a:	2e 96       	adiw	r28, 0x0e	; 14
     45c:	e4 e0       	ldi	r30, 0x04	; 4
     45e:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <__epilogue_restores__+0x1c>

00000462 <vfprintf>:
     462:	ab e0       	ldi	r26, 0x0B	; 11
     464:	b0 e0       	ldi	r27, 0x00	; 0
     466:	e7 e3       	ldi	r30, 0x37	; 55
     468:	f2 e0       	ldi	r31, 0x02	; 2
     46a:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__prologue_saves__>
     46e:	3c 01       	movw	r6, r24
     470:	2b 01       	movw	r4, r22
     472:	5a 01       	movw	r10, r20
     474:	fc 01       	movw	r30, r24
     476:	17 82       	std	Z+7, r1	; 0x07
     478:	16 82       	std	Z+6, r1	; 0x06
     47a:	83 81       	ldd	r24, Z+3	; 0x03
     47c:	81 fd       	sbrc	r24, 1
     47e:	03 c0       	rjmp	.+6      	; 0x486 <vfprintf+0x24>
     480:	6f ef       	ldi	r22, 0xFF	; 255
     482:	7f ef       	ldi	r23, 0xFF	; 255
     484:	c6 c1       	rjmp	.+908    	; 0x812 <vfprintf+0x3b0>
     486:	9a e0       	ldi	r25, 0x0A	; 10
     488:	89 2e       	mov	r8, r25
     48a:	1e 01       	movw	r2, r28
     48c:	08 94       	sec
     48e:	21 1c       	adc	r2, r1
     490:	31 1c       	adc	r3, r1
     492:	f3 01       	movw	r30, r6
     494:	23 81       	ldd	r18, Z+3	; 0x03
     496:	f2 01       	movw	r30, r4
     498:	23 fd       	sbrc	r18, 3
     49a:	85 91       	lpm	r24, Z+
     49c:	23 ff       	sbrs	r18, 3
     49e:	81 91       	ld	r24, Z+
     4a0:	2f 01       	movw	r4, r30
     4a2:	88 23       	and	r24, r24
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <vfprintf+0x46>
     4a6:	b2 c1       	rjmp	.+868    	; 0x80c <vfprintf+0x3aa>
     4a8:	85 32       	cpi	r24, 0x25	; 37
     4aa:	39 f4       	brne	.+14     	; 0x4ba <vfprintf+0x58>
     4ac:	23 fd       	sbrc	r18, 3
     4ae:	85 91       	lpm	r24, Z+
     4b0:	23 ff       	sbrs	r18, 3
     4b2:	81 91       	ld	r24, Z+
     4b4:	2f 01       	movw	r4, r30
     4b6:	85 32       	cpi	r24, 0x25	; 37
     4b8:	29 f4       	brne	.+10     	; 0x4c4 <vfprintf+0x62>
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	b3 01       	movw	r22, r6
     4be:	0e 94 24 04 	call	0x848	; 0x848 <fputc>
     4c2:	e7 cf       	rjmp	.-50     	; 0x492 <vfprintf+0x30>
     4c4:	98 2f       	mov	r25, r24
     4c6:	ff 24       	eor	r15, r15
     4c8:	ee 24       	eor	r14, r14
     4ca:	99 24       	eor	r9, r9
     4cc:	ff e1       	ldi	r31, 0x1F	; 31
     4ce:	ff 15       	cp	r31, r15
     4d0:	d0 f0       	brcs	.+52     	; 0x506 <vfprintf+0xa4>
     4d2:	9b 32       	cpi	r25, 0x2B	; 43
     4d4:	69 f0       	breq	.+26     	; 0x4f0 <vfprintf+0x8e>
     4d6:	9c 32       	cpi	r25, 0x2C	; 44
     4d8:	28 f4       	brcc	.+10     	; 0x4e4 <vfprintf+0x82>
     4da:	90 32       	cpi	r25, 0x20	; 32
     4dc:	59 f0       	breq	.+22     	; 0x4f4 <vfprintf+0x92>
     4de:	93 32       	cpi	r25, 0x23	; 35
     4e0:	91 f4       	brne	.+36     	; 0x506 <vfprintf+0xa4>
     4e2:	0e c0       	rjmp	.+28     	; 0x500 <vfprintf+0x9e>
     4e4:	9d 32       	cpi	r25, 0x2D	; 45
     4e6:	49 f0       	breq	.+18     	; 0x4fa <vfprintf+0x98>
     4e8:	90 33       	cpi	r25, 0x30	; 48
     4ea:	69 f4       	brne	.+26     	; 0x506 <vfprintf+0xa4>
     4ec:	41 e0       	ldi	r20, 0x01	; 1
     4ee:	24 c0       	rjmp	.+72     	; 0x538 <vfprintf+0xd6>
     4f0:	52 e0       	ldi	r21, 0x02	; 2
     4f2:	f5 2a       	or	r15, r21
     4f4:	84 e0       	ldi	r24, 0x04	; 4
     4f6:	f8 2a       	or	r15, r24
     4f8:	28 c0       	rjmp	.+80     	; 0x54a <vfprintf+0xe8>
     4fa:	98 e0       	ldi	r25, 0x08	; 8
     4fc:	f9 2a       	or	r15, r25
     4fe:	25 c0       	rjmp	.+74     	; 0x54a <vfprintf+0xe8>
     500:	e0 e1       	ldi	r30, 0x10	; 16
     502:	fe 2a       	or	r15, r30
     504:	22 c0       	rjmp	.+68     	; 0x54a <vfprintf+0xe8>
     506:	f7 fc       	sbrc	r15, 7
     508:	29 c0       	rjmp	.+82     	; 0x55c <vfprintf+0xfa>
     50a:	89 2f       	mov	r24, r25
     50c:	80 53       	subi	r24, 0x30	; 48
     50e:	8a 30       	cpi	r24, 0x0A	; 10
     510:	70 f4       	brcc	.+28     	; 0x52e <vfprintf+0xcc>
     512:	f6 fe       	sbrs	r15, 6
     514:	05 c0       	rjmp	.+10     	; 0x520 <vfprintf+0xbe>
     516:	98 9c       	mul	r9, r8
     518:	90 2c       	mov	r9, r0
     51a:	11 24       	eor	r1, r1
     51c:	98 0e       	add	r9, r24
     51e:	15 c0       	rjmp	.+42     	; 0x54a <vfprintf+0xe8>
     520:	e8 9c       	mul	r14, r8
     522:	e0 2c       	mov	r14, r0
     524:	11 24       	eor	r1, r1
     526:	e8 0e       	add	r14, r24
     528:	f0 e2       	ldi	r31, 0x20	; 32
     52a:	ff 2a       	or	r15, r31
     52c:	0e c0       	rjmp	.+28     	; 0x54a <vfprintf+0xe8>
     52e:	9e 32       	cpi	r25, 0x2E	; 46
     530:	29 f4       	brne	.+10     	; 0x53c <vfprintf+0xda>
     532:	f6 fc       	sbrc	r15, 6
     534:	6b c1       	rjmp	.+726    	; 0x80c <vfprintf+0x3aa>
     536:	40 e4       	ldi	r20, 0x40	; 64
     538:	f4 2a       	or	r15, r20
     53a:	07 c0       	rjmp	.+14     	; 0x54a <vfprintf+0xe8>
     53c:	9c 36       	cpi	r25, 0x6C	; 108
     53e:	19 f4       	brne	.+6      	; 0x546 <vfprintf+0xe4>
     540:	50 e8       	ldi	r21, 0x80	; 128
     542:	f5 2a       	or	r15, r21
     544:	02 c0       	rjmp	.+4      	; 0x54a <vfprintf+0xe8>
     546:	98 36       	cpi	r25, 0x68	; 104
     548:	49 f4       	brne	.+18     	; 0x55c <vfprintf+0xfa>
     54a:	f2 01       	movw	r30, r4
     54c:	23 fd       	sbrc	r18, 3
     54e:	95 91       	lpm	r25, Z+
     550:	23 ff       	sbrs	r18, 3
     552:	91 91       	ld	r25, Z+
     554:	2f 01       	movw	r4, r30
     556:	99 23       	and	r25, r25
     558:	09 f0       	breq	.+2      	; 0x55c <vfprintf+0xfa>
     55a:	b8 cf       	rjmp	.-144    	; 0x4cc <vfprintf+0x6a>
     55c:	89 2f       	mov	r24, r25
     55e:	85 54       	subi	r24, 0x45	; 69
     560:	83 30       	cpi	r24, 0x03	; 3
     562:	18 f0       	brcs	.+6      	; 0x56a <vfprintf+0x108>
     564:	80 52       	subi	r24, 0x20	; 32
     566:	83 30       	cpi	r24, 0x03	; 3
     568:	38 f4       	brcc	.+14     	; 0x578 <vfprintf+0x116>
     56a:	44 e0       	ldi	r20, 0x04	; 4
     56c:	50 e0       	ldi	r21, 0x00	; 0
     56e:	a4 0e       	add	r10, r20
     570:	b5 1e       	adc	r11, r21
     572:	5f e3       	ldi	r21, 0x3F	; 63
     574:	59 83       	std	Y+1, r21	; 0x01
     576:	0f c0       	rjmp	.+30     	; 0x596 <vfprintf+0x134>
     578:	93 36       	cpi	r25, 0x63	; 99
     57a:	31 f0       	breq	.+12     	; 0x588 <vfprintf+0x126>
     57c:	93 37       	cpi	r25, 0x73	; 115
     57e:	79 f0       	breq	.+30     	; 0x59e <vfprintf+0x13c>
     580:	93 35       	cpi	r25, 0x53	; 83
     582:	09 f0       	breq	.+2      	; 0x586 <vfprintf+0x124>
     584:	56 c0       	rjmp	.+172    	; 0x632 <vfprintf+0x1d0>
     586:	20 c0       	rjmp	.+64     	; 0x5c8 <vfprintf+0x166>
     588:	f5 01       	movw	r30, r10
     58a:	80 81       	ld	r24, Z
     58c:	89 83       	std	Y+1, r24	; 0x01
     58e:	42 e0       	ldi	r20, 0x02	; 2
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	a4 0e       	add	r10, r20
     594:	b5 1e       	adc	r11, r21
     596:	61 01       	movw	r12, r2
     598:	01 e0       	ldi	r16, 0x01	; 1
     59a:	10 e0       	ldi	r17, 0x00	; 0
     59c:	12 c0       	rjmp	.+36     	; 0x5c2 <vfprintf+0x160>
     59e:	f5 01       	movw	r30, r10
     5a0:	c0 80       	ld	r12, Z
     5a2:	d1 80       	ldd	r13, Z+1	; 0x01
     5a4:	f6 fc       	sbrc	r15, 6
     5a6:	03 c0       	rjmp	.+6      	; 0x5ae <vfprintf+0x14c>
     5a8:	6f ef       	ldi	r22, 0xFF	; 255
     5aa:	7f ef       	ldi	r23, 0xFF	; 255
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <vfprintf+0x150>
     5ae:	69 2d       	mov	r22, r9
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	42 e0       	ldi	r20, 0x02	; 2
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	a4 0e       	add	r10, r20
     5b8:	b5 1e       	adc	r11, r21
     5ba:	c6 01       	movw	r24, r12
     5bc:	0e 94 19 04 	call	0x832	; 0x832 <strnlen>
     5c0:	8c 01       	movw	r16, r24
     5c2:	5f e7       	ldi	r21, 0x7F	; 127
     5c4:	f5 22       	and	r15, r21
     5c6:	14 c0       	rjmp	.+40     	; 0x5f0 <vfprintf+0x18e>
     5c8:	f5 01       	movw	r30, r10
     5ca:	c0 80       	ld	r12, Z
     5cc:	d1 80       	ldd	r13, Z+1	; 0x01
     5ce:	f6 fc       	sbrc	r15, 6
     5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <vfprintf+0x176>
     5d2:	6f ef       	ldi	r22, 0xFF	; 255
     5d4:	7f ef       	ldi	r23, 0xFF	; 255
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <vfprintf+0x17a>
     5d8:	69 2d       	mov	r22, r9
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	42 e0       	ldi	r20, 0x02	; 2
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	a4 0e       	add	r10, r20
     5e2:	b5 1e       	adc	r11, r21
     5e4:	c6 01       	movw	r24, r12
     5e6:	0e 94 0e 04 	call	0x81c	; 0x81c <strnlen_P>
     5ea:	8c 01       	movw	r16, r24
     5ec:	50 e8       	ldi	r21, 0x80	; 128
     5ee:	f5 2a       	or	r15, r21
     5f0:	f3 fe       	sbrs	r15, 3
     5f2:	07 c0       	rjmp	.+14     	; 0x602 <vfprintf+0x1a0>
     5f4:	1a c0       	rjmp	.+52     	; 0x62a <vfprintf+0x1c8>
     5f6:	80 e2       	ldi	r24, 0x20	; 32
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	b3 01       	movw	r22, r6
     5fc:	0e 94 24 04 	call	0x848	; 0x848 <fputc>
     600:	ea 94       	dec	r14
     602:	8e 2d       	mov	r24, r14
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	08 17       	cp	r16, r24
     608:	19 07       	cpc	r17, r25
     60a:	a8 f3       	brcs	.-22     	; 0x5f6 <vfprintf+0x194>
     60c:	0e c0       	rjmp	.+28     	; 0x62a <vfprintf+0x1c8>
     60e:	f6 01       	movw	r30, r12
     610:	f7 fc       	sbrc	r15, 7
     612:	85 91       	lpm	r24, Z+
     614:	f7 fe       	sbrs	r15, 7
     616:	81 91       	ld	r24, Z+
     618:	6f 01       	movw	r12, r30
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	b3 01       	movw	r22, r6
     61e:	0e 94 24 04 	call	0x848	; 0x848 <fputc>
     622:	e1 10       	cpse	r14, r1
     624:	ea 94       	dec	r14
     626:	01 50       	subi	r16, 0x01	; 1
     628:	10 40       	sbci	r17, 0x00	; 0
     62a:	01 15       	cp	r16, r1
     62c:	11 05       	cpc	r17, r1
     62e:	79 f7       	brne	.-34     	; 0x60e <vfprintf+0x1ac>
     630:	ea c0       	rjmp	.+468    	; 0x806 <vfprintf+0x3a4>
     632:	94 36       	cpi	r25, 0x64	; 100
     634:	11 f0       	breq	.+4      	; 0x63a <vfprintf+0x1d8>
     636:	99 36       	cpi	r25, 0x69	; 105
     638:	69 f5       	brne	.+90     	; 0x694 <vfprintf+0x232>
     63a:	f7 fe       	sbrs	r15, 7
     63c:	08 c0       	rjmp	.+16     	; 0x64e <vfprintf+0x1ec>
     63e:	f5 01       	movw	r30, r10
     640:	20 81       	ld	r18, Z
     642:	31 81       	ldd	r19, Z+1	; 0x01
     644:	42 81       	ldd	r20, Z+2	; 0x02
     646:	53 81       	ldd	r21, Z+3	; 0x03
     648:	84 e0       	ldi	r24, 0x04	; 4
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0a c0       	rjmp	.+20     	; 0x662 <vfprintf+0x200>
     64e:	f5 01       	movw	r30, r10
     650:	80 81       	ld	r24, Z
     652:	91 81       	ldd	r25, Z+1	; 0x01
     654:	9c 01       	movw	r18, r24
     656:	44 27       	eor	r20, r20
     658:	37 fd       	sbrc	r19, 7
     65a:	40 95       	com	r20
     65c:	54 2f       	mov	r21, r20
     65e:	82 e0       	ldi	r24, 0x02	; 2
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	a8 0e       	add	r10, r24
     664:	b9 1e       	adc	r11, r25
     666:	9f e6       	ldi	r25, 0x6F	; 111
     668:	f9 22       	and	r15, r25
     66a:	57 ff       	sbrs	r21, 7
     66c:	09 c0       	rjmp	.+18     	; 0x680 <vfprintf+0x21e>
     66e:	50 95       	com	r21
     670:	40 95       	com	r20
     672:	30 95       	com	r19
     674:	21 95       	neg	r18
     676:	3f 4f       	sbci	r19, 0xFF	; 255
     678:	4f 4f       	sbci	r20, 0xFF	; 255
     67a:	5f 4f       	sbci	r21, 0xFF	; 255
     67c:	e0 e8       	ldi	r30, 0x80	; 128
     67e:	fe 2a       	or	r15, r30
     680:	ca 01       	movw	r24, r20
     682:	b9 01       	movw	r22, r18
     684:	a1 01       	movw	r20, r2
     686:	2a e0       	ldi	r18, 0x0A	; 10
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__ultoa_invert>
     68e:	d8 2e       	mov	r13, r24
     690:	d2 18       	sub	r13, r2
     692:	40 c0       	rjmp	.+128    	; 0x714 <vfprintf+0x2b2>
     694:	95 37       	cpi	r25, 0x75	; 117
     696:	29 f4       	brne	.+10     	; 0x6a2 <vfprintf+0x240>
     698:	1f 2d       	mov	r17, r15
     69a:	1f 7e       	andi	r17, 0xEF	; 239
     69c:	2a e0       	ldi	r18, 0x0A	; 10
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	1d c0       	rjmp	.+58     	; 0x6dc <vfprintf+0x27a>
     6a2:	1f 2d       	mov	r17, r15
     6a4:	19 7f       	andi	r17, 0xF9	; 249
     6a6:	9f 36       	cpi	r25, 0x6F	; 111
     6a8:	61 f0       	breq	.+24     	; 0x6c2 <vfprintf+0x260>
     6aa:	90 37       	cpi	r25, 0x70	; 112
     6ac:	20 f4       	brcc	.+8      	; 0x6b6 <vfprintf+0x254>
     6ae:	98 35       	cpi	r25, 0x58	; 88
     6b0:	09 f0       	breq	.+2      	; 0x6b4 <vfprintf+0x252>
     6b2:	ac c0       	rjmp	.+344    	; 0x80c <vfprintf+0x3aa>
     6b4:	0f c0       	rjmp	.+30     	; 0x6d4 <vfprintf+0x272>
     6b6:	90 37       	cpi	r25, 0x70	; 112
     6b8:	39 f0       	breq	.+14     	; 0x6c8 <vfprintf+0x266>
     6ba:	98 37       	cpi	r25, 0x78	; 120
     6bc:	09 f0       	breq	.+2      	; 0x6c0 <vfprintf+0x25e>
     6be:	a6 c0       	rjmp	.+332    	; 0x80c <vfprintf+0x3aa>
     6c0:	04 c0       	rjmp	.+8      	; 0x6ca <vfprintf+0x268>
     6c2:	28 e0       	ldi	r18, 0x08	; 8
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	0a c0       	rjmp	.+20     	; 0x6dc <vfprintf+0x27a>
     6c8:	10 61       	ori	r17, 0x10	; 16
     6ca:	14 fd       	sbrc	r17, 4
     6cc:	14 60       	ori	r17, 0x04	; 4
     6ce:	20 e1       	ldi	r18, 0x10	; 16
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	04 c0       	rjmp	.+8      	; 0x6dc <vfprintf+0x27a>
     6d4:	14 fd       	sbrc	r17, 4
     6d6:	16 60       	ori	r17, 0x06	; 6
     6d8:	20 e1       	ldi	r18, 0x10	; 16
     6da:	32 e0       	ldi	r19, 0x02	; 2
     6dc:	17 ff       	sbrs	r17, 7
     6de:	08 c0       	rjmp	.+16     	; 0x6f0 <vfprintf+0x28e>
     6e0:	f5 01       	movw	r30, r10
     6e2:	60 81       	ld	r22, Z
     6e4:	71 81       	ldd	r23, Z+1	; 0x01
     6e6:	82 81       	ldd	r24, Z+2	; 0x02
     6e8:	93 81       	ldd	r25, Z+3	; 0x03
     6ea:	44 e0       	ldi	r20, 0x04	; 4
     6ec:	50 e0       	ldi	r21, 0x00	; 0
     6ee:	08 c0       	rjmp	.+16     	; 0x700 <vfprintf+0x29e>
     6f0:	f5 01       	movw	r30, r10
     6f2:	80 81       	ld	r24, Z
     6f4:	91 81       	ldd	r25, Z+1	; 0x01
     6f6:	bc 01       	movw	r22, r24
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	42 e0       	ldi	r20, 0x02	; 2
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	a4 0e       	add	r10, r20
     702:	b5 1e       	adc	r11, r21
     704:	a1 01       	movw	r20, r2
     706:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__ultoa_invert>
     70a:	d8 2e       	mov	r13, r24
     70c:	d2 18       	sub	r13, r2
     70e:	8f e7       	ldi	r24, 0x7F	; 127
     710:	f8 2e       	mov	r15, r24
     712:	f1 22       	and	r15, r17
     714:	f6 fe       	sbrs	r15, 6
     716:	0b c0       	rjmp	.+22     	; 0x72e <vfprintf+0x2cc>
     718:	5e ef       	ldi	r21, 0xFE	; 254
     71a:	f5 22       	and	r15, r21
     71c:	d9 14       	cp	r13, r9
     71e:	38 f4       	brcc	.+14     	; 0x72e <vfprintf+0x2cc>
     720:	f4 fe       	sbrs	r15, 4
     722:	07 c0       	rjmp	.+14     	; 0x732 <vfprintf+0x2d0>
     724:	f2 fc       	sbrc	r15, 2
     726:	05 c0       	rjmp	.+10     	; 0x732 <vfprintf+0x2d0>
     728:	8f ee       	ldi	r24, 0xEF	; 239
     72a:	f8 22       	and	r15, r24
     72c:	02 c0       	rjmp	.+4      	; 0x732 <vfprintf+0x2d0>
     72e:	1d 2d       	mov	r17, r13
     730:	01 c0       	rjmp	.+2      	; 0x734 <vfprintf+0x2d2>
     732:	19 2d       	mov	r17, r9
     734:	f4 fe       	sbrs	r15, 4
     736:	0d c0       	rjmp	.+26     	; 0x752 <vfprintf+0x2f0>
     738:	fe 01       	movw	r30, r28
     73a:	ed 0d       	add	r30, r13
     73c:	f1 1d       	adc	r31, r1
     73e:	80 81       	ld	r24, Z
     740:	80 33       	cpi	r24, 0x30	; 48
     742:	19 f4       	brne	.+6      	; 0x74a <vfprintf+0x2e8>
     744:	99 ee       	ldi	r25, 0xE9	; 233
     746:	f9 22       	and	r15, r25
     748:	08 c0       	rjmp	.+16     	; 0x75a <vfprintf+0x2f8>
     74a:	1f 5f       	subi	r17, 0xFF	; 255
     74c:	f2 fe       	sbrs	r15, 2
     74e:	05 c0       	rjmp	.+10     	; 0x75a <vfprintf+0x2f8>
     750:	03 c0       	rjmp	.+6      	; 0x758 <vfprintf+0x2f6>
     752:	8f 2d       	mov	r24, r15
     754:	86 78       	andi	r24, 0x86	; 134
     756:	09 f0       	breq	.+2      	; 0x75a <vfprintf+0x2f8>
     758:	1f 5f       	subi	r17, 0xFF	; 255
     75a:	0f 2d       	mov	r16, r15
     75c:	f3 fc       	sbrc	r15, 3
     75e:	14 c0       	rjmp	.+40     	; 0x788 <vfprintf+0x326>
     760:	f0 fe       	sbrs	r15, 0
     762:	0f c0       	rjmp	.+30     	; 0x782 <vfprintf+0x320>
     764:	1e 15       	cp	r17, r14
     766:	10 f0       	brcs	.+4      	; 0x76c <vfprintf+0x30a>
     768:	9d 2c       	mov	r9, r13
     76a:	0b c0       	rjmp	.+22     	; 0x782 <vfprintf+0x320>
     76c:	9d 2c       	mov	r9, r13
     76e:	9e 0c       	add	r9, r14
     770:	91 1a       	sub	r9, r17
     772:	1e 2d       	mov	r17, r14
     774:	06 c0       	rjmp	.+12     	; 0x782 <vfprintf+0x320>
     776:	80 e2       	ldi	r24, 0x20	; 32
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	b3 01       	movw	r22, r6
     77c:	0e 94 24 04 	call	0x848	; 0x848 <fputc>
     780:	1f 5f       	subi	r17, 0xFF	; 255
     782:	1e 15       	cp	r17, r14
     784:	c0 f3       	brcs	.-16     	; 0x776 <vfprintf+0x314>
     786:	04 c0       	rjmp	.+8      	; 0x790 <vfprintf+0x32e>
     788:	1e 15       	cp	r17, r14
     78a:	10 f4       	brcc	.+4      	; 0x790 <vfprintf+0x32e>
     78c:	e1 1a       	sub	r14, r17
     78e:	01 c0       	rjmp	.+2      	; 0x792 <vfprintf+0x330>
     790:	ee 24       	eor	r14, r14
     792:	04 ff       	sbrs	r16, 4
     794:	0f c0       	rjmp	.+30     	; 0x7b4 <vfprintf+0x352>
     796:	80 e3       	ldi	r24, 0x30	; 48
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	b3 01       	movw	r22, r6
     79c:	0e 94 24 04 	call	0x848	; 0x848 <fputc>
     7a0:	02 ff       	sbrs	r16, 2
     7a2:	1d c0       	rjmp	.+58     	; 0x7de <vfprintf+0x37c>
     7a4:	01 fd       	sbrc	r16, 1
     7a6:	03 c0       	rjmp	.+6      	; 0x7ae <vfprintf+0x34c>
     7a8:	88 e7       	ldi	r24, 0x78	; 120
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e c0       	rjmp	.+28     	; 0x7ca <vfprintf+0x368>
     7ae:	88 e5       	ldi	r24, 0x58	; 88
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0b c0       	rjmp	.+22     	; 0x7ca <vfprintf+0x368>
     7b4:	80 2f       	mov	r24, r16
     7b6:	86 78       	andi	r24, 0x86	; 134
     7b8:	91 f0       	breq	.+36     	; 0x7de <vfprintf+0x37c>
     7ba:	01 ff       	sbrs	r16, 1
     7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <vfprintf+0x360>
     7be:	8b e2       	ldi	r24, 0x2B	; 43
     7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <vfprintf+0x362>
     7c2:	80 e2       	ldi	r24, 0x20	; 32
     7c4:	f7 fc       	sbrc	r15, 7
     7c6:	8d e2       	ldi	r24, 0x2D	; 45
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	b3 01       	movw	r22, r6
     7cc:	0e 94 24 04 	call	0x848	; 0x848 <fputc>
     7d0:	06 c0       	rjmp	.+12     	; 0x7de <vfprintf+0x37c>
     7d2:	80 e3       	ldi	r24, 0x30	; 48
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	b3 01       	movw	r22, r6
     7d8:	0e 94 24 04 	call	0x848	; 0x848 <fputc>
     7dc:	9a 94       	dec	r9
     7de:	d9 14       	cp	r13, r9
     7e0:	c0 f3       	brcs	.-16     	; 0x7d2 <vfprintf+0x370>
     7e2:	da 94       	dec	r13
     7e4:	f1 01       	movw	r30, r2
     7e6:	ed 0d       	add	r30, r13
     7e8:	f1 1d       	adc	r31, r1
     7ea:	80 81       	ld	r24, Z
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	b3 01       	movw	r22, r6
     7f0:	0e 94 24 04 	call	0x848	; 0x848 <fputc>
     7f4:	dd 20       	and	r13, r13
     7f6:	a9 f7       	brne	.-22     	; 0x7e2 <vfprintf+0x380>
     7f8:	06 c0       	rjmp	.+12     	; 0x806 <vfprintf+0x3a4>
     7fa:	80 e2       	ldi	r24, 0x20	; 32
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	b3 01       	movw	r22, r6
     800:	0e 94 24 04 	call	0x848	; 0x848 <fputc>
     804:	ea 94       	dec	r14
     806:	ee 20       	and	r14, r14
     808:	c1 f7       	brne	.-16     	; 0x7fa <vfprintf+0x398>
     80a:	43 ce       	rjmp	.-890    	; 0x492 <vfprintf+0x30>
     80c:	f3 01       	movw	r30, r6
     80e:	66 81       	ldd	r22, Z+6	; 0x06
     810:	77 81       	ldd	r23, Z+7	; 0x07
     812:	cb 01       	movw	r24, r22
     814:	2b 96       	adiw	r28, 0x0b	; 11
     816:	e2 e1       	ldi	r30, 0x12	; 18
     818:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <__epilogue_restores__>

0000081c <strnlen_P>:
     81c:	fc 01       	movw	r30, r24
     81e:	05 90       	lpm	r0, Z+
     820:	61 50       	subi	r22, 0x01	; 1
     822:	70 40       	sbci	r23, 0x00	; 0
     824:	01 10       	cpse	r0, r1
     826:	d8 f7       	brcc	.-10     	; 0x81e <strnlen_P+0x2>
     828:	80 95       	com	r24
     82a:	90 95       	com	r25
     82c:	8e 0f       	add	r24, r30
     82e:	9f 1f       	adc	r25, r31
     830:	08 95       	ret

00000832 <strnlen>:
     832:	fc 01       	movw	r30, r24
     834:	61 50       	subi	r22, 0x01	; 1
     836:	70 40       	sbci	r23, 0x00	; 0
     838:	01 90       	ld	r0, Z+
     83a:	01 10       	cpse	r0, r1
     83c:	d8 f7       	brcc	.-10     	; 0x834 <strnlen+0x2>
     83e:	80 95       	com	r24
     840:	90 95       	com	r25
     842:	8e 0f       	add	r24, r30
     844:	9f 1f       	adc	r25, r31
     846:	08 95       	ret

00000848 <fputc>:
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	8c 01       	movw	r16, r24
     852:	eb 01       	movw	r28, r22
     854:	8b 81       	ldd	r24, Y+3	; 0x03
     856:	81 ff       	sbrs	r24, 1
     858:	1b c0       	rjmp	.+54     	; 0x890 <__stack+0x31>
     85a:	82 ff       	sbrs	r24, 2
     85c:	0d c0       	rjmp	.+26     	; 0x878 <__stack+0x19>
     85e:	2e 81       	ldd	r18, Y+6	; 0x06
     860:	3f 81       	ldd	r19, Y+7	; 0x07
     862:	8c 81       	ldd	r24, Y+4	; 0x04
     864:	9d 81       	ldd	r25, Y+5	; 0x05
     866:	28 17       	cp	r18, r24
     868:	39 07       	cpc	r19, r25
     86a:	64 f4       	brge	.+24     	; 0x884 <__stack+0x25>
     86c:	e8 81       	ld	r30, Y
     86e:	f9 81       	ldd	r31, Y+1	; 0x01
     870:	01 93       	st	Z+, r16
     872:	f9 83       	std	Y+1, r31	; 0x01
     874:	e8 83       	st	Y, r30
     876:	06 c0       	rjmp	.+12     	; 0x884 <__stack+0x25>
     878:	e8 85       	ldd	r30, Y+8	; 0x08
     87a:	f9 85       	ldd	r31, Y+9	; 0x09
     87c:	80 2f       	mov	r24, r16
     87e:	09 95       	icall
     880:	89 2b       	or	r24, r25
     882:	31 f4       	brne	.+12     	; 0x890 <__stack+0x31>
     884:	8e 81       	ldd	r24, Y+6	; 0x06
     886:	9f 81       	ldd	r25, Y+7	; 0x07
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	9f 83       	std	Y+7, r25	; 0x07
     88c:	8e 83       	std	Y+6, r24	; 0x06
     88e:	02 c0       	rjmp	.+4      	; 0x894 <__stack+0x35>
     890:	0f ef       	ldi	r16, 0xFF	; 255
     892:	1f ef       	ldi	r17, 0xFF	; 255
     894:	c8 01       	movw	r24, r16
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	08 95       	ret

000008a0 <__ultoa_invert>:
     8a0:	fa 01       	movw	r30, r20
     8a2:	aa 27       	eor	r26, r26
     8a4:	28 30       	cpi	r18, 0x08	; 8
     8a6:	51 f1       	breq	.+84     	; 0x8fc <__ultoa_invert+0x5c>
     8a8:	20 31       	cpi	r18, 0x10	; 16
     8aa:	81 f1       	breq	.+96     	; 0x90c <__ultoa_invert+0x6c>
     8ac:	e8 94       	clt
     8ae:	6f 93       	push	r22
     8b0:	6e 7f       	andi	r22, 0xFE	; 254
     8b2:	6e 5f       	subi	r22, 0xFE	; 254
     8b4:	7f 4f       	sbci	r23, 0xFF	; 255
     8b6:	8f 4f       	sbci	r24, 0xFF	; 255
     8b8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ba:	af 4f       	sbci	r26, 0xFF	; 255
     8bc:	b1 e0       	ldi	r27, 0x01	; 1
     8be:	3e d0       	rcall	.+124    	; 0x93c <__ultoa_invert+0x9c>
     8c0:	b4 e0       	ldi	r27, 0x04	; 4
     8c2:	3c d0       	rcall	.+120    	; 0x93c <__ultoa_invert+0x9c>
     8c4:	67 0f       	add	r22, r23
     8c6:	78 1f       	adc	r23, r24
     8c8:	89 1f       	adc	r24, r25
     8ca:	9a 1f       	adc	r25, r26
     8cc:	a1 1d       	adc	r26, r1
     8ce:	68 0f       	add	r22, r24
     8d0:	79 1f       	adc	r23, r25
     8d2:	8a 1f       	adc	r24, r26
     8d4:	91 1d       	adc	r25, r1
     8d6:	a1 1d       	adc	r26, r1
     8d8:	6a 0f       	add	r22, r26
     8da:	71 1d       	adc	r23, r1
     8dc:	81 1d       	adc	r24, r1
     8de:	91 1d       	adc	r25, r1
     8e0:	a1 1d       	adc	r26, r1
     8e2:	20 d0       	rcall	.+64     	; 0x924 <__ultoa_invert+0x84>
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <__ultoa_invert+0x48>
     8e6:	68 94       	set
     8e8:	3f 91       	pop	r19
     8ea:	2a e0       	ldi	r18, 0x0A	; 10
     8ec:	26 9f       	mul	r18, r22
     8ee:	11 24       	eor	r1, r1
     8f0:	30 19       	sub	r19, r0
     8f2:	30 5d       	subi	r19, 0xD0	; 208
     8f4:	31 93       	st	Z+, r19
     8f6:	de f6       	brtc	.-74     	; 0x8ae <__ultoa_invert+0xe>
     8f8:	cf 01       	movw	r24, r30
     8fa:	08 95       	ret
     8fc:	46 2f       	mov	r20, r22
     8fe:	47 70       	andi	r20, 0x07	; 7
     900:	40 5d       	subi	r20, 0xD0	; 208
     902:	41 93       	st	Z+, r20
     904:	b3 e0       	ldi	r27, 0x03	; 3
     906:	0f d0       	rcall	.+30     	; 0x926 <__ultoa_invert+0x86>
     908:	c9 f7       	brne	.-14     	; 0x8fc <__ultoa_invert+0x5c>
     90a:	f6 cf       	rjmp	.-20     	; 0x8f8 <__ultoa_invert+0x58>
     90c:	46 2f       	mov	r20, r22
     90e:	4f 70       	andi	r20, 0x0F	; 15
     910:	40 5d       	subi	r20, 0xD0	; 208
     912:	4a 33       	cpi	r20, 0x3A	; 58
     914:	18 f0       	brcs	.+6      	; 0x91c <__ultoa_invert+0x7c>
     916:	49 5d       	subi	r20, 0xD9	; 217
     918:	31 fd       	sbrc	r19, 1
     91a:	40 52       	subi	r20, 0x20	; 32
     91c:	41 93       	st	Z+, r20
     91e:	02 d0       	rcall	.+4      	; 0x924 <__ultoa_invert+0x84>
     920:	a9 f7       	brne	.-22     	; 0x90c <__ultoa_invert+0x6c>
     922:	ea cf       	rjmp	.-44     	; 0x8f8 <__ultoa_invert+0x58>
     924:	b4 e0       	ldi	r27, 0x04	; 4
     926:	a6 95       	lsr	r26
     928:	97 95       	ror	r25
     92a:	87 95       	ror	r24
     92c:	77 95       	ror	r23
     92e:	67 95       	ror	r22
     930:	ba 95       	dec	r27
     932:	c9 f7       	brne	.-14     	; 0x926 <__ultoa_invert+0x86>
     934:	00 97       	sbiw	r24, 0x00	; 0
     936:	61 05       	cpc	r22, r1
     938:	71 05       	cpc	r23, r1
     93a:	08 95       	ret
     93c:	9b 01       	movw	r18, r22
     93e:	ac 01       	movw	r20, r24
     940:	0a 2e       	mov	r0, r26
     942:	06 94       	lsr	r0
     944:	57 95       	ror	r21
     946:	47 95       	ror	r20
     948:	37 95       	ror	r19
     94a:	27 95       	ror	r18
     94c:	ba 95       	dec	r27
     94e:	c9 f7       	brne	.-14     	; 0x942 <__ultoa_invert+0xa2>
     950:	62 0f       	add	r22, r18
     952:	73 1f       	adc	r23, r19
     954:	84 1f       	adc	r24, r20
     956:	95 1f       	adc	r25, r21
     958:	a0 1d       	adc	r26, r0
     95a:	08 95       	ret

0000095c <delay_ms>:
uchar buf[80];

/**
 * Some basic delay function
 */
void delay_ms(unsigned short ms) {
     95c:	df 93       	push	r29
     95e:	cf 93       	push	r28
     960:	00 d0       	rcall	.+0      	; 0x962 <delay_ms+0x6>
     962:	00 d0       	rcall	.+0      	; 0x964 <delay_ms+0x8>
     964:	00 d0       	rcall	.+0      	; 0x966 <delay_ms+0xa>
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	9e 83       	std	Y+6, r25	; 0x06
     96c:	8d 83       	std	Y+5, r24	; 0x05
	unsigned short outer1, outer2;
	outer1 = 200 * 12;
     96e:	80 e6       	ldi	r24, 0x60	; 96
     970:	99 e0       	ldi	r25, 0x09	; 9
     972:	9c 83       	std	Y+4, r25	; 0x04
     974:	8b 83       	std	Y+3, r24	; 0x03
     976:	1c c0       	rjmp	.+56     	; 0x9b0 <delay_ms+0x54>

	while (outer1) {
		outer2 = 100;
     978:	84 e6       	ldi	r24, 0x64	; 100
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	9a 83       	std	Y+2, r25	; 0x02
     97e:	89 83       	std	Y+1, r24	; 0x01
     980:	0e c0       	rjmp	.+28     	; 0x99e <delay_ms+0x42>
		while (outer2) {
			while (ms)
				ms--;
     982:	8d 81       	ldd	r24, Y+5	; 0x05
     984:	9e 81       	ldd	r25, Y+6	; 0x06
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	9e 83       	std	Y+6, r25	; 0x06
     98a:	8d 83       	std	Y+5, r24	; 0x05
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
			while (ms)
     98c:	8d 81       	ldd	r24, Y+5	; 0x05
     98e:	9e 81       	ldd	r25, Y+6	; 0x06
     990:	00 97       	sbiw	r24, 0x00	; 0
     992:	b9 f7       	brne	.-18     	; 0x982 <delay_ms+0x26>
				ms--;
			outer2--;
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	9a 81       	ldd	r25, Y+2	; 0x02
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	9a 83       	std	Y+2, r25	; 0x02
     99c:	89 83       	std	Y+1, r24	; 0x01
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
     99e:	89 81       	ldd	r24, Y+1	; 0x01
     9a0:	9a 81       	ldd	r25, Y+2	; 0x02
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	99 f7       	brne	.-26     	; 0x98c <delay_ms+0x30>
			while (ms)
				ms--;
			outer2--;
		}
		outer1--;
     9a6:	8b 81       	ldd	r24, Y+3	; 0x03
     9a8:	9c 81       	ldd	r25, Y+4	; 0x04
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	9c 83       	std	Y+4, r25	; 0x04
     9ae:	8b 83       	std	Y+3, r24	; 0x03
 */
void delay_ms(unsigned short ms) {
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
     9b0:	8b 81       	ldd	r24, Y+3	; 0x03
     9b2:	9c 81       	ldd	r25, Y+4	; 0x04
     9b4:	00 97       	sbiw	r24, 0x00	; 0
     9b6:	01 f7       	brne	.-64     	; 0x978 <delay_ms+0x1c>
				ms--;
			outer2--;
		}
		outer1--;
	}
}
     9b8:	26 96       	adiw	r28, 0x06	; 6
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	f8 94       	cli
     9be:	de bf       	out	0x3e, r29	; 62
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	cd bf       	out	0x3d, r28	; 61
     9c4:	cf 91       	pop	r28
     9c6:	df 91       	pop	r29
     9c8:	08 95       	ret

000009ca <gpib_init>:
 * Init GPIB pins and variables.
 * \brief All signal lines not related to the controller part
 * 		are initialized with useful values.
 *		(The controller part initialization is done on gpib_controller_assert())
 */
void gpib_init(void) {
     9ca:	df 93       	push	r29
     9cc:	cf 93       	push	r28
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
	// data lines - complete port A as input
	DDRA = 0x00;
     9d2:	ea e3       	ldi	r30, 0x3A	; 58
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	10 82       	st	Z, r1

	// handshake lines - on port D , everything as input
	DDRD &= ~_BV(G_DAV); // DAV 
     9d8:	a1 e3       	ldi	r26, 0x31	; 49
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	e1 e3       	ldi	r30, 0x31	; 49
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	80 81       	ld	r24, Z
     9e2:	8b 7f       	andi	r24, 0xFB	; 251
     9e4:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_EOI); // EOI 
     9e6:	a1 e3       	ldi	r26, 0x31	; 49
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	e1 e3       	ldi	r30, 0x31	; 49
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	80 81       	ld	r24, Z
     9f0:	8f 7e       	andi	r24, 0xEF	; 239
     9f2:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_SRQ); // SRQ 
     9f4:	a1 e3       	ldi	r26, 0x31	; 49
     9f6:	b0 e0       	ldi	r27, 0x00	; 0
     9f8:	e1 e3       	ldi	r30, 0x31	; 49
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	80 81       	ld	r24, Z
     9fe:	8f 7b       	andi	r24, 0xBF	; 191
     a00:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_ATN); // ATN  
     a02:	a1 e3       	ldi	r26, 0x31	; 49
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	e1 e3       	ldi	r30, 0x31	; 49
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	80 81       	ld	r24, Z
     a0c:	8f 77       	andi	r24, 0x7F	; 127
     a0e:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_REN); // REN  
     a10:	a7 e3       	ldi	r26, 0x37	; 55
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e7 e3       	ldi	r30, 0x37	; 55
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	8d 7f       	andi	r24, 0xFD	; 253
     a1c:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_IFC); // IFC  
     a1e:	a7 e3       	ldi	r26, 0x37	; 55
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	e7 e3       	ldi	r30, 0x37	; 55
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	8e 7f       	andi	r24, 0xFE	; 254
     a2a:	8c 93       	st	X, r24

	// init handshake lines
	assign_bit(DDRD, PORTD, G_NRFD);
     a2c:	a2 e3       	ldi	r26, 0x32	; 50
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	e2 e3       	ldi	r30, 0x32	; 50
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	87 7f       	andi	r24, 0xF7	; 247
     a38:	8c 93       	st	X, r24
     a3a:	a1 e3       	ldi	r26, 0x31	; 49
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	e1 e3       	ldi	r30, 0x31	; 49
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	80 81       	ld	r24, Z
     a44:	88 60       	ori	r24, 0x08	; 8
     a46:	8c 93       	st	X, r24
     a48:	a2 e3       	ldi	r26, 0x32	; 50
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	e2 e3       	ldi	r30, 0x32	; 50
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	80 81       	ld	r24, Z
     a52:	87 7f       	andi	r24, 0xF7	; 247
     a54:	8c 93       	st	X, r24
	// not ready for data now
	release_bit(DDRD, PORTD, G_NDAC);
     a56:	a1 e3       	ldi	r26, 0x31	; 49
     a58:	b0 e0       	ldi	r27, 0x00	; 0
     a5a:	e1 e3       	ldi	r30, 0x31	; 49
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	80 81       	ld	r24, Z
     a60:	8f 7d       	andi	r24, 0xDF	; 223
     a62:	8c 93       	st	X, r24
     a64:	a2 e3       	ldi	r26, 0x32	; 50
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	e2 e3       	ldi	r30, 0x32	; 50
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	80 81       	ld	r24, Z
     a6e:	80 62       	ori	r24, 0x20	; 32
     a70:	8c 93       	st	X, r24
	// initially: ok so far
}
     a72:	cf 91       	pop	r28
     a74:	df 91       	pop	r29
     a76:	08 95       	ret

00000a78 <gpib_send_address>:

/**
 * Sends address bytes to address a partner
 */
void gpib_send_address( uchar primary, uchar secondary) {
     a78:	df 93       	push	r29
     a7a:	cf 93       	push	r28
     a7c:	cd b7       	in	r28, 0x3d	; 61
     a7e:	de b7       	in	r29, 0x3e	; 62
     a80:	2c 97       	sbiw	r28, 0x0c	; 12
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	f8 94       	cli
     a86:	de bf       	out	0x3e, r29	; 62
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	cd bf       	out	0x3d, r28	; 61
     a8c:	8b 87       	std	Y+11, r24	; 0x0b
     a8e:	6c 87       	std	Y+12, r22	; 0x0c
	uchar controlString[10];
	controlString[0] = primary;
     a90:	8b 85       	ldd	r24, Y+11	; 0x0b
     a92:	89 83       	std	Y+1, r24	; 0x01
	//uart_puts("before talker address p write\r\n");
	gpib_cmd(controlString, 1);
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	61 e0       	ldi	r22, 0x01	; 1
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	0e 94 72 07 	call	0xee4	; 0xee4 <gpib_cmd>
	// handle secondary address if required
	if (secondary != ADDRESS_NOT_SET) {
     aa0:	8c 85       	ldd	r24, Y+12	; 0x0c
     aa2:	8f 3f       	cpi	r24, 0xFF	; 255
     aa4:	41 f0       	breq	.+16     	; 0xab6 <gpib_send_address+0x3e>
		controlString[0] = secondary;
     aa6:	8c 85       	ldd	r24, Y+12	; 0x0c
     aa8:	89 83       	std	Y+1, r24	; 0x01
		//uart_puts("before talker address s write\r\n");
		gpib_cmd(controlString, 1);
     aaa:	ce 01       	movw	r24, r28
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	0e 94 72 07 	call	0xee4	; 0xee4 <gpib_cmd>
	}
	//uart_puts("after talker address write\r\n");
}
     ab6:	2c 96       	adiw	r28, 0x0c	; 12
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	f8 94       	cli
     abc:	de bf       	out	0x3e, r29	; 62
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	cd bf       	out	0x3d, r28	; 61
     ac2:	cf 91       	pop	r28
     ac4:	df 91       	pop	r29
     ac6:	08 95       	ret

00000ac8 <gpib_prepare_write>:

/**
 * Prepare partner for writing
 */
void gpib_prepare_write() {
     ac8:	df 93       	push	r29
     aca:	cf 93       	push	r28
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
     ad0:	2b 97       	sbiw	r28, 0x0b	; 11
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	de bf       	out	0x3e, r29	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// send UNT and UNL commands (unlisten and untalk)
	gpib_untalkUnlisten();
     adc:	0e 94 ce 05 	call	0xb9c	; 0xb9c <gpib_untalkUnlisten>
//	// send secondary address if required
//	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
//		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
//		gpib_cmd(controlString, 1);
//	}
	uchar primary = address2ListenerAddress(gpib_get_partner_pad());
     ae0:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <gpib_get_partner_pad>
     ae4:	80 5e       	subi	r24, 0xE0	; 224
     ae6:	8a 83       	std	Y+2, r24	; 0x02
	uchar secondary = (gpib_get_partner_sad()==ADDRESS_NOT_SET)? ADDRESS_NOT_SET: secondaryAdressToAdressByte(gpib_get_partner_sad());
     ae8:	0e 94 75 0d 	call	0x1aea	; 0x1aea <gpib_get_partner_sad>
     aec:	8f 3f       	cpi	r24, 0xFF	; 255
     aee:	31 f0       	breq	.+12     	; 0xafc <gpib_prepare_write+0x34>
     af0:	0e 94 75 0d 	call	0x1aea	; 0x1aea <gpib_get_partner_sad>
     af4:	98 2f       	mov	r25, r24
     af6:	90 66       	ori	r25, 0x60	; 96
     af8:	9b 87       	std	Y+11, r25	; 0x0b
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <gpib_prepare_write+0x38>
     afc:	8f ef       	ldi	r24, 0xFF	; 255
     afe:	8b 87       	std	Y+11, r24	; 0x0b
     b00:	9b 85       	ldd	r25, Y+11	; 0x0b
     b02:	99 83       	std	Y+1, r25	; 0x01
	gpib_send_address(primary, secondary);
     b04:	8a 81       	ldd	r24, Y+2	; 0x02
     b06:	69 81       	ldd	r22, Y+1	; 0x01
     b08:	0e 94 3c 05 	call	0xa78	; 0xa78 <gpib_send_address>

	// set myself (controller) to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_address());
     b0c:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <gpib_get_address>
     b10:	80 5c       	subi	r24, 0xC0	; 192
     b12:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
     b14:	ce 01       	movw	r24, r28
     b16:	03 96       	adiw	r24, 0x03	; 3
     b18:	61 e0       	ldi	r22, 0x01	; 1
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	0e 94 72 07 	call	0xee4	; 0xee4 <gpib_cmd>
}
     b20:	2b 96       	adiw	r28, 0x0b	; 11
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	f8 94       	cli
     b26:	de bf       	out	0x3e, r29	; 62
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	cd bf       	out	0x3d, r28	; 61
     b2c:	cf 91       	pop	r28
     b2e:	df 91       	pop	r29
     b30:	08 95       	ret

00000b32 <gpib_prepare_read>:

/**
 * Prepare partner for writing
 */
void gpib_prepare_read() {
     b32:	df 93       	push	r29
     b34:	cf 93       	push	r28
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
     b3a:	2b 97       	sbiw	r28, 0x0b	; 11
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// untalk/unlisten all partners
	gpib_untalkUnlisten();
     b46:	0e 94 ce 05 	call	0xb9c	; 0xb9c <gpib_untalkUnlisten>

	// set myself (controller) to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_address());
     b4a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <gpib_get_address>
     b4e:	80 5e       	subi	r24, 0xE0	; 224
     b50:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
     b52:	ce 01       	movw	r24, r28
     b54:	03 96       	adiw	r24, 0x03	; 3
     b56:	61 e0       	ldi	r22, 0x01	; 1
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	0e 94 72 07 	call	0xee4	; 0xee4 <gpib_cmd>
//	// secondary address if required
//	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
//		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
//		gpib_cmd(controlString, 1);
//	}
	uchar primary = address2TalkerAddress(gpib_get_partner_pad());
     b5e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <gpib_get_partner_pad>
     b62:	80 5c       	subi	r24, 0xC0	; 192
     b64:	8a 83       	std	Y+2, r24	; 0x02
	uchar secondary = (gpib_get_partner_sad()==ADDRESS_NOT_SET)? ADDRESS_NOT_SET: secondaryAdressToAdressByte(gpib_get_partner_sad());
     b66:	0e 94 75 0d 	call	0x1aea	; 0x1aea <gpib_get_partner_sad>
     b6a:	8f 3f       	cpi	r24, 0xFF	; 255
     b6c:	31 f0       	breq	.+12     	; 0xb7a <gpib_prepare_read+0x48>
     b6e:	0e 94 75 0d 	call	0x1aea	; 0x1aea <gpib_get_partner_sad>
     b72:	98 2f       	mov	r25, r24
     b74:	90 66       	ori	r25, 0x60	; 96
     b76:	9b 87       	std	Y+11, r25	; 0x0b
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <gpib_prepare_read+0x4c>
     b7a:	8f ef       	ldi	r24, 0xFF	; 255
     b7c:	8b 87       	std	Y+11, r24	; 0x0b
     b7e:	9b 85       	ldd	r25, Y+11	; 0x0b
     b80:	99 83       	std	Y+1, r25	; 0x01
	gpib_send_address(primary, secondary);
     b82:	8a 81       	ldd	r24, Y+2	; 0x02
     b84:	69 81       	ldd	r22, Y+1	; 0x01
     b86:	0e 94 3c 05 	call	0xa78	; 0xa78 <gpib_send_address>
}
     b8a:	2b 96       	adiw	r28, 0x0b	; 11
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	cd bf       	out	0x3d, r28	; 61
     b96:	cf 91       	pop	r28
     b98:	df 91       	pop	r29
     b9a:	08 95       	ret

00000b9c <gpib_untalkUnlisten>:

/**
 * Untalk / unlisten all partners on bus.
 */
void gpib_untalkUnlisten() {
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	28 97       	sbiw	r28, 0x08	; 8
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	de bf       	out	0x3e, r29	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
     bb0:	8f e5       	ldi	r24, 0x5F	; 95
     bb2:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     bb4:	ce 01       	movw	r24, r28
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	0e 94 72 07 	call	0xee4	; 0xee4 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
     bc0:	8f e3       	ldi	r24, 0x3F	; 63
     bc2:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     bc4:	ce 01       	movw	r24, r28
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	61 e0       	ldi	r22, 0x01	; 1
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	0e 94 72 07 	call	0xee4	; 0xee4 <gpib_cmd>
}
     bd0:	28 96       	adiw	r28, 0x08	; 8
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	cf 91       	pop	r28
     bde:	df 91       	pop	r29
     be0:	08 95       	ret

00000be2 <gpib_receive>:
 *  \returns		On any error, 0xff is returned. in this case, the value of parameter *_byte is undefined.
 * 		Otherwise the value of the EOI signal line during read is returned. If EOI was assigned, a 0x01 is
 * 		returned. If EOI was not assigned, a 0x00 is returned. Assignment of EOI means that the talker
 * 		is sending the last character for this transmission.
 */
uchar gpib_receive(uchar* _byte) {
     be2:	df 93       	push	r29
     be4:	cf 93       	push	r28
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	27 97       	sbiw	r28, 0x07	; 7
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	9e 83       	std	Y+6, r25	; 0x06
     bf8:	8d 83       	std	Y+5, r24	; 0x05
	int timeout;
	uchar byte, eoi;

	//uart_puts("\n\rgpib_receive()\n\r");

	if (controller.talks == 1) {
     bfa:	80 91 9b 04 	lds	r24, 0x049B
     bfe:	81 30       	cpi	r24, 0x01	; 1
     c00:	39 f4       	brne	.+14     	; 0xc10 <gpib_receive+0x2e>
		*_byte = 0xff;
     c02:	ed 81       	ldd	r30, Y+5	; 0x05
     c04:	fe 81       	ldd	r31, Y+6	; 0x06
     c06:	8f ef       	ldi	r24, 0xFF	; 255
     c08:	80 83       	st	Z, r24
		return 0xff;
     c0a:	8f ef       	ldi	r24, 0xFF	; 255
     c0c:	8f 83       	std	Y+7, r24	; 0x07
     c0e:	c6 c0       	rjmp	.+396    	; 0xd9c <gpib_receive+0x1ba>
	}

	// handshake: set nrfd, means i am ready to receive some data
	release_bit(DDRD, PORTD, G_NRFD);
     c10:	a1 e3       	ldi	r26, 0x31	; 49
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e1 e3       	ldi	r30, 0x31	; 49
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	87 7f       	andi	r24, 0xF7	; 247
     c1c:	8c 93       	st	X, r24
     c1e:	a2 e3       	ldi	r26, 0x32	; 50
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e2 e3       	ldi	r30, 0x32	; 50
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	88 60       	ori	r24, 0x08	; 8
     c2a:	8c 93       	st	X, r24
	assign_bit(DDRD, PORTD, G_NDAC);
     c2c:	a2 e3       	ldi	r26, 0x32	; 50
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	e2 e3       	ldi	r30, 0x32	; 50
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	8f 7d       	andi	r24, 0xDF	; 223
     c38:	8c 93       	st	X, r24
     c3a:	a1 e3       	ldi	r26, 0x31	; 49
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e1 e3       	ldi	r30, 0x31	; 49
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	80 62       	ori	r24, 0x20	; 32
     c46:	8c 93       	st	X, r24
     c48:	a2 e3       	ldi	r26, 0x32	; 50
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e2 e3       	ldi	r30, 0x32	; 50
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	8f 7d       	andi	r24, 0xDF	; 223
     c54:	8c 93       	st	X, r24

	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     c56:	80 91 05 06 	lds	r24, 0x0605
     c5a:	88 2f       	mov	r24, r24
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	05 96       	adiw	r24, 0x05	; 5
     c60:	9c 83       	std	Y+4, r25	; 0x04
     c62:	8b 83       	std	Y+3, r24	; 0x03
     c64:	10 c0       	rjmp	.+32     	; 0xc86 <gpib_receive+0xa4>
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     c66:	80 91 05 06 	lds	r24, 0x0605
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	28 17       	cp	r18, r24
     c74:	39 07       	cpc	r19, r25
     c76:	39 f4       	brne	.+14     	; 0xc86 <gpib_receive+0xa4>
			uart_puts("\n\rError: DAV timeout (1)\n\r");
     c78:	80 e6       	ldi	r24, 0x60	; 96
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
			return 0xff;
     c80:	8f ef       	ldi	r24, 0xFF	; 255
     c82:	8f 83       	std	Y+7, r24	; 0x07
     c84:	8b c0       	rjmp	.+278    	; 0xd9c <gpib_receive+0x1ba>
	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
     c86:	e0 e3       	ldi	r30, 0x30	; 48
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	84 70       	andi	r24, 0x04	; 4
     c92:	90 70       	andi	r25, 0x00	; 0
     c94:	00 97       	sbiw	r24, 0x00	; 0
     c96:	49 f0       	breq	.+18     	; 0xcaa <gpib_receive+0xc8>
     c98:	80 91 05 06 	lds	r24, 0x0605
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	9c 81       	ldd	r25, Y+4	; 0x04
     ca4:	82 17       	cp	r24, r18
     ca6:	93 07       	cpc	r25, r19
     ca8:	f4 f6       	brge	.-68     	; 0xc66 <gpib_receive+0x84>
#else
	loop_until_bit_is_clear(PIND,G_DAV);
#endif

	// handshake: clear NRFD, means i am busy now to read data
	assign_bit(DDRD, PORTD, G_NRFD);
     caa:	a2 e3       	ldi	r26, 0x32	; 50
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e2 e3       	ldi	r30, 0x32	; 50
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	87 7f       	andi	r24, 0xF7	; 247
     cb6:	8c 93       	st	X, r24
     cb8:	a1 e3       	ldi	r26, 0x31	; 49
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e1 e3       	ldi	r30, 0x31	; 49
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	88 60       	ori	r24, 0x08	; 8
     cc4:	8c 93       	st	X, r24
     cc6:	a2 e3       	ldi	r26, 0x32	; 50
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e2 e3       	ldi	r30, 0x32	; 50
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	87 7f       	andi	r24, 0xF7	; 247
     cd2:	8c 93       	st	X, r24
	// read data
	byte = PINA ^ 0xff;
     cd4:	e9 e3       	ldi	r30, 0x39	; 57
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	80 95       	com	r24
     cdc:	8a 83       	std	Y+2, r24	; 0x02

	// handshake: set ndac, means i have completed/accepted the read
	release_bit(DDRD, PORTD, G_NDAC);
     cde:	a1 e3       	ldi	r26, 0x31	; 49
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e1 e3       	ldi	r30, 0x31	; 49
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8f 7d       	andi	r24, 0xDF	; 223
     cea:	8c 93       	st	X, r24
     cec:	a2 e3       	ldi	r26, 0x32	; 50
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e2 e3       	ldi	r30, 0x32	; 50
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	80 62       	ori	r24, 0x20	; 32
     cf8:	8c 93       	st	X, r24

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     cfa:	80 91 05 06 	lds	r24, 0x0605
     cfe:	88 2f       	mov	r24, r24
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	05 96       	adiw	r24, 0x05	; 5
     d04:	9c 83       	std	Y+4, r25	; 0x04
     d06:	8b 83       	std	Y+3, r24	; 0x03
     d08:	10 c0       	rjmp	.+32     	; 0xd2a <gpib_receive+0x148>
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     d0a:	80 91 05 06 	lds	r24, 0x0605
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	28 17       	cp	r18, r24
     d18:	39 07       	cpc	r19, r25
     d1a:	39 f4       	brne	.+14     	; 0xd2a <gpib_receive+0x148>
			uart_puts("\n\rError: DAV timeout (2)\n\r");
     d1c:	8b e7       	ldi	r24, 0x7B	; 123
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
			return 0xff;
     d24:	8f ef       	ldi	r24, 0xFF	; 255
     d26:	8f 83       	std	Y+7, r24	; 0x07
     d28:	39 c0       	rjmp	.+114    	; 0xd9c <gpib_receive+0x1ba>
	release_bit(DDRD, PORTD, G_NDAC);

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
     d2a:	e0 e3       	ldi	r30, 0x30	; 48
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	88 2f       	mov	r24, r24
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	84 70       	andi	r24, 0x04	; 4
     d36:	90 70       	andi	r25, 0x00	; 0
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	49 f4       	brne	.+18     	; 0xd4e <gpib_receive+0x16c>
     d3c:	80 91 05 06 	lds	r24, 0x0605
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	9c 81       	ldd	r25, Y+4	; 0x04
     d48:	82 17       	cp	r24, r18
     d4a:	93 07       	cpc	r25, r19
     d4c:	f4 f6       	brge	.-68     	; 0xd0a <gpib_receive+0x128>
	}
#else
	loop_until_bit_is_set(PIND,G_DAV);
#endif
	// handshake: clear ndac (this is a prerequisite for receive next byte)
	assign_bit(DDRD, PORTD, G_NDAC);
     d4e:	a2 e3       	ldi	r26, 0x32	; 50
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e2 e3       	ldi	r30, 0x32	; 50
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	8f 7d       	andi	r24, 0xDF	; 223
     d5a:	8c 93       	st	X, r24
     d5c:	a1 e3       	ldi	r26, 0x31	; 49
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e1 e3       	ldi	r30, 0x31	; 49
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	80 62       	ori	r24, 0x20	; 32
     d68:	8c 93       	st	X, r24
     d6a:	a2 e3       	ldi	r26, 0x32	; 50
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e2 e3       	ldi	r30, 0x32	; 50
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8f 7d       	andi	r24, 0xDF	; 223
     d76:	8c 93       	st	X, r24

	// check if last byte of transmission
	eoi = bit_is_clear(PIND, G_EOI);
     d78:	e0 e3       	ldi	r30, 0x30	; 48
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	88 2f       	mov	r24, r24
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	80 71       	andi	r24, 0x10	; 16
     d84:	90 70       	andi	r25, 0x00	; 0
     d86:	19 82       	std	Y+1, r1	; 0x01
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	11 f4       	brne	.+4      	; 0xd90 <gpib_receive+0x1ae>
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	89 83       	std	Y+1, r24	; 0x01

	*_byte = byte;
     d90:	ed 81       	ldd	r30, Y+5	; 0x05
     d92:	fe 81       	ldd	r31, Y+6	; 0x06
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	80 83       	st	Z, r24

	return eoi;
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	8f 83       	std	Y+7, r24	; 0x07
     d9c:	8f 81       	ldd	r24, Y+7	; 0x07
}
     d9e:	27 96       	adiw	r28, 0x07	; 7
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <gpib_controller_assign>:
 * You have to change the initialization of the partner array according to your environment.
 * The partners-array is used by gpib_serial_poll() for looping over all existing devices.
 * 
 * \param address the address to be used by the controller. Usually 0x00.
 */
void gpib_controller_assign(uchar address) {
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	0f 92       	push	r0
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	89 83       	std	Y+1, r24	; 0x01
	controller.myaddress = address;
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	80 93 98 04 	sts	0x0498, r24
	controller.talks = 0;
     dc2:	10 92 9b 04 	sts	0x049B, r1
	controller.partner.primary = ADDRESS_NOT_SET; // init default active partner
     dc6:	8f ef       	ldi	r24, 0xFF	; 255
     dc8:	80 93 99 04 	sts	0x0499, r24
	controller.partner.secondary = ADDRESS_NOT_SET;
     dcc:	8f ef       	ldi	r24, 0xFF	; 255
     dce:	80 93 9a 04 	sts	0x049A, r24
	controller.flavour = FLAVOUR_NONE;
     dd2:	10 92 9c 04 	sts	0x049C, r1
	/** clear list of partners */
	gpib_clear_partners();
     dd6:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <gpib_clear_partners>
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     dda:	a8 e3       	ldi	r26, 0x38	; 56
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e8 e3       	ldi	r30, 0x38	; 56
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	8e 7f       	andi	r24, 0xFE	; 254
     de6:	8c 93       	st	X, r24
     de8:	a7 e3       	ldi	r26, 0x37	; 55
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e7 e3       	ldi	r30, 0x37	; 55
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	81 60       	ori	r24, 0x01	; 1
     df4:	8c 93       	st	X, r24
     df6:	a8 e3       	ldi	r26, 0x38	; 56
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e8 e3       	ldi	r30, 0x38	; 56
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	8e 7f       	andi	r24, 0xFE	; 254
     e02:	8c 93       	st	X, r24
	delay_ms(200);
     e04:	88 ec       	ldi	r24, 0xC8	; 200
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 ae 04 	call	0x95c	; 0x95c <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     e0c:	a7 e3       	ldi	r26, 0x37	; 55
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e7 e3       	ldi	r30, 0x37	; 55
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	8e 7f       	andi	r24, 0xFE	; 254
     e18:	8c 93       	st	X, r24
     e1a:	a8 e3       	ldi	r26, 0x38	; 56
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e8 e3       	ldi	r30, 0x38	; 56
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	81 60       	ori	r24, 0x01	; 1
     e26:	8c 93       	st	X, r24
	// set up all devices for remote control
	assign_bit(DDRB, PORTB, G_REN);
     e28:	a8 e3       	ldi	r26, 0x38	; 56
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e8 e3       	ldi	r30, 0x38	; 56
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	8d 7f       	andi	r24, 0xFD	; 253
     e34:	8c 93       	st	X, r24
     e36:	a7 e3       	ldi	r26, 0x37	; 55
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e3       	ldi	r30, 0x37	; 55
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	82 60       	ori	r24, 0x02	; 2
     e42:	8c 93       	st	X, r24
     e44:	a8 e3       	ldi	r26, 0x38	; 56
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e8 e3       	ldi	r30, 0x38	; 56
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8d 7f       	andi	r24, 0xFD	; 253
     e50:	8c 93       	st	X, r24

	// DCL - device clear for all devices on bus
	cmd_buf[0] = G_CMD_DCL;
     e52:	84 e1       	ldi	r24, 0x14	; 20
     e54:	80 93 50 05 	sts	0x0550, r24
	gpib_cmd(cmd_buf, 1);
     e58:	80 e5       	ldi	r24, 0x50	; 80
     e5a:	95 e0       	ldi	r25, 0x05	; 5
     e5c:	61 e0       	ldi	r22, 0x01	; 1
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	0e 94 72 07 	call	0xee4	; 0xee4 <gpib_cmd>
}
     e64:	0f 90       	pop	r0
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <gpib_controller_release>:

/**
 * Release bus 
 */
void gpib_controller_release(void) {
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     e74:	a8 e3       	ldi	r26, 0x38	; 56
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e8 e3       	ldi	r30, 0x38	; 56
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8e 7f       	andi	r24, 0xFE	; 254
     e80:	8c 93       	st	X, r24
     e82:	a7 e3       	ldi	r26, 0x37	; 55
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e7 e3       	ldi	r30, 0x37	; 55
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	81 60       	ori	r24, 0x01	; 1
     e8e:	8c 93       	st	X, r24
     e90:	a8 e3       	ldi	r26, 0x38	; 56
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e8 e3       	ldi	r30, 0x38	; 56
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8e 7f       	andi	r24, 0xFE	; 254
     e9c:	8c 93       	st	X, r24
	delay_ms(200);
     e9e:	88 ec       	ldi	r24, 0xC8	; 200
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 ae 04 	call	0x95c	; 0x95c <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     ea6:	a7 e3       	ldi	r26, 0x37	; 55
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e7 e3       	ldi	r30, 0x37	; 55
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8e 7f       	andi	r24, 0xFE	; 254
     eb2:	8c 93       	st	X, r24
     eb4:	a8 e3       	ldi	r26, 0x38	; 56
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e8 e3       	ldi	r30, 0x38	; 56
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	81 60       	ori	r24, 0x01	; 1
     ec0:	8c 93       	st	X, r24
	// set up all devices for local control
	release_bit(DDRB, PORTB, G_REN);
     ec2:	a7 e3       	ldi	r26, 0x37	; 55
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e7 e3       	ldi	r30, 0x37	; 55
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	8d 7f       	andi	r24, 0xFD	; 253
     ece:	8c 93       	st	X, r24
     ed0:	a8 e3       	ldi	r26, 0x38	; 56
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e8 e3       	ldi	r30, 0x38	; 56
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	82 60       	ori	r24, 0x02	; 2
     edc:	8c 93       	st	X, r24
}
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <gpib_cmd>:
 * \param bytes byte array containing bytes to be send
 * \param length length of valid bytes in byte array or zero.
 * for binary data, lenght must be defined. For strings, length can be set to zero. Then the length of
 * the string is calculated internally.
 */
uchar gpib_cmd(uchar *bytes, int length) {
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	2b 97       	sbiw	r28, 0x0b	; 11
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	9f 83       	std	Y+7, r25	; 0x07
     efa:	8e 83       	std	Y+6, r24	; 0x06
     efc:	79 87       	std	Y+9, r23	; 0x09
     efe:	68 87       	std	Y+8, r22	; 0x08
	uchar c;
	int i;
	// set attention arg true for commands
	uchar attention = 1;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	8a 83       	std	Y+2, r24	; 0x02

	gpib_write_prologue(attention);
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	0e 94 ce 07 	call	0xf9c	; 0xf9c <gpib_write_prologue>

	if (length == 0) {
     f0a:	88 85       	ldd	r24, Y+8	; 0x08
     f0c:	99 85       	ldd	r25, Y+9	; 0x09
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	31 f4       	brne	.+12     	; 0xf1e <gpib_cmd+0x3a>
		// length==0 means this is a common C string, null-terminated.
		// then, length can be easily calculated
		length = strlen((char*) bytes);
     f12:	8e 81       	ldd	r24, Y+6	; 0x06
     f14:	9f 81       	ldd	r25, Y+7	; 0x07
     f16:	0e 94 bc 01 	call	0x378	; 0x378 <strlen>
     f1a:	99 87       	std	Y+9, r25	; 0x09
     f1c:	88 87       	std	Y+8, r24	; 0x08
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif

	for (i = 0; i < length; i++) {
     f1e:	1c 82       	std	Y+4, r1	; 0x04
     f20:	1b 82       	std	Y+3, r1	; 0x03
     f22:	28 c0       	rjmp	.+80     	; 0xf74 <gpib_cmd+0x90>
		// put data on bus
		c = bytes[i];
     f24:	2b 81       	ldd	r18, Y+3	; 0x03
     f26:	3c 81       	ldd	r19, Y+4	; 0x04
     f28:	8e 81       	ldd	r24, Y+6	; 0x06
     f2a:	9f 81       	ldd	r25, Y+7	; 0x07
     f2c:	fc 01       	movw	r30, r24
     f2e:	e2 0f       	add	r30, r18
     f30:	f3 1f       	adc	r31, r19
     f32:	80 81       	ld	r24, Z
     f34:	8d 83       	std	Y+5, r24	; 0x05
		//sprintf( buf, "char: %c\n\r", c );
		//uart_puts(buf);

		uchar isLastByte = (i == length - 1) && !attention;
     f36:	88 85       	ldd	r24, Y+8	; 0x08
     f38:	99 85       	ldd	r25, Y+9	; 0x09
     f3a:	9c 01       	movw	r18, r24
     f3c:	21 50       	subi	r18, 0x01	; 1
     f3e:	30 40       	sbci	r19, 0x00	; 0
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	9c 81       	ldd	r25, Y+4	; 0x04
     f44:	28 17       	cp	r18, r24
     f46:	39 07       	cpc	r19, r25
     f48:	41 f4       	brne	.+16     	; 0xf5a <gpib_cmd+0x76>
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	88 23       	and	r24, r24
     f4e:	29 f4       	brne	.+10     	; 0xf5a <gpib_cmd+0x76>
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	9b 87       	std	Y+11, r25	; 0x0b
     f56:	8a 87       	std	Y+10, r24	; 0x0a
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <gpib_cmd+0x7a>
     f5a:	1b 86       	std	Y+11, r1	; 0x0b
     f5c:	1a 86       	std	Y+10, r1	; 0x0a
     f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f60:	99 83       	std	Y+1, r25	; 0x01
		gpib_write_byte(c, isLastByte);
     f62:	8d 81       	ldd	r24, Y+5	; 0x05
     f64:	69 81       	ldd	r22, Y+1	; 0x01
     f66:	0e 94 87 08 	call	0x110e	; 0x110e <gpib_write_byte>
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif

	for (i = 0; i < length; i++) {
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	9c 83       	std	Y+4, r25	; 0x04
     f72:	8b 83       	std	Y+3, r24	; 0x03
     f74:	2b 81       	ldd	r18, Y+3	; 0x03
     f76:	3c 81       	ldd	r19, Y+4	; 0x04
     f78:	88 85       	ldd	r24, Y+8	; 0x08
     f7a:	99 85       	ldd	r25, Y+9	; 0x09
     f7c:	28 17       	cp	r18, r24
     f7e:	39 07       	cpc	r19, r25
     f80:	8c f2       	brlt	.-94     	; 0xf24 <gpib_cmd+0x40>

		uchar isLastByte = (i == length - 1) && !attention;
		gpib_write_byte(c, isLastByte);
	}

	gpib_write_epilogue(attention);
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	0e 94 1d 08 	call	0x103a	; 0x103a <gpib_write_epilogue>

	return 0x00;
     f88:	80 e0       	ldi	r24, 0x00	; 0
}
     f8a:	2b 96       	adiw	r28, 0x0b	; 11
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <gpib_write_prologue>:

/**
 * Emits prologue before writing to a listener.
 *
 */
void gpib_write_prologue(uchar attention) {
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	0f 92       	push	r0
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	89 83       	std	Y+1, r24	; 0x01
	// set talks state. This is used by ISR to recognize own talk
	// (controller must not talk to itself and must not take part in listener handshake when talking)
	controller.talks = 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	80 93 9b 04 	sts	0x049B, r24
	if (attention) {
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	88 23       	and	r24, r24
     fb2:	a9 f0       	breq	.+42     	; 0xfde <gpib_write_prologue+0x42>
		//uart_puts("\n\rgpib_controller_write()\n\r");
		// assign ATN for commands
		assign_bit(DDRD, PORTD, G_ATN);
     fb4:	a2 e3       	ldi	r26, 0x32	; 50
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e2 e3       	ldi	r30, 0x32	; 50
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	8f 77       	andi	r24, 0x7F	; 127
     fc0:	8c 93       	st	X, r24
     fc2:	a1 e3       	ldi	r26, 0x31	; 49
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e1 e3       	ldi	r30, 0x31	; 49
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	80 68       	ori	r24, 0x80	; 128
     fce:	8c 93       	st	X, r24
     fd0:	a2 e3       	ldi	r26, 0x32	; 50
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e2 e3       	ldi	r30, 0x32	; 50
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8f 77       	andi	r24, 0x7F	; 127
     fdc:	8c 93       	st	X, r24
	}
	// release EOI during transmission
	release_bit(DDRD, PORTD, G_EOI);
     fde:	a1 e3       	ldi	r26, 0x31	; 49
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e1 e3       	ldi	r30, 0x31	; 49
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8f 7e       	andi	r24, 0xEF	; 239
     fea:	8c 93       	st	X, r24
     fec:	a2 e3       	ldi	r26, 0x32	; 50
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e2 e3       	ldi	r30, 0x32	; 50
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	80 61       	ori	r24, 0x10	; 16
     ff8:	8c 93       	st	X, r24
	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
     ffa:	a1 e3       	ldi	r26, 0x31	; 49
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e1 e3       	ldi	r30, 0x31	; 49
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	8b 7f       	andi	r24, 0xFB	; 251
    1006:	8c 93       	st	X, r24
    1008:	a2 e3       	ldi	r26, 0x32	; 50
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e2 e3       	ldi	r30, 0x32	; 50
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	84 60       	ori	r24, 0x04	; 4
    1014:	8c 93       	st	X, r24
	// release NRFD (just to be sure)
	release_bit(DDRD, PORTD, G_NRFD);
    1016:	a1 e3       	ldi	r26, 0x31	; 49
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e1 e3       	ldi	r30, 0x31	; 49
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	87 7f       	andi	r24, 0xF7	; 247
    1022:	8c 93       	st	X, r24
    1024:	a2 e3       	ldi	r26, 0x32	; 50
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e2 e3       	ldi	r30, 0x32	; 50
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	88 60       	ori	r24, 0x08	; 8
    1030:	8c 93       	st	X, r24
}
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <gpib_write_epilogue>:

/**
 * Emits epilogue after writing to a listener.
 *
 */
void gpib_write_epilogue(uchar attention) {
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	0f 92       	push	r0
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	89 83       	std	Y+1, r24	; 0x01
	if (attention) {
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	88 23       	and	r24, r24
    104a:	71 f0       	breq	.+28     	; 0x1068 <gpib_write_epilogue+0x2e>
		// assign ATN for commands
		release_bit(DDRD, PORTD, G_ATN);
    104c:	a1 e3       	ldi	r26, 0x31	; 49
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e1 e3       	ldi	r30, 0x31	; 49
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	8f 77       	andi	r24, 0x7F	; 127
    1058:	8c 93       	st	X, r24
    105a:	a2 e3       	ldi	r26, 0x32	; 50
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e2 e3       	ldi	r30, 0x32	; 50
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	80 68       	ori	r24, 0x80	; 128
    1066:	8c 93       	st	X, r24
	}
	// clear talk state.Controller does not talk anymore.
	controller.talks = 0;
    1068:	10 92 9b 04 	sts	0x049B, r1
}
    106c:	0f 90       	pop	r0
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <gpib_write_command>:
 * - prefix with GPIB write prologue
 * - the string
 * - postfix with GPIB epilogue
 * - postfix that untalks/unlistens all partners
 */
void gpib_write_command(uchar *s) {
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <gpib_write_command+0x6>
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	9a 83       	std	Y+2, r25	; 0x02
    1080:	89 83       	std	Y+1, r24	; 0x01
	gpib_prepare_write();
    1082:	0e 94 64 05 	call	0xac8	; 0xac8 <gpib_prepare_write>
	gpib_write_prologue(0);
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	0e 94 ce 07 	call	0xf9c	; 0xf9c <gpib_write_prologue>
	gpib_write_string(s);
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	0e 94 58 08 	call	0x10b0	; 0x10b0 <gpib_write_string>
	gpib_write_byte(ASCII_CODE_CR, 1);
    1094:	8d e0       	ldi	r24, 0x0D	; 13
    1096:	61 e0       	ldi	r22, 0x01	; 1
    1098:	0e 94 87 08 	call	0x110e	; 0x110e <gpib_write_byte>
	gpib_write_epilogue(0);
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	0e 94 1d 08 	call	0x103a	; 0x103a <gpib_write_epilogue>
	gpib_untalkUnlisten();
    10a2:	0e 94 ce 05 	call	0xb9c	; 0xb9c <gpib_untalkUnlisten>
}
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <gpib_write_string>:

/**
 * Write string. Only the raw string is written, no prefix and no postfix.
 */
void gpib_write_string(uchar *s) {
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <gpib_write_string+0xa>
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <gpib_write_string+0xc>
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	9c 83       	std	Y+4, r25	; 0x04
    10c2:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < strlen(s); i++) {
    10c4:	1a 82       	std	Y+2, r1	; 0x02
    10c6:	19 82       	std	Y+1, r1	; 0x01
    10c8:	10 c0       	rjmp	.+32     	; 0x10ea <gpib_write_string+0x3a>
		gpib_write_byte(s[i], 0);
    10ca:	29 81       	ldd	r18, Y+1	; 0x01
    10cc:	3a 81       	ldd	r19, Y+2	; 0x02
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	9c 81       	ldd	r25, Y+4	; 0x04
    10d2:	fc 01       	movw	r30, r24
    10d4:	e2 0f       	add	r30, r18
    10d6:	f3 1f       	adc	r31, r19
    10d8:	80 81       	ld	r24, Z
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	0e 94 87 08 	call	0x110e	; 0x110e <gpib_write_byte>

/**
 * Write string. Only the raw string is written, no prefix and no postfix.
 */
void gpib_write_string(uchar *s) {
	for (int i = 0; i < strlen(s); i++) {
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	9a 81       	ldd	r25, Y+2	; 0x02
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	9a 83       	std	Y+2, r25	; 0x02
    10e8:	89 83       	std	Y+1, r24	; 0x01
    10ea:	09 81       	ldd	r16, Y+1	; 0x01
    10ec:	1a 81       	ldd	r17, Y+2	; 0x02
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	9c 81       	ldd	r25, Y+4	; 0x04
    10f2:	0e 94 bc 01 	call	0x378	; 0x378 <strlen>
    10f6:	08 17       	cp	r16, r24
    10f8:	19 07       	cpc	r17, r25
    10fa:	38 f3       	brcs	.-50     	; 0x10ca <gpib_write_string+0x1a>
		gpib_write_byte(s[i], 0);
	}
}
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	08 95       	ret

0000110e <gpib_write_byte>:

/**
 * Emits single byte to GPIB port pins.
 */
uchar gpib_write_byte(uchar c, uchar isLastByte) {
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	00 d0       	rcall	.+0      	; 0x1114 <gpib_write_byte+0x6>
    1114:	00 d0       	rcall	.+0      	; 0x1116 <gpib_write_byte+0x8>
    1116:	0f 92       	push	r0
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	8b 83       	std	Y+3, r24	; 0x03
    111e:	6c 83       	std	Y+4, r22	; 0x04
	int timeout;

	// wait for NDAC assign from all listeners
	release_bit(DDRD, PORTD, G_NDAC);
    1120:	a1 e3       	ldi	r26, 0x31	; 49
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e1 e3       	ldi	r30, 0x31	; 49
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	8f 7d       	andi	r24, 0xDF	; 223
    112c:	8c 93       	st	X, r24
    112e:	a2 e3       	ldi	r26, 0x32	; 50
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e2 e3       	ldi	r30, 0x32	; 50
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	80 62       	ori	r24, 0x20	; 32
    113a:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
	timeout = s + 5;
    113c:	80 91 05 06 	lds	r24, 0x0605
    1140:	88 2f       	mov	r24, r24
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	05 96       	adiw	r24, 0x05	; 5
    1146:	9a 83       	std	Y+2, r25	; 0x02
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	10 c0       	rjmp	.+32     	; 0x116c <gpib_write_byte+0x5e>
	//gpib_info();
	while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
		if (s == timeout) {
    114c:	80 91 05 06 	lds	r24, 0x0605
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	9a 81       	ldd	r25, Y+2	; 0x02
    1158:	28 17       	cp	r18, r24
    115a:	39 07       	cpc	r19, r25
    115c:	39 f4       	brne	.+14     	; 0x116c <gpib_write_byte+0x5e>
			uart_puts("\n\rError: NDAC timeout\n\r");
    115e:	86 e9       	ldi	r24, 0x96	; 150
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
			return 0xff;
    1166:	8f ef       	ldi	r24, 0xFF	; 255
    1168:	8d 83       	std	Y+5, r24	; 0x05
    116a:	f7 c1       	rjmp	.+1006   	; 0x155a <gpib_write_byte+0x44c>
	// wait for NDAC assign from all listeners
	release_bit(DDRD, PORTD, G_NDAC);
#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
    116c:	e0 e3       	ldi	r30, 0x30	; 48
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	80 72       	andi	r24, 0x20	; 32
    1178:	90 70       	andi	r25, 0x00	; 0
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	49 f0       	breq	.+18     	; 0x1190 <gpib_write_byte+0x82>
    117e:	80 91 05 06 	lds	r24, 0x0605
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	82 17       	cp	r24, r18
    118c:	93 07       	cpc	r25, r19
    118e:	f4 f6       	brge	.-68     	; 0x114c <gpib_write_byte+0x3e>
	}
#else
	loop_until_bit_is_clear(PIND,G_NDAC);
#endif

	DDRA = 0x00;
    1190:	ea e3       	ldi	r30, 0x3A	; 58
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	10 82       	st	Z, r1
	if (c & 0x01) {
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	88 2f       	mov	r24, r24
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	81 70       	andi	r24, 0x01	; 1
    119e:	90 70       	andi	r25, 0x00	; 0
    11a0:	88 23       	and	r24, r24
    11a2:	b1 f0       	breq	.+44     	; 0x11d0 <gpib_write_byte+0xc2>
		assign_bit(DDRA, PORTA, PA0);
    11a4:	ab e3       	ldi	r26, 0x3B	; 59
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	eb e3       	ldi	r30, 0x3B	; 59
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	8e 7f       	andi	r24, 0xFE	; 254
    11b0:	8c 93       	st	X, r24
    11b2:	aa e3       	ldi	r26, 0x3A	; 58
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	ea e3       	ldi	r30, 0x3A	; 58
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	81 60       	ori	r24, 0x01	; 1
    11be:	8c 93       	st	X, r24
    11c0:	ab e3       	ldi	r26, 0x3B	; 59
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	eb e3       	ldi	r30, 0x3B	; 59
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	8e 7f       	andi	r24, 0xFE	; 254
    11cc:	8c 93       	st	X, r24
    11ce:	0e c0       	rjmp	.+28     	; 0x11ec <gpib_write_byte+0xde>
	} else {
		release_bit(DDRA, PORTA, PA0)
    11d0:	aa e3       	ldi	r26, 0x3A	; 58
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	ea e3       	ldi	r30, 0x3A	; 58
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	8e 7f       	andi	r24, 0xFE	; 254
    11dc:	8c 93       	st	X, r24
    11de:	ab e3       	ldi	r26, 0x3B	; 59
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	eb e3       	ldi	r30, 0x3B	; 59
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	81 60       	ori	r24, 0x01	; 1
    11ea:	8c 93       	st	X, r24
	}
	if (c & 0x02) {
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	88 2f       	mov	r24, r24
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	82 70       	andi	r24, 0x02	; 2
    11f4:	90 70       	andi	r25, 0x00	; 0
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	b1 f0       	breq	.+44     	; 0x1226 <gpib_write_byte+0x118>
		assign_bit(DDRA, PORTA, PA1)
    11fa:	ab e3       	ldi	r26, 0x3B	; 59
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	eb e3       	ldi	r30, 0x3B	; 59
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	8d 7f       	andi	r24, 0xFD	; 253
    1206:	8c 93       	st	X, r24
    1208:	aa e3       	ldi	r26, 0x3A	; 58
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	ea e3       	ldi	r30, 0x3A	; 58
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	82 60       	ori	r24, 0x02	; 2
    1214:	8c 93       	st	X, r24
    1216:	ab e3       	ldi	r26, 0x3B	; 59
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	eb e3       	ldi	r30, 0x3B	; 59
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	8d 7f       	andi	r24, 0xFD	; 253
    1222:	8c 93       	st	X, r24
    1224:	0e c0       	rjmp	.+28     	; 0x1242 <gpib_write_byte+0x134>
	} else {
		release_bit(DDRA, PORTA, PA1);
    1226:	aa e3       	ldi	r26, 0x3A	; 58
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	ea e3       	ldi	r30, 0x3A	; 58
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	8d 7f       	andi	r24, 0xFD	; 253
    1232:	8c 93       	st	X, r24
    1234:	ab e3       	ldi	r26, 0x3B	; 59
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	eb e3       	ldi	r30, 0x3B	; 59
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	82 60       	ori	r24, 0x02	; 2
    1240:	8c 93       	st	X, r24
	}
	if (c & 0x04) {
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	88 2f       	mov	r24, r24
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	84 70       	andi	r24, 0x04	; 4
    124a:	90 70       	andi	r25, 0x00	; 0
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	b1 f0       	breq	.+44     	; 0x127c <gpib_write_byte+0x16e>
		assign_bit(DDRA, PORTA, PA2);
    1250:	ab e3       	ldi	r26, 0x3B	; 59
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	eb e3       	ldi	r30, 0x3B	; 59
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	8b 7f       	andi	r24, 0xFB	; 251
    125c:	8c 93       	st	X, r24
    125e:	aa e3       	ldi	r26, 0x3A	; 58
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	ea e3       	ldi	r30, 0x3A	; 58
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	84 60       	ori	r24, 0x04	; 4
    126a:	8c 93       	st	X, r24
    126c:	ab e3       	ldi	r26, 0x3B	; 59
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	eb e3       	ldi	r30, 0x3B	; 59
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	8b 7f       	andi	r24, 0xFB	; 251
    1278:	8c 93       	st	X, r24
    127a:	0e c0       	rjmp	.+28     	; 0x1298 <gpib_write_byte+0x18a>
	} else {
		release_bit(DDRA, PORTA, PA2);
    127c:	aa e3       	ldi	r26, 0x3A	; 58
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	ea e3       	ldi	r30, 0x3A	; 58
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	8b 7f       	andi	r24, 0xFB	; 251
    1288:	8c 93       	st	X, r24
    128a:	ab e3       	ldi	r26, 0x3B	; 59
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	eb e3       	ldi	r30, 0x3B	; 59
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	84 60       	ori	r24, 0x04	; 4
    1296:	8c 93       	st	X, r24
	}
	if (c & 0x08) {
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	88 70       	andi	r24, 0x08	; 8
    12a0:	90 70       	andi	r25, 0x00	; 0
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	b1 f0       	breq	.+44     	; 0x12d2 <gpib_write_byte+0x1c4>
		assign_bit(DDRA, PORTA, PA3);
    12a6:	ab e3       	ldi	r26, 0x3B	; 59
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	eb e3       	ldi	r30, 0x3B	; 59
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	87 7f       	andi	r24, 0xF7	; 247
    12b2:	8c 93       	st	X, r24
    12b4:	aa e3       	ldi	r26, 0x3A	; 58
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	ea e3       	ldi	r30, 0x3A	; 58
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	88 60       	ori	r24, 0x08	; 8
    12c0:	8c 93       	st	X, r24
    12c2:	ab e3       	ldi	r26, 0x3B	; 59
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	eb e3       	ldi	r30, 0x3B	; 59
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	87 7f       	andi	r24, 0xF7	; 247
    12ce:	8c 93       	st	X, r24
    12d0:	0e c0       	rjmp	.+28     	; 0x12ee <gpib_write_byte+0x1e0>
	} else {
		release_bit(DDRA, PORTA, PA3);
    12d2:	aa e3       	ldi	r26, 0x3A	; 58
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	ea e3       	ldi	r30, 0x3A	; 58
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	87 7f       	andi	r24, 0xF7	; 247
    12de:	8c 93       	st	X, r24
    12e0:	ab e3       	ldi	r26, 0x3B	; 59
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	eb e3       	ldi	r30, 0x3B	; 59
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	88 60       	ori	r24, 0x08	; 8
    12ec:	8c 93       	st	X, r24
	}
	if (c & 0x10) {
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	88 2f       	mov	r24, r24
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	80 71       	andi	r24, 0x10	; 16
    12f6:	90 70       	andi	r25, 0x00	; 0
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	b1 f0       	breq	.+44     	; 0x1328 <gpib_write_byte+0x21a>
		assign_bit(DDRA, PORTA, PA4);
    12fc:	ab e3       	ldi	r26, 0x3B	; 59
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	eb e3       	ldi	r30, 0x3B	; 59
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	8f 7e       	andi	r24, 0xEF	; 239
    1308:	8c 93       	st	X, r24
    130a:	aa e3       	ldi	r26, 0x3A	; 58
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ea e3       	ldi	r30, 0x3A	; 58
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	80 61       	ori	r24, 0x10	; 16
    1316:	8c 93       	st	X, r24
    1318:	ab e3       	ldi	r26, 0x3B	; 59
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	eb e3       	ldi	r30, 0x3B	; 59
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	8f 7e       	andi	r24, 0xEF	; 239
    1324:	8c 93       	st	X, r24
    1326:	0e c0       	rjmp	.+28     	; 0x1344 <gpib_write_byte+0x236>
	} else {
		release_bit(DDRA, PORTA, PA4);
    1328:	aa e3       	ldi	r26, 0x3A	; 58
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	ea e3       	ldi	r30, 0x3A	; 58
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	8f 7e       	andi	r24, 0xEF	; 239
    1334:	8c 93       	st	X, r24
    1336:	ab e3       	ldi	r26, 0x3B	; 59
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	eb e3       	ldi	r30, 0x3B	; 59
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	80 61       	ori	r24, 0x10	; 16
    1342:	8c 93       	st	X, r24
	}
	if (c & 0x20) {
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	80 72       	andi	r24, 0x20	; 32
    134c:	90 70       	andi	r25, 0x00	; 0
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	b1 f0       	breq	.+44     	; 0x137e <gpib_write_byte+0x270>
		assign_bit(DDRA, PORTA, PA5);
    1352:	ab e3       	ldi	r26, 0x3B	; 59
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	eb e3       	ldi	r30, 0x3B	; 59
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	8f 7d       	andi	r24, 0xDF	; 223
    135e:	8c 93       	st	X, r24
    1360:	aa e3       	ldi	r26, 0x3A	; 58
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	ea e3       	ldi	r30, 0x3A	; 58
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	80 62       	ori	r24, 0x20	; 32
    136c:	8c 93       	st	X, r24
    136e:	ab e3       	ldi	r26, 0x3B	; 59
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	eb e3       	ldi	r30, 0x3B	; 59
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	8f 7d       	andi	r24, 0xDF	; 223
    137a:	8c 93       	st	X, r24
    137c:	0e c0       	rjmp	.+28     	; 0x139a <gpib_write_byte+0x28c>
	} else {
		release_bit(DDRA, PORTA, PA5);
    137e:	aa e3       	ldi	r26, 0x3A	; 58
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	ea e3       	ldi	r30, 0x3A	; 58
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	8f 7d       	andi	r24, 0xDF	; 223
    138a:	8c 93       	st	X, r24
    138c:	ab e3       	ldi	r26, 0x3B	; 59
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	eb e3       	ldi	r30, 0x3B	; 59
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	80 62       	ori	r24, 0x20	; 32
    1398:	8c 93       	st	X, r24
	}
	if (c & 0x40) {
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	88 2f       	mov	r24, r24
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	80 74       	andi	r24, 0x40	; 64
    13a2:	90 70       	andi	r25, 0x00	; 0
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	b1 f0       	breq	.+44     	; 0x13d4 <gpib_write_byte+0x2c6>
		assign_bit(DDRA, PORTA, PA6);
    13a8:	ab e3       	ldi	r26, 0x3B	; 59
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	eb e3       	ldi	r30, 0x3B	; 59
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	8f 7b       	andi	r24, 0xBF	; 191
    13b4:	8c 93       	st	X, r24
    13b6:	aa e3       	ldi	r26, 0x3A	; 58
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	ea e3       	ldi	r30, 0x3A	; 58
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	80 64       	ori	r24, 0x40	; 64
    13c2:	8c 93       	st	X, r24
    13c4:	ab e3       	ldi	r26, 0x3B	; 59
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	eb e3       	ldi	r30, 0x3B	; 59
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	8f 7b       	andi	r24, 0xBF	; 191
    13d0:	8c 93       	st	X, r24
    13d2:	0e c0       	rjmp	.+28     	; 0x13f0 <gpib_write_byte+0x2e2>
	} else {
		release_bit(DDRA, PORTA, PA6);
    13d4:	aa e3       	ldi	r26, 0x3A	; 58
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	ea e3       	ldi	r30, 0x3A	; 58
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	8f 7b       	andi	r24, 0xBF	; 191
    13e0:	8c 93       	st	X, r24
    13e2:	ab e3       	ldi	r26, 0x3B	; 59
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	eb e3       	ldi	r30, 0x3B	; 59
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	80 64       	ori	r24, 0x40	; 64
    13ee:	8c 93       	st	X, r24
	}
	if (c & 0x80) {
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	88 23       	and	r24, r24
    13f4:	b4 f4       	brge	.+44     	; 0x1422 <gpib_write_byte+0x314>
		assign_bit(DDRA, PORTA, PA7);
    13f6:	ab e3       	ldi	r26, 0x3B	; 59
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	eb e3       	ldi	r30, 0x3B	; 59
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	8f 77       	andi	r24, 0x7F	; 127
    1402:	8c 93       	st	X, r24
    1404:	aa e3       	ldi	r26, 0x3A	; 58
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	ea e3       	ldi	r30, 0x3A	; 58
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	80 68       	ori	r24, 0x80	; 128
    1410:	8c 93       	st	X, r24
    1412:	ab e3       	ldi	r26, 0x3B	; 59
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	eb e3       	ldi	r30, 0x3B	; 59
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	8f 77       	andi	r24, 0x7F	; 127
    141e:	8c 93       	st	X, r24
    1420:	0e c0       	rjmp	.+28     	; 0x143e <gpib_write_byte+0x330>
	} else {
		release_bit(DDRA, PORTA, PA7);
    1422:	aa e3       	ldi	r26, 0x3A	; 58
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	ea e3       	ldi	r30, 0x3A	; 58
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	8f 77       	andi	r24, 0x7F	; 127
    142e:	8c 93       	st	X, r24
    1430:	ab e3       	ldi	r26, 0x3B	; 59
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	eb e3       	ldi	r30, 0x3B	; 59
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	80 68       	ori	r24, 0x80	; 128
    143c:	8c 93       	st	X, r24
	}

	// wait until listeners release NRFD
	//uart_puts("1");
	release_bit(DDRD, PORTD, G_NRFD);
    143e:	a1 e3       	ldi	r26, 0x31	; 49
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e1 e3       	ldi	r30, 0x31	; 49
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	87 7f       	andi	r24, 0xF7	; 247
    144a:	8c 93       	st	X, r24
    144c:	a2 e3       	ldi	r26, 0x32	; 50
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e2 e3       	ldi	r30, 0x32	; 50
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	88 60       	ori	r24, 0x08	; 8
    1458:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
	//gpib_info();
	timeout = s + 5;
    145a:	80 91 05 06 	lds	r24, 0x0605
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	05 96       	adiw	r24, 0x05	; 5
    1464:	9a 83       	std	Y+2, r25	; 0x02
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	10 c0       	rjmp	.+32     	; 0x148a <gpib_write_byte+0x37c>
	while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
		if (s == timeout) {
    146a:	80 91 05 06 	lds	r24, 0x0605
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	28 17       	cp	r18, r24
    1478:	39 07       	cpc	r19, r25
    147a:	39 f4       	brne	.+14     	; 0x148a <gpib_write_byte+0x37c>
			uart_puts("\n\rError: NRFD timeout\n\r");
    147c:	8e ea       	ldi	r24, 0xAE	; 174
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
			return 0xff;
    1484:	8f ef       	ldi	r24, 0xFF	; 255
    1486:	8d 83       	std	Y+5, r24	; 0x05
    1488:	68 c0       	rjmp	.+208    	; 0x155a <gpib_write_byte+0x44c>
	//uart_puts("1");
	release_bit(DDRD, PORTD, G_NRFD);
#ifdef WITH_TIMEOUT
	//gpib_info();
	timeout = s + 5;
	while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
    148a:	e0 e3       	ldi	r30, 0x30	; 48
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	88 2f       	mov	r24, r24
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	88 70       	andi	r24, 0x08	; 8
    1496:	90 70       	andi	r25, 0x00	; 0
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	49 f4       	brne	.+18     	; 0x14ae <gpib_write_byte+0x3a0>
    149c:	80 91 05 06 	lds	r24, 0x0605
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	9a 81       	ldd	r25, Y+2	; 0x02
    14a8:	82 17       	cp	r24, r18
    14aa:	93 07       	cpc	r25, r19
    14ac:	f4 f6       	brge	.-68     	; 0x146a <gpib_write_byte+0x35c>
#else
	loop_until_bit_is_set(PIND,G_NRFD);
#endif

	// assign EOI during transmission of only last byte
	if (isLastByte) {
    14ae:	8c 81       	ldd	r24, Y+4	; 0x04
    14b0:	88 23       	and	r24, r24
    14b2:	a9 f0       	breq	.+42     	; 0x14de <gpib_write_byte+0x3d0>
		//uart_puts("\n\rE\n\r");
		assign_bit(DDRD, PORTD, G_EOI);
    14b4:	a2 e3       	ldi	r26, 0x32	; 50
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e2 e3       	ldi	r30, 0x32	; 50
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	8f 7e       	andi	r24, 0xEF	; 239
    14c0:	8c 93       	st	X, r24
    14c2:	a1 e3       	ldi	r26, 0x31	; 49
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e1 e3       	ldi	r30, 0x31	; 49
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	80 61       	ori	r24, 0x10	; 16
    14ce:	8c 93       	st	X, r24
    14d0:	a2 e3       	ldi	r26, 0x32	; 50
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e2 e3       	ldi	r30, 0x32	; 50
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	8f 7e       	andi	r24, 0xEF	; 239
    14dc:	8c 93       	st	X, r24
	}

	// assign DAV, data valid for listeners
	assign_bit(DDRD, PORTD, G_DAV);
    14de:	a2 e3       	ldi	r26, 0x32	; 50
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e2 e3       	ldi	r30, 0x32	; 50
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	8b 7f       	andi	r24, 0xFB	; 251
    14ea:	8c 93       	st	X, r24
    14ec:	a1 e3       	ldi	r26, 0x31	; 49
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e1 e3       	ldi	r30, 0x31	; 49
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	84 60       	ori	r24, 0x04	; 4
    14f8:	8c 93       	st	X, r24
    14fa:	a2 e3       	ldi	r26, 0x32	; 50
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e2 e3       	ldi	r30, 0x32	; 50
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	8b 7f       	andi	r24, 0xFB	; 251
    1506:	8c 93       	st	X, r24

	// wait for NDAC release
	//uart_puts("2");
	release_bit(DDRD, PORTD, G_NDAC);
    1508:	a1 e3       	ldi	r26, 0x31	; 49
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e1 e3       	ldi	r30, 0x31	; 49
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	8f 7d       	andi	r24, 0xDF	; 223
    1514:	8c 93       	st	X, r24
    1516:	a2 e3       	ldi	r26, 0x32	; 50
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e2 e3       	ldi	r30, 0x32	; 50
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	80 62       	ori	r24, 0x20	; 32
    1522:	8c 93       	st	X, r24
	loop_until_bit_is_set(PIND, G_NDAC);
    1524:	e0 e3       	ldi	r30, 0x30	; 48
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	88 2f       	mov	r24, r24
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	80 72       	andi	r24, 0x20	; 32
    1530:	90 70       	andi	r25, 0x00	; 0
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	b9 f3       	breq	.-18     	; 0x1524 <gpib_write_byte+0x416>

	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
    1536:	a1 e3       	ldi	r26, 0x31	; 49
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e1 e3       	ldi	r30, 0x31	; 49
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	8b 7f       	andi	r24, 0xFB	; 251
    1542:	8c 93       	st	X, r24
    1544:	a2 e3       	ldi	r26, 0x32	; 50
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e2 e3       	ldi	r30, 0x32	; 50
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	84 60       	ori	r24, 0x04	; 4
    1550:	8c 93       	st	X, r24

	// reset Port to all input
	DDRA = 0x00;
    1552:	ea e3       	ldi	r30, 0x3A	; 58
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	10 82       	st	Z, r1

	//uart_puts("3\r\n");

	return 0;
    1558:	1d 82       	std	Y+5, r1	; 0x05
    155a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <gpib_info>:

/**
 * print some useful info about bus state (for example value of handshake pins)
 */
void gpib_info(void) {
    156c:	af 92       	push	r10
    156e:	bf 92       	push	r11
    1570:	cf 92       	push	r12
    1572:	df 92       	push	r13
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	2a 97       	sbiw	r28, 0x0a	; 10
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
	uchar dav, nrfd, ndac, eoi, atn, srq, ifc, ren;
	extern uchar buf[80];

	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    1590:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <gpib_get_partner_pad>
    1594:	08 2f       	mov	r16, r24
    1596:	10 e0       	ldi	r17, 0x00	; 0
    1598:	0e 94 75 0d 	call	0x1aea	; 0x1aea <gpib_get_partner_sad>
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	8d b7       	in	r24, 0x3d	; 61
    15a2:	9e b7       	in	r25, 0x3e	; 62
    15a4:	08 97       	sbiw	r24, 0x08	; 8
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	9e bf       	out	0x3e, r25	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	8d bf       	out	0x3d, r24	; 61
    15b0:	ed b7       	in	r30, 0x3d	; 61
    15b2:	fe b7       	in	r31, 0x3e	; 62
    15b4:	31 96       	adiw	r30, 0x01	; 1
    15b6:	84 eb       	ldi	r24, 0xB4	; 180
    15b8:	95 e0       	ldi	r25, 0x05	; 5
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	80 83       	st	Z, r24
    15be:	86 ec       	ldi	r24, 0xC6	; 198
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	93 83       	std	Z+3, r25	; 0x03
    15c4:	82 83       	std	Z+2, r24	; 0x02
    15c6:	15 83       	std	Z+5, r17	; 0x05
    15c8:	04 83       	std	Z+4, r16	; 0x04
    15ca:	37 83       	std	Z+7, r19	; 0x07
    15cc:	26 83       	std	Z+6, r18	; 0x06
    15ce:	0e 94 0d 02 	call	0x41a	; 0x41a <sprintf>
    15d2:	8d b7       	in	r24, 0x3d	; 61
    15d4:	9e b7       	in	r25, 0x3e	; 62
    15d6:	08 96       	adiw	r24, 0x08	; 8
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	9e bf       	out	0x3e, r25	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	8d bf       	out	0x3d, r24	; 61
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);
    15e2:	84 eb       	ldi	r24, 0xB4	; 180
    15e4:	95 e0       	ldi	r25, 0x05	; 5
    15e6:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>

	uart_puts("Partner list\n\r");
    15ea:	84 ef       	ldi	r24, 0xF4	; 244
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
	for (int i = 0; i < MAX_PARTNER; i++) {
    15f2:	1a 82       	std	Y+2, r1	; 0x02
    15f4:	19 82       	std	Y+1, r1	; 0x01
    15f6:	49 c0       	rjmp	.+146    	; 0x168a <gpib_info+0x11e>
		if (controller.partners[i].primary != ADDRESS_NOT_SET) {
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	9a 81       	ldd	r25, Y+2	; 0x02
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	fc 01       	movw	r30, r24
    1602:	e3 56       	subi	r30, 0x63	; 99
    1604:	fb 4f       	sbci	r31, 0xFB	; 251
    1606:	80 81       	ld	r24, Z
    1608:	8f 3f       	cpi	r24, 0xFF	; 255
    160a:	d1 f1       	breq	.+116    	; 0x1680 <gpib_info+0x114>
			sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	9a 81       	ldd	r25, Y+2	; 0x02
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	fc 01       	movw	r30, r24
    1616:	e3 56       	subi	r30, 0x63	; 99
    1618:	fb 4f       	sbci	r31, 0xFB	; 251
    161a:	80 81       	ld	r24, Z
    161c:	48 2f       	mov	r20, r24
    161e:	50 e0       	ldi	r21, 0x00	; 0
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	03 96       	adiw	r24, 0x03	; 3
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	fc 01       	movw	r30, r24
    162c:	e8 56       	subi	r30, 0x68	; 104
    162e:	fb 4f       	sbci	r31, 0xFB	; 251
    1630:	80 81       	ld	r24, Z
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	8d b7       	in	r24, 0x3d	; 61
    1638:	9e b7       	in	r25, 0x3e	; 62
    163a:	08 97       	sbiw	r24, 0x08	; 8
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	9e bf       	out	0x3e, r25	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	8d bf       	out	0x3d, r24	; 61
    1646:	ed b7       	in	r30, 0x3d	; 61
    1648:	fe b7       	in	r31, 0x3e	; 62
    164a:	31 96       	adiw	r30, 0x01	; 1
    164c:	84 eb       	ldi	r24, 0xB4	; 180
    164e:	95 e0       	ldi	r25, 0x05	; 5
    1650:	91 83       	std	Z+1, r25	; 0x01
    1652:	80 83       	st	Z, r24
    1654:	86 ec       	ldi	r24, 0xC6	; 198
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	93 83       	std	Z+3, r25	; 0x03
    165a:	82 83       	std	Z+2, r24	; 0x02
    165c:	55 83       	std	Z+5, r21	; 0x05
    165e:	44 83       	std	Z+4, r20	; 0x04
    1660:	37 83       	std	Z+7, r19	; 0x07
    1662:	26 83       	std	Z+6, r18	; 0x06
    1664:	0e 94 0d 02 	call	0x41a	; 0x41a <sprintf>
    1668:	8d b7       	in	r24, 0x3d	; 61
    166a:	9e b7       	in	r25, 0x3e	; 62
    166c:	08 96       	adiw	r24, 0x08	; 8
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	9e bf       	out	0x3e, r25	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	8d bf       	out	0x3d, r24	; 61
					controller.partners[i].primary,
					controller.partners[i].secondary);
			uart_puts(buf);
    1678:	84 eb       	ldi	r24, 0xB4	; 180
    167a:	95 e0       	ldi	r25, 0x05	; 5
    167c:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);

	uart_puts("Partner list\n\r");
	for (int i = 0; i < MAX_PARTNER; i++) {
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	9a 81       	ldd	r25, Y+2	; 0x02
    1684:	01 96       	adiw	r24, 0x01	; 1
    1686:	9a 83       	std	Y+2, r25	; 0x02
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	9a 81       	ldd	r25, Y+2	; 0x02
    168e:	85 30       	cpi	r24, 0x05	; 5
    1690:	91 05       	cpc	r25, r1
    1692:	0c f4       	brge	.+2      	; 0x1696 <gpib_info+0x12a>
    1694:	b1 cf       	rjmp	.-158    	; 0x15f8 <gpib_info+0x8c>
					controller.partners[i].secondary);
			uart_puts(buf);
		}
	}

	dav = bit_is_set(PIND, G_DAV);
    1696:	e0 e3       	ldi	r30, 0x30	; 48
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	84 70       	andi	r24, 0x04	; 4
    169e:	8a 87       	std	Y+10, r24	; 0x0a
	nrfd = bit_is_set(PIND, G_NRFD);
    16a0:	e0 e3       	ldi	r30, 0x30	; 48
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	88 70       	andi	r24, 0x08	; 8
    16a8:	89 87       	std	Y+9, r24	; 0x09
	ndac = bit_is_set(PIND, G_NDAC);
    16aa:	e0 e3       	ldi	r30, 0x30	; 48
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	80 72       	andi	r24, 0x20	; 32
    16b2:	88 87       	std	Y+8, r24	; 0x08
	eoi = bit_is_set(PIND, G_EOI);
    16b4:	e0 e3       	ldi	r30, 0x30	; 48
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	80 71       	andi	r24, 0x10	; 16
    16bc:	8f 83       	std	Y+7, r24	; 0x07
	atn = bit_is_set(PIND, G_ATN);
    16be:	e0 e3       	ldi	r30, 0x30	; 48
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	80 78       	andi	r24, 0x80	; 128
    16c6:	8e 83       	std	Y+6, r24	; 0x06
	srq = bit_is_set(PIND, G_SRQ);
    16c8:	e0 e3       	ldi	r30, 0x30	; 48
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	80 74       	andi	r24, 0x40	; 64
    16d0:	8d 83       	std	Y+5, r24	; 0x05
	ifc = bit_is_set(PINB, G_IFC);
    16d2:	e6 e3       	ldi	r30, 0x36	; 54
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	81 70       	andi	r24, 0x01	; 1
    16da:	8c 83       	std	Y+4, r24	; 0x04
	ren = bit_is_set(PINB, G_REN);
    16dc:	e6 e3       	ldi	r30, 0x36	; 54
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	82 70       	andi	r24, 0x02	; 2
    16e4:	8b 83       	std	Y+3, r24	; 0x03
	//d = PINA;
	//di = d ^ 0xff;
	if (dav == 0x00)
    16e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    16e8:	88 23       	and	r24, r24
    16ea:	19 f4       	brne	.+6      	; 0x16f2 <gpib_info+0x186>
		dav = '0';
    16ec:	80 e3       	ldi	r24, 0x30	; 48
    16ee:	8a 87       	std	Y+10, r24	; 0x0a
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <gpib_info+0x18a>
	else
		dav = '1';
    16f2:	81 e3       	ldi	r24, 0x31	; 49
    16f4:	8a 87       	std	Y+10, r24	; 0x0a
	if (nrfd == 0x00)
    16f6:	89 85       	ldd	r24, Y+9	; 0x09
    16f8:	88 23       	and	r24, r24
    16fa:	19 f4       	brne	.+6      	; 0x1702 <gpib_info+0x196>
		nrfd = '0';
    16fc:	80 e3       	ldi	r24, 0x30	; 48
    16fe:	89 87       	std	Y+9, r24	; 0x09
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <gpib_info+0x19a>
	else
		nrfd = '1';
    1702:	81 e3       	ldi	r24, 0x31	; 49
    1704:	89 87       	std	Y+9, r24	; 0x09
	if (ndac == 0x00)
    1706:	88 85       	ldd	r24, Y+8	; 0x08
    1708:	88 23       	and	r24, r24
    170a:	19 f4       	brne	.+6      	; 0x1712 <gpib_info+0x1a6>
		ndac = '0';
    170c:	80 e3       	ldi	r24, 0x30	; 48
    170e:	88 87       	std	Y+8, r24	; 0x08
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <gpib_info+0x1aa>
	else
		ndac = '1';
    1712:	81 e3       	ldi	r24, 0x31	; 49
    1714:	88 87       	std	Y+8, r24	; 0x08
	if (eoi == 0x00)
    1716:	8f 81       	ldd	r24, Y+7	; 0x07
    1718:	88 23       	and	r24, r24
    171a:	19 f4       	brne	.+6      	; 0x1722 <gpib_info+0x1b6>
		eoi = '0';
    171c:	80 e3       	ldi	r24, 0x30	; 48
    171e:	8f 83       	std	Y+7, r24	; 0x07
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <gpib_info+0x1ba>
	else
		eoi = '1';
    1722:	81 e3       	ldi	r24, 0x31	; 49
    1724:	8f 83       	std	Y+7, r24	; 0x07
	if (atn == 0x00)
    1726:	8e 81       	ldd	r24, Y+6	; 0x06
    1728:	88 23       	and	r24, r24
    172a:	19 f4       	brne	.+6      	; 0x1732 <gpib_info+0x1c6>
		atn = '0';
    172c:	80 e3       	ldi	r24, 0x30	; 48
    172e:	8e 83       	std	Y+6, r24	; 0x06
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <gpib_info+0x1ca>
	else
		atn = '1';
    1732:	81 e3       	ldi	r24, 0x31	; 49
    1734:	8e 83       	std	Y+6, r24	; 0x06
	if (srq == 0x00)
    1736:	8d 81       	ldd	r24, Y+5	; 0x05
    1738:	88 23       	and	r24, r24
    173a:	19 f4       	brne	.+6      	; 0x1742 <gpib_info+0x1d6>
		srq = '0';
    173c:	80 e3       	ldi	r24, 0x30	; 48
    173e:	8d 83       	std	Y+5, r24	; 0x05
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <gpib_info+0x1da>
	else
		srq = '1';
    1742:	81 e3       	ldi	r24, 0x31	; 49
    1744:	8d 83       	std	Y+5, r24	; 0x05
	if (ifc == 0x00)
    1746:	8c 81       	ldd	r24, Y+4	; 0x04
    1748:	88 23       	and	r24, r24
    174a:	19 f4       	brne	.+6      	; 0x1752 <gpib_info+0x1e6>
		ifc = '0';
    174c:	80 e3       	ldi	r24, 0x30	; 48
    174e:	8c 83       	std	Y+4, r24	; 0x04
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <gpib_info+0x1ea>
	else
		ifc = '1';
    1752:	81 e3       	ldi	r24, 0x31	; 49
    1754:	8c 83       	std	Y+4, r24	; 0x04
	if (ren == 0x00)
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	88 23       	and	r24, r24
    175a:	19 f4       	brne	.+6      	; 0x1762 <gpib_info+0x1f6>
		ren = '0';
    175c:	80 e3       	ldi	r24, 0x30	; 48
    175e:	8b 83       	std	Y+3, r24	; 0x03
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <gpib_info+0x1fa>
	else
		ren = '1';
    1762:	81 e3       	ldi	r24, 0x31	; 49
    1764:	8b 83       	std	Y+3, r24	; 0x03

	sprintf(buf,
    1766:	8a 85       	ldd	r24, Y+10	; 0x0a
    1768:	a8 2e       	mov	r10, r24
    176a:	bb 24       	eor	r11, r11
    176c:	89 85       	ldd	r24, Y+9	; 0x09
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	88 85       	ldd	r24, Y+8	; 0x08
    1774:	48 2f       	mov	r20, r24
    1776:	50 e0       	ldi	r21, 0x00	; 0
    1778:	8f 81       	ldd	r24, Y+7	; 0x07
    177a:	68 2f       	mov	r22, r24
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	8c 81       	ldd	r24, Y+4	; 0x04
    1780:	a8 2f       	mov	r26, r24
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	08 2f       	mov	r16, r24
    1788:	10 e0       	ldi	r17, 0x00	; 0
    178a:	8e 81       	ldd	r24, Y+6	; 0x06
    178c:	e8 2e       	mov	r14, r24
    178e:	ff 24       	eor	r15, r15
    1790:	8d 81       	ldd	r24, Y+5	; 0x05
    1792:	c8 2e       	mov	r12, r24
    1794:	dd 24       	eor	r13, r13
    1796:	8d b7       	in	r24, 0x3d	; 61
    1798:	9e b7       	in	r25, 0x3e	; 62
    179a:	44 97       	sbiw	r24, 0x14	; 20
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	9e bf       	out	0x3e, r25	; 62
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	8d bf       	out	0x3d, r24	; 61
    17a6:	ed b7       	in	r30, 0x3d	; 61
    17a8:	fe b7       	in	r31, 0x3e	; 62
    17aa:	31 96       	adiw	r30, 0x01	; 1
    17ac:	84 eb       	ldi	r24, 0xB4	; 180
    17ae:	95 e0       	ldi	r25, 0x05	; 5
    17b0:	91 83       	std	Z+1, r25	; 0x01
    17b2:	80 83       	st	Z, r24
    17b4:	83 e0       	ldi	r24, 0x03	; 3
    17b6:	91 e0       	ldi	r25, 0x01	; 1
    17b8:	93 83       	std	Z+3, r25	; 0x03
    17ba:	82 83       	std	Z+2, r24	; 0x02
    17bc:	b5 82       	std	Z+5, r11	; 0x05
    17be:	a4 82       	std	Z+4, r10	; 0x04
    17c0:	37 83       	std	Z+7, r19	; 0x07
    17c2:	26 83       	std	Z+6, r18	; 0x06
    17c4:	51 87       	std	Z+9, r21	; 0x09
    17c6:	40 87       	std	Z+8, r20	; 0x08
    17c8:	73 87       	std	Z+11, r23	; 0x0b
    17ca:	62 87       	std	Z+10, r22	; 0x0a
    17cc:	b5 87       	std	Z+13, r27	; 0x0d
    17ce:	a4 87       	std	Z+12, r26	; 0x0c
    17d0:	17 87       	std	Z+15, r17	; 0x0f
    17d2:	06 87       	std	Z+14, r16	; 0x0e
    17d4:	f1 8a       	std	Z+17, r15	; 0x11
    17d6:	e0 8a       	std	Z+16, r14	; 0x10
    17d8:	d3 8a       	std	Z+19, r13	; 0x13
    17da:	c2 8a       	std	Z+18, r12	; 0x12
    17dc:	0e 94 0d 02 	call	0x41a	; 0x41a <sprintf>
    17e0:	8d b7       	in	r24, 0x3d	; 61
    17e2:	9e b7       	in	r25, 0x3e	; 62
    17e4:	44 96       	adiw	r24, 0x14	; 20
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	9e bf       	out	0x3e, r25	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	8d bf       	out	0x3d, r24	; 61
			"dav=%c,nrfd=%c,ndac=%c, eoi=%c, ifc=%c,ren=%c,atn=%c,srq=%c\n\r",
			dav, nrfd, ndac, eoi, ifc, ren, atn, srq);
	uart_puts(buf);
    17f0:	84 eb       	ldi	r24, 0xB4	; 180
    17f2:	95 e0       	ldi	r25, 0x05	; 5
    17f4:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
}
    17f8:	2a 96       	adiw	r28, 0x0a	; 10
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	ff 90       	pop	r15
    180e:	ef 90       	pop	r14
    1810:	df 90       	pop	r13
    1812:	cf 90       	pop	r12
    1814:	bf 90       	pop	r11
    1816:	af 90       	pop	r10
    1818:	08 95       	ret

0000181a <gpib_spoll_start>:

/**
 * Enable serial poll.
 * Effect: all devices will send status byte instead of normal data when addressed as talker
 */
void gpib_spoll_start() {
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	00 d0       	rcall	.+0      	; 0x1820 <gpib_spoll_start+0x6>
    1820:	00 d0       	rcall	.+0      	; 0x1822 <gpib_spoll_start+0x8>
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
	uchar controlString[4];
	//uart_puts("before SPE\r\n");
	controlString[0] = G_CMD_SPE;
    1826:	88 e1       	ldi	r24, 0x18	; 24
    1828:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
    182a:	ce 01       	movw	r24, r28
    182c:	01 96       	adiw	r24, 0x01	; 1
    182e:	61 e0       	ldi	r22, 0x01	; 1
    1830:	70 e0       	ldi	r23, 0x00	; 0
    1832:	0e 94 72 07 	call	0xee4	; 0xee4 <gpib_cmd>
	//uart_puts("after SPE\r\n");
}
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <gpib_spoll_end>:

/**
 * Disable (end) serial poll.All devices will return to normal behaviour as talker
 */
void gpib_spoll_end() {
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <gpib_spoll_end+0x6>
    184a:	00 d0       	rcall	.+0      	; 0x184c <gpib_spoll_end+0x8>
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
	uchar controlString[4];
	controlString[0] = G_CMD_SPD;
    1850:	89 e1       	ldi	r24, 0x19	; 25
    1852:	89 83       	std	Y+1, r24	; 0x01
	//uart_puts("before SPD\r\n");
	gpib_cmd(controlString, 1);
    1854:	ce 01       	movw	r24, r28
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	70 e0       	ldi	r23, 0x00	; 0
    185c:	0e 94 72 07 	call	0xee4	; 0xee4 <gpib_cmd>
}
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <gpib_spoll_single>:
 * Address device as talker and read in status byte from device. This function only makes sense during a serial poll.
 * \param primary primary talker address of device
 * \param secondary secondary talker address of device
 * \return status byte.
 */
uchar gpib_spoll_single(uchar primary, uchar secondary) {
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	2e 97       	sbiw	r28, 0x0e	; 14
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	8d 87       	std	Y+13, r24	; 0x0d
    1884:	6e 87       	std	Y+14, r22	; 0x0e
	uchar controlString[10];
	uchar b, e;

	// address device
	gpib_send_address(primary, secondary);
    1886:	8d 85       	ldd	r24, Y+13	; 0x0d
    1888:	6e 85       	ldd	r22, Y+14	; 0x0e
    188a:	0e 94 3c 05 	call	0xa78	; 0xa78 <gpib_send_address>

	// now receive data
	//uart_puts("before status byte receive\r\n");
	e = gpib_receive(&b);
    188e:	ce 01       	movw	r24, r28
    1890:	0c 96       	adiw	r24, 0x0c	; 12
    1892:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <gpib_receive>
    1896:	89 83       	std	Y+1, r24	; 0x01
	//uart_puts("after status byte receive\r\n");
	// status byte is now in b
	if (secondary != ADDRESS_NOT_SET) {
    1898:	8e 85       	ldd	r24, Y+14	; 0x0e
    189a:	8f 3f       	cpi	r24, 0xFF	; 255
    189c:	81 f1       	breq	.+96     	; 0x18fe <gpib_spoll_single+0x90>
		sprintf((char*) controlString,
    189e:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a0:	88 2f       	mov	r24, r24
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	bc 01       	movw	r22, r24
    18a6:	60 54       	subi	r22, 0x40	; 64
    18a8:	70 40       	sbci	r23, 0x00	; 0
    18aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    18b2:	48 2f       	mov	r20, r24
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	8d b7       	in	r24, 0x3d	; 61
    18b8:	9e b7       	in	r25, 0x3e	; 62
    18ba:	0a 97       	sbiw	r24, 0x0a	; 10
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	9e bf       	out	0x3e, r25	; 62
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	8d bf       	out	0x3d, r24	; 61
    18c6:	ed b7       	in	r30, 0x3d	; 61
    18c8:	fe b7       	in	r31, 0x3e	; 62
    18ca:	31 96       	adiw	r30, 0x01	; 1
    18cc:	ce 01       	movw	r24, r28
    18ce:	02 96       	adiw	r24, 0x02	; 2
    18d0:	91 83       	std	Z+1, r25	; 0x01
    18d2:	80 83       	st	Z, r24
    18d4:	81 e4       	ldi	r24, 0x41	; 65
    18d6:	91 e0       	ldi	r25, 0x01	; 1
    18d8:	93 83       	std	Z+3, r25	; 0x03
    18da:	82 83       	std	Z+2, r24	; 0x02
    18dc:	75 83       	std	Z+5, r23	; 0x05
    18de:	64 83       	std	Z+4, r22	; 0x04
    18e0:	37 83       	std	Z+7, r19	; 0x07
    18e2:	26 83       	std	Z+6, r18	; 0x06
    18e4:	51 87       	std	Z+9, r21	; 0x09
    18e6:	40 87       	std	Z+8, r20	; 0x08
    18e8:	0e 94 0d 02 	call	0x41a	; 0x41a <sprintf>
    18ec:	8d b7       	in	r24, 0x3d	; 61
    18ee:	9e b7       	in	r25, 0x3e	; 62
    18f0:	0a 96       	adiw	r24, 0x0a	; 10
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	9e bf       	out	0x3e, r25	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	8d bf       	out	0x3d, r24	; 61
    18fc:	2a c0       	rjmp	.+84     	; 0x1952 <gpib_spoll_single+0xe4>
				"Status byte from device primary=0x%02x,secondary=0x%02x (physical) = 0x%02x\n\r",
				TalkerAddress2Address(primary), secondary, b);
	} else {
		sprintf((char*) controlString,
    18fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1900:	88 2f       	mov	r24, r24
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	9c 01       	movw	r18, r24
    1906:	20 54       	subi	r18, 0x40	; 64
    1908:	30 40       	sbci	r19, 0x00	; 0
    190a:	8c 85       	ldd	r24, Y+12	; 0x0c
    190c:	48 2f       	mov	r20, r24
    190e:	50 e0       	ldi	r21, 0x00	; 0
    1910:	8d b7       	in	r24, 0x3d	; 61
    1912:	9e b7       	in	r25, 0x3e	; 62
    1914:	08 97       	sbiw	r24, 0x08	; 8
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	9e bf       	out	0x3e, r25	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	8d bf       	out	0x3d, r24	; 61
    1920:	ed b7       	in	r30, 0x3d	; 61
    1922:	fe b7       	in	r31, 0x3e	; 62
    1924:	31 96       	adiw	r30, 0x01	; 1
    1926:	ce 01       	movw	r24, r28
    1928:	02 96       	adiw	r24, 0x02	; 2
    192a:	91 83       	std	Z+1, r25	; 0x01
    192c:	80 83       	st	Z, r24
    192e:	8f e8       	ldi	r24, 0x8F	; 143
    1930:	91 e0       	ldi	r25, 0x01	; 1
    1932:	93 83       	std	Z+3, r25	; 0x03
    1934:	82 83       	std	Z+2, r24	; 0x02
    1936:	35 83       	std	Z+5, r19	; 0x05
    1938:	24 83       	std	Z+4, r18	; 0x04
    193a:	57 83       	std	Z+7, r21	; 0x07
    193c:	46 83       	std	Z+6, r20	; 0x06
    193e:	0e 94 0d 02 	call	0x41a	; 0x41a <sprintf>
    1942:	8d b7       	in	r24, 0x3d	; 61
    1944:	9e b7       	in	r25, 0x3e	; 62
    1946:	08 96       	adiw	r24, 0x08	; 8
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	9e bf       	out	0x3e, r25	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	8d bf       	out	0x3d, r24	; 61
				"Status byte from device primary=0x%02x (physical) = 0x%02x\n\r",
				TalkerAddress2Address(primary), b);
	}
	uart_puts((char*) controlString);
    1952:	ce 01       	movw	r24, r28
    1954:	02 96       	adiw	r24, 0x02	; 2
    1956:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	gpib_untalkUnlisten();
    195a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <gpib_untalkUnlisten>
	return b;
    195e:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    1960:	2e 96       	adiw	r28, 0x0e	; 14
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <gpib_serial_poll>:
 * I haven't looked how a device with two byte address behaves.
 *
 * Secondary/primary is returned in inout parameters
 * If any emitter is found, return value is != 0.
 */
uchar gpib_serial_poll(uint8_t *primary_v, uint8_t* secondary_v) {
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	2b 97       	sbiw	r28, 0x0b	; 11
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	de bf       	out	0x3e, r29	; 62
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	cd bf       	out	0x3d, r28	; 61
    1986:	99 87       	std	Y+9, r25	; 0x09
    1988:	88 87       	std	Y+8, r24	; 0x08
    198a:	7b 87       	std	Y+11, r23	; 0x0b
    198c:	6a 87       	std	Y+10, r22	; 0x0a
	uchar b;
	uchar primary = 0, secondary = 0, found = 0,
    198e:	1e 82       	std	Y+6, r1	; 0x06
    1990:	1d 82       	std	Y+5, r1	; 0x05
    1992:	1c 82       	std	Y+4, r1	; 0x04
			foundPhysical = ADDRESS_NOT_SET;
    1994:	8f ef       	ldi	r24, 0xFF	; 255
    1996:	8b 83       	std	Y+3, r24	; 0x03
	int i;

	// send unlisten and untalk to all
	gpib_untalkUnlisten();
    1998:	0e 94 ce 05 	call	0xb9c	; 0xb9c <gpib_untalkUnlisten>

	// serial poll sequence start
	gpib_spoll_start();
    199c:	0e 94 0d 0c 	call	0x181a	; 0x181a <gpib_spoll_start>

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    19a0:	1a 82       	std	Y+2, r1	; 0x02
    19a2:	19 82       	std	Y+1, r1	; 0x01
    19a4:	56 c0       	rjmp	.+172    	; 0x1a52 <gpib_serial_poll+0xe0>
			i++) {

		// set partner to talker mode
		primary = address2TalkerAddress(controller.partners[i].primary);
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	fc 01       	movw	r30, r24
    19b0:	e3 56       	subi	r30, 0x63	; 99
    19b2:	fb 4f       	sbci	r31, 0xFB	; 251
    19b4:	80 81       	ld	r24, Z
    19b6:	80 5c       	subi	r24, 0xC0	; 192
    19b8:	8e 83       	std	Y+6, r24	; 0x06
		secondary = secondaryAdressToAdressByte(
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	9a 81       	ldd	r25, Y+2	; 0x02
    19be:	03 96       	adiw	r24, 0x03	; 3
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	fc 01       	movw	r30, r24
    19c6:	e8 56       	subi	r30, 0x68	; 104
    19c8:	fb 4f       	sbci	r31, 0xFB	; 251
    19ca:	80 81       	ld	r24, Z
    19cc:	80 66       	ori	r24, 0x60	; 96
    19ce:	8d 83       	std	Y+5, r24	; 0x05
				controller.partners[i].secondary);
		// query status byte from device
		b = gpib_spoll_single(primary, secondary);
    19d0:	8e 81       	ldd	r24, Y+6	; 0x06
    19d2:	6d 81       	ldd	r22, Y+5	; 0x05
    19d4:	0e 94 37 0c 	call	0x186e	; 0x186e <gpib_spoll_single>
    19d8:	8f 83       	std	Y+7, r24	; 0x07

		// bit 6 of status byte of SRQ emitter is 1; check this
		// when reading status byte from emitter, he releases SRQ line (may also be tested here)
		if (b & (1 << 6)) {
    19da:	8f 81       	ldd	r24, Y+7	; 0x07
    19dc:	88 2f       	mov	r24, r24
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	80 74       	andi	r24, 0x40	; 64
    19e2:	90 70       	andi	r25, 0x00	; 0
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	81 f1       	breq	.+96     	; 0x1a48 <gpib_serial_poll+0xd6>
			found = primary;
    19e8:	8e 81       	ldd	r24, Y+6	; 0x06
    19ea:	8c 83       	std	Y+4, r24	; 0x04
			foundPhysical = TalkerAddress2Address(found);
    19ec:	8c 81       	ldd	r24, Y+4	; 0x04
    19ee:	80 54       	subi	r24, 0x40	; 64
    19f0:	8b 83       	std	Y+3, r24	; 0x03
			sprintf((char*) cmd_buf,
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	48 2f       	mov	r20, r24
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	8d b7       	in	r24, 0x3d	; 61
    1a00:	9e b7       	in	r25, 0x3e	; 62
    1a02:	08 97       	sbiw	r24, 0x08	; 8
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	9e bf       	out	0x3e, r25	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	8d bf       	out	0x3d, r24	; 61
    1a0e:	ed b7       	in	r30, 0x3d	; 61
    1a10:	fe b7       	in	r31, 0x3e	; 62
    1a12:	31 96       	adiw	r30, 0x01	; 1
    1a14:	80 e5       	ldi	r24, 0x50	; 80
    1a16:	95 e0       	ldi	r25, 0x05	; 5
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	80 83       	st	Z, r24
    1a1c:	8c ec       	ldi	r24, 0xCC	; 204
    1a1e:	91 e0       	ldi	r25, 0x01	; 1
    1a20:	93 83       	std	Z+3, r25	; 0x03
    1a22:	82 83       	std	Z+2, r24	; 0x02
    1a24:	35 83       	std	Z+5, r19	; 0x05
    1a26:	24 83       	std	Z+4, r18	; 0x04
    1a28:	57 83       	std	Z+7, r21	; 0x07
    1a2a:	46 83       	std	Z+6, r20	; 0x06
    1a2c:	0e 94 0d 02 	call	0x41a	; 0x41a <sprintf>
    1a30:	8d b7       	in	r24, 0x3d	; 61
    1a32:	9e b7       	in	r25, 0x3e	; 62
    1a34:	08 96       	adiw	r24, 0x08	; 8
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	9e bf       	out	0x3e, r25	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	8d bf       	out	0x3d, r24	; 61
					"SRQ emitter is device = 0x%02x (physical address), secondary = 0x%02x\n\r",
					foundPhysical, secondary);
			uart_puts((char*) cmd_buf);
    1a40:	80 e5       	ldi	r24, 0x50	; 80
    1a42:	95 e0       	ldi	r25, 0x05	; 5
    1a44:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
	// serial poll sequence start
	gpib_spoll_start();

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
			i++) {
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4c:	01 96       	adiw	r24, 0x01	; 1
    1a4e:	9a 83       	std	Y+2, r25	; 0x02
    1a50:	89 83       	std	Y+1, r24	; 0x01

	// serial poll sequence start
	gpib_spoll_start();

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	9a 81       	ldd	r25, Y+2	; 0x02
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	e3 56       	subi	r30, 0x63	; 99
    1a5e:	fb 4f       	sbci	r31, 0xFB	; 251
    1a60:	80 81       	ld	r24, Z
    1a62:	8f 3f       	cpi	r24, 0xFF	; 255
    1a64:	21 f0       	breq	.+8      	; 0x1a6e <gpib_serial_poll+0xfc>
    1a66:	8c 81       	ldd	r24, Y+4	; 0x04
    1a68:	88 23       	and	r24, r24
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <gpib_serial_poll+0xfc>
    1a6c:	9c cf       	rjmp	.-200    	; 0x19a6 <gpib_serial_poll+0x34>
			uart_puts((char*) cmd_buf);
		}
	}

	// serial poll sequence end
	gpib_spoll_end(cmd_buf);
    1a6e:	80 e5       	ldi	r24, 0x50	; 80
    1a70:	95 e0       	ldi	r25, 0x05	; 5
    1a72:	0e 94 22 0c 	call	0x1844	; 0x1844 <gpib_spoll_end>

	// "return" values determined
	*primary_v = primary;
    1a76:	e8 85       	ldd	r30, Y+8	; 0x08
    1a78:	f9 85       	ldd	r31, Y+9	; 0x09
    1a7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a7c:	80 83       	st	Z, r24
	*secondary_v = secondary;
    1a7e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a80:	fb 85       	ldd	r31, Y+11	; 0x0b
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	80 83       	st	Z, r24

	return found;
    1a86:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1a88:	2b 96       	adiw	r28, 0x0b	; 11
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <gpib_set_partner_address>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_address(uchar primary, uchar secondary) {
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <gpib_set_partner_address+0x6>
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	6a 83       	std	Y+2, r22	; 0x02
	controller.partner.primary = primary;
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	80 93 99 04 	sts	0x0499, r24
	controller.partner.secondary = secondary;
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	80 93 9a 04 	sts	0x049A, r24
}
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <gpib_set_partner_secondary>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_secondary(uchar secondary) {
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	0f 92       	push	r0
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	89 83       	std	Y+1, r24	; 0x01
	controller.partner.secondary = secondary;
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	80 93 9a 04 	sts	0x049A, r24
}
    1ad0:	0f 90       	pop	r0
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	08 95       	ret

00001ad8 <gpib_get_partner_pad>:

/**
 * Get primary address of device currently controlled.
 * \returns primary address Address of device.
 */
uchar gpib_get_partner_pad(void) {
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.primary;
    1ae0:	80 91 99 04 	lds	r24, 0x0499
}
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <gpib_get_partner_sad>:

/**
 * Get secondary address of device currently controlled.
 * \returns secondary address Address of device.
 */
uchar gpib_get_partner_sad(void) {
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.secondary;
    1af2:	80 91 9a 04 	lds	r24, 0x049A
}
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <gpib_get_address>:

/**
 * Get controller address.
 * \returns address of controller.
 */
uchar gpib_get_address(void) {
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
	return controller.myaddress;
    1b04:	80 91 98 04 	lds	r24, 0x0498
}
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <gpib_set_flavour>:

void gpib_set_flavour(uchar flavour) {
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	0f 92       	push	r0
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	89 83       	std	Y+1, r24	; 0x01
	controller.flavour = flavour;
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	80 93 9c 04 	sts	0x049C, r24
}
    1b20:	0f 90       	pop	r0
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	08 95       	ret

00001b28 <gpib_get_flavour>:

uchar gpib_get_flavour(void) {
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
	return controller.flavour;
    1b30:	80 91 9c 04 	lds	r24, 0x049C
}
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <gpib_clear_partners>:

/**
 * Clear partners list
 */
void gpib_clear_partners() {
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <gpib_clear_partners+0x6>
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < MAX_PARTNER; i++) {
    1b44:	1a 82       	std	Y+2, r1	; 0x02
    1b46:	19 82       	std	Y+1, r1	; 0x01
    1b48:	0e c0       	rjmp	.+28     	; 0x1b66 <gpib_clear_partners+0x2c>
		controller.partners[i].primary = ADDRESS_NOT_SET;
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	fc 01       	movw	r30, r24
    1b54:	e3 56       	subi	r30, 0x63	; 99
    1b56:	fb 4f       	sbci	r31, 0xFB	; 251
    1b58:	8f ef       	ldi	r24, 0xFF	; 255
    1b5a:	80 83       	st	Z, r24

/**
 * Clear partners list
 */
void gpib_clear_partners() {
	for (int i = 0; i < MAX_PARTNER; i++) {
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b60:	01 96       	adiw	r24, 0x01	; 1
    1b62:	9a 83       	std	Y+2, r25	; 0x02
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6a:	85 30       	cpi	r24, 0x05	; 5
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	6c f3       	brlt	.-38     	; 0x1b4a <gpib_clear_partners+0x10>
		controller.partners[i].primary = ADDRESS_NOT_SET;
	}
}
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <gpib_add_partner_address>:

/**
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <gpib_add_partner_address+0x6>
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <gpib_add_partner_address+0x8>
    1b82:	0f 92       	push	r0
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	8b 83       	std	Y+3, r24	; 0x03
    1b8a:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1b8c:	1a 82       	std	Y+2, r1	; 0x02
    1b8e:	19 82       	std	Y+1, r1	; 0x01
    1b90:	05 c0       	rjmp	.+10     	; 0x1b9c <gpib_add_partner_address+0x22>
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
			i++) {
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	9a 81       	ldd	r25, Y+2	; 0x02
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	9a 83       	std	Y+2, r25	; 0x02
    1b9a:	89 83       	std	Y+1, r24	; 0x01
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba0:	85 30       	cpi	r24, 0x05	; 5
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	54 f4       	brge	.+20     	; 0x1bba <gpib_add_partner_address+0x40>
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	fc 01       	movw	r30, r24
    1bb0:	e3 56       	subi	r30, 0x63	; 99
    1bb2:	fb 4f       	sbci	r31, 0xFB	; 251
    1bb4:	80 81       	ld	r24, Z
    1bb6:	8f 3f       	cpi	r24, 0xFF	; 255
    1bb8:	61 f7       	brne	.-40     	; 0x1b92 <gpib_add_partner_address+0x18>
			i++) {
	}
	if (i == MAX_PARTNER) {
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbe:	85 30       	cpi	r24, 0x05	; 5
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	39 f4       	brne	.+14     	; 0x1bd2 <gpib_add_partner_address+0x58>
		uart_puts("Too much partners.\n\r");
    1bc4:	84 e1       	ldi	r24, 0x14	; 20
    1bc6:	92 e0       	ldi	r25, 0x02	; 2
    1bc8:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
		return 1;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	8d 83       	std	Y+5, r24	; 0x05
    1bd0:	14 c0       	rjmp	.+40     	; 0x1bfa <gpib_add_partner_address+0x80>
	}
	controller.partners[i].primary = primary;
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	fc 01       	movw	r30, r24
    1bdc:	e3 56       	subi	r30, 0x63	; 99
    1bde:	fb 4f       	sbci	r31, 0xFB	; 251
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	80 83       	st	Z, r24
	controller.partners[i].secondary = secondary;
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	9a 81       	ldd	r25, Y+2	; 0x02
    1be8:	03 96       	adiw	r24, 0x03	; 3
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	fc 01       	movw	r30, r24
    1bf0:	e8 56       	subi	r30, 0x68	; 104
    1bf2:	fb 4f       	sbci	r31, 0xFB	; 251
    1bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf6:	80 83       	st	Z, r24
	return 0;
    1bf8:	1d 82       	std	Y+5, r1	; 0x05
    1bfa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <gpib_remove_partner_address>:

/**
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <gpib_remove_partner_address+0x6>
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <gpib_remove_partner_address+0x8>
    1c14:	0f 92       	push	r0
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	8b 83       	std	Y+3, r24	; 0x03
    1c1c:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1c1e:	1a 82       	std	Y+2, r1	; 0x02
    1c20:	19 82       	std	Y+1, r1	; 0x01
    1c22:	05 c0       	rjmp	.+10     	; 0x1c2e <gpib_remove_partner_address+0x22>
			i < MAX_PARTNER
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	9a 81       	ldd	r25, Y+2	; 0x02
    1c28:	01 96       	adiw	r24, 0x01	; 1
    1c2a:	9a 83       	std	Y+2, r25	; 0x02
    1c2c:	89 83       	std	Y+1, r24	; 0x01
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	9a 81       	ldd	r25, Y+2	; 0x02
    1c32:	85 30       	cpi	r24, 0x05	; 5
    1c34:	91 05       	cpc	r25, r1
    1c36:	bc f4       	brge	.+46     	; 0x1c66 <gpib_remove_partner_address+0x5a>
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	fc 01       	movw	r30, r24
    1c42:	e3 56       	subi	r30, 0x63	; 99
    1c44:	fb 4f       	sbci	r31, 0xFB	; 251
    1c46:	90 81       	ld	r25, Z
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	98 17       	cp	r25, r24
    1c4c:	59 f7       	brne	.-42     	; 0x1c24 <gpib_remove_partner_address+0x18>
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	9a 81       	ldd	r25, Y+2	; 0x02
    1c52:	03 96       	adiw	r24, 0x03	; 3
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	fc 01       	movw	r30, r24
    1c5a:	e8 56       	subi	r30, 0x68	; 104
    1c5c:	fb 4f       	sbci	r31, 0xFB	; 251
    1c5e:	90 81       	ld	r25, Z
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
    1c62:	98 17       	cp	r25, r24
    1c64:	f9 f6       	brne	.-66     	; 0x1c24 <gpib_remove_partner_address+0x18>
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
	}
	if (i == MAX_PARTNER) {
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6a:	85 30       	cpi	r24, 0x05	; 5
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	39 f4       	brne	.+14     	; 0x1c7e <gpib_remove_partner_address+0x72>
		uart_puts("Partner unknown.\n\r");
    1c70:	89 e2       	ldi	r24, 0x29	; 41
    1c72:	92 e0       	ldi	r25, 0x02	; 2
    1c74:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
		return 1;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	8d 83       	std	Y+5, r24	; 0x05
    1c7c:	14 c0       	rjmp	.+40     	; 0x1ca6 <gpib_remove_partner_address+0x9a>
	}
	controller.partners[i].primary = ADDRESS_NOT_SET;
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	9a 81       	ldd	r25, Y+2	; 0x02
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	fc 01       	movw	r30, r24
    1c88:	e3 56       	subi	r30, 0x63	; 99
    1c8a:	fb 4f       	sbci	r31, 0xFB	; 251
    1c8c:	8f ef       	ldi	r24, 0xFF	; 255
    1c8e:	80 83       	st	Z, r24
	controller.partners[i].secondary = ADDRESS_NOT_SET;
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	9a 81       	ldd	r25, Y+2	; 0x02
    1c94:	03 96       	adiw	r24, 0x03	; 3
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	e8 56       	subi	r30, 0x68	; 104
    1c9e:	fb 4f       	sbci	r31, 0xFB	; 251
    1ca0:	8f ef       	ldi	r24, 0xFF	; 255
    1ca2:	80 83       	st	Z, r24
	return 0;
    1ca4:	1d 82       	std	Y+5, r1	; 0x05
    1ca6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <arb_ramp>:
void receiveAnswer();

#define ARB_TEST
#ifdef ARB_TEST

void arb_ramp() {
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	2e 97       	sbiw	r28, 0x0e	; 14
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
	uchar b[10];

	gpib_prepare_write();
    1ccc:	0e 94 64 05 	call	0xac8	; 0xac8 <gpib_prepare_write>
	gpib_write_prologue(0);
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	0e 94 ce 07 	call	0xf9c	; 0xf9c <gpib_write_prologue>

	gpib_write_string("SOUR:LIST:SEGM:VOLT ");
    1cd6:	8c e3       	ldi	r24, 0x3C	; 60
    1cd8:	92 e0       	ldi	r25, 0x02	; 2
    1cda:	0e 94 58 08 	call	0x10b0	; 0x10b0 <gpib_write_string>

	for (int i = 0; i < 4096; i++) {
    1cde:	1c 82       	std	Y+4, r1	; 0x04
    1ce0:	1b 82       	std	Y+3, r1	; 0x03
    1ce2:	39 c0       	rjmp	.+114    	; 0x1d56 <arb_ramp+0x9e>
		int f = i / 1000;
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce8:	28 ee       	ldi	r18, 0xE8	; 232
    1cea:	33 e0       	ldi	r19, 0x03	; 3
    1cec:	b9 01       	movw	r22, r18
    1cee:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <__divmodhi4>
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
    1cf6:	89 83       	std	Y+1, r24	; 0x01
		sprintf(b, "%d", f);
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <arb_ramp+0x42>
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <arb_ramp+0x44>
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <arb_ramp+0x46>
    1cfe:	ed b7       	in	r30, 0x3d	; 61
    1d00:	fe b7       	in	r31, 0x3e	; 62
    1d02:	31 96       	adiw	r30, 0x01	; 1
    1d04:	ce 01       	movw	r24, r28
    1d06:	05 96       	adiw	r24, 0x05	; 5
    1d08:	91 83       	std	Z+1, r25	; 0x01
    1d0a:	80 83       	st	Z, r24
    1d0c:	81 e5       	ldi	r24, 0x51	; 81
    1d0e:	92 e0       	ldi	r25, 0x02	; 2
    1d10:	93 83       	std	Z+3, r25	; 0x03
    1d12:	82 83       	std	Z+2, r24	; 0x02
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	9a 81       	ldd	r25, Y+2	; 0x02
    1d18:	95 83       	std	Z+5, r25	; 0x05
    1d1a:	84 83       	std	Z+4, r24	; 0x04
    1d1c:	0e 94 0d 02 	call	0x41a	; 0x41a <sprintf>
    1d20:	8d b7       	in	r24, 0x3d	; 61
    1d22:	9e b7       	in	r25, 0x3e	; 62
    1d24:	06 96       	adiw	r24, 0x06	; 6
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	9e bf       	out	0x3e, r25	; 62
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	8d bf       	out	0x3d, r24	; 61
		gpib_write_byte(b[0], 0);
    1d30:	8d 81       	ldd	r24, Y+5	; 0x05
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	0e 94 87 08 	call	0x110e	; 0x110e <gpib_write_byte>
		if (i < 4096 - 1) {
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3c:	2f e0       	ldi	r18, 0x0F	; 15
    1d3e:	8f 3f       	cpi	r24, 0xFF	; 255
    1d40:	92 07       	cpc	r25, r18
    1d42:	24 f4       	brge	.+8      	; 0x1d4c <arb_ramp+0x94>
			gpib_write_byte(',', 0);
    1d44:	8c e2       	ldi	r24, 0x2C	; 44
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	0e 94 87 08 	call	0x110e	; 0x110e <gpib_write_byte>
	gpib_prepare_write();
	gpib_write_prologue(0);

	gpib_write_string("SOUR:LIST:SEGM:VOLT ");

	for (int i = 0; i < 4096; i++) {
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d50:	01 96       	adiw	r24, 0x01	; 1
    1d52:	9c 83       	std	Y+4, r25	; 0x04
    1d54:	8b 83       	std	Y+3, r24	; 0x03
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5a:	20 e1       	ldi	r18, 0x10	; 16
    1d5c:	80 30       	cpi	r24, 0x00	; 0
    1d5e:	92 07       	cpc	r25, r18
    1d60:	0c f2       	brlt	.-126    	; 0x1ce4 <arb_ramp+0x2c>
		if (i < 4096 - 1) {
			gpib_write_byte(',', 0);
		}
	}

	gpib_write_byte(ASCII_CODE_CR, 1);
    1d62:	8d e0       	ldi	r24, 0x0D	; 13
    1d64:	61 e0       	ldi	r22, 0x01	; 1
    1d66:	0e 94 87 08 	call	0x110e	; 0x110e <gpib_write_byte>
	gpib_write_epilogue(0);
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	0e 94 1d 08 	call	0x103a	; 0x103a <gpib_write_epilogue>
	gpib_untalkUnlisten();
    1d70:	0e 94 ce 05 	call	0xb9c	; 0xb9c <gpib_untalkUnlisten>
}
    1d74:	2e 96       	adiw	r28, 0x0e	; 14
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <arb>:

void arb() {
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
	gpib_write_command("*RST");
    1d8e:	84 e5       	ldi	r24, 0x54	; 84
    1d90:	92 e0       	ldi	r25, 0x02	; 2
    1d92:	0e 94 3a 08 	call	0x1074	; 0x1074 <gpib_write_command>
	gpib_write_command("SOUR:ROSC:SOUR INT;");
    1d96:	89 e5       	ldi	r24, 0x59	; 89
    1d98:	92 e0       	ldi	r25, 0x02	; 2
    1d9a:	0e 94 3a 08 	call	0x1074	; 0x1074 <gpib_write_command>
	gpib_write_command(":SOUR:FREQ:FIX 1E3;");
    1d9e:	8d e6       	ldi	r24, 0x6D	; 109
    1da0:	92 e0       	ldi	r25, 0x02	; 2
    1da2:	0e 94 3a 08 	call	0x1074	; 0x1074 <gpib_write_command>
	gpib_write_command(":SOUR:FUNC:SHAP USER;");
    1da6:	81 e8       	ldi	r24, 0x81	; 129
    1da8:	92 e0       	ldi	r25, 0x02	; 2
    1daa:	0e 94 3a 08 	call	0x1074	; 0x1074 <gpib_write_command>
	gpib_write_command(":SOUR:VOLT:LEV:IMM:AMPL 5V");
    1dae:	87 e9       	ldi	r24, 0x97	; 151
    1db0:	92 e0       	ldi	r25, 0x02	; 2
    1db2:	0e 94 3a 08 	call	0x1074	; 0x1074 <gpib_write_command>
	gpib_write_command("SOUR:LIST:SEGM:SEL A"); // no ';' at end!
    1db6:	82 eb       	ldi	r24, 0xB2	; 178
    1db8:	92 e0       	ldi	r25, 0x02	; 2
    1dba:	0e 94 3a 08 	call	0x1074	; 0x1074 <gpib_write_command>
	arb_ramp();
    1dbe:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <arb_ramp>
	gpib_write_command("SOUR:FUNC:USER A");
    1dc2:	87 ec       	ldi	r24, 0xC7	; 199
    1dc4:	92 e0       	ldi	r25, 0x02	; 2
    1dc6:	0e 94 3a 08 	call	0x1074	; 0x1074 <gpib_write_command>
	gpib_write_command("INIT:IMM");
    1dca:	88 ed       	ldi	r24, 0xD8	; 216
    1dcc:	92 e0       	ldi	r25, 0x02	; 2
    1dce:	0e 94 3a 08 	call	0x1074	; 0x1074 <gpib_write_command>
	//send_command("SOUR:LIST:SEGM:SEL?");
}
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <stringToTwoUchars>:

/**
 * Read two integers from string like "45 56" or one integer. In latter case
 * the second integer is initialized with a special value.
 */
static void stringToTwoUchars(char *string, uchar *a, uchar *b) {
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	28 97       	sbiw	r28, 0x08	; 8
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	9c 83       	std	Y+4, r25	; 0x04
    1dee:	8b 83       	std	Y+3, r24	; 0x03
    1df0:	7e 83       	std	Y+6, r23	; 0x06
    1df2:	6d 83       	std	Y+5, r22	; 0x05
    1df4:	58 87       	std	Y+8, r21	; 0x08
    1df6:	4f 83       	std	Y+7, r20	; 0x07
	char *token = strtok(string, " ");
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfc:	21 ee       	ldi	r18, 0xE1	; 225
    1dfe:	32 e0       	ldi	r19, 0x02	; 2
    1e00:	b9 01       	movw	r22, r18
    1e02:	0e 94 b7 01 	call	0x36e	; 0x36e <strtok>
    1e06:	9a 83       	std	Y+2, r25	; 0x02
    1e08:	89 83       	std	Y+1, r24	; 0x01
	*a = atoi((char*) token);
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0e:	0e 94 99 01 	call	0x332	; 0x332 <atoi>
    1e12:	ed 81       	ldd	r30, Y+5	; 0x05
    1e14:	fe 81       	ldd	r31, Y+6	; 0x06
    1e16:	80 83       	st	Z, r24
	token = strtok(NULL, " ");
    1e18:	21 ee       	ldi	r18, 0xE1	; 225
    1e1a:	32 e0       	ldi	r19, 0x02	; 2
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	b9 01       	movw	r22, r18
    1e22:	0e 94 b7 01 	call	0x36e	; 0x36e <strtok>
    1e26:	9a 83       	std	Y+2, r25	; 0x02
    1e28:	89 83       	std	Y+1, r24	; 0x01
	if (token != NULL) {
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	41 f0       	breq	.+16     	; 0x1e42 <stringToTwoUchars+0x6a>
		*b = atoi((char*) token);
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	9a 81       	ldd	r25, Y+2	; 0x02
    1e36:	0e 94 99 01 	call	0x332	; 0x332 <atoi>
    1e3a:	ef 81       	ldd	r30, Y+7	; 0x07
    1e3c:	f8 85       	ldd	r31, Y+8	; 0x08
    1e3e:	80 83       	st	Z, r24
    1e40:	04 c0       	rjmp	.+8      	; 0x1e4a <stringToTwoUchars+0x72>
	} else {
		*b = ADDRESS_NOT_SET;
    1e42:	ef 81       	ldd	r30, Y+7	; 0x07
    1e44:	f8 85       	ldd	r31, Y+8	; 0x08
    1e46:	8f ef       	ldi	r24, 0xFF	; 255
    1e48:	80 83       	st	Z, r24
	}
}
    1e4a:	28 96       	adiw	r28, 0x08	; 8
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	f8 94       	cli
    1e50:	de bf       	out	0x3e, r29	; 62
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	cd bf       	out	0x3d, r28	; 61
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <check_errors>:
 * Checks for errors.
 *
 * Reads error queue. output is one error per line.
 *
 */
void check_errors() {
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	c7 55       	subi	r28, 0x57	; 87
    1e66:	d0 40       	sbci	r29, 0x00	; 0
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
	char *error_cmd = "SYST:ERR?";
    1e72:	83 ee       	ldi	r24, 0xE3	; 227
    1e74:	92 e0       	ldi	r25, 0x02	; 2
    1e76:	9e 83       	std	Y+6, r25	; 0x06
    1e78:	8d 83       	std	Y+5, r24	; 0x05
	uchar msg[80];
	uchar b, e;
	uchar colptr = 0;
    1e7a:	1b 82       	std	Y+3, r1	; 0x03
	uchar allErrorsRead = 0;
    1e7c:	1a 82       	std	Y+2, r1	; 0x02
    1e7e:	48 c0       	rjmp	.+144    	; 0x1f10 <check_errors+0xb4>

	while (!allErrorsRead) {
		gpib_write_command(error_cmd);
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	9e 81       	ldd	r25, Y+6	; 0x06
    1e84:	0e 94 3a 08 	call	0x1074	; 0x1074 <gpib_write_command>
		gpib_prepare_read();
    1e88:	0e 94 99 05 	call	0xb32	; 0xb32 <gpib_prepare_read>
		// read the answer until EOI is detected (then e becomes true)
		uchar i = 0;
    1e8c:	19 82       	std	Y+1, r1	; 0x01
		do {
			// gpib bus receive
			e = gpib_receive(&b);
    1e8e:	ce 01       	movw	r24, r28
    1e90:	89 5a       	subi	r24, 0xA9	; 169
    1e92:	9f 4f       	sbci	r25, 0xFF	; 255
    1e94:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <gpib_receive>
    1e98:	8c 83       	std	Y+4, r24	; 0x04
			msg[i++] = b;
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	e9 5a       	subi	r30, 0xA9	; 169
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	40 81       	ld	r20, Z
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	07 96       	adiw	r24, 0x07	; 7
    1eac:	fc 01       	movw	r30, r24
    1eae:	e2 0f       	add	r30, r18
    1eb0:	f3 1f       	adc	r31, r19
    1eb2:	40 83       	st	Z, r20
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	8f 5f       	subi	r24, 0xFF	; 255
    1eb8:	89 83       	std	Y+1, r24	; 0x01
		} while (!e);
    1eba:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebc:	88 23       	and	r24, r24
    1ebe:	39 f3       	breq	.-50     	; 0x1e8e <check_errors+0x32>
		// terminate string
		//msg[i++] = '\n';
		msg[i++] = '\r';
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	ce 01       	movw	r24, r28
    1ec8:	07 96       	adiw	r24, 0x07	; 7
    1eca:	fc 01       	movw	r30, r24
    1ecc:	e2 0f       	add	r30, r18
    1ece:	f3 1f       	adc	r31, r19
    1ed0:	8d e0       	ldi	r24, 0x0D	; 13
    1ed2:	80 83       	st	Z, r24
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	8f 5f       	subi	r24, 0xFF	; 255
    1ed8:	89 83       	std	Y+1, r24	; 0x01
		msg[i] = 0x00;
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	07 96       	adiw	r24, 0x07	; 7
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	e2 0f       	add	r30, r18
    1ee8:	f3 1f       	adc	r31, r19
    1eea:	10 82       	st	Z, r1
		// check if all errors have been read
		if (strncmp(msg,"+0,",3)==0) {
    1eec:	ce 01       	movw	r24, r28
    1eee:	07 96       	adiw	r24, 0x07	; 7
    1ef0:	2d ee       	ldi	r18, 0xED	; 237
    1ef2:	32 e0       	ldi	r19, 0x02	; 2
    1ef4:	b9 01       	movw	r22, r18
    1ef6:	43 e0       	ldi	r20, 0x03	; 3
    1ef8:	50 e0       	ldi	r21, 0x00	; 0
    1efa:	0e 94 c5 01 	call	0x38a	; 0x38a <strncmp>
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	19 f4       	brne	.+6      	; 0x1f08 <check_errors+0xac>
			allErrorsRead=1;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	8a 83       	std	Y+2, r24	; 0x02
    1f06:	04 c0       	rjmp	.+8      	; 0x1f10 <check_errors+0xb4>
		} else {
			uart_puts((char*) msg);
    1f08:	ce 01       	movw	r24, r28
    1f0a:	07 96       	adiw	r24, 0x07	; 7
    1f0c:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
	uchar msg[80];
	uchar b, e;
	uchar colptr = 0;
	uchar allErrorsRead = 0;

	while (!allErrorsRead) {
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	88 23       	and	r24, r24
    1f14:	09 f4       	brne	.+2      	; 0x1f18 <check_errors+0xbc>
    1f16:	b4 cf       	rjmp	.-152    	; 0x1e80 <check_errors+0x24>
			allErrorsRead=1;
		} else {
			uart_puts((char*) msg);
		}
	}
}
    1f18:	c9 5a       	subi	r28, 0xA9	; 169
    1f1a:	df 4f       	sbci	r29, 0xFF	; 255
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	de bf       	out	0x3e, r29	; 62
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	cd bf       	out	0x3d, r28	; 61
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <input_char>:

/**
 * Reads in character into parameter c. Checks for errors and prints them out.
 * Returns 0 if there is no char to read, 1 if there was a char read in.
 */
uchar input_char(uchar *ch) {
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <input_char+0x6>
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <input_char+0x8>
    1f34:	0f 92       	push	r0
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	9c 83       	std	Y+4, r25	; 0x04
    1f3c:	8b 83       	std	Y+3, r24	; 0x03
	 * uart_getc() returns in the lower byte the received character and
	 * in the higher byte (bitmask) the last receive error
	 * UART_NO_DATA is returned when no data is available.
	 *
	 */
	c = uart_getc();
    1f3e:	0e 94 24 16 	call	0x2c48	; 0x2c48 <uart_getc>
    1f42:	9a 83       	std	Y+2, r25	; 0x02
    1f44:	89 83       	std	Y+1, r24	; 0x01
	if (c & UART_NO_DATA) {
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4a:	80 70       	andi	r24, 0x00	; 0
    1f4c:	91 70       	andi	r25, 0x01	; 1
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	11 f0       	breq	.+4      	; 0x1f56 <input_char+0x2a>
		// no data available from UART
		return 0;
    1f52:	1d 82       	std	Y+5, r1	; 0x05
    1f54:	24 c0       	rjmp	.+72     	; 0x1f9e <input_char+0x72>
	}
	// make uchar from character in int value
	*ch = (uchar) c;
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	eb 81       	ldd	r30, Y+3	; 0x03
    1f5a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f5c:	80 83       	st	Z, r24

	/*
	 * new data available from UART
	 * check for Frame or Overrun error
	 */
	if (c & UART_FRAME_ERROR) {
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	9a 81       	ldd	r25, Y+2	; 0x02
    1f62:	80 70       	andi	r24, 0x00	; 0
    1f64:	98 70       	andi	r25, 0x08	; 8
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	21 f0       	breq	.+8      	; 0x1f72 <input_char+0x46>
		/* Framing Error detected, i.e no stop bit detected */
		uart_puts_P("UART Frame Error: ");
    1f6a:	81 e8       	ldi	r24, 0x81	; 129
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
	}
	if (c & UART_OVERRUN_ERROR) {
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	9a 81       	ldd	r25, Y+2	; 0x02
    1f76:	80 70       	andi	r24, 0x00	; 0
    1f78:	94 70       	andi	r25, 0x04	; 4
    1f7a:	00 97       	sbiw	r24, 0x00	; 0
    1f7c:	21 f0       	breq	.+8      	; 0x1f86 <input_char+0x5a>
		/*
		 * Overrun, a character already present in the UART UDR register was
		 * not read by the interrupt handler before the next character arrived,
		 * one or more received characters have been dropped
		 */
		uart_puts_P("UART Overrun Error: ");
    1f7e:	8c e6       	ldi	r24, 0x6C	; 108
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
	}
	if (c & UART_BUFFER_OVERFLOW) {
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8a:	80 70       	andi	r24, 0x00	; 0
    1f8c:	92 70       	andi	r25, 0x02	; 2
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	21 f0       	breq	.+8      	; 0x1f9a <input_char+0x6e>
		/*
		 * We are not reading the receive buffer fast enough,
		 * one or more received character have been dropped
		 */
		uart_puts_P("Buffer overflow error: ");
    1f92:	84 e5       	ldi	r24, 0x54	; 84
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
	}
	return 1;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	8d 83       	std	Y+5, r24	; 0x05
    1f9e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <process_char>:
 * a) xon/xoff mode forward buffer to GPIB
 * b) no flow control: prints error message that input buffer is full.
 *
 * Returns 1 if command end is detected, 0 otherwise.
 */
uchar process_char(uchar *buf, uchar ch, int *ptr) {
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	00 d0       	rcall	.+0      	; 0x1fb6 <process_char+0x6>
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <process_char+0x8>
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <process_char+0xa>
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	9b 83       	std	Y+3, r25	; 0x03
    1fc0:	8a 83       	std	Y+2, r24	; 0x02
    1fc2:	6c 83       	std	Y+4, r22	; 0x04
    1fc4:	5e 83       	std	Y+6, r21	; 0x06
    1fc6:	4d 83       	std	Y+5, r20	; 0x05
	uchar ret = 0;
    1fc8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * send received character back depending on global flag
	 */
	if (rs232_remote_echo) {
    1fca:	80 91 91 04 	lds	r24, 0x0491
    1fce:	88 23       	and	r24, r24
    1fd0:	19 f0       	breq	.+6      	; 0x1fd8 <process_char+0x28>
		uart_putc((unsigned char) ch);
    1fd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd4:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <uart_putc>
	}

	// if input buffer is not full, add char
	if (*ptr < COMMAND_INPUT_BUFFER_SIZE - 1) {
    1fd8:	ed 81       	ldd	r30, Y+5	; 0x05
    1fda:	fe 81       	ldd	r31, Y+6	; 0x06
    1fdc:	80 81       	ld	r24, Z
    1fde:	91 81       	ldd	r25, Z+1	; 0x01
    1fe0:	8f 34       	cpi	r24, 0x4F	; 79
    1fe2:	91 05       	cpc	r25, r1
    1fe4:	ec f4       	brge	.+58     	; 0x2020 <process_char+0x70>
		buf[(*ptr)++] = ch;
    1fe6:	ed 81       	ldd	r30, Y+5	; 0x05
    1fe8:	fe 81       	ldd	r31, Y+6	; 0x06
    1fea:	40 81       	ld	r20, Z
    1fec:	51 81       	ldd	r21, Z+1	; 0x01
    1fee:	9a 01       	movw	r18, r20
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	e2 0f       	add	r30, r18
    1ff8:	f3 1f       	adc	r31, r19
    1ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffc:	80 83       	st	Z, r24
    1ffe:	ca 01       	movw	r24, r20
    2000:	01 96       	adiw	r24, 0x01	; 1
    2002:	ed 81       	ldd	r30, Y+5	; 0x05
    2004:	fe 81       	ldd	r31, Y+6	; 0x06
    2006:	91 83       	std	Z+1, r25	; 0x01
    2008:	80 83       	st	Z, r24
		buf[*ptr] = '\0';
    200a:	ed 81       	ldd	r30, Y+5	; 0x05
    200c:	fe 81       	ldd	r31, Y+6	; 0x06
    200e:	80 81       	ld	r24, Z
    2010:	91 81       	ldd	r25, Z+1	; 0x01
    2012:	9c 01       	movw	r18, r24
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	9b 81       	ldd	r25, Y+3	; 0x03
    2018:	fc 01       	movw	r30, r24
    201a:	e2 0f       	add	r30, r18
    201c:	f3 1f       	adc	r31, r19
    201e:	10 82       	st	Z, r1
	}

	// if command ends or buffer is full ...
	if (ch == ASCII_CODE_CR || *ptr >= COMMAND_INPUT_BUFFER_SIZE - 1) {
    2020:	8c 81       	ldd	r24, Y+4	; 0x04
    2022:	8d 30       	cpi	r24, 0x0D	; 13
    2024:	39 f0       	breq	.+14     	; 0x2034 <process_char+0x84>
    2026:	ed 81       	ldd	r30, Y+5	; 0x05
    2028:	fe 81       	ldd	r31, Y+6	; 0x06
    202a:	80 81       	ld	r24, Z
    202c:	91 81       	ldd	r25, Z+1	; 0x01
    202e:	8f 34       	cpi	r24, 0x4F	; 79
    2030:	91 05       	cpc	r25, r1
    2032:	14 f1       	brlt	.+68     	; 0x2078 <process_char+0xc8>
		if (ch == ASCII_CODE_CR) {
    2034:	8c 81       	ldd	r24, Y+4	; 0x04
    2036:	8d 30       	cpi	r24, 0x0D	; 13
    2038:	b9 f4       	brne	.+46     	; 0x2068 <process_char+0xb8>
			// adjust string terminator
			buf[--(*ptr)] = '\0';
    203a:	ed 81       	ldd	r30, Y+5	; 0x05
    203c:	fe 81       	ldd	r31, Y+6	; 0x06
    203e:	80 81       	ld	r24, Z
    2040:	91 81       	ldd	r25, Z+1	; 0x01
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	ed 81       	ldd	r30, Y+5	; 0x05
    2046:	fe 81       	ldd	r31, Y+6	; 0x06
    2048:	91 83       	std	Z+1, r25	; 0x01
    204a:	80 83       	st	Z, r24
    204c:	ed 81       	ldd	r30, Y+5	; 0x05
    204e:	fe 81       	ldd	r31, Y+6	; 0x06
    2050:	80 81       	ld	r24, Z
    2052:	91 81       	ldd	r25, Z+1	; 0x01
    2054:	9c 01       	movw	r18, r24
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	9b 81       	ldd	r25, Y+3	; 0x03
    205a:	fc 01       	movw	r30, r24
    205c:	e2 0f       	add	r30, r18
    205e:	f3 1f       	adc	r31, r19
    2060:	10 82       	st	Z, r1
			// let calling function send last command part (or command itself)
			ret = 1;
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	89 83       	std	Y+1, r24	; 0x01
    2066:	08 c0       	rjmp	.+16     	; 0x2078 <process_char+0xc8>
		} else {
			// send intermediate part of command.
			uart_puts_P("Command overflow.");
    2068:	84 e9       	ldi	r24, 0x94	; 148
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
			*ptr = 0;
    2070:	ed 81       	ldd	r30, Y+5	; 0x05
    2072:	fe 81       	ldd	r31, Y+6	; 0x06
    2074:	11 82       	std	Z+1, r1	; 0x01
    2076:	10 82       	st	Z, r1
		}
	}
	return ret;
    2078:	89 81       	ldd	r24, Y+1	; 0x01
}
    207a:	26 96       	adiw	r28, 0x06	; 6
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	f8 94       	cli
    2080:	de bf       	out	0x3e, r29	; 62
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	cd bf       	out	0x3d, r28	; 61
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <input_process>:
 * This approach handles small single line commands (needing no flow control) and large
 * multi-line commands if flow control is xon/xoff.
 *
 * \returns The character read in
 */
uchar input_process(uchar *buf, int *ptr) {
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	27 97       	sbiw	r28, 0x07	; 7
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61
    20a0:	9c 83       	std	Y+4, r25	; 0x04
    20a2:	8b 83       	std	Y+3, r24	; 0x03
    20a4:	7e 83       	std	Y+6, r23	; 0x06
    20a6:	6d 83       	std	Y+5, r22	; 0x05
	uchar ch, ret = 0;
    20a8:	19 82       	std	Y+1, r1	; 0x01

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
    20aa:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <uart_get_flow_control>
    20ae:	81 30       	cpi	r24, 0x01	; 1
    20b0:	b9 f4       	brne	.+46     	; 0x20e0 <input_process+0x54>
    20b2:	12 c0       	rjmp	.+36     	; 0x20d8 <input_process+0x4c>
		while (!ret) {
			// if nothing can be read in, return
			if (!input_char(&ch)) {
    20b4:	ce 01       	movw	r24, r28
    20b6:	02 96       	adiw	r24, 0x02	; 2
    20b8:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <input_char>
    20bc:	88 23       	and	r24, r24
    20be:	11 f4       	brne	.+4      	; 0x20c4 <input_process+0x38>
				return 0;
    20c0:	1f 82       	std	Y+7, r1	; 0x07
    20c2:	22 c0       	rjmp	.+68     	; 0x2108 <input_process+0x7c>
			}
			ret = process_char(buf, ch, ptr);
    20c4:	4a 81       	ldd	r20, Y+2	; 0x02
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ca:	2d 81       	ldd	r18, Y+5	; 0x05
    20cc:	3e 81       	ldd	r19, Y+6	; 0x06
    20ce:	64 2f       	mov	r22, r20
    20d0:	a9 01       	movw	r20, r18
    20d2:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <process_char>
    20d6:	89 83       	std	Y+1, r24	; 0x01
 */
uchar input_process(uchar *buf, int *ptr) {
	uchar ch, ret = 0;

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
		while (!ret) {
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	88 23       	and	r24, r24
    20dc:	59 f3       	breq	.-42     	; 0x20b4 <input_process+0x28>
    20de:	12 c0       	rjmp	.+36     	; 0x2104 <input_process+0x78>
			}
			ret = process_char(buf, ch, ptr);
		}
	} else {
		// if nothing can be read in, return
		if (!input_char(&ch)) {
    20e0:	ce 01       	movw	r24, r28
    20e2:	02 96       	adiw	r24, 0x02	; 2
    20e4:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <input_char>
    20e8:	88 23       	and	r24, r24
    20ea:	11 f4       	brne	.+4      	; 0x20f0 <input_process+0x64>
			return 0;
    20ec:	1f 82       	std	Y+7, r1	; 0x07
    20ee:	0c c0       	rjmp	.+24     	; 0x2108 <input_process+0x7c>
		}
		ret = process_char(buf, ch, ptr);
    20f0:	4a 81       	ldd	r20, Y+2	; 0x02
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	2d 81       	ldd	r18, Y+5	; 0x05
    20f8:	3e 81       	ldd	r19, Y+6	; 0x06
    20fa:	64 2f       	mov	r22, r20
    20fc:	a9 01       	movw	r20, r18
    20fe:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <process_char>
    2102:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	8f 83       	std	Y+7, r24	; 0x07
    2108:	8f 81       	ldd	r24, Y+7	; 0x07
}
    210a:	27 96       	adiw	r28, 0x07	; 7
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	f8 94       	cli
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	cd bf       	out	0x3d, r28	; 61
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <handle_internal_commands>:

/**
 * Handles builtin commands.
 */
void handle_internal_commands(uchar *cmd) {
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	00 d0       	rcall	.+0      	; 0x2122 <handle_internal_commands+0x6>
    2122:	00 d0       	rcall	.+0      	; 0x2124 <handle_internal_commands+0x8>
    2124:	00 d0       	rcall	.+0      	; 0x2126 <handle_internal_commands+0xa>
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	9c 83       	std	Y+4, r25	; 0x04
    212c:	8b 83       	std	Y+3, r24	; 0x03
	uchar val, val1;

	switch (cmd[1]) {
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	9c 81       	ldd	r25, Y+4	; 0x04
    2132:	fc 01       	movw	r30, r24
    2134:	31 96       	adiw	r30, 0x01	; 1
    2136:	80 81       	ld	r24, Z
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	3e 83       	std	Y+6, r19	; 0x06
    213e:	2d 83       	std	Y+5, r18	; 0x05
    2140:	8d 81       	ldd	r24, Y+5	; 0x05
    2142:	9e 81       	ldd	r25, Y+6	; 0x06
    2144:	88 36       	cpi	r24, 0x68	; 104
    2146:	91 05       	cpc	r25, r1
    2148:	09 f4       	brne	.+2      	; 0x214c <handle_internal_commands+0x30>
    214a:	40 c1       	rjmp	.+640    	; 0x23cc <handle_internal_commands+0x2b0>
    214c:	2d 81       	ldd	r18, Y+5	; 0x05
    214e:	3e 81       	ldd	r19, Y+6	; 0x06
    2150:	29 36       	cpi	r18, 0x69	; 105
    2152:	31 05       	cpc	r19, r1
    2154:	f4 f4       	brge	.+60     	; 0x2192 <handle_internal_commands+0x76>
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	9e 81       	ldd	r25, Y+6	; 0x06
    215a:	81 36       	cpi	r24, 0x61	; 97
    215c:	91 05       	cpc	r25, r1
    215e:	c1 f1       	breq	.+112    	; 0x21d0 <handle_internal_commands+0xb4>
    2160:	2d 81       	ldd	r18, Y+5	; 0x05
    2162:	3e 81       	ldd	r19, Y+6	; 0x06
    2164:	22 36       	cpi	r18, 0x62	; 98
    2166:	31 05       	cpc	r19, r1
    2168:	6c f4       	brge	.+26     	; 0x2184 <handle_internal_commands+0x68>
    216a:	8d 81       	ldd	r24, Y+5	; 0x05
    216c:	9e 81       	ldd	r25, Y+6	; 0x06
    216e:	8b 32       	cpi	r24, 0x2B	; 43
    2170:	91 05       	cpc	r25, r1
    2172:	09 f4       	brne	.+2      	; 0x2176 <handle_internal_commands+0x5a>
    2174:	96 c0       	rjmp	.+300    	; 0x22a2 <handle_internal_commands+0x186>
    2176:	2d 81       	ldd	r18, Y+5	; 0x05
    2178:	3e 81       	ldd	r19, Y+6	; 0x06
    217a:	2d 32       	cpi	r18, 0x2D	; 45
    217c:	31 05       	cpc	r19, r1
    217e:	09 f4       	brne	.+2      	; 0x2182 <handle_internal_commands+0x66>
    2180:	ce c0       	rjmp	.+412    	; 0x231e <handle_internal_commands+0x202>
    2182:	c6 c1       	rjmp	.+908    	; 0x2510 <handle_internal_commands+0x3f4>
    2184:	8d 81       	ldd	r24, Y+5	; 0x05
    2186:	9e 81       	ldd	r25, Y+6	; 0x06
    2188:	85 36       	cpi	r24, 0x65	; 101
    218a:	91 05       	cpc	r25, r1
    218c:	09 f4       	brne	.+2      	; 0x2190 <handle_internal_commands+0x74>
    218e:	ae c1       	rjmp	.+860    	; 0x24ec <handle_internal_commands+0x3d0>
    2190:	bf c1       	rjmp	.+894    	; 0x2510 <handle_internal_commands+0x3f4>
    2192:	2d 81       	ldd	r18, Y+5	; 0x05
    2194:	3e 81       	ldd	r19, Y+6	; 0x06
    2196:	23 37       	cpi	r18, 0x73	; 115
    2198:	31 05       	cpc	r19, r1
    219a:	09 f4       	brne	.+2      	; 0x219e <handle_internal_commands+0x82>
    219c:	57 c0       	rjmp	.+174    	; 0x224c <handle_internal_commands+0x130>
    219e:	8d 81       	ldd	r24, Y+5	; 0x05
    21a0:	9e 81       	ldd	r25, Y+6	; 0x06
    21a2:	84 37       	cpi	r24, 0x74	; 116
    21a4:	91 05       	cpc	r25, r1
    21a6:	3c f4       	brge	.+14     	; 0x21b6 <handle_internal_commands+0x9a>
    21a8:	2d 81       	ldd	r18, Y+5	; 0x05
    21aa:	3e 81       	ldd	r19, Y+6	; 0x06
    21ac:	29 36       	cpi	r18, 0x69	; 105
    21ae:	31 05       	cpc	r19, r1
    21b0:	09 f4       	brne	.+2      	; 0x21b4 <handle_internal_commands+0x98>
    21b2:	0f c1       	rjmp	.+542    	; 0x23d2 <handle_internal_commands+0x2b6>
    21b4:	ad c1       	rjmp	.+858    	; 0x2510 <handle_internal_commands+0x3f4>
    21b6:	8d 81       	ldd	r24, Y+5	; 0x05
    21b8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ba:	88 37       	cpi	r24, 0x78	; 120
    21bc:	91 05       	cpc	r25, r1
    21be:	09 f4       	brne	.+2      	; 0x21c2 <handle_internal_commands+0xa6>
    21c0:	ec c0       	rjmp	.+472    	; 0x239a <handle_internal_commands+0x27e>
    21c2:	2d 81       	ldd	r18, Y+5	; 0x05
    21c4:	3e 81       	ldd	r19, Y+6	; 0x06
    21c6:	2a 37       	cpi	r18, 0x7A	; 122
    21c8:	31 05       	cpc	r19, r1
    21ca:	09 f4       	brne	.+2      	; 0x21ce <handle_internal_commands+0xb2>
    21cc:	96 c1       	rjmp	.+812    	; 0x24fa <handle_internal_commands+0x3de>
    21ce:	a0 c1       	rjmp	.+832    	; 0x2510 <handle_internal_commands+0x3f4>
	case 'a':
		/* set partner primary+secondary address */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	9c 81       	ldd	r25, Y+4	; 0x04
    21d4:	02 96       	adiw	r24, 0x02	; 2
    21d6:	ae 01       	movw	r20, r28
    21d8:	4e 5f       	subi	r20, 0xFE	; 254
    21da:	5f 4f       	sbci	r21, 0xFF	; 255
    21dc:	9e 01       	movw	r18, r28
    21de:	2f 5f       	subi	r18, 0xFF	; 255
    21e0:	3f 4f       	sbci	r19, 0xFF	; 255
    21e2:	b9 01       	movw	r22, r18
    21e4:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <stringToTwoUchars>
		sprintf(cmd, "Set partner address, primary: %u , secondary: %u\n\r",
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	28 2f       	mov	r18, r24
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	48 2f       	mov	r20, r24
    21f2:	50 e0       	ldi	r21, 0x00	; 0
    21f4:	8d b7       	in	r24, 0x3d	; 61
    21f6:	9e b7       	in	r25, 0x3e	; 62
    21f8:	08 97       	sbiw	r24, 0x08	; 8
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	9e bf       	out	0x3e, r25	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	8d bf       	out	0x3d, r24	; 61
    2204:	ed b7       	in	r30, 0x3d	; 61
    2206:	fe b7       	in	r31, 0x3e	; 62
    2208:	31 96       	adiw	r30, 0x01	; 1
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	9c 81       	ldd	r25, Y+4	; 0x04
    220e:	91 83       	std	Z+1, r25	; 0x01
    2210:	80 83       	st	Z, r24
    2212:	81 ef       	ldi	r24, 0xF1	; 241
    2214:	92 e0       	ldi	r25, 0x02	; 2
    2216:	93 83       	std	Z+3, r25	; 0x03
    2218:	82 83       	std	Z+2, r24	; 0x02
    221a:	35 83       	std	Z+5, r19	; 0x05
    221c:	24 83       	std	Z+4, r18	; 0x04
    221e:	57 83       	std	Z+7, r21	; 0x07
    2220:	46 83       	std	Z+6, r20	; 0x06
    2222:	0e 94 0d 02 	call	0x41a	; 0x41a <sprintf>
    2226:	2d b7       	in	r18, 0x3d	; 61
    2228:	3e b7       	in	r19, 0x3e	; 62
    222a:	28 5f       	subi	r18, 0xF8	; 248
    222c:	3f 4f       	sbci	r19, 0xFF	; 255
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	3e bf       	out	0x3e, r19	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	2d bf       	out	0x3d, r18	; 61
				val, val1);
		uart_puts(cmd);
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	9c 81       	ldd	r25, Y+4	; 0x04
    223c:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
		gpib_set_partner_address(val, val1);
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	9a 81       	ldd	r25, Y+2	; 0x02
    2244:	69 2f       	mov	r22, r25
    2246:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <gpib_set_partner_address>
    224a:	68 c1       	rjmp	.+720    	; 0x251c <handle_internal_commands+0x400>
		break;
	case 's':
		/* set partner secondary address */
		val = atoi((char*) (&(cmd[2])));
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	9c 81       	ldd	r25, Y+4	; 0x04
    2250:	02 96       	adiw	r24, 0x02	; 2
    2252:	0e 94 99 01 	call	0x332	; 0x332 <atoi>
    2256:	89 83       	std	Y+1, r24	; 0x01
		sprintf(cmd, "Set partner secondary address to %u\n\r", val);
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	00 d0       	rcall	.+0      	; 0x2260 <handle_internal_commands+0x144>
    2260:	00 d0       	rcall	.+0      	; 0x2262 <handle_internal_commands+0x146>
    2262:	00 d0       	rcall	.+0      	; 0x2264 <handle_internal_commands+0x148>
    2264:	ed b7       	in	r30, 0x3d	; 61
    2266:	fe b7       	in	r31, 0x3e	; 62
    2268:	31 96       	adiw	r30, 0x01	; 1
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	9c 81       	ldd	r25, Y+4	; 0x04
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	80 83       	st	Z, r24
    2272:	84 e2       	ldi	r24, 0x24	; 36
    2274:	93 e0       	ldi	r25, 0x03	; 3
    2276:	93 83       	std	Z+3, r25	; 0x03
    2278:	82 83       	std	Z+2, r24	; 0x02
    227a:	35 83       	std	Z+5, r19	; 0x05
    227c:	24 83       	std	Z+4, r18	; 0x04
    227e:	0e 94 0d 02 	call	0x41a	; 0x41a <sprintf>
    2282:	8d b7       	in	r24, 0x3d	; 61
    2284:	9e b7       	in	r25, 0x3e	; 62
    2286:	06 96       	adiw	r24, 0x06	; 6
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	9e bf       	out	0x3e, r25	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	8d bf       	out	0x3d, r24	; 61
		uart_puts(cmd);
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	9c 81       	ldd	r25, Y+4	; 0x04
    2296:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
		gpib_set_partner_secondary(val);
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <gpib_set_partner_secondary>
    22a0:	3d c1       	rjmp	.+634    	; 0x251c <handle_internal_commands+0x400>
		break;
	case '+':
		/* add device */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	9c 81       	ldd	r25, Y+4	; 0x04
    22a6:	02 96       	adiw	r24, 0x02	; 2
    22a8:	ae 01       	movw	r20, r28
    22aa:	4e 5f       	subi	r20, 0xFE	; 254
    22ac:	5f 4f       	sbci	r21, 0xFF	; 255
    22ae:	9e 01       	movw	r18, r28
    22b0:	2f 5f       	subi	r18, 0xFF	; 255
    22b2:	3f 4f       	sbci	r19, 0xFF	; 255
    22b4:	b9 01       	movw	r22, r18
    22b6:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <stringToTwoUchars>
		sprintf(cmd, "Add device, primary: %u , secondary: %u\n\r", val, val1);
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	48 2f       	mov	r20, r24
    22c4:	50 e0       	ldi	r21, 0x00	; 0
    22c6:	8d b7       	in	r24, 0x3d	; 61
    22c8:	9e b7       	in	r25, 0x3e	; 62
    22ca:	08 97       	sbiw	r24, 0x08	; 8
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	9e bf       	out	0x3e, r25	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	8d bf       	out	0x3d, r24	; 61
    22d6:	ed b7       	in	r30, 0x3d	; 61
    22d8:	fe b7       	in	r31, 0x3e	; 62
    22da:	31 96       	adiw	r30, 0x01	; 1
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	9c 81       	ldd	r25, Y+4	; 0x04
    22e0:	91 83       	std	Z+1, r25	; 0x01
    22e2:	80 83       	st	Z, r24
    22e4:	8a e4       	ldi	r24, 0x4A	; 74
    22e6:	93 e0       	ldi	r25, 0x03	; 3
    22e8:	93 83       	std	Z+3, r25	; 0x03
    22ea:	82 83       	std	Z+2, r24	; 0x02
    22ec:	35 83       	std	Z+5, r19	; 0x05
    22ee:	24 83       	std	Z+4, r18	; 0x04
    22f0:	57 83       	std	Z+7, r21	; 0x07
    22f2:	46 83       	std	Z+6, r20	; 0x06
    22f4:	0e 94 0d 02 	call	0x41a	; 0x41a <sprintf>
    22f8:	2d b7       	in	r18, 0x3d	; 61
    22fa:	3e b7       	in	r19, 0x3e	; 62
    22fc:	28 5f       	subi	r18, 0xF8	; 248
    22fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	3e bf       	out	0x3e, r19	; 62
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	2d bf       	out	0x3d, r18	; 61
		uart_puts(cmd);
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	9c 81       	ldd	r25, Y+4	; 0x04
    230e:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
		gpib_add_partner_address(val, val1);
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	9a 81       	ldd	r25, Y+2	; 0x02
    2316:	69 2f       	mov	r22, r25
    2318:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <gpib_add_partner_address>
    231c:	ff c0       	rjmp	.+510    	; 0x251c <handle_internal_commands+0x400>
		break;
	case '-':
		/* add device */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	9c 81       	ldd	r25, Y+4	; 0x04
    2322:	02 96       	adiw	r24, 0x02	; 2
    2324:	ae 01       	movw	r20, r28
    2326:	4e 5f       	subi	r20, 0xFE	; 254
    2328:	5f 4f       	sbci	r21, 0xFF	; 255
    232a:	9e 01       	movw	r18, r28
    232c:	2f 5f       	subi	r18, 0xFF	; 255
    232e:	3f 4f       	sbci	r19, 0xFF	; 255
    2330:	b9 01       	movw	r22, r18
    2332:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <stringToTwoUchars>
		sprintf(cmd, "Remove device, primary: %u , secondary: %u\n\r", val,
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	8a 81       	ldd	r24, Y+2	; 0x02
    233e:	48 2f       	mov	r20, r24
    2340:	50 e0       	ldi	r21, 0x00	; 0
    2342:	8d b7       	in	r24, 0x3d	; 61
    2344:	9e b7       	in	r25, 0x3e	; 62
    2346:	08 97       	sbiw	r24, 0x08	; 8
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	9e bf       	out	0x3e, r25	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	8d bf       	out	0x3d, r24	; 61
    2352:	ed b7       	in	r30, 0x3d	; 61
    2354:	fe b7       	in	r31, 0x3e	; 62
    2356:	31 96       	adiw	r30, 0x01	; 1
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	9c 81       	ldd	r25, Y+4	; 0x04
    235c:	91 83       	std	Z+1, r25	; 0x01
    235e:	80 83       	st	Z, r24
    2360:	84 e7       	ldi	r24, 0x74	; 116
    2362:	93 e0       	ldi	r25, 0x03	; 3
    2364:	93 83       	std	Z+3, r25	; 0x03
    2366:	82 83       	std	Z+2, r24	; 0x02
    2368:	35 83       	std	Z+5, r19	; 0x05
    236a:	24 83       	std	Z+4, r18	; 0x04
    236c:	57 83       	std	Z+7, r21	; 0x07
    236e:	46 83       	std	Z+6, r20	; 0x06
    2370:	0e 94 0d 02 	call	0x41a	; 0x41a <sprintf>
    2374:	2d b7       	in	r18, 0x3d	; 61
    2376:	3e b7       	in	r19, 0x3e	; 62
    2378:	28 5f       	subi	r18, 0xF8	; 248
    237a:	3f 4f       	sbci	r19, 0xFF	; 255
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	3e bf       	out	0x3e, r19	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	2d bf       	out	0x3d, r18	; 61
				val1);
		uart_puts(cmd);
    2386:	8b 81       	ldd	r24, Y+3	; 0x03
    2388:	9c 81       	ldd	r25, Y+4	; 0x04
    238a:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
		gpib_remove_partner_address(val, val1);
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	69 2f       	mov	r22, r25
    2394:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <gpib_remove_partner_address>
    2398:	c1 c0       	rjmp	.+386    	; 0x251c <handle_internal_commands+0x400>
		break;
	case 'x':
		/* Xon/Xoff flow control */
		if (!xonXoffMode) {
    239a:	80 91 92 04 	lds	r24, 0x0492
    239e:	88 23       	and	r24, r24
    23a0:	59 f4       	brne	.+22     	; 0x23b8 <handle_internal_commands+0x29c>
			xonXoffMode = 1;
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	80 93 92 04 	sts	0x0492, r24
			uart_set_flow_control(FLOWCONTROL_XONXOFF);
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	0e 94 11 15 	call	0x2a22	; 0x2a22 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol on\n\r");
    23ae:	82 ee       	ldi	r24, 0xE2	; 226
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
    23b6:	b2 c0       	rjmp	.+356    	; 0x251c <handle_internal_commands+0x400>
		} else {
			xonXoffMode = 0;
    23b8:	10 92 92 04 	sts	0x0492, r1
			uart_set_flow_control(FLOWCONTROL_NONE);
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	0e 94 11 15 	call	0x2a22	; 0x2a22 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol off\n\r");
    23c2:	87 ec       	ldi	r24, 0xC7	; 199
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
    23ca:	a8 c0       	rjmp	.+336    	; 0x251c <handle_internal_commands+0x400>
		}
		break;
	case 'h':
		/* print some usage infos */
		printHelp();
    23cc:	0e 94 70 13 	call	0x26e0	; 0x26e0 <printHelp>
    23d0:	a5 c0       	rjmp	.+330    	; 0x251c <handle_internal_commands+0x400>
		break;
	case 'i':
		gpib_info();
    23d2:	0e 94 b6 0a 	call	0x156c	; 0x156c <gpib_info>
		sprintf(cmd, "Xon/Xoff flow control: %u\n\r", xonXoffMode);
    23d6:	80 91 92 04 	lds	r24, 0x0492
    23da:	28 2f       	mov	r18, r24
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <handle_internal_commands+0x2c4>
    23e0:	00 d0       	rcall	.+0      	; 0x23e2 <handle_internal_commands+0x2c6>
    23e2:	00 d0       	rcall	.+0      	; 0x23e4 <handle_internal_commands+0x2c8>
    23e4:	ed b7       	in	r30, 0x3d	; 61
    23e6:	fe b7       	in	r31, 0x3e	; 62
    23e8:	31 96       	adiw	r30, 0x01	; 1
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	9c 81       	ldd	r25, Y+4	; 0x04
    23ee:	91 83       	std	Z+1, r25	; 0x01
    23f0:	80 83       	st	Z, r24
    23f2:	81 ea       	ldi	r24, 0xA1	; 161
    23f4:	93 e0       	ldi	r25, 0x03	; 3
    23f6:	93 83       	std	Z+3, r25	; 0x03
    23f8:	82 83       	std	Z+2, r24	; 0x02
    23fa:	35 83       	std	Z+5, r19	; 0x05
    23fc:	24 83       	std	Z+4, r18	; 0x04
    23fe:	0e 94 0d 02 	call	0x41a	; 0x41a <sprintf>
    2402:	8d b7       	in	r24, 0x3d	; 61
    2404:	9e b7       	in	r25, 0x3e	; 62
    2406:	06 96       	adiw	r24, 0x06	; 6
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	9e bf       	out	0x3e, r25	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	8d bf       	out	0x3d, r24	; 61
		uart_puts(cmd);
    2412:	8b 81       	ldd	r24, Y+3	; 0x03
    2414:	9c 81       	ldd	r25, Y+4	; 0x04
    2416:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
		sprintf(cmd, "RS232 echo: %u\n\r", rs232_remote_echo);
    241a:	80 91 91 04 	lds	r24, 0x0491
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	00 d0       	rcall	.+0      	; 0x2424 <handle_internal_commands+0x308>
    2424:	00 d0       	rcall	.+0      	; 0x2426 <handle_internal_commands+0x30a>
    2426:	00 d0       	rcall	.+0      	; 0x2428 <handle_internal_commands+0x30c>
    2428:	ed b7       	in	r30, 0x3d	; 61
    242a:	fe b7       	in	r31, 0x3e	; 62
    242c:	31 96       	adiw	r30, 0x01	; 1
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	9c 81       	ldd	r25, Y+4	; 0x04
    2432:	91 83       	std	Z+1, r25	; 0x01
    2434:	80 83       	st	Z, r24
    2436:	8d eb       	ldi	r24, 0xBD	; 189
    2438:	93 e0       	ldi	r25, 0x03	; 3
    243a:	93 83       	std	Z+3, r25	; 0x03
    243c:	82 83       	std	Z+2, r24	; 0x02
    243e:	35 83       	std	Z+5, r19	; 0x05
    2440:	24 83       	std	Z+4, r18	; 0x04
    2442:	0e 94 0d 02 	call	0x41a	; 0x41a <sprintf>
    2446:	2d b7       	in	r18, 0x3d	; 61
    2448:	3e b7       	in	r19, 0x3e	; 62
    244a:	2a 5f       	subi	r18, 0xFA	; 250
    244c:	3f 4f       	sbci	r19, 0xFF	; 255
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	f8 94       	cli
    2452:	3e bf       	out	0x3e, r19	; 62
    2454:	0f be       	out	0x3f, r0	; 63
    2456:	2d bf       	out	0x3d, r18	; 61
		uart_puts(cmd);
    2458:	8b 81       	ldd	r24, Y+3	; 0x03
    245a:	9c 81       	ldd	r25, Y+4	; 0x04
    245c:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
		sprintf(cmd, "SRQs enabled: %u\n\r", srq_enabled);
    2460:	80 91 93 04 	lds	r24, 0x0493
    2464:	28 2f       	mov	r18, r24
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	00 d0       	rcall	.+0      	; 0x246a <handle_internal_commands+0x34e>
    246a:	00 d0       	rcall	.+0      	; 0x246c <handle_internal_commands+0x350>
    246c:	00 d0       	rcall	.+0      	; 0x246e <handle_internal_commands+0x352>
    246e:	ed b7       	in	r30, 0x3d	; 61
    2470:	fe b7       	in	r31, 0x3e	; 62
    2472:	31 96       	adiw	r30, 0x01	; 1
    2474:	8b 81       	ldd	r24, Y+3	; 0x03
    2476:	9c 81       	ldd	r25, Y+4	; 0x04
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	80 83       	st	Z, r24
    247c:	8e ec       	ldi	r24, 0xCE	; 206
    247e:	93 e0       	ldi	r25, 0x03	; 3
    2480:	93 83       	std	Z+3, r25	; 0x03
    2482:	82 83       	std	Z+2, r24	; 0x02
    2484:	35 83       	std	Z+5, r19	; 0x05
    2486:	24 83       	std	Z+4, r18	; 0x04
    2488:	0e 94 0d 02 	call	0x41a	; 0x41a <sprintf>
    248c:	8d b7       	in	r24, 0x3d	; 61
    248e:	9e b7       	in	r25, 0x3e	; 62
    2490:	06 96       	adiw	r24, 0x06	; 6
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	9e bf       	out	0x3e, r25	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	8d bf       	out	0x3d, r24	; 61
		uart_puts(cmd);
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	9c 81       	ldd	r25, Y+4	; 0x04
    24a0:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
		sprintf(cmd, "Linebreak value: %u\n\r", linebreak);
    24a4:	80 91 94 04 	lds	r24, 0x0494
    24a8:	28 2f       	mov	r18, r24
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	00 d0       	rcall	.+0      	; 0x24ae <handle_internal_commands+0x392>
    24ae:	00 d0       	rcall	.+0      	; 0x24b0 <handle_internal_commands+0x394>
    24b0:	00 d0       	rcall	.+0      	; 0x24b2 <handle_internal_commands+0x396>
    24b2:	ed b7       	in	r30, 0x3d	; 61
    24b4:	fe b7       	in	r31, 0x3e	; 62
    24b6:	31 96       	adiw	r30, 0x01	; 1
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	91 83       	std	Z+1, r25	; 0x01
    24be:	80 83       	st	Z, r24
    24c0:	81 ee       	ldi	r24, 0xE1	; 225
    24c2:	93 e0       	ldi	r25, 0x03	; 3
    24c4:	93 83       	std	Z+3, r25	; 0x03
    24c6:	82 83       	std	Z+2, r24	; 0x02
    24c8:	35 83       	std	Z+5, r19	; 0x05
    24ca:	24 83       	std	Z+4, r18	; 0x04
    24cc:	0e 94 0d 02 	call	0x41a	; 0x41a <sprintf>
    24d0:	2d b7       	in	r18, 0x3d	; 61
    24d2:	3e b7       	in	r19, 0x3e	; 62
    24d4:	2a 5f       	subi	r18, 0xFA	; 250
    24d6:	3f 4f       	sbci	r19, 0xFF	; 255
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	3e bf       	out	0x3e, r19	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	2d bf       	out	0x3d, r18	; 61
		uart_puts(cmd);
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	9c 81       	ldd	r25, Y+4	; 0x04
    24e6:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
    24ea:	18 c0       	rjmp	.+48     	; 0x251c <handle_internal_commands+0x400>
		break;
	case 'e':
		uart_puts_P("Check errors\n\r");
    24ec:	88 eb       	ldi	r24, 0xB8	; 184
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
		check_errors();
    24f4:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <check_errors>
    24f8:	11 c0       	rjmp	.+34     	; 0x251c <handle_internal_commands+0x400>
		break;
#ifdef ARB_TEST
	case 'z':
		uart_puts("arb\n\r");
    24fa:	87 ef       	ldi	r24, 0xF7	; 247
    24fc:	93 e0       	ldi	r25, 0x03	; 3
    24fe:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
		arb();
    2502:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <arb>
		uart_puts("arb done\n\r");
    2506:	8d ef       	ldi	r24, 0xFD	; 253
    2508:	93 e0       	ldi	r25, 0x03	; 3
    250a:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
    250e:	06 c0       	rjmp	.+12     	; 0x251c <handle_internal_commands+0x400>
		break;
#endif
	default:
		uart_puts_P("unknown command\n\r");
    2510:	86 ea       	ldi	r24, 0xA6	; 166
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
		printHelp();
    2518:	0e 94 70 13 	call	0x26e0	; 0x26e0 <printHelp>
		break;
	}
}
    251c:	26 96       	adiw	r28, 0x06	; 6
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	f8 94       	cli
    2522:	de bf       	out	0x3e, r29	; 62
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	cd bf       	out	0x3d, r28	; 61
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	08 95       	ret

0000252e <receiveAnswer>:

/**
 * Receives answer after command was sent.
 */
void receiveAnswer() {
    252e:	df 93       	push	r29
    2530:	cf 93       	push	r28
    2532:	00 d0       	rcall	.+0      	; 0x2534 <receiveAnswer+0x6>
    2534:	00 d0       	rcall	.+0      	; 0x2536 <receiveAnswer+0x8>
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
	uchar b, e;
	uchar colptr = 0;
    253a:	19 82       	std	Y+1, r1	; 0x01

	gpib_prepare_read();
    253c:	0e 94 99 05 	call	0xb32	; 0xb32 <gpib_prepare_read>
	// read the answer until EOI is detected (then e becomes true)
	do {
		// gpib bus receive
		e = gpib_receive(&b);
    2540:	ce 01       	movw	r24, r28
    2542:	03 96       	adiw	r24, 0x03	; 3
    2544:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <gpib_receive>
    2548:	8a 83       	std	Y+2, r24	; 0x02
		// write out character
		uart_putc(b);
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <uart_putc>
		if (linebreak && (colptr++ == linebreak)) {
    2550:	80 91 94 04 	lds	r24, 0x0494
    2554:	88 23       	and	r24, r24
    2556:	99 f0       	breq	.+38     	; 0x257e <receiveAnswer+0x50>
    2558:	90 91 94 04 	lds	r25, 0x0494
    255c:	1c 82       	std	Y+4, r1	; 0x04
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	89 17       	cp	r24, r25
    2562:	11 f4       	brne	.+4      	; 0x2568 <receiveAnswer+0x3a>
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	8c 83       	std	Y+4, r24	; 0x04
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	8f 5f       	subi	r24, 0xFF	; 255
    256c:	89 83       	std	Y+1, r24	; 0x01
    256e:	8c 81       	ldd	r24, Y+4	; 0x04
    2570:	88 23       	and	r24, r24
    2572:	29 f0       	breq	.+10     	; 0x257e <receiveAnswer+0x50>
			uart_puts_P("\n\r");
    2574:	8c ef       	ldi	r24, 0xFC	; 252
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
			colptr = 0;
    257c:	19 82       	std	Y+1, r1	; 0x01
		}
		//sprintf((char*)buf,"%02x - %c\n\r", b, b);
		//uart_puts((char*)buf);
	} while (!e);
    257e:	8a 81       	ldd	r24, Y+2	; 0x02
    2580:	88 23       	and	r24, r24
    2582:	f1 f2       	breq	.-68     	; 0x2540 <receiveAnswer+0x12>
}
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	08 95       	ret

00002592 <srq_occured>:

/**
 * Check if a SRQ occured
 */
uchar srq_occured(int* old_time) {
    2592:	df 93       	push	r29
    2594:	cf 93       	push	r28
    2596:	00 d0       	rcall	.+0      	; 0x2598 <srq_occured+0x6>
    2598:	0f 92       	push	r0
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	9b 83       	std	Y+3, r25	; 0x03
    25a0:	8a 83       	std	Y+2, r24	; 0x02
	uchar srq = 0;
    25a2:	19 82       	std	Y+1, r1	; 0x01
	if (*old_time == 0) {
    25a4:	ea 81       	ldd	r30, Y+2	; 0x02
    25a6:	fb 81       	ldd	r31, Y+3	; 0x03
    25a8:	80 81       	ld	r24, Z
    25aa:	91 81       	ldd	r25, Z+1	; 0x01
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	49 f4       	brne	.+18     	; 0x25c2 <srq_occured+0x30>
		// old_time value initialization on first call with value s
		*old_time = s;
    25b0:	80 91 05 06 	lds	r24, 0x0605
    25b4:	88 2f       	mov	r24, r24
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	ea 81       	ldd	r30, Y+2	; 0x02
    25ba:	fb 81       	ldd	r31, Y+3	; 0x03
    25bc:	91 83       	std	Z+1, r25	; 0x01
    25be:	80 83       	st	Z, r24
    25c0:	1e c0       	rjmp	.+60     	; 0x25fe <srq_occured+0x6c>
	} else {
		if (s > *old_time) {
    25c2:	80 91 05 06 	lds	r24, 0x0605
    25c6:	28 2f       	mov	r18, r24
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	ea 81       	ldd	r30, Y+2	; 0x02
    25cc:	fb 81       	ldd	r31, Y+3	; 0x03
    25ce:	80 81       	ld	r24, Z
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	82 17       	cp	r24, r18
    25d4:	93 07       	cpc	r25, r19
    25d6:	9c f4       	brge	.+38     	; 0x25fe <srq_occured+0x6c>
			// some time has passed - check if srq was set
			srq = bit_is_clear(PIND, G_SRQ);
    25d8:	e0 e3       	ldi	r30, 0x30	; 48
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	88 2f       	mov	r24, r24
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	80 74       	andi	r24, 0x40	; 64
    25e4:	90 70       	andi	r25, 0x00	; 0
    25e6:	19 82       	std	Y+1, r1	; 0x01
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	11 f4       	brne	.+4      	; 0x25f0 <srq_occured+0x5e>
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	89 83       	std	Y+1, r24	; 0x01
			if (srq)
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	88 23       	and	r24, r24
    25f4:	21 f0       	breq	.+8      	; 0x25fe <srq_occured+0x6c>
				uart_puts_P("\n\rSRQ detected.\n\r");
    25f6:	8f ef       	ldi	r24, 0xFF	; 255
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
		}
	}
	return srq;
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2600:	0f 90       	pop	r0
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	cf 91       	pop	r28
    2608:	df 91       	pop	r29
    260a:	08 95       	ret

0000260c <handle_srq>:

/**
 * Handles SRQs by doing serial poll
 *
 */
uchar handle_srq(uchar *buf, int *buf_ptr) {
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	28 97       	sbiw	r28, 0x08	; 8
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	9d 83       	std	Y+5, r25	; 0x05
    2622:	8c 83       	std	Y+4, r24	; 0x04
    2624:	7f 83       	std	Y+7, r23	; 0x07
    2626:	6e 83       	std	Y+6, r22	; 0x06
	uchar command_ready = 0;
    2628:	19 82       	std	Y+1, r1	; 0x01
	uint8_t primary, secondary;

	if (!gpib_serial_poll(&primary, &secondary)) {
    262a:	ce 01       	movw	r24, r28
    262c:	02 96       	adiw	r24, 0x02	; 2
    262e:	9e 01       	movw	r18, r28
    2630:	2d 5f       	subi	r18, 0xFD	; 253
    2632:	3f 4f       	sbci	r19, 0xFF	; 255
    2634:	b9 01       	movw	r22, r18
    2636:	0e 94 b9 0c 	call	0x1972	; 0x1972 <gpib_serial_poll>
    263a:	88 23       	and	r24, r24
    263c:	69 f4       	brne	.+26     	; 0x2658 <handle_srq+0x4c>
		uart_puts_P(
    263e:	8c e2       	ldi	r24, 0x2C	; 44
    2640:	91 e0       	ldi	r25, 0x01	; 1
    2642:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
				"\n\rSRQ emitter is not in list of known devices. SRQ Ignored.\n\r");
		uart_puts_P("\n\rSRQs are disabled now.\n\r");
    2646:	81 e1       	ldi	r24, 0x11	; 17
    2648:	91 e0       	ldi	r25, 0x01	; 1
    264a:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
		srq_enabled = 0;
    264e:	10 92 93 04 	sts	0x0493, r1
		return command_ready;
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	88 87       	std	Y+8, r24	; 0x08
    2656:	3a c0       	rjmp	.+116    	; 0x26cc <handle_srq+0xc0>
	}
	gpib_set_partner_address(primary, secondary);
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	9b 81       	ldd	r25, Y+3	; 0x03
    265c:	69 2f       	mov	r22, r25
    265e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <gpib_set_partner_address>

	if (gpib_get_flavour() == FLAVOUR_TEK) {
    2662:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <gpib_get_flavour>
    2666:	81 30       	cpi	r24, 0x01	; 1
    2668:	79 f5       	brne	.+94     	; 0x26c8 <handle_srq+0xbc>
		// Tek: check status for reason
		buf[0] = 'E';
    266a:	ec 81       	ldd	r30, Y+4	; 0x04
    266c:	fd 81       	ldd	r31, Y+5	; 0x05
    266e:	85 e4       	ldi	r24, 0x45	; 69
    2670:	80 83       	st	Z, r24
		buf[1] = 'V';
    2672:	8c 81       	ldd	r24, Y+4	; 0x04
    2674:	9d 81       	ldd	r25, Y+5	; 0x05
    2676:	fc 01       	movw	r30, r24
    2678:	31 96       	adiw	r30, 0x01	; 1
    267a:	86 e5       	ldi	r24, 0x56	; 86
    267c:	80 83       	st	Z, r24
		buf[2] = 'E';
    267e:	8c 81       	ldd	r24, Y+4	; 0x04
    2680:	9d 81       	ldd	r25, Y+5	; 0x05
    2682:	fc 01       	movw	r30, r24
    2684:	32 96       	adiw	r30, 0x02	; 2
    2686:	85 e4       	ldi	r24, 0x45	; 69
    2688:	80 83       	st	Z, r24
		buf[3] = 'N';
    268a:	8c 81       	ldd	r24, Y+4	; 0x04
    268c:	9d 81       	ldd	r25, Y+5	; 0x05
    268e:	fc 01       	movw	r30, r24
    2690:	33 96       	adiw	r30, 0x03	; 3
    2692:	8e e4       	ldi	r24, 0x4E	; 78
    2694:	80 83       	st	Z, r24
		buf[4] = 'T';
    2696:	8c 81       	ldd	r24, Y+4	; 0x04
    2698:	9d 81       	ldd	r25, Y+5	; 0x05
    269a:	fc 01       	movw	r30, r24
    269c:	34 96       	adiw	r30, 0x04	; 4
    269e:	84 e5       	ldi	r24, 0x54	; 84
    26a0:	80 83       	st	Z, r24
		buf[5] = '?';
    26a2:	8c 81       	ldd	r24, Y+4	; 0x04
    26a4:	9d 81       	ldd	r25, Y+5	; 0x05
    26a6:	fc 01       	movw	r30, r24
    26a8:	35 96       	adiw	r30, 0x05	; 5
    26aa:	8f e3       	ldi	r24, 0x3F	; 63
    26ac:	80 83       	st	Z, r24
		buf[6] = '\0';
    26ae:	8c 81       	ldd	r24, Y+4	; 0x04
    26b0:	9d 81       	ldd	r25, Y+5	; 0x05
    26b2:	fc 01       	movw	r30, r24
    26b4:	36 96       	adiw	r30, 0x06	; 6
    26b6:	10 82       	st	Z, r1
		*buf_ptr = 6;
    26b8:	ee 81       	ldd	r30, Y+6	; 0x06
    26ba:	ff 81       	ldd	r31, Y+7	; 0x07
    26bc:	86 e0       	ldi	r24, 0x06	; 6
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	91 83       	std	Z+1, r25	; 0x01
    26c2:	80 83       	st	Z, r24
		command_ready = 1;
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	89 83       	std	Y+1, r24	; 0x01
	}
	return command_ready;
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	88 87       	std	Y+8, r24	; 0x08
    26cc:	88 85       	ldd	r24, Y+8	; 0x08
}
    26ce:	28 96       	adiw	r28, 0x08	; 8
    26d0:	0f b6       	in	r0, 0x3f	; 63
    26d2:	f8 94       	cli
    26d4:	de bf       	out	0x3e, r29	; 62
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	cd bf       	out	0x3d, r28	; 61
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	08 95       	ret

000026e0 <printHelp>:

void printHelp() {
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	c0 55       	subi	r28, 0x50	; 80
    26ea:	d0 40       	sbci	r29, 0x00	; 0
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
	char buf[COMMAND_INPUT_BUFFER_SIZE];
	sprintf(buf, "\n\rGPIB Controller (Rev.%s) (c) spurtikus.de 2008-2015\n\r",
    26f6:	00 d0       	rcall	.+0      	; 0x26f8 <printHelp+0x18>
    26f8:	00 d0       	rcall	.+0      	; 0x26fa <printHelp+0x1a>
    26fa:	00 d0       	rcall	.+0      	; 0x26fc <printHelp+0x1c>
    26fc:	ed b7       	in	r30, 0x3d	; 61
    26fe:	fe b7       	in	r31, 0x3e	; 62
    2700:	31 96       	adiw	r30, 0x01	; 1
    2702:	ce 01       	movw	r24, r28
    2704:	01 96       	adiw	r24, 0x01	; 1
    2706:	91 83       	std	Z+1, r25	; 0x01
    2708:	80 83       	st	Z, r24
    270a:	88 e0       	ldi	r24, 0x08	; 8
    270c:	94 e0       	ldi	r25, 0x04	; 4
    270e:	93 83       	std	Z+3, r25	; 0x03
    2710:	82 83       	std	Z+2, r24	; 0x02
    2712:	80 e4       	ldi	r24, 0x40	; 64
    2714:	94 e0       	ldi	r25, 0x04	; 4
    2716:	95 83       	std	Z+5, r25	; 0x05
    2718:	84 83       	std	Z+4, r24	; 0x04
    271a:	0e 94 0d 02 	call	0x41a	; 0x41a <sprintf>
    271e:	8d b7       	in	r24, 0x3d	; 61
    2720:	9e b7       	in	r25, 0x3e	; 62
    2722:	06 96       	adiw	r24, 0x06	; 6
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	9e bf       	out	0x3e, r25	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	8d bf       	out	0x3d, r24	; 61
	REVISION);
	uart_puts(buf);
    272e:	ce 01       	movw	r24, r28
    2730:	01 96       	adiw	r24, 0x01	; 1
    2732:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
	uart_puts_P("Internal commands:\n\r");
    2736:	83 ea       	ldi	r24, 0xA3	; 163
    2738:	92 e0       	ldi	r25, 0x02	; 2
    273a:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
	uart_puts(
    273e:	84 e4       	ldi	r24, 0x44	; 68
    2740:	94 e0       	ldi	r25, 0x04	; 4
    2742:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
			".a <primary> [<secondary>] - set prim./second. address of remote device\n\r");
	uart_puts_P(".s <secondary> - set secondary address of remote device\n\r");
    2746:	89 e6       	ldi	r24, 0x69	; 105
    2748:	92 e0       	ldi	r25, 0x02	; 2
    274a:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
	uart_puts_P(
    274e:	89 e2       	ldi	r24, 0x29	; 41
    2750:	92 e0       	ldi	r25, 0x02	; 2
    2752:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
			".+ <n> - add partner device address to list of known devices.\n\r");
	uart_puts_P(
    2756:	84 ee       	ldi	r24, 0xE4	; 228
    2758:	91 e0       	ldi	r25, 0x01	; 1
    275a:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
			".- <n> - remove partner device address from list of known devices.\n\r");
	uart_puts_P(".x - toggle Xon/Xoff flow control.\n\r");
    275e:	8f eb       	ldi	r24, 0xBF	; 191
    2760:	91 e0       	ldi	r25, 0x01	; 1
    2762:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
	uart_puts_P(".h - print help.\n\r");
    2766:	8c ea       	ldi	r24, 0xAC	; 172
    2768:	91 e0       	ldi	r25, 0x01	; 1
    276a:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
	uart_puts_P(".e - dump error queue.\n\r");
    276e:	83 e9       	ldi	r24, 0x93	; 147
    2770:	91 e0       	ldi	r25, 0x01	; 1
    2772:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
	uart_puts_P(".i - dump info about controller state.\n\r");
    2776:	8a e6       	ldi	r24, 0x6A	; 106
    2778:	91 e0       	ldi	r25, 0x01	; 1
    277a:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
}
    277e:	c0 5b       	subi	r28, 0xB0	; 176
    2780:	df 4f       	sbci	r29, 0xFF	; 255
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	f8 94       	cli
    2786:	de bf       	out	0x3e, r29	; 62
    2788:	0f be       	out	0x3f, r0	; 63
    278a:	cd bf       	out	0x3d, r28	; 61
    278c:	cf 91       	pop	r28
    278e:	df 91       	pop	r29
    2790:	08 95       	ret

00002792 <state_machine>:
 * 2. send user entered command, if available, to listeners (act as talker, set devices to listeners)
 * 3. if command was a query, read the answer from device (become listener and set device to talker)
 * 4. check if SRQ occured and handle that
 *
 */
void state_machine() {
    2792:	df 93       	push	r29
    2794:	cf 93       	push	r28
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    279a:	c9 55       	subi	r28, 0x59	; 89
    279c:	d0 40       	sbci	r29, 0x00	; 0
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	f8 94       	cli
    27a2:	de bf       	out	0x3e, r29	; 62
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	cd bf       	out	0x3d, r28	; 61
	int old_time = 0;
    27a8:	1e 82       	std	Y+6, r1	; 0x06
    27aa:	1d 82       	std	Y+5, r1	; 0x05
	uchar is_query = 0;
    27ac:	1c 82       	std	Y+4, r1	; 0x04
	uchar do_prompt = 1;
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	8b 83       	std	Y+3, r24	; 0x03
	uchar ch;

	/** buffers used for commands and output strings */
	uchar buf[COMMAND_INPUT_BUFFER_SIZE];
	/** pointer in buffer */
	int buf_ptr = 0;
    27b2:	fe 01       	movw	r30, r28
    27b4:	e8 5a       	subi	r30, 0xA8	; 168
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	11 82       	std	Z+1, r1	; 0x01
    27ba:	10 82       	st	Z, r1

	uchar state = S_INITIAL;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	8a 83       	std	Y+2, r24	; 0x02
	for (;;) {
		if (state == S_INITIAL) {
    27c0:	8a 81       	ldd	r24, Y+2	; 0x02
    27c2:	81 30       	cpi	r24, 0x01	; 1
    27c4:	49 f4       	brne	.+18     	; 0x27d8 <state_machine+0x46>
			if (do_prompt) {
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	88 23       	and	r24, r24
    27ca:	31 f0       	breq	.+12     	; 0x27d8 <state_machine+0x46>
				uart_puts("> ");
    27cc:	8e e8       	ldi	r24, 0x8E	; 142
    27ce:	94 e0       	ldi	r25, 0x04	; 4
    27d0:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_puts>
				do_prompt = 0;
    27d4:	1b 82       	std	Y+3, r1	; 0x03
				is_query = 0;
    27d6:	1c 82       	std	Y+4, r1	; 0x04
			}
		}

		if (!input_char(&ch))
    27d8:	ce 01       	movw	r24, r28
    27da:	07 96       	adiw	r24, 0x07	; 7
    27dc:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <input_char>
    27e0:	88 23       	and	r24, r24
    27e2:	71 f3       	breq	.-36     	; 0x27c0 <state_machine+0x2e>
			continue;

		// byte received. Decide with state what to do.

		if (state == S_INITIAL) {
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	81 30       	cpi	r24, 0x01	; 1
    27e8:	41 f4       	brne	.+16     	; 0x27fa <state_machine+0x68>
			// internal or external command?
			if (ch == '.') {
    27ea:	8f 81       	ldd	r24, Y+7	; 0x07
    27ec:	8e 32       	cpi	r24, 0x2E	; 46
    27ee:	19 f4       	brne	.+6      	; 0x27f6 <state_machine+0x64>
				// internal command
				state = S_FIRST_BYTE_INT;
    27f0:	82 e0       	ldi	r24, 0x02	; 2
    27f2:	8a 83       	std	Y+2, r24	; 0x02
    27f4:	02 c0       	rjmp	.+4      	; 0x27fa <state_machine+0x68>
			} else {
				// gpib command
				state = S_FIRST_BYTE_GPIB;
    27f6:	83 e0       	ldi	r24, 0x03	; 3
    27f8:	8a 83       	std	Y+2, r24	; 0x02

			}
		}

		if (state == S_FIRST_BYTE_INT) {
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02
    27fc:	82 30       	cpi	r24, 0x02	; 2
    27fe:	59 f5       	brne	.+86     	; 0x2856 <state_machine+0xc4>
			buf[0] = ch;
    2800:	8f 81       	ldd	r24, Y+7	; 0x07
    2802:	88 87       	std	Y+8, r24	; 0x08
			buf_ptr = 1;
    2804:	fe 01       	movw	r30, r28
    2806:	e8 5a       	subi	r30, 0xA8	; 168
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	91 83       	std	Z+1, r25	; 0x01
    2810:	80 83       	st	Z, r24
			// send received character back depending on global flag
			if (rs232_remote_echo) {
    2812:	80 91 91 04 	lds	r24, 0x0491
    2816:	88 23       	and	r24, r24
    2818:	19 f0       	breq	.+6      	; 0x2820 <state_machine+0x8e>
				uart_putc((unsigned char) ch);
    281a:	8f 81       	ldd	r24, Y+7	; 0x07
    281c:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <uart_putc>
			}
			// collect line until CR
			while (!input_process(buf, &buf_ptr))
    2820:	ce 01       	movw	r24, r28
    2822:	08 96       	adiw	r24, 0x08	; 8
    2824:	9e 01       	movw	r18, r28
    2826:	28 5a       	subi	r18, 0xA8	; 168
    2828:	3f 4f       	sbci	r19, 0xFF	; 255
    282a:	b9 01       	movw	r22, r18
    282c:	0e 94 46 10 	call	0x208c	; 0x208c <input_process>
    2830:	88 23       	and	r24, r24
    2832:	b1 f3       	breq	.-20     	; 0x2820 <state_machine+0x8e>
				;
			uart_puts_P("\n\r");
    2834:	81 ef       	ldi	r24, 0xF1	; 241
    2836:	92 e0       	ldi	r25, 0x02	; 2
    2838:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
			// execute internal command
			handle_internal_commands(buf);
    283c:	ce 01       	movw	r24, r28
    283e:	08 96       	adiw	r24, 0x08	; 8
    2840:	0e 94 8e 10 	call	0x211c	; 0x211c <handle_internal_commands>
			// reset local vars
			state = S_INITIAL;
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	8a 83       	std	Y+2, r24	; 0x02
			buf_ptr = 0;
    2848:	fe 01       	movw	r30, r28
    284a:	e8 5a       	subi	r30, 0xA8	; 168
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	11 82       	std	Z+1, r1	; 0x01
    2850:	10 82       	st	Z, r1
			do_prompt = 1;
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	8b 83       	std	Y+3, r24	; 0x03
		}

		if (state == S_FIRST_BYTE_GPIB) {
    2856:	8a 81       	ldd	r24, Y+2	; 0x02
    2858:	83 30       	cpi	r24, 0x03	; 3
    285a:	d1 f4       	brne	.+52     	; 0x2890 <state_machine+0xfe>
			// GPIB command. Check if a partner was defined.
			if (gpib_get_partner_pad() == ADDRESS_NOT_SET) {
    285c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <gpib_get_partner_pad>
    2860:	8f 3f       	cpi	r24, 0xFF	; 255
    2862:	79 f4       	brne	.+30     	; 0x2882 <state_machine+0xf0>
				uart_puts_P(
    2864:	8e eb       	ldi	r24, 0xBE	; 190
    2866:	92 e0       	ldi	r25, 0x02	; 2
    2868:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
						"Device address is not set. Can not send command.\n\r");
				// reset local vars
				state = S_INITIAL;
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	8a 83       	std	Y+2, r24	; 0x02
				buf_ptr = 0;
    2870:	fe 01       	movw	r30, r28
    2872:	e8 5a       	subi	r30, 0xA8	; 168
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	11 82       	std	Z+1, r1	; 0x01
    2878:	10 82       	st	Z, r1
				do_prompt = 1;
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	8b 83       	std	Y+3, r24	; 0x03
				is_query = 0;
    287e:	1c 82       	std	Y+4, r1	; 0x04
    2880:	07 c0       	rjmp	.+14     	; 0x2890 <state_machine+0xfe>
			} else {
				// write prologue
				state = S_SEND_BYTES;
    2882:	84 e0       	ldi	r24, 0x04	; 4
    2884:	8a 83       	std	Y+2, r24	; 0x02
				gpib_prepare_write();
    2886:	0e 94 64 05 	call	0xac8	; 0xac8 <gpib_prepare_write>
				gpib_write_prologue(0);
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <gpib_write_prologue>
			}
		}

		if (state == S_SEND_BYTES) {
    2890:	8a 81       	ldd	r24, Y+2	; 0x02
    2892:	84 30       	cpi	r24, 0x04	; 4
    2894:	29 f5       	brne	.+74     	; 0x28e0 <state_machine+0x14e>
			// send received character back depending on global flag
			if (rs232_remote_echo) {
    2896:	80 91 91 04 	lds	r24, 0x0491
    289a:	88 23       	and	r24, r24
    289c:	19 f0       	breq	.+6      	; 0x28a4 <state_machine+0x112>
				uart_putc((unsigned char) ch);
    289e:	8f 81       	ldd	r24, Y+7	; 0x07
    28a0:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <uart_putc>
			}
			uchar isLastByte = (ch == ASCII_CODE_CR);
    28a4:	8f 81       	ldd	r24, Y+7	; 0x07
    28a6:	19 82       	std	Y+1, r1	; 0x01
    28a8:	8d 30       	cpi	r24, 0x0D	; 13
    28aa:	11 f4       	brne	.+4      	; 0x28b0 <state_machine+0x11e>
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	89 83       	std	Y+1, r24	; 0x01
			gpib_write_byte(ch, isLastByte);
    28b0:	8f 81       	ldd	r24, Y+7	; 0x07
    28b2:	69 81       	ldd	r22, Y+1	; 0x01
    28b4:	0e 94 87 08 	call	0x110e	; 0x110e <gpib_write_byte>

			if (ch == '?') {
    28b8:	8f 81       	ldd	r24, Y+7	; 0x07
    28ba:	8f 33       	cpi	r24, 0x3F	; 63
    28bc:	11 f4       	brne	.+4      	; 0x28c2 <state_machine+0x130>
				is_query = 1;
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	8c 83       	std	Y+4, r24	; 0x04
			}

			if (isLastByte) {
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	88 23       	and	r24, r24
    28c6:	61 f0       	breq	.+24     	; 0x28e0 <state_machine+0x14e>
				uart_puts_P("\n\r");
    28c8:	8b eb       	ldi	r24, 0xBB	; 187
    28ca:	92 e0       	ldi	r25, 0x02	; 2
    28cc:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
				if (is_query) {
    28d0:	8c 81       	ldd	r24, Y+4	; 0x04
    28d2:	88 23       	and	r24, r24
    28d4:	19 f0       	breq	.+6      	; 0x28dc <state_machine+0x14a>
					//uart_puts("Query. Will check for answer.\n\r");
					state = S_GPIB_ANSWER;
    28d6:	85 e0       	ldi	r24, 0x05	; 5
    28d8:	8a 83       	std	Y+2, r24	; 0x02
    28da:	02 c0       	rjmp	.+4      	; 0x28e0 <state_machine+0x14e>
				} else {
					//uart_puts("Command only.\n\r");
					state = S_GPIB_NO_ANSWER;
    28dc:	86 e0       	ldi	r24, 0x06	; 6
    28de:	8a 83       	std	Y+2, r24	; 0x02
				}
			}
		}

		// write epilogue
		if (state == S_GPIB_ANSWER || state == S_GPIB_NO_ANSWER) {
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	85 30       	cpi	r24, 0x05	; 5
    28e4:	19 f0       	breq	.+6      	; 0x28ec <state_machine+0x15a>
    28e6:	8a 81       	ldd	r24, Y+2	; 0x02
    28e8:	86 30       	cpi	r24, 0x06	; 6
    28ea:	41 f4       	brne	.+16     	; 0x28fc <state_machine+0x16a>
			gpib_write_epilogue(0);
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	0e 94 1d 08 	call	0x103a	; 0x103a <gpib_write_epilogue>
			buf_ptr = 0;
    28f2:	fe 01       	movw	r30, r28
    28f4:	e8 5a       	subi	r30, 0xA8	; 168
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	11 82       	std	Z+1, r1	; 0x01
    28fa:	10 82       	st	Z, r1
		}

		// if we sent a query, read the answer
		if (state == S_GPIB_ANSWER) {
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	85 30       	cpi	r24, 0x05	; 5
    2900:	21 f4       	brne	.+8      	; 0x290a <state_machine+0x178>
			receiveAnswer();
    2902:	0e 94 97 12 	call	0x252e	; 0x252e <receiveAnswer>
			state = S_FINAL;
    2906:	87 e0       	ldi	r24, 0x07	; 7
    2908:	8a 83       	std	Y+2, r24	; 0x02
		}

		// finalize state machine
		if (state == S_GPIB_NO_ANSWER || state == S_FINAL) {
    290a:	8a 81       	ldd	r24, Y+2	; 0x02
    290c:	86 30       	cpi	r24, 0x06	; 6
    290e:	19 f0       	breq	.+6      	; 0x2916 <state_machine+0x184>
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	87 30       	cpi	r24, 0x07	; 7
    2914:	51 f4       	brne	.+20     	; 0x292a <state_machine+0x198>
			// untalk/unlisten all partners
			gpib_untalkUnlisten();
    2916:	0e 94 ce 05 	call	0xb9c	; 0xb9c <gpib_untalkUnlisten>
			// some devices do not send cr,lf at command end, so create it always itself
			uart_puts_P("\n\r");
    291a:	88 eb       	ldi	r24, 0xB8	; 184
    291c:	92 e0       	ldi	r25, 0x02	; 2
    291e:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <uart_puts_p>
			do_prompt = 1;
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	8b 83       	std	Y+3, r24	; 0x03
			state = S_INITIAL;
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	8a 83       	std	Y+2, r24	; 0x02
		}

		// SRQ detection - do this every time when time value s has changed
		// s is incremented every second. So we check once a second.
		if (srq_enabled && srq_occured(&old_time)) {
    292a:	80 91 93 04 	lds	r24, 0x0493
    292e:	88 23       	and	r24, r24
    2930:	09 f4       	brne	.+2      	; 0x2934 <state_machine+0x1a2>
    2932:	46 cf       	rjmp	.-372    	; 0x27c0 <state_machine+0x2e>
    2934:	ce 01       	movw	r24, r28
    2936:	05 96       	adiw	r24, 0x05	; 5
    2938:	0e 94 c9 12 	call	0x2592	; 0x2592 <srq_occured>
    293c:	88 23       	and	r24, r24
    293e:	09 f4       	brne	.+2      	; 0x2942 <state_machine+0x1b0>
    2940:	3f cf       	rjmp	.-386    	; 0x27c0 <state_machine+0x2e>
			// TODO: make handle srq work again
			// the returned command_ready was interpreted to read in an answer
			// but this was turned of for new input loop
			// next two lines replace that but must be tested.
			if (handle_srq(buf, &buf_ptr)) {
    2942:	ce 01       	movw	r24, r28
    2944:	08 96       	adiw	r24, 0x08	; 8
    2946:	9e 01       	movw	r18, r28
    2948:	28 5a       	subi	r18, 0xA8	; 168
    294a:	3f 4f       	sbci	r19, 0xFF	; 255
    294c:	b9 01       	movw	r22, r18
    294e:	0e 94 06 13 	call	0x260c	; 0x260c <handle_srq>
    2952:	88 23       	and	r24, r24
    2954:	09 f4       	brne	.+2      	; 0x2958 <state_machine+0x1c6>
    2956:	34 cf       	rjmp	.-408    	; 0x27c0 <state_machine+0x2e>
				state = S_GPIB_ANSWER;
    2958:	85 e0       	ldi	r24, 0x05	; 5
    295a:	8a 83       	std	Y+2, r24	; 0x02
    295c:	31 cf       	rjmp	.-414    	; 0x27c0 <state_machine+0x2e>

0000295e <main>:
 * \brief Implementation of GPIB controller. Reads a command from RS232, sends it via bus.
 * If The command contains a '?', an answer from the device is expected and read in. The
 * answer then is printed out. If an SRQ occured, a serial poll is initiated.
 * 
 */
int main(void) {
    295e:	df 93       	push	r29
    2960:	cf 93       	push	r28
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
	/*
	 *  Initialize UART library, pass baudrate and avr cpu clock 
	 *  with the macro UART_BAUD_SELECT()
	 */DI();
    2966:	8c e0       	ldi	r24, 0x0C	; 12
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <uart_init>

	/*
	 * now enable interrupt, since UART and TIMER library is interrupt controlled
	 */sei();
    296e:	78 94       	sei

	/** print some usage infos */
	printHelp();
    2970:	0e 94 70 13 	call	0x26e0	; 0x26e0 <printHelp>

	// init timer for timeout detection
	timer16_init();
    2974:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <timer16_init>

	// init gpib lines
	gpib_init();
    2978:	0e 94 e5 04 	call	0x9ca	; 0x9ca <gpib_init>
	// init controller part - assign bus 
	gpib_controller_assign(0x00);
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <gpib_controller_assign>

	if (xonXoffMode) {
    2982:	80 91 92 04 	lds	r24, 0x0492
    2986:	88 23       	and	r24, r24
    2988:	19 f0       	breq	.+6      	; 0x2990 <main+0x32>
		uart_set_flow_control(FLOWCONTROL_XONXOFF);
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	0e 94 11 15 	call	0x2a22	; 0x2a22 <uart_set_flow_control>
	}

	// state machine loops forever
	state_machine();
    2990:	0e 94 c9 13 	call	0x2792	; 0x2792 <state_machine>
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	90 e0       	ldi	r25, 0x00	; 0
}
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <__vector_7>:

/**
 * Interrupt Service Routine - do not call directly
 *  This routine is called when the Timer Value TCNT1 reaches the Output Compare Register Value OCR1A
 */ 
ISR(TIMER1_COMPA_vect) {
    299e:	1f 92       	push	r1
    29a0:	0f 92       	push	r0
    29a2:	0f b6       	in	r0, 0x3f	; 63
    29a4:	0f 92       	push	r0
    29a6:	11 24       	eor	r1, r1
    29a8:	8f 93       	push	r24
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
#if XTAL_CPU % DEBOUNCE
	OCR1A = XTAL_CPU / DEBOUNCE - 1;
#endif
	if (--timer==0) {
    29b2:	80 91 04 06 	lds	r24, 0x0604
    29b6:	81 50       	subi	r24, 0x01	; 1
    29b8:	80 93 04 06 	sts	0x0604, r24
    29bc:	80 91 04 06 	lds	r24, 0x0604
    29c0:	88 23       	and	r24, r24
    29c2:	39 f4       	brne	.+14     	; 0x29d2 <__vector_7+0x34>
		timer=(uint8_t) DEBOUNCE;
    29c4:	10 92 04 06 	sts	0x0604, r1
		s++;
    29c8:	80 91 05 06 	lds	r24, 0x0605
    29cc:	8f 5f       	subi	r24, 0xFF	; 255
    29ce:	80 93 05 06 	sts	0x0605, r24
#if XTAL_CPU % DEBOUNCE
		OCR1A = XTAL_CPU / DEBOUNCE + XTAL_CPU % DEBOUNCE - 1;
#endif
	}
}
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	8f 91       	pop	r24
    29d8:	0f 90       	pop	r0
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	0f 90       	pop	r0
    29de:	1f 90       	pop	r1
    29e0:	18 95       	reti

000029e2 <timer16_init>:
/**
 * Timer initialisation.
 *  \brief initializes all registers ands sets second value 's' to zero. Timer is immediately
 * started.
 */ 
void timer16_init( void ) {
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62

	// OCR1A=XTAL/DEBOUNCE-1 -> Bei Erreichen dieses Wertes (31249) wird die ISR besucht
	// die ISR wird also alle 1/256s aufgerufen. Wenn man dort also bis 256 hochzählt, ist genau
	// 1 Sekunde um! 256 ist der Wert der Variable timer und wird über das define DEBOUNCE festgelegt

	TCCR1B = (1<<CS10) ^ (1<<WGM12);	// Prescaler of 1 | CTC mode
    29ea:	ee e4       	ldi	r30, 0x4E	; 78
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	89 e0       	ldi	r24, 0x09	; 9
    29f0:	80 83       	st	Z, r24
	OCR1A  = F_CPU/DEBOUNCE-1;		// Output compare register value 
    29f2:	ea e4       	ldi	r30, 0x4A	; 74
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	81 e1       	ldi	r24, 0x11	; 17
    29f8:	9a e7       	ldi	r25, 0x7A	; 122
    29fa:	91 83       	std	Z+1, r25	; 0x01
    29fc:	80 83       	st	Z, r24
	TCNT1 = 0; // Start value for timer register
    29fe:	ec e4       	ldi	r30, 0x4C	; 76
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	11 82       	std	Z+1, r1	; 0x01
    2a04:	10 82       	st	Z, r1
	s=0; // Initialize second value (s) to zero
    2a06:	10 92 05 06 	sts	0x0605, r1
	timer = (uint8_t)DEBOUNCE; 
    2a0a:	10 92 04 06 	sts	0x0604, r1
	TIMSK |= (1<<OCIE1A);		// activate timer interrupts which starts timer run
    2a0e:	a9 e5       	ldi	r26, 0x59	; 89
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	e9 e5       	ldi	r30, 0x59	; 89
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	80 61       	ori	r24, 0x10	; 16
    2a1a:	8c 93       	st	X, r24
}
    2a1c:	cf 91       	pop	r28
    2a1e:	df 91       	pop	r29
    2a20:	08 95       	ret

00002a22 <uart_set_flow_control>:
/** number of chars in rx buffer */
static volatile unsigned char chars_in_rx_buffer = 0;

void SendOutOfBand(unsigned char c);

void uart_set_flow_control(unsigned char _flowControl) {
    2a22:	df 93       	push	r29
    2a24:	cf 93       	push	r28
    2a26:	0f 92       	push	r0
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	89 83       	std	Y+1, r24	; 0x01
	flowControl = _flowControl;
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	80 93 a7 04 	sts	0x04A7, r24
}
    2a34:	0f 90       	pop	r0
    2a36:	cf 91       	pop	r28
    2a38:	df 91       	pop	r29
    2a3a:	08 95       	ret

00002a3c <uart_get_flow_control>:

unsigned char uart_get_flow_control() {
    2a3c:	df 93       	push	r29
    2a3e:	cf 93       	push	r28
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
	return flowControl;
    2a44:	80 91 a7 04 	lds	r24, 0x04A7
}
    2a48:	cf 91       	pop	r28
    2a4a:	df 91       	pop	r29
    2a4c:	08 95       	ret

00002a4e <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
 Function: UART Receive Complete interrupt
 Purpose:  called when the UART has received a character
 **************************************************************************/
{
    2a4e:	1f 92       	push	r1
    2a50:	0f 92       	push	r0
    2a52:	0f b6       	in	r0, 0x3f	; 63
    2a54:	0f 92       	push	r0
    2a56:	11 24       	eor	r1, r1
    2a58:	2f 93       	push	r18
    2a5a:	3f 93       	push	r19
    2a5c:	4f 93       	push	r20
    2a5e:	5f 93       	push	r21
    2a60:	6f 93       	push	r22
    2a62:	7f 93       	push	r23
    2a64:	8f 93       	push	r24
    2a66:	9f 93       	push	r25
    2a68:	af 93       	push	r26
    2a6a:	bf 93       	push	r27
    2a6c:	ef 93       	push	r30
    2a6e:	ff 93       	push	r31
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	00 d0       	rcall	.+0      	; 0x2a76 <__vector_13+0x28>
    2a76:	00 d0       	rcall	.+0      	; 0x2a78 <__vector_13+0x2a>
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	unsigned char usr;
	unsigned char lastRxError;

	/* read UART status register and UART data register */
	usr = UART0_STATUS;
    2a7c:	eb e2       	ldi	r30, 0x2B	; 43
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	8a 83       	std	Y+2, r24	; 0x02
	data = UART0_DATA;
    2a84:	ec e2       	ldi	r30, 0x2C	; 44
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	80 81       	ld	r24, Z
    2a8a:	8b 83       	std	Y+3, r24	; 0x03

	/* */
#if defined( AT90_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
    2a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8e:	88 71       	andi	r24, 0x18	; 24
    2a90:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif

	/* calculate buffer index */
	tmphead = (UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    2a92:	80 91 4d 05 	lds	r24, 0x054D
    2a96:	8f 5f       	subi	r24, 0xFF	; 255
    2a98:	8f 77       	andi	r24, 0x7F	; 127
    2a9a:	8c 83       	std	Y+4, r24	; 0x04

	if (tmphead == UART_RxTail) {
    2a9c:	90 91 4e 05 	lds	r25, 0x054E
    2aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa2:	89 17       	cp	r24, r25
    2aa4:	19 f4       	brne	.+6      	; 0x2aac <__vector_13+0x5e>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    2aa6:	82 e0       	ldi	r24, 0x02	; 2
    2aa8:	89 83       	std	Y+1, r24	; 0x01
    2aaa:	10 c0       	rjmp	.+32     	; 0x2acc <__vector_13+0x7e>
	} else {
		/* store new index */
		UART_RxHead = tmphead;
    2aac:	8c 81       	ldd	r24, Y+4	; 0x04
    2aae:	80 93 4d 05 	sts	0x054D, r24
		/* store received data in buffer */
		UART_RxBuf[tmphead] = data;
    2ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab4:	88 2f       	mov	r24, r24
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	fc 01       	movw	r30, r24
    2aba:	e5 53       	subi	r30, 0x35	; 53
    2abc:	fb 4f       	sbci	r31, 0xFB	; 251
    2abe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac0:	80 83       	st	Z, r24
		chars_in_rx_buffer++;
    2ac2:	80 91 aa 04 	lds	r24, 0x04AA
    2ac6:	8f 5f       	subi	r24, 0xFF	; 255
    2ac8:	80 93 aa 04 	sts	0x04AA, r24
	}

	if (flowControl == FLOWCONTROL_XONXOFF
    2acc:	80 91 a7 04 	lds	r24, 0x04A7
    2ad0:	81 30       	cpi	r24, 0x01	; 1
    2ad2:	99 f4       	brne	.+38     	; 0x2afa <__vector_13+0xac>
    2ad4:	80 91 aa 04 	lds	r24, 0x04AA
    2ad8:	81 36       	cpi	r24, 0x61	; 97
    2ada:	78 f0       	brcs	.+30     	; 0x2afa <__vector_13+0xac>
			&& chars_in_rx_buffer > UART_RX_BUFFER_MAX_MARK) {
		/* immediately send XOFF */
		oob_event = 1;
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	80 93 a8 04 	sts	0x04A8, r24
		if (!after_xoff_sent) {
    2ae2:	80 91 a9 04 	lds	r24, 0x04A9
    2ae6:	88 23       	and	r24, r24
    2ae8:	31 f4       	brne	.+12     	; 0x2af6 <__vector_13+0xa8>
			SendOutOfBand(XOFF);
    2aea:	83 e1       	ldi	r24, 0x13	; 19
    2aec:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <SendOutOfBand>
			after_xoff_sent = 1;
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	80 93 a9 04 	sts	0x04A9, r24
		}
		oob_event = 0;
    2af6:	10 92 a8 04 	sts	0x04A8, r1
	}

	UART_LastRxError = lastRxError;
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
    2afc:	80 93 4f 05 	sts	0x054F, r24
}
    2b00:	0f 90       	pop	r0
    2b02:	0f 90       	pop	r0
    2b04:	0f 90       	pop	r0
    2b06:	0f 90       	pop	r0
    2b08:	cf 91       	pop	r28
    2b0a:	df 91       	pop	r29
    2b0c:	ff 91       	pop	r31
    2b0e:	ef 91       	pop	r30
    2b10:	bf 91       	pop	r27
    2b12:	af 91       	pop	r26
    2b14:	9f 91       	pop	r25
    2b16:	8f 91       	pop	r24
    2b18:	7f 91       	pop	r23
    2b1a:	6f 91       	pop	r22
    2b1c:	5f 91       	pop	r21
    2b1e:	4f 91       	pop	r20
    2b20:	3f 91       	pop	r19
    2b22:	2f 91       	pop	r18
    2b24:	0f 90       	pop	r0
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	0f 90       	pop	r0
    2b2a:	1f 90       	pop	r1
    2b2c:	18 95       	reti

00002b2e <SendOutOfBand>:

void SendOutOfBand(unsigned char c) {
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	0f 92       	push	r0
    2b34:	cd b7       	in	r28, 0x3d	; 61
    2b36:	de b7       	in	r29, 0x3e	; 62
    2b38:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << UDRE)))
    2b3a:	eb e2       	ldi	r30, 0x2B	; 43
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	88 2f       	mov	r24, r24
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	80 72       	andi	r24, 0x20	; 32
    2b46:	90 70       	andi	r25, 0x00	; 0
    2b48:	00 97       	sbiw	r24, 0x00	; 0
    2b4a:	b9 f3       	breq	.-18     	; 0x2b3a <SendOutOfBand+0xc>
		;
	UDR = c;
    2b4c:	ec e2       	ldi	r30, 0x2C	; 44
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	80 83       	st	Z, r24
}
    2b54:	0f 90       	pop	r0
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	08 95       	ret

00002b5c <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
 Function: UART Data Register Empty interrupt
 Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
    2b5c:	1f 92       	push	r1
    2b5e:	0f 92       	push	r0
    2b60:	0f b6       	in	r0, 0x3f	; 63
    2b62:	0f 92       	push	r0
    2b64:	11 24       	eor	r1, r1
    2b66:	8f 93       	push	r24
    2b68:	9f 93       	push	r25
    2b6a:	af 93       	push	r26
    2b6c:	bf 93       	push	r27
    2b6e:	ef 93       	push	r30
    2b70:	ff 93       	push	r31
    2b72:	df 93       	push	r29
    2b74:	cf 93       	push	r28
    2b76:	0f 92       	push	r0
    2b78:	cd b7       	in	r28, 0x3d	; 61
    2b7a:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;

	if (oob_event) {
    2b7c:	80 91 a8 04 	lds	r24, 0x04A8
    2b80:	88 23       	and	r24, r24
    2b82:	01 f5       	brne	.+64     	; 0x2bc4 <__vector_14+0x68>
		/* suppress transmitting during oob handling */
		return;
	}
	if (UART_TxHead != UART_TxTail) {
    2b84:	90 91 4b 05 	lds	r25, 0x054B
    2b88:	80 91 4c 05 	lds	r24, 0x054C
    2b8c:	98 17       	cp	r25, r24
    2b8e:	99 f0       	breq	.+38     	; 0x2bb6 <__vector_14+0x5a>
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    2b90:	80 91 4c 05 	lds	r24, 0x054C
    2b94:	8f 5f       	subi	r24, 0xFF	; 255
    2b96:	8f 71       	andi	r24, 0x1F	; 31
    2b98:	89 83       	std	Y+1, r24	; 0x01
		UART_TxTail = tmptail;
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	80 93 4c 05 	sts	0x054C, r24
		/* get one byte from buffer and write it to UART */
		UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
    2ba0:	ac e2       	ldi	r26, 0x2C	; 44
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	88 2f       	mov	r24, r24
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	fc 01       	movw	r30, r24
    2bac:	e5 55       	subi	r30, 0x55	; 85
    2bae:	fb 4f       	sbci	r31, 0xFB	; 251
    2bb0:	80 81       	ld	r24, Z
    2bb2:	8c 93       	st	X, r24
    2bb4:	07 c0       	rjmp	.+14     	; 0x2bc4 <__vector_14+0x68>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
    2bb6:	aa e2       	ldi	r26, 0x2A	; 42
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	ea e2       	ldi	r30, 0x2A	; 42
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
    2bc0:	8f 7d       	andi	r24, 0xDF	; 223
    2bc2:	8c 93       	st	X, r24
	}
}
    2bc4:	0f 90       	pop	r0
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	ff 91       	pop	r31
    2bcc:	ef 91       	pop	r30
    2bce:	bf 91       	pop	r27
    2bd0:	af 91       	pop	r26
    2bd2:	9f 91       	pop	r25
    2bd4:	8f 91       	pop	r24
    2bd6:	0f 90       	pop	r0
    2bd8:	0f be       	out	0x3f, r0	; 63
    2bda:	0f 90       	pop	r0
    2bdc:	1f 90       	pop	r1
    2bde:	18 95       	reti

00002be0 <uart_init>:
 Function: uart_init()
 Purpose:  initialize UART and set baudrate
 Input:    baudrate using macro UART_BAUD_SELECT()
 Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate) {
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	00 d0       	rcall	.+0      	; 0x2be6 <uart_init+0x6>
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	9a 83       	std	Y+2, r25	; 0x02
    2bec:	89 83       	std	Y+1, r24	; 0x01
	UART_TxHead = 0;
    2bee:	10 92 4b 05 	sts	0x054B, r1
	UART_TxTail = 0;
    2bf2:	10 92 4c 05 	sts	0x054C, r1
	UART_RxHead = 0;
    2bf6:	10 92 4d 05 	sts	0x054D, r1
	UART_RxTail = 0;
    2bfa:	10 92 4e 05 	sts	0x054E, r1
	/* enable UART receiver and transmmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if (baudrate & 0x8000) {
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	9a 81       	ldd	r25, Y+2	; 0x02
    2c02:	99 23       	and	r25, r25
    2c04:	4c f4       	brge	.+18     	; 0x2c18 <uart_init+0x38>
		UART0_STATUS = (1 << U2X);  //Enable 2x speed
    2c06:	eb e2       	ldi	r30, 0x2B	; 43
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	82 e0       	ldi	r24, 0x02	; 2
    2c0c:	80 83       	st	Z, r24
		baudrate &= ~0x8000;
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	9a 81       	ldd	r25, Y+2	; 0x02
    2c12:	9f 77       	andi	r25, 0x7F	; 127
    2c14:	9a 83       	std	Y+2, r25	; 0x02
    2c16:	89 83       	std	Y+1, r24	; 0x01
	}
	UBRRH = (unsigned char) (baudrate >> 8);
    2c18:	e0 e4       	ldi	r30, 0x40	; 64
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c20:	89 2f       	mov	r24, r25
    2c22:	99 27       	eor	r25, r25
    2c24:	80 83       	st	Z, r24
	UBRRL = (unsigned char) baudrate;
    2c26:	e9 e2       	ldi	r30, 0x29	; 41
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	80 83       	st	Z, r24

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | (1 << RXEN) | (1 << TXEN);
    2c2e:	ea e2       	ldi	r30, 0x2A	; 42
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	88 e9       	ldi	r24, 0x98	; 152
    2c34:	80 83       	st	Z, r24

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
    2c36:	e0 e4       	ldi	r30, 0x40	; 64
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	86 e8       	ldi	r24, 0x86	; 134
    2c3c:	80 83       	st	Z, r24
	/* Enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	cf 91       	pop	r28
    2c44:	df 91       	pop	r29
    2c46:	08 95       	ret

00002c48 <uart_getc>:
 Function: uart_getc()
 Purpose:  return byte from ringbuffer
 Returns:  lower byte:  received byte from ringbuffer
 higher byte: last receive error
 **************************************************************************/
unsigned int uart_getc(void) {
    2c48:	df 93       	push	r29
    2c4a:	cf 93       	push	r28
    2c4c:	00 d0       	rcall	.+0      	; 0x2c4e <uart_getc+0x6>
    2c4e:	00 d0       	rcall	.+0      	; 0x2c50 <uart_getc+0x8>
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;
	unsigned char data;

	if (UART_RxHead == UART_RxTail) {
    2c54:	90 91 4d 05 	lds	r25, 0x054D
    2c58:	80 91 4e 05 	lds	r24, 0x054E
    2c5c:	98 17       	cp	r25, r24
    2c5e:	29 f4       	brne	.+10     	; 0x2c6a <uart_getc+0x22>
		return UART_NO_DATA; /* no data available */
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	91 e0       	ldi	r25, 0x01	; 1
    2c64:	9c 83       	std	Y+4, r25	; 0x04
    2c66:	8b 83       	std	Y+3, r24	; 0x03
    2c68:	3c c0       	rjmp	.+120    	; 0x2ce2 <uart_getc+0x9a>
	}

	/* calculate /store buffer index */
	tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    2c6a:	80 91 4e 05 	lds	r24, 0x054E
    2c6e:	8f 5f       	subi	r24, 0xFF	; 255
    2c70:	8f 77       	andi	r24, 0x7F	; 127
    2c72:	8a 83       	std	Y+2, r24	; 0x02
	UART_RxTail = tmptail;
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	80 93 4e 05 	sts	0x054E, r24

	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7c:	88 2f       	mov	r24, r24
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	fc 01       	movw	r30, r24
    2c82:	e5 53       	subi	r30, 0x35	; 53
    2c84:	fb 4f       	sbci	r31, 0xFB	; 251
    2c86:	80 81       	ld	r24, Z
    2c88:	89 83       	std	Y+1, r24	; 0x01
	if (chars_in_rx_buffer > 0) {
    2c8a:	80 91 aa 04 	lds	r24, 0x04AA
    2c8e:	88 23       	and	r24, r24
    2c90:	29 f0       	breq	.+10     	; 0x2c9c <uart_getc+0x54>
		chars_in_rx_buffer--;
    2c92:	80 91 aa 04 	lds	r24, 0x04AA
    2c96:	81 50       	subi	r24, 0x01	; 1
    2c98:	80 93 aa 04 	sts	0x04AA, r24
	}
	if ((flowControl == FLOWCONTROL_XONXOFF) && after_xoff_sent) {
    2c9c:	80 91 a7 04 	lds	r24, 0x04A7
    2ca0:	81 30       	cpi	r24, 0x01	; 1
    2ca2:	91 f4       	brne	.+36     	; 0x2cc8 <uart_getc+0x80>
    2ca4:	80 91 a9 04 	lds	r24, 0x04A9
    2ca8:	88 23       	and	r24, r24
    2caa:	71 f0       	breq	.+28     	; 0x2cc8 <uart_getc+0x80>
		if (chars_in_rx_buffer <= UART_RX_BUFFER_MIN_MARK) {
    2cac:	80 91 aa 04 	lds	r24, 0x04AA
    2cb0:	81 31       	cpi	r24, 0x11	; 17
    2cb2:	50 f4       	brcc	.+20     	; 0x2cc8 <uart_getc+0x80>
			/* immediately send XON */
			oob_event = 1;
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	80 93 a8 04 	sts	0x04A8, r24
			SendOutOfBand(XON);
    2cba:	81 e1       	ldi	r24, 0x11	; 17
    2cbc:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <SendOutOfBand>
			after_xoff_sent = 0;
    2cc0:	10 92 a9 04 	sts	0x04A9, r1
			oob_event = 0;
    2cc4:	10 92 a8 04 	sts	0x04A8, r1
		}
	}

	return (UART_LastRxError << 8) + data;
    2cc8:	80 91 4f 05 	lds	r24, 0x054F
    2ccc:	88 2f       	mov	r24, r24
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	38 2f       	mov	r19, r24
    2cd2:	22 27       	eor	r18, r18
    2cd4:	89 81       	ldd	r24, Y+1	; 0x01
    2cd6:	88 2f       	mov	r24, r24
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	82 0f       	add	r24, r18
    2cdc:	93 1f       	adc	r25, r19
    2cde:	9c 83       	std	Y+4, r25	; 0x04
    2ce0:	8b 83       	std	Y+3, r24	; 0x03
    2ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce4:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    2ce6:	0f 90       	pop	r0
    2ce8:	0f 90       	pop	r0
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	cf 91       	pop	r28
    2cf0:	df 91       	pop	r29
    2cf2:	08 95       	ret

00002cf4 <uart_putc>:
 Function: uart_putc()
 Purpose:  write byte to ringbuffer for transmitting via UART
 Input:    byte to be transmitted
 Returns:  none
 **************************************************************************/
void uart_putc(unsigned char data) {
    2cf4:	df 93       	push	r29
    2cf6:	cf 93       	push	r28
    2cf8:	00 d0       	rcall	.+0      	; 0x2cfa <uart_putc+0x6>
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
    2cfe:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char tmphead;

	tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    2d00:	80 91 4b 05 	lds	r24, 0x054B
    2d04:	8f 5f       	subi	r24, 0xFF	; 255
    2d06:	8f 71       	andi	r24, 0x1F	; 31
    2d08:	89 83       	std	Y+1, r24	; 0x01

	while (tmphead == UART_TxTail) {
    2d0a:	90 91 4c 05 	lds	r25, 0x054C
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	89 17       	cp	r24, r25
    2d12:	d9 f3       	breq	.-10     	; 0x2d0a <uart_putc+0x16>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    2d14:	89 81       	ldd	r24, Y+1	; 0x01
    2d16:	88 2f       	mov	r24, r24
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	fc 01       	movw	r30, r24
    2d1c:	e5 55       	subi	r30, 0x55	; 85
    2d1e:	fb 4f       	sbci	r31, 0xFB	; 251
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	80 93 4b 05 	sts	0x054B, r24

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    2d2a:	aa e2       	ldi	r26, 0x2A	; 42
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	ea e2       	ldi	r30, 0x2A	; 42
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	80 62       	ori	r24, 0x20	; 32
    2d36:	8c 93       	st	X, r24

}/* uart_putc */
    2d38:	0f 90       	pop	r0
    2d3a:	0f 90       	pop	r0
    2d3c:	cf 91       	pop	r28
    2d3e:	df 91       	pop	r29
    2d40:	08 95       	ret

00002d42 <uart_puts>:
 Function: uart_puts()
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
    2d42:	df 93       	push	r29
    2d44:	cf 93       	push	r28
    2d46:	00 d0       	rcall	.+0      	; 0x2d48 <uart_puts+0x6>
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
    2d4c:	9a 83       	std	Y+2, r25	; 0x02
    2d4e:	89 83       	std	Y+1, r24	; 0x01
    2d50:	0b c0       	rjmp	.+22     	; 0x2d68 <uart_puts+0x26>
	while (*s)
		uart_putc(*s++);
    2d52:	e9 81       	ldd	r30, Y+1	; 0x01
    2d54:	fa 81       	ldd	r31, Y+2	; 0x02
    2d56:	20 81       	ld	r18, Z
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
    2d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5c:	01 96       	adiw	r24, 0x01	; 1
    2d5e:	9a 83       	std	Y+2, r25	; 0x02
    2d60:	89 83       	std	Y+1, r24	; 0x01
    2d62:	82 2f       	mov	r24, r18
    2d64:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <uart_putc>
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
	while (*s)
    2d68:	e9 81       	ldd	r30, Y+1	; 0x01
    2d6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d6c:	80 81       	ld	r24, Z
    2d6e:	88 23       	and	r24, r24
    2d70:	81 f7       	brne	.-32     	; 0x2d52 <uart_puts+0x10>
		uart_putc(*s++);

}/* uart_puts */
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	cf 91       	pop	r28
    2d78:	df 91       	pop	r29
    2d7a:	08 95       	ret

00002d7c <uart_puts_p>:
 Function: uart_puts_p()
 Purpose:  transmit string from program memory to UART
 Input:    program memory string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
    2d7c:	df 93       	push	r29
    2d7e:	cf 93       	push	r28
    2d80:	00 d0       	rcall	.+0      	; 0x2d82 <uart_puts_p+0x6>
    2d82:	00 d0       	rcall	.+0      	; 0x2d84 <uart_puts_p+0x8>
    2d84:	00 d0       	rcall	.+0      	; 0x2d86 <uart_puts_p+0xa>
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	9d 83       	std	Y+5, r25	; 0x05
    2d8c:	8c 83       	std	Y+4, r24	; 0x04
    2d8e:	03 c0       	rjmp	.+6      	; 0x2d96 <uart_puts_p+0x1a>
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
		uart_putc(c);
    2d90:	8e 81       	ldd	r24, Y+6	; 0x06
    2d92:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <uart_putc>
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
    2d96:	8c 81       	ldd	r24, Y+4	; 0x04
    2d98:	9d 81       	ldd	r25, Y+5	; 0x05
    2d9a:	9b 83       	std	Y+3, r25	; 0x03
    2d9c:	8a 83       	std	Y+2, r24	; 0x02
    2d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2da0:	9d 81       	ldd	r25, Y+5	; 0x05
    2da2:	01 96       	adiw	r24, 0x01	; 1
    2da4:	9d 83       	std	Y+5, r25	; 0x05
    2da6:	8c 83       	std	Y+4, r24	; 0x04
    2da8:	ea 81       	ldd	r30, Y+2	; 0x02
    2daa:	fb 81       	ldd	r31, Y+3	; 0x03
    2dac:	84 91       	lpm	r24, Z+
    2dae:	89 83       	std	Y+1, r24	; 0x01
    2db0:	89 81       	ldd	r24, Y+1	; 0x01
    2db2:	8e 83       	std	Y+6, r24	; 0x06
    2db4:	8e 81       	ldd	r24, Y+6	; 0x06
    2db6:	88 23       	and	r24, r24
    2db8:	59 f7       	brne	.-42     	; 0x2d90 <uart_puts_p+0x14>
		uart_putc(c);

}/* uart_puts_p */
    2dba:	26 96       	adiw	r28, 0x06	; 6
    2dbc:	0f b6       	in	r0, 0x3f	; 63
    2dbe:	f8 94       	cli
    2dc0:	de bf       	out	0x3e, r29	; 62
    2dc2:	0f be       	out	0x3f, r0	; 63
    2dc4:	cd bf       	out	0x3d, r28	; 61
    2dc6:	cf 91       	pop	r28
    2dc8:	df 91       	pop	r29
    2dca:	08 95       	ret

00002dcc <__divmodhi4>:
    2dcc:	97 fb       	bst	r25, 7
    2dce:	09 2e       	mov	r0, r25
    2dd0:	07 26       	eor	r0, r23
    2dd2:	0a d0       	rcall	.+20     	; 0x2de8 <__divmodhi4_neg1>
    2dd4:	77 fd       	sbrc	r23, 7
    2dd6:	04 d0       	rcall	.+8      	; 0x2de0 <__divmodhi4_neg2>
    2dd8:	0c d0       	rcall	.+24     	; 0x2df2 <__udivmodhi4>
    2dda:	06 d0       	rcall	.+12     	; 0x2de8 <__divmodhi4_neg1>
    2ddc:	00 20       	and	r0, r0
    2dde:	1a f4       	brpl	.+6      	; 0x2de6 <__divmodhi4_exit>

00002de0 <__divmodhi4_neg2>:
    2de0:	70 95       	com	r23
    2de2:	61 95       	neg	r22
    2de4:	7f 4f       	sbci	r23, 0xFF	; 255

00002de6 <__divmodhi4_exit>:
    2de6:	08 95       	ret

00002de8 <__divmodhi4_neg1>:
    2de8:	f6 f7       	brtc	.-4      	; 0x2de6 <__divmodhi4_exit>
    2dea:	90 95       	com	r25
    2dec:	81 95       	neg	r24
    2dee:	9f 4f       	sbci	r25, 0xFF	; 255
    2df0:	08 95       	ret

00002df2 <__udivmodhi4>:
    2df2:	aa 1b       	sub	r26, r26
    2df4:	bb 1b       	sub	r27, r27
    2df6:	51 e1       	ldi	r21, 0x11	; 17
    2df8:	07 c0       	rjmp	.+14     	; 0x2e08 <__udivmodhi4_ep>

00002dfa <__udivmodhi4_loop>:
    2dfa:	aa 1f       	adc	r26, r26
    2dfc:	bb 1f       	adc	r27, r27
    2dfe:	a6 17       	cp	r26, r22
    2e00:	b7 07       	cpc	r27, r23
    2e02:	10 f0       	brcs	.+4      	; 0x2e08 <__udivmodhi4_ep>
    2e04:	a6 1b       	sub	r26, r22
    2e06:	b7 0b       	sbc	r27, r23

00002e08 <__udivmodhi4_ep>:
    2e08:	88 1f       	adc	r24, r24
    2e0a:	99 1f       	adc	r25, r25
    2e0c:	5a 95       	dec	r21
    2e0e:	a9 f7       	brne	.-22     	; 0x2dfa <__udivmodhi4_loop>
    2e10:	80 95       	com	r24
    2e12:	90 95       	com	r25
    2e14:	bc 01       	movw	r22, r24
    2e16:	cd 01       	movw	r24, r26
    2e18:	08 95       	ret

00002e1a <__prologue_saves__>:
    2e1a:	2f 92       	push	r2
    2e1c:	3f 92       	push	r3
    2e1e:	4f 92       	push	r4
    2e20:	5f 92       	push	r5
    2e22:	6f 92       	push	r6
    2e24:	7f 92       	push	r7
    2e26:	8f 92       	push	r8
    2e28:	9f 92       	push	r9
    2e2a:	af 92       	push	r10
    2e2c:	bf 92       	push	r11
    2e2e:	cf 92       	push	r12
    2e30:	df 92       	push	r13
    2e32:	ef 92       	push	r14
    2e34:	ff 92       	push	r15
    2e36:	0f 93       	push	r16
    2e38:	1f 93       	push	r17
    2e3a:	cf 93       	push	r28
    2e3c:	df 93       	push	r29
    2e3e:	cd b7       	in	r28, 0x3d	; 61
    2e40:	de b7       	in	r29, 0x3e	; 62
    2e42:	ca 1b       	sub	r28, r26
    2e44:	db 0b       	sbc	r29, r27
    2e46:	0f b6       	in	r0, 0x3f	; 63
    2e48:	f8 94       	cli
    2e4a:	de bf       	out	0x3e, r29	; 62
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	cd bf       	out	0x3d, r28	; 61
    2e50:	09 94       	ijmp

00002e52 <__epilogue_restores__>:
    2e52:	2a 88       	ldd	r2, Y+18	; 0x12
    2e54:	39 88       	ldd	r3, Y+17	; 0x11
    2e56:	48 88       	ldd	r4, Y+16	; 0x10
    2e58:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e5a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e5c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e5e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e60:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e62:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e64:	b9 84       	ldd	r11, Y+9	; 0x09
    2e66:	c8 84       	ldd	r12, Y+8	; 0x08
    2e68:	df 80       	ldd	r13, Y+7	; 0x07
    2e6a:	ee 80       	ldd	r14, Y+6	; 0x06
    2e6c:	fd 80       	ldd	r15, Y+5	; 0x05
    2e6e:	0c 81       	ldd	r16, Y+4	; 0x04
    2e70:	1b 81       	ldd	r17, Y+3	; 0x03
    2e72:	aa 81       	ldd	r26, Y+2	; 0x02
    2e74:	b9 81       	ldd	r27, Y+1	; 0x01
    2e76:	ce 0f       	add	r28, r30
    2e78:	d1 1d       	adc	r29, r1
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	f8 94       	cli
    2e7e:	de bf       	out	0x3e, r29	; 62
    2e80:	0f be       	out	0x3f, r0	; 63
    2e82:	cd bf       	out	0x3d, r28	; 61
    2e84:	ed 01       	movw	r28, r26
    2e86:	08 95       	ret

00002e88 <_exit>:
    2e88:	f8 94       	cli

00002e8a <__stop_program>:
    2e8a:	ff cf       	rjmp	.-2      	; 0x2e8a <__stop_program>

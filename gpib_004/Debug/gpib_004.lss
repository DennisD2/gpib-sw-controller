
gpib_004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fd0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000041c  00800060  00002fd0  00003044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000170  0080047c  000033ec  00003460  2**0
                  ALLOC
  3 .stab         00005dfc  00000000  00000000  00003460  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002b55  00000000  00000000  0000925c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__ctors_end>
       4:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       8:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      10:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      14:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      18:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      1c:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__vector_7>
      20:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      24:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      28:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      2c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      30:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      34:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__vector_13>
      38:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__vector_14>
      3c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      40:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      44:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      48:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      4c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      50:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>

00000054 <__c.1878>:
      54:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
      64:	65 72 72 6f 72 3a 20 00                             error: .

0000006c <__c.1876>:
      6c:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
      7c:	6f 72 3a 20 00                                      or: .

00000081 <__c.1874>:
      81:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
      91:	3a 20 00                                            : .

00000094 <__c.1902>:
      94:	43 6f 6d 6d 61 6e 64 20 6f 76 65 72 66 6c 6f 77     Command overflow
      a4:	2e 00                                               ..

000000a6 <__c.1983>:
      a6:	75 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 0a     unknown command.
      b6:	0d 00                                               ..

000000b8 <__c.1980>:
      b8:	43 68 65 63 6b 20 65 72 72 6f 72 73 0a 0d 00        Check errors...

000000c7 <__c.1975>:
      c7:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      d7:	74 72 6f 6c 20 6f 66 66 0a 0d 00                    trol off...

000000e2 <__c.1973>:
      e2:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      f2:	74 72 6f 6c 20 6f 6e 0a 0d 00                       trol on...

000000fc <__c.1967>:
      fc:	53 52 51 73 20 64 69 73 61 62 6c 65 64 0a 0d 00     SRQs disabled...

0000010c <__c.1965>:
     10c:	53 52 51 73 20 65 6e 61 62 6c 65 64 0a 0d 00        SRQs enabled...

0000011b <__c.2039>:
     11b:	0a 0d 00                                            ...

0000011e <__c.2056>:
     11e:	0a 0d 53 52 51 20 64 65 74 65 63 74 65 64 2e 0a     ..SRQ detected..
     12e:	0d 00                                               ..

00000130 <__c.2086>:
     130:	0a 0d 53 52 51 73 20 61 72 65 20 64 69 73 61 62     ..SRQs are disab
     140:	6c 65 64 20 6e 6f 77 2e 0a 0d 00                    led now....

0000014b <__c.2084>:
     14b:	0a 0d 53 52 51 20 65 6d 69 74 74 65 72 20 69 73     ..SRQ emitter is
     15b:	20 6e 6f 74 20 69 6e 20 6c 69 73 74 20 6f 66 20      not in list of 
     16b:	6b 6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 20 53     known devices. S
     17b:	52 51 20 49 67 6e 6f 72 65 64 2e 0a 0d 00           RQ Ignored....

00000189 <__c.2125>:
     189:	2e 2d 20 3c 70 3e 20 5b 3c 73 3e 5d 20 2d 20 72     .- <p> [<s>] - r
     199:	65 6d 6f 76 65 20 70 61 72 74 6e 65 72 20 64 65     emove partner de
     1a9:	76 69 63 65 20 61 64 64 72 65 73 73 20 66 72 6f     vice address fro
     1b9:	6d 20 6c 69 73 74 20 6f 66 20 6b 6e 6f 77 6e 20     m list of known 
     1c9:	64 65 76 69 63 65 73 2e 0a 0d 00                    devices....

000001d4 <__c.2123>:
     1d4:	2e 2b 20 3c 70 3e 20 5b 3c 73 3e 5d 20 2d 20 61     .+ <p> [<s>] - a
     1e4:	64 64 20 70 61 72 74 6e 65 72 20 64 65 76 69 63     dd partner devic
     1f4:	65 20 61 64 64 72 65 73 73 20 74 6f 20 6c 69 73     e address to lis
     204:	74 20 6f 66 20 6b 6e 6f 77 6e 20 64 65 76 69 63     t of known devic
     214:	65 73 2e 0a 0d 00                                   es....

0000021a <__c.2121>:
     21a:	2e 78 20 2d 20 74 6f 67 67 6c 65 20 58 6f 6e 2f     .x - toggle Xon/
     22a:	58 6f 66 66 20 66 6c 6f 77 20 63 6f 6e 74 72 6f     Xoff flow contro
     23a:	6c 2e 0a 0d 00                                      l....

0000023f <__c.2119>:
     23f:	2e 73 20 3c 73 65 63 6f 6e 64 61 72 79 3e 20 2d     .s <secondary> -
     24f:	20 73 65 74 20 73 65 63 6f 6e 64 61 72 79 20 61      set secondary a
     25f:	64 64 72 65 73 73 20 6f 66 20 72 65 6d 6f 74 65     ddress of remote
     26f:	20 64 65 76 69 63 65 2e 0a 0d 00                     device....

0000027a <__c.2117>:
     27a:	2e 72 20 2d 20 74 6f 67 67 6c 65 20 53 52 51 20     .r - toggle SRQ 
     28a:	65 6e 61 62 6c 65 6d 65 6e 74 2e 0a 0d 00           enablement....

00000298 <__c.2115>:
     298:	2e 69 20 2d 20 64 75 6d 70 20 69 6e 66 6f 20 61     .i - dump info a
     2a8:	62 6f 75 74 20 63 6f 6e 74 72 6f 6c 6c 65 72 20     bout controller 
     2b8:	73 74 61 74 65 2e 0a 0d 00                          state....

000002c1 <__c.2113>:
     2c1:	2e 68 20 2d 20 70 72 69 6e 74 20 68 65 6c 70 2e     .h - print help.
     2d1:	0a 0d 00                                            ...

000002d4 <__c.2111>:
     2d4:	2e 66 20 2d 20 66 69 6e 64 20 70 61 72 74 6e 65     .f - find partne
     2e4:	72 73 2e 0a 0d 00                                   rs....

000002ea <__c.2109>:
     2ea:	2e 65 20 2d 20 64 75 6d 70 20 65 72 72 6f 72 20     .e - dump error 
     2fa:	71 75 65 75 65 2e 0a 0d 00                          queue....

00000303 <__c.2107>:
     303:	49 6e 74 65 72 6e 61 6c 20 63 6f 6d 6d 61 6e 64     Internal command
     313:	73 3a 0a 0d 00                                      s:...

00000318 <__c.2147>:
     318:	0a 0d 00                                            ...

0000031b <__c.2145>:
     31b:	0a 0d 00                                            ...

0000031e <__c.2142>:
     31e:	44 65 76 69 63 65 20 61 64 64 72 65 73 73 20 69     Device address i
     32e:	73 20 6e 6f 74 20 73 65 74 2e 20 43 61 6e 20 6e     s not set. Can n
     33e:	6f 74 20 73 65 6e 64 20 63 6f 6d 6d 61 6e 64 2e     ot send command.
     34e:	0a 0d 00                                            ...

00000351 <__c.2140>:
     351:	0a 0d 00                                            ...

00000354 <__ctors_end>:
     354:	11 24       	eor	r1, r1
     356:	1f be       	out	0x3f, r1	; 63
     358:	cf e5       	ldi	r28, 0x5F	; 95
     35a:	d8 e0       	ldi	r29, 0x08	; 8
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	cd bf       	out	0x3d, r28	; 61

00000360 <__do_copy_data>:
     360:	14 e0       	ldi	r17, 0x04	; 4
     362:	a0 e6       	ldi	r26, 0x60	; 96
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	e0 ed       	ldi	r30, 0xD0	; 208
     368:	ff e2       	ldi	r31, 0x2F	; 47
     36a:	02 c0       	rjmp	.+4      	; 0x370 <.do_copy_data_start>

0000036c <.do_copy_data_loop>:
     36c:	05 90       	lpm	r0, Z+
     36e:	0d 92       	st	X+, r0

00000370 <.do_copy_data_start>:
     370:	ac 37       	cpi	r26, 0x7C	; 124
     372:	b1 07       	cpc	r27, r17
     374:	d9 f7       	brne	.-10     	; 0x36c <.do_copy_data_loop>

00000376 <__do_clear_bss>:
     376:	15 e0       	ldi	r17, 0x05	; 5
     378:	ac e7       	ldi	r26, 0x7C	; 124
     37a:	b4 e0       	ldi	r27, 0x04	; 4
     37c:	01 c0       	rjmp	.+2      	; 0x380 <.do_clear_bss_start>

0000037e <.do_clear_bss_loop>:
     37e:	1d 92       	st	X+, r1

00000380 <.do_clear_bss_start>:
     380:	ac 3e       	cpi	r26, 0xEC	; 236
     382:	b1 07       	cpc	r27, r17
     384:	e1 f7       	brne	.-8      	; 0x37e <.do_clear_bss_loop>
     386:	0e 94 78 15 	call	0x2af0	; 0x2af0 <main>
     38a:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <_exit>

0000038e <__bad_interrupt>:
     38e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000392 <atoi>:
     392:	fc 01       	movw	r30, r24
     394:	88 27       	eor	r24, r24
     396:	99 27       	eor	r25, r25
     398:	e8 94       	clt
     39a:	21 91       	ld	r18, Z+
     39c:	20 32       	cpi	r18, 0x20	; 32
     39e:	e9 f3       	breq	.-6      	; 0x39a <atoi+0x8>
     3a0:	29 30       	cpi	r18, 0x09	; 9
     3a2:	10 f0       	brcs	.+4      	; 0x3a8 <atoi+0x16>
     3a4:	2e 30       	cpi	r18, 0x0E	; 14
     3a6:	c8 f3       	brcs	.-14     	; 0x39a <atoi+0x8>
     3a8:	2b 32       	cpi	r18, 0x2B	; 43
     3aa:	41 f0       	breq	.+16     	; 0x3bc <atoi+0x2a>
     3ac:	2d 32       	cpi	r18, 0x2D	; 45
     3ae:	39 f4       	brne	.+14     	; 0x3be <atoi+0x2c>
     3b0:	68 94       	set
     3b2:	04 c0       	rjmp	.+8      	; 0x3bc <atoi+0x2a>
     3b4:	0e 94 35 02 	call	0x46a	; 0x46a <__mulhi_const_10>
     3b8:	82 0f       	add	r24, r18
     3ba:	91 1d       	adc	r25, r1
     3bc:	21 91       	ld	r18, Z+
     3be:	20 53       	subi	r18, 0x30	; 48
     3c0:	2a 30       	cpi	r18, 0x0A	; 10
     3c2:	c0 f3       	brcs	.-16     	; 0x3b4 <atoi+0x22>
     3c4:	1e f4       	brtc	.+6      	; 0x3cc <atoi+0x3a>
     3c6:	90 95       	com	r25
     3c8:	81 95       	neg	r24
     3ca:	9f 4f       	sbci	r25, 0xFF	; 255
     3cc:	08 95       	ret

000003ce <strtok>:
     3ce:	4c e7       	ldi	r20, 0x7C	; 124
     3d0:	54 e0       	ldi	r21, 0x04	; 4
     3d2:	0e 94 03 02 	call	0x406	; 0x406 <strtok_r>
     3d6:	08 95       	ret

000003d8 <strlen>:
     3d8:	fc 01       	movw	r30, r24
     3da:	01 90       	ld	r0, Z+
     3dc:	00 20       	and	r0, r0
     3de:	e9 f7       	brne	.-6      	; 0x3da <strlen+0x2>
     3e0:	80 95       	com	r24
     3e2:	90 95       	com	r25
     3e4:	8e 0f       	add	r24, r30
     3e6:	9f 1f       	adc	r25, r31
     3e8:	08 95       	ret

000003ea <strncmp>:
     3ea:	fb 01       	movw	r30, r22
     3ec:	dc 01       	movw	r26, r24
     3ee:	41 50       	subi	r20, 0x01	; 1
     3f0:	50 40       	sbci	r21, 0x00	; 0
     3f2:	30 f0       	brcs	.+12     	; 0x400 <strncmp+0x16>
     3f4:	8d 91       	ld	r24, X+
     3f6:	01 90       	ld	r0, Z+
     3f8:	80 19       	sub	r24, r0
     3fa:	19 f4       	brne	.+6      	; 0x402 <strncmp+0x18>
     3fc:	00 20       	and	r0, r0
     3fe:	b9 f7       	brne	.-18     	; 0x3ee <strncmp+0x4>
     400:	88 1b       	sub	r24, r24
     402:	99 0b       	sbc	r25, r25
     404:	08 95       	ret

00000406 <strtok_r>:
     406:	00 97       	sbiw	r24, 0x00	; 0
     408:	31 f4       	brne	.+12     	; 0x416 <strtok_r+0x10>
     40a:	da 01       	movw	r26, r20
     40c:	8d 91       	ld	r24, X+
     40e:	9c 91       	ld	r25, X
     410:	00 97       	sbiw	r24, 0x00	; 0
     412:	09 f4       	brne	.+2      	; 0x416 <strtok_r+0x10>
     414:	0e c0       	rjmp	.+28     	; 0x432 <strtok_r+0x2c>
     416:	dc 01       	movw	r26, r24
     418:	fb 01       	movw	r30, r22
     41a:	3d 91       	ld	r19, X+
     41c:	21 91       	ld	r18, Z+
     41e:	22 23       	and	r18, r18
     420:	19 f0       	breq	.+6      	; 0x428 <strtok_r+0x22>
     422:	32 17       	cp	r19, r18
     424:	c9 f3       	breq	.-14     	; 0x418 <strtok_r+0x12>
     426:	fa cf       	rjmp	.-12     	; 0x41c <strtok_r+0x16>
     428:	33 23       	and	r19, r19
     42a:	31 f4       	brne	.+12     	; 0x438 <strtok_r+0x32>
     42c:	da 01       	movw	r26, r20
     42e:	1d 92       	st	X+, r1
     430:	1c 92       	st	X, r1
     432:	88 27       	eor	r24, r24
     434:	99 27       	eor	r25, r25
     436:	08 95       	ret
     438:	11 97       	sbiw	r26, 0x01	; 1
     43a:	af 93       	push	r26
     43c:	bf 93       	push	r27
     43e:	fb 01       	movw	r30, r22
     440:	3d 91       	ld	r19, X+
     442:	21 91       	ld	r18, Z+
     444:	32 17       	cp	r19, r18
     446:	71 f4       	brne	.+28     	; 0x464 <strtok_r+0x5e>
     448:	33 23       	and	r19, r19
     44a:	21 f4       	brne	.+8      	; 0x454 <strtok_r+0x4e>
     44c:	88 27       	eor	r24, r24
     44e:	99 27       	eor	r25, r25
     450:	11 97       	sbiw	r26, 0x01	; 1
     452:	02 c0       	rjmp	.+4      	; 0x458 <strtok_r+0x52>
     454:	1e 92       	st	-X, r1
     456:	11 96       	adiw	r26, 0x01	; 1
     458:	fa 01       	movw	r30, r20
     45a:	a1 93       	st	Z+, r26
     45c:	b0 83       	st	Z, r27
     45e:	9f 91       	pop	r25
     460:	8f 91       	pop	r24
     462:	08 95       	ret
     464:	22 23       	and	r18, r18
     466:	69 f7       	brne	.-38     	; 0x442 <strtok_r+0x3c>
     468:	ea cf       	rjmp	.-44     	; 0x43e <strtok_r+0x38>

0000046a <__mulhi_const_10>:
     46a:	7a e0       	ldi	r23, 0x0A	; 10
     46c:	97 9f       	mul	r25, r23
     46e:	90 2d       	mov	r25, r0
     470:	87 9f       	mul	r24, r23
     472:	80 2d       	mov	r24, r0
     474:	91 0d       	add	r25, r1
     476:	11 24       	eor	r1, r1
     478:	08 95       	ret

0000047a <sprintf>:
     47a:	ae e0       	ldi	r26, 0x0E	; 14
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e3 e4       	ldi	r30, 0x43	; 67
     480:	f2 e0       	ldi	r31, 0x02	; 2
     482:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__prologue_saves__+0x1c>
     486:	0d 89       	ldd	r16, Y+21	; 0x15
     488:	1e 89       	ldd	r17, Y+22	; 0x16
     48a:	86 e0       	ldi	r24, 0x06	; 6
     48c:	8c 83       	std	Y+4, r24	; 0x04
     48e:	1a 83       	std	Y+2, r17	; 0x02
     490:	09 83       	std	Y+1, r16	; 0x01
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	9f e7       	ldi	r25, 0x7F	; 127
     496:	9e 83       	std	Y+6, r25	; 0x06
     498:	8d 83       	std	Y+5, r24	; 0x05
     49a:	9e 01       	movw	r18, r28
     49c:	27 5e       	subi	r18, 0xE7	; 231
     49e:	3f 4f       	sbci	r19, 0xFF	; 255
     4a0:	ce 01       	movw	r24, r28
     4a2:	01 96       	adiw	r24, 0x01	; 1
     4a4:	6f 89       	ldd	r22, Y+23	; 0x17
     4a6:	78 8d       	ldd	r23, Y+24	; 0x18
     4a8:	a9 01       	movw	r20, r18
     4aa:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vfprintf>
     4ae:	2f 81       	ldd	r18, Y+7	; 0x07
     4b0:	38 85       	ldd	r19, Y+8	; 0x08
     4b2:	02 0f       	add	r16, r18
     4b4:	13 1f       	adc	r17, r19
     4b6:	f8 01       	movw	r30, r16
     4b8:	10 82       	st	Z, r1
     4ba:	2e 96       	adiw	r28, 0x0e	; 14
     4bc:	e4 e0       	ldi	r30, 0x04	; 4
     4be:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__epilogue_restores__+0x1c>

000004c2 <vfprintf>:
     4c2:	ab e0       	ldi	r26, 0x0B	; 11
     4c4:	b0 e0       	ldi	r27, 0x00	; 0
     4c6:	e7 e6       	ldi	r30, 0x67	; 103
     4c8:	f2 e0       	ldi	r31, 0x02	; 2
     4ca:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__prologue_saves__>
     4ce:	3c 01       	movw	r6, r24
     4d0:	2b 01       	movw	r4, r22
     4d2:	5a 01       	movw	r10, r20
     4d4:	fc 01       	movw	r30, r24
     4d6:	17 82       	std	Z+7, r1	; 0x07
     4d8:	16 82       	std	Z+6, r1	; 0x06
     4da:	83 81       	ldd	r24, Z+3	; 0x03
     4dc:	81 fd       	sbrc	r24, 1
     4de:	03 c0       	rjmp	.+6      	; 0x4e6 <vfprintf+0x24>
     4e0:	6f ef       	ldi	r22, 0xFF	; 255
     4e2:	7f ef       	ldi	r23, 0xFF	; 255
     4e4:	c6 c1       	rjmp	.+908    	; 0x872 <__stack+0x13>
     4e6:	9a e0       	ldi	r25, 0x0A	; 10
     4e8:	89 2e       	mov	r8, r25
     4ea:	1e 01       	movw	r2, r28
     4ec:	08 94       	sec
     4ee:	21 1c       	adc	r2, r1
     4f0:	31 1c       	adc	r3, r1
     4f2:	f3 01       	movw	r30, r6
     4f4:	23 81       	ldd	r18, Z+3	; 0x03
     4f6:	f2 01       	movw	r30, r4
     4f8:	23 fd       	sbrc	r18, 3
     4fa:	85 91       	lpm	r24, Z+
     4fc:	23 ff       	sbrs	r18, 3
     4fe:	81 91       	ld	r24, Z+
     500:	2f 01       	movw	r4, r30
     502:	88 23       	and	r24, r24
     504:	09 f4       	brne	.+2      	; 0x508 <vfprintf+0x46>
     506:	b2 c1       	rjmp	.+868    	; 0x86c <__stack+0xd>
     508:	85 32       	cpi	r24, 0x25	; 37
     50a:	39 f4       	brne	.+14     	; 0x51a <vfprintf+0x58>
     50c:	23 fd       	sbrc	r18, 3
     50e:	85 91       	lpm	r24, Z+
     510:	23 ff       	sbrs	r18, 3
     512:	81 91       	ld	r24, Z+
     514:	2f 01       	movw	r4, r30
     516:	85 32       	cpi	r24, 0x25	; 37
     518:	29 f4       	brne	.+10     	; 0x524 <vfprintf+0x62>
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	b3 01       	movw	r22, r6
     51e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <fputc>
     522:	e7 cf       	rjmp	.-50     	; 0x4f2 <vfprintf+0x30>
     524:	98 2f       	mov	r25, r24
     526:	ff 24       	eor	r15, r15
     528:	ee 24       	eor	r14, r14
     52a:	99 24       	eor	r9, r9
     52c:	ff e1       	ldi	r31, 0x1F	; 31
     52e:	ff 15       	cp	r31, r15
     530:	d0 f0       	brcs	.+52     	; 0x566 <vfprintf+0xa4>
     532:	9b 32       	cpi	r25, 0x2B	; 43
     534:	69 f0       	breq	.+26     	; 0x550 <vfprintf+0x8e>
     536:	9c 32       	cpi	r25, 0x2C	; 44
     538:	28 f4       	brcc	.+10     	; 0x544 <vfprintf+0x82>
     53a:	90 32       	cpi	r25, 0x20	; 32
     53c:	59 f0       	breq	.+22     	; 0x554 <vfprintf+0x92>
     53e:	93 32       	cpi	r25, 0x23	; 35
     540:	91 f4       	brne	.+36     	; 0x566 <vfprintf+0xa4>
     542:	0e c0       	rjmp	.+28     	; 0x560 <vfprintf+0x9e>
     544:	9d 32       	cpi	r25, 0x2D	; 45
     546:	49 f0       	breq	.+18     	; 0x55a <vfprintf+0x98>
     548:	90 33       	cpi	r25, 0x30	; 48
     54a:	69 f4       	brne	.+26     	; 0x566 <vfprintf+0xa4>
     54c:	41 e0       	ldi	r20, 0x01	; 1
     54e:	24 c0       	rjmp	.+72     	; 0x598 <vfprintf+0xd6>
     550:	52 e0       	ldi	r21, 0x02	; 2
     552:	f5 2a       	or	r15, r21
     554:	84 e0       	ldi	r24, 0x04	; 4
     556:	f8 2a       	or	r15, r24
     558:	28 c0       	rjmp	.+80     	; 0x5aa <vfprintf+0xe8>
     55a:	98 e0       	ldi	r25, 0x08	; 8
     55c:	f9 2a       	or	r15, r25
     55e:	25 c0       	rjmp	.+74     	; 0x5aa <vfprintf+0xe8>
     560:	e0 e1       	ldi	r30, 0x10	; 16
     562:	fe 2a       	or	r15, r30
     564:	22 c0       	rjmp	.+68     	; 0x5aa <vfprintf+0xe8>
     566:	f7 fc       	sbrc	r15, 7
     568:	29 c0       	rjmp	.+82     	; 0x5bc <vfprintf+0xfa>
     56a:	89 2f       	mov	r24, r25
     56c:	80 53       	subi	r24, 0x30	; 48
     56e:	8a 30       	cpi	r24, 0x0A	; 10
     570:	70 f4       	brcc	.+28     	; 0x58e <vfprintf+0xcc>
     572:	f6 fe       	sbrs	r15, 6
     574:	05 c0       	rjmp	.+10     	; 0x580 <vfprintf+0xbe>
     576:	98 9c       	mul	r9, r8
     578:	90 2c       	mov	r9, r0
     57a:	11 24       	eor	r1, r1
     57c:	98 0e       	add	r9, r24
     57e:	15 c0       	rjmp	.+42     	; 0x5aa <vfprintf+0xe8>
     580:	e8 9c       	mul	r14, r8
     582:	e0 2c       	mov	r14, r0
     584:	11 24       	eor	r1, r1
     586:	e8 0e       	add	r14, r24
     588:	f0 e2       	ldi	r31, 0x20	; 32
     58a:	ff 2a       	or	r15, r31
     58c:	0e c0       	rjmp	.+28     	; 0x5aa <vfprintf+0xe8>
     58e:	9e 32       	cpi	r25, 0x2E	; 46
     590:	29 f4       	brne	.+10     	; 0x59c <vfprintf+0xda>
     592:	f6 fc       	sbrc	r15, 6
     594:	6b c1       	rjmp	.+726    	; 0x86c <__stack+0xd>
     596:	40 e4       	ldi	r20, 0x40	; 64
     598:	f4 2a       	or	r15, r20
     59a:	07 c0       	rjmp	.+14     	; 0x5aa <vfprintf+0xe8>
     59c:	9c 36       	cpi	r25, 0x6C	; 108
     59e:	19 f4       	brne	.+6      	; 0x5a6 <vfprintf+0xe4>
     5a0:	50 e8       	ldi	r21, 0x80	; 128
     5a2:	f5 2a       	or	r15, r21
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <vfprintf+0xe8>
     5a6:	98 36       	cpi	r25, 0x68	; 104
     5a8:	49 f4       	brne	.+18     	; 0x5bc <vfprintf+0xfa>
     5aa:	f2 01       	movw	r30, r4
     5ac:	23 fd       	sbrc	r18, 3
     5ae:	95 91       	lpm	r25, Z+
     5b0:	23 ff       	sbrs	r18, 3
     5b2:	91 91       	ld	r25, Z+
     5b4:	2f 01       	movw	r4, r30
     5b6:	99 23       	and	r25, r25
     5b8:	09 f0       	breq	.+2      	; 0x5bc <vfprintf+0xfa>
     5ba:	b8 cf       	rjmp	.-144    	; 0x52c <vfprintf+0x6a>
     5bc:	89 2f       	mov	r24, r25
     5be:	85 54       	subi	r24, 0x45	; 69
     5c0:	83 30       	cpi	r24, 0x03	; 3
     5c2:	18 f0       	brcs	.+6      	; 0x5ca <vfprintf+0x108>
     5c4:	80 52       	subi	r24, 0x20	; 32
     5c6:	83 30       	cpi	r24, 0x03	; 3
     5c8:	38 f4       	brcc	.+14     	; 0x5d8 <vfprintf+0x116>
     5ca:	44 e0       	ldi	r20, 0x04	; 4
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	a4 0e       	add	r10, r20
     5d0:	b5 1e       	adc	r11, r21
     5d2:	5f e3       	ldi	r21, 0x3F	; 63
     5d4:	59 83       	std	Y+1, r21	; 0x01
     5d6:	0f c0       	rjmp	.+30     	; 0x5f6 <vfprintf+0x134>
     5d8:	93 36       	cpi	r25, 0x63	; 99
     5da:	31 f0       	breq	.+12     	; 0x5e8 <vfprintf+0x126>
     5dc:	93 37       	cpi	r25, 0x73	; 115
     5de:	79 f0       	breq	.+30     	; 0x5fe <vfprintf+0x13c>
     5e0:	93 35       	cpi	r25, 0x53	; 83
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <vfprintf+0x124>
     5e4:	56 c0       	rjmp	.+172    	; 0x692 <vfprintf+0x1d0>
     5e6:	20 c0       	rjmp	.+64     	; 0x628 <vfprintf+0x166>
     5e8:	f5 01       	movw	r30, r10
     5ea:	80 81       	ld	r24, Z
     5ec:	89 83       	std	Y+1, r24	; 0x01
     5ee:	42 e0       	ldi	r20, 0x02	; 2
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	a4 0e       	add	r10, r20
     5f4:	b5 1e       	adc	r11, r21
     5f6:	61 01       	movw	r12, r2
     5f8:	01 e0       	ldi	r16, 0x01	; 1
     5fa:	10 e0       	ldi	r17, 0x00	; 0
     5fc:	12 c0       	rjmp	.+36     	; 0x622 <vfprintf+0x160>
     5fe:	f5 01       	movw	r30, r10
     600:	c0 80       	ld	r12, Z
     602:	d1 80       	ldd	r13, Z+1	; 0x01
     604:	f6 fc       	sbrc	r15, 6
     606:	03 c0       	rjmp	.+6      	; 0x60e <vfprintf+0x14c>
     608:	6f ef       	ldi	r22, 0xFF	; 255
     60a:	7f ef       	ldi	r23, 0xFF	; 255
     60c:	02 c0       	rjmp	.+4      	; 0x612 <vfprintf+0x150>
     60e:	69 2d       	mov	r22, r9
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	42 e0       	ldi	r20, 0x02	; 2
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	a4 0e       	add	r10, r20
     618:	b5 1e       	adc	r11, r21
     61a:	c6 01       	movw	r24, r12
     61c:	0e 94 49 04 	call	0x892	; 0x892 <strnlen>
     620:	8c 01       	movw	r16, r24
     622:	5f e7       	ldi	r21, 0x7F	; 127
     624:	f5 22       	and	r15, r21
     626:	14 c0       	rjmp	.+40     	; 0x650 <vfprintf+0x18e>
     628:	f5 01       	movw	r30, r10
     62a:	c0 80       	ld	r12, Z
     62c:	d1 80       	ldd	r13, Z+1	; 0x01
     62e:	f6 fc       	sbrc	r15, 6
     630:	03 c0       	rjmp	.+6      	; 0x638 <vfprintf+0x176>
     632:	6f ef       	ldi	r22, 0xFF	; 255
     634:	7f ef       	ldi	r23, 0xFF	; 255
     636:	02 c0       	rjmp	.+4      	; 0x63c <vfprintf+0x17a>
     638:	69 2d       	mov	r22, r9
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	42 e0       	ldi	r20, 0x02	; 2
     63e:	50 e0       	ldi	r21, 0x00	; 0
     640:	a4 0e       	add	r10, r20
     642:	b5 1e       	adc	r11, r21
     644:	c6 01       	movw	r24, r12
     646:	0e 94 3e 04 	call	0x87c	; 0x87c <strnlen_P>
     64a:	8c 01       	movw	r16, r24
     64c:	50 e8       	ldi	r21, 0x80	; 128
     64e:	f5 2a       	or	r15, r21
     650:	f3 fe       	sbrs	r15, 3
     652:	07 c0       	rjmp	.+14     	; 0x662 <vfprintf+0x1a0>
     654:	1a c0       	rjmp	.+52     	; 0x68a <vfprintf+0x1c8>
     656:	80 e2       	ldi	r24, 0x20	; 32
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	b3 01       	movw	r22, r6
     65c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <fputc>
     660:	ea 94       	dec	r14
     662:	8e 2d       	mov	r24, r14
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	08 17       	cp	r16, r24
     668:	19 07       	cpc	r17, r25
     66a:	a8 f3       	brcs	.-22     	; 0x656 <vfprintf+0x194>
     66c:	0e c0       	rjmp	.+28     	; 0x68a <vfprintf+0x1c8>
     66e:	f6 01       	movw	r30, r12
     670:	f7 fc       	sbrc	r15, 7
     672:	85 91       	lpm	r24, Z+
     674:	f7 fe       	sbrs	r15, 7
     676:	81 91       	ld	r24, Z+
     678:	6f 01       	movw	r12, r30
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	b3 01       	movw	r22, r6
     67e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <fputc>
     682:	e1 10       	cpse	r14, r1
     684:	ea 94       	dec	r14
     686:	01 50       	subi	r16, 0x01	; 1
     688:	10 40       	sbci	r17, 0x00	; 0
     68a:	01 15       	cp	r16, r1
     68c:	11 05       	cpc	r17, r1
     68e:	79 f7       	brne	.-34     	; 0x66e <vfprintf+0x1ac>
     690:	ea c0       	rjmp	.+468    	; 0x866 <__stack+0x7>
     692:	94 36       	cpi	r25, 0x64	; 100
     694:	11 f0       	breq	.+4      	; 0x69a <vfprintf+0x1d8>
     696:	99 36       	cpi	r25, 0x69	; 105
     698:	69 f5       	brne	.+90     	; 0x6f4 <vfprintf+0x232>
     69a:	f7 fe       	sbrs	r15, 7
     69c:	08 c0       	rjmp	.+16     	; 0x6ae <vfprintf+0x1ec>
     69e:	f5 01       	movw	r30, r10
     6a0:	20 81       	ld	r18, Z
     6a2:	31 81       	ldd	r19, Z+1	; 0x01
     6a4:	42 81       	ldd	r20, Z+2	; 0x02
     6a6:	53 81       	ldd	r21, Z+3	; 0x03
     6a8:	84 e0       	ldi	r24, 0x04	; 4
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0a c0       	rjmp	.+20     	; 0x6c2 <vfprintf+0x200>
     6ae:	f5 01       	movw	r30, r10
     6b0:	80 81       	ld	r24, Z
     6b2:	91 81       	ldd	r25, Z+1	; 0x01
     6b4:	9c 01       	movw	r18, r24
     6b6:	44 27       	eor	r20, r20
     6b8:	37 fd       	sbrc	r19, 7
     6ba:	40 95       	com	r20
     6bc:	54 2f       	mov	r21, r20
     6be:	82 e0       	ldi	r24, 0x02	; 2
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	a8 0e       	add	r10, r24
     6c4:	b9 1e       	adc	r11, r25
     6c6:	9f e6       	ldi	r25, 0x6F	; 111
     6c8:	f9 22       	and	r15, r25
     6ca:	57 ff       	sbrs	r21, 7
     6cc:	09 c0       	rjmp	.+18     	; 0x6e0 <vfprintf+0x21e>
     6ce:	50 95       	com	r21
     6d0:	40 95       	com	r20
     6d2:	30 95       	com	r19
     6d4:	21 95       	neg	r18
     6d6:	3f 4f       	sbci	r19, 0xFF	; 255
     6d8:	4f 4f       	sbci	r20, 0xFF	; 255
     6da:	5f 4f       	sbci	r21, 0xFF	; 255
     6dc:	e0 e8       	ldi	r30, 0x80	; 128
     6de:	fe 2a       	or	r15, r30
     6e0:	ca 01       	movw	r24, r20
     6e2:	b9 01       	movw	r22, r18
     6e4:	a1 01       	movw	r20, r2
     6e6:	2a e0       	ldi	r18, 0x0A	; 10
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	0e 94 80 04 	call	0x900	; 0x900 <__ultoa_invert>
     6ee:	d8 2e       	mov	r13, r24
     6f0:	d2 18       	sub	r13, r2
     6f2:	40 c0       	rjmp	.+128    	; 0x774 <vfprintf+0x2b2>
     6f4:	95 37       	cpi	r25, 0x75	; 117
     6f6:	29 f4       	brne	.+10     	; 0x702 <vfprintf+0x240>
     6f8:	1f 2d       	mov	r17, r15
     6fa:	1f 7e       	andi	r17, 0xEF	; 239
     6fc:	2a e0       	ldi	r18, 0x0A	; 10
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	1d c0       	rjmp	.+58     	; 0x73c <vfprintf+0x27a>
     702:	1f 2d       	mov	r17, r15
     704:	19 7f       	andi	r17, 0xF9	; 249
     706:	9f 36       	cpi	r25, 0x6F	; 111
     708:	61 f0       	breq	.+24     	; 0x722 <vfprintf+0x260>
     70a:	90 37       	cpi	r25, 0x70	; 112
     70c:	20 f4       	brcc	.+8      	; 0x716 <vfprintf+0x254>
     70e:	98 35       	cpi	r25, 0x58	; 88
     710:	09 f0       	breq	.+2      	; 0x714 <vfprintf+0x252>
     712:	ac c0       	rjmp	.+344    	; 0x86c <__stack+0xd>
     714:	0f c0       	rjmp	.+30     	; 0x734 <vfprintf+0x272>
     716:	90 37       	cpi	r25, 0x70	; 112
     718:	39 f0       	breq	.+14     	; 0x728 <vfprintf+0x266>
     71a:	98 37       	cpi	r25, 0x78	; 120
     71c:	09 f0       	breq	.+2      	; 0x720 <vfprintf+0x25e>
     71e:	a6 c0       	rjmp	.+332    	; 0x86c <__stack+0xd>
     720:	04 c0       	rjmp	.+8      	; 0x72a <vfprintf+0x268>
     722:	28 e0       	ldi	r18, 0x08	; 8
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	0a c0       	rjmp	.+20     	; 0x73c <vfprintf+0x27a>
     728:	10 61       	ori	r17, 0x10	; 16
     72a:	14 fd       	sbrc	r17, 4
     72c:	14 60       	ori	r17, 0x04	; 4
     72e:	20 e1       	ldi	r18, 0x10	; 16
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	04 c0       	rjmp	.+8      	; 0x73c <vfprintf+0x27a>
     734:	14 fd       	sbrc	r17, 4
     736:	16 60       	ori	r17, 0x06	; 6
     738:	20 e1       	ldi	r18, 0x10	; 16
     73a:	32 e0       	ldi	r19, 0x02	; 2
     73c:	17 ff       	sbrs	r17, 7
     73e:	08 c0       	rjmp	.+16     	; 0x750 <vfprintf+0x28e>
     740:	f5 01       	movw	r30, r10
     742:	60 81       	ld	r22, Z
     744:	71 81       	ldd	r23, Z+1	; 0x01
     746:	82 81       	ldd	r24, Z+2	; 0x02
     748:	93 81       	ldd	r25, Z+3	; 0x03
     74a:	44 e0       	ldi	r20, 0x04	; 4
     74c:	50 e0       	ldi	r21, 0x00	; 0
     74e:	08 c0       	rjmp	.+16     	; 0x760 <vfprintf+0x29e>
     750:	f5 01       	movw	r30, r10
     752:	80 81       	ld	r24, Z
     754:	91 81       	ldd	r25, Z+1	; 0x01
     756:	bc 01       	movw	r22, r24
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	42 e0       	ldi	r20, 0x02	; 2
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	a4 0e       	add	r10, r20
     762:	b5 1e       	adc	r11, r21
     764:	a1 01       	movw	r20, r2
     766:	0e 94 80 04 	call	0x900	; 0x900 <__ultoa_invert>
     76a:	d8 2e       	mov	r13, r24
     76c:	d2 18       	sub	r13, r2
     76e:	8f e7       	ldi	r24, 0x7F	; 127
     770:	f8 2e       	mov	r15, r24
     772:	f1 22       	and	r15, r17
     774:	f6 fe       	sbrs	r15, 6
     776:	0b c0       	rjmp	.+22     	; 0x78e <vfprintf+0x2cc>
     778:	5e ef       	ldi	r21, 0xFE	; 254
     77a:	f5 22       	and	r15, r21
     77c:	d9 14       	cp	r13, r9
     77e:	38 f4       	brcc	.+14     	; 0x78e <vfprintf+0x2cc>
     780:	f4 fe       	sbrs	r15, 4
     782:	07 c0       	rjmp	.+14     	; 0x792 <vfprintf+0x2d0>
     784:	f2 fc       	sbrc	r15, 2
     786:	05 c0       	rjmp	.+10     	; 0x792 <vfprintf+0x2d0>
     788:	8f ee       	ldi	r24, 0xEF	; 239
     78a:	f8 22       	and	r15, r24
     78c:	02 c0       	rjmp	.+4      	; 0x792 <vfprintf+0x2d0>
     78e:	1d 2d       	mov	r17, r13
     790:	01 c0       	rjmp	.+2      	; 0x794 <vfprintf+0x2d2>
     792:	19 2d       	mov	r17, r9
     794:	f4 fe       	sbrs	r15, 4
     796:	0d c0       	rjmp	.+26     	; 0x7b2 <vfprintf+0x2f0>
     798:	fe 01       	movw	r30, r28
     79a:	ed 0d       	add	r30, r13
     79c:	f1 1d       	adc	r31, r1
     79e:	80 81       	ld	r24, Z
     7a0:	80 33       	cpi	r24, 0x30	; 48
     7a2:	19 f4       	brne	.+6      	; 0x7aa <vfprintf+0x2e8>
     7a4:	99 ee       	ldi	r25, 0xE9	; 233
     7a6:	f9 22       	and	r15, r25
     7a8:	08 c0       	rjmp	.+16     	; 0x7ba <vfprintf+0x2f8>
     7aa:	1f 5f       	subi	r17, 0xFF	; 255
     7ac:	f2 fe       	sbrs	r15, 2
     7ae:	05 c0       	rjmp	.+10     	; 0x7ba <vfprintf+0x2f8>
     7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <vfprintf+0x2f6>
     7b2:	8f 2d       	mov	r24, r15
     7b4:	86 78       	andi	r24, 0x86	; 134
     7b6:	09 f0       	breq	.+2      	; 0x7ba <vfprintf+0x2f8>
     7b8:	1f 5f       	subi	r17, 0xFF	; 255
     7ba:	0f 2d       	mov	r16, r15
     7bc:	f3 fc       	sbrc	r15, 3
     7be:	14 c0       	rjmp	.+40     	; 0x7e8 <vfprintf+0x326>
     7c0:	f0 fe       	sbrs	r15, 0
     7c2:	0f c0       	rjmp	.+30     	; 0x7e2 <vfprintf+0x320>
     7c4:	1e 15       	cp	r17, r14
     7c6:	10 f0       	brcs	.+4      	; 0x7cc <vfprintf+0x30a>
     7c8:	9d 2c       	mov	r9, r13
     7ca:	0b c0       	rjmp	.+22     	; 0x7e2 <vfprintf+0x320>
     7cc:	9d 2c       	mov	r9, r13
     7ce:	9e 0c       	add	r9, r14
     7d0:	91 1a       	sub	r9, r17
     7d2:	1e 2d       	mov	r17, r14
     7d4:	06 c0       	rjmp	.+12     	; 0x7e2 <vfprintf+0x320>
     7d6:	80 e2       	ldi	r24, 0x20	; 32
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	b3 01       	movw	r22, r6
     7dc:	0e 94 54 04 	call	0x8a8	; 0x8a8 <fputc>
     7e0:	1f 5f       	subi	r17, 0xFF	; 255
     7e2:	1e 15       	cp	r17, r14
     7e4:	c0 f3       	brcs	.-16     	; 0x7d6 <vfprintf+0x314>
     7e6:	04 c0       	rjmp	.+8      	; 0x7f0 <vfprintf+0x32e>
     7e8:	1e 15       	cp	r17, r14
     7ea:	10 f4       	brcc	.+4      	; 0x7f0 <vfprintf+0x32e>
     7ec:	e1 1a       	sub	r14, r17
     7ee:	01 c0       	rjmp	.+2      	; 0x7f2 <vfprintf+0x330>
     7f0:	ee 24       	eor	r14, r14
     7f2:	04 ff       	sbrs	r16, 4
     7f4:	0f c0       	rjmp	.+30     	; 0x814 <vfprintf+0x352>
     7f6:	80 e3       	ldi	r24, 0x30	; 48
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	b3 01       	movw	r22, r6
     7fc:	0e 94 54 04 	call	0x8a8	; 0x8a8 <fputc>
     800:	02 ff       	sbrs	r16, 2
     802:	1d c0       	rjmp	.+58     	; 0x83e <vfprintf+0x37c>
     804:	01 fd       	sbrc	r16, 1
     806:	03 c0       	rjmp	.+6      	; 0x80e <vfprintf+0x34c>
     808:	88 e7       	ldi	r24, 0x78	; 120
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e c0       	rjmp	.+28     	; 0x82a <vfprintf+0x368>
     80e:	88 e5       	ldi	r24, 0x58	; 88
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0b c0       	rjmp	.+22     	; 0x82a <vfprintf+0x368>
     814:	80 2f       	mov	r24, r16
     816:	86 78       	andi	r24, 0x86	; 134
     818:	91 f0       	breq	.+36     	; 0x83e <vfprintf+0x37c>
     81a:	01 ff       	sbrs	r16, 1
     81c:	02 c0       	rjmp	.+4      	; 0x822 <vfprintf+0x360>
     81e:	8b e2       	ldi	r24, 0x2B	; 43
     820:	01 c0       	rjmp	.+2      	; 0x824 <vfprintf+0x362>
     822:	80 e2       	ldi	r24, 0x20	; 32
     824:	f7 fc       	sbrc	r15, 7
     826:	8d e2       	ldi	r24, 0x2D	; 45
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	b3 01       	movw	r22, r6
     82c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <fputc>
     830:	06 c0       	rjmp	.+12     	; 0x83e <vfprintf+0x37c>
     832:	80 e3       	ldi	r24, 0x30	; 48
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	b3 01       	movw	r22, r6
     838:	0e 94 54 04 	call	0x8a8	; 0x8a8 <fputc>
     83c:	9a 94       	dec	r9
     83e:	d9 14       	cp	r13, r9
     840:	c0 f3       	brcs	.-16     	; 0x832 <vfprintf+0x370>
     842:	da 94       	dec	r13
     844:	f1 01       	movw	r30, r2
     846:	ed 0d       	add	r30, r13
     848:	f1 1d       	adc	r31, r1
     84a:	80 81       	ld	r24, Z
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	b3 01       	movw	r22, r6
     850:	0e 94 54 04 	call	0x8a8	; 0x8a8 <fputc>
     854:	dd 20       	and	r13, r13
     856:	a9 f7       	brne	.-22     	; 0x842 <vfprintf+0x380>
     858:	06 c0       	rjmp	.+12     	; 0x866 <__stack+0x7>
     85a:	80 e2       	ldi	r24, 0x20	; 32
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	b3 01       	movw	r22, r6
     860:	0e 94 54 04 	call	0x8a8	; 0x8a8 <fputc>
     864:	ea 94       	dec	r14
     866:	ee 20       	and	r14, r14
     868:	c1 f7       	brne	.-16     	; 0x85a <vfprintf+0x398>
     86a:	43 ce       	rjmp	.-890    	; 0x4f2 <vfprintf+0x30>
     86c:	f3 01       	movw	r30, r6
     86e:	66 81       	ldd	r22, Z+6	; 0x06
     870:	77 81       	ldd	r23, Z+7	; 0x07
     872:	cb 01       	movw	r24, r22
     874:	2b 96       	adiw	r28, 0x0b	; 11
     876:	e2 e1       	ldi	r30, 0x12	; 18
     878:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__epilogue_restores__>

0000087c <strnlen_P>:
     87c:	fc 01       	movw	r30, r24
     87e:	05 90       	lpm	r0, Z+
     880:	61 50       	subi	r22, 0x01	; 1
     882:	70 40       	sbci	r23, 0x00	; 0
     884:	01 10       	cpse	r0, r1
     886:	d8 f7       	brcc	.-10     	; 0x87e <strnlen_P+0x2>
     888:	80 95       	com	r24
     88a:	90 95       	com	r25
     88c:	8e 0f       	add	r24, r30
     88e:	9f 1f       	adc	r25, r31
     890:	08 95       	ret

00000892 <strnlen>:
     892:	fc 01       	movw	r30, r24
     894:	61 50       	subi	r22, 0x01	; 1
     896:	70 40       	sbci	r23, 0x00	; 0
     898:	01 90       	ld	r0, Z+
     89a:	01 10       	cpse	r0, r1
     89c:	d8 f7       	brcc	.-10     	; 0x894 <strnlen+0x2>
     89e:	80 95       	com	r24
     8a0:	90 95       	com	r25
     8a2:	8e 0f       	add	r24, r30
     8a4:	9f 1f       	adc	r25, r31
     8a6:	08 95       	ret

000008a8 <fputc>:
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	8c 01       	movw	r16, r24
     8b2:	eb 01       	movw	r28, r22
     8b4:	8b 81       	ldd	r24, Y+3	; 0x03
     8b6:	81 ff       	sbrs	r24, 1
     8b8:	1b c0       	rjmp	.+54     	; 0x8f0 <fputc+0x48>
     8ba:	82 ff       	sbrs	r24, 2
     8bc:	0d c0       	rjmp	.+26     	; 0x8d8 <fputc+0x30>
     8be:	2e 81       	ldd	r18, Y+6	; 0x06
     8c0:	3f 81       	ldd	r19, Y+7	; 0x07
     8c2:	8c 81       	ldd	r24, Y+4	; 0x04
     8c4:	9d 81       	ldd	r25, Y+5	; 0x05
     8c6:	28 17       	cp	r18, r24
     8c8:	39 07       	cpc	r19, r25
     8ca:	64 f4       	brge	.+24     	; 0x8e4 <fputc+0x3c>
     8cc:	e8 81       	ld	r30, Y
     8ce:	f9 81       	ldd	r31, Y+1	; 0x01
     8d0:	01 93       	st	Z+, r16
     8d2:	f9 83       	std	Y+1, r31	; 0x01
     8d4:	e8 83       	st	Y, r30
     8d6:	06 c0       	rjmp	.+12     	; 0x8e4 <fputc+0x3c>
     8d8:	e8 85       	ldd	r30, Y+8	; 0x08
     8da:	f9 85       	ldd	r31, Y+9	; 0x09
     8dc:	80 2f       	mov	r24, r16
     8de:	09 95       	icall
     8e0:	89 2b       	or	r24, r25
     8e2:	31 f4       	brne	.+12     	; 0x8f0 <fputc+0x48>
     8e4:	8e 81       	ldd	r24, Y+6	; 0x06
     8e6:	9f 81       	ldd	r25, Y+7	; 0x07
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	9f 83       	std	Y+7, r25	; 0x07
     8ec:	8e 83       	std	Y+6, r24	; 0x06
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <fputc+0x4c>
     8f0:	0f ef       	ldi	r16, 0xFF	; 255
     8f2:	1f ef       	ldi	r17, 0xFF	; 255
     8f4:	c8 01       	movw	r24, r16
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	08 95       	ret

00000900 <__ultoa_invert>:
     900:	fa 01       	movw	r30, r20
     902:	aa 27       	eor	r26, r26
     904:	28 30       	cpi	r18, 0x08	; 8
     906:	51 f1       	breq	.+84     	; 0x95c <__ultoa_invert+0x5c>
     908:	20 31       	cpi	r18, 0x10	; 16
     90a:	81 f1       	breq	.+96     	; 0x96c <__ultoa_invert+0x6c>
     90c:	e8 94       	clt
     90e:	6f 93       	push	r22
     910:	6e 7f       	andi	r22, 0xFE	; 254
     912:	6e 5f       	subi	r22, 0xFE	; 254
     914:	7f 4f       	sbci	r23, 0xFF	; 255
     916:	8f 4f       	sbci	r24, 0xFF	; 255
     918:	9f 4f       	sbci	r25, 0xFF	; 255
     91a:	af 4f       	sbci	r26, 0xFF	; 255
     91c:	b1 e0       	ldi	r27, 0x01	; 1
     91e:	3e d0       	rcall	.+124    	; 0x99c <__ultoa_invert+0x9c>
     920:	b4 e0       	ldi	r27, 0x04	; 4
     922:	3c d0       	rcall	.+120    	; 0x99c <__ultoa_invert+0x9c>
     924:	67 0f       	add	r22, r23
     926:	78 1f       	adc	r23, r24
     928:	89 1f       	adc	r24, r25
     92a:	9a 1f       	adc	r25, r26
     92c:	a1 1d       	adc	r26, r1
     92e:	68 0f       	add	r22, r24
     930:	79 1f       	adc	r23, r25
     932:	8a 1f       	adc	r24, r26
     934:	91 1d       	adc	r25, r1
     936:	a1 1d       	adc	r26, r1
     938:	6a 0f       	add	r22, r26
     93a:	71 1d       	adc	r23, r1
     93c:	81 1d       	adc	r24, r1
     93e:	91 1d       	adc	r25, r1
     940:	a1 1d       	adc	r26, r1
     942:	20 d0       	rcall	.+64     	; 0x984 <__ultoa_invert+0x84>
     944:	09 f4       	brne	.+2      	; 0x948 <__ultoa_invert+0x48>
     946:	68 94       	set
     948:	3f 91       	pop	r19
     94a:	2a e0       	ldi	r18, 0x0A	; 10
     94c:	26 9f       	mul	r18, r22
     94e:	11 24       	eor	r1, r1
     950:	30 19       	sub	r19, r0
     952:	30 5d       	subi	r19, 0xD0	; 208
     954:	31 93       	st	Z+, r19
     956:	de f6       	brtc	.-74     	; 0x90e <__ultoa_invert+0xe>
     958:	cf 01       	movw	r24, r30
     95a:	08 95       	ret
     95c:	46 2f       	mov	r20, r22
     95e:	47 70       	andi	r20, 0x07	; 7
     960:	40 5d       	subi	r20, 0xD0	; 208
     962:	41 93       	st	Z+, r20
     964:	b3 e0       	ldi	r27, 0x03	; 3
     966:	0f d0       	rcall	.+30     	; 0x986 <__ultoa_invert+0x86>
     968:	c9 f7       	brne	.-14     	; 0x95c <__ultoa_invert+0x5c>
     96a:	f6 cf       	rjmp	.-20     	; 0x958 <__ultoa_invert+0x58>
     96c:	46 2f       	mov	r20, r22
     96e:	4f 70       	andi	r20, 0x0F	; 15
     970:	40 5d       	subi	r20, 0xD0	; 208
     972:	4a 33       	cpi	r20, 0x3A	; 58
     974:	18 f0       	brcs	.+6      	; 0x97c <__ultoa_invert+0x7c>
     976:	49 5d       	subi	r20, 0xD9	; 217
     978:	31 fd       	sbrc	r19, 1
     97a:	40 52       	subi	r20, 0x20	; 32
     97c:	41 93       	st	Z+, r20
     97e:	02 d0       	rcall	.+4      	; 0x984 <__ultoa_invert+0x84>
     980:	a9 f7       	brne	.-22     	; 0x96c <__ultoa_invert+0x6c>
     982:	ea cf       	rjmp	.-44     	; 0x958 <__ultoa_invert+0x58>
     984:	b4 e0       	ldi	r27, 0x04	; 4
     986:	a6 95       	lsr	r26
     988:	97 95       	ror	r25
     98a:	87 95       	ror	r24
     98c:	77 95       	ror	r23
     98e:	67 95       	ror	r22
     990:	ba 95       	dec	r27
     992:	c9 f7       	brne	.-14     	; 0x986 <__ultoa_invert+0x86>
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	61 05       	cpc	r22, r1
     998:	71 05       	cpc	r23, r1
     99a:	08 95       	ret
     99c:	9b 01       	movw	r18, r22
     99e:	ac 01       	movw	r20, r24
     9a0:	0a 2e       	mov	r0, r26
     9a2:	06 94       	lsr	r0
     9a4:	57 95       	ror	r21
     9a6:	47 95       	ror	r20
     9a8:	37 95       	ror	r19
     9aa:	27 95       	ror	r18
     9ac:	ba 95       	dec	r27
     9ae:	c9 f7       	brne	.-14     	; 0x9a2 <__ultoa_invert+0xa2>
     9b0:	62 0f       	add	r22, r18
     9b2:	73 1f       	adc	r23, r19
     9b4:	84 1f       	adc	r24, r20
     9b6:	95 1f       	adc	r25, r21
     9b8:	a0 1d       	adc	r26, r0
     9ba:	08 95       	ret

000009bc <delay_ms>:
uchar buf[80];

/**
 * Some basic delay function
 */
void delay_ms(unsigned short ms) {
     9bc:	df 93       	push	r29
     9be:	cf 93       	push	r28
     9c0:	00 d0       	rcall	.+0      	; 0x9c2 <delay_ms+0x6>
     9c2:	00 d0       	rcall	.+0      	; 0x9c4 <delay_ms+0x8>
     9c4:	00 d0       	rcall	.+0      	; 0x9c6 <delay_ms+0xa>
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	9e 83       	std	Y+6, r25	; 0x06
     9cc:	8d 83       	std	Y+5, r24	; 0x05
	unsigned short outer1, outer2;
	outer1 = 200 * 12;
     9ce:	80 e6       	ldi	r24, 0x60	; 96
     9d0:	99 e0       	ldi	r25, 0x09	; 9
     9d2:	9c 83       	std	Y+4, r25	; 0x04
     9d4:	8b 83       	std	Y+3, r24	; 0x03
     9d6:	1c c0       	rjmp	.+56     	; 0xa10 <delay_ms+0x54>

	while (outer1) {
		outer2 = 100;
     9d8:	84 e6       	ldi	r24, 0x64	; 100
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	9a 83       	std	Y+2, r25	; 0x02
     9de:	89 83       	std	Y+1, r24	; 0x01
     9e0:	0e c0       	rjmp	.+28     	; 0x9fe <delay_ms+0x42>
		while (outer2) {
			while (ms)
				ms--;
     9e2:	8d 81       	ldd	r24, Y+5	; 0x05
     9e4:	9e 81       	ldd	r25, Y+6	; 0x06
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	9e 83       	std	Y+6, r25	; 0x06
     9ea:	8d 83       	std	Y+5, r24	; 0x05
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
			while (ms)
     9ec:	8d 81       	ldd	r24, Y+5	; 0x05
     9ee:	9e 81       	ldd	r25, Y+6	; 0x06
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	b9 f7       	brne	.-18     	; 0x9e2 <delay_ms+0x26>
				ms--;
			outer2--;
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	9a 81       	ldd	r25, Y+2	; 0x02
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	9a 83       	std	Y+2, r25	; 0x02
     9fc:	89 83       	std	Y+1, r24	; 0x01
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
     9fe:	89 81       	ldd	r24, Y+1	; 0x01
     a00:	9a 81       	ldd	r25, Y+2	; 0x02
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	99 f7       	brne	.-26     	; 0x9ec <delay_ms+0x30>
			while (ms)
				ms--;
			outer2--;
		}
		outer1--;
     a06:	8b 81       	ldd	r24, Y+3	; 0x03
     a08:	9c 81       	ldd	r25, Y+4	; 0x04
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	9c 83       	std	Y+4, r25	; 0x04
     a0e:	8b 83       	std	Y+3, r24	; 0x03
 */
void delay_ms(unsigned short ms) {
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	9c 81       	ldd	r25, Y+4	; 0x04
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	01 f7       	brne	.-64     	; 0x9d8 <delay_ms+0x1c>
				ms--;
			outer2--;
		}
		outer1--;
	}
}
     a18:	26 96       	adiw	r28, 0x06	; 6
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	f8 94       	cli
     a1e:	de bf       	out	0x3e, r29	; 62
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	cd bf       	out	0x3d, r28	; 61
     a24:	cf 91       	pop	r28
     a26:	df 91       	pop	r29
     a28:	08 95       	ret

00000a2a <gpib_init>:
 * Init GPIB pins and variables.
 * \brief All signal lines not related to the controller part
 * 		are initialized with useful values.
 *		(The controller part initialization is done on gpib_controller_assert())
 */
void gpib_init(void) {
     a2a:	df 93       	push	r29
     a2c:	cf 93       	push	r28
     a2e:	cd b7       	in	r28, 0x3d	; 61
     a30:	de b7       	in	r29, 0x3e	; 62
	// data lines - complete port A as input
	DDRA = 0x00;
     a32:	ea e3       	ldi	r30, 0x3A	; 58
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	10 82       	st	Z, r1

	// handshake lines - on port D , everything as input
	DDRD &= ~_BV(G_DAV); // DAV 
     a38:	a1 e3       	ldi	r26, 0x31	; 49
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	e1 e3       	ldi	r30, 0x31	; 49
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	8b 7f       	andi	r24, 0xFB	; 251
     a44:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_EOI); // EOI 
     a46:	a1 e3       	ldi	r26, 0x31	; 49
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	e1 e3       	ldi	r30, 0x31	; 49
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
     a50:	8f 7e       	andi	r24, 0xEF	; 239
     a52:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_SRQ); // SRQ 
     a54:	a1 e3       	ldi	r26, 0x31	; 49
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	e1 e3       	ldi	r30, 0x31	; 49
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	80 81       	ld	r24, Z
     a5e:	8f 7b       	andi	r24, 0xBF	; 191
     a60:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_ATN); // ATN  
     a62:	a1 e3       	ldi	r26, 0x31	; 49
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	e1 e3       	ldi	r30, 0x31	; 49
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	80 81       	ld	r24, Z
     a6c:	8f 77       	andi	r24, 0x7F	; 127
     a6e:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_REN); // REN  
     a70:	a7 e3       	ldi	r26, 0x37	; 55
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	e7 e3       	ldi	r30, 0x37	; 55
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	8d 7f       	andi	r24, 0xFD	; 253
     a7c:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_IFC); // IFC  
     a7e:	a7 e3       	ldi	r26, 0x37	; 55
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	e7 e3       	ldi	r30, 0x37	; 55
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	80 81       	ld	r24, Z
     a88:	8e 7f       	andi	r24, 0xFE	; 254
     a8a:	8c 93       	st	X, r24

	// init handshake lines
	assign_bit(DDRD, PORTD, G_NRFD);
     a8c:	a2 e3       	ldi	r26, 0x32	; 50
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e2 e3       	ldi	r30, 0x32	; 50
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	80 81       	ld	r24, Z
     a96:	87 7f       	andi	r24, 0xF7	; 247
     a98:	8c 93       	st	X, r24
     a9a:	a1 e3       	ldi	r26, 0x31	; 49
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e1 e3       	ldi	r30, 0x31	; 49
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	80 81       	ld	r24, Z
     aa4:	88 60       	ori	r24, 0x08	; 8
     aa6:	8c 93       	st	X, r24
     aa8:	a2 e3       	ldi	r26, 0x32	; 50
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	e2 e3       	ldi	r30, 0x32	; 50
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	87 7f       	andi	r24, 0xF7	; 247
     ab4:	8c 93       	st	X, r24
	// not ready for data now
	release_bit(DDRD, PORTD, G_NDAC);
     ab6:	a1 e3       	ldi	r26, 0x31	; 49
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	e1 e3       	ldi	r30, 0x31	; 49
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	80 81       	ld	r24, Z
     ac0:	8f 7d       	andi	r24, 0xDF	; 223
     ac2:	8c 93       	st	X, r24
     ac4:	a2 e3       	ldi	r26, 0x32	; 50
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	e2 e3       	ldi	r30, 0x32	; 50
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 81       	ld	r24, Z
     ace:	80 62       	ori	r24, 0x20	; 32
     ad0:	8c 93       	st	X, r24
	// initially: ok so far
}
     ad2:	cf 91       	pop	r28
     ad4:	df 91       	pop	r29
     ad6:	08 95       	ret

00000ad8 <gpib_send_address>:
 * Sends address bytes to address a partner. Caller of this function must decide
 * if talker or listener address is used.
 * \param primary primary address of device
 * \param secondary secondary address of device
 */
void gpib_send_address(uchar primary, uchar secondary) {
     ad8:	df 93       	push	r29
     ada:	cf 93       	push	r28
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
     ae0:	2c 97       	sbiw	r28, 0x0c	; 12
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	de bf       	out	0x3e, r29	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	cd bf       	out	0x3d, r28	; 61
     aec:	8b 87       	std	Y+11, r24	; 0x0b
     aee:	6c 87       	std	Y+12, r22	; 0x0c
	uchar controlString[10];
	controlString[0] = primary;
     af0:	8b 85       	ldd	r24, Y+11	; 0x0b
     af2:	89 83       	std	Y+1, r24	; 0x01
	//uart_puts("before talker address p write\r\n");
	gpib_cmd(controlString, 1);
     af4:	ce 01       	movw	r24, r28
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	61 e0       	ldi	r22, 0x01	; 1
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	0e 94 a6 07 	call	0xf4c	; 0xf4c <gpib_cmd>
	// handle secondary address if required
	if (secondary != ADDRESS_NOT_SET) {
     b00:	8c 85       	ldd	r24, Y+12	; 0x0c
     b02:	8f 3f       	cpi	r24, 0xFF	; 255
     b04:	41 f0       	breq	.+16     	; 0xb16 <gpib_send_address+0x3e>
		controlString[0] = secondary;
     b06:	8c 85       	ldd	r24, Y+12	; 0x0c
     b08:	89 83       	std	Y+1, r24	; 0x01
		//uart_puts("before talker address s write\r\n");
		gpib_cmd(controlString, 1);
     b0a:	ce 01       	movw	r24, r28
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	0e 94 a6 07 	call	0xf4c	; 0xf4c <gpib_cmd>
	}
	//uart_puts("after talker address write\r\n");
}
     b16:	2c 96       	adiw	r28, 0x0c	; 12
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
     b22:	cf 91       	pop	r28
     b24:	df 91       	pop	r29
     b26:	08 95       	ret

00000b28 <gpib_prepare_write>:

/**
 * Prepare partner for writing
 */
void gpib_prepare_write() {
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2b 97       	sbiw	r28, 0x0b	; 11
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// send UNT and UNL commands (unlisten and untalk)
	gpib_untalkUnlisten();
     b3c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <gpib_untalkUnlisten>

	// set device to listener mode
	uchar primary = address2ListenerAddress(gpib_get_partner_pad());
     b40:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <gpib_get_partner_pad>
     b44:	80 5e       	subi	r24, 0xE0	; 224
     b46:	8a 83       	std	Y+2, r24	; 0x02
	uchar secondary =
			(gpib_get_partner_sad() == ADDRESS_NOT_SET) ?
					ADDRESS_NOT_SET :
					secondaryAdressToAdressByte(gpib_get_partner_sad());
     b48:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <gpib_get_partner_sad>
     b4c:	8f 3f       	cpi	r24, 0xFF	; 255
     b4e:	31 f0       	breq	.+12     	; 0xb5c <gpib_prepare_write+0x34>
     b50:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <gpib_get_partner_sad>
     b54:	98 2f       	mov	r25, r24
     b56:	90 66       	ori	r25, 0x60	; 96
     b58:	9b 87       	std	Y+11, r25	; 0x0b
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <gpib_prepare_write+0x38>
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	8b 87       	std	Y+11, r24	; 0x0b
     b60:	9b 85       	ldd	r25, Y+11	; 0x0b
     b62:	99 83       	std	Y+1, r25	; 0x01
	gpib_send_address(primary, secondary);
     b64:	8a 81       	ldd	r24, Y+2	; 0x02
     b66:	69 81       	ldd	r22, Y+1	; 0x01
     b68:	0e 94 6c 05 	call	0xad8	; 0xad8 <gpib_send_address>

	// set myself (controller) to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_address());
     b6c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <gpib_get_address>
     b70:	80 5c       	subi	r24, 0xC0	; 192
     b72:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
     b74:	ce 01       	movw	r24, r28
     b76:	03 96       	adiw	r24, 0x03	; 3
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <gpib_cmd>
}
     b80:	2b 96       	adiw	r28, 0x0b	; 11
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <gpib_prepare_read>:

/**
 * Prepare partner for writing
 */
void gpib_prepare_read() {
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	2b 97       	sbiw	r28, 0x0b	; 11
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// untalk/unlisten all partners
	gpib_untalkUnlisten();
     ba6:	0e 94 fe 05 	call	0xbfc	; 0xbfc <gpib_untalkUnlisten>

	// set myself (controller) to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_address());
     baa:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <gpib_get_address>
     bae:	80 5e       	subi	r24, 0xE0	; 224
     bb0:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
     bb2:	ce 01       	movw	r24, r28
     bb4:	03 96       	adiw	r24, 0x03	; 3
     bb6:	61 e0       	ldi	r22, 0x01	; 1
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	0e 94 a6 07 	call	0xf4c	; 0xf4c <gpib_cmd>

	// set device to talker mode
	uchar primary = address2TalkerAddress(gpib_get_partner_pad());
     bbe:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <gpib_get_partner_pad>
     bc2:	80 5c       	subi	r24, 0xC0	; 192
     bc4:	8a 83       	std	Y+2, r24	; 0x02
	uchar secondary =
			(gpib_get_partner_sad() == ADDRESS_NOT_SET) ?
					ADDRESS_NOT_SET :
					secondaryAdressToAdressByte(gpib_get_partner_sad());
     bc6:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <gpib_get_partner_sad>
     bca:	8f 3f       	cpi	r24, 0xFF	; 255
     bcc:	31 f0       	breq	.+12     	; 0xbda <gpib_prepare_read+0x48>
     bce:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <gpib_get_partner_sad>
     bd2:	98 2f       	mov	r25, r24
     bd4:	90 66       	ori	r25, 0x60	; 96
     bd6:	9b 87       	std	Y+11, r25	; 0x0b
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <gpib_prepare_read+0x4c>
     bda:	8f ef       	ldi	r24, 0xFF	; 255
     bdc:	8b 87       	std	Y+11, r24	; 0x0b
     bde:	9b 85       	ldd	r25, Y+11	; 0x0b
     be0:	99 83       	std	Y+1, r25	; 0x01
	gpib_send_address(primary, secondary);
     be2:	8a 81       	ldd	r24, Y+2	; 0x02
     be4:	69 81       	ldd	r22, Y+1	; 0x01
     be6:	0e 94 6c 05 	call	0xad8	; 0xad8 <gpib_send_address>
}
     bea:	2b 96       	adiw	r28, 0x0b	; 11
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <gpib_untalkUnlisten>:

/**
 * Untalk / unlisten all partners on bus.
 */
void gpib_untalkUnlisten() {
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	28 97       	sbiw	r28, 0x08	; 8
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
     c10:	8f e5       	ldi	r24, 0x5F	; 95
     c12:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     c14:	ce 01       	movw	r24, r28
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	61 e0       	ldi	r22, 0x01	; 1
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <gpib_cmd>
	controlString[0] = G_CMD_UNL;
     c20:	8f e3       	ldi	r24, 0x3F	; 63
     c22:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     c24:	ce 01       	movw	r24, r28
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	61 e0       	ldi	r22, 0x01	; 1
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <gpib_cmd>
}
     c30:	28 96       	adiw	r28, 0x08	; 8
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	cf 91       	pop	r28
     c3e:	df 91       	pop	r29
     c40:	08 95       	ret

00000c42 <gpib_receive>:
 *  \returns		On any error, 0xff is returned. in this case, the value of parameter *_byte is undefined.
 * 		Otherwise the value of the EOI signal line during read is returned. If EOI was assigned, a 0x01 is
 * 		returned. If EOI was not assigned, a 0x00 is returned. Assignment of EOI means that the talker
 * 		is sending the last character for this transmission.
 */
uchar gpib_receive(uchar* _byte) {
     c42:	df 93       	push	r29
     c44:	cf 93       	push	r28
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
     c4a:	27 97       	sbiw	r28, 0x07	; 7
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	f8 94       	cli
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	cd bf       	out	0x3d, r28	; 61
     c56:	9e 83       	std	Y+6, r25	; 0x06
     c58:	8d 83       	std	Y+5, r24	; 0x05
	int timeout;
	uchar byte, eoi;

	//uart_puts("\n\rgpib_receive()\n\r");

	if (controller.talks == 1) {
     c5a:	80 91 81 04 	lds	r24, 0x0481
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	59 f4       	brne	.+22     	; 0xc78 <gpib_receive+0x36>
		uart_puts("\n\rError: You shall not talk to yourself.\n\r");
     c62:	80 e6       	ldi	r24, 0x60	; 96
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
		*_byte = 0xff;
     c6a:	ed 81       	ldd	r30, Y+5	; 0x05
     c6c:	fe 81       	ldd	r31, Y+6	; 0x06
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	80 83       	st	Z, r24
		return 0xff;
     c72:	8f ef       	ldi	r24, 0xFF	; 255
     c74:	8f 83       	std	Y+7, r24	; 0x07
     c76:	c6 c0       	rjmp	.+396    	; 0xe04 <gpib_receive+0x1c2>
	}

	// handshake: set nrfd, means i am ready to receive some data
	release_bit(DDRD, PORTD, G_NRFD);
     c78:	a1 e3       	ldi	r26, 0x31	; 49
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e1 e3       	ldi	r30, 0x31	; 49
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	87 7f       	andi	r24, 0xF7	; 247
     c84:	8c 93       	st	X, r24
     c86:	a2 e3       	ldi	r26, 0x32	; 50
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e2 e3       	ldi	r30, 0x32	; 50
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	88 60       	ori	r24, 0x08	; 8
     c92:	8c 93       	st	X, r24
	assign_bit(DDRD, PORTD, G_NDAC);
     c94:	a2 e3       	ldi	r26, 0x32	; 50
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e2 e3       	ldi	r30, 0x32	; 50
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	8f 7d       	andi	r24, 0xDF	; 223
     ca0:	8c 93       	st	X, r24
     ca2:	a1 e3       	ldi	r26, 0x31	; 49
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e1 e3       	ldi	r30, 0x31	; 49
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	80 62       	ori	r24, 0x20	; 32
     cae:	8c 93       	st	X, r24
     cb0:	a2 e3       	ldi	r26, 0x32	; 50
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e2 e3       	ldi	r30, 0x32	; 50
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	8f 7d       	andi	r24, 0xDF	; 223
     cbc:	8c 93       	st	X, r24

	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     cbe:	80 91 eb 05 	lds	r24, 0x05EB
     cc2:	88 2f       	mov	r24, r24
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	05 96       	adiw	r24, 0x05	; 5
     cc8:	9c 83       	std	Y+4, r25	; 0x04
     cca:	8b 83       	std	Y+3, r24	; 0x03
     ccc:	10 c0       	rjmp	.+32     	; 0xcee <gpib_receive+0xac>
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     cce:	80 91 eb 05 	lds	r24, 0x05EB
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	9c 81       	ldd	r25, Y+4	; 0x04
     cda:	28 17       	cp	r18, r24
     cdc:	39 07       	cpc	r19, r25
     cde:	39 f4       	brne	.+14     	; 0xcee <gpib_receive+0xac>
			uart_puts("\n\rError: DAV timeout (1)\n\r");
     ce0:	8b e8       	ldi	r24, 0x8B	; 139
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
			return 0xff;
     ce8:	8f ef       	ldi	r24, 0xFF	; 255
     cea:	8f 83       	std	Y+7, r24	; 0x07
     cec:	8b c0       	rjmp	.+278    	; 0xe04 <gpib_receive+0x1c2>
	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
     cee:	e0 e3       	ldi	r30, 0x30	; 48
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	84 70       	andi	r24, 0x04	; 4
     cfa:	90 70       	andi	r25, 0x00	; 0
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	49 f0       	breq	.+18     	; 0xd12 <gpib_receive+0xd0>
     d00:	80 91 eb 05 	lds	r24, 0x05EB
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	82 17       	cp	r24, r18
     d0e:	93 07       	cpc	r25, r19
     d10:	f4 f6       	brge	.-68     	; 0xcce <gpib_receive+0x8c>
#else
	loop_until_bit_is_clear(PIND,G_DAV);
#endif

	// handshake: clear NRFD, means i am busy now to read data
	assign_bit(DDRD, PORTD, G_NRFD);
     d12:	a2 e3       	ldi	r26, 0x32	; 50
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e2 e3       	ldi	r30, 0x32	; 50
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	87 7f       	andi	r24, 0xF7	; 247
     d1e:	8c 93       	st	X, r24
     d20:	a1 e3       	ldi	r26, 0x31	; 49
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e1 e3       	ldi	r30, 0x31	; 49
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	88 60       	ori	r24, 0x08	; 8
     d2c:	8c 93       	st	X, r24
     d2e:	a2 e3       	ldi	r26, 0x32	; 50
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e2 e3       	ldi	r30, 0x32	; 50
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	87 7f       	andi	r24, 0xF7	; 247
     d3a:	8c 93       	st	X, r24
	// read data
	byte = PINA ^ 0xff;
     d3c:	e9 e3       	ldi	r30, 0x39	; 57
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	80 95       	com	r24
     d44:	8a 83       	std	Y+2, r24	; 0x02

	// handshake: set ndac, means i have completed/accepted the read
	release_bit(DDRD, PORTD, G_NDAC);
     d46:	a1 e3       	ldi	r26, 0x31	; 49
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e1 e3       	ldi	r30, 0x31	; 49
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	8f 7d       	andi	r24, 0xDF	; 223
     d52:	8c 93       	st	X, r24
     d54:	a2 e3       	ldi	r26, 0x32	; 50
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e2 e3       	ldi	r30, 0x32	; 50
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	80 62       	ori	r24, 0x20	; 32
     d60:	8c 93       	st	X, r24

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     d62:	80 91 eb 05 	lds	r24, 0x05EB
     d66:	88 2f       	mov	r24, r24
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	05 96       	adiw	r24, 0x05	; 5
     d6c:	9c 83       	std	Y+4, r25	; 0x04
     d6e:	8b 83       	std	Y+3, r24	; 0x03
     d70:	10 c0       	rjmp	.+32     	; 0xd92 <gpib_receive+0x150>
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     d72:	80 91 eb 05 	lds	r24, 0x05EB
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	9c 81       	ldd	r25, Y+4	; 0x04
     d7e:	28 17       	cp	r18, r24
     d80:	39 07       	cpc	r19, r25
     d82:	39 f4       	brne	.+14     	; 0xd92 <gpib_receive+0x150>
			uart_puts("\n\rError: DAV timeout (2)\n\r");
     d84:	86 ea       	ldi	r24, 0xA6	; 166
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
			return 0xff;
     d8c:	8f ef       	ldi	r24, 0xFF	; 255
     d8e:	8f 83       	std	Y+7, r24	; 0x07
     d90:	39 c0       	rjmp	.+114    	; 0xe04 <gpib_receive+0x1c2>
	release_bit(DDRD, PORTD, G_NDAC);

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
     d92:	e0 e3       	ldi	r30, 0x30	; 48
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	88 2f       	mov	r24, r24
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	84 70       	andi	r24, 0x04	; 4
     d9e:	90 70       	andi	r25, 0x00	; 0
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	49 f4       	brne	.+18     	; 0xdb6 <gpib_receive+0x174>
     da4:	80 91 eb 05 	lds	r24, 0x05EB
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	9c 81       	ldd	r25, Y+4	; 0x04
     db0:	82 17       	cp	r24, r18
     db2:	93 07       	cpc	r25, r19
     db4:	f4 f6       	brge	.-68     	; 0xd72 <gpib_receive+0x130>
	}
#else
	loop_until_bit_is_set(PIND,G_DAV);
#endif
	// handshake: clear ndac (this is a prerequisite for receive next byte)
	assign_bit(DDRD, PORTD, G_NDAC);
     db6:	a2 e3       	ldi	r26, 0x32	; 50
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e2 e3       	ldi	r30, 0x32	; 50
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	8f 7d       	andi	r24, 0xDF	; 223
     dc2:	8c 93       	st	X, r24
     dc4:	a1 e3       	ldi	r26, 0x31	; 49
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e1 e3       	ldi	r30, 0x31	; 49
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	80 62       	ori	r24, 0x20	; 32
     dd0:	8c 93       	st	X, r24
     dd2:	a2 e3       	ldi	r26, 0x32	; 50
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e2 e3       	ldi	r30, 0x32	; 50
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	8f 7d       	andi	r24, 0xDF	; 223
     dde:	8c 93       	st	X, r24

	// check if last byte of transmission
	eoi = bit_is_clear(PIND, G_EOI);
     de0:	e0 e3       	ldi	r30, 0x30	; 48
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	88 2f       	mov	r24, r24
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	80 71       	andi	r24, 0x10	; 16
     dec:	90 70       	andi	r25, 0x00	; 0
     dee:	19 82       	std	Y+1, r1	; 0x01
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	11 f4       	brne	.+4      	; 0xdf8 <gpib_receive+0x1b6>
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	89 83       	std	Y+1, r24	; 0x01

	*_byte = byte;
     df8:	ed 81       	ldd	r30, Y+5	; 0x05
     dfa:	fe 81       	ldd	r31, Y+6	; 0x06
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	80 83       	st	Z, r24

	return eoi;
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	8f 83       	std	Y+7, r24	; 0x07
     e04:	8f 81       	ldd	r24, Y+7	; 0x07
}
     e06:	27 96       	adiw	r28, 0x07	; 7
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <gpib_controller_assign>:
 * You have to change the initialization of the partner array according to your environment.
 * The partners-array is used by gpib_serial_poll() for looping over all existing devices.
 * 
 * \param address the address to be used by the controller. Usually 0x00.
 */
void gpib_controller_assign(uchar address) {
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	0f 92       	push	r0
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	89 83       	std	Y+1, r24	; 0x01
	controller.myaddress = address;
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	80 93 7e 04 	sts	0x047E, r24
	controller.talks = 0;
     e2a:	10 92 81 04 	sts	0x0481, r1
	controller.partner.primary = ADDRESS_NOT_SET; // init default active partner
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	80 93 7f 04 	sts	0x047F, r24
	controller.partner.secondary = ADDRESS_NOT_SET;
     e34:	8f ef       	ldi	r24, 0xFF	; 255
     e36:	80 93 80 04 	sts	0x0480, r24
	controller.flavour = FLAVOUR_NONE;
     e3a:	10 92 82 04 	sts	0x0482, r1
	/** clear list of partners */
	gpib_clear_partners();
     e3e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <gpib_clear_partners>
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     e42:	a8 e3       	ldi	r26, 0x38	; 56
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e8 e3       	ldi	r30, 0x38	; 56
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8e 7f       	andi	r24, 0xFE	; 254
     e4e:	8c 93       	st	X, r24
     e50:	a7 e3       	ldi	r26, 0x37	; 55
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e7 e3       	ldi	r30, 0x37	; 55
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	81 60       	ori	r24, 0x01	; 1
     e5c:	8c 93       	st	X, r24
     e5e:	a8 e3       	ldi	r26, 0x38	; 56
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e8 e3       	ldi	r30, 0x38	; 56
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8e 7f       	andi	r24, 0xFE	; 254
     e6a:	8c 93       	st	X, r24
	delay_ms(200);
     e6c:	88 ec       	ldi	r24, 0xC8	; 200
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 de 04 	call	0x9bc	; 0x9bc <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     e74:	a7 e3       	ldi	r26, 0x37	; 55
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e7 e3       	ldi	r30, 0x37	; 55
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8e 7f       	andi	r24, 0xFE	; 254
     e80:	8c 93       	st	X, r24
     e82:	a8 e3       	ldi	r26, 0x38	; 56
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e8 e3       	ldi	r30, 0x38	; 56
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	81 60       	ori	r24, 0x01	; 1
     e8e:	8c 93       	st	X, r24
	// set up all devices for remote control
	assign_bit(DDRB, PORTB, G_REN);
     e90:	a8 e3       	ldi	r26, 0x38	; 56
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e8 e3       	ldi	r30, 0x38	; 56
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8d 7f       	andi	r24, 0xFD	; 253
     e9c:	8c 93       	st	X, r24
     e9e:	a7 e3       	ldi	r26, 0x37	; 55
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e7 e3       	ldi	r30, 0x37	; 55
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	82 60       	ori	r24, 0x02	; 2
     eaa:	8c 93       	st	X, r24
     eac:	a8 e3       	ldi	r26, 0x38	; 56
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e8 e3       	ldi	r30, 0x38	; 56
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	8d 7f       	andi	r24, 0xFD	; 253
     eb8:	8c 93       	st	X, r24

	// DCL - device clear for all devices on bus
	cmd_buf[0] = G_CMD_DCL;
     eba:	84 e1       	ldi	r24, 0x14	; 20
     ebc:	80 93 36 05 	sts	0x0536, r24
	gpib_cmd(cmd_buf, 1);
     ec0:	86 e3       	ldi	r24, 0x36	; 54
     ec2:	95 e0       	ldi	r25, 0x05	; 5
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <gpib_cmd>
}
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <gpib_controller_release>:

/**
 * Release bus 
 */
void gpib_controller_release(void) {
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     edc:	a8 e3       	ldi	r26, 0x38	; 56
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e8 e3       	ldi	r30, 0x38	; 56
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	8e 7f       	andi	r24, 0xFE	; 254
     ee8:	8c 93       	st	X, r24
     eea:	a7 e3       	ldi	r26, 0x37	; 55
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e7 e3       	ldi	r30, 0x37	; 55
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	81 60       	ori	r24, 0x01	; 1
     ef6:	8c 93       	st	X, r24
     ef8:	a8 e3       	ldi	r26, 0x38	; 56
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e8 e3       	ldi	r30, 0x38	; 56
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	8e 7f       	andi	r24, 0xFE	; 254
     f04:	8c 93       	st	X, r24
	delay_ms(200);
     f06:	88 ec       	ldi	r24, 0xC8	; 200
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 de 04 	call	0x9bc	; 0x9bc <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     f0e:	a7 e3       	ldi	r26, 0x37	; 55
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e7 e3       	ldi	r30, 0x37	; 55
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8e 7f       	andi	r24, 0xFE	; 254
     f1a:	8c 93       	st	X, r24
     f1c:	a8 e3       	ldi	r26, 0x38	; 56
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e8 e3       	ldi	r30, 0x38	; 56
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	81 60       	ori	r24, 0x01	; 1
     f28:	8c 93       	st	X, r24
	// set up all devices for local control
	release_bit(DDRB, PORTB, G_REN);
     f2a:	a7 e3       	ldi	r26, 0x37	; 55
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e7 e3       	ldi	r30, 0x37	; 55
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8d 7f       	andi	r24, 0xFD	; 253
     f36:	8c 93       	st	X, r24
     f38:	a8 e3       	ldi	r26, 0x38	; 56
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e8 e3       	ldi	r30, 0x38	; 56
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	82 60       	ori	r24, 0x02	; 2
     f44:	8c 93       	st	X, r24
}
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <gpib_cmd>:
 * \param bytes byte array containing bytes to be send
 * \param length length of valid bytes in byte array or zero.
 * for binary data, lenght must be defined. For strings, length can be set to zero. Then the length of
 * the string is calculated internally.
 */
uchar gpib_cmd(uchar *bytes, int length) {
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	2b 97       	sbiw	r28, 0x0b	; 11
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	9f 83       	std	Y+7, r25	; 0x07
     f62:	8e 83       	std	Y+6, r24	; 0x06
     f64:	79 87       	std	Y+9, r23	; 0x09
     f66:	68 87       	std	Y+8, r22	; 0x08
	uchar c;
	int i;
	// set attention arg true for commands
	uchar attention = 1;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	8a 83       	std	Y+2, r24	; 0x02

	gpib_write_prologue(attention);
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	0e 94 02 08 	call	0x1004	; 0x1004 <gpib_write_prologue>

	if (length == 0) {
     f72:	88 85       	ldd	r24, Y+8	; 0x08
     f74:	99 85       	ldd	r25, Y+9	; 0x09
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	31 f4       	brne	.+12     	; 0xf86 <gpib_cmd+0x3a>
		// length==0 means this is a common C string, null-terminated.
		// then, length can be easily calculated
		length = strlen((char*) bytes);
     f7a:	8e 81       	ldd	r24, Y+6	; 0x06
     f7c:	9f 81       	ldd	r25, Y+7	; 0x07
     f7e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <strlen>
     f82:	99 87       	std	Y+9, r25	; 0x09
     f84:	88 87       	std	Y+8, r24	; 0x08
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif

	for (i = 0; i < length; i++) {
     f86:	1c 82       	std	Y+4, r1	; 0x04
     f88:	1b 82       	std	Y+3, r1	; 0x03
     f8a:	28 c0       	rjmp	.+80     	; 0xfdc <gpib_cmd+0x90>
		// put data on bus
		c = bytes[i];
     f8c:	2b 81       	ldd	r18, Y+3	; 0x03
     f8e:	3c 81       	ldd	r19, Y+4	; 0x04
     f90:	8e 81       	ldd	r24, Y+6	; 0x06
     f92:	9f 81       	ldd	r25, Y+7	; 0x07
     f94:	fc 01       	movw	r30, r24
     f96:	e2 0f       	add	r30, r18
     f98:	f3 1f       	adc	r31, r19
     f9a:	80 81       	ld	r24, Z
     f9c:	8d 83       	std	Y+5, r24	; 0x05
		//sprintf( buf, "char: %c\n\r", c );
		//uart_puts(buf);

		uchar isLastByte = (i == length - 1) && !attention;
     f9e:	88 85       	ldd	r24, Y+8	; 0x08
     fa0:	99 85       	ldd	r25, Y+9	; 0x09
     fa2:	9c 01       	movw	r18, r24
     fa4:	21 50       	subi	r18, 0x01	; 1
     fa6:	30 40       	sbci	r19, 0x00	; 0
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	9c 81       	ldd	r25, Y+4	; 0x04
     fac:	28 17       	cp	r18, r24
     fae:	39 07       	cpc	r19, r25
     fb0:	41 f4       	brne	.+16     	; 0xfc2 <gpib_cmd+0x76>
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	88 23       	and	r24, r24
     fb6:	29 f4       	brne	.+10     	; 0xfc2 <gpib_cmd+0x76>
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	9b 87       	std	Y+11, r25	; 0x0b
     fbe:	8a 87       	std	Y+10, r24	; 0x0a
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <gpib_cmd+0x7a>
     fc2:	1b 86       	std	Y+11, r1	; 0x0b
     fc4:	1a 86       	std	Y+10, r1	; 0x0a
     fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc8:	99 83       	std	Y+1, r25	; 0x01
		gpib_write_byte(c, isLastByte);
     fca:	8d 81       	ldd	r24, Y+5	; 0x05
     fcc:	69 81       	ldd	r22, Y+1	; 0x01
     fce:	0e 94 bb 08 	call	0x1176	; 0x1176 <gpib_write_byte>
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif

	for (i = 0; i < length; i++) {
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	9c 81       	ldd	r25, Y+4	; 0x04
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	9c 83       	std	Y+4, r25	; 0x04
     fda:	8b 83       	std	Y+3, r24	; 0x03
     fdc:	2b 81       	ldd	r18, Y+3	; 0x03
     fde:	3c 81       	ldd	r19, Y+4	; 0x04
     fe0:	88 85       	ldd	r24, Y+8	; 0x08
     fe2:	99 85       	ldd	r25, Y+9	; 0x09
     fe4:	28 17       	cp	r18, r24
     fe6:	39 07       	cpc	r19, r25
     fe8:	8c f2       	brlt	.-94     	; 0xf8c <gpib_cmd+0x40>

		uchar isLastByte = (i == length - 1) && !attention;
		gpib_write_byte(c, isLastByte);
	}

	gpib_write_epilogue(attention);
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	0e 94 51 08 	call	0x10a2	; 0x10a2 <gpib_write_epilogue>

	return 0x00;
     ff0:	80 e0       	ldi	r24, 0x00	; 0
}
     ff2:	2b 96       	adiw	r28, 0x0b	; 11
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <gpib_write_prologue>:

/**
 * Emits prologue before writing to a listener.
 *
 */
void gpib_write_prologue(uchar attention) {
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	0f 92       	push	r0
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	89 83       	std	Y+1, r24	; 0x01
	// set talks state. This is used by ISR to recognize own talk
	// (controller must not talk to itself and must not take part in listener handshake when talking)
	controller.talks = 1;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	80 93 81 04 	sts	0x0481, r24
	if (attention) {
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	88 23       	and	r24, r24
    101a:	a9 f0       	breq	.+42     	; 0x1046 <gpib_write_prologue+0x42>
		//uart_puts("\n\rgpib_controller_write()\n\r");
		// assign ATN for commands
		assign_bit(DDRD, PORTD, G_ATN);
    101c:	a2 e3       	ldi	r26, 0x32	; 50
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e2 e3       	ldi	r30, 0x32	; 50
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	8f 77       	andi	r24, 0x7F	; 127
    1028:	8c 93       	st	X, r24
    102a:	a1 e3       	ldi	r26, 0x31	; 49
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e1 e3       	ldi	r30, 0x31	; 49
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	80 68       	ori	r24, 0x80	; 128
    1036:	8c 93       	st	X, r24
    1038:	a2 e3       	ldi	r26, 0x32	; 50
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e2 e3       	ldi	r30, 0x32	; 50
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	8f 77       	andi	r24, 0x7F	; 127
    1044:	8c 93       	st	X, r24
	}
	// release EOI during transmission
	release_bit(DDRD, PORTD, G_EOI);
    1046:	a1 e3       	ldi	r26, 0x31	; 49
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e1 e3       	ldi	r30, 0x31	; 49
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	8f 7e       	andi	r24, 0xEF	; 239
    1052:	8c 93       	st	X, r24
    1054:	a2 e3       	ldi	r26, 0x32	; 50
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e2 e3       	ldi	r30, 0x32	; 50
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	80 61       	ori	r24, 0x10	; 16
    1060:	8c 93       	st	X, r24
	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
    1062:	a1 e3       	ldi	r26, 0x31	; 49
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e1 e3       	ldi	r30, 0x31	; 49
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	8b 7f       	andi	r24, 0xFB	; 251
    106e:	8c 93       	st	X, r24
    1070:	a2 e3       	ldi	r26, 0x32	; 50
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e2 e3       	ldi	r30, 0x32	; 50
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	84 60       	ori	r24, 0x04	; 4
    107c:	8c 93       	st	X, r24
	// release NRFD (just to be sure)
	release_bit(DDRD, PORTD, G_NRFD);
    107e:	a1 e3       	ldi	r26, 0x31	; 49
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e1 e3       	ldi	r30, 0x31	; 49
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	87 7f       	andi	r24, 0xF7	; 247
    108a:	8c 93       	st	X, r24
    108c:	a2 e3       	ldi	r26, 0x32	; 50
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e2 e3       	ldi	r30, 0x32	; 50
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	88 60       	ori	r24, 0x08	; 8
    1098:	8c 93       	st	X, r24
}
    109a:	0f 90       	pop	r0
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <gpib_write_epilogue>:

/**
 * Emits epilogue after writing to a listener.
 *
 */
void gpib_write_epilogue(uchar attention) {
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	0f 92       	push	r0
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	89 83       	std	Y+1, r24	; 0x01
	if (attention) {
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	88 23       	and	r24, r24
    10b2:	71 f0       	breq	.+28     	; 0x10d0 <gpib_write_epilogue+0x2e>
		// assign ATN for commands
		release_bit(DDRD, PORTD, G_ATN);
    10b4:	a1 e3       	ldi	r26, 0x31	; 49
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e1 e3       	ldi	r30, 0x31	; 49
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8f 77       	andi	r24, 0x7F	; 127
    10c0:	8c 93       	st	X, r24
    10c2:	a2 e3       	ldi	r26, 0x32	; 50
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e2 e3       	ldi	r30, 0x32	; 50
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	80 68       	ori	r24, 0x80	; 128
    10ce:	8c 93       	st	X, r24
	}
	// clear talk state.Controller does not talk anymore.
	controller.talks = 0;
    10d0:	10 92 81 04 	sts	0x0481, r1
}
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <gpib_write_command>:
 * - prefix with GPIB write prologue
 * - the string
 * - postfix with GPIB epilogue
 * - postfix that untalks/unlistens all partners
 */
void gpib_write_command(uchar *s) {
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <gpib_write_command+0x6>
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	9a 83       	std	Y+2, r25	; 0x02
    10e8:	89 83       	std	Y+1, r24	; 0x01
	gpib_prepare_write();
    10ea:	0e 94 94 05 	call	0xb28	; 0xb28 <gpib_prepare_write>
	gpib_write_prologue(0);
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	0e 94 02 08 	call	0x1004	; 0x1004 <gpib_write_prologue>
	gpib_write_string(s);
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	9a 81       	ldd	r25, Y+2	; 0x02
    10f8:	0e 94 8c 08 	call	0x1118	; 0x1118 <gpib_write_string>
	gpib_write_byte(ASCII_CODE_CR, 1);
    10fc:	8d e0       	ldi	r24, 0x0D	; 13
    10fe:	61 e0       	ldi	r22, 0x01	; 1
    1100:	0e 94 bb 08 	call	0x1176	; 0x1176 <gpib_write_byte>
	gpib_write_epilogue(0);
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	0e 94 51 08 	call	0x10a2	; 0x10a2 <gpib_write_epilogue>
	gpib_untalkUnlisten();
    110a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <gpib_untalkUnlisten>
}
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <gpib_write_string>:

/**
 * Write string. Only the raw string is written, no prefix and no postfix.
 */
void gpib_write_string(uchar *s) {
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <gpib_write_string+0xa>
    1122:	00 d0       	rcall	.+0      	; 0x1124 <gpib_write_string+0xc>
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < strlen(s); i++) {
    112c:	1a 82       	std	Y+2, r1	; 0x02
    112e:	19 82       	std	Y+1, r1	; 0x01
    1130:	10 c0       	rjmp	.+32     	; 0x1152 <gpib_write_string+0x3a>
		gpib_write_byte(s[i], 0);
    1132:	29 81       	ldd	r18, Y+1	; 0x01
    1134:	3a 81       	ldd	r19, Y+2	; 0x02
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	9c 81       	ldd	r25, Y+4	; 0x04
    113a:	fc 01       	movw	r30, r24
    113c:	e2 0f       	add	r30, r18
    113e:	f3 1f       	adc	r31, r19
    1140:	80 81       	ld	r24, Z
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	0e 94 bb 08 	call	0x1176	; 0x1176 <gpib_write_byte>

/**
 * Write string. Only the raw string is written, no prefix and no postfix.
 */
void gpib_write_string(uchar *s) {
	for (int i = 0; i < strlen(s); i++) {
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	9a 81       	ldd	r25, Y+2	; 0x02
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	09 81       	ldd	r16, Y+1	; 0x01
    1154:	1a 81       	ldd	r17, Y+2	; 0x02
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <strlen>
    115e:	08 17       	cp	r16, r24
    1160:	19 07       	cpc	r17, r25
    1162:	38 f3       	brcs	.-50     	; 0x1132 <gpib_write_string+0x1a>
		gpib_write_byte(s[i], 0);
	}
}
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	08 95       	ret

00001176 <gpib_write_byte>:

/**
 * Emits single byte to GPIB port pins.
 */
uchar gpib_write_byte(uchar c, uchar isLastByte) {
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	00 d0       	rcall	.+0      	; 0x117c <gpib_write_byte+0x6>
    117c:	00 d0       	rcall	.+0      	; 0x117e <gpib_write_byte+0x8>
    117e:	0f 92       	push	r0
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	8b 83       	std	Y+3, r24	; 0x03
    1186:	6c 83       	std	Y+4, r22	; 0x04
	int timeout;

	// wait for NDAC assign from all listeners
	release_bit(DDRD, PORTD, G_NDAC);
    1188:	a1 e3       	ldi	r26, 0x31	; 49
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e1 e3       	ldi	r30, 0x31	; 49
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	8f 7d       	andi	r24, 0xDF	; 223
    1194:	8c 93       	st	X, r24
    1196:	a2 e3       	ldi	r26, 0x32	; 50
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e2 e3       	ldi	r30, 0x32	; 50
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	80 62       	ori	r24, 0x20	; 32
    11a2:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
	timeout = s + 5;
    11a4:	80 91 eb 05 	lds	r24, 0x05EB
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	05 96       	adiw	r24, 0x05	; 5
    11ae:	9a 83       	std	Y+2, r25	; 0x02
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	10 c0       	rjmp	.+32     	; 0x11d4 <gpib_write_byte+0x5e>
	//gpib_info();
	while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
		if (s == timeout) {
    11b4:	80 91 eb 05 	lds	r24, 0x05EB
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	28 17       	cp	r18, r24
    11c2:	39 07       	cpc	r19, r25
    11c4:	39 f4       	brne	.+14     	; 0x11d4 <gpib_write_byte+0x5e>
			uart_puts("\n\rError: NDAC timeout\n\r");
    11c6:	81 ec       	ldi	r24, 0xC1	; 193
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
			return 0xff;
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	8d 83       	std	Y+5, r24	; 0x05
    11d2:	f7 c1       	rjmp	.+1006   	; 0x15c2 <gpib_write_byte+0x44c>
	// wait for NDAC assign from all listeners
	release_bit(DDRD, PORTD, G_NDAC);
#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
    11d4:	e0 e3       	ldi	r30, 0x30	; 48
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	88 2f       	mov	r24, r24
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	80 72       	andi	r24, 0x20	; 32
    11e0:	90 70       	andi	r25, 0x00	; 0
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	49 f0       	breq	.+18     	; 0x11f8 <gpib_write_byte+0x82>
    11e6:	80 91 eb 05 	lds	r24, 0x05EB
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	9a 81       	ldd	r25, Y+2	; 0x02
    11f2:	82 17       	cp	r24, r18
    11f4:	93 07       	cpc	r25, r19
    11f6:	f4 f6       	brge	.-68     	; 0x11b4 <gpib_write_byte+0x3e>
	}
#else
	loop_until_bit_is_clear(PIND,G_NDAC);
#endif

	DDRA = 0x00;
    11f8:	ea e3       	ldi	r30, 0x3A	; 58
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	10 82       	st	Z, r1
	if (c & 0x01) {
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	81 70       	andi	r24, 0x01	; 1
    1206:	90 70       	andi	r25, 0x00	; 0
    1208:	88 23       	and	r24, r24
    120a:	b1 f0       	breq	.+44     	; 0x1238 <gpib_write_byte+0xc2>
		assign_bit(DDRA, PORTA, PA0);
    120c:	ab e3       	ldi	r26, 0x3B	; 59
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	eb e3       	ldi	r30, 0x3B	; 59
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	8e 7f       	andi	r24, 0xFE	; 254
    1218:	8c 93       	st	X, r24
    121a:	aa e3       	ldi	r26, 0x3A	; 58
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	ea e3       	ldi	r30, 0x3A	; 58
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	81 60       	ori	r24, 0x01	; 1
    1226:	8c 93       	st	X, r24
    1228:	ab e3       	ldi	r26, 0x3B	; 59
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	eb e3       	ldi	r30, 0x3B	; 59
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	8e 7f       	andi	r24, 0xFE	; 254
    1234:	8c 93       	st	X, r24
    1236:	0e c0       	rjmp	.+28     	; 0x1254 <gpib_write_byte+0xde>
	} else {
		release_bit(DDRA, PORTA, PA0)
    1238:	aa e3       	ldi	r26, 0x3A	; 58
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	ea e3       	ldi	r30, 0x3A	; 58
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	8e 7f       	andi	r24, 0xFE	; 254
    1244:	8c 93       	st	X, r24
    1246:	ab e3       	ldi	r26, 0x3B	; 59
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	eb e3       	ldi	r30, 0x3B	; 59
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	81 60       	ori	r24, 0x01	; 1
    1252:	8c 93       	st	X, r24
	}
	if (c & 0x02) {
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	88 2f       	mov	r24, r24
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	82 70       	andi	r24, 0x02	; 2
    125c:	90 70       	andi	r25, 0x00	; 0
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	b1 f0       	breq	.+44     	; 0x128e <gpib_write_byte+0x118>
		assign_bit(DDRA, PORTA, PA1)
    1262:	ab e3       	ldi	r26, 0x3B	; 59
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	eb e3       	ldi	r30, 0x3B	; 59
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	8d 7f       	andi	r24, 0xFD	; 253
    126e:	8c 93       	st	X, r24
    1270:	aa e3       	ldi	r26, 0x3A	; 58
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	ea e3       	ldi	r30, 0x3A	; 58
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	82 60       	ori	r24, 0x02	; 2
    127c:	8c 93       	st	X, r24
    127e:	ab e3       	ldi	r26, 0x3B	; 59
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	eb e3       	ldi	r30, 0x3B	; 59
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	8d 7f       	andi	r24, 0xFD	; 253
    128a:	8c 93       	st	X, r24
    128c:	0e c0       	rjmp	.+28     	; 0x12aa <gpib_write_byte+0x134>
	} else {
		release_bit(DDRA, PORTA, PA1);
    128e:	aa e3       	ldi	r26, 0x3A	; 58
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	ea e3       	ldi	r30, 0x3A	; 58
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	8d 7f       	andi	r24, 0xFD	; 253
    129a:	8c 93       	st	X, r24
    129c:	ab e3       	ldi	r26, 0x3B	; 59
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	eb e3       	ldi	r30, 0x3B	; 59
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	82 60       	ori	r24, 0x02	; 2
    12a8:	8c 93       	st	X, r24
	}
	if (c & 0x04) {
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	88 2f       	mov	r24, r24
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	84 70       	andi	r24, 0x04	; 4
    12b2:	90 70       	andi	r25, 0x00	; 0
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	b1 f0       	breq	.+44     	; 0x12e4 <gpib_write_byte+0x16e>
		assign_bit(DDRA, PORTA, PA2);
    12b8:	ab e3       	ldi	r26, 0x3B	; 59
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	eb e3       	ldi	r30, 0x3B	; 59
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	8b 7f       	andi	r24, 0xFB	; 251
    12c4:	8c 93       	st	X, r24
    12c6:	aa e3       	ldi	r26, 0x3A	; 58
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	ea e3       	ldi	r30, 0x3A	; 58
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	84 60       	ori	r24, 0x04	; 4
    12d2:	8c 93       	st	X, r24
    12d4:	ab e3       	ldi	r26, 0x3B	; 59
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	eb e3       	ldi	r30, 0x3B	; 59
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	8b 7f       	andi	r24, 0xFB	; 251
    12e0:	8c 93       	st	X, r24
    12e2:	0e c0       	rjmp	.+28     	; 0x1300 <gpib_write_byte+0x18a>
	} else {
		release_bit(DDRA, PORTA, PA2);
    12e4:	aa e3       	ldi	r26, 0x3A	; 58
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	ea e3       	ldi	r30, 0x3A	; 58
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	8b 7f       	andi	r24, 0xFB	; 251
    12f0:	8c 93       	st	X, r24
    12f2:	ab e3       	ldi	r26, 0x3B	; 59
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	eb e3       	ldi	r30, 0x3B	; 59
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	84 60       	ori	r24, 0x04	; 4
    12fe:	8c 93       	st	X, r24
	}
	if (c & 0x08) {
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	88 2f       	mov	r24, r24
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	88 70       	andi	r24, 0x08	; 8
    1308:	90 70       	andi	r25, 0x00	; 0
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	b1 f0       	breq	.+44     	; 0x133a <gpib_write_byte+0x1c4>
		assign_bit(DDRA, PORTA, PA3);
    130e:	ab e3       	ldi	r26, 0x3B	; 59
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	eb e3       	ldi	r30, 0x3B	; 59
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	87 7f       	andi	r24, 0xF7	; 247
    131a:	8c 93       	st	X, r24
    131c:	aa e3       	ldi	r26, 0x3A	; 58
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	ea e3       	ldi	r30, 0x3A	; 58
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	88 60       	ori	r24, 0x08	; 8
    1328:	8c 93       	st	X, r24
    132a:	ab e3       	ldi	r26, 0x3B	; 59
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	eb e3       	ldi	r30, 0x3B	; 59
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	87 7f       	andi	r24, 0xF7	; 247
    1336:	8c 93       	st	X, r24
    1338:	0e c0       	rjmp	.+28     	; 0x1356 <gpib_write_byte+0x1e0>
	} else {
		release_bit(DDRA, PORTA, PA3);
    133a:	aa e3       	ldi	r26, 0x3A	; 58
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	ea e3       	ldi	r30, 0x3A	; 58
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	87 7f       	andi	r24, 0xF7	; 247
    1346:	8c 93       	st	X, r24
    1348:	ab e3       	ldi	r26, 0x3B	; 59
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	eb e3       	ldi	r30, 0x3B	; 59
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	88 60       	ori	r24, 0x08	; 8
    1354:	8c 93       	st	X, r24
	}
	if (c & 0x10) {
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	88 2f       	mov	r24, r24
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	80 71       	andi	r24, 0x10	; 16
    135e:	90 70       	andi	r25, 0x00	; 0
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	b1 f0       	breq	.+44     	; 0x1390 <gpib_write_byte+0x21a>
		assign_bit(DDRA, PORTA, PA4);
    1364:	ab e3       	ldi	r26, 0x3B	; 59
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	eb e3       	ldi	r30, 0x3B	; 59
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	8f 7e       	andi	r24, 0xEF	; 239
    1370:	8c 93       	st	X, r24
    1372:	aa e3       	ldi	r26, 0x3A	; 58
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	ea e3       	ldi	r30, 0x3A	; 58
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	80 61       	ori	r24, 0x10	; 16
    137e:	8c 93       	st	X, r24
    1380:	ab e3       	ldi	r26, 0x3B	; 59
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	eb e3       	ldi	r30, 0x3B	; 59
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	8f 7e       	andi	r24, 0xEF	; 239
    138c:	8c 93       	st	X, r24
    138e:	0e c0       	rjmp	.+28     	; 0x13ac <gpib_write_byte+0x236>
	} else {
		release_bit(DDRA, PORTA, PA4);
    1390:	aa e3       	ldi	r26, 0x3A	; 58
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	ea e3       	ldi	r30, 0x3A	; 58
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	8f 7e       	andi	r24, 0xEF	; 239
    139c:	8c 93       	st	X, r24
    139e:	ab e3       	ldi	r26, 0x3B	; 59
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	eb e3       	ldi	r30, 0x3B	; 59
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	80 61       	ori	r24, 0x10	; 16
    13aa:	8c 93       	st	X, r24
	}
	if (c & 0x20) {
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	88 2f       	mov	r24, r24
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	80 72       	andi	r24, 0x20	; 32
    13b4:	90 70       	andi	r25, 0x00	; 0
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	b1 f0       	breq	.+44     	; 0x13e6 <gpib_write_byte+0x270>
		assign_bit(DDRA, PORTA, PA5);
    13ba:	ab e3       	ldi	r26, 0x3B	; 59
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	eb e3       	ldi	r30, 0x3B	; 59
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	8f 7d       	andi	r24, 0xDF	; 223
    13c6:	8c 93       	st	X, r24
    13c8:	aa e3       	ldi	r26, 0x3A	; 58
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	ea e3       	ldi	r30, 0x3A	; 58
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	80 62       	ori	r24, 0x20	; 32
    13d4:	8c 93       	st	X, r24
    13d6:	ab e3       	ldi	r26, 0x3B	; 59
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	eb e3       	ldi	r30, 0x3B	; 59
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	8f 7d       	andi	r24, 0xDF	; 223
    13e2:	8c 93       	st	X, r24
    13e4:	0e c0       	rjmp	.+28     	; 0x1402 <gpib_write_byte+0x28c>
	} else {
		release_bit(DDRA, PORTA, PA5);
    13e6:	aa e3       	ldi	r26, 0x3A	; 58
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	ea e3       	ldi	r30, 0x3A	; 58
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	8f 7d       	andi	r24, 0xDF	; 223
    13f2:	8c 93       	st	X, r24
    13f4:	ab e3       	ldi	r26, 0x3B	; 59
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	eb e3       	ldi	r30, 0x3B	; 59
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	80 62       	ori	r24, 0x20	; 32
    1400:	8c 93       	st	X, r24
	}
	if (c & 0x40) {
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	80 74       	andi	r24, 0x40	; 64
    140a:	90 70       	andi	r25, 0x00	; 0
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	b1 f0       	breq	.+44     	; 0x143c <gpib_write_byte+0x2c6>
		assign_bit(DDRA, PORTA, PA6);
    1410:	ab e3       	ldi	r26, 0x3B	; 59
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	eb e3       	ldi	r30, 0x3B	; 59
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	8f 7b       	andi	r24, 0xBF	; 191
    141c:	8c 93       	st	X, r24
    141e:	aa e3       	ldi	r26, 0x3A	; 58
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	ea e3       	ldi	r30, 0x3A	; 58
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	80 64       	ori	r24, 0x40	; 64
    142a:	8c 93       	st	X, r24
    142c:	ab e3       	ldi	r26, 0x3B	; 59
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	eb e3       	ldi	r30, 0x3B	; 59
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8f 7b       	andi	r24, 0xBF	; 191
    1438:	8c 93       	st	X, r24
    143a:	0e c0       	rjmp	.+28     	; 0x1458 <gpib_write_byte+0x2e2>
	} else {
		release_bit(DDRA, PORTA, PA6);
    143c:	aa e3       	ldi	r26, 0x3A	; 58
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	ea e3       	ldi	r30, 0x3A	; 58
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	8f 7b       	andi	r24, 0xBF	; 191
    1448:	8c 93       	st	X, r24
    144a:	ab e3       	ldi	r26, 0x3B	; 59
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	eb e3       	ldi	r30, 0x3B	; 59
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	80 64       	ori	r24, 0x40	; 64
    1456:	8c 93       	st	X, r24
	}
	if (c & 0x80) {
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	88 23       	and	r24, r24
    145c:	b4 f4       	brge	.+44     	; 0x148a <gpib_write_byte+0x314>
		assign_bit(DDRA, PORTA, PA7);
    145e:	ab e3       	ldi	r26, 0x3B	; 59
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	eb e3       	ldi	r30, 0x3B	; 59
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	8f 77       	andi	r24, 0x7F	; 127
    146a:	8c 93       	st	X, r24
    146c:	aa e3       	ldi	r26, 0x3A	; 58
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	ea e3       	ldi	r30, 0x3A	; 58
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	80 68       	ori	r24, 0x80	; 128
    1478:	8c 93       	st	X, r24
    147a:	ab e3       	ldi	r26, 0x3B	; 59
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	eb e3       	ldi	r30, 0x3B	; 59
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8f 77       	andi	r24, 0x7F	; 127
    1486:	8c 93       	st	X, r24
    1488:	0e c0       	rjmp	.+28     	; 0x14a6 <gpib_write_byte+0x330>
	} else {
		release_bit(DDRA, PORTA, PA7);
    148a:	aa e3       	ldi	r26, 0x3A	; 58
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	ea e3       	ldi	r30, 0x3A	; 58
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	8f 77       	andi	r24, 0x7F	; 127
    1496:	8c 93       	st	X, r24
    1498:	ab e3       	ldi	r26, 0x3B	; 59
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	eb e3       	ldi	r30, 0x3B	; 59
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	80 68       	ori	r24, 0x80	; 128
    14a4:	8c 93       	st	X, r24
	}

	// wait until listeners release NRFD
	//uart_puts("1");
	release_bit(DDRD, PORTD, G_NRFD);
    14a6:	a1 e3       	ldi	r26, 0x31	; 49
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e1 e3       	ldi	r30, 0x31	; 49
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	87 7f       	andi	r24, 0xF7	; 247
    14b2:	8c 93       	st	X, r24
    14b4:	a2 e3       	ldi	r26, 0x32	; 50
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e2 e3       	ldi	r30, 0x32	; 50
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	88 60       	ori	r24, 0x08	; 8
    14c0:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
	//gpib_info();
	timeout = s + 5;
    14c2:	80 91 eb 05 	lds	r24, 0x05EB
    14c6:	88 2f       	mov	r24, r24
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	05 96       	adiw	r24, 0x05	; 5
    14cc:	9a 83       	std	Y+2, r25	; 0x02
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	10 c0       	rjmp	.+32     	; 0x14f2 <gpib_write_byte+0x37c>
	while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
		if (s == timeout) {
    14d2:	80 91 eb 05 	lds	r24, 0x05EB
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	9a 81       	ldd	r25, Y+2	; 0x02
    14de:	28 17       	cp	r18, r24
    14e0:	39 07       	cpc	r19, r25
    14e2:	39 f4       	brne	.+14     	; 0x14f2 <gpib_write_byte+0x37c>
			uart_puts("\n\rError: NRFD timeout\n\r");
    14e4:	89 ed       	ldi	r24, 0xD9	; 217
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
			return 0xff;
    14ec:	8f ef       	ldi	r24, 0xFF	; 255
    14ee:	8d 83       	std	Y+5, r24	; 0x05
    14f0:	68 c0       	rjmp	.+208    	; 0x15c2 <gpib_write_byte+0x44c>
	//uart_puts("1");
	release_bit(DDRD, PORTD, G_NRFD);
#ifdef WITH_TIMEOUT
	//gpib_info();
	timeout = s + 5;
	while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
    14f2:	e0 e3       	ldi	r30, 0x30	; 48
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	88 2f       	mov	r24, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	88 70       	andi	r24, 0x08	; 8
    14fe:	90 70       	andi	r25, 0x00	; 0
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	49 f4       	brne	.+18     	; 0x1516 <gpib_write_byte+0x3a0>
    1504:	80 91 eb 05 	lds	r24, 0x05EB
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	9a 81       	ldd	r25, Y+2	; 0x02
    1510:	82 17       	cp	r24, r18
    1512:	93 07       	cpc	r25, r19
    1514:	f4 f6       	brge	.-68     	; 0x14d2 <gpib_write_byte+0x35c>
#else
	loop_until_bit_is_set(PIND,G_NRFD);
#endif

	// assign EOI during transmission of only last byte
	if (isLastByte) {
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	88 23       	and	r24, r24
    151a:	a9 f0       	breq	.+42     	; 0x1546 <gpib_write_byte+0x3d0>
		//uart_puts("\n\rE\n\r");
		assign_bit(DDRD, PORTD, G_EOI);
    151c:	a2 e3       	ldi	r26, 0x32	; 50
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e2 e3       	ldi	r30, 0x32	; 50
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	8f 7e       	andi	r24, 0xEF	; 239
    1528:	8c 93       	st	X, r24
    152a:	a1 e3       	ldi	r26, 0x31	; 49
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e1 e3       	ldi	r30, 0x31	; 49
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	80 61       	ori	r24, 0x10	; 16
    1536:	8c 93       	st	X, r24
    1538:	a2 e3       	ldi	r26, 0x32	; 50
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e2 e3       	ldi	r30, 0x32	; 50
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	8f 7e       	andi	r24, 0xEF	; 239
    1544:	8c 93       	st	X, r24
	}

	// assign DAV, data valid for listeners
	assign_bit(DDRD, PORTD, G_DAV);
    1546:	a2 e3       	ldi	r26, 0x32	; 50
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e2 e3       	ldi	r30, 0x32	; 50
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	8b 7f       	andi	r24, 0xFB	; 251
    1552:	8c 93       	st	X, r24
    1554:	a1 e3       	ldi	r26, 0x31	; 49
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e1 e3       	ldi	r30, 0x31	; 49
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	84 60       	ori	r24, 0x04	; 4
    1560:	8c 93       	st	X, r24
    1562:	a2 e3       	ldi	r26, 0x32	; 50
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e2 e3       	ldi	r30, 0x32	; 50
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	8b 7f       	andi	r24, 0xFB	; 251
    156e:	8c 93       	st	X, r24

	// wait for NDAC release
	//uart_puts("2");
	release_bit(DDRD, PORTD, G_NDAC);
    1570:	a1 e3       	ldi	r26, 0x31	; 49
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e1 e3       	ldi	r30, 0x31	; 49
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	8f 7d       	andi	r24, 0xDF	; 223
    157c:	8c 93       	st	X, r24
    157e:	a2 e3       	ldi	r26, 0x32	; 50
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e2 e3       	ldi	r30, 0x32	; 50
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	80 62       	ori	r24, 0x20	; 32
    158a:	8c 93       	st	X, r24
	loop_until_bit_is_set(PIND, G_NDAC);
    158c:	e0 e3       	ldi	r30, 0x30	; 48
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	88 2f       	mov	r24, r24
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	80 72       	andi	r24, 0x20	; 32
    1598:	90 70       	andi	r25, 0x00	; 0
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	b9 f3       	breq	.-18     	; 0x158c <gpib_write_byte+0x416>

	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
    159e:	a1 e3       	ldi	r26, 0x31	; 49
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e1 e3       	ldi	r30, 0x31	; 49
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	8b 7f       	andi	r24, 0xFB	; 251
    15aa:	8c 93       	st	X, r24
    15ac:	a2 e3       	ldi	r26, 0x32	; 50
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e2 e3       	ldi	r30, 0x32	; 50
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	84 60       	ori	r24, 0x04	; 4
    15b8:	8c 93       	st	X, r24

	// reset Port to all input
	DDRA = 0x00;
    15ba:	ea e3       	ldi	r30, 0x3A	; 58
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	10 82       	st	Z, r1

	//uart_puts("3\r\n");

	return 0;
    15c0:	1d 82       	std	Y+5, r1	; 0x05
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	08 95       	ret

000015d4 <gpib_info>:

/**
 * print some useful info about bus state (for example value of handshake pins)
 */
void gpib_info(void) {
    15d4:	af 92       	push	r10
    15d6:	bf 92       	push	r11
    15d8:	cf 92       	push	r12
    15da:	df 92       	push	r13
    15dc:	ef 92       	push	r14
    15de:	ff 92       	push	r15
    15e0:	0f 93       	push	r16
    15e2:	1f 93       	push	r17
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	2a 97       	sbiw	r28, 0x0a	; 10
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
	uchar dav, nrfd, ndac, eoi, atn, srq, ifc, ren;
	extern uchar buf[80];

	sprintf(buf, "Partner address(primary,secondary): (%u,%u)\n\r",
    15f8:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <gpib_get_partner_pad>
    15fc:	08 2f       	mov	r16, r24
    15fe:	10 e0       	ldi	r17, 0x00	; 0
    1600:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <gpib_get_partner_sad>
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	8d b7       	in	r24, 0x3d	; 61
    160a:	9e b7       	in	r25, 0x3e	; 62
    160c:	08 97       	sbiw	r24, 0x08	; 8
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	9e bf       	out	0x3e, r25	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	8d bf       	out	0x3d, r24	; 61
    1618:	ed b7       	in	r30, 0x3d	; 61
    161a:	fe b7       	in	r31, 0x3e	; 62
    161c:	31 96       	adiw	r30, 0x01	; 1
    161e:	8a e9       	ldi	r24, 0x9A	; 154
    1620:	95 e0       	ldi	r25, 0x05	; 5
    1622:	91 83       	std	Z+1, r25	; 0x01
    1624:	80 83       	st	Z, r24
    1626:	81 ef       	ldi	r24, 0xF1	; 241
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	93 83       	std	Z+3, r25	; 0x03
    162c:	82 83       	std	Z+2, r24	; 0x02
    162e:	15 83       	std	Z+5, r17	; 0x05
    1630:	04 83       	std	Z+4, r16	; 0x04
    1632:	37 83       	std	Z+7, r19	; 0x07
    1634:	26 83       	std	Z+6, r18	; 0x06
    1636:	0e 94 3d 02 	call	0x47a	; 0x47a <sprintf>
    163a:	8d b7       	in	r24, 0x3d	; 61
    163c:	9e b7       	in	r25, 0x3e	; 62
    163e:	08 96       	adiw	r24, 0x08	; 8
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	9e bf       	out	0x3e, r25	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	8d bf       	out	0x3d, r24	; 61
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);
    164a:	8a e9       	ldi	r24, 0x9A	; 154
    164c:	95 e0       	ldi	r25, 0x05	; 5
    164e:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>

	uart_puts("Partner list\n\r");
    1652:	8f e1       	ldi	r24, 0x1F	; 31
    1654:	91 e0       	ldi	r25, 0x01	; 1
    1656:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
	for (int i = 0; i < MAX_PARTNER; i++) {
    165a:	1a 82       	std	Y+2, r1	; 0x02
    165c:	19 82       	std	Y+1, r1	; 0x01
    165e:	49 c0       	rjmp	.+146    	; 0x16f2 <gpib_info+0x11e>
		if (controller.partners[i].primary != ADDRESS_NOT_SET) {
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	9a 81       	ldd	r25, Y+2	; 0x02
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	fc 01       	movw	r30, r24
    166a:	ed 57       	subi	r30, 0x7D	; 125
    166c:	fb 4f       	sbci	r31, 0xFB	; 251
    166e:	80 81       	ld	r24, Z
    1670:	8f 3f       	cpi	r24, 0xFF	; 255
    1672:	d1 f1       	breq	.+116    	; 0x16e8 <gpib_info+0x114>
			sprintf(buf, "Partner(primary,secondary) : (%u,%u)\n\r",
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	9a 81       	ldd	r25, Y+2	; 0x02
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	fc 01       	movw	r30, r24
    167e:	ed 57       	subi	r30, 0x7D	; 125
    1680:	fb 4f       	sbci	r31, 0xFB	; 251
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	50 e0       	ldi	r21, 0x00	; 0
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	9a 81       	ldd	r25, Y+2	; 0x02
    168c:	03 96       	adiw	r24, 0x03	; 3
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	fc 01       	movw	r30, r24
    1694:	e2 58       	subi	r30, 0x82	; 130
    1696:	fb 4f       	sbci	r31, 0xFB	; 251
    1698:	80 81       	ld	r24, Z
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	8d b7       	in	r24, 0x3d	; 61
    16a0:	9e b7       	in	r25, 0x3e	; 62
    16a2:	08 97       	sbiw	r24, 0x08	; 8
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	9e bf       	out	0x3e, r25	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	8d bf       	out	0x3d, r24	; 61
    16ae:	ed b7       	in	r30, 0x3d	; 61
    16b0:	fe b7       	in	r31, 0x3e	; 62
    16b2:	31 96       	adiw	r30, 0x01	; 1
    16b4:	8a e9       	ldi	r24, 0x9A	; 154
    16b6:	95 e0       	ldi	r25, 0x05	; 5
    16b8:	91 83       	std	Z+1, r25	; 0x01
    16ba:	80 83       	st	Z, r24
    16bc:	8e e2       	ldi	r24, 0x2E	; 46
    16be:	91 e0       	ldi	r25, 0x01	; 1
    16c0:	93 83       	std	Z+3, r25	; 0x03
    16c2:	82 83       	std	Z+2, r24	; 0x02
    16c4:	55 83       	std	Z+5, r21	; 0x05
    16c6:	44 83       	std	Z+4, r20	; 0x04
    16c8:	37 83       	std	Z+7, r19	; 0x07
    16ca:	26 83       	std	Z+6, r18	; 0x06
    16cc:	0e 94 3d 02 	call	0x47a	; 0x47a <sprintf>
    16d0:	8d b7       	in	r24, 0x3d	; 61
    16d2:	9e b7       	in	r25, 0x3e	; 62
    16d4:	08 96       	adiw	r24, 0x08	; 8
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	9e bf       	out	0x3e, r25	; 62
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	8d bf       	out	0x3d, r24	; 61
					controller.partners[i].primary,
					controller.partners[i].secondary);
			uart_puts(buf);
    16e0:	8a e9       	ldi	r24, 0x9A	; 154
    16e2:	95 e0       	ldi	r25, 0x05	; 5
    16e4:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
	sprintf(buf, "Partner address(primary,secondary): (%u,%u)\n\r",
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);

	uart_puts("Partner list\n\r");
	for (int i = 0; i < MAX_PARTNER; i++) {
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	9a 81       	ldd	r25, Y+2	; 0x02
    16ec:	01 96       	adiw	r24, 0x01	; 1
    16ee:	9a 83       	std	Y+2, r25	; 0x02
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	9a 81       	ldd	r25, Y+2	; 0x02
    16f6:	85 30       	cpi	r24, 0x05	; 5
    16f8:	91 05       	cpc	r25, r1
    16fa:	0c f4       	brge	.+2      	; 0x16fe <gpib_info+0x12a>
    16fc:	b1 cf       	rjmp	.-158    	; 0x1660 <gpib_info+0x8c>
					controller.partners[i].secondary);
			uart_puts(buf);
		}
	}

	dav = bit_is_set(PIND, G_DAV);
    16fe:	e0 e3       	ldi	r30, 0x30	; 48
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	84 70       	andi	r24, 0x04	; 4
    1706:	8a 87       	std	Y+10, r24	; 0x0a
	nrfd = bit_is_set(PIND, G_NRFD);
    1708:	e0 e3       	ldi	r30, 0x30	; 48
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	88 70       	andi	r24, 0x08	; 8
    1710:	89 87       	std	Y+9, r24	; 0x09
	ndac = bit_is_set(PIND, G_NDAC);
    1712:	e0 e3       	ldi	r30, 0x30	; 48
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	80 72       	andi	r24, 0x20	; 32
    171a:	88 87       	std	Y+8, r24	; 0x08
	eoi = bit_is_set(PIND, G_EOI);
    171c:	e0 e3       	ldi	r30, 0x30	; 48
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	80 71       	andi	r24, 0x10	; 16
    1724:	8f 83       	std	Y+7, r24	; 0x07
	atn = bit_is_set(PIND, G_ATN);
    1726:	e0 e3       	ldi	r30, 0x30	; 48
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	80 78       	andi	r24, 0x80	; 128
    172e:	8e 83       	std	Y+6, r24	; 0x06
	srq = bit_is_set(PIND, G_SRQ);
    1730:	e0 e3       	ldi	r30, 0x30	; 48
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	80 74       	andi	r24, 0x40	; 64
    1738:	8d 83       	std	Y+5, r24	; 0x05
	ifc = bit_is_set(PINB, G_IFC);
    173a:	e6 e3       	ldi	r30, 0x36	; 54
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	81 70       	andi	r24, 0x01	; 1
    1742:	8c 83       	std	Y+4, r24	; 0x04
	ren = bit_is_set(PINB, G_REN);
    1744:	e6 e3       	ldi	r30, 0x36	; 54
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	82 70       	andi	r24, 0x02	; 2
    174c:	8b 83       	std	Y+3, r24	; 0x03
	//d = PINA;
	//di = d ^ 0xff;
	if (dav == 0x00)
    174e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1750:	88 23       	and	r24, r24
    1752:	19 f4       	brne	.+6      	; 0x175a <gpib_info+0x186>
		dav = '0';
    1754:	80 e3       	ldi	r24, 0x30	; 48
    1756:	8a 87       	std	Y+10, r24	; 0x0a
    1758:	02 c0       	rjmp	.+4      	; 0x175e <gpib_info+0x18a>
	else
		dav = '1';
    175a:	81 e3       	ldi	r24, 0x31	; 49
    175c:	8a 87       	std	Y+10, r24	; 0x0a
	if (nrfd == 0x00)
    175e:	89 85       	ldd	r24, Y+9	; 0x09
    1760:	88 23       	and	r24, r24
    1762:	19 f4       	brne	.+6      	; 0x176a <gpib_info+0x196>
		nrfd = '0';
    1764:	80 e3       	ldi	r24, 0x30	; 48
    1766:	89 87       	std	Y+9, r24	; 0x09
    1768:	02 c0       	rjmp	.+4      	; 0x176e <gpib_info+0x19a>
	else
		nrfd = '1';
    176a:	81 e3       	ldi	r24, 0x31	; 49
    176c:	89 87       	std	Y+9, r24	; 0x09
	if (ndac == 0x00)
    176e:	88 85       	ldd	r24, Y+8	; 0x08
    1770:	88 23       	and	r24, r24
    1772:	19 f4       	brne	.+6      	; 0x177a <gpib_info+0x1a6>
		ndac = '0';
    1774:	80 e3       	ldi	r24, 0x30	; 48
    1776:	88 87       	std	Y+8, r24	; 0x08
    1778:	02 c0       	rjmp	.+4      	; 0x177e <gpib_info+0x1aa>
	else
		ndac = '1';
    177a:	81 e3       	ldi	r24, 0x31	; 49
    177c:	88 87       	std	Y+8, r24	; 0x08
	if (eoi == 0x00)
    177e:	8f 81       	ldd	r24, Y+7	; 0x07
    1780:	88 23       	and	r24, r24
    1782:	19 f4       	brne	.+6      	; 0x178a <gpib_info+0x1b6>
		eoi = '0';
    1784:	80 e3       	ldi	r24, 0x30	; 48
    1786:	8f 83       	std	Y+7, r24	; 0x07
    1788:	02 c0       	rjmp	.+4      	; 0x178e <gpib_info+0x1ba>
	else
		eoi = '1';
    178a:	81 e3       	ldi	r24, 0x31	; 49
    178c:	8f 83       	std	Y+7, r24	; 0x07
	if (atn == 0x00)
    178e:	8e 81       	ldd	r24, Y+6	; 0x06
    1790:	88 23       	and	r24, r24
    1792:	19 f4       	brne	.+6      	; 0x179a <gpib_info+0x1c6>
		atn = '0';
    1794:	80 e3       	ldi	r24, 0x30	; 48
    1796:	8e 83       	std	Y+6, r24	; 0x06
    1798:	02 c0       	rjmp	.+4      	; 0x179e <gpib_info+0x1ca>
	else
		atn = '1';
    179a:	81 e3       	ldi	r24, 0x31	; 49
    179c:	8e 83       	std	Y+6, r24	; 0x06
	if (srq == 0x00)
    179e:	8d 81       	ldd	r24, Y+5	; 0x05
    17a0:	88 23       	and	r24, r24
    17a2:	19 f4       	brne	.+6      	; 0x17aa <gpib_info+0x1d6>
		srq = '0';
    17a4:	80 e3       	ldi	r24, 0x30	; 48
    17a6:	8d 83       	std	Y+5, r24	; 0x05
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <gpib_info+0x1da>
	else
		srq = '1';
    17aa:	81 e3       	ldi	r24, 0x31	; 49
    17ac:	8d 83       	std	Y+5, r24	; 0x05
	if (ifc == 0x00)
    17ae:	8c 81       	ldd	r24, Y+4	; 0x04
    17b0:	88 23       	and	r24, r24
    17b2:	19 f4       	brne	.+6      	; 0x17ba <gpib_info+0x1e6>
		ifc = '0';
    17b4:	80 e3       	ldi	r24, 0x30	; 48
    17b6:	8c 83       	std	Y+4, r24	; 0x04
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <gpib_info+0x1ea>
	else
		ifc = '1';
    17ba:	81 e3       	ldi	r24, 0x31	; 49
    17bc:	8c 83       	std	Y+4, r24	; 0x04
	if (ren == 0x00)
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	88 23       	and	r24, r24
    17c2:	19 f4       	brne	.+6      	; 0x17ca <gpib_info+0x1f6>
		ren = '0';
    17c4:	80 e3       	ldi	r24, 0x30	; 48
    17c6:	8b 83       	std	Y+3, r24	; 0x03
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <gpib_info+0x1fa>
	else
		ren = '1';
    17ca:	81 e3       	ldi	r24, 0x31	; 49
    17cc:	8b 83       	std	Y+3, r24	; 0x03

	sprintf(buf,
    17ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    17d0:	a8 2e       	mov	r10, r24
    17d2:	bb 24       	eor	r11, r11
    17d4:	89 85       	ldd	r24, Y+9	; 0x09
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	88 85       	ldd	r24, Y+8	; 0x08
    17dc:	48 2f       	mov	r20, r24
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	8f 81       	ldd	r24, Y+7	; 0x07
    17e2:	68 2f       	mov	r22, r24
    17e4:	70 e0       	ldi	r23, 0x00	; 0
    17e6:	8c 81       	ldd	r24, Y+4	; 0x04
    17e8:	a8 2f       	mov	r26, r24
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	08 2f       	mov	r16, r24
    17f0:	10 e0       	ldi	r17, 0x00	; 0
    17f2:	8e 81       	ldd	r24, Y+6	; 0x06
    17f4:	e8 2e       	mov	r14, r24
    17f6:	ff 24       	eor	r15, r15
    17f8:	8d 81       	ldd	r24, Y+5	; 0x05
    17fa:	c8 2e       	mov	r12, r24
    17fc:	dd 24       	eor	r13, r13
    17fe:	8d b7       	in	r24, 0x3d	; 61
    1800:	9e b7       	in	r25, 0x3e	; 62
    1802:	44 97       	sbiw	r24, 0x14	; 20
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	9e bf       	out	0x3e, r25	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	8d bf       	out	0x3d, r24	; 61
    180e:	ed b7       	in	r30, 0x3d	; 61
    1810:	fe b7       	in	r31, 0x3e	; 62
    1812:	31 96       	adiw	r30, 0x01	; 1
    1814:	8a e9       	ldi	r24, 0x9A	; 154
    1816:	95 e0       	ldi	r25, 0x05	; 5
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	80 83       	st	Z, r24
    181c:	85 e5       	ldi	r24, 0x55	; 85
    181e:	91 e0       	ldi	r25, 0x01	; 1
    1820:	93 83       	std	Z+3, r25	; 0x03
    1822:	82 83       	std	Z+2, r24	; 0x02
    1824:	b5 82       	std	Z+5, r11	; 0x05
    1826:	a4 82       	std	Z+4, r10	; 0x04
    1828:	37 83       	std	Z+7, r19	; 0x07
    182a:	26 83       	std	Z+6, r18	; 0x06
    182c:	51 87       	std	Z+9, r21	; 0x09
    182e:	40 87       	std	Z+8, r20	; 0x08
    1830:	73 87       	std	Z+11, r23	; 0x0b
    1832:	62 87       	std	Z+10, r22	; 0x0a
    1834:	b5 87       	std	Z+13, r27	; 0x0d
    1836:	a4 87       	std	Z+12, r26	; 0x0c
    1838:	17 87       	std	Z+15, r17	; 0x0f
    183a:	06 87       	std	Z+14, r16	; 0x0e
    183c:	f1 8a       	std	Z+17, r15	; 0x11
    183e:	e0 8a       	std	Z+16, r14	; 0x10
    1840:	d3 8a       	std	Z+19, r13	; 0x13
    1842:	c2 8a       	std	Z+18, r12	; 0x12
    1844:	0e 94 3d 02 	call	0x47a	; 0x47a <sprintf>
    1848:	8d b7       	in	r24, 0x3d	; 61
    184a:	9e b7       	in	r25, 0x3e	; 62
    184c:	44 96       	adiw	r24, 0x14	; 20
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	9e bf       	out	0x3e, r25	; 62
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	8d bf       	out	0x3d, r24	; 61
			"dav=%c,nrfd=%c,ndac=%c, eoi=%c, ifc=%c,ren=%c,atn=%c,srq=%c\n\r",
			dav, nrfd, ndac, eoi, ifc, ren, atn, srq);
	uart_puts(buf);
    1858:	8a e9       	ldi	r24, 0x9A	; 154
    185a:	95 e0       	ldi	r25, 0x05	; 5
    185c:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
}
    1860:	2a 96       	adiw	r28, 0x0a	; 10
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	1f 91       	pop	r17
    1872:	0f 91       	pop	r16
    1874:	ff 90       	pop	r15
    1876:	ef 90       	pop	r14
    1878:	df 90       	pop	r13
    187a:	cf 90       	pop	r12
    187c:	bf 90       	pop	r11
    187e:	af 90       	pop	r10
    1880:	08 95       	ret

00001882 <gpib_spoll_start>:

/**
 * Enable serial poll.
 * Effect: all devices will send status byte instead of normal data when addressed as talker
 */
void gpib_spoll_start() {
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	00 d0       	rcall	.+0      	; 0x1888 <gpib_spoll_start+0x6>
    1888:	00 d0       	rcall	.+0      	; 0x188a <gpib_spoll_start+0x8>
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
	uchar controlString[4];
	//uart_puts("before SPE\r\n");
	controlString[0] = G_CMD_SPE;
    188e:	88 e1       	ldi	r24, 0x18	; 24
    1890:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
    1892:	ce 01       	movw	r24, r28
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	61 e0       	ldi	r22, 0x01	; 1
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <gpib_cmd>
	//uart_puts("after SPE\r\n");
}
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <gpib_spoll_end>:

/**
 * Disable (end) serial poll.All devices will return to normal behaviour as talker
 */
void gpib_spoll_end() {
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <gpib_spoll_end+0x6>
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <gpib_spoll_end+0x8>
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
	uchar controlString[4];
	controlString[0] = G_CMD_SPD;
    18b8:	89 e1       	ldi	r24, 0x19	; 25
    18ba:	89 83       	std	Y+1, r24	; 0x01
	//uart_puts("before SPD\r\n");
	gpib_cmd(controlString, 1);
    18bc:	ce 01       	movw	r24, r28
    18be:	01 96       	adiw	r24, 0x01	; 1
    18c0:	61 e0       	ldi	r22, 0x01	; 1
    18c2:	70 e0       	ldi	r23, 0x00	; 0
    18c4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <gpib_cmd>
}
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <gpib_spoll_single>:
 * \param primary primary talker address of device
 * \param secondary secondary talker address of device
 * \param status byte
 * \returns 0xff on failure.
 */
uchar gpib_spoll_single(uchar primary, uchar secondary, uchar *b) {
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	c9 56       	subi	r28, 0x69	; 105
    18e0:	d0 40       	sbci	r29, 0x00	; 0
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	fe 01       	movw	r30, r28
    18ee:	ea 59       	subi	r30, 0x9A	; 154
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	80 83       	st	Z, r24
    18f4:	fe 01       	movw	r30, r28
    18f6:	e9 59       	subi	r30, 0x99	; 153
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	60 83       	st	Z, r22
    18fc:	fe 01       	movw	r30, r28
    18fe:	e8 59       	subi	r30, 0x98	; 152
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	51 83       	std	Z+1, r21	; 0x01
    1904:	40 83       	st	Z, r20
	uchar controlString[100];
	uchar e;

	// address device
	gpib_send_address(primary, secondary);
    1906:	fe 01       	movw	r30, r28
    1908:	ea 59       	subi	r30, 0x9A	; 154
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	de 01       	movw	r26, r28
    190e:	a9 59       	subi	r26, 0x99	; 153
    1910:	bf 4f       	sbci	r27, 0xFF	; 255
    1912:	80 81       	ld	r24, Z
    1914:	6c 91       	ld	r22, X
    1916:	0e 94 6c 05 	call	0xad8	; 0xad8 <gpib_send_address>

	// now receive data
	//uart_puts("before status byte receive\r\n");
	e = gpib_receive(b);
    191a:	fe 01       	movw	r30, r28
    191c:	e8 59       	subi	r30, 0x98	; 152
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	80 81       	ld	r24, Z
    1922:	91 81       	ldd	r25, Z+1	; 0x01
    1924:	0e 94 21 06 	call	0xc42	; 0xc42 <gpib_receive>
    1928:	89 83       	std	Y+1, r24	; 0x01
	//uart_puts("after status byte receive\r\n");
	// status byte is now in b
	if (secondary != ADDRESS_NOT_SET) {
    192a:	fe 01       	movw	r30, r28
    192c:	e9 59       	subi	r30, 0x99	; 153
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	80 81       	ld	r24, Z
    1932:	8f 3f       	cpi	r24, 0xFF	; 255
    1934:	09 f4       	brne	.+2      	; 0x1938 <gpib_spoll_single+0x62>
    1936:	3f c0       	rjmp	.+126    	; 0x19b6 <gpib_spoll_single+0xe0>
		sprintf((char*) controlString,
    1938:	fe 01       	movw	r30, r28
    193a:	e8 59       	subi	r30, 0x98	; 152
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	01 90       	ld	r0, Z+
    1940:	f0 81       	ld	r31, Z
    1942:	e0 2d       	mov	r30, r0
    1944:	80 81       	ld	r24, Z
    1946:	48 2f       	mov	r20, r24
    1948:	50 e0       	ldi	r21, 0x00	; 0
    194a:	fe 01       	movw	r30, r28
    194c:	ea 59       	subi	r30, 0x9A	; 154
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	80 81       	ld	r24, Z
    1952:	88 2f       	mov	r24, r24
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	bc 01       	movw	r22, r24
    1958:	60 54       	subi	r22, 0x40	; 64
    195a:	70 40       	sbci	r23, 0x00	; 0
    195c:	fe 01       	movw	r30, r28
    195e:	e9 59       	subi	r30, 0x99	; 153
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	80 81       	ld	r24, Z
    1964:	88 2f       	mov	r24, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	9c 01       	movw	r18, r24
    196a:	2f 79       	andi	r18, 0x9F	; 159
    196c:	30 70       	andi	r19, 0x00	; 0
    196e:	8d b7       	in	r24, 0x3d	; 61
    1970:	9e b7       	in	r25, 0x3e	; 62
    1972:	0a 97       	sbiw	r24, 0x0a	; 10
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	9e bf       	out	0x3e, r25	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	8d bf       	out	0x3d, r24	; 61
    197e:	ed b7       	in	r30, 0x3d	; 61
    1980:	fe b7       	in	r31, 0x3e	; 62
    1982:	31 96       	adiw	r30, 0x01	; 1
    1984:	ce 01       	movw	r24, r28
    1986:	02 96       	adiw	r24, 0x02	; 2
    1988:	91 83       	std	Z+1, r25	; 0x01
    198a:	80 83       	st	Z, r24
    198c:	83 e9       	ldi	r24, 0x93	; 147
    198e:	91 e0       	ldi	r25, 0x01	; 1
    1990:	93 83       	std	Z+3, r25	; 0x03
    1992:	82 83       	std	Z+2, r24	; 0x02
    1994:	55 83       	std	Z+5, r21	; 0x05
    1996:	44 83       	std	Z+4, r20	; 0x04
    1998:	77 83       	std	Z+7, r23	; 0x07
    199a:	66 83       	std	Z+6, r22	; 0x06
    199c:	31 87       	std	Z+9, r19	; 0x09
    199e:	20 87       	std	Z+8, r18	; 0x08
    19a0:	0e 94 3d 02 	call	0x47a	; 0x47a <sprintf>
    19a4:	8d b7       	in	r24, 0x3d	; 61
    19a6:	9e b7       	in	r25, 0x3e	; 62
    19a8:	0a 96       	adiw	r24, 0x0a	; 10
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	9e bf       	out	0x3e, r25	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	8d bf       	out	0x3d, r24	; 61
    19b4:	33 c0       	rjmp	.+102    	; 0x1a1c <gpib_spoll_single+0x146>
				"Status byte 0x%02x from device(primary,secondary) = (0x%02x,0x%02x)\n\r",
				*b, TalkerAddress2Address(primary),
				secondaryAdressByteToAdress(secondary));
	} else {
		sprintf((char*) controlString,
    19b6:	fe 01       	movw	r30, r28
    19b8:	e8 59       	subi	r30, 0x98	; 152
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	01 90       	ld	r0, Z+
    19be:	f0 81       	ld	r31, Z
    19c0:	e0 2d       	mov	r30, r0
    19c2:	80 81       	ld	r24, Z
    19c4:	48 2f       	mov	r20, r24
    19c6:	50 e0       	ldi	r21, 0x00	; 0
    19c8:	fe 01       	movw	r30, r28
    19ca:	ea 59       	subi	r30, 0x9A	; 154
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	80 81       	ld	r24, Z
    19d0:	88 2f       	mov	r24, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	9c 01       	movw	r18, r24
    19d6:	20 54       	subi	r18, 0x40	; 64
    19d8:	30 40       	sbci	r19, 0x00	; 0
    19da:	8d b7       	in	r24, 0x3d	; 61
    19dc:	9e b7       	in	r25, 0x3e	; 62
    19de:	08 97       	sbiw	r24, 0x08	; 8
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	9e bf       	out	0x3e, r25	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	8d bf       	out	0x3d, r24	; 61
    19ea:	ed b7       	in	r30, 0x3d	; 61
    19ec:	fe b7       	in	r31, 0x3e	; 62
    19ee:	31 96       	adiw	r30, 0x01	; 1
    19f0:	ce 01       	movw	r24, r28
    19f2:	02 96       	adiw	r24, 0x02	; 2
    19f4:	91 83       	std	Z+1, r25	; 0x01
    19f6:	80 83       	st	Z, r24
    19f8:	89 ed       	ldi	r24, 0xD9	; 217
    19fa:	91 e0       	ldi	r25, 0x01	; 1
    19fc:	93 83       	std	Z+3, r25	; 0x03
    19fe:	82 83       	std	Z+2, r24	; 0x02
    1a00:	55 83       	std	Z+5, r21	; 0x05
    1a02:	44 83       	std	Z+4, r20	; 0x04
    1a04:	37 83       	std	Z+7, r19	; 0x07
    1a06:	26 83       	std	Z+6, r18	; 0x06
    1a08:	0e 94 3d 02 	call	0x47a	; 0x47a <sprintf>
    1a0c:	8d b7       	in	r24, 0x3d	; 61
    1a0e:	9e b7       	in	r25, 0x3e	; 62
    1a10:	08 96       	adiw	r24, 0x08	; 8
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	9e bf       	out	0x3e, r25	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	8d bf       	out	0x3d, r24	; 61
				"Status byte 0x%02x from device(primary) = 0x%02x\n\r", *b,
				TalkerAddress2Address(primary));
	}
	uart_puts((char*) controlString);
    1a1c:	ce 01       	movw	r24, r28
    1a1e:	02 96       	adiw	r24, 0x02	; 2
    1a20:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	gpib_untalkUnlisten();
    1a24:	0e 94 fe 05 	call	0xbfc	; 0xbfc <gpib_untalkUnlisten>
	return e;
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a2a:	c7 59       	subi	r28, 0x97	; 151
    1a2c:	df 4f       	sbci	r29, 0xFF	; 255
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	f8 94       	cli
    1a32:	de bf       	out	0x3e, r29	; 62
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	cd bf       	out	0x3d, r28	; 61
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <gpib_serial_poll>:
 * I haven't looked how a device with two byte address behaves.
 *
 * Secondary/primary is returned in inout parameters
 * If any emitter is found, return value is != 0.
 */
uchar gpib_serial_poll(uint8_t *primary_v, uint8_t* secondary_v) {
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	2d 97       	sbiw	r28, 0x0d	; 13
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	9b 87       	std	Y+11, r25	; 0x0b
    1a54:	8a 87       	std	Y+10, r24	; 0x0a
    1a56:	7d 87       	std	Y+13, r23	; 0x0d
    1a58:	6c 87       	std	Y+12, r22	; 0x0c
	uchar b, e;
	uchar primary = 0, secondary, found = 0, foundPrimary = ADDRESS_NOT_SET,
    1a5a:	1f 82       	std	Y+7, r1	; 0x07
    1a5c:	1d 82       	std	Y+5, r1	; 0x05
    1a5e:	8f ef       	ldi	r24, 0xFF	; 255
    1a60:	8c 83       	std	Y+4, r24	; 0x04
			foundSecondary = ADDRESS_NOT_SET;
    1a62:	8f ef       	ldi	r24, 0xFF	; 255
    1a64:	8b 83       	std	Y+3, r24	; 0x03
	int i;

	// send unlisten and untalk to all
	gpib_untalkUnlisten();
    1a66:	0e 94 fe 05 	call	0xbfc	; 0xbfc <gpib_untalkUnlisten>

	// serial poll sequence start
	gpib_spoll_start();
    1a6a:	0e 94 41 0c 	call	0x1882	; 0x1882 <gpib_spoll_start>

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    1a6e:	1a 82       	std	Y+2, r1	; 0x02
    1a70:	19 82       	std	Y+1, r1	; 0x01
    1a72:	a2 c0       	rjmp	.+324    	; 0x1bb8 <gpib_serial_poll+0x17a>
			i++) {

		// set partner to talker mode
		primary = address2TalkerAddress(controller.partners[i].primary);
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	9a 81       	ldd	r25, Y+2	; 0x02
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	ed 57       	subi	r30, 0x7D	; 125
    1a80:	fb 4f       	sbci	r31, 0xFB	; 251
    1a82:	80 81       	ld	r24, Z
    1a84:	80 5c       	subi	r24, 0xC0	; 192
    1a86:	8f 83       	std	Y+7, r24	; 0x07
		if (controller.partners[i].secondary != ADDRESS_NOT_SET) {
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8c:	03 96       	adiw	r24, 0x03	; 3
    1a8e:	88 0f       	add	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	fc 01       	movw	r30, r24
    1a94:	e2 58       	subi	r30, 0x82	; 130
    1a96:	fb 4f       	sbci	r31, 0xFB	; 251
    1a98:	80 81       	ld	r24, Z
    1a9a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a9c:	61 f0       	breq	.+24     	; 0x1ab6 <gpib_serial_poll+0x78>
			secondary = secondaryAdressToAdressByte(
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa2:	03 96       	adiw	r24, 0x03	; 3
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	e2 58       	subi	r30, 0x82	; 130
    1aac:	fb 4f       	sbci	r31, 0xFB	; 251
    1aae:	80 81       	ld	r24, Z
    1ab0:	80 66       	ori	r24, 0x60	; 96
    1ab2:	8e 83       	std	Y+6, r24	; 0x06
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <gpib_serial_poll+0x7c>
					controller.partners[i].secondary);
		} else {
			secondary = ADDRESS_NOT_SET;
    1ab6:	8f ef       	ldi	r24, 0xFF	; 255
    1ab8:	8e 83       	std	Y+6, r24	; 0x06
		}
		// query status byte from device
		e = gpib_spoll_single(primary, secondary, &b);
    1aba:	9e 01       	movw	r18, r28
    1abc:	27 5f       	subi	r18, 0xF7	; 247
    1abe:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac2:	6e 81       	ldd	r22, Y+6	; 0x06
    1ac4:	a9 01       	movw	r20, r18
    1ac6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <gpib_spoll_single>
    1aca:	88 87       	std	Y+8, r24	; 0x08

		// bit 6 of status byte of SRQ emitter is 1; check this
		// when reading status byte from emitter, he releases SRQ line (may also be tested here)
		if (b & (1 << 6)) {
    1acc:	89 85       	ldd	r24, Y+9	; 0x09
    1ace:	88 2f       	mov	r24, r24
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	80 74       	andi	r24, 0x40	; 64
    1ad4:	90 70       	andi	r25, 0x00	; 0
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <gpib_serial_poll+0x9e>
    1ada:	69 c0       	rjmp	.+210    	; 0x1bae <gpib_serial_poll+0x170>
			found = 1;
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	8d 83       	std	Y+5, r24	; 0x05
			foundPrimary = controller.partners[i].primary;
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	fc 01       	movw	r30, r24
    1aea:	ed 57       	subi	r30, 0x7D	; 125
    1aec:	fb 4f       	sbci	r31, 0xFB	; 251
    1aee:	80 81       	ld	r24, Z
    1af0:	8c 83       	std	Y+4, r24	; 0x04
			foundSecondary = controller.partners[i].secondary;
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	9a 81       	ldd	r25, Y+2	; 0x02
    1af6:	03 96       	adiw	r24, 0x03	; 3
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	fc 01       	movw	r30, r24
    1afe:	e2 58       	subi	r30, 0x82	; 130
    1b00:	fb 4f       	sbci	r31, 0xFB	; 251
    1b02:	80 81       	ld	r24, Z
    1b04:	8b 83       	std	Y+3, r24	; 0x03
			if (controller.partners[i].secondary != ADDRESS_NOT_SET) {
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0a:	03 96       	adiw	r24, 0x03	; 3
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	fc 01       	movw	r30, r24
    1b12:	e2 58       	subi	r30, 0x82	; 130
    1b14:	fb 4f       	sbci	r31, 0xFB	; 251
    1b16:	80 81       	ld	r24, Z
    1b18:	8f 3f       	cpi	r24, 0xFF	; 255
    1b1a:	41 f1       	breq	.+80     	; 0x1b6c <gpib_serial_poll+0x12e>
				sprintf((char*) cmd_buf,
    1b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	48 2f       	mov	r20, r24
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	8d b7       	in	r24, 0x3d	; 61
    1b2a:	9e b7       	in	r25, 0x3e	; 62
    1b2c:	08 97       	sbiw	r24, 0x08	; 8
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	9e bf       	out	0x3e, r25	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	8d bf       	out	0x3d, r24	; 61
    1b38:	ed b7       	in	r30, 0x3d	; 61
    1b3a:	fe b7       	in	r31, 0x3e	; 62
    1b3c:	31 96       	adiw	r30, 0x01	; 1
    1b3e:	86 e3       	ldi	r24, 0x36	; 54
    1b40:	95 e0       	ldi	r25, 0x05	; 5
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	80 83       	st	Z, r24
    1b46:	8c e0       	ldi	r24, 0x0C	; 12
    1b48:	92 e0       	ldi	r25, 0x02	; 2
    1b4a:	93 83       	std	Z+3, r25	; 0x03
    1b4c:	82 83       	std	Z+2, r24	; 0x02
    1b4e:	35 83       	std	Z+5, r19	; 0x05
    1b50:	24 83       	std	Z+4, r18	; 0x04
    1b52:	57 83       	std	Z+7, r21	; 0x07
    1b54:	46 83       	std	Z+6, r20	; 0x06
    1b56:	0e 94 3d 02 	call	0x47a	; 0x47a <sprintf>
    1b5a:	8d b7       	in	r24, 0x3d	; 61
    1b5c:	9e b7       	in	r25, 0x3e	; 62
    1b5e:	08 96       	adiw	r24, 0x08	; 8
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	9e bf       	out	0x3e, r25	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	8d bf       	out	0x3d, r24	; 61
    1b6a:	1d c0       	rjmp	.+58     	; 0x1ba6 <gpib_serial_poll+0x168>
						"SRQ emitter is device(primary,secondary) = (0x%02x,0x%02x)\n\r",
						foundPrimary, foundSecondary);
			} else {
				sprintf((char*) cmd_buf,
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <gpib_serial_poll+0x136>
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <gpib_serial_poll+0x138>
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <gpib_serial_poll+0x13a>
    1b78:	ed b7       	in	r30, 0x3d	; 61
    1b7a:	fe b7       	in	r31, 0x3e	; 62
    1b7c:	31 96       	adiw	r30, 0x01	; 1
    1b7e:	86 e3       	ldi	r24, 0x36	; 54
    1b80:	95 e0       	ldi	r25, 0x05	; 5
    1b82:	91 83       	std	Z+1, r25	; 0x01
    1b84:	80 83       	st	Z, r24
    1b86:	89 e4       	ldi	r24, 0x49	; 73
    1b88:	92 e0       	ldi	r25, 0x02	; 2
    1b8a:	93 83       	std	Z+3, r25	; 0x03
    1b8c:	82 83       	std	Z+2, r24	; 0x02
    1b8e:	35 83       	std	Z+5, r19	; 0x05
    1b90:	24 83       	std	Z+4, r18	; 0x04
    1b92:	0e 94 3d 02 	call	0x47a	; 0x47a <sprintf>
    1b96:	8d b7       	in	r24, 0x3d	; 61
    1b98:	9e b7       	in	r25, 0x3e	; 62
    1b9a:	06 96       	adiw	r24, 0x06	; 6
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	9e bf       	out	0x3e, r25	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	8d bf       	out	0x3d, r24	; 61
						"SRQ emitter is device(primary) = 0x%02x\n\r",
						foundPrimary);
			}
			uart_puts((char*) cmd_buf);
    1ba6:	86 e3       	ldi	r24, 0x36	; 54
    1ba8:	95 e0       	ldi	r25, 0x05	; 5
    1baa:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
	// serial poll sequence start
	gpib_spoll_start();

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
			i++) {
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb2:	01 96       	adiw	r24, 0x01	; 1
    1bb4:	9a 83       	std	Y+2, r25	; 0x02
    1bb6:	89 83       	std	Y+1, r24	; 0x01

	// serial poll sequence start
	gpib_spoll_start();

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	ed 57       	subi	r30, 0x7D	; 125
    1bc4:	fb 4f       	sbci	r31, 0xFB	; 251
    1bc6:	80 81       	ld	r24, Z
    1bc8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bca:	21 f0       	breq	.+8      	; 0x1bd4 <gpib_serial_poll+0x196>
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	88 23       	and	r24, r24
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <gpib_serial_poll+0x196>
    1bd2:	50 cf       	rjmp	.-352    	; 0x1a74 <gpib_serial_poll+0x36>
			uart_puts((char*) cmd_buf);
		}
	}

	// serial poll sequence end
	gpib_spoll_end(cmd_buf);
    1bd4:	86 e3       	ldi	r24, 0x36	; 54
    1bd6:	95 e0       	ldi	r25, 0x05	; 5
    1bd8:	0e 94 56 0c 	call	0x18ac	; 0x18ac <gpib_spoll_end>

	// "return" values determined
	*primary_v = foundPrimary;
    1bdc:	ea 85       	ldd	r30, Y+10	; 0x0a
    1bde:	fb 85       	ldd	r31, Y+11	; 0x0b
    1be0:	8c 81       	ldd	r24, Y+4	; 0x04
    1be2:	80 83       	st	Z, r24
	*secondary_v = foundSecondary;
    1be4:	ec 85       	ldd	r30, Y+12	; 0x0c
    1be6:	fd 85       	ldd	r31, Y+13	; 0x0d
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	80 83       	st	Z, r24

	return found;
    1bec:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1bee:	2d 96       	adiw	r28, 0x0d	; 13
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <gpib_set_partner_address>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_address(uchar primary, uchar secondary) {
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <gpib_set_partner_address+0x6>
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	6a 83       	std	Y+2, r22	; 0x02
	controller.partner.primary = primary;
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	80 93 7f 04 	sts	0x047F, r24
	controller.partner.secondary = secondary;
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	80 93 80 04 	sts	0x0480, r24
}
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <gpib_set_partner_secondary>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_secondary(uchar secondary) {
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	0f 92       	push	r0
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	89 83       	std	Y+1, r24	; 0x01
	controller.partner.secondary = secondary;
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	80 93 80 04 	sts	0x0480, r24
}
    1c36:	0f 90       	pop	r0
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <gpib_get_partner_pad>:

/**
 * Get primary address of device currently controlled.
 * \returns primary address Address of device.
 */
uchar gpib_get_partner_pad(void) {
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.primary;
    1c46:	80 91 7f 04 	lds	r24, 0x047F
}
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <gpib_get_partner_sad>:

/**
 * Get secondary address of device currently controlled.
 * \returns secondary address Address of device.
 */
uchar gpib_get_partner_sad(void) {
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.secondary;
    1c58:	80 91 80 04 	lds	r24, 0x0480
}
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <gpib_get_address>:

/**
 * Get controller address.
 * \returns address of controller.
 */
uchar gpib_get_address(void) {
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
	return controller.myaddress;
    1c6a:	80 91 7e 04 	lds	r24, 0x047E
}
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <gpib_set_flavour>:

void gpib_set_flavour(uchar flavour) {
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	0f 92       	push	r0
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	89 83       	std	Y+1, r24	; 0x01
	controller.flavour = flavour;
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	80 93 82 04 	sts	0x0482, r24
}
    1c86:	0f 90       	pop	r0
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <gpib_get_flavour>:

uchar gpib_get_flavour(void) {
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
	return controller.flavour;
    1c96:	80 91 82 04 	lds	r24, 0x0482
}
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <gpib_clear_partners>:

/**
 * Clear partners list
 */
void gpib_clear_partners() {
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <gpib_clear_partners+0x6>
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < MAX_PARTNER; i++) {
    1caa:	1a 82       	std	Y+2, r1	; 0x02
    1cac:	19 82       	std	Y+1, r1	; 0x01
    1cae:	0e c0       	rjmp	.+28     	; 0x1ccc <gpib_clear_partners+0x2c>
		controller.partners[i].primary = ADDRESS_NOT_SET;
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	fc 01       	movw	r30, r24
    1cba:	ed 57       	subi	r30, 0x7D	; 125
    1cbc:	fb 4f       	sbci	r31, 0xFB	; 251
    1cbe:	8f ef       	ldi	r24, 0xFF	; 255
    1cc0:	80 83       	st	Z, r24

/**
 * Clear partners list
 */
void gpib_clear_partners() {
	for (int i = 0; i < MAX_PARTNER; i++) {
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc6:	01 96       	adiw	r24, 0x01	; 1
    1cc8:	9a 83       	std	Y+2, r25	; 0x02
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd0:	85 30       	cpi	r24, 0x05	; 5
    1cd2:	91 05       	cpc	r25, r1
    1cd4:	6c f3       	brlt	.-38     	; 0x1cb0 <gpib_clear_partners+0x10>
		controller.partners[i].primary = ADDRESS_NOT_SET;
	}
}
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <gpib_add_partner_address>:

/**
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <gpib_add_partner_address+0x6>
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <gpib_add_partner_address+0x8>
    1ce8:	0f 92       	push	r0
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	8b 83       	std	Y+3, r24	; 0x03
    1cf0:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1cf2:	1a 82       	std	Y+2, r1	; 0x02
    1cf4:	19 82       	std	Y+1, r1	; 0x01
    1cf6:	05 c0       	rjmp	.+10     	; 0x1d02 <gpib_add_partner_address+0x22>
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
			i++) {
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfc:	01 96       	adiw	r24, 0x01	; 1
    1cfe:	9a 83       	std	Y+2, r25	; 0x02
    1d00:	89 83       	std	Y+1, r24	; 0x01
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	9a 81       	ldd	r25, Y+2	; 0x02
    1d06:	85 30       	cpi	r24, 0x05	; 5
    1d08:	91 05       	cpc	r25, r1
    1d0a:	54 f4       	brge	.+20     	; 0x1d20 <gpib_add_partner_address+0x40>
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	fc 01       	movw	r30, r24
    1d16:	ed 57       	subi	r30, 0x7D	; 125
    1d18:	fb 4f       	sbci	r31, 0xFB	; 251
    1d1a:	80 81       	ld	r24, Z
    1d1c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d1e:	61 f7       	brne	.-40     	; 0x1cf8 <gpib_add_partner_address+0x18>
			i++) {
	}
	if (i == MAX_PARTNER) {
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	9a 81       	ldd	r25, Y+2	; 0x02
    1d24:	85 30       	cpi	r24, 0x05	; 5
    1d26:	91 05       	cpc	r25, r1
    1d28:	39 f4       	brne	.+14     	; 0x1d38 <gpib_add_partner_address+0x58>
		uart_puts("Too much partners.\n\r");
    1d2a:	83 e7       	ldi	r24, 0x73	; 115
    1d2c:	92 e0       	ldi	r25, 0x02	; 2
    1d2e:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
		return 1;
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	8d 83       	std	Y+5, r24	; 0x05
    1d36:	14 c0       	rjmp	.+40     	; 0x1d60 <gpib_add_partner_address+0x80>
	}
	controller.partners[i].primary = primary;
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	fc 01       	movw	r30, r24
    1d42:	ed 57       	subi	r30, 0x7D	; 125
    1d44:	fb 4f       	sbci	r31, 0xFB	; 251
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	80 83       	st	Z, r24
	controller.partners[i].secondary = secondary;
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4e:	03 96       	adiw	r24, 0x03	; 3
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	fc 01       	movw	r30, r24
    1d56:	e2 58       	subi	r30, 0x82	; 130
    1d58:	fb 4f       	sbci	r31, 0xFB	; 251
    1d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5c:	80 83       	st	Z, r24
	return 0;
    1d5e:	1d 82       	std	Y+5, r1	; 0x05
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <gpib_remove_partner_address>:

/**
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <gpib_remove_partner_address+0x6>
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <gpib_remove_partner_address+0x8>
    1d7a:	0f 92       	push	r0
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	8b 83       	std	Y+3, r24	; 0x03
    1d82:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1d84:	1a 82       	std	Y+2, r1	; 0x02
    1d86:	19 82       	std	Y+1, r1	; 0x01
    1d88:	05 c0       	rjmp	.+10     	; 0x1d94 <gpib_remove_partner_address+0x22>
			i < MAX_PARTNER
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8e:	01 96       	adiw	r24, 0x01	; 1
    1d90:	9a 83       	std	Y+2, r25	; 0x02
    1d92:	89 83       	std	Y+1, r24	; 0x01
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	9a 81       	ldd	r25, Y+2	; 0x02
    1d98:	85 30       	cpi	r24, 0x05	; 5
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	bc f4       	brge	.+46     	; 0x1dcc <gpib_remove_partner_address+0x5a>
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	9a 81       	ldd	r25, Y+2	; 0x02
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	fc 01       	movw	r30, r24
    1da8:	ed 57       	subi	r30, 0x7D	; 125
    1daa:	fb 4f       	sbci	r31, 0xFB	; 251
    1dac:	90 81       	ld	r25, Z
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	98 17       	cp	r25, r24
    1db2:	59 f7       	brne	.-42     	; 0x1d8a <gpib_remove_partner_address+0x18>
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	9a 81       	ldd	r25, Y+2	; 0x02
    1db8:	03 96       	adiw	r24, 0x03	; 3
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	e2 58       	subi	r30, 0x82	; 130
    1dc2:	fb 4f       	sbci	r31, 0xFB	; 251
    1dc4:	90 81       	ld	r25, Z
    1dc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc8:	98 17       	cp	r25, r24
    1dca:	f9 f6       	brne	.-66     	; 0x1d8a <gpib_remove_partner_address+0x18>
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
	}
	if (i == MAX_PARTNER) {
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd0:	85 30       	cpi	r24, 0x05	; 5
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	39 f4       	brne	.+14     	; 0x1de4 <gpib_remove_partner_address+0x72>
		uart_puts("Partner unknown.\n\r");
    1dd6:	88 e8       	ldi	r24, 0x88	; 136
    1dd8:	92 e0       	ldi	r25, 0x02	; 2
    1dda:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
		return 1;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	8d 83       	std	Y+5, r24	; 0x05
    1de2:	14 c0       	rjmp	.+40     	; 0x1e0c <gpib_remove_partner_address+0x9a>
	}
	controller.partners[i].primary = ADDRESS_NOT_SET;
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	fc 01       	movw	r30, r24
    1dee:	ed 57       	subi	r30, 0x7D	; 125
    1df0:	fb 4f       	sbci	r31, 0xFB	; 251
    1df2:	8f ef       	ldi	r24, 0xFF	; 255
    1df4:	80 83       	st	Z, r24
	controller.partners[i].secondary = ADDRESS_NOT_SET;
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfa:	03 96       	adiw	r24, 0x03	; 3
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	fc 01       	movw	r30, r24
    1e02:	e2 58       	subi	r30, 0x82	; 130
    1e04:	fb 4f       	sbci	r31, 0xFB	; 251
    1e06:	8f ef       	ldi	r24, 0xFF	; 255
    1e08:	80 83       	st	Z, r24
	return 0;
    1e0a:	1d 82       	std	Y+5, r1	; 0x05
    1e0c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <gpib_device_exists>:
/**
 * Returns true if device exists.
 *
 * Existence is checked by reading in the status byte of the device in a serial poll sequence.
 */
uchar gpib_device_exists(uchar primary, uchar secondary) {
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	27 97       	sbiw	r28, 0x07	; 7
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	8d 83       	std	Y+5, r24	; 0x05
    1e34:	6e 83       	std	Y+6, r22	; 0x06
	uchar b, e;
	uchar found = 0, foundPhysical = ADDRESS_NOT_SET;
    1e36:	1a 82       	std	Y+2, r1	; 0x02
    1e38:	8f ef       	ldi	r24, 0xFF	; 255
    1e3a:	89 83       	std	Y+1, r24	; 0x01

	// send unlisten and untalk to all
	gpib_untalkUnlisten();
    1e3c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <gpib_untalkUnlisten>

	// serial poll sequence start
	gpib_spoll_start();
    1e40:	0e 94 41 0c 	call	0x1882	; 0x1882 <gpib_spoll_start>

	// TODO: do next line with a timeout!!!
	// query status byte from device
	e = gpib_spoll_single(primary, secondary, &b);
    1e44:	9e 01       	movw	r18, r28
    1e46:	2c 5f       	subi	r18, 0xFC	; 252
    1e48:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4c:	6e 81       	ldd	r22, Y+6	; 0x06
    1e4e:	a9 01       	movw	r20, r18
    1e50:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <gpib_spoll_single>
    1e54:	8b 83       	std	Y+3, r24	; 0x03

	// serial poll sequence end
	gpib_spoll_end(cmd_buf);
    1e56:	86 e3       	ldi	r24, 0x36	; 54
    1e58:	95 e0       	ldi	r25, 0x05	; 5
    1e5a:	0e 94 56 0c 	call	0x18ac	; 0x18ac <gpib_spoll_end>

	return e != 0xff;
    1e5e:	1f 82       	std	Y+7, r1	; 0x07
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	8f 3f       	cpi	r24, 0xFF	; 255
    1e64:	11 f0       	breq	.+4      	; 0x1e6a <gpib_device_exists+0x4c>
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	8f 83       	std	Y+7, r24	; 0x07
    1e6a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1e6c:	27 96       	adiw	r28, 0x07	; 7
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <gpib_find_devices>:

void gpib_find_devices(uchar maxAddress) {
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
    1e86:	e5 97       	sbiw	r28, 0x35	; 53
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	de bf       	out	0x3e, r29	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	cd bf       	out	0x3d, r28	; 61
    1e92:	8d ab       	std	Y+53, r24	; 0x35
	char txt[50];
	for (int i = 1; i < maxAddress; i++) {
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9a 83       	std	Y+2, r25	; 0x02
    1e9a:	89 83       	std	Y+1, r24	; 0x01
    1e9c:	39 c0       	rjmp	.+114    	; 0x1f10 <gpib_find_devices+0x92>
		if (gpib_device_exists(address2TalkerAddress(i), ADDRESS_NOT_SET)) {
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	80 5c       	subi	r24, 0xC0	; 192
    1ea2:	6f ef       	ldi	r22, 0xFF	; 255
    1ea4:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <gpib_device_exists>
    1ea8:	88 23       	and	r24, r24
    1eaa:	99 f0       	breq	.+38     	; 0x1ed2 <gpib_find_devices+0x54>
			sprintf("Device found at address: %d", i);
    1eac:	29 81       	ldd	r18, Y+1	; 0x01
    1eae:	3a 81       	ldd	r19, Y+2	; 0x02
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <gpib_find_devices+0x34>
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <gpib_find_devices+0x36>
    1eb4:	ed b7       	in	r30, 0x3d	; 61
    1eb6:	fe b7       	in	r31, 0x3e	; 62
    1eb8:	31 96       	adiw	r30, 0x01	; 1
    1eba:	8b e9       	ldi	r24, 0x9B	; 155
    1ebc:	92 e0       	ldi	r25, 0x02	; 2
    1ebe:	91 83       	std	Z+1, r25	; 0x01
    1ec0:	80 83       	st	Z, r24
    1ec2:	33 83       	std	Z+3, r19	; 0x03
    1ec4:	22 83       	std	Z+2, r18	; 0x02
    1ec6:	0e 94 3d 02 	call	0x47a	; 0x47a <sprintf>
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
		}
		if (gpib_device_exists(address2TalkerAddress(i), 0)) {
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	80 5c       	subi	r24, 0xC0	; 192
    1ed6:	60 e0       	ldi	r22, 0x00	; 0
    1ed8:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <gpib_device_exists>
    1edc:	88 23       	and	r24, r24
    1ede:	99 f0       	breq	.+38     	; 0x1f06 <gpib_find_devices+0x88>
			sprintf("Device found at address: (%d,0)", i);
    1ee0:	29 81       	ldd	r18, Y+1	; 0x01
    1ee2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ee4:	00 d0       	rcall	.+0      	; 0x1ee6 <gpib_find_devices+0x68>
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <gpib_find_devices+0x6a>
    1ee8:	ed b7       	in	r30, 0x3d	; 61
    1eea:	fe b7       	in	r31, 0x3e	; 62
    1eec:	31 96       	adiw	r30, 0x01	; 1
    1eee:	87 eb       	ldi	r24, 0xB7	; 183
    1ef0:	92 e0       	ldi	r25, 0x02	; 2
    1ef2:	91 83       	std	Z+1, r25	; 0x01
    1ef4:	80 83       	st	Z, r24
    1ef6:	33 83       	std	Z+3, r19	; 0x03
    1ef8:	22 83       	std	Z+2, r18	; 0x02
    1efa:	0e 94 3d 02 	call	0x47a	; 0x47a <sprintf>
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
	return e != 0xff;
}

void gpib_find_devices(uchar maxAddress) {
	char txt[50];
	for (int i = 1; i < maxAddress; i++) {
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	01 96       	adiw	r24, 0x01	; 1
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	8d a9       	ldd	r24, Y+53	; 0x35
    1f12:	28 2f       	mov	r18, r24
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1a:	82 17       	cp	r24, r18
    1f1c:	93 07       	cpc	r25, r19
    1f1e:	0c f4       	brge	.+2      	; 0x1f22 <gpib_find_devices+0xa4>
    1f20:	be cf       	rjmp	.-132    	; 0x1e9e <gpib_find_devices+0x20>
		}
		if (gpib_device_exists(address2TalkerAddress(i), 0)) {
			sprintf("Device found at address: (%d,0)", i);
		}
	}
}
    1f22:	e5 96       	adiw	r28, 0x35	; 53
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	de bf       	out	0x3e, r29	; 62
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	cd bf       	out	0x3d, r28	; 61
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <stringToTwoUchars>:

/**
 * Read two integers from string like "45 56" or one integer. In latter case
 * the second integer is initialized with a special value.
 */
static void stringToTwoUchars(char *string, uchar *a, uchar *b) {
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	28 97       	sbiw	r28, 0x08	; 8
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	9c 83       	std	Y+4, r25	; 0x04
    1f4a:	8b 83       	std	Y+3, r24	; 0x03
    1f4c:	7e 83       	std	Y+6, r23	; 0x06
    1f4e:	6d 83       	std	Y+5, r22	; 0x05
    1f50:	58 87       	std	Y+8, r21	; 0x08
    1f52:	4f 83       	std	Y+7, r20	; 0x07
	char *token = strtok(string, " ");
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	9c 81       	ldd	r25, Y+4	; 0x04
    1f58:	27 ed       	ldi	r18, 0xD7	; 215
    1f5a:	32 e0       	ldi	r19, 0x02	; 2
    1f5c:	b9 01       	movw	r22, r18
    1f5e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <strtok>
    1f62:	9a 83       	std	Y+2, r25	; 0x02
    1f64:	89 83       	std	Y+1, r24	; 0x01
	*a = atoi((char*) token);
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6a:	0e 94 c9 01 	call	0x392	; 0x392 <atoi>
    1f6e:	ed 81       	ldd	r30, Y+5	; 0x05
    1f70:	fe 81       	ldd	r31, Y+6	; 0x06
    1f72:	80 83       	st	Z, r24
	token = strtok(NULL, " ");
    1f74:	27 ed       	ldi	r18, 0xD7	; 215
    1f76:	32 e0       	ldi	r19, 0x02	; 2
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	b9 01       	movw	r22, r18
    1f7e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <strtok>
    1f82:	9a 83       	std	Y+2, r25	; 0x02
    1f84:	89 83       	std	Y+1, r24	; 0x01
	if (token != NULL) {
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	41 f0       	breq	.+16     	; 0x1f9e <stringToTwoUchars+0x6a>
		*b = atoi((char*) token);
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	9a 81       	ldd	r25, Y+2	; 0x02
    1f92:	0e 94 c9 01 	call	0x392	; 0x392 <atoi>
    1f96:	ef 81       	ldd	r30, Y+7	; 0x07
    1f98:	f8 85       	ldd	r31, Y+8	; 0x08
    1f9a:	80 83       	st	Z, r24
    1f9c:	04 c0       	rjmp	.+8      	; 0x1fa6 <stringToTwoUchars+0x72>
	} else {
		*b = ADDRESS_NOT_SET;
    1f9e:	ef 81       	ldd	r30, Y+7	; 0x07
    1fa0:	f8 85       	ldd	r31, Y+8	; 0x08
    1fa2:	8f ef       	ldi	r24, 0xFF	; 255
    1fa4:	80 83       	st	Z, r24
	}
}
    1fa6:	28 96       	adiw	r28, 0x08	; 8
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <check_errors>:
 * Checks for errors.
 *
 * Reads error queue. output is one error per line.
 *
 */
void check_errors() {
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	c7 55       	subi	r28, 0x57	; 87
    1fc2:	d0 40       	sbci	r29, 0x00	; 0
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
	char *error_cmd = "SYST:ERR?";
    1fce:	89 ed       	ldi	r24, 0xD9	; 217
    1fd0:	92 e0       	ldi	r25, 0x02	; 2
    1fd2:	9e 83       	std	Y+6, r25	; 0x06
    1fd4:	8d 83       	std	Y+5, r24	; 0x05
	uchar msg[80];
	uchar b, e;
	uchar colptr = 0;
    1fd6:	1b 82       	std	Y+3, r1	; 0x03
	uchar allErrorsRead = 0;
    1fd8:	1a 82       	std	Y+2, r1	; 0x02
    1fda:	48 c0       	rjmp	.+144    	; 0x206c <check_errors+0xb4>

	while (!allErrorsRead) {
		gpib_write_command(error_cmd);
    1fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fde:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe0:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpib_write_command>
		gpib_prepare_read();
    1fe4:	0e 94 c9 05 	call	0xb92	; 0xb92 <gpib_prepare_read>
		// read the answer until EOI is detected (then e becomes true)
		uchar i = 0;
    1fe8:	19 82       	std	Y+1, r1	; 0x01
		do {
			// gpib bus receive
			e = gpib_receive(&b);
    1fea:	ce 01       	movw	r24, r28
    1fec:	89 5a       	subi	r24, 0xA9	; 169
    1fee:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff0:	0e 94 21 06 	call	0xc42	; 0xc42 <gpib_receive>
    1ff4:	8c 83       	std	Y+4, r24	; 0x04
			msg[i++] = b;
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	e9 5a       	subi	r30, 0xA9	; 169
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	40 81       	ld	r20, Z
    2004:	ce 01       	movw	r24, r28
    2006:	07 96       	adiw	r24, 0x07	; 7
    2008:	fc 01       	movw	r30, r24
    200a:	e2 0f       	add	r30, r18
    200c:	f3 1f       	adc	r31, r19
    200e:	40 83       	st	Z, r20
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	8f 5f       	subi	r24, 0xFF	; 255
    2014:	89 83       	std	Y+1, r24	; 0x01
		} while (!e);
    2016:	8c 81       	ldd	r24, Y+4	; 0x04
    2018:	88 23       	and	r24, r24
    201a:	39 f3       	breq	.-50     	; 0x1fea <check_errors+0x32>
		// terminate string
		//msg[i++] = '\n';
		msg[i++] = '\r';
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	ce 01       	movw	r24, r28
    2024:	07 96       	adiw	r24, 0x07	; 7
    2026:	fc 01       	movw	r30, r24
    2028:	e2 0f       	add	r30, r18
    202a:	f3 1f       	adc	r31, r19
    202c:	8d e0       	ldi	r24, 0x0D	; 13
    202e:	80 83       	st	Z, r24
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	8f 5f       	subi	r24, 0xFF	; 255
    2034:	89 83       	std	Y+1, r24	; 0x01
		msg[i] = 0x00;
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	ce 01       	movw	r24, r28
    203e:	07 96       	adiw	r24, 0x07	; 7
    2040:	fc 01       	movw	r30, r24
    2042:	e2 0f       	add	r30, r18
    2044:	f3 1f       	adc	r31, r19
    2046:	10 82       	st	Z, r1
		// check if all errors have been read
		if (strncmp(msg,"+0,",3)==0) {
    2048:	ce 01       	movw	r24, r28
    204a:	07 96       	adiw	r24, 0x07	; 7
    204c:	23 ee       	ldi	r18, 0xE3	; 227
    204e:	32 e0       	ldi	r19, 0x02	; 2
    2050:	b9 01       	movw	r22, r18
    2052:	43 e0       	ldi	r20, 0x03	; 3
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	0e 94 f5 01 	call	0x3ea	; 0x3ea <strncmp>
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	19 f4       	brne	.+6      	; 0x2064 <check_errors+0xac>
			allErrorsRead=1;
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	8a 83       	std	Y+2, r24	; 0x02
    2062:	04 c0       	rjmp	.+8      	; 0x206c <check_errors+0xb4>
		} else {
			uart_puts((char*) msg);
    2064:	ce 01       	movw	r24, r28
    2066:	07 96       	adiw	r24, 0x07	; 7
    2068:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
	uchar msg[80];
	uchar b, e;
	uchar colptr = 0;
	uchar allErrorsRead = 0;

	while (!allErrorsRead) {
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	88 23       	and	r24, r24
    2070:	09 f4       	brne	.+2      	; 0x2074 <check_errors+0xbc>
    2072:	b4 cf       	rjmp	.-152    	; 0x1fdc <check_errors+0x24>
			allErrorsRead=1;
		} else {
			uart_puts((char*) msg);
		}
	}
}
    2074:	c9 5a       	subi	r28, 0xA9	; 169
    2076:	df 4f       	sbci	r29, 0xFF	; 255
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <input_char>:

/**
 * Reads in character into parameter c. Checks for errors and prints them out.
 * Returns 0 if there is no char to read, 1 if there was a char read in.
 */
uchar input_char(uchar *ch) {
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	00 d0       	rcall	.+0      	; 0x208e <input_char+0x6>
    208e:	00 d0       	rcall	.+0      	; 0x2090 <input_char+0x8>
    2090:	0f 92       	push	r0
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	9c 83       	std	Y+4, r25	; 0x04
    2098:	8b 83       	std	Y+3, r24	; 0x03
	 * uart_getc() returns in the lower byte the received character and
	 * in the higher byte (bitmask) the last receive error
	 * UART_NO_DATA is returned when no data is available.
	 *
	 */
	c = uart_getc();
    209a:	0e 94 ed 16 	call	0x2dda	; 0x2dda <uart_getc>
    209e:	9a 83       	std	Y+2, r25	; 0x02
    20a0:	89 83       	std	Y+1, r24	; 0x01
	if (c & UART_NO_DATA) {
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	9a 81       	ldd	r25, Y+2	; 0x02
    20a6:	80 70       	andi	r24, 0x00	; 0
    20a8:	91 70       	andi	r25, 0x01	; 1
    20aa:	00 97       	sbiw	r24, 0x00	; 0
    20ac:	11 f0       	breq	.+4      	; 0x20b2 <input_char+0x2a>
		// no data available from UART
		return 0;
    20ae:	1d 82       	std	Y+5, r1	; 0x05
    20b0:	24 c0       	rjmp	.+72     	; 0x20fa <input_char+0x72>
	}
	// make uchar from character in int value
	*ch = (uchar) c;
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	eb 81       	ldd	r30, Y+3	; 0x03
    20b6:	fc 81       	ldd	r31, Y+4	; 0x04
    20b8:	80 83       	st	Z, r24

	/*
	 * new data available from UART
	 * check for Frame or Overrun error
	 */
	if (c & UART_FRAME_ERROR) {
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	9a 81       	ldd	r25, Y+2	; 0x02
    20be:	80 70       	andi	r24, 0x00	; 0
    20c0:	98 70       	andi	r25, 0x08	; 8
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	21 f0       	breq	.+8      	; 0x20ce <input_char+0x46>
		/* Framing Error detected, i.e no stop bit detected */
		uart_puts_P("UART Frame Error: ");
    20c6:	81 e8       	ldi	r24, 0x81	; 129
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
	}
	if (c & UART_OVERRUN_ERROR) {
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	9a 81       	ldd	r25, Y+2	; 0x02
    20d2:	80 70       	andi	r24, 0x00	; 0
    20d4:	94 70       	andi	r25, 0x04	; 4
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	21 f0       	breq	.+8      	; 0x20e2 <input_char+0x5a>
		/*
		 * Overrun, a character already present in the UART UDR register was
		 * not read by the interrupt handler before the next character arrived,
		 * one or more received characters have been dropped
		 */
		uart_puts_P("UART Overrun Error: ");
    20da:	8c e6       	ldi	r24, 0x6C	; 108
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
	}
	if (c & UART_BUFFER_OVERFLOW) {
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02
    20e6:	80 70       	andi	r24, 0x00	; 0
    20e8:	92 70       	andi	r25, 0x02	; 2
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	21 f0       	breq	.+8      	; 0x20f6 <input_char+0x6e>
		/*
		 * We are not reading the receive buffer fast enough,
		 * one or more received character have been dropped
		 */
		uart_puts_P("Buffer overflow error: ");
    20ee:	84 e5       	ldi	r24, 0x54	; 84
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
	}
	return 1;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	8d 83       	std	Y+5, r24	; 0x05
    20fa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <process_char>:
 * a) xon/xoff mode forward buffer to GPIB
 * b) no flow control: prints error message that input buffer is full.
 *
 * Returns 1 if command end is detected, 0 otherwise.
 */
uchar process_char(uchar *buf, uchar ch, int *ptr) {
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	00 d0       	rcall	.+0      	; 0x2112 <process_char+0x6>
    2112:	00 d0       	rcall	.+0      	; 0x2114 <process_char+0x8>
    2114:	00 d0       	rcall	.+0      	; 0x2116 <process_char+0xa>
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	9b 83       	std	Y+3, r25	; 0x03
    211c:	8a 83       	std	Y+2, r24	; 0x02
    211e:	6c 83       	std	Y+4, r22	; 0x04
    2120:	5e 83       	std	Y+6, r21	; 0x06
    2122:	4d 83       	std	Y+5, r20	; 0x05
	uchar ret = 0;
    2124:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * send received character back depending on global flag
	 */
	if (rs232_remote_echo) {
    2126:	80 91 77 04 	lds	r24, 0x0477
    212a:	88 23       	and	r24, r24
    212c:	19 f0       	breq	.+6      	; 0x2134 <process_char+0x28>
		uart_putc((unsigned char) ch);
    212e:	8c 81       	ldd	r24, Y+4	; 0x04
    2130:	0e 94 43 17 	call	0x2e86	; 0x2e86 <uart_putc>
	}

	// if input buffer is not full, add char
	if (*ptr < COMMAND_INPUT_BUFFER_SIZE - 1) {
    2134:	ed 81       	ldd	r30, Y+5	; 0x05
    2136:	fe 81       	ldd	r31, Y+6	; 0x06
    2138:	80 81       	ld	r24, Z
    213a:	91 81       	ldd	r25, Z+1	; 0x01
    213c:	8f 34       	cpi	r24, 0x4F	; 79
    213e:	91 05       	cpc	r25, r1
    2140:	ec f4       	brge	.+58     	; 0x217c <process_char+0x70>
		buf[(*ptr)++] = ch;
    2142:	ed 81       	ldd	r30, Y+5	; 0x05
    2144:	fe 81       	ldd	r31, Y+6	; 0x06
    2146:	40 81       	ld	r20, Z
    2148:	51 81       	ldd	r21, Z+1	; 0x01
    214a:	9a 01       	movw	r18, r20
    214c:	8a 81       	ldd	r24, Y+2	; 0x02
    214e:	9b 81       	ldd	r25, Y+3	; 0x03
    2150:	fc 01       	movw	r30, r24
    2152:	e2 0f       	add	r30, r18
    2154:	f3 1f       	adc	r31, r19
    2156:	8c 81       	ldd	r24, Y+4	; 0x04
    2158:	80 83       	st	Z, r24
    215a:	ca 01       	movw	r24, r20
    215c:	01 96       	adiw	r24, 0x01	; 1
    215e:	ed 81       	ldd	r30, Y+5	; 0x05
    2160:	fe 81       	ldd	r31, Y+6	; 0x06
    2162:	91 83       	std	Z+1, r25	; 0x01
    2164:	80 83       	st	Z, r24
		buf[*ptr] = '\0';
    2166:	ed 81       	ldd	r30, Y+5	; 0x05
    2168:	fe 81       	ldd	r31, Y+6	; 0x06
    216a:	80 81       	ld	r24, Z
    216c:	91 81       	ldd	r25, Z+1	; 0x01
    216e:	9c 01       	movw	r18, r24
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	9b 81       	ldd	r25, Y+3	; 0x03
    2174:	fc 01       	movw	r30, r24
    2176:	e2 0f       	add	r30, r18
    2178:	f3 1f       	adc	r31, r19
    217a:	10 82       	st	Z, r1
	}

	// if command ends or buffer is full ...
	if (ch == ASCII_CODE_CR || *ptr >= COMMAND_INPUT_BUFFER_SIZE - 1) {
    217c:	8c 81       	ldd	r24, Y+4	; 0x04
    217e:	8d 30       	cpi	r24, 0x0D	; 13
    2180:	39 f0       	breq	.+14     	; 0x2190 <process_char+0x84>
    2182:	ed 81       	ldd	r30, Y+5	; 0x05
    2184:	fe 81       	ldd	r31, Y+6	; 0x06
    2186:	80 81       	ld	r24, Z
    2188:	91 81       	ldd	r25, Z+1	; 0x01
    218a:	8f 34       	cpi	r24, 0x4F	; 79
    218c:	91 05       	cpc	r25, r1
    218e:	14 f1       	brlt	.+68     	; 0x21d4 <process_char+0xc8>
		if (ch == ASCII_CODE_CR) {
    2190:	8c 81       	ldd	r24, Y+4	; 0x04
    2192:	8d 30       	cpi	r24, 0x0D	; 13
    2194:	b9 f4       	brne	.+46     	; 0x21c4 <process_char+0xb8>
			// adjust string terminator
			buf[--(*ptr)] = '\0';
    2196:	ed 81       	ldd	r30, Y+5	; 0x05
    2198:	fe 81       	ldd	r31, Y+6	; 0x06
    219a:	80 81       	ld	r24, Z
    219c:	91 81       	ldd	r25, Z+1	; 0x01
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	ed 81       	ldd	r30, Y+5	; 0x05
    21a2:	fe 81       	ldd	r31, Y+6	; 0x06
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	80 83       	st	Z, r24
    21a8:	ed 81       	ldd	r30, Y+5	; 0x05
    21aa:	fe 81       	ldd	r31, Y+6	; 0x06
    21ac:	80 81       	ld	r24, Z
    21ae:	91 81       	ldd	r25, Z+1	; 0x01
    21b0:	9c 01       	movw	r18, r24
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	9b 81       	ldd	r25, Y+3	; 0x03
    21b6:	fc 01       	movw	r30, r24
    21b8:	e2 0f       	add	r30, r18
    21ba:	f3 1f       	adc	r31, r19
    21bc:	10 82       	st	Z, r1
			// let calling function send last command part (or command itself)
			ret = 1;
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	89 83       	std	Y+1, r24	; 0x01
    21c2:	08 c0       	rjmp	.+16     	; 0x21d4 <process_char+0xc8>
		} else {
			// send intermediate part of command.
			uart_puts_P("Command overflow.");
    21c4:	84 e9       	ldi	r24, 0x94	; 148
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
			*ptr = 0;
    21cc:	ed 81       	ldd	r30, Y+5	; 0x05
    21ce:	fe 81       	ldd	r31, Y+6	; 0x06
    21d0:	11 82       	std	Z+1, r1	; 0x01
    21d2:	10 82       	st	Z, r1
		}
	}
	return ret;
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    21d6:	26 96       	adiw	r28, 0x06	; 6
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	f8 94       	cli
    21dc:	de bf       	out	0x3e, r29	; 62
    21de:	0f be       	out	0x3f, r0	; 63
    21e0:	cd bf       	out	0x3d, r28	; 61
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <input_process>:
 * This approach handles small single line commands (needing no flow control) and large
 * multi-line commands if flow control is xon/xoff.
 *
 * \returns The character read in
 */
uchar input_process(uchar *buf, int *ptr) {
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	27 97       	sbiw	r28, 0x07	; 7
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	de bf       	out	0x3e, r29	; 62
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	cd bf       	out	0x3d, r28	; 61
    21fc:	9c 83       	std	Y+4, r25	; 0x04
    21fe:	8b 83       	std	Y+3, r24	; 0x03
    2200:	7e 83       	std	Y+6, r23	; 0x06
    2202:	6d 83       	std	Y+5, r22	; 0x05
	uchar ch, ret = 0;
    2204:	19 82       	std	Y+1, r1	; 0x01

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
    2206:	0e 94 e7 15 	call	0x2bce	; 0x2bce <uart_get_flow_control>
    220a:	81 30       	cpi	r24, 0x01	; 1
    220c:	b9 f4       	brne	.+46     	; 0x223c <input_process+0x54>
    220e:	12 c0       	rjmp	.+36     	; 0x2234 <input_process+0x4c>
		while (!ret) {
			// if nothing can be read in, return
			if (!input_char(&ch)) {
    2210:	ce 01       	movw	r24, r28
    2212:	02 96       	adiw	r24, 0x02	; 2
    2214:	0e 94 44 10 	call	0x2088	; 0x2088 <input_char>
    2218:	88 23       	and	r24, r24
    221a:	11 f4       	brne	.+4      	; 0x2220 <input_process+0x38>
				return 0;
    221c:	1f 82       	std	Y+7, r1	; 0x07
    221e:	22 c0       	rjmp	.+68     	; 0x2264 <input_process+0x7c>
			}
			ret = process_char(buf, ch, ptr);
    2220:	4a 81       	ldd	r20, Y+2	; 0x02
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	9c 81       	ldd	r25, Y+4	; 0x04
    2226:	2d 81       	ldd	r18, Y+5	; 0x05
    2228:	3e 81       	ldd	r19, Y+6	; 0x06
    222a:	64 2f       	mov	r22, r20
    222c:	a9 01       	movw	r20, r18
    222e:	0e 94 86 10 	call	0x210c	; 0x210c <process_char>
    2232:	89 83       	std	Y+1, r24	; 0x01
 */
uchar input_process(uchar *buf, int *ptr) {
	uchar ch, ret = 0;

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
		while (!ret) {
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	88 23       	and	r24, r24
    2238:	59 f3       	breq	.-42     	; 0x2210 <input_process+0x28>
    223a:	12 c0       	rjmp	.+36     	; 0x2260 <input_process+0x78>
			}
			ret = process_char(buf, ch, ptr);
		}
	} else {
		// if nothing can be read in, return
		if (!input_char(&ch)) {
    223c:	ce 01       	movw	r24, r28
    223e:	02 96       	adiw	r24, 0x02	; 2
    2240:	0e 94 44 10 	call	0x2088	; 0x2088 <input_char>
    2244:	88 23       	and	r24, r24
    2246:	11 f4       	brne	.+4      	; 0x224c <input_process+0x64>
			return 0;
    2248:	1f 82       	std	Y+7, r1	; 0x07
    224a:	0c c0       	rjmp	.+24     	; 0x2264 <input_process+0x7c>
		}
		ret = process_char(buf, ch, ptr);
    224c:	4a 81       	ldd	r20, Y+2	; 0x02
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	2d 81       	ldd	r18, Y+5	; 0x05
    2254:	3e 81       	ldd	r19, Y+6	; 0x06
    2256:	64 2f       	mov	r22, r20
    2258:	a9 01       	movw	r20, r18
    225a:	0e 94 86 10 	call	0x210c	; 0x210c <process_char>
    225e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	8f 83       	std	Y+7, r24	; 0x07
    2264:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2266:	27 96       	adiw	r28, 0x07	; 7
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	de bf       	out	0x3e, r29	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <handle_internal_commands>:

/**
 * Handles builtin commands.
 */
void handle_internal_commands(uchar *cmd) {
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	00 d0       	rcall	.+0      	; 0x227e <handle_internal_commands+0x6>
    227e:	00 d0       	rcall	.+0      	; 0x2280 <handle_internal_commands+0x8>
    2280:	00 d0       	rcall	.+0      	; 0x2282 <handle_internal_commands+0xa>
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	9c 83       	std	Y+4, r25	; 0x04
    2288:	8b 83       	std	Y+3, r24	; 0x03
	uchar val, val1;

	switch (cmd[1]) {
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	9c 81       	ldd	r25, Y+4	; 0x04
    228e:	fc 01       	movw	r30, r24
    2290:	31 96       	adiw	r30, 0x01	; 1
    2292:	80 81       	ld	r24, Z
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	3e 83       	std	Y+6, r19	; 0x06
    229a:	2d 83       	std	Y+5, r18	; 0x05
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	9e 81       	ldd	r25, Y+6	; 0x06
    22a0:	88 36       	cpi	r24, 0x68	; 104
    22a2:	91 05       	cpc	r25, r1
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <handle_internal_commands+0x30>
    22a6:	5e c1       	rjmp	.+700    	; 0x2564 <handle_internal_commands+0x2ec>
    22a8:	2d 81       	ldd	r18, Y+5	; 0x05
    22aa:	3e 81       	ldd	r19, Y+6	; 0x06
    22ac:	29 36       	cpi	r18, 0x69	; 105
    22ae:	31 05       	cpc	r19, r1
    22b0:	2c f5       	brge	.+74     	; 0x22fc <handle_internal_commands+0x84>
    22b2:	8d 81       	ldd	r24, Y+5	; 0x05
    22b4:	9e 81       	ldd	r25, Y+6	; 0x06
    22b6:	81 36       	cpi	r24, 0x61	; 97
    22b8:	91 05       	cpc	r25, r1
    22ba:	09 f4       	brne	.+2      	; 0x22be <handle_internal_commands+0x46>
    22bc:	3e c0       	rjmp	.+124    	; 0x233a <handle_internal_commands+0xc2>
    22be:	2d 81       	ldd	r18, Y+5	; 0x05
    22c0:	3e 81       	ldd	r19, Y+6	; 0x06
    22c2:	22 36       	cpi	r18, 0x62	; 98
    22c4:	31 05       	cpc	r19, r1
    22c6:	6c f4       	brge	.+26     	; 0x22e2 <handle_internal_commands+0x6a>
    22c8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ca:	9e 81       	ldd	r25, Y+6	; 0x06
    22cc:	8b 32       	cpi	r24, 0x2B	; 43
    22ce:	91 05       	cpc	r25, r1
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <handle_internal_commands+0x5c>
    22d2:	b3 c0       	rjmp	.+358    	; 0x243a <handle_internal_commands+0x1c2>
    22d4:	2d 81       	ldd	r18, Y+5	; 0x05
    22d6:	3e 81       	ldd	r19, Y+6	; 0x06
    22d8:	2d 32       	cpi	r18, 0x2D	; 45
    22da:	31 05       	cpc	r19, r1
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <handle_internal_commands+0x68>
    22de:	eb c0       	rjmp	.+470    	; 0x24b6 <handle_internal_commands+0x23e>
    22e0:	d8 c1       	rjmp	.+944    	; 0x2692 <handle_internal_commands+0x41a>
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
    22e4:	9e 81       	ldd	r25, Y+6	; 0x06
    22e6:	85 36       	cpi	r24, 0x65	; 101
    22e8:	91 05       	cpc	r25, r1
    22ea:	09 f4       	brne	.+2      	; 0x22ee <handle_internal_commands+0x76>
    22ec:	cb c1       	rjmp	.+918    	; 0x2684 <handle_internal_commands+0x40c>
    22ee:	2d 81       	ldd	r18, Y+5	; 0x05
    22f0:	3e 81       	ldd	r19, Y+6	; 0x06
    22f2:	26 36       	cpi	r18, 0x66	; 102
    22f4:	31 05       	cpc	r19, r1
    22f6:	09 f4       	brne	.+2      	; 0x22fa <handle_internal_commands+0x82>
    22f8:	5e c0       	rjmp	.+188    	; 0x23b6 <handle_internal_commands+0x13e>
    22fa:	cb c1       	rjmp	.+918    	; 0x2692 <handle_internal_commands+0x41a>
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2300:	82 37       	cpi	r24, 0x72	; 114
    2302:	91 05       	cpc	r25, r1
    2304:	09 f4       	brne	.+2      	; 0x2308 <handle_internal_commands+0x90>
    2306:	5b c0       	rjmp	.+182    	; 0x23be <handle_internal_commands+0x146>
    2308:	2d 81       	ldd	r18, Y+5	; 0x05
    230a:	3e 81       	ldd	r19, Y+6	; 0x06
    230c:	23 37       	cpi	r18, 0x73	; 115
    230e:	31 05       	cpc	r19, r1
    2310:	3c f4       	brge	.+14     	; 0x2320 <handle_internal_commands+0xa8>
    2312:	8d 81       	ldd	r24, Y+5	; 0x05
    2314:	9e 81       	ldd	r25, Y+6	; 0x06
    2316:	89 36       	cpi	r24, 0x69	; 105
    2318:	91 05       	cpc	r25, r1
    231a:	09 f4       	brne	.+2      	; 0x231e <handle_internal_commands+0xa6>
    231c:	26 c1       	rjmp	.+588    	; 0x256a <handle_internal_commands+0x2f2>
    231e:	b9 c1       	rjmp	.+882    	; 0x2692 <handle_internal_commands+0x41a>
    2320:	2d 81       	ldd	r18, Y+5	; 0x05
    2322:	3e 81       	ldd	r19, Y+6	; 0x06
    2324:	23 37       	cpi	r18, 0x73	; 115
    2326:	31 05       	cpc	r19, r1
    2328:	09 f4       	brne	.+2      	; 0x232c <handle_internal_commands+0xb4>
    232a:	5c c0       	rjmp	.+184    	; 0x23e4 <handle_internal_commands+0x16c>
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	9e 81       	ldd	r25, Y+6	; 0x06
    2330:	88 37       	cpi	r24, 0x78	; 120
    2332:	91 05       	cpc	r25, r1
    2334:	09 f4       	brne	.+2      	; 0x2338 <handle_internal_commands+0xc0>
    2336:	fd c0       	rjmp	.+506    	; 0x2532 <handle_internal_commands+0x2ba>
    2338:	ac c1       	rjmp	.+856    	; 0x2692 <handle_internal_commands+0x41a>
	case 'a':
		/* set partner primary+secondary address */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	02 96       	adiw	r24, 0x02	; 2
    2340:	ae 01       	movw	r20, r28
    2342:	4e 5f       	subi	r20, 0xFE	; 254
    2344:	5f 4f       	sbci	r21, 0xFF	; 255
    2346:	9e 01       	movw	r18, r28
    2348:	2f 5f       	subi	r18, 0xFF	; 255
    234a:	3f 4f       	sbci	r19, 0xFF	; 255
    234c:	b9 01       	movw	r22, r18
    234e:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <stringToTwoUchars>
		sprintf(cmd, "Set partner address, primary: %u , secondary: %u\n\r",
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	28 2f       	mov	r18, r24
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	48 2f       	mov	r20, r24
    235c:	50 e0       	ldi	r21, 0x00	; 0
    235e:	8d b7       	in	r24, 0x3d	; 61
    2360:	9e b7       	in	r25, 0x3e	; 62
    2362:	08 97       	sbiw	r24, 0x08	; 8
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	f8 94       	cli
    2368:	9e bf       	out	0x3e, r25	; 62
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	8d bf       	out	0x3d, r24	; 61
    236e:	ed b7       	in	r30, 0x3d	; 61
    2370:	fe b7       	in	r31, 0x3e	; 62
    2372:	31 96       	adiw	r30, 0x01	; 1
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	91 83       	std	Z+1, r25	; 0x01
    237a:	80 83       	st	Z, r24
    237c:	87 ee       	ldi	r24, 0xE7	; 231
    237e:	92 e0       	ldi	r25, 0x02	; 2
    2380:	93 83       	std	Z+3, r25	; 0x03
    2382:	82 83       	std	Z+2, r24	; 0x02
    2384:	35 83       	std	Z+5, r19	; 0x05
    2386:	24 83       	std	Z+4, r18	; 0x04
    2388:	57 83       	std	Z+7, r21	; 0x07
    238a:	46 83       	std	Z+6, r20	; 0x06
    238c:	0e 94 3d 02 	call	0x47a	; 0x47a <sprintf>
    2390:	2d b7       	in	r18, 0x3d	; 61
    2392:	3e b7       	in	r19, 0x3e	; 62
    2394:	28 5f       	subi	r18, 0xF8	; 248
    2396:	3f 4f       	sbci	r19, 0xFF	; 255
    2398:	0f b6       	in	r0, 0x3f	; 63
    239a:	f8 94       	cli
    239c:	3e bf       	out	0x3e, r19	; 62
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	2d bf       	out	0x3d, r18	; 61
				val, val1);
		uart_puts(cmd);
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	9c 81       	ldd	r25, Y+4	; 0x04
    23a6:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
		gpib_set_partner_address(val, val1);
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	9a 81       	ldd	r25, Y+2	; 0x02
    23ae:	69 2f       	mov	r22, r25
    23b0:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <gpib_set_partner_address>
    23b4:	74 c1       	rjmp	.+744    	; 0x269e <handle_internal_commands+0x426>
		break;
	case 'f':
		/* find devices */
		gpib_find_devices(10);
    23b6:	8a e0       	ldi	r24, 0x0A	; 10
    23b8:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <gpib_find_devices>
    23bc:	70 c1       	rjmp	.+736    	; 0x269e <handle_internal_commands+0x426>
		break;
	case 'r':
		/* SRQ enablement */
		if (!srq_enabled) {
    23be:	80 91 79 04 	lds	r24, 0x0479
    23c2:	88 23       	and	r24, r24
    23c4:	41 f4       	brne	.+16     	; 0x23d6 <handle_internal_commands+0x15e>
			srq_enabled = 1;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	80 93 79 04 	sts	0x0479, r24
			uart_puts_P("SRQs enabled\n\r");
    23cc:	8c e0       	ldi	r24, 0x0C	; 12
    23ce:	91 e0       	ldi	r25, 0x01	; 1
    23d0:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
    23d4:	64 c1       	rjmp	.+712    	; 0x269e <handle_internal_commands+0x426>
		} else {
			srq_enabled = 0;
    23d6:	10 92 79 04 	sts	0x0479, r1
			uart_puts_P("SRQs disabled\n\r");
    23da:	8c ef       	ldi	r24, 0xFC	; 252
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
    23e2:	5d c1       	rjmp	.+698    	; 0x269e <handle_internal_commands+0x426>
		}
		break;
	case 's':
		/* set partner secondary address */
		val = atoi((char*) (&(cmd[2])));
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	9c 81       	ldd	r25, Y+4	; 0x04
    23e8:	02 96       	adiw	r24, 0x02	; 2
    23ea:	0e 94 c9 01 	call	0x392	; 0x392 <atoi>
    23ee:	89 83       	std	Y+1, r24	; 0x01
		sprintf(cmd, "Set partner secondary address to %u\n\r", val);
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <handle_internal_commands+0x180>
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <handle_internal_commands+0x182>
    23fa:	00 d0       	rcall	.+0      	; 0x23fc <handle_internal_commands+0x184>
    23fc:	ed b7       	in	r30, 0x3d	; 61
    23fe:	fe b7       	in	r31, 0x3e	; 62
    2400:	31 96       	adiw	r30, 0x01	; 1
    2402:	8b 81       	ldd	r24, Y+3	; 0x03
    2404:	9c 81       	ldd	r25, Y+4	; 0x04
    2406:	91 83       	std	Z+1, r25	; 0x01
    2408:	80 83       	st	Z, r24
    240a:	8a e1       	ldi	r24, 0x1A	; 26
    240c:	93 e0       	ldi	r25, 0x03	; 3
    240e:	93 83       	std	Z+3, r25	; 0x03
    2410:	82 83       	std	Z+2, r24	; 0x02
    2412:	35 83       	std	Z+5, r19	; 0x05
    2414:	24 83       	std	Z+4, r18	; 0x04
    2416:	0e 94 3d 02 	call	0x47a	; 0x47a <sprintf>
    241a:	8d b7       	in	r24, 0x3d	; 61
    241c:	9e b7       	in	r25, 0x3e	; 62
    241e:	06 96       	adiw	r24, 0x06	; 6
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	9e bf       	out	0x3e, r25	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	8d bf       	out	0x3d, r24	; 61
		uart_puts(cmd);
    242a:	8b 81       	ldd	r24, Y+3	; 0x03
    242c:	9c 81       	ldd	r25, Y+4	; 0x04
    242e:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
		gpib_set_partner_secondary(val);
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <gpib_set_partner_secondary>
    2438:	32 c1       	rjmp	.+612    	; 0x269e <handle_internal_commands+0x426>
		break;
	case '+':
		/* add device */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    243a:	8b 81       	ldd	r24, Y+3	; 0x03
    243c:	9c 81       	ldd	r25, Y+4	; 0x04
    243e:	02 96       	adiw	r24, 0x02	; 2
    2440:	ae 01       	movw	r20, r28
    2442:	4e 5f       	subi	r20, 0xFE	; 254
    2444:	5f 4f       	sbci	r21, 0xFF	; 255
    2446:	9e 01       	movw	r18, r28
    2448:	2f 5f       	subi	r18, 0xFF	; 255
    244a:	3f 4f       	sbci	r19, 0xFF	; 255
    244c:	b9 01       	movw	r22, r18
    244e:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <stringToTwoUchars>
		sprintf(cmd, "Add device, primary: %u , secondary: %u\n\r", val, val1);
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	28 2f       	mov	r18, r24
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	48 2f       	mov	r20, r24
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	8d b7       	in	r24, 0x3d	; 61
    2460:	9e b7       	in	r25, 0x3e	; 62
    2462:	08 97       	sbiw	r24, 0x08	; 8
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	f8 94       	cli
    2468:	9e bf       	out	0x3e, r25	; 62
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	8d bf       	out	0x3d, r24	; 61
    246e:	ed b7       	in	r30, 0x3d	; 61
    2470:	fe b7       	in	r31, 0x3e	; 62
    2472:	31 96       	adiw	r30, 0x01	; 1
    2474:	8b 81       	ldd	r24, Y+3	; 0x03
    2476:	9c 81       	ldd	r25, Y+4	; 0x04
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	80 83       	st	Z, r24
    247c:	80 e4       	ldi	r24, 0x40	; 64
    247e:	93 e0       	ldi	r25, 0x03	; 3
    2480:	93 83       	std	Z+3, r25	; 0x03
    2482:	82 83       	std	Z+2, r24	; 0x02
    2484:	35 83       	std	Z+5, r19	; 0x05
    2486:	24 83       	std	Z+4, r18	; 0x04
    2488:	57 83       	std	Z+7, r21	; 0x07
    248a:	46 83       	std	Z+6, r20	; 0x06
    248c:	0e 94 3d 02 	call	0x47a	; 0x47a <sprintf>
    2490:	2d b7       	in	r18, 0x3d	; 61
    2492:	3e b7       	in	r19, 0x3e	; 62
    2494:	28 5f       	subi	r18, 0xF8	; 248
    2496:	3f 4f       	sbci	r19, 0xFF	; 255
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	3e bf       	out	0x3e, r19	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	2d bf       	out	0x3d, r18	; 61
		uart_puts(cmd);
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	9c 81       	ldd	r25, Y+4	; 0x04
    24a6:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
		gpib_add_partner_address(val, val1);
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	9a 81       	ldd	r25, Y+2	; 0x02
    24ae:	69 2f       	mov	r22, r25
    24b0:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <gpib_add_partner_address>
    24b4:	f4 c0       	rjmp	.+488    	; 0x269e <handle_internal_commands+0x426>
		break;
	case '-':
		/* add device */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    24b6:	8b 81       	ldd	r24, Y+3	; 0x03
    24b8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ba:	02 96       	adiw	r24, 0x02	; 2
    24bc:	ae 01       	movw	r20, r28
    24be:	4e 5f       	subi	r20, 0xFE	; 254
    24c0:	5f 4f       	sbci	r21, 0xFF	; 255
    24c2:	9e 01       	movw	r18, r28
    24c4:	2f 5f       	subi	r18, 0xFF	; 255
    24c6:	3f 4f       	sbci	r19, 0xFF	; 255
    24c8:	b9 01       	movw	r22, r18
    24ca:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <stringToTwoUchars>
		sprintf(cmd, "Remove device, primary: %u , secondary: %u\n\r", val,
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	28 2f       	mov	r18, r24
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	48 2f       	mov	r20, r24
    24d8:	50 e0       	ldi	r21, 0x00	; 0
    24da:	8d b7       	in	r24, 0x3d	; 61
    24dc:	9e b7       	in	r25, 0x3e	; 62
    24de:	08 97       	sbiw	r24, 0x08	; 8
    24e0:	0f b6       	in	r0, 0x3f	; 63
    24e2:	f8 94       	cli
    24e4:	9e bf       	out	0x3e, r25	; 62
    24e6:	0f be       	out	0x3f, r0	; 63
    24e8:	8d bf       	out	0x3d, r24	; 61
    24ea:	ed b7       	in	r30, 0x3d	; 61
    24ec:	fe b7       	in	r31, 0x3e	; 62
    24ee:	31 96       	adiw	r30, 0x01	; 1
    24f0:	8b 81       	ldd	r24, Y+3	; 0x03
    24f2:	9c 81       	ldd	r25, Y+4	; 0x04
    24f4:	91 83       	std	Z+1, r25	; 0x01
    24f6:	80 83       	st	Z, r24
    24f8:	8a e6       	ldi	r24, 0x6A	; 106
    24fa:	93 e0       	ldi	r25, 0x03	; 3
    24fc:	93 83       	std	Z+3, r25	; 0x03
    24fe:	82 83       	std	Z+2, r24	; 0x02
    2500:	35 83       	std	Z+5, r19	; 0x05
    2502:	24 83       	std	Z+4, r18	; 0x04
    2504:	57 83       	std	Z+7, r21	; 0x07
    2506:	46 83       	std	Z+6, r20	; 0x06
    2508:	0e 94 3d 02 	call	0x47a	; 0x47a <sprintf>
    250c:	2d b7       	in	r18, 0x3d	; 61
    250e:	3e b7       	in	r19, 0x3e	; 62
    2510:	28 5f       	subi	r18, 0xF8	; 248
    2512:	3f 4f       	sbci	r19, 0xFF	; 255
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	3e bf       	out	0x3e, r19	; 62
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	2d bf       	out	0x3d, r18	; 61
				val1);
		uart_puts(cmd);
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	9c 81       	ldd	r25, Y+4	; 0x04
    2522:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
		gpib_remove_partner_address(val, val1);
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	9a 81       	ldd	r25, Y+2	; 0x02
    252a:	69 2f       	mov	r22, r25
    252c:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <gpib_remove_partner_address>
    2530:	b6 c0       	rjmp	.+364    	; 0x269e <handle_internal_commands+0x426>
		break;
	case 'x':
		/* Xon/Xoff flow control */
		if (!xonXoffMode) {
    2532:	80 91 78 04 	lds	r24, 0x0478
    2536:	88 23       	and	r24, r24
    2538:	59 f4       	brne	.+22     	; 0x2550 <handle_internal_commands+0x2d8>
			xonXoffMode = 1;
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	80 93 78 04 	sts	0x0478, r24
			uart_set_flow_control(FLOWCONTROL_XONXOFF);
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol on\n\r");
    2546:	82 ee       	ldi	r24, 0xE2	; 226
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
    254e:	a7 c0       	rjmp	.+334    	; 0x269e <handle_internal_commands+0x426>
		} else {
			xonXoffMode = 0;
    2550:	10 92 78 04 	sts	0x0478, r1
			uart_set_flow_control(FLOWCONTROL_NONE);
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol off\n\r");
    255a:	87 ec       	ldi	r24, 0xC7	; 199
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
    2562:	9d c0       	rjmp	.+314    	; 0x269e <handle_internal_commands+0x426>
		}
		break;
	case 'h':
		/* print some usage infos */
		printHelp();
    2564:	0e 94 31 14 	call	0x2862	; 0x2862 <printHelp>
    2568:	9a c0       	rjmp	.+308    	; 0x269e <handle_internal_commands+0x426>
		break;
	case 'i':
		gpib_info();
    256a:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <gpib_info>
		sprintf(cmd, "Xon/Xoff flow control: %u\n\r", xonXoffMode);
    256e:	80 91 78 04 	lds	r24, 0x0478
    2572:	28 2f       	mov	r18, r24
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	00 d0       	rcall	.+0      	; 0x2578 <handle_internal_commands+0x300>
    2578:	00 d0       	rcall	.+0      	; 0x257a <handle_internal_commands+0x302>
    257a:	00 d0       	rcall	.+0      	; 0x257c <handle_internal_commands+0x304>
    257c:	ed b7       	in	r30, 0x3d	; 61
    257e:	fe b7       	in	r31, 0x3e	; 62
    2580:	31 96       	adiw	r30, 0x01	; 1
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	9c 81       	ldd	r25, Y+4	; 0x04
    2586:	91 83       	std	Z+1, r25	; 0x01
    2588:	80 83       	st	Z, r24
    258a:	87 e9       	ldi	r24, 0x97	; 151
    258c:	93 e0       	ldi	r25, 0x03	; 3
    258e:	93 83       	std	Z+3, r25	; 0x03
    2590:	82 83       	std	Z+2, r24	; 0x02
    2592:	35 83       	std	Z+5, r19	; 0x05
    2594:	24 83       	std	Z+4, r18	; 0x04
    2596:	0e 94 3d 02 	call	0x47a	; 0x47a <sprintf>
    259a:	8d b7       	in	r24, 0x3d	; 61
    259c:	9e b7       	in	r25, 0x3e	; 62
    259e:	06 96       	adiw	r24, 0x06	; 6
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	f8 94       	cli
    25a4:	9e bf       	out	0x3e, r25	; 62
    25a6:	0f be       	out	0x3f, r0	; 63
    25a8:	8d bf       	out	0x3d, r24	; 61
		uart_puts(cmd);
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	9c 81       	ldd	r25, Y+4	; 0x04
    25ae:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
		sprintf(cmd, "RS232 echo: %u\n\r", rs232_remote_echo);
    25b2:	80 91 77 04 	lds	r24, 0x0477
    25b6:	28 2f       	mov	r18, r24
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	00 d0       	rcall	.+0      	; 0x25bc <handle_internal_commands+0x344>
    25bc:	00 d0       	rcall	.+0      	; 0x25be <handle_internal_commands+0x346>
    25be:	00 d0       	rcall	.+0      	; 0x25c0 <handle_internal_commands+0x348>
    25c0:	ed b7       	in	r30, 0x3d	; 61
    25c2:	fe b7       	in	r31, 0x3e	; 62
    25c4:	31 96       	adiw	r30, 0x01	; 1
    25c6:	8b 81       	ldd	r24, Y+3	; 0x03
    25c8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ca:	91 83       	std	Z+1, r25	; 0x01
    25cc:	80 83       	st	Z, r24
    25ce:	83 eb       	ldi	r24, 0xB3	; 179
    25d0:	93 e0       	ldi	r25, 0x03	; 3
    25d2:	93 83       	std	Z+3, r25	; 0x03
    25d4:	82 83       	std	Z+2, r24	; 0x02
    25d6:	35 83       	std	Z+5, r19	; 0x05
    25d8:	24 83       	std	Z+4, r18	; 0x04
    25da:	0e 94 3d 02 	call	0x47a	; 0x47a <sprintf>
    25de:	2d b7       	in	r18, 0x3d	; 61
    25e0:	3e b7       	in	r19, 0x3e	; 62
    25e2:	2a 5f       	subi	r18, 0xFA	; 250
    25e4:	3f 4f       	sbci	r19, 0xFF	; 255
    25e6:	0f b6       	in	r0, 0x3f	; 63
    25e8:	f8 94       	cli
    25ea:	3e bf       	out	0x3e, r19	; 62
    25ec:	0f be       	out	0x3f, r0	; 63
    25ee:	2d bf       	out	0x3d, r18	; 61
		uart_puts(cmd);
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	9c 81       	ldd	r25, Y+4	; 0x04
    25f4:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
		sprintf(cmd, "SRQs enabled: %u\n\r", srq_enabled);
    25f8:	80 91 79 04 	lds	r24, 0x0479
    25fc:	28 2f       	mov	r18, r24
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	00 d0       	rcall	.+0      	; 0x2602 <handle_internal_commands+0x38a>
    2602:	00 d0       	rcall	.+0      	; 0x2604 <handle_internal_commands+0x38c>
    2604:	00 d0       	rcall	.+0      	; 0x2606 <handle_internal_commands+0x38e>
    2606:	ed b7       	in	r30, 0x3d	; 61
    2608:	fe b7       	in	r31, 0x3e	; 62
    260a:	31 96       	adiw	r30, 0x01	; 1
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	9c 81       	ldd	r25, Y+4	; 0x04
    2610:	91 83       	std	Z+1, r25	; 0x01
    2612:	80 83       	st	Z, r24
    2614:	84 ec       	ldi	r24, 0xC4	; 196
    2616:	93 e0       	ldi	r25, 0x03	; 3
    2618:	93 83       	std	Z+3, r25	; 0x03
    261a:	82 83       	std	Z+2, r24	; 0x02
    261c:	35 83       	std	Z+5, r19	; 0x05
    261e:	24 83       	std	Z+4, r18	; 0x04
    2620:	0e 94 3d 02 	call	0x47a	; 0x47a <sprintf>
    2624:	8d b7       	in	r24, 0x3d	; 61
    2626:	9e b7       	in	r25, 0x3e	; 62
    2628:	06 96       	adiw	r24, 0x06	; 6
    262a:	0f b6       	in	r0, 0x3f	; 63
    262c:	f8 94       	cli
    262e:	9e bf       	out	0x3e, r25	; 62
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	8d bf       	out	0x3d, r24	; 61
		uart_puts(cmd);
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	9c 81       	ldd	r25, Y+4	; 0x04
    2638:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
		sprintf(cmd, "Linebreak value: %u\n\r", linebreak);
    263c:	80 91 7a 04 	lds	r24, 0x047A
    2640:	28 2f       	mov	r18, r24
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	00 d0       	rcall	.+0      	; 0x2646 <handle_internal_commands+0x3ce>
    2646:	00 d0       	rcall	.+0      	; 0x2648 <handle_internal_commands+0x3d0>
    2648:	00 d0       	rcall	.+0      	; 0x264a <handle_internal_commands+0x3d2>
    264a:	ed b7       	in	r30, 0x3d	; 61
    264c:	fe b7       	in	r31, 0x3e	; 62
    264e:	31 96       	adiw	r30, 0x01	; 1
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	9c 81       	ldd	r25, Y+4	; 0x04
    2654:	91 83       	std	Z+1, r25	; 0x01
    2656:	80 83       	st	Z, r24
    2658:	87 ed       	ldi	r24, 0xD7	; 215
    265a:	93 e0       	ldi	r25, 0x03	; 3
    265c:	93 83       	std	Z+3, r25	; 0x03
    265e:	82 83       	std	Z+2, r24	; 0x02
    2660:	35 83       	std	Z+5, r19	; 0x05
    2662:	24 83       	std	Z+4, r18	; 0x04
    2664:	0e 94 3d 02 	call	0x47a	; 0x47a <sprintf>
    2668:	2d b7       	in	r18, 0x3d	; 61
    266a:	3e b7       	in	r19, 0x3e	; 62
    266c:	2a 5f       	subi	r18, 0xFA	; 250
    266e:	3f 4f       	sbci	r19, 0xFF	; 255
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	3e bf       	out	0x3e, r19	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	2d bf       	out	0x3d, r18	; 61
		uart_puts(cmd);
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	9c 81       	ldd	r25, Y+4	; 0x04
    267e:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
    2682:	0d c0       	rjmp	.+26     	; 0x269e <handle_internal_commands+0x426>
		break;
	case 'e':
		uart_puts_P("Check errors\n\r");
    2684:	88 eb       	ldi	r24, 0xB8	; 184
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
		check_errors();
    268c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <check_errors>
    2690:	06 c0       	rjmp	.+12     	; 0x269e <handle_internal_commands+0x426>
		arb();
		uart_puts("arb done\n\r");
		break;
#endif
	default:
		uart_puts_P("unknown command\n\r");
    2692:	86 ea       	ldi	r24, 0xA6	; 166
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
		printHelp();
    269a:	0e 94 31 14 	call	0x2862	; 0x2862 <printHelp>
		break;
	}
}
    269e:	26 96       	adiw	r28, 0x06	; 6
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	08 95       	ret

000026b0 <receiveAnswer>:

/**
 * Receives answer after command was sent.
 */
void receiveAnswer() {
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	00 d0       	rcall	.+0      	; 0x26b6 <receiveAnswer+0x6>
    26b6:	00 d0       	rcall	.+0      	; 0x26b8 <receiveAnswer+0x8>
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
	uchar b, e;
	uchar colptr = 0;
    26bc:	19 82       	std	Y+1, r1	; 0x01

	gpib_prepare_read();
    26be:	0e 94 c9 05 	call	0xb92	; 0xb92 <gpib_prepare_read>
	// read the answer until EOI is detected (then e becomes true)
	do {
		// gpib bus receive
		e = gpib_receive(&b);
    26c2:	ce 01       	movw	r24, r28
    26c4:	03 96       	adiw	r24, 0x03	; 3
    26c6:	0e 94 21 06 	call	0xc42	; 0xc42 <gpib_receive>
    26ca:	8a 83       	std	Y+2, r24	; 0x02
		// write out character
		uart_putc(b);
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	0e 94 43 17 	call	0x2e86	; 0x2e86 <uart_putc>
		if (linebreak && (colptr++ == linebreak)) {
    26d2:	80 91 7a 04 	lds	r24, 0x047A
    26d6:	88 23       	and	r24, r24
    26d8:	99 f0       	breq	.+38     	; 0x2700 <receiveAnswer+0x50>
    26da:	90 91 7a 04 	lds	r25, 0x047A
    26de:	1c 82       	std	Y+4, r1	; 0x04
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	89 17       	cp	r24, r25
    26e4:	11 f4       	brne	.+4      	; 0x26ea <receiveAnswer+0x3a>
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	8c 83       	std	Y+4, r24	; 0x04
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	8f 5f       	subi	r24, 0xFF	; 255
    26ee:	89 83       	std	Y+1, r24	; 0x01
    26f0:	8c 81       	ldd	r24, Y+4	; 0x04
    26f2:	88 23       	and	r24, r24
    26f4:	29 f0       	breq	.+10     	; 0x2700 <receiveAnswer+0x50>
			uart_puts_P("\n\r");
    26f6:	8b e1       	ldi	r24, 0x1B	; 27
    26f8:	91 e0       	ldi	r25, 0x01	; 1
    26fa:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
			colptr = 0;
    26fe:	19 82       	std	Y+1, r1	; 0x01
		}
		//sprintf((char*)buf,"%02x - %c\n\r", b, b);
		//uart_puts((char*)buf);
	} while (!e);
    2700:	8a 81       	ldd	r24, Y+2	; 0x02
    2702:	88 23       	and	r24, r24
    2704:	f1 f2       	breq	.-68     	; 0x26c2 <receiveAnswer+0x12>
}
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	cf 91       	pop	r28
    2710:	df 91       	pop	r29
    2712:	08 95       	ret

00002714 <srq_occured>:

/**
 * Check if a SRQ occured
 */
uchar srq_occured(int* old_time) {
    2714:	df 93       	push	r29
    2716:	cf 93       	push	r28
    2718:	00 d0       	rcall	.+0      	; 0x271a <srq_occured+0x6>
    271a:	0f 92       	push	r0
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	9b 83       	std	Y+3, r25	; 0x03
    2722:	8a 83       	std	Y+2, r24	; 0x02
	uchar srq = 0;
    2724:	19 82       	std	Y+1, r1	; 0x01
	if (*old_time == 0) {
    2726:	ea 81       	ldd	r30, Y+2	; 0x02
    2728:	fb 81       	ldd	r31, Y+3	; 0x03
    272a:	80 81       	ld	r24, Z
    272c:	91 81       	ldd	r25, Z+1	; 0x01
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	49 f4       	brne	.+18     	; 0x2744 <srq_occured+0x30>
		// old_time value initialization on first call with value s
		*old_time = s;
    2732:	80 91 eb 05 	lds	r24, 0x05EB
    2736:	88 2f       	mov	r24, r24
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	ea 81       	ldd	r30, Y+2	; 0x02
    273c:	fb 81       	ldd	r31, Y+3	; 0x03
    273e:	91 83       	std	Z+1, r25	; 0x01
    2740:	80 83       	st	Z, r24
    2742:	1e c0       	rjmp	.+60     	; 0x2780 <srq_occured+0x6c>
	} else {
		if (s > *old_time) {
    2744:	80 91 eb 05 	lds	r24, 0x05EB
    2748:	28 2f       	mov	r18, r24
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	ea 81       	ldd	r30, Y+2	; 0x02
    274e:	fb 81       	ldd	r31, Y+3	; 0x03
    2750:	80 81       	ld	r24, Z
    2752:	91 81       	ldd	r25, Z+1	; 0x01
    2754:	82 17       	cp	r24, r18
    2756:	93 07       	cpc	r25, r19
    2758:	9c f4       	brge	.+38     	; 0x2780 <srq_occured+0x6c>
			// some time has passed - check if srq was set
			srq = bit_is_clear(PIND, G_SRQ);
    275a:	e0 e3       	ldi	r30, 0x30	; 48
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	88 2f       	mov	r24, r24
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	80 74       	andi	r24, 0x40	; 64
    2766:	90 70       	andi	r25, 0x00	; 0
    2768:	19 82       	std	Y+1, r1	; 0x01
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	11 f4       	brne	.+4      	; 0x2772 <srq_occured+0x5e>
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	89 83       	std	Y+1, r24	; 0x01
			if (srq)
    2772:	89 81       	ldd	r24, Y+1	; 0x01
    2774:	88 23       	and	r24, r24
    2776:	21 f0       	breq	.+8      	; 0x2780 <srq_occured+0x6c>
				uart_puts_P("\n\rSRQ detected.\n\r");
    2778:	8e e1       	ldi	r24, 0x1E	; 30
    277a:	91 e0       	ldi	r25, 0x01	; 1
    277c:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
		}
	}
	return srq;
    2780:	89 81       	ldd	r24, Y+1	; 0x01
}
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	08 95       	ret

0000278e <srq_handle>:

/**
 * Handles SRQs by doing serial poll
 *
 */
uchar srq_handle(uchar *buf, int *buf_ptr) {
    278e:	df 93       	push	r29
    2790:	cf 93       	push	r28
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	28 97       	sbiw	r28, 0x08	; 8
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
    27a2:	9d 83       	std	Y+5, r25	; 0x05
    27a4:	8c 83       	std	Y+4, r24	; 0x04
    27a6:	7f 83       	std	Y+7, r23	; 0x07
    27a8:	6e 83       	std	Y+6, r22	; 0x06
	uchar command_ready = 0;
    27aa:	19 82       	std	Y+1, r1	; 0x01
	uint8_t primary, secondary;

	if (!gpib_serial_poll(&primary, &secondary)) {
    27ac:	ce 01       	movw	r24, r28
    27ae:	02 96       	adiw	r24, 0x02	; 2
    27b0:	9e 01       	movw	r18, r28
    27b2:	2d 5f       	subi	r18, 0xFD	; 253
    27b4:	3f 4f       	sbci	r19, 0xFF	; 255
    27b6:	b9 01       	movw	r22, r18
    27b8:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <gpib_serial_poll>
    27bc:	88 23       	and	r24, r24
    27be:	69 f4       	brne	.+26     	; 0x27da <srq_handle+0x4c>
		uart_puts_P(
    27c0:	8b e4       	ldi	r24, 0x4B	; 75
    27c2:	91 e0       	ldi	r25, 0x01	; 1
    27c4:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
				"\n\rSRQ emitter is not in list of known devices. SRQ Ignored.\n\r");
		uart_puts_P("\n\rSRQs are disabled now.\n\r");
    27c8:	80 e3       	ldi	r24, 0x30	; 48
    27ca:	91 e0       	ldi	r25, 0x01	; 1
    27cc:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
		srq_enabled = 0;
    27d0:	10 92 79 04 	sts	0x0479, r1
		return command_ready;
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	88 87       	std	Y+8, r24	; 0x08
    27d8:	3a c0       	rjmp	.+116    	; 0x284e <srq_handle+0xc0>
	}

	if (gpib_get_flavour() == FLAVOUR_TEK) {
    27da:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <gpib_get_flavour>
    27de:	81 30       	cpi	r24, 0x01	; 1
    27e0:	a1 f5       	brne	.+104    	; 0x284a <srq_handle+0xbc>
		gpib_set_partner_address(primary, secondary);
    27e2:	8a 81       	ldd	r24, Y+2	; 0x02
    27e4:	9b 81       	ldd	r25, Y+3	; 0x03
    27e6:	69 2f       	mov	r22, r25
    27e8:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <gpib_set_partner_address>
		// Tek: check status for reason
		buf[0] = 'E';
    27ec:	ec 81       	ldd	r30, Y+4	; 0x04
    27ee:	fd 81       	ldd	r31, Y+5	; 0x05
    27f0:	85 e4       	ldi	r24, 0x45	; 69
    27f2:	80 83       	st	Z, r24
		buf[1] = 'V';
    27f4:	8c 81       	ldd	r24, Y+4	; 0x04
    27f6:	9d 81       	ldd	r25, Y+5	; 0x05
    27f8:	fc 01       	movw	r30, r24
    27fa:	31 96       	adiw	r30, 0x01	; 1
    27fc:	86 e5       	ldi	r24, 0x56	; 86
    27fe:	80 83       	st	Z, r24
		buf[2] = 'E';
    2800:	8c 81       	ldd	r24, Y+4	; 0x04
    2802:	9d 81       	ldd	r25, Y+5	; 0x05
    2804:	fc 01       	movw	r30, r24
    2806:	32 96       	adiw	r30, 0x02	; 2
    2808:	85 e4       	ldi	r24, 0x45	; 69
    280a:	80 83       	st	Z, r24
		buf[3] = 'N';
    280c:	8c 81       	ldd	r24, Y+4	; 0x04
    280e:	9d 81       	ldd	r25, Y+5	; 0x05
    2810:	fc 01       	movw	r30, r24
    2812:	33 96       	adiw	r30, 0x03	; 3
    2814:	8e e4       	ldi	r24, 0x4E	; 78
    2816:	80 83       	st	Z, r24
		buf[4] = 'T';
    2818:	8c 81       	ldd	r24, Y+4	; 0x04
    281a:	9d 81       	ldd	r25, Y+5	; 0x05
    281c:	fc 01       	movw	r30, r24
    281e:	34 96       	adiw	r30, 0x04	; 4
    2820:	84 e5       	ldi	r24, 0x54	; 84
    2822:	80 83       	st	Z, r24
		buf[5] = '?';
    2824:	8c 81       	ldd	r24, Y+4	; 0x04
    2826:	9d 81       	ldd	r25, Y+5	; 0x05
    2828:	fc 01       	movw	r30, r24
    282a:	35 96       	adiw	r30, 0x05	; 5
    282c:	8f e3       	ldi	r24, 0x3F	; 63
    282e:	80 83       	st	Z, r24
		buf[6] = '\0';
    2830:	8c 81       	ldd	r24, Y+4	; 0x04
    2832:	9d 81       	ldd	r25, Y+5	; 0x05
    2834:	fc 01       	movw	r30, r24
    2836:	36 96       	adiw	r30, 0x06	; 6
    2838:	10 82       	st	Z, r1
		*buf_ptr = 6;
    283a:	ee 81       	ldd	r30, Y+6	; 0x06
    283c:	ff 81       	ldd	r31, Y+7	; 0x07
    283e:	86 e0       	ldi	r24, 0x06	; 6
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	91 83       	std	Z+1, r25	; 0x01
    2844:	80 83       	st	Z, r24
		command_ready = 1;
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	89 83       	std	Y+1, r24	; 0x01
	}
	return command_ready;
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	88 87       	std	Y+8, r24	; 0x08
    284e:	88 85       	ldd	r24, Y+8	; 0x08
}
    2850:	28 96       	adiw	r28, 0x08	; 8
    2852:	0f b6       	in	r0, 0x3f	; 63
    2854:	f8 94       	cli
    2856:	de bf       	out	0x3e, r29	; 62
    2858:	0f be       	out	0x3f, r0	; 63
    285a:	cd bf       	out	0x3d, r28	; 61
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <printHelp>:

void printHelp() {
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    286a:	c0 55       	subi	r28, 0x50	; 80
    286c:	d0 40       	sbci	r29, 0x00	; 0
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	de bf       	out	0x3e, r29	; 62
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	cd bf       	out	0x3d, r28	; 61
	char buf[COMMAND_INPUT_BUFFER_SIZE];
	sprintf(buf, "\n\rGPIB Controller (Rev.%s) (c) spurtikus.de 2008-2015\n\r",
    2878:	00 d0       	rcall	.+0      	; 0x287a <printHelp+0x18>
    287a:	00 d0       	rcall	.+0      	; 0x287c <printHelp+0x1a>
    287c:	00 d0       	rcall	.+0      	; 0x287e <printHelp+0x1c>
    287e:	ed b7       	in	r30, 0x3d	; 61
    2880:	fe b7       	in	r31, 0x3e	; 62
    2882:	31 96       	adiw	r30, 0x01	; 1
    2884:	ce 01       	movw	r24, r28
    2886:	01 96       	adiw	r24, 0x01	; 1
    2888:	91 83       	std	Z+1, r25	; 0x01
    288a:	80 83       	st	Z, r24
    288c:	8d ee       	ldi	r24, 0xED	; 237
    288e:	93 e0       	ldi	r25, 0x03	; 3
    2890:	93 83       	std	Z+3, r25	; 0x03
    2892:	82 83       	std	Z+2, r24	; 0x02
    2894:	85 e2       	ldi	r24, 0x25	; 37
    2896:	94 e0       	ldi	r25, 0x04	; 4
    2898:	95 83       	std	Z+5, r25	; 0x05
    289a:	84 83       	std	Z+4, r24	; 0x04
    289c:	0e 94 3d 02 	call	0x47a	; 0x47a <sprintf>
    28a0:	8d b7       	in	r24, 0x3d	; 61
    28a2:	9e b7       	in	r25, 0x3e	; 62
    28a4:	06 96       	adiw	r24, 0x06	; 6
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	f8 94       	cli
    28aa:	9e bf       	out	0x3e, r25	; 62
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	8d bf       	out	0x3d, r24	; 61
	REVISION);
	uart_puts(buf);
    28b0:	ce 01       	movw	r24, r28
    28b2:	01 96       	adiw	r24, 0x01	; 1
    28b4:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
	uart_puts_P("Internal commands:\n\r");
    28b8:	83 e0       	ldi	r24, 0x03	; 3
    28ba:	93 e0       	ldi	r25, 0x03	; 3
    28bc:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
	uart_puts(
    28c0:	89 e2       	ldi	r24, 0x29	; 41
    28c2:	94 e0       	ldi	r25, 0x04	; 4
    28c4:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
			".a <primary> [<secondary>] - set prim./second. address of remote device.\n\r");
	uart_puts_P(".e - dump error queue.\n\r");
    28c8:	8a ee       	ldi	r24, 0xEA	; 234
    28ca:	92 e0       	ldi	r25, 0x02	; 2
    28cc:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
	uart_puts_P(".f - find partners.\n\r");
    28d0:	84 ed       	ldi	r24, 0xD4	; 212
    28d2:	92 e0       	ldi	r25, 0x02	; 2
    28d4:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
	uart_puts_P(".h - print help.\n\r");
    28d8:	81 ec       	ldi	r24, 0xC1	; 193
    28da:	92 e0       	ldi	r25, 0x02	; 2
    28dc:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
	uart_puts_P(".i - dump info about controller state.\n\r");
    28e0:	88 e9       	ldi	r24, 0x98	; 152
    28e2:	92 e0       	ldi	r25, 0x02	; 2
    28e4:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
	uart_puts_P(".r - toggle SRQ enablement.\n\r");
    28e8:	8a e7       	ldi	r24, 0x7A	; 122
    28ea:	92 e0       	ldi	r25, 0x02	; 2
    28ec:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
	uart_puts_P(".s <secondary> - set secondary address of remote device.\n\r");
    28f0:	8f e3       	ldi	r24, 0x3F	; 63
    28f2:	92 e0       	ldi	r25, 0x02	; 2
    28f4:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
	uart_puts_P(".x - toggle Xon/Xoff flow control.\n\r");
    28f8:	8a e1       	ldi	r24, 0x1A	; 26
    28fa:	92 e0       	ldi	r25, 0x02	; 2
    28fc:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
	uart_puts_P(
    2900:	84 ed       	ldi	r24, 0xD4	; 212
    2902:	91 e0       	ldi	r25, 0x01	; 1
    2904:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
			".+ <p> [<s>] - add partner device address to list of known devices.\n\r");
	uart_puts_P(
    2908:	89 e8       	ldi	r24, 0x89	; 137
    290a:	91 e0       	ldi	r25, 0x01	; 1
    290c:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
			".- <p> [<s>] - remove partner device address from list of known devices.\n\r");
}
    2910:	c0 5b       	subi	r28, 0xB0	; 176
    2912:	df 4f       	sbci	r29, 0xFF	; 255
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	f8 94       	cli
    2918:	de bf       	out	0x3e, r29	; 62
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	cd bf       	out	0x3d, r28	; 61
    291e:	cf 91       	pop	r28
    2920:	df 91       	pop	r29
    2922:	08 95       	ret

00002924 <state_machine>:
 * 2. send user entered command, if available, to listeners (act as talker, set devices to listeners)
 * 3. if command was a query, read the answer from device (become listener and set device to talker)
 * 4. check if SRQ occured and handle that
 *
 */
void state_machine() {
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	c9 55       	subi	r28, 0x59	; 89
    292e:	d0 40       	sbci	r29, 0x00	; 0
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	f8 94       	cli
    2934:	de bf       	out	0x3e, r29	; 62
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	cd bf       	out	0x3d, r28	; 61
	int old_time = 0;
    293a:	1e 82       	std	Y+6, r1	; 0x06
    293c:	1d 82       	std	Y+5, r1	; 0x05
	uchar is_query = 0;
    293e:	1c 82       	std	Y+4, r1	; 0x04
	uchar do_prompt = 1;
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	8b 83       	std	Y+3, r24	; 0x03
	uchar ch;

	/** buffers used for commands and output strings */
	uchar buf[COMMAND_INPUT_BUFFER_SIZE];
	/** pointer in buffer */
	int buf_ptr = 0;
    2944:	fe 01       	movw	r30, r28
    2946:	e8 5a       	subi	r30, 0xA8	; 168
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	11 82       	std	Z+1, r1	; 0x01
    294c:	10 82       	st	Z, r1

	uchar state = S_INITIAL;
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	8a 83       	std	Y+2, r24	; 0x02
	for (;;) {
		if (state == S_INITIAL) {
    2952:	8a 81       	ldd	r24, Y+2	; 0x02
    2954:	81 30       	cpi	r24, 0x01	; 1
    2956:	49 f4       	brne	.+18     	; 0x296a <state_machine+0x46>
			if (do_prompt) {
    2958:	8b 81       	ldd	r24, Y+3	; 0x03
    295a:	88 23       	and	r24, r24
    295c:	31 f0       	breq	.+12     	; 0x296a <state_machine+0x46>
				uart_puts("> ");
    295e:	84 e7       	ldi	r24, 0x74	; 116
    2960:	94 e0       	ldi	r25, 0x04	; 4
    2962:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <uart_puts>
				do_prompt = 0;
    2966:	1b 82       	std	Y+3, r1	; 0x03
				is_query = 0;
    2968:	1c 82       	std	Y+4, r1	; 0x04
			}
		}

		if (!input_char(&ch))
    296a:	ce 01       	movw	r24, r28
    296c:	07 96       	adiw	r24, 0x07	; 7
    296e:	0e 94 44 10 	call	0x2088	; 0x2088 <input_char>
    2972:	88 23       	and	r24, r24
    2974:	71 f3       	breq	.-36     	; 0x2952 <state_machine+0x2e>
			continue;

		// byte received. Decide with state what to do.

		if (state == S_INITIAL) {
    2976:	8a 81       	ldd	r24, Y+2	; 0x02
    2978:	81 30       	cpi	r24, 0x01	; 1
    297a:	41 f4       	brne	.+16     	; 0x298c <state_machine+0x68>
			// internal or external command?
			if (ch == '.') {
    297c:	8f 81       	ldd	r24, Y+7	; 0x07
    297e:	8e 32       	cpi	r24, 0x2E	; 46
    2980:	19 f4       	brne	.+6      	; 0x2988 <state_machine+0x64>
				// internal command
				state = S_FIRST_BYTE_INT;
    2982:	82 e0       	ldi	r24, 0x02	; 2
    2984:	8a 83       	std	Y+2, r24	; 0x02
    2986:	02 c0       	rjmp	.+4      	; 0x298c <state_machine+0x68>
			} else {
				// gpib command
				state = S_FIRST_BYTE_GPIB;
    2988:	83 e0       	ldi	r24, 0x03	; 3
    298a:	8a 83       	std	Y+2, r24	; 0x02

			}
		}

		if (state == S_FIRST_BYTE_INT) {
    298c:	8a 81       	ldd	r24, Y+2	; 0x02
    298e:	82 30       	cpi	r24, 0x02	; 2
    2990:	59 f5       	brne	.+86     	; 0x29e8 <state_machine+0xc4>
			buf[0] = ch;
    2992:	8f 81       	ldd	r24, Y+7	; 0x07
    2994:	88 87       	std	Y+8, r24	; 0x08
			buf_ptr = 1;
    2996:	fe 01       	movw	r30, r28
    2998:	e8 5a       	subi	r30, 0xA8	; 168
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	91 83       	std	Z+1, r25	; 0x01
    29a2:	80 83       	st	Z, r24
			// send received character back depending on global flag
			if (rs232_remote_echo) {
    29a4:	80 91 77 04 	lds	r24, 0x0477
    29a8:	88 23       	and	r24, r24
    29aa:	19 f0       	breq	.+6      	; 0x29b2 <state_machine+0x8e>
				uart_putc((unsigned char) ch);
    29ac:	8f 81       	ldd	r24, Y+7	; 0x07
    29ae:	0e 94 43 17 	call	0x2e86	; 0x2e86 <uart_putc>
			}
			// collect line until CR
			while (!input_process(buf, &buf_ptr))
    29b2:	ce 01       	movw	r24, r28
    29b4:	08 96       	adiw	r24, 0x08	; 8
    29b6:	9e 01       	movw	r18, r28
    29b8:	28 5a       	subi	r18, 0xA8	; 168
    29ba:	3f 4f       	sbci	r19, 0xFF	; 255
    29bc:	b9 01       	movw	r22, r18
    29be:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <input_process>
    29c2:	88 23       	and	r24, r24
    29c4:	b1 f3       	breq	.-20     	; 0x29b2 <state_machine+0x8e>
				;
			uart_puts_P("\n\r");
    29c6:	81 e5       	ldi	r24, 0x51	; 81
    29c8:	93 e0       	ldi	r25, 0x03	; 3
    29ca:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
			// execute internal command
			handle_internal_commands(buf);
    29ce:	ce 01       	movw	r24, r28
    29d0:	08 96       	adiw	r24, 0x08	; 8
    29d2:	0e 94 3c 11 	call	0x2278	; 0x2278 <handle_internal_commands>
			// reset local vars
			state = S_INITIAL;
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	8a 83       	std	Y+2, r24	; 0x02
			buf_ptr = 0;
    29da:	fe 01       	movw	r30, r28
    29dc:	e8 5a       	subi	r30, 0xA8	; 168
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	11 82       	std	Z+1, r1	; 0x01
    29e2:	10 82       	st	Z, r1
			do_prompt = 1;
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	8b 83       	std	Y+3, r24	; 0x03
		}

		if (state == S_FIRST_BYTE_GPIB) {
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	83 30       	cpi	r24, 0x03	; 3
    29ec:	d1 f4       	brne	.+52     	; 0x2a22 <state_machine+0xfe>
			// GPIB command. Check if a partner was defined.
			if (gpib_get_partner_pad() == ADDRESS_NOT_SET) {
    29ee:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <gpib_get_partner_pad>
    29f2:	8f 3f       	cpi	r24, 0xFF	; 255
    29f4:	79 f4       	brne	.+30     	; 0x2a14 <state_machine+0xf0>
				uart_puts_P(
    29f6:	8e e1       	ldi	r24, 0x1E	; 30
    29f8:	93 e0       	ldi	r25, 0x03	; 3
    29fa:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
						"Device address is not set. Can not send command.\n\r");
				// reset local vars
				state = S_INITIAL;
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	8a 83       	std	Y+2, r24	; 0x02
				buf_ptr = 0;
    2a02:	fe 01       	movw	r30, r28
    2a04:	e8 5a       	subi	r30, 0xA8	; 168
    2a06:	ff 4f       	sbci	r31, 0xFF	; 255
    2a08:	11 82       	std	Z+1, r1	; 0x01
    2a0a:	10 82       	st	Z, r1
				do_prompt = 1;
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	8b 83       	std	Y+3, r24	; 0x03
				is_query = 0;
    2a10:	1c 82       	std	Y+4, r1	; 0x04
    2a12:	07 c0       	rjmp	.+14     	; 0x2a22 <state_machine+0xfe>
			} else {
				// write prologue
				state = S_SEND_BYTES;
    2a14:	84 e0       	ldi	r24, 0x04	; 4
    2a16:	8a 83       	std	Y+2, r24	; 0x02
				gpib_prepare_write();
    2a18:	0e 94 94 05 	call	0xb28	; 0xb28 <gpib_prepare_write>
				gpib_write_prologue(0);
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	0e 94 02 08 	call	0x1004	; 0x1004 <gpib_write_prologue>
			}
		}

		if (state == S_SEND_BYTES) {
    2a22:	8a 81       	ldd	r24, Y+2	; 0x02
    2a24:	84 30       	cpi	r24, 0x04	; 4
    2a26:	29 f5       	brne	.+74     	; 0x2a72 <state_machine+0x14e>
			// send received character back depending on global flag
			if (rs232_remote_echo) {
    2a28:	80 91 77 04 	lds	r24, 0x0477
    2a2c:	88 23       	and	r24, r24
    2a2e:	19 f0       	breq	.+6      	; 0x2a36 <state_machine+0x112>
				uart_putc((unsigned char) ch);
    2a30:	8f 81       	ldd	r24, Y+7	; 0x07
    2a32:	0e 94 43 17 	call	0x2e86	; 0x2e86 <uart_putc>
			}
			uchar isLastByte = (ch == ASCII_CODE_CR);
    2a36:	8f 81       	ldd	r24, Y+7	; 0x07
    2a38:	19 82       	std	Y+1, r1	; 0x01
    2a3a:	8d 30       	cpi	r24, 0x0D	; 13
    2a3c:	11 f4       	brne	.+4      	; 0x2a42 <state_machine+0x11e>
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	89 83       	std	Y+1, r24	; 0x01
			gpib_write_byte(ch, isLastByte);
    2a42:	8f 81       	ldd	r24, Y+7	; 0x07
    2a44:	69 81       	ldd	r22, Y+1	; 0x01
    2a46:	0e 94 bb 08 	call	0x1176	; 0x1176 <gpib_write_byte>

			if (ch == '?') {
    2a4a:	8f 81       	ldd	r24, Y+7	; 0x07
    2a4c:	8f 33       	cpi	r24, 0x3F	; 63
    2a4e:	11 f4       	brne	.+4      	; 0x2a54 <state_machine+0x130>
				is_query = 1;
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	8c 83       	std	Y+4, r24	; 0x04
			}

			if (isLastByte) {
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	88 23       	and	r24, r24
    2a58:	61 f0       	breq	.+24     	; 0x2a72 <state_machine+0x14e>
				uart_puts_P("\n\r");
    2a5a:	8b e1       	ldi	r24, 0x1B	; 27
    2a5c:	93 e0       	ldi	r25, 0x03	; 3
    2a5e:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
				if (is_query) {
    2a62:	8c 81       	ldd	r24, Y+4	; 0x04
    2a64:	88 23       	and	r24, r24
    2a66:	19 f0       	breq	.+6      	; 0x2a6e <state_machine+0x14a>
					//uart_puts("Query. Will check for answer.\n\r");
					state = S_GPIB_ANSWER;
    2a68:	85 e0       	ldi	r24, 0x05	; 5
    2a6a:	8a 83       	std	Y+2, r24	; 0x02
    2a6c:	02 c0       	rjmp	.+4      	; 0x2a72 <state_machine+0x14e>
				} else {
					//uart_puts("Command only.\n\r");
					state = S_GPIB_NO_ANSWER;
    2a6e:	86 e0       	ldi	r24, 0x06	; 6
    2a70:	8a 83       	std	Y+2, r24	; 0x02
				}
			}
		}

		// write epilogue
		if (state == S_GPIB_ANSWER || state == S_GPIB_NO_ANSWER) {
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	85 30       	cpi	r24, 0x05	; 5
    2a76:	19 f0       	breq	.+6      	; 0x2a7e <state_machine+0x15a>
    2a78:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7a:	86 30       	cpi	r24, 0x06	; 6
    2a7c:	41 f4       	brne	.+16     	; 0x2a8e <state_machine+0x16a>
			gpib_write_epilogue(0);
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	0e 94 51 08 	call	0x10a2	; 0x10a2 <gpib_write_epilogue>
			buf_ptr = 0;
    2a84:	fe 01       	movw	r30, r28
    2a86:	e8 5a       	subi	r30, 0xA8	; 168
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	11 82       	std	Z+1, r1	; 0x01
    2a8c:	10 82       	st	Z, r1
		}

		// if we sent a query, read the answer
		if (state == S_GPIB_ANSWER) {
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	85 30       	cpi	r24, 0x05	; 5
    2a92:	21 f4       	brne	.+8      	; 0x2a9c <state_machine+0x178>
			receiveAnswer();
    2a94:	0e 94 58 13 	call	0x26b0	; 0x26b0 <receiveAnswer>
			state = S_FINAL;
    2a98:	87 e0       	ldi	r24, 0x07	; 7
    2a9a:	8a 83       	std	Y+2, r24	; 0x02
		}

		// finalize state machine
		if (state == S_GPIB_NO_ANSWER || state == S_FINAL) {
    2a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9e:	86 30       	cpi	r24, 0x06	; 6
    2aa0:	19 f0       	breq	.+6      	; 0x2aa8 <state_machine+0x184>
    2aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa4:	87 30       	cpi	r24, 0x07	; 7
    2aa6:	51 f4       	brne	.+20     	; 0x2abc <state_machine+0x198>
			// untalk/unlisten all partners
			gpib_untalkUnlisten();
    2aa8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <gpib_untalkUnlisten>
			// some devices do not send cr,lf at command end, so create it always itself
			uart_puts_P("\n\r");
    2aac:	88 e1       	ldi	r24, 0x18	; 24
    2aae:	93 e0       	ldi	r25, 0x03	; 3
    2ab0:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <uart_puts_p>
			do_prompt = 1;
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	8b 83       	std	Y+3, r24	; 0x03
			state = S_INITIAL;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	8a 83       	std	Y+2, r24	; 0x02
		}

		// SRQ detection - do this every time when time value s has changed
		// s is incremented every second. So we check once a second.
		if (srq_enabled && srq_occured(&old_time)) {
    2abc:	80 91 79 04 	lds	r24, 0x0479
    2ac0:	88 23       	and	r24, r24
    2ac2:	09 f4       	brne	.+2      	; 0x2ac6 <state_machine+0x1a2>
    2ac4:	46 cf       	rjmp	.-372    	; 0x2952 <state_machine+0x2e>
    2ac6:	ce 01       	movw	r24, r28
    2ac8:	05 96       	adiw	r24, 0x05	; 5
    2aca:	0e 94 8a 13 	call	0x2714	; 0x2714 <srq_occured>
    2ace:	88 23       	and	r24, r24
    2ad0:	09 f4       	brne	.+2      	; 0x2ad4 <state_machine+0x1b0>
    2ad2:	3f cf       	rjmp	.-386    	; 0x2952 <state_machine+0x2e>
			// TODO: make handle srq work again
			// the returned command_ready was interpreted to read in an answer
			// but this was turned of for new input loop
			// next two lines replace that but must be tested.
			if (srq_handle(buf, &buf_ptr)) {
    2ad4:	ce 01       	movw	r24, r28
    2ad6:	08 96       	adiw	r24, 0x08	; 8
    2ad8:	9e 01       	movw	r18, r28
    2ada:	28 5a       	subi	r18, 0xA8	; 168
    2adc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ade:	b9 01       	movw	r22, r18
    2ae0:	0e 94 c7 13 	call	0x278e	; 0x278e <srq_handle>
    2ae4:	88 23       	and	r24, r24
    2ae6:	09 f4       	brne	.+2      	; 0x2aea <state_machine+0x1c6>
    2ae8:	34 cf       	rjmp	.-408    	; 0x2952 <state_machine+0x2e>
				state = S_GPIB_ANSWER;
    2aea:	85 e0       	ldi	r24, 0x05	; 5
    2aec:	8a 83       	std	Y+2, r24	; 0x02
    2aee:	31 cf       	rjmp	.-414    	; 0x2952 <state_machine+0x2e>

00002af0 <main>:
 * \brief Implementation of GPIB controller. Reads a command from RS232, sends it via bus.
 * If The command contains a '?', an answer from the device is expected and read in. The
 * answer then is printed out. If an SRQ occured, a serial poll is initiated.
 * 
 */
int main(void) {
    2af0:	df 93       	push	r29
    2af2:	cf 93       	push	r28
    2af4:	cd b7       	in	r28, 0x3d	; 61
    2af6:	de b7       	in	r29, 0x3e	; 62
	/*
	 *  Initialize UART library, pass baudrate and avr cpu clock 
	 *  with the macro UART_BAUD_SELECT()
	 */DI();
    2af8:	8c e0       	ldi	r24, 0x0C	; 12
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <uart_init>

	/*
	 * now enable interrupt, since UART and TIMER library is interrupt controlled
	 */sei();
    2b00:	78 94       	sei

	/** print some usage infos */
	printHelp();
    2b02:	0e 94 31 14 	call	0x2862	; 0x2862 <printHelp>

	// init timer for timeout detection
	timer16_init();
    2b06:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <timer16_init>

	// init gpib lines
	gpib_init();
    2b0a:	0e 94 15 05 	call	0xa2a	; 0xa2a <gpib_init>
	// init controller part - assign bus 
	gpib_controller_assign(0x00);
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	0e 94 0c 07 	call	0xe18	; 0xe18 <gpib_controller_assign>

	if (xonXoffMode) {
    2b14:	80 91 78 04 	lds	r24, 0x0478
    2b18:	88 23       	and	r24, r24
    2b1a:	19 f0       	breq	.+6      	; 0x2b22 <main+0x32>
		uart_set_flow_control(FLOWCONTROL_XONXOFF);
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <uart_set_flow_control>
	}

	// state machine loops forever
	state_machine();
    2b22:	0e 94 92 14 	call	0x2924	; 0x2924 <state_machine>
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	90 e0       	ldi	r25, 0x00	; 0
}
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <__vector_7>:

/**
 * Interrupt Service Routine - do not call directly
 *  This routine is called when the Timer Value TCNT1 reaches the Output Compare Register Value OCR1A
 */ 
ISR(TIMER1_COMPA_vect) {
    2b30:	1f 92       	push	r1
    2b32:	0f 92       	push	r0
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	0f 92       	push	r0
    2b38:	11 24       	eor	r1, r1
    2b3a:	8f 93       	push	r24
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
#if XTAL_CPU % DEBOUNCE
	OCR1A = XTAL_CPU / DEBOUNCE - 1;
#endif
	if (--timer==0) {
    2b44:	80 91 ea 05 	lds	r24, 0x05EA
    2b48:	81 50       	subi	r24, 0x01	; 1
    2b4a:	80 93 ea 05 	sts	0x05EA, r24
    2b4e:	80 91 ea 05 	lds	r24, 0x05EA
    2b52:	88 23       	and	r24, r24
    2b54:	39 f4       	brne	.+14     	; 0x2b64 <__vector_7+0x34>
		timer=(uint8_t) DEBOUNCE;
    2b56:	10 92 ea 05 	sts	0x05EA, r1
		s++;
    2b5a:	80 91 eb 05 	lds	r24, 0x05EB
    2b5e:	8f 5f       	subi	r24, 0xFF	; 255
    2b60:	80 93 eb 05 	sts	0x05EB, r24
#if XTAL_CPU % DEBOUNCE
		OCR1A = XTAL_CPU / DEBOUNCE + XTAL_CPU % DEBOUNCE - 1;
#endif
	}
}
    2b64:	cf 91       	pop	r28
    2b66:	df 91       	pop	r29
    2b68:	8f 91       	pop	r24
    2b6a:	0f 90       	pop	r0
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	0f 90       	pop	r0
    2b70:	1f 90       	pop	r1
    2b72:	18 95       	reti

00002b74 <timer16_init>:
/**
 * Timer initialisation.
 *  \brief initializes all registers ands sets second value 's' to zero. Timer is immediately
 * started.
 */ 
void timer16_init( void ) {
    2b74:	df 93       	push	r29
    2b76:	cf 93       	push	r28
    2b78:	cd b7       	in	r28, 0x3d	; 61
    2b7a:	de b7       	in	r29, 0x3e	; 62

	// OCR1A=XTAL/DEBOUNCE-1 -> Bei Erreichen dieses Wertes (31249) wird die ISR besucht
	// die ISR wird also alle 1/256s aufgerufen. Wenn man dort also bis 256 hochzählt, ist genau
	// 1 Sekunde um! 256 ist der Wert der Variable timer und wird über das define DEBOUNCE festgelegt

	TCCR1B = (1<<CS10) ^ (1<<WGM12);	// Prescaler of 1 | CTC mode
    2b7c:	ee e4       	ldi	r30, 0x4E	; 78
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	89 e0       	ldi	r24, 0x09	; 9
    2b82:	80 83       	st	Z, r24
	OCR1A  = F_CPU/DEBOUNCE-1;		// Output compare register value 
    2b84:	ea e4       	ldi	r30, 0x4A	; 74
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	81 e1       	ldi	r24, 0x11	; 17
    2b8a:	9a e7       	ldi	r25, 0x7A	; 122
    2b8c:	91 83       	std	Z+1, r25	; 0x01
    2b8e:	80 83       	st	Z, r24
	TCNT1 = 0; // Start value for timer register
    2b90:	ec e4       	ldi	r30, 0x4C	; 76
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	11 82       	std	Z+1, r1	; 0x01
    2b96:	10 82       	st	Z, r1
	s=0; // Initialize second value (s) to zero
    2b98:	10 92 eb 05 	sts	0x05EB, r1
	timer = (uint8_t)DEBOUNCE; 
    2b9c:	10 92 ea 05 	sts	0x05EA, r1
	TIMSK |= (1<<OCIE1A);		// activate timer interrupts which starts timer run
    2ba0:	a9 e5       	ldi	r26, 0x59	; 89
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	e9 e5       	ldi	r30, 0x59	; 89
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	80 61       	ori	r24, 0x10	; 16
    2bac:	8c 93       	st	X, r24
}
    2bae:	cf 91       	pop	r28
    2bb0:	df 91       	pop	r29
    2bb2:	08 95       	ret

00002bb4 <uart_set_flow_control>:
/** number of chars in rx buffer */
static volatile unsigned char chars_in_rx_buffer = 0;

void SendOutOfBand(unsigned char c);

void uart_set_flow_control(unsigned char _flowControl) {
    2bb4:	df 93       	push	r29
    2bb6:	cf 93       	push	r28
    2bb8:	0f 92       	push	r0
    2bba:	cd b7       	in	r28, 0x3d	; 61
    2bbc:	de b7       	in	r29, 0x3e	; 62
    2bbe:	89 83       	std	Y+1, r24	; 0x01
	flowControl = _flowControl;
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
    2bc2:	80 93 8d 04 	sts	0x048D, r24
}
    2bc6:	0f 90       	pop	r0
    2bc8:	cf 91       	pop	r28
    2bca:	df 91       	pop	r29
    2bcc:	08 95       	ret

00002bce <uart_get_flow_control>:

unsigned char uart_get_flow_control() {
    2bce:	df 93       	push	r29
    2bd0:	cf 93       	push	r28
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
	return flowControl;
    2bd6:	80 91 8d 04 	lds	r24, 0x048D
}
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
 Function: UART Receive Complete interrupt
 Purpose:  called when the UART has received a character
 **************************************************************************/
{
    2be0:	1f 92       	push	r1
    2be2:	0f 92       	push	r0
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	0f 92       	push	r0
    2be8:	11 24       	eor	r1, r1
    2bea:	2f 93       	push	r18
    2bec:	3f 93       	push	r19
    2bee:	4f 93       	push	r20
    2bf0:	5f 93       	push	r21
    2bf2:	6f 93       	push	r22
    2bf4:	7f 93       	push	r23
    2bf6:	8f 93       	push	r24
    2bf8:	9f 93       	push	r25
    2bfa:	af 93       	push	r26
    2bfc:	bf 93       	push	r27
    2bfe:	ef 93       	push	r30
    2c00:	ff 93       	push	r31
    2c02:	df 93       	push	r29
    2c04:	cf 93       	push	r28
    2c06:	00 d0       	rcall	.+0      	; 0x2c08 <__vector_13+0x28>
    2c08:	00 d0       	rcall	.+0      	; 0x2c0a <__vector_13+0x2a>
    2c0a:	cd b7       	in	r28, 0x3d	; 61
    2c0c:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	unsigned char usr;
	unsigned char lastRxError;

	/* read UART status register and UART data register */
	usr = UART0_STATUS;
    2c0e:	eb e2       	ldi	r30, 0x2B	; 43
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	80 81       	ld	r24, Z
    2c14:	8a 83       	std	Y+2, r24	; 0x02
	data = UART0_DATA;
    2c16:	ec e2       	ldi	r30, 0x2C	; 44
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	80 81       	ld	r24, Z
    2c1c:	8b 83       	std	Y+3, r24	; 0x03

	/* */
#if defined( AT90_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
    2c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c20:	88 71       	andi	r24, 0x18	; 24
    2c22:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif

	/* calculate buffer index */
	tmphead = (UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    2c24:	80 91 33 05 	lds	r24, 0x0533
    2c28:	8f 5f       	subi	r24, 0xFF	; 255
    2c2a:	8f 77       	andi	r24, 0x7F	; 127
    2c2c:	8c 83       	std	Y+4, r24	; 0x04

	if (tmphead == UART_RxTail) {
    2c2e:	90 91 34 05 	lds	r25, 0x0534
    2c32:	8c 81       	ldd	r24, Y+4	; 0x04
    2c34:	89 17       	cp	r24, r25
    2c36:	19 f4       	brne	.+6      	; 0x2c3e <__vector_13+0x5e>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    2c38:	82 e0       	ldi	r24, 0x02	; 2
    2c3a:	89 83       	std	Y+1, r24	; 0x01
    2c3c:	10 c0       	rjmp	.+32     	; 0x2c5e <__vector_13+0x7e>
	} else {
		/* store new index */
		UART_RxHead = tmphead;
    2c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c40:	80 93 33 05 	sts	0x0533, r24
		/* store received data in buffer */
		UART_RxBuf[tmphead] = data;
    2c44:	8c 81       	ldd	r24, Y+4	; 0x04
    2c46:	88 2f       	mov	r24, r24
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	ef 54       	subi	r30, 0x4F	; 79
    2c4e:	fb 4f       	sbci	r31, 0xFB	; 251
    2c50:	8b 81       	ldd	r24, Y+3	; 0x03
    2c52:	80 83       	st	Z, r24
		chars_in_rx_buffer++;
    2c54:	80 91 90 04 	lds	r24, 0x0490
    2c58:	8f 5f       	subi	r24, 0xFF	; 255
    2c5a:	80 93 90 04 	sts	0x0490, r24
	}

	if (flowControl == FLOWCONTROL_XONXOFF
    2c5e:	80 91 8d 04 	lds	r24, 0x048D
    2c62:	81 30       	cpi	r24, 0x01	; 1
    2c64:	99 f4       	brne	.+38     	; 0x2c8c <__vector_13+0xac>
    2c66:	80 91 90 04 	lds	r24, 0x0490
    2c6a:	81 36       	cpi	r24, 0x61	; 97
    2c6c:	78 f0       	brcs	.+30     	; 0x2c8c <__vector_13+0xac>
			&& chars_in_rx_buffer > UART_RX_BUFFER_MAX_MARK) {
		/* immediately send XOFF */
		oob_event = 1;
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	80 93 8e 04 	sts	0x048E, r24
		if (!after_xoff_sent) {
    2c74:	80 91 8f 04 	lds	r24, 0x048F
    2c78:	88 23       	and	r24, r24
    2c7a:	31 f4       	brne	.+12     	; 0x2c88 <__vector_13+0xa8>
			SendOutOfBand(XOFF);
    2c7c:	83 e1       	ldi	r24, 0x13	; 19
    2c7e:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <SendOutOfBand>
			after_xoff_sent = 1;
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	80 93 8f 04 	sts	0x048F, r24
		}
		oob_event = 0;
    2c88:	10 92 8e 04 	sts	0x048E, r1
	}

	UART_LastRxError = lastRxError;
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	80 93 35 05 	sts	0x0535, r24
}
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	ff 91       	pop	r31
    2ca0:	ef 91       	pop	r30
    2ca2:	bf 91       	pop	r27
    2ca4:	af 91       	pop	r26
    2ca6:	9f 91       	pop	r25
    2ca8:	8f 91       	pop	r24
    2caa:	7f 91       	pop	r23
    2cac:	6f 91       	pop	r22
    2cae:	5f 91       	pop	r21
    2cb0:	4f 91       	pop	r20
    2cb2:	3f 91       	pop	r19
    2cb4:	2f 91       	pop	r18
    2cb6:	0f 90       	pop	r0
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	0f 90       	pop	r0
    2cbc:	1f 90       	pop	r1
    2cbe:	18 95       	reti

00002cc0 <SendOutOfBand>:

void SendOutOfBand(unsigned char c) {
    2cc0:	df 93       	push	r29
    2cc2:	cf 93       	push	r28
    2cc4:	0f 92       	push	r0
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
    2cca:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << UDRE)))
    2ccc:	eb e2       	ldi	r30, 0x2B	; 43
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	88 2f       	mov	r24, r24
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	80 72       	andi	r24, 0x20	; 32
    2cd8:	90 70       	andi	r25, 0x00	; 0
    2cda:	00 97       	sbiw	r24, 0x00	; 0
    2cdc:	b9 f3       	breq	.-18     	; 0x2ccc <SendOutOfBand+0xc>
		;
	UDR = c;
    2cde:	ec e2       	ldi	r30, 0x2C	; 44
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	80 83       	st	Z, r24
}
    2ce6:	0f 90       	pop	r0
    2ce8:	cf 91       	pop	r28
    2cea:	df 91       	pop	r29
    2cec:	08 95       	ret

00002cee <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
 Function: UART Data Register Empty interrupt
 Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
    2cee:	1f 92       	push	r1
    2cf0:	0f 92       	push	r0
    2cf2:	0f b6       	in	r0, 0x3f	; 63
    2cf4:	0f 92       	push	r0
    2cf6:	11 24       	eor	r1, r1
    2cf8:	8f 93       	push	r24
    2cfa:	9f 93       	push	r25
    2cfc:	af 93       	push	r26
    2cfe:	bf 93       	push	r27
    2d00:	ef 93       	push	r30
    2d02:	ff 93       	push	r31
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	0f 92       	push	r0
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;

	if (oob_event) {
    2d0e:	80 91 8e 04 	lds	r24, 0x048E
    2d12:	88 23       	and	r24, r24
    2d14:	01 f5       	brne	.+64     	; 0x2d56 <__vector_14+0x68>
		/* suppress transmitting during oob handling */
		return;
	}
	if (UART_TxHead != UART_TxTail) {
    2d16:	90 91 31 05 	lds	r25, 0x0531
    2d1a:	80 91 32 05 	lds	r24, 0x0532
    2d1e:	98 17       	cp	r25, r24
    2d20:	99 f0       	breq	.+38     	; 0x2d48 <__vector_14+0x5a>
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    2d22:	80 91 32 05 	lds	r24, 0x0532
    2d26:	8f 5f       	subi	r24, 0xFF	; 255
    2d28:	8f 71       	andi	r24, 0x1F	; 31
    2d2a:	89 83       	std	Y+1, r24	; 0x01
		UART_TxTail = tmptail;
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	80 93 32 05 	sts	0x0532, r24
		/* get one byte from buffer and write it to UART */
		UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
    2d32:	ac e2       	ldi	r26, 0x2C	; 44
    2d34:	b0 e0       	ldi	r27, 0x00	; 0
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	88 2f       	mov	r24, r24
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	fc 01       	movw	r30, r24
    2d3e:	ef 56       	subi	r30, 0x6F	; 111
    2d40:	fb 4f       	sbci	r31, 0xFB	; 251
    2d42:	80 81       	ld	r24, Z
    2d44:	8c 93       	st	X, r24
    2d46:	07 c0       	rjmp	.+14     	; 0x2d56 <__vector_14+0x68>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
    2d48:	aa e2       	ldi	r26, 0x2A	; 42
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	ea e2       	ldi	r30, 0x2A	; 42
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 81       	ld	r24, Z
    2d52:	8f 7d       	andi	r24, 0xDF	; 223
    2d54:	8c 93       	st	X, r24
	}
}
    2d56:	0f 90       	pop	r0
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	ff 91       	pop	r31
    2d5e:	ef 91       	pop	r30
    2d60:	bf 91       	pop	r27
    2d62:	af 91       	pop	r26
    2d64:	9f 91       	pop	r25
    2d66:	8f 91       	pop	r24
    2d68:	0f 90       	pop	r0
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	0f 90       	pop	r0
    2d6e:	1f 90       	pop	r1
    2d70:	18 95       	reti

00002d72 <uart_init>:
 Function: uart_init()
 Purpose:  initialize UART and set baudrate
 Input:    baudrate using macro UART_BAUD_SELECT()
 Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate) {
    2d72:	df 93       	push	r29
    2d74:	cf 93       	push	r28
    2d76:	00 d0       	rcall	.+0      	; 0x2d78 <uart_init+0x6>
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	9a 83       	std	Y+2, r25	; 0x02
    2d7e:	89 83       	std	Y+1, r24	; 0x01
	UART_TxHead = 0;
    2d80:	10 92 31 05 	sts	0x0531, r1
	UART_TxTail = 0;
    2d84:	10 92 32 05 	sts	0x0532, r1
	UART_RxHead = 0;
    2d88:	10 92 33 05 	sts	0x0533, r1
	UART_RxTail = 0;
    2d8c:	10 92 34 05 	sts	0x0534, r1
	/* enable UART receiver and transmmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if (baudrate & 0x8000) {
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	9a 81       	ldd	r25, Y+2	; 0x02
    2d94:	99 23       	and	r25, r25
    2d96:	4c f4       	brge	.+18     	; 0x2daa <uart_init+0x38>
		UART0_STATUS = (1 << U2X);  //Enable 2x speed
    2d98:	eb e2       	ldi	r30, 0x2B	; 43
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	82 e0       	ldi	r24, 0x02	; 2
    2d9e:	80 83       	st	Z, r24
		baudrate &= ~0x8000;
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	9a 81       	ldd	r25, Y+2	; 0x02
    2da4:	9f 77       	andi	r25, 0x7F	; 127
    2da6:	9a 83       	std	Y+2, r25	; 0x02
    2da8:	89 83       	std	Y+1, r24	; 0x01
	}
	UBRRH = (unsigned char) (baudrate >> 8);
    2daa:	e0 e4       	ldi	r30, 0x40	; 64
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	9a 81       	ldd	r25, Y+2	; 0x02
    2db2:	89 2f       	mov	r24, r25
    2db4:	99 27       	eor	r25, r25
    2db6:	80 83       	st	Z, r24
	UBRRL = (unsigned char) baudrate;
    2db8:	e9 e2       	ldi	r30, 0x29	; 41
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	89 81       	ldd	r24, Y+1	; 0x01
    2dbe:	80 83       	st	Z, r24

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | (1 << RXEN) | (1 << TXEN);
    2dc0:	ea e2       	ldi	r30, 0x2A	; 42
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	88 e9       	ldi	r24, 0x98	; 152
    2dc6:	80 83       	st	Z, r24

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
    2dc8:	e0 e4       	ldi	r30, 0x40	; 64
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	86 e8       	ldi	r24, 0x86	; 134
    2dce:	80 83       	st	Z, r24
	/* Enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	cf 91       	pop	r28
    2dd6:	df 91       	pop	r29
    2dd8:	08 95       	ret

00002dda <uart_getc>:
 Function: uart_getc()
 Purpose:  return byte from ringbuffer
 Returns:  lower byte:  received byte from ringbuffer
 higher byte: last receive error
 **************************************************************************/
unsigned int uart_getc(void) {
    2dda:	df 93       	push	r29
    2ddc:	cf 93       	push	r28
    2dde:	00 d0       	rcall	.+0      	; 0x2de0 <uart_getc+0x6>
    2de0:	00 d0       	rcall	.+0      	; 0x2de2 <uart_getc+0x8>
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;
	unsigned char data;

	if (UART_RxHead == UART_RxTail) {
    2de6:	90 91 33 05 	lds	r25, 0x0533
    2dea:	80 91 34 05 	lds	r24, 0x0534
    2dee:	98 17       	cp	r25, r24
    2df0:	29 f4       	brne	.+10     	; 0x2dfc <uart_getc+0x22>
		return UART_NO_DATA; /* no data available */
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	91 e0       	ldi	r25, 0x01	; 1
    2df6:	9c 83       	std	Y+4, r25	; 0x04
    2df8:	8b 83       	std	Y+3, r24	; 0x03
    2dfa:	3c c0       	rjmp	.+120    	; 0x2e74 <uart_getc+0x9a>
	}

	/* calculate /store buffer index */
	tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    2dfc:	80 91 34 05 	lds	r24, 0x0534
    2e00:	8f 5f       	subi	r24, 0xFF	; 255
    2e02:	8f 77       	andi	r24, 0x7F	; 127
    2e04:	8a 83       	std	Y+2, r24	; 0x02
	UART_RxTail = tmptail;
    2e06:	8a 81       	ldd	r24, Y+2	; 0x02
    2e08:	80 93 34 05 	sts	0x0534, r24

	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];
    2e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0e:	88 2f       	mov	r24, r24
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	fc 01       	movw	r30, r24
    2e14:	ef 54       	subi	r30, 0x4F	; 79
    2e16:	fb 4f       	sbci	r31, 0xFB	; 251
    2e18:	80 81       	ld	r24, Z
    2e1a:	89 83       	std	Y+1, r24	; 0x01
	if (chars_in_rx_buffer > 0) {
    2e1c:	80 91 90 04 	lds	r24, 0x0490
    2e20:	88 23       	and	r24, r24
    2e22:	29 f0       	breq	.+10     	; 0x2e2e <uart_getc+0x54>
		chars_in_rx_buffer--;
    2e24:	80 91 90 04 	lds	r24, 0x0490
    2e28:	81 50       	subi	r24, 0x01	; 1
    2e2a:	80 93 90 04 	sts	0x0490, r24
	}
	if ((flowControl == FLOWCONTROL_XONXOFF) && after_xoff_sent) {
    2e2e:	80 91 8d 04 	lds	r24, 0x048D
    2e32:	81 30       	cpi	r24, 0x01	; 1
    2e34:	91 f4       	brne	.+36     	; 0x2e5a <uart_getc+0x80>
    2e36:	80 91 8f 04 	lds	r24, 0x048F
    2e3a:	88 23       	and	r24, r24
    2e3c:	71 f0       	breq	.+28     	; 0x2e5a <uart_getc+0x80>
		if (chars_in_rx_buffer <= UART_RX_BUFFER_MIN_MARK) {
    2e3e:	80 91 90 04 	lds	r24, 0x0490
    2e42:	81 31       	cpi	r24, 0x11	; 17
    2e44:	50 f4       	brcc	.+20     	; 0x2e5a <uart_getc+0x80>
			/* immediately send XON */
			oob_event = 1;
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	80 93 8e 04 	sts	0x048E, r24
			SendOutOfBand(XON);
    2e4c:	81 e1       	ldi	r24, 0x11	; 17
    2e4e:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <SendOutOfBand>
			after_xoff_sent = 0;
    2e52:	10 92 8f 04 	sts	0x048F, r1
			oob_event = 0;
    2e56:	10 92 8e 04 	sts	0x048E, r1
		}
	}

	return (UART_LastRxError << 8) + data;
    2e5a:	80 91 35 05 	lds	r24, 0x0535
    2e5e:	88 2f       	mov	r24, r24
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	38 2f       	mov	r19, r24
    2e64:	22 27       	eor	r18, r18
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
    2e68:	88 2f       	mov	r24, r24
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	82 0f       	add	r24, r18
    2e6e:	93 1f       	adc	r25, r19
    2e70:	9c 83       	std	Y+4, r25	; 0x04
    2e72:	8b 83       	std	Y+3, r24	; 0x03
    2e74:	8b 81       	ldd	r24, Y+3	; 0x03
    2e76:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    2e78:	0f 90       	pop	r0
    2e7a:	0f 90       	pop	r0
    2e7c:	0f 90       	pop	r0
    2e7e:	0f 90       	pop	r0
    2e80:	cf 91       	pop	r28
    2e82:	df 91       	pop	r29
    2e84:	08 95       	ret

00002e86 <uart_putc>:
 Function: uart_putc()
 Purpose:  write byte to ringbuffer for transmitting via UART
 Input:    byte to be transmitted
 Returns:  none
 **************************************************************************/
void uart_putc(unsigned char data) {
    2e86:	df 93       	push	r29
    2e88:	cf 93       	push	r28
    2e8a:	00 d0       	rcall	.+0      	; 0x2e8c <uart_putc+0x6>
    2e8c:	cd b7       	in	r28, 0x3d	; 61
    2e8e:	de b7       	in	r29, 0x3e	; 62
    2e90:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char tmphead;

	tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    2e92:	80 91 31 05 	lds	r24, 0x0531
    2e96:	8f 5f       	subi	r24, 0xFF	; 255
    2e98:	8f 71       	andi	r24, 0x1F	; 31
    2e9a:	89 83       	std	Y+1, r24	; 0x01

	while (tmphead == UART_TxTail) {
    2e9c:	90 91 32 05 	lds	r25, 0x0532
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	89 17       	cp	r24, r25
    2ea4:	d9 f3       	breq	.-10     	; 0x2e9c <uart_putc+0x16>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    2ea6:	89 81       	ldd	r24, Y+1	; 0x01
    2ea8:	88 2f       	mov	r24, r24
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	fc 01       	movw	r30, r24
    2eae:	ef 56       	subi	r30, 0x6F	; 111
    2eb0:	fb 4f       	sbci	r31, 0xFB	; 251
    2eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb4:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	80 93 31 05 	sts	0x0531, r24

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    2ebc:	aa e2       	ldi	r26, 0x2A	; 42
    2ebe:	b0 e0       	ldi	r27, 0x00	; 0
    2ec0:	ea e2       	ldi	r30, 0x2A	; 42
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	80 62       	ori	r24, 0x20	; 32
    2ec8:	8c 93       	st	X, r24

}/* uart_putc */
    2eca:	0f 90       	pop	r0
    2ecc:	0f 90       	pop	r0
    2ece:	cf 91       	pop	r28
    2ed0:	df 91       	pop	r29
    2ed2:	08 95       	ret

00002ed4 <uart_puts>:
 Function: uart_puts()
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
    2ed4:	df 93       	push	r29
    2ed6:	cf 93       	push	r28
    2ed8:	00 d0       	rcall	.+0      	; 0x2eda <uart_puts+0x6>
    2eda:	cd b7       	in	r28, 0x3d	; 61
    2edc:	de b7       	in	r29, 0x3e	; 62
    2ede:	9a 83       	std	Y+2, r25	; 0x02
    2ee0:	89 83       	std	Y+1, r24	; 0x01
    2ee2:	0b c0       	rjmp	.+22     	; 0x2efa <uart_puts+0x26>
	while (*s)
		uart_putc(*s++);
    2ee4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ee8:	20 81       	ld	r18, Z
    2eea:	89 81       	ldd	r24, Y+1	; 0x01
    2eec:	9a 81       	ldd	r25, Y+2	; 0x02
    2eee:	01 96       	adiw	r24, 0x01	; 1
    2ef0:	9a 83       	std	Y+2, r25	; 0x02
    2ef2:	89 83       	std	Y+1, r24	; 0x01
    2ef4:	82 2f       	mov	r24, r18
    2ef6:	0e 94 43 17 	call	0x2e86	; 0x2e86 <uart_putc>
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
	while (*s)
    2efa:	e9 81       	ldd	r30, Y+1	; 0x01
    2efc:	fa 81       	ldd	r31, Y+2	; 0x02
    2efe:	80 81       	ld	r24, Z
    2f00:	88 23       	and	r24, r24
    2f02:	81 f7       	brne	.-32     	; 0x2ee4 <uart_puts+0x10>
		uart_putc(*s++);

}/* uart_puts */
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	08 95       	ret

00002f0e <uart_puts_p>:
 Function: uart_puts_p()
 Purpose:  transmit string from program memory to UART
 Input:    program memory string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
    2f0e:	df 93       	push	r29
    2f10:	cf 93       	push	r28
    2f12:	00 d0       	rcall	.+0      	; 0x2f14 <uart_puts_p+0x6>
    2f14:	00 d0       	rcall	.+0      	; 0x2f16 <uart_puts_p+0x8>
    2f16:	00 d0       	rcall	.+0      	; 0x2f18 <uart_puts_p+0xa>
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	9d 83       	std	Y+5, r25	; 0x05
    2f1e:	8c 83       	std	Y+4, r24	; 0x04
    2f20:	03 c0       	rjmp	.+6      	; 0x2f28 <uart_puts_p+0x1a>
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
		uart_putc(c);
    2f22:	8e 81       	ldd	r24, Y+6	; 0x06
    2f24:	0e 94 43 17 	call	0x2e86	; 0x2e86 <uart_putc>
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
    2f28:	8c 81       	ldd	r24, Y+4	; 0x04
    2f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f2c:	9b 83       	std	Y+3, r25	; 0x03
    2f2e:	8a 83       	std	Y+2, r24	; 0x02
    2f30:	8c 81       	ldd	r24, Y+4	; 0x04
    2f32:	9d 81       	ldd	r25, Y+5	; 0x05
    2f34:	01 96       	adiw	r24, 0x01	; 1
    2f36:	9d 83       	std	Y+5, r25	; 0x05
    2f38:	8c 83       	std	Y+4, r24	; 0x04
    2f3a:	ea 81       	ldd	r30, Y+2	; 0x02
    2f3c:	fb 81       	ldd	r31, Y+3	; 0x03
    2f3e:	84 91       	lpm	r24, Z+
    2f40:	89 83       	std	Y+1, r24	; 0x01
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	8e 83       	std	Y+6, r24	; 0x06
    2f46:	8e 81       	ldd	r24, Y+6	; 0x06
    2f48:	88 23       	and	r24, r24
    2f4a:	59 f7       	brne	.-42     	; 0x2f22 <uart_puts_p+0x14>
		uart_putc(c);

}/* uart_puts_p */
    2f4c:	26 96       	adiw	r28, 0x06	; 6
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	cd bf       	out	0x3d, r28	; 61
    2f58:	cf 91       	pop	r28
    2f5a:	df 91       	pop	r29
    2f5c:	08 95       	ret

00002f5e <__prologue_saves__>:
    2f5e:	2f 92       	push	r2
    2f60:	3f 92       	push	r3
    2f62:	4f 92       	push	r4
    2f64:	5f 92       	push	r5
    2f66:	6f 92       	push	r6
    2f68:	7f 92       	push	r7
    2f6a:	8f 92       	push	r8
    2f6c:	9f 92       	push	r9
    2f6e:	af 92       	push	r10
    2f70:	bf 92       	push	r11
    2f72:	cf 92       	push	r12
    2f74:	df 92       	push	r13
    2f76:	ef 92       	push	r14
    2f78:	ff 92       	push	r15
    2f7a:	0f 93       	push	r16
    2f7c:	1f 93       	push	r17
    2f7e:	cf 93       	push	r28
    2f80:	df 93       	push	r29
    2f82:	cd b7       	in	r28, 0x3d	; 61
    2f84:	de b7       	in	r29, 0x3e	; 62
    2f86:	ca 1b       	sub	r28, r26
    2f88:	db 0b       	sbc	r29, r27
    2f8a:	0f b6       	in	r0, 0x3f	; 63
    2f8c:	f8 94       	cli
    2f8e:	de bf       	out	0x3e, r29	; 62
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	cd bf       	out	0x3d, r28	; 61
    2f94:	09 94       	ijmp

00002f96 <__epilogue_restores__>:
    2f96:	2a 88       	ldd	r2, Y+18	; 0x12
    2f98:	39 88       	ldd	r3, Y+17	; 0x11
    2f9a:	48 88       	ldd	r4, Y+16	; 0x10
    2f9c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f9e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fa0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fa2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fa4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fa6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fa8:	b9 84       	ldd	r11, Y+9	; 0x09
    2faa:	c8 84       	ldd	r12, Y+8	; 0x08
    2fac:	df 80       	ldd	r13, Y+7	; 0x07
    2fae:	ee 80       	ldd	r14, Y+6	; 0x06
    2fb0:	fd 80       	ldd	r15, Y+5	; 0x05
    2fb2:	0c 81       	ldd	r16, Y+4	; 0x04
    2fb4:	1b 81       	ldd	r17, Y+3	; 0x03
    2fb6:	aa 81       	ldd	r26, Y+2	; 0x02
    2fb8:	b9 81       	ldd	r27, Y+1	; 0x01
    2fba:	ce 0f       	add	r28, r30
    2fbc:	d1 1d       	adc	r29, r1
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	de bf       	out	0x3e, r29	; 62
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	cd bf       	out	0x3d, r28	; 61
    2fc8:	ed 01       	movw	r28, r26
    2fca:	08 95       	ret

00002fcc <_exit>:
    2fcc:	f8 94       	cli

00002fce <__stop_program>:
    2fce:	ff cf       	rjmp	.-2      	; 0x2fce <__stop_program>

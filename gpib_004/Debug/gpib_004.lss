
gpib_004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002044  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000041a  00800060  00002044  000020b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010c  0080047a  0000245e  000024d2  2**0
                  ALLOC
  3 .stab         00004578  00000000  00000000  000024d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000022a9  00000000  00000000  00006a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__vector_7>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__vector_13>
      38:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <__vector_14>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000054 <__c.1936>:
      54:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
      64:	65 72 72 6f 72 3a 20 00                             error: .

0000006c <__c.1934>:
      6c:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
      7c:	6f 72 3a 20 00                                      or: .

00000081 <__c.1932>:
      81:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
      91:	3a 20 00                                            : .

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	14 e0       	ldi	r17, 0x04	; 4
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	e4 e4       	ldi	r30, 0x44	; 68
      a8:	f0 e2       	ldi	r31, 0x20	; 32
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
      b0:	aa 37       	cpi	r26, 0x7A	; 122
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>

000000b6 <__do_clear_bss>:
      b6:	15 e0       	ldi	r17, 0x05	; 5
      b8:	aa e7       	ldi	r26, 0x7A	; 122
      ba:	b4 e0       	ldi	r27, 0x04	; 4
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	a6 38       	cpi	r26, 0x86	; 134
      c2:	b1 07       	cpc	r27, r17
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 bf 0c 	call	0x197e	; 0x197e <main>
      ca:	0c 94 20 10 	jmp	0x2040	; 0x2040 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000d2 <atoi>:
      d2:	fc 01       	movw	r30, r24
      d4:	88 27       	eor	r24, r24
      d6:	99 27       	eor	r25, r25
      d8:	e8 94       	clt
      da:	21 91       	ld	r18, Z+
      dc:	20 32       	cpi	r18, 0x20	; 32
      de:	e9 f3       	breq	.-6      	; 0xda <atoi+0x8>
      e0:	29 30       	cpi	r18, 0x09	; 9
      e2:	10 f0       	brcs	.+4      	; 0xe8 <atoi+0x16>
      e4:	2e 30       	cpi	r18, 0x0E	; 14
      e6:	c8 f3       	brcs	.-14     	; 0xda <atoi+0x8>
      e8:	2b 32       	cpi	r18, 0x2B	; 43
      ea:	41 f0       	breq	.+16     	; 0xfc <atoi+0x2a>
      ec:	2d 32       	cpi	r18, 0x2D	; 45
      ee:	39 f4       	brne	.+14     	; 0xfe <atoi+0x2c>
      f0:	68 94       	set
      f2:	04 c0       	rjmp	.+8      	; 0xfc <atoi+0x2a>
      f4:	0e 94 a4 00 	call	0x148	; 0x148 <__mulhi_const_10>
      f8:	82 0f       	add	r24, r18
      fa:	91 1d       	adc	r25, r1
      fc:	21 91       	ld	r18, Z+
      fe:	20 53       	subi	r18, 0x30	; 48
     100:	2a 30       	cpi	r18, 0x0A	; 10
     102:	c0 f3       	brcs	.-16     	; 0xf4 <atoi+0x22>
     104:	1e f4       	brtc	.+6      	; 0x10c <atoi+0x3a>
     106:	90 95       	com	r25
     108:	81 95       	neg	r24
     10a:	9f 4f       	sbci	r25, 0xFF	; 255
     10c:	08 95       	ret

0000010e <memcpy>:
     10e:	fb 01       	movw	r30, r22
     110:	dc 01       	movw	r26, r24
     112:	02 c0       	rjmp	.+4      	; 0x118 <memcpy+0xa>
     114:	01 90       	ld	r0, Z+
     116:	0d 92       	st	X+, r0
     118:	41 50       	subi	r20, 0x01	; 1
     11a:	50 40       	sbci	r21, 0x00	; 0
     11c:	d8 f7       	brcc	.-10     	; 0x114 <memcpy+0x6>
     11e:	08 95       	ret

00000120 <strchr>:
     120:	fc 01       	movw	r30, r24
     122:	81 91       	ld	r24, Z+
     124:	86 17       	cp	r24, r22
     126:	21 f0       	breq	.+8      	; 0x130 <strchr+0x10>
     128:	88 23       	and	r24, r24
     12a:	d9 f7       	brne	.-10     	; 0x122 <strchr+0x2>
     12c:	99 27       	eor	r25, r25
     12e:	08 95       	ret
     130:	31 97       	sbiw	r30, 0x01	; 1
     132:	cf 01       	movw	r24, r30
     134:	08 95       	ret

00000136 <strlen>:
     136:	fc 01       	movw	r30, r24
     138:	01 90       	ld	r0, Z+
     13a:	00 20       	and	r0, r0
     13c:	e9 f7       	brne	.-6      	; 0x138 <strlen+0x2>
     13e:	80 95       	com	r24
     140:	90 95       	com	r25
     142:	8e 0f       	add	r24, r30
     144:	9f 1f       	adc	r25, r31
     146:	08 95       	ret

00000148 <__mulhi_const_10>:
     148:	7a e0       	ldi	r23, 0x0A	; 10
     14a:	97 9f       	mul	r25, r23
     14c:	90 2d       	mov	r25, r0
     14e:	87 9f       	mul	r24, r23
     150:	80 2d       	mov	r24, r0
     152:	91 0d       	add	r25, r1
     154:	11 24       	eor	r1, r1
     156:	08 95       	ret

00000158 <sprintf>:
     158:	ae e0       	ldi	r26, 0x0E	; 14
     15a:	b0 e0       	ldi	r27, 0x00	; 0
     15c:	e2 eb       	ldi	r30, 0xB2	; 178
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <__prologue_saves__+0x1c>
     164:	0d 89       	ldd	r16, Y+21	; 0x15
     166:	1e 89       	ldd	r17, Y+22	; 0x16
     168:	86 e0       	ldi	r24, 0x06	; 6
     16a:	8c 83       	std	Y+4, r24	; 0x04
     16c:	1a 83       	std	Y+2, r17	; 0x02
     16e:	09 83       	std	Y+1, r16	; 0x01
     170:	8f ef       	ldi	r24, 0xFF	; 255
     172:	9f e7       	ldi	r25, 0x7F	; 127
     174:	9e 83       	std	Y+6, r25	; 0x06
     176:	8d 83       	std	Y+5, r24	; 0x05
     178:	9e 01       	movw	r18, r28
     17a:	27 5e       	subi	r18, 0xE7	; 231
     17c:	3f 4f       	sbci	r19, 0xFF	; 255
     17e:	ce 01       	movw	r24, r28
     180:	01 96       	adiw	r24, 0x01	; 1
     182:	6f 89       	ldd	r22, Y+23	; 0x17
     184:	78 8d       	ldd	r23, Y+24	; 0x18
     186:	a9 01       	movw	r20, r18
     188:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <vfprintf>
     18c:	2f 81       	ldd	r18, Y+7	; 0x07
     18e:	38 85       	ldd	r19, Y+8	; 0x08
     190:	02 0f       	add	r16, r18
     192:	13 1f       	adc	r17, r19
     194:	f8 01       	movw	r30, r16
     196:	10 82       	st	Z, r1
     198:	2e 96       	adiw	r28, 0x0e	; 14
     19a:	e4 e0       	ldi	r30, 0x04	; 4
     19c:	0c 94 13 10 	jmp	0x2026	; 0x2026 <__epilogue_restores__+0x1c>

000001a0 <vfprintf>:
     1a0:	ab e0       	ldi	r26, 0x0B	; 11
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	e6 ed       	ldi	r30, 0xD6	; 214
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__prologue_saves__>
     1ac:	3c 01       	movw	r6, r24
     1ae:	2b 01       	movw	r4, r22
     1b0:	5a 01       	movw	r10, r20
     1b2:	fc 01       	movw	r30, r24
     1b4:	17 82       	std	Z+7, r1	; 0x07
     1b6:	16 82       	std	Z+6, r1	; 0x06
     1b8:	83 81       	ldd	r24, Z+3	; 0x03
     1ba:	81 fd       	sbrc	r24, 1
     1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <vfprintf+0x24>
     1be:	6f ef       	ldi	r22, 0xFF	; 255
     1c0:	7f ef       	ldi	r23, 0xFF	; 255
     1c2:	c6 c1       	rjmp	.+908    	; 0x550 <vfprintf+0x3b0>
     1c4:	9a e0       	ldi	r25, 0x0A	; 10
     1c6:	89 2e       	mov	r8, r25
     1c8:	1e 01       	movw	r2, r28
     1ca:	08 94       	sec
     1cc:	21 1c       	adc	r2, r1
     1ce:	31 1c       	adc	r3, r1
     1d0:	f3 01       	movw	r30, r6
     1d2:	23 81       	ldd	r18, Z+3	; 0x03
     1d4:	f2 01       	movw	r30, r4
     1d6:	23 fd       	sbrc	r18, 3
     1d8:	85 91       	lpm	r24, Z+
     1da:	23 ff       	sbrs	r18, 3
     1dc:	81 91       	ld	r24, Z+
     1de:	2f 01       	movw	r4, r30
     1e0:	88 23       	and	r24, r24
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <vfprintf+0x46>
     1e4:	b2 c1       	rjmp	.+868    	; 0x54a <vfprintf+0x3aa>
     1e6:	85 32       	cpi	r24, 0x25	; 37
     1e8:	39 f4       	brne	.+14     	; 0x1f8 <vfprintf+0x58>
     1ea:	23 fd       	sbrc	r18, 3
     1ec:	85 91       	lpm	r24, Z+
     1ee:	23 ff       	sbrs	r18, 3
     1f0:	81 91       	ld	r24, Z+
     1f2:	2f 01       	movw	r4, r30
     1f4:	85 32       	cpi	r24, 0x25	; 37
     1f6:	29 f4       	brne	.+10     	; 0x202 <vfprintf+0x62>
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	b3 01       	movw	r22, r6
     1fc:	0e 94 c3 02 	call	0x586	; 0x586 <fputc>
     200:	e7 cf       	rjmp	.-50     	; 0x1d0 <vfprintf+0x30>
     202:	98 2f       	mov	r25, r24
     204:	ff 24       	eor	r15, r15
     206:	ee 24       	eor	r14, r14
     208:	99 24       	eor	r9, r9
     20a:	ff e1       	ldi	r31, 0x1F	; 31
     20c:	ff 15       	cp	r31, r15
     20e:	d0 f0       	brcs	.+52     	; 0x244 <vfprintf+0xa4>
     210:	9b 32       	cpi	r25, 0x2B	; 43
     212:	69 f0       	breq	.+26     	; 0x22e <vfprintf+0x8e>
     214:	9c 32       	cpi	r25, 0x2C	; 44
     216:	28 f4       	brcc	.+10     	; 0x222 <vfprintf+0x82>
     218:	90 32       	cpi	r25, 0x20	; 32
     21a:	59 f0       	breq	.+22     	; 0x232 <vfprintf+0x92>
     21c:	93 32       	cpi	r25, 0x23	; 35
     21e:	91 f4       	brne	.+36     	; 0x244 <vfprintf+0xa4>
     220:	0e c0       	rjmp	.+28     	; 0x23e <vfprintf+0x9e>
     222:	9d 32       	cpi	r25, 0x2D	; 45
     224:	49 f0       	breq	.+18     	; 0x238 <vfprintf+0x98>
     226:	90 33       	cpi	r25, 0x30	; 48
     228:	69 f4       	brne	.+26     	; 0x244 <vfprintf+0xa4>
     22a:	41 e0       	ldi	r20, 0x01	; 1
     22c:	24 c0       	rjmp	.+72     	; 0x276 <vfprintf+0xd6>
     22e:	52 e0       	ldi	r21, 0x02	; 2
     230:	f5 2a       	or	r15, r21
     232:	84 e0       	ldi	r24, 0x04	; 4
     234:	f8 2a       	or	r15, r24
     236:	28 c0       	rjmp	.+80     	; 0x288 <vfprintf+0xe8>
     238:	98 e0       	ldi	r25, 0x08	; 8
     23a:	f9 2a       	or	r15, r25
     23c:	25 c0       	rjmp	.+74     	; 0x288 <vfprintf+0xe8>
     23e:	e0 e1       	ldi	r30, 0x10	; 16
     240:	fe 2a       	or	r15, r30
     242:	22 c0       	rjmp	.+68     	; 0x288 <vfprintf+0xe8>
     244:	f7 fc       	sbrc	r15, 7
     246:	29 c0       	rjmp	.+82     	; 0x29a <vfprintf+0xfa>
     248:	89 2f       	mov	r24, r25
     24a:	80 53       	subi	r24, 0x30	; 48
     24c:	8a 30       	cpi	r24, 0x0A	; 10
     24e:	70 f4       	brcc	.+28     	; 0x26c <vfprintf+0xcc>
     250:	f6 fe       	sbrs	r15, 6
     252:	05 c0       	rjmp	.+10     	; 0x25e <vfprintf+0xbe>
     254:	98 9c       	mul	r9, r8
     256:	90 2c       	mov	r9, r0
     258:	11 24       	eor	r1, r1
     25a:	98 0e       	add	r9, r24
     25c:	15 c0       	rjmp	.+42     	; 0x288 <vfprintf+0xe8>
     25e:	e8 9c       	mul	r14, r8
     260:	e0 2c       	mov	r14, r0
     262:	11 24       	eor	r1, r1
     264:	e8 0e       	add	r14, r24
     266:	f0 e2       	ldi	r31, 0x20	; 32
     268:	ff 2a       	or	r15, r31
     26a:	0e c0       	rjmp	.+28     	; 0x288 <vfprintf+0xe8>
     26c:	9e 32       	cpi	r25, 0x2E	; 46
     26e:	29 f4       	brne	.+10     	; 0x27a <vfprintf+0xda>
     270:	f6 fc       	sbrc	r15, 6
     272:	6b c1       	rjmp	.+726    	; 0x54a <vfprintf+0x3aa>
     274:	40 e4       	ldi	r20, 0x40	; 64
     276:	f4 2a       	or	r15, r20
     278:	07 c0       	rjmp	.+14     	; 0x288 <vfprintf+0xe8>
     27a:	9c 36       	cpi	r25, 0x6C	; 108
     27c:	19 f4       	brne	.+6      	; 0x284 <vfprintf+0xe4>
     27e:	50 e8       	ldi	r21, 0x80	; 128
     280:	f5 2a       	or	r15, r21
     282:	02 c0       	rjmp	.+4      	; 0x288 <vfprintf+0xe8>
     284:	98 36       	cpi	r25, 0x68	; 104
     286:	49 f4       	brne	.+18     	; 0x29a <vfprintf+0xfa>
     288:	f2 01       	movw	r30, r4
     28a:	23 fd       	sbrc	r18, 3
     28c:	95 91       	lpm	r25, Z+
     28e:	23 ff       	sbrs	r18, 3
     290:	91 91       	ld	r25, Z+
     292:	2f 01       	movw	r4, r30
     294:	99 23       	and	r25, r25
     296:	09 f0       	breq	.+2      	; 0x29a <vfprintf+0xfa>
     298:	b8 cf       	rjmp	.-144    	; 0x20a <vfprintf+0x6a>
     29a:	89 2f       	mov	r24, r25
     29c:	85 54       	subi	r24, 0x45	; 69
     29e:	83 30       	cpi	r24, 0x03	; 3
     2a0:	18 f0       	brcs	.+6      	; 0x2a8 <vfprintf+0x108>
     2a2:	80 52       	subi	r24, 0x20	; 32
     2a4:	83 30       	cpi	r24, 0x03	; 3
     2a6:	38 f4       	brcc	.+14     	; 0x2b6 <vfprintf+0x116>
     2a8:	44 e0       	ldi	r20, 0x04	; 4
     2aa:	50 e0       	ldi	r21, 0x00	; 0
     2ac:	a4 0e       	add	r10, r20
     2ae:	b5 1e       	adc	r11, r21
     2b0:	5f e3       	ldi	r21, 0x3F	; 63
     2b2:	59 83       	std	Y+1, r21	; 0x01
     2b4:	0f c0       	rjmp	.+30     	; 0x2d4 <vfprintf+0x134>
     2b6:	93 36       	cpi	r25, 0x63	; 99
     2b8:	31 f0       	breq	.+12     	; 0x2c6 <vfprintf+0x126>
     2ba:	93 37       	cpi	r25, 0x73	; 115
     2bc:	79 f0       	breq	.+30     	; 0x2dc <vfprintf+0x13c>
     2be:	93 35       	cpi	r25, 0x53	; 83
     2c0:	09 f0       	breq	.+2      	; 0x2c4 <vfprintf+0x124>
     2c2:	56 c0       	rjmp	.+172    	; 0x370 <vfprintf+0x1d0>
     2c4:	20 c0       	rjmp	.+64     	; 0x306 <vfprintf+0x166>
     2c6:	f5 01       	movw	r30, r10
     2c8:	80 81       	ld	r24, Z
     2ca:	89 83       	std	Y+1, r24	; 0x01
     2cc:	42 e0       	ldi	r20, 0x02	; 2
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	a4 0e       	add	r10, r20
     2d2:	b5 1e       	adc	r11, r21
     2d4:	61 01       	movw	r12, r2
     2d6:	01 e0       	ldi	r16, 0x01	; 1
     2d8:	10 e0       	ldi	r17, 0x00	; 0
     2da:	12 c0       	rjmp	.+36     	; 0x300 <vfprintf+0x160>
     2dc:	f5 01       	movw	r30, r10
     2de:	c0 80       	ld	r12, Z
     2e0:	d1 80       	ldd	r13, Z+1	; 0x01
     2e2:	f6 fc       	sbrc	r15, 6
     2e4:	03 c0       	rjmp	.+6      	; 0x2ec <vfprintf+0x14c>
     2e6:	6f ef       	ldi	r22, 0xFF	; 255
     2e8:	7f ef       	ldi	r23, 0xFF	; 255
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <vfprintf+0x150>
     2ec:	69 2d       	mov	r22, r9
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	42 e0       	ldi	r20, 0x02	; 2
     2f2:	50 e0       	ldi	r21, 0x00	; 0
     2f4:	a4 0e       	add	r10, r20
     2f6:	b5 1e       	adc	r11, r21
     2f8:	c6 01       	movw	r24, r12
     2fa:	0e 94 b8 02 	call	0x570	; 0x570 <strnlen>
     2fe:	8c 01       	movw	r16, r24
     300:	5f e7       	ldi	r21, 0x7F	; 127
     302:	f5 22       	and	r15, r21
     304:	14 c0       	rjmp	.+40     	; 0x32e <vfprintf+0x18e>
     306:	f5 01       	movw	r30, r10
     308:	c0 80       	ld	r12, Z
     30a:	d1 80       	ldd	r13, Z+1	; 0x01
     30c:	f6 fc       	sbrc	r15, 6
     30e:	03 c0       	rjmp	.+6      	; 0x316 <vfprintf+0x176>
     310:	6f ef       	ldi	r22, 0xFF	; 255
     312:	7f ef       	ldi	r23, 0xFF	; 255
     314:	02 c0       	rjmp	.+4      	; 0x31a <vfprintf+0x17a>
     316:	69 2d       	mov	r22, r9
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	42 e0       	ldi	r20, 0x02	; 2
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	a4 0e       	add	r10, r20
     320:	b5 1e       	adc	r11, r21
     322:	c6 01       	movw	r24, r12
     324:	0e 94 ad 02 	call	0x55a	; 0x55a <strnlen_P>
     328:	8c 01       	movw	r16, r24
     32a:	50 e8       	ldi	r21, 0x80	; 128
     32c:	f5 2a       	or	r15, r21
     32e:	f3 fe       	sbrs	r15, 3
     330:	07 c0       	rjmp	.+14     	; 0x340 <vfprintf+0x1a0>
     332:	1a c0       	rjmp	.+52     	; 0x368 <vfprintf+0x1c8>
     334:	80 e2       	ldi	r24, 0x20	; 32
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	b3 01       	movw	r22, r6
     33a:	0e 94 c3 02 	call	0x586	; 0x586 <fputc>
     33e:	ea 94       	dec	r14
     340:	8e 2d       	mov	r24, r14
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	08 17       	cp	r16, r24
     346:	19 07       	cpc	r17, r25
     348:	a8 f3       	brcs	.-22     	; 0x334 <vfprintf+0x194>
     34a:	0e c0       	rjmp	.+28     	; 0x368 <vfprintf+0x1c8>
     34c:	f6 01       	movw	r30, r12
     34e:	f7 fc       	sbrc	r15, 7
     350:	85 91       	lpm	r24, Z+
     352:	f7 fe       	sbrs	r15, 7
     354:	81 91       	ld	r24, Z+
     356:	6f 01       	movw	r12, r30
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	b3 01       	movw	r22, r6
     35c:	0e 94 c3 02 	call	0x586	; 0x586 <fputc>
     360:	e1 10       	cpse	r14, r1
     362:	ea 94       	dec	r14
     364:	01 50       	subi	r16, 0x01	; 1
     366:	10 40       	sbci	r17, 0x00	; 0
     368:	01 15       	cp	r16, r1
     36a:	11 05       	cpc	r17, r1
     36c:	79 f7       	brne	.-34     	; 0x34c <vfprintf+0x1ac>
     36e:	ea c0       	rjmp	.+468    	; 0x544 <vfprintf+0x3a4>
     370:	94 36       	cpi	r25, 0x64	; 100
     372:	11 f0       	breq	.+4      	; 0x378 <vfprintf+0x1d8>
     374:	99 36       	cpi	r25, 0x69	; 105
     376:	69 f5       	brne	.+90     	; 0x3d2 <vfprintf+0x232>
     378:	f7 fe       	sbrs	r15, 7
     37a:	08 c0       	rjmp	.+16     	; 0x38c <vfprintf+0x1ec>
     37c:	f5 01       	movw	r30, r10
     37e:	20 81       	ld	r18, Z
     380:	31 81       	ldd	r19, Z+1	; 0x01
     382:	42 81       	ldd	r20, Z+2	; 0x02
     384:	53 81       	ldd	r21, Z+3	; 0x03
     386:	84 e0       	ldi	r24, 0x04	; 4
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0a c0       	rjmp	.+20     	; 0x3a0 <vfprintf+0x200>
     38c:	f5 01       	movw	r30, r10
     38e:	80 81       	ld	r24, Z
     390:	91 81       	ldd	r25, Z+1	; 0x01
     392:	9c 01       	movw	r18, r24
     394:	44 27       	eor	r20, r20
     396:	37 fd       	sbrc	r19, 7
     398:	40 95       	com	r20
     39a:	54 2f       	mov	r21, r20
     39c:	82 e0       	ldi	r24, 0x02	; 2
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	a8 0e       	add	r10, r24
     3a2:	b9 1e       	adc	r11, r25
     3a4:	9f e6       	ldi	r25, 0x6F	; 111
     3a6:	f9 22       	and	r15, r25
     3a8:	57 ff       	sbrs	r21, 7
     3aa:	09 c0       	rjmp	.+18     	; 0x3be <vfprintf+0x21e>
     3ac:	50 95       	com	r21
     3ae:	40 95       	com	r20
     3b0:	30 95       	com	r19
     3b2:	21 95       	neg	r18
     3b4:	3f 4f       	sbci	r19, 0xFF	; 255
     3b6:	4f 4f       	sbci	r20, 0xFF	; 255
     3b8:	5f 4f       	sbci	r21, 0xFF	; 255
     3ba:	e0 e8       	ldi	r30, 0x80	; 128
     3bc:	fe 2a       	or	r15, r30
     3be:	ca 01       	movw	r24, r20
     3c0:	b9 01       	movw	r22, r18
     3c2:	a1 01       	movw	r20, r2
     3c4:	2a e0       	ldi	r18, 0x0A	; 10
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	0e 94 ef 02 	call	0x5de	; 0x5de <__ultoa_invert>
     3cc:	d8 2e       	mov	r13, r24
     3ce:	d2 18       	sub	r13, r2
     3d0:	40 c0       	rjmp	.+128    	; 0x452 <vfprintf+0x2b2>
     3d2:	95 37       	cpi	r25, 0x75	; 117
     3d4:	29 f4       	brne	.+10     	; 0x3e0 <vfprintf+0x240>
     3d6:	1f 2d       	mov	r17, r15
     3d8:	1f 7e       	andi	r17, 0xEF	; 239
     3da:	2a e0       	ldi	r18, 0x0A	; 10
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	1d c0       	rjmp	.+58     	; 0x41a <vfprintf+0x27a>
     3e0:	1f 2d       	mov	r17, r15
     3e2:	19 7f       	andi	r17, 0xF9	; 249
     3e4:	9f 36       	cpi	r25, 0x6F	; 111
     3e6:	61 f0       	breq	.+24     	; 0x400 <vfprintf+0x260>
     3e8:	90 37       	cpi	r25, 0x70	; 112
     3ea:	20 f4       	brcc	.+8      	; 0x3f4 <vfprintf+0x254>
     3ec:	98 35       	cpi	r25, 0x58	; 88
     3ee:	09 f0       	breq	.+2      	; 0x3f2 <vfprintf+0x252>
     3f0:	ac c0       	rjmp	.+344    	; 0x54a <vfprintf+0x3aa>
     3f2:	0f c0       	rjmp	.+30     	; 0x412 <vfprintf+0x272>
     3f4:	90 37       	cpi	r25, 0x70	; 112
     3f6:	39 f0       	breq	.+14     	; 0x406 <vfprintf+0x266>
     3f8:	98 37       	cpi	r25, 0x78	; 120
     3fa:	09 f0       	breq	.+2      	; 0x3fe <vfprintf+0x25e>
     3fc:	a6 c0       	rjmp	.+332    	; 0x54a <vfprintf+0x3aa>
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <vfprintf+0x268>
     400:	28 e0       	ldi	r18, 0x08	; 8
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	0a c0       	rjmp	.+20     	; 0x41a <vfprintf+0x27a>
     406:	10 61       	ori	r17, 0x10	; 16
     408:	14 fd       	sbrc	r17, 4
     40a:	14 60       	ori	r17, 0x04	; 4
     40c:	20 e1       	ldi	r18, 0x10	; 16
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	04 c0       	rjmp	.+8      	; 0x41a <vfprintf+0x27a>
     412:	14 fd       	sbrc	r17, 4
     414:	16 60       	ori	r17, 0x06	; 6
     416:	20 e1       	ldi	r18, 0x10	; 16
     418:	32 e0       	ldi	r19, 0x02	; 2
     41a:	17 ff       	sbrs	r17, 7
     41c:	08 c0       	rjmp	.+16     	; 0x42e <vfprintf+0x28e>
     41e:	f5 01       	movw	r30, r10
     420:	60 81       	ld	r22, Z
     422:	71 81       	ldd	r23, Z+1	; 0x01
     424:	82 81       	ldd	r24, Z+2	; 0x02
     426:	93 81       	ldd	r25, Z+3	; 0x03
     428:	44 e0       	ldi	r20, 0x04	; 4
     42a:	50 e0       	ldi	r21, 0x00	; 0
     42c:	08 c0       	rjmp	.+16     	; 0x43e <vfprintf+0x29e>
     42e:	f5 01       	movw	r30, r10
     430:	80 81       	ld	r24, Z
     432:	91 81       	ldd	r25, Z+1	; 0x01
     434:	bc 01       	movw	r22, r24
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	42 e0       	ldi	r20, 0x02	; 2
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	a4 0e       	add	r10, r20
     440:	b5 1e       	adc	r11, r21
     442:	a1 01       	movw	r20, r2
     444:	0e 94 ef 02 	call	0x5de	; 0x5de <__ultoa_invert>
     448:	d8 2e       	mov	r13, r24
     44a:	d2 18       	sub	r13, r2
     44c:	8f e7       	ldi	r24, 0x7F	; 127
     44e:	f8 2e       	mov	r15, r24
     450:	f1 22       	and	r15, r17
     452:	f6 fe       	sbrs	r15, 6
     454:	0b c0       	rjmp	.+22     	; 0x46c <vfprintf+0x2cc>
     456:	5e ef       	ldi	r21, 0xFE	; 254
     458:	f5 22       	and	r15, r21
     45a:	d9 14       	cp	r13, r9
     45c:	38 f4       	brcc	.+14     	; 0x46c <vfprintf+0x2cc>
     45e:	f4 fe       	sbrs	r15, 4
     460:	07 c0       	rjmp	.+14     	; 0x470 <vfprintf+0x2d0>
     462:	f2 fc       	sbrc	r15, 2
     464:	05 c0       	rjmp	.+10     	; 0x470 <vfprintf+0x2d0>
     466:	8f ee       	ldi	r24, 0xEF	; 239
     468:	f8 22       	and	r15, r24
     46a:	02 c0       	rjmp	.+4      	; 0x470 <vfprintf+0x2d0>
     46c:	1d 2d       	mov	r17, r13
     46e:	01 c0       	rjmp	.+2      	; 0x472 <vfprintf+0x2d2>
     470:	19 2d       	mov	r17, r9
     472:	f4 fe       	sbrs	r15, 4
     474:	0d c0       	rjmp	.+26     	; 0x490 <vfprintf+0x2f0>
     476:	fe 01       	movw	r30, r28
     478:	ed 0d       	add	r30, r13
     47a:	f1 1d       	adc	r31, r1
     47c:	80 81       	ld	r24, Z
     47e:	80 33       	cpi	r24, 0x30	; 48
     480:	19 f4       	brne	.+6      	; 0x488 <vfprintf+0x2e8>
     482:	99 ee       	ldi	r25, 0xE9	; 233
     484:	f9 22       	and	r15, r25
     486:	08 c0       	rjmp	.+16     	; 0x498 <vfprintf+0x2f8>
     488:	1f 5f       	subi	r17, 0xFF	; 255
     48a:	f2 fe       	sbrs	r15, 2
     48c:	05 c0       	rjmp	.+10     	; 0x498 <vfprintf+0x2f8>
     48e:	03 c0       	rjmp	.+6      	; 0x496 <vfprintf+0x2f6>
     490:	8f 2d       	mov	r24, r15
     492:	86 78       	andi	r24, 0x86	; 134
     494:	09 f0       	breq	.+2      	; 0x498 <vfprintf+0x2f8>
     496:	1f 5f       	subi	r17, 0xFF	; 255
     498:	0f 2d       	mov	r16, r15
     49a:	f3 fc       	sbrc	r15, 3
     49c:	14 c0       	rjmp	.+40     	; 0x4c6 <vfprintf+0x326>
     49e:	f0 fe       	sbrs	r15, 0
     4a0:	0f c0       	rjmp	.+30     	; 0x4c0 <vfprintf+0x320>
     4a2:	1e 15       	cp	r17, r14
     4a4:	10 f0       	brcs	.+4      	; 0x4aa <vfprintf+0x30a>
     4a6:	9d 2c       	mov	r9, r13
     4a8:	0b c0       	rjmp	.+22     	; 0x4c0 <vfprintf+0x320>
     4aa:	9d 2c       	mov	r9, r13
     4ac:	9e 0c       	add	r9, r14
     4ae:	91 1a       	sub	r9, r17
     4b0:	1e 2d       	mov	r17, r14
     4b2:	06 c0       	rjmp	.+12     	; 0x4c0 <vfprintf+0x320>
     4b4:	80 e2       	ldi	r24, 0x20	; 32
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	b3 01       	movw	r22, r6
     4ba:	0e 94 c3 02 	call	0x586	; 0x586 <fputc>
     4be:	1f 5f       	subi	r17, 0xFF	; 255
     4c0:	1e 15       	cp	r17, r14
     4c2:	c0 f3       	brcs	.-16     	; 0x4b4 <vfprintf+0x314>
     4c4:	04 c0       	rjmp	.+8      	; 0x4ce <vfprintf+0x32e>
     4c6:	1e 15       	cp	r17, r14
     4c8:	10 f4       	brcc	.+4      	; 0x4ce <vfprintf+0x32e>
     4ca:	e1 1a       	sub	r14, r17
     4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <vfprintf+0x330>
     4ce:	ee 24       	eor	r14, r14
     4d0:	04 ff       	sbrs	r16, 4
     4d2:	0f c0       	rjmp	.+30     	; 0x4f2 <vfprintf+0x352>
     4d4:	80 e3       	ldi	r24, 0x30	; 48
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	b3 01       	movw	r22, r6
     4da:	0e 94 c3 02 	call	0x586	; 0x586 <fputc>
     4de:	02 ff       	sbrs	r16, 2
     4e0:	1d c0       	rjmp	.+58     	; 0x51c <vfprintf+0x37c>
     4e2:	01 fd       	sbrc	r16, 1
     4e4:	03 c0       	rjmp	.+6      	; 0x4ec <vfprintf+0x34c>
     4e6:	88 e7       	ldi	r24, 0x78	; 120
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e c0       	rjmp	.+28     	; 0x508 <vfprintf+0x368>
     4ec:	88 e5       	ldi	r24, 0x58	; 88
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0b c0       	rjmp	.+22     	; 0x508 <vfprintf+0x368>
     4f2:	80 2f       	mov	r24, r16
     4f4:	86 78       	andi	r24, 0x86	; 134
     4f6:	91 f0       	breq	.+36     	; 0x51c <vfprintf+0x37c>
     4f8:	01 ff       	sbrs	r16, 1
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <vfprintf+0x360>
     4fc:	8b e2       	ldi	r24, 0x2B	; 43
     4fe:	01 c0       	rjmp	.+2      	; 0x502 <vfprintf+0x362>
     500:	80 e2       	ldi	r24, 0x20	; 32
     502:	f7 fc       	sbrc	r15, 7
     504:	8d e2       	ldi	r24, 0x2D	; 45
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	b3 01       	movw	r22, r6
     50a:	0e 94 c3 02 	call	0x586	; 0x586 <fputc>
     50e:	06 c0       	rjmp	.+12     	; 0x51c <vfprintf+0x37c>
     510:	80 e3       	ldi	r24, 0x30	; 48
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	b3 01       	movw	r22, r6
     516:	0e 94 c3 02 	call	0x586	; 0x586 <fputc>
     51a:	9a 94       	dec	r9
     51c:	d9 14       	cp	r13, r9
     51e:	c0 f3       	brcs	.-16     	; 0x510 <vfprintf+0x370>
     520:	da 94       	dec	r13
     522:	f1 01       	movw	r30, r2
     524:	ed 0d       	add	r30, r13
     526:	f1 1d       	adc	r31, r1
     528:	80 81       	ld	r24, Z
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	b3 01       	movw	r22, r6
     52e:	0e 94 c3 02 	call	0x586	; 0x586 <fputc>
     532:	dd 20       	and	r13, r13
     534:	a9 f7       	brne	.-22     	; 0x520 <vfprintf+0x380>
     536:	06 c0       	rjmp	.+12     	; 0x544 <vfprintf+0x3a4>
     538:	80 e2       	ldi	r24, 0x20	; 32
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	b3 01       	movw	r22, r6
     53e:	0e 94 c3 02 	call	0x586	; 0x586 <fputc>
     542:	ea 94       	dec	r14
     544:	ee 20       	and	r14, r14
     546:	c1 f7       	brne	.-16     	; 0x538 <vfprintf+0x398>
     548:	43 ce       	rjmp	.-890    	; 0x1d0 <vfprintf+0x30>
     54a:	f3 01       	movw	r30, r6
     54c:	66 81       	ldd	r22, Z+6	; 0x06
     54e:	77 81       	ldd	r23, Z+7	; 0x07
     550:	cb 01       	movw	r24, r22
     552:	2b 96       	adiw	r28, 0x0b	; 11
     554:	e2 e1       	ldi	r30, 0x12	; 18
     556:	0c 94 05 10 	jmp	0x200a	; 0x200a <__epilogue_restores__>

0000055a <strnlen_P>:
     55a:	fc 01       	movw	r30, r24
     55c:	05 90       	lpm	r0, Z+
     55e:	61 50       	subi	r22, 0x01	; 1
     560:	70 40       	sbci	r23, 0x00	; 0
     562:	01 10       	cpse	r0, r1
     564:	d8 f7       	brcc	.-10     	; 0x55c <strnlen_P+0x2>
     566:	80 95       	com	r24
     568:	90 95       	com	r25
     56a:	8e 0f       	add	r24, r30
     56c:	9f 1f       	adc	r25, r31
     56e:	08 95       	ret

00000570 <strnlen>:
     570:	fc 01       	movw	r30, r24
     572:	61 50       	subi	r22, 0x01	; 1
     574:	70 40       	sbci	r23, 0x00	; 0
     576:	01 90       	ld	r0, Z+
     578:	01 10       	cpse	r0, r1
     57a:	d8 f7       	brcc	.-10     	; 0x572 <strnlen+0x2>
     57c:	80 95       	com	r24
     57e:	90 95       	com	r25
     580:	8e 0f       	add	r24, r30
     582:	9f 1f       	adc	r25, r31
     584:	08 95       	ret

00000586 <fputc>:
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	8c 01       	movw	r16, r24
     590:	eb 01       	movw	r28, r22
     592:	8b 81       	ldd	r24, Y+3	; 0x03
     594:	81 ff       	sbrs	r24, 1
     596:	1b c0       	rjmp	.+54     	; 0x5ce <fputc+0x48>
     598:	82 ff       	sbrs	r24, 2
     59a:	0d c0       	rjmp	.+26     	; 0x5b6 <fputc+0x30>
     59c:	2e 81       	ldd	r18, Y+6	; 0x06
     59e:	3f 81       	ldd	r19, Y+7	; 0x07
     5a0:	8c 81       	ldd	r24, Y+4	; 0x04
     5a2:	9d 81       	ldd	r25, Y+5	; 0x05
     5a4:	28 17       	cp	r18, r24
     5a6:	39 07       	cpc	r19, r25
     5a8:	64 f4       	brge	.+24     	; 0x5c2 <fputc+0x3c>
     5aa:	e8 81       	ld	r30, Y
     5ac:	f9 81       	ldd	r31, Y+1	; 0x01
     5ae:	01 93       	st	Z+, r16
     5b0:	f9 83       	std	Y+1, r31	; 0x01
     5b2:	e8 83       	st	Y, r30
     5b4:	06 c0       	rjmp	.+12     	; 0x5c2 <fputc+0x3c>
     5b6:	e8 85       	ldd	r30, Y+8	; 0x08
     5b8:	f9 85       	ldd	r31, Y+9	; 0x09
     5ba:	80 2f       	mov	r24, r16
     5bc:	09 95       	icall
     5be:	89 2b       	or	r24, r25
     5c0:	31 f4       	brne	.+12     	; 0x5ce <fputc+0x48>
     5c2:	8e 81       	ldd	r24, Y+6	; 0x06
     5c4:	9f 81       	ldd	r25, Y+7	; 0x07
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	9f 83       	std	Y+7, r25	; 0x07
     5ca:	8e 83       	std	Y+6, r24	; 0x06
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <fputc+0x4c>
     5ce:	0f ef       	ldi	r16, 0xFF	; 255
     5d0:	1f ef       	ldi	r17, 0xFF	; 255
     5d2:	c8 01       	movw	r24, r16
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	08 95       	ret

000005de <__ultoa_invert>:
     5de:	fa 01       	movw	r30, r20
     5e0:	aa 27       	eor	r26, r26
     5e2:	28 30       	cpi	r18, 0x08	; 8
     5e4:	51 f1       	breq	.+84     	; 0x63a <__ultoa_invert+0x5c>
     5e6:	20 31       	cpi	r18, 0x10	; 16
     5e8:	81 f1       	breq	.+96     	; 0x64a <__ultoa_invert+0x6c>
     5ea:	e8 94       	clt
     5ec:	6f 93       	push	r22
     5ee:	6e 7f       	andi	r22, 0xFE	; 254
     5f0:	6e 5f       	subi	r22, 0xFE	; 254
     5f2:	7f 4f       	sbci	r23, 0xFF	; 255
     5f4:	8f 4f       	sbci	r24, 0xFF	; 255
     5f6:	9f 4f       	sbci	r25, 0xFF	; 255
     5f8:	af 4f       	sbci	r26, 0xFF	; 255
     5fa:	b1 e0       	ldi	r27, 0x01	; 1
     5fc:	3e d0       	rcall	.+124    	; 0x67a <__ultoa_invert+0x9c>
     5fe:	b4 e0       	ldi	r27, 0x04	; 4
     600:	3c d0       	rcall	.+120    	; 0x67a <__ultoa_invert+0x9c>
     602:	67 0f       	add	r22, r23
     604:	78 1f       	adc	r23, r24
     606:	89 1f       	adc	r24, r25
     608:	9a 1f       	adc	r25, r26
     60a:	a1 1d       	adc	r26, r1
     60c:	68 0f       	add	r22, r24
     60e:	79 1f       	adc	r23, r25
     610:	8a 1f       	adc	r24, r26
     612:	91 1d       	adc	r25, r1
     614:	a1 1d       	adc	r26, r1
     616:	6a 0f       	add	r22, r26
     618:	71 1d       	adc	r23, r1
     61a:	81 1d       	adc	r24, r1
     61c:	91 1d       	adc	r25, r1
     61e:	a1 1d       	adc	r26, r1
     620:	20 d0       	rcall	.+64     	; 0x662 <__ultoa_invert+0x84>
     622:	09 f4       	brne	.+2      	; 0x626 <__ultoa_invert+0x48>
     624:	68 94       	set
     626:	3f 91       	pop	r19
     628:	2a e0       	ldi	r18, 0x0A	; 10
     62a:	26 9f       	mul	r18, r22
     62c:	11 24       	eor	r1, r1
     62e:	30 19       	sub	r19, r0
     630:	30 5d       	subi	r19, 0xD0	; 208
     632:	31 93       	st	Z+, r19
     634:	de f6       	brtc	.-74     	; 0x5ec <__ultoa_invert+0xe>
     636:	cf 01       	movw	r24, r30
     638:	08 95       	ret
     63a:	46 2f       	mov	r20, r22
     63c:	47 70       	andi	r20, 0x07	; 7
     63e:	40 5d       	subi	r20, 0xD0	; 208
     640:	41 93       	st	Z+, r20
     642:	b3 e0       	ldi	r27, 0x03	; 3
     644:	0f d0       	rcall	.+30     	; 0x664 <__ultoa_invert+0x86>
     646:	c9 f7       	brne	.-14     	; 0x63a <__ultoa_invert+0x5c>
     648:	f6 cf       	rjmp	.-20     	; 0x636 <__ultoa_invert+0x58>
     64a:	46 2f       	mov	r20, r22
     64c:	4f 70       	andi	r20, 0x0F	; 15
     64e:	40 5d       	subi	r20, 0xD0	; 208
     650:	4a 33       	cpi	r20, 0x3A	; 58
     652:	18 f0       	brcs	.+6      	; 0x65a <__ultoa_invert+0x7c>
     654:	49 5d       	subi	r20, 0xD9	; 217
     656:	31 fd       	sbrc	r19, 1
     658:	40 52       	subi	r20, 0x20	; 32
     65a:	41 93       	st	Z+, r20
     65c:	02 d0       	rcall	.+4      	; 0x662 <__ultoa_invert+0x84>
     65e:	a9 f7       	brne	.-22     	; 0x64a <__ultoa_invert+0x6c>
     660:	ea cf       	rjmp	.-44     	; 0x636 <__ultoa_invert+0x58>
     662:	b4 e0       	ldi	r27, 0x04	; 4
     664:	a6 95       	lsr	r26
     666:	97 95       	ror	r25
     668:	87 95       	ror	r24
     66a:	77 95       	ror	r23
     66c:	67 95       	ror	r22
     66e:	ba 95       	dec	r27
     670:	c9 f7       	brne	.-14     	; 0x664 <__ultoa_invert+0x86>
     672:	00 97       	sbiw	r24, 0x00	; 0
     674:	61 05       	cpc	r22, r1
     676:	71 05       	cpc	r23, r1
     678:	08 95       	ret
     67a:	9b 01       	movw	r18, r22
     67c:	ac 01       	movw	r20, r24
     67e:	0a 2e       	mov	r0, r26
     680:	06 94       	lsr	r0
     682:	57 95       	ror	r21
     684:	47 95       	ror	r20
     686:	37 95       	ror	r19
     688:	27 95       	ror	r18
     68a:	ba 95       	dec	r27
     68c:	c9 f7       	brne	.-14     	; 0x680 <__ultoa_invert+0xa2>
     68e:	62 0f       	add	r22, r18
     690:	73 1f       	adc	r23, r19
     692:	84 1f       	adc	r24, r20
     694:	95 1f       	adc	r25, r21
     696:	a0 1d       	adc	r26, r0
     698:	08 95       	ret

0000069a <delay_ms>:
uchar cmd_buf[100];

/**
 * Some basic delay function
 */
void delay_ms(unsigned short ms) {
     69a:	df 93       	push	r29
     69c:	cf 93       	push	r28
     69e:	00 d0       	rcall	.+0      	; 0x6a0 <delay_ms+0x6>
     6a0:	00 d0       	rcall	.+0      	; 0x6a2 <delay_ms+0x8>
     6a2:	00 d0       	rcall	.+0      	; 0x6a4 <delay_ms+0xa>
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	9e 83       	std	Y+6, r25	; 0x06
     6aa:	8d 83       	std	Y+5, r24	; 0x05
	unsigned short outer1, outer2;
	outer1 = 200 * 12;
     6ac:	80 e6       	ldi	r24, 0x60	; 96
     6ae:	99 e0       	ldi	r25, 0x09	; 9
     6b0:	9c 83       	std	Y+4, r25	; 0x04
     6b2:	8b 83       	std	Y+3, r24	; 0x03
     6b4:	1c c0       	rjmp	.+56     	; 0x6ee <delay_ms+0x54>

	while (outer1) {
		outer2 = 100;
     6b6:	84 e6       	ldi	r24, 0x64	; 100
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	9a 83       	std	Y+2, r25	; 0x02
     6bc:	89 83       	std	Y+1, r24	; 0x01
     6be:	0e c0       	rjmp	.+28     	; 0x6dc <delay_ms+0x42>
		while (outer2) {
			while (ms)
				ms--;
     6c0:	8d 81       	ldd	r24, Y+5	; 0x05
     6c2:	9e 81       	ldd	r25, Y+6	; 0x06
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	9e 83       	std	Y+6, r25	; 0x06
     6c8:	8d 83       	std	Y+5, r24	; 0x05
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
			while (ms)
     6ca:	8d 81       	ldd	r24, Y+5	; 0x05
     6cc:	9e 81       	ldd	r25, Y+6	; 0x06
     6ce:	00 97       	sbiw	r24, 0x00	; 0
     6d0:	b9 f7       	brne	.-18     	; 0x6c0 <delay_ms+0x26>
				ms--;
			outer2--;
     6d2:	89 81       	ldd	r24, Y+1	; 0x01
     6d4:	9a 81       	ldd	r25, Y+2	; 0x02
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	9a 83       	std	Y+2, r25	; 0x02
     6da:	89 83       	std	Y+1, r24	; 0x01
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
     6dc:	89 81       	ldd	r24, Y+1	; 0x01
     6de:	9a 81       	ldd	r25, Y+2	; 0x02
     6e0:	00 97       	sbiw	r24, 0x00	; 0
     6e2:	99 f7       	brne	.-26     	; 0x6ca <delay_ms+0x30>
			while (ms)
				ms--;
			outer2--;
		}
		outer1--;
     6e4:	8b 81       	ldd	r24, Y+3	; 0x03
     6e6:	9c 81       	ldd	r25, Y+4	; 0x04
     6e8:	01 97       	sbiw	r24, 0x01	; 1
     6ea:	9c 83       	std	Y+4, r25	; 0x04
     6ec:	8b 83       	std	Y+3, r24	; 0x03
 */
void delay_ms(unsigned short ms) {
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
     6ee:	8b 81       	ldd	r24, Y+3	; 0x03
     6f0:	9c 81       	ldd	r25, Y+4	; 0x04
     6f2:	00 97       	sbiw	r24, 0x00	; 0
     6f4:	01 f7       	brne	.-64     	; 0x6b6 <delay_ms+0x1c>
				ms--;
			outer2--;
		}
		outer1--;
	}
}
     6f6:	26 96       	adiw	r28, 0x06	; 6
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
     702:	cf 91       	pop	r28
     704:	df 91       	pop	r29
     706:	08 95       	ret

00000708 <gpib_init>:
 * Init GPIB pins and variables.
 * \brief All signal lines not related to the controller part
 * 		are initialized with useful values.
 *		(The controller part initialization is done on gpib_controller_assert())
 */
void gpib_init(void) {
     708:	df 93       	push	r29
     70a:	cf 93       	push	r28
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
	// data lines - complete port A as input
	DDRA = 0x00;
     710:	ea e3       	ldi	r30, 0x3A	; 58
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	10 82       	st	Z, r1

	// handshake lines - on port D , everything as input
	DDRD &= ~_BV(G_DAV); // DAV 
     716:	a1 e3       	ldi	r26, 0x31	; 49
     718:	b0 e0       	ldi	r27, 0x00	; 0
     71a:	e1 e3       	ldi	r30, 0x31	; 49
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	80 81       	ld	r24, Z
     720:	8b 7f       	andi	r24, 0xFB	; 251
     722:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_EOI); // EOI 
     724:	a1 e3       	ldi	r26, 0x31	; 49
     726:	b0 e0       	ldi	r27, 0x00	; 0
     728:	e1 e3       	ldi	r30, 0x31	; 49
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	80 81       	ld	r24, Z
     72e:	8f 7e       	andi	r24, 0xEF	; 239
     730:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_SRQ); // SRQ 
     732:	a1 e3       	ldi	r26, 0x31	; 49
     734:	b0 e0       	ldi	r27, 0x00	; 0
     736:	e1 e3       	ldi	r30, 0x31	; 49
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	80 81       	ld	r24, Z
     73c:	8f 7b       	andi	r24, 0xBF	; 191
     73e:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_ATN); // ATN  
     740:	a1 e3       	ldi	r26, 0x31	; 49
     742:	b0 e0       	ldi	r27, 0x00	; 0
     744:	e1 e3       	ldi	r30, 0x31	; 49
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	80 81       	ld	r24, Z
     74a:	8f 77       	andi	r24, 0x7F	; 127
     74c:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_REN); // REN  
     74e:	a7 e3       	ldi	r26, 0x37	; 55
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	e7 e3       	ldi	r30, 0x37	; 55
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	80 81       	ld	r24, Z
     758:	8d 7f       	andi	r24, 0xFD	; 253
     75a:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_IFC); // IFC  
     75c:	a7 e3       	ldi	r26, 0x37	; 55
     75e:	b0 e0       	ldi	r27, 0x00	; 0
     760:	e7 e3       	ldi	r30, 0x37	; 55
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	80 81       	ld	r24, Z
     766:	8e 7f       	andi	r24, 0xFE	; 254
     768:	8c 93       	st	X, r24

	// init handshake lines
	assign_bit(DDRD, PORTD, G_NRFD);
     76a:	a2 e3       	ldi	r26, 0x32	; 50
     76c:	b0 e0       	ldi	r27, 0x00	; 0
     76e:	e2 e3       	ldi	r30, 0x32	; 50
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	80 81       	ld	r24, Z
     774:	87 7f       	andi	r24, 0xF7	; 247
     776:	8c 93       	st	X, r24
     778:	a1 e3       	ldi	r26, 0x31	; 49
     77a:	b0 e0       	ldi	r27, 0x00	; 0
     77c:	e1 e3       	ldi	r30, 0x31	; 49
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	80 81       	ld	r24, Z
     782:	88 60       	ori	r24, 0x08	; 8
     784:	8c 93       	st	X, r24
     786:	a2 e3       	ldi	r26, 0x32	; 50
     788:	b0 e0       	ldi	r27, 0x00	; 0
     78a:	e2 e3       	ldi	r30, 0x32	; 50
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	80 81       	ld	r24, Z
     790:	87 7f       	andi	r24, 0xF7	; 247
     792:	8c 93       	st	X, r24
	// not ready for data now
	release_bit(DDRD, PORTD, G_NDAC);
     794:	a1 e3       	ldi	r26, 0x31	; 49
     796:	b0 e0       	ldi	r27, 0x00	; 0
     798:	e1 e3       	ldi	r30, 0x31	; 49
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	8f 7d       	andi	r24, 0xDF	; 223
     7a0:	8c 93       	st	X, r24
     7a2:	a2 e3       	ldi	r26, 0x32	; 50
     7a4:	b0 e0       	ldi	r27, 0x00	; 0
     7a6:	e2 e3       	ldi	r30, 0x32	; 50
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	80 81       	ld	r24, Z
     7ac:	80 62       	ori	r24, 0x20	; 32
     7ae:	8c 93       	st	X, r24
	// initially: ok so far
}
     7b0:	cf 91       	pop	r28
     7b2:	df 91       	pop	r29
     7b4:	08 95       	ret

000007b6 <gpib_receive>:
 *  \returns		On any error, 0xff is returned. in this case, the value of parameter *_byte is undefined.
 * 		Otherwise the value of the EOI signal line during read is returned. If EOI was assigned, a 0x01 is
 * 		returned. If EOI was not assigned, a 0x00 is returned. Assignment of EOI means that the talker
 * 		is sending the last character for this transmission.
 */
uchar gpib_receive(uchar* _byte) {
     7b6:	df 93       	push	r29
     7b8:	cf 93       	push	r28
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	27 97       	sbiw	r28, 0x07	; 7
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	f8 94       	cli
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	cd bf       	out	0x3d, r28	; 61
     7ca:	9e 83       	std	Y+6, r25	; 0x06
     7cc:	8d 83       	std	Y+5, r24	; 0x05
	int timeout;
	uchar byte, eoi;

	//uart_puts("\n\rgpib_receive()\n\r");

	if (controller.talks == 1) {
     7ce:	80 91 7d 04 	lds	r24, 0x047D
     7d2:	81 30       	cpi	r24, 0x01	; 1
     7d4:	39 f4       	brne	.+14     	; 0x7e4 <gpib_receive+0x2e>
		*_byte = 0xff;
     7d6:	ed 81       	ldd	r30, Y+5	; 0x05
     7d8:	fe 81       	ldd	r31, Y+6	; 0x06
     7da:	8f ef       	ldi	r24, 0xFF	; 255
     7dc:	80 83       	st	Z, r24
		return 0xff;
     7de:	8f ef       	ldi	r24, 0xFF	; 255
     7e0:	8f 83       	std	Y+7, r24	; 0x07
     7e2:	c6 c0       	rjmp	.+396    	; 0x970 <__stack+0x111>
	}

	// handshake: set nrfd, means i am ready to receive some data
	release_bit(DDRD, PORTD, G_NRFD);
     7e4:	a1 e3       	ldi	r26, 0x31	; 49
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e1 e3       	ldi	r30, 0x31	; 49
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	87 7f       	andi	r24, 0xF7	; 247
     7f0:	8c 93       	st	X, r24
     7f2:	a2 e3       	ldi	r26, 0x32	; 50
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	e2 e3       	ldi	r30, 0x32	; 50
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	88 60       	ori	r24, 0x08	; 8
     7fe:	8c 93       	st	X, r24
	assign_bit(DDRD, PORTD, G_NDAC);
     800:	a2 e3       	ldi	r26, 0x32	; 50
     802:	b0 e0       	ldi	r27, 0x00	; 0
     804:	e2 e3       	ldi	r30, 0x32	; 50
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	80 81       	ld	r24, Z
     80a:	8f 7d       	andi	r24, 0xDF	; 223
     80c:	8c 93       	st	X, r24
     80e:	a1 e3       	ldi	r26, 0x31	; 49
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	e1 e3       	ldi	r30, 0x31	; 49
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	80 62       	ori	r24, 0x20	; 32
     81a:	8c 93       	st	X, r24
     81c:	a2 e3       	ldi	r26, 0x32	; 50
     81e:	b0 e0       	ldi	r27, 0x00	; 0
     820:	e2 e3       	ldi	r30, 0x32	; 50
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	8f 7d       	andi	r24, 0xDF	; 223
     828:	8c 93       	st	X, r24

	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     82a:	80 91 85 05 	lds	r24, 0x0585
     82e:	88 2f       	mov	r24, r24
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	05 96       	adiw	r24, 0x05	; 5
     834:	9c 83       	std	Y+4, r25	; 0x04
     836:	8b 83       	std	Y+3, r24	; 0x03
     838:	10 c0       	rjmp	.+32     	; 0x85a <gpib_receive+0xa4>
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     83a:	80 91 85 05 	lds	r24, 0x0585
     83e:	28 2f       	mov	r18, r24
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	9c 81       	ldd	r25, Y+4	; 0x04
     846:	28 17       	cp	r18, r24
     848:	39 07       	cpc	r19, r25
     84a:	39 f4       	brne	.+14     	; 0x85a <gpib_receive+0xa4>
			uart_puts("\n\rError: DAV timeout (1)\n\r");
     84c:	80 e6       	ldi	r24, 0x60	; 96
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
			return 0xff;
     854:	8f ef       	ldi	r24, 0xFF	; 255
     856:	8f 83       	std	Y+7, r24	; 0x07
     858:	8b c0       	rjmp	.+278    	; 0x970 <__stack+0x111>
	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
     85a:	e0 e3       	ldi	r30, 0x30	; 48
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	80 81       	ld	r24, Z
     860:	88 2f       	mov	r24, r24
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	84 70       	andi	r24, 0x04	; 4
     866:	90 70       	andi	r25, 0x00	; 0
     868:	00 97       	sbiw	r24, 0x00	; 0
     86a:	49 f0       	breq	.+18     	; 0x87e <__stack+0x1f>
     86c:	80 91 85 05 	lds	r24, 0x0585
     870:	28 2f       	mov	r18, r24
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	8b 81       	ldd	r24, Y+3	; 0x03
     876:	9c 81       	ldd	r25, Y+4	; 0x04
     878:	82 17       	cp	r24, r18
     87a:	93 07       	cpc	r25, r19
     87c:	f4 f6       	brge	.-68     	; 0x83a <gpib_receive+0x84>
#else
	loop_until_bit_is_clear(PIND,G_DAV);
#endif

	// handshake: clear NRFD, means i am busy now to read data
	assign_bit(DDRD, PORTD, G_NRFD);
     87e:	a2 e3       	ldi	r26, 0x32	; 50
     880:	b0 e0       	ldi	r27, 0x00	; 0
     882:	e2 e3       	ldi	r30, 0x32	; 50
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	80 81       	ld	r24, Z
     888:	87 7f       	andi	r24, 0xF7	; 247
     88a:	8c 93       	st	X, r24
     88c:	a1 e3       	ldi	r26, 0x31	; 49
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	e1 e3       	ldi	r30, 0x31	; 49
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	80 81       	ld	r24, Z
     896:	88 60       	ori	r24, 0x08	; 8
     898:	8c 93       	st	X, r24
     89a:	a2 e3       	ldi	r26, 0x32	; 50
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e2 e3       	ldi	r30, 0x32	; 50
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 81       	ld	r24, Z
     8a4:	87 7f       	andi	r24, 0xF7	; 247
     8a6:	8c 93       	st	X, r24
	// read data
	byte = PINA ^ 0xff;
     8a8:	e9 e3       	ldi	r30, 0x39	; 57
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
     8ae:	80 95       	com	r24
     8b0:	8a 83       	std	Y+2, r24	; 0x02

	// handshake: set ndac, means i have completed/accepted the read
	release_bit(DDRD, PORTD, G_NDAC);
     8b2:	a1 e3       	ldi	r26, 0x31	; 49
     8b4:	b0 e0       	ldi	r27, 0x00	; 0
     8b6:	e1 e3       	ldi	r30, 0x31	; 49
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	80 81       	ld	r24, Z
     8bc:	8f 7d       	andi	r24, 0xDF	; 223
     8be:	8c 93       	st	X, r24
     8c0:	a2 e3       	ldi	r26, 0x32	; 50
     8c2:	b0 e0       	ldi	r27, 0x00	; 0
     8c4:	e2 e3       	ldi	r30, 0x32	; 50
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	80 81       	ld	r24, Z
     8ca:	80 62       	ori	r24, 0x20	; 32
     8cc:	8c 93       	st	X, r24

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     8ce:	80 91 85 05 	lds	r24, 0x0585
     8d2:	88 2f       	mov	r24, r24
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	05 96       	adiw	r24, 0x05	; 5
     8d8:	9c 83       	std	Y+4, r25	; 0x04
     8da:	8b 83       	std	Y+3, r24	; 0x03
     8dc:	10 c0       	rjmp	.+32     	; 0x8fe <__stack+0x9f>
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     8de:	80 91 85 05 	lds	r24, 0x0585
     8e2:	28 2f       	mov	r18, r24
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	8b 81       	ldd	r24, Y+3	; 0x03
     8e8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ea:	28 17       	cp	r18, r24
     8ec:	39 07       	cpc	r19, r25
     8ee:	39 f4       	brne	.+14     	; 0x8fe <__stack+0x9f>
			uart_puts("\n\rError: DAV timeout (2)\n\r");
     8f0:	8b e7       	ldi	r24, 0x7B	; 123
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
			return 0xff;
     8f8:	8f ef       	ldi	r24, 0xFF	; 255
     8fa:	8f 83       	std	Y+7, r24	; 0x07
     8fc:	39 c0       	rjmp	.+114    	; 0x970 <__stack+0x111>
	release_bit(DDRD, PORTD, G_NDAC);

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
     8fe:	e0 e3       	ldi	r30, 0x30	; 48
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	88 2f       	mov	r24, r24
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	84 70       	andi	r24, 0x04	; 4
     90a:	90 70       	andi	r25, 0x00	; 0
     90c:	00 97       	sbiw	r24, 0x00	; 0
     90e:	49 f4       	brne	.+18     	; 0x922 <__stack+0xc3>
     910:	80 91 85 05 	lds	r24, 0x0585
     914:	28 2f       	mov	r18, r24
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	8b 81       	ldd	r24, Y+3	; 0x03
     91a:	9c 81       	ldd	r25, Y+4	; 0x04
     91c:	82 17       	cp	r24, r18
     91e:	93 07       	cpc	r25, r19
     920:	f4 f6       	brge	.-68     	; 0x8de <__stack+0x7f>
	}
#else
	loop_until_bit_is_set(PIND,G_DAV);
#endif
	// handshake: clear ndac (this is a prerequisite for receive next byte)
	assign_bit(DDRD, PORTD, G_NDAC);
     922:	a2 e3       	ldi	r26, 0x32	; 50
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	e2 e3       	ldi	r30, 0x32	; 50
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	80 81       	ld	r24, Z
     92c:	8f 7d       	andi	r24, 0xDF	; 223
     92e:	8c 93       	st	X, r24
     930:	a1 e3       	ldi	r26, 0x31	; 49
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	e1 e3       	ldi	r30, 0x31	; 49
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	80 62       	ori	r24, 0x20	; 32
     93c:	8c 93       	st	X, r24
     93e:	a2 e3       	ldi	r26, 0x32	; 50
     940:	b0 e0       	ldi	r27, 0x00	; 0
     942:	e2 e3       	ldi	r30, 0x32	; 50
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	80 81       	ld	r24, Z
     948:	8f 7d       	andi	r24, 0xDF	; 223
     94a:	8c 93       	st	X, r24

	// check if last byte of transmission
	eoi = bit_is_clear(PIND, G_EOI);
     94c:	e0 e3       	ldi	r30, 0x30	; 48
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	80 81       	ld	r24, Z
     952:	88 2f       	mov	r24, r24
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	80 71       	andi	r24, 0x10	; 16
     958:	90 70       	andi	r25, 0x00	; 0
     95a:	19 82       	std	Y+1, r1	; 0x01
     95c:	00 97       	sbiw	r24, 0x00	; 0
     95e:	11 f4       	brne	.+4      	; 0x964 <__stack+0x105>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	89 83       	std	Y+1, r24	; 0x01

	*_byte = byte;
     964:	ed 81       	ldd	r30, Y+5	; 0x05
     966:	fe 81       	ldd	r31, Y+6	; 0x06
     968:	8a 81       	ldd	r24, Y+2	; 0x02
     96a:	80 83       	st	Z, r24

	return eoi;
     96c:	89 81       	ldd	r24, Y+1	; 0x01
     96e:	8f 83       	std	Y+7, r24	; 0x07
     970:	8f 81       	ldd	r24, Y+7	; 0x07
}
     972:	27 96       	adiw	r28, 0x07	; 7
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	f8 94       	cli
     978:	de bf       	out	0x3e, r29	; 62
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	cd bf       	out	0x3d, r28	; 61
     97e:	cf 91       	pop	r28
     980:	df 91       	pop	r29
     982:	08 95       	ret

00000984 <gpib_add_partner_sad>:
//void queryPartners() {
//	controller.partners[0] = 0x02;
//	//controller.partners[1] = 0x01;
//	controller.partners[3] = 0x00; // end value is 0x00
//}
uchar gpib_add_partner_sad(uchar address) {
     984:	df 93       	push	r29
     986:	cf 93       	push	r28
     988:	00 d0       	rcall	.+0      	; 0x98a <gpib_add_partner_sad+0x6>
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	89 83       	std	Y+1, r24	; 0x01

}
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	cf 91       	pop	r28
     996:	df 91       	pop	r29
     998:	08 95       	ret

0000099a <gpib_remove_partner_sad>:

void gpib_remove_partner_sad(uchar address) {
     99a:	df 93       	push	r29
     99c:	cf 93       	push	r28
     99e:	0f 92       	push	r0
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	89 83       	std	Y+1, r24	; 0x01

}
     9a6:	0f 90       	pop	r0
     9a8:	cf 91       	pop	r28
     9aa:	df 91       	pop	r29
     9ac:	08 95       	ret

000009ae <gpib_controller_assign>:
 * You have to change the initialization of the partner array according to your environment.
 * The partners-array is used by gpib_serial_poll() for looping over all existing devices.
 * 
 * \param address the address to be used by the controller. Usually 0x00.
 */
void gpib_controller_assign(uchar address) {
     9ae:	df 93       	push	r29
     9b0:	cf 93       	push	r28
     9b2:	0f 92       	push	r0
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	89 83       	std	Y+1, r24	; 0x01
	controller.myaddress = address;
     9ba:	89 81       	ldd	r24, Y+1	; 0x01
     9bc:	80 93 7a 04 	sts	0x047A, r24
	controller.talks = 0;
     9c0:	10 92 7d 04 	sts	0x047D, r1
	controller.partner.primary = DEFAULT_PARTNER_ADDRESS; // init default active partner
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	80 93 7b 04 	sts	0x047B, r24
	controller.partner.secondary = ADDRESS_NOT_SET;
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	80 93 7c 04 	sts	0x047C, r24
	/** get all partners on bus by querying them */
	//queryPartners();
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     9d0:	a8 e3       	ldi	r26, 0x38	; 56
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	e8 e3       	ldi	r30, 0x38	; 56
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	80 81       	ld	r24, Z
     9da:	8e 7f       	andi	r24, 0xFE	; 254
     9dc:	8c 93       	st	X, r24
     9de:	a7 e3       	ldi	r26, 0x37	; 55
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	e7 e3       	ldi	r30, 0x37	; 55
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	80 81       	ld	r24, Z
     9e8:	81 60       	ori	r24, 0x01	; 1
     9ea:	8c 93       	st	X, r24
     9ec:	a8 e3       	ldi	r26, 0x38	; 56
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e8 e3       	ldi	r30, 0x38	; 56
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8e 7f       	andi	r24, 0xFE	; 254
     9f8:	8c 93       	st	X, r24
	delay_ms(200);
     9fa:	88 ec       	ldi	r24, 0xC8	; 200
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 4d 03 	call	0x69a	; 0x69a <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     a02:	a7 e3       	ldi	r26, 0x37	; 55
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	e7 e3       	ldi	r30, 0x37	; 55
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	80 81       	ld	r24, Z
     a0c:	8e 7f       	andi	r24, 0xFE	; 254
     a0e:	8c 93       	st	X, r24
     a10:	a8 e3       	ldi	r26, 0x38	; 56
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e8 e3       	ldi	r30, 0x38	; 56
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	81 60       	ori	r24, 0x01	; 1
     a1c:	8c 93       	st	X, r24
	// set up all devices for remote control
	assign_bit(DDRB, PORTB, G_REN);
     a1e:	a8 e3       	ldi	r26, 0x38	; 56
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	e8 e3       	ldi	r30, 0x38	; 56
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	8d 7f       	andi	r24, 0xFD	; 253
     a2a:	8c 93       	st	X, r24
     a2c:	a7 e3       	ldi	r26, 0x37	; 55
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	e7 e3       	ldi	r30, 0x37	; 55
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	82 60       	ori	r24, 0x02	; 2
     a38:	8c 93       	st	X, r24
     a3a:	a8 e3       	ldi	r26, 0x38	; 56
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	e8 e3       	ldi	r30, 0x38	; 56
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	80 81       	ld	r24, Z
     a44:	8d 7f       	andi	r24, 0xFD	; 253
     a46:	8c 93       	st	X, r24

	// DCL - device clear for all devices on bus
	cmd_buf[0] = G_CMD_DCL;
     a48:	84 e1       	ldi	r24, 0x14	; 20
     a4a:	80 93 d0 04 	sts	0x04D0, r24
	gpib_cmd(cmd_buf, 1);
     a4e:	80 ed       	ldi	r24, 0xD0	; 208
     a50:	94 e0       	ldi	r25, 0x04	; 4
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>
}
     a5a:	0f 90       	pop	r0
     a5c:	cf 91       	pop	r28
     a5e:	df 91       	pop	r29
     a60:	08 95       	ret

00000a62 <gpib_controller_release>:

/**
 * Release bus 
 */
void gpib_controller_release(void) {
     a62:	df 93       	push	r29
     a64:	cf 93       	push	r28
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     a6a:	a8 e3       	ldi	r26, 0x38	; 56
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	e8 e3       	ldi	r30, 0x38	; 56
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	80 81       	ld	r24, Z
     a74:	8e 7f       	andi	r24, 0xFE	; 254
     a76:	8c 93       	st	X, r24
     a78:	a7 e3       	ldi	r26, 0x37	; 55
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	e7 e3       	ldi	r30, 0x37	; 55
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	80 81       	ld	r24, Z
     a82:	81 60       	ori	r24, 0x01	; 1
     a84:	8c 93       	st	X, r24
     a86:	a8 e3       	ldi	r26, 0x38	; 56
     a88:	b0 e0       	ldi	r27, 0x00	; 0
     a8a:	e8 e3       	ldi	r30, 0x38	; 56
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 81       	ld	r24, Z
     a90:	8e 7f       	andi	r24, 0xFE	; 254
     a92:	8c 93       	st	X, r24
	delay_ms(200);
     a94:	88 ec       	ldi	r24, 0xC8	; 200
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 4d 03 	call	0x69a	; 0x69a <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     a9c:	a7 e3       	ldi	r26, 0x37	; 55
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e7 e3       	ldi	r30, 0x37	; 55
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	80 81       	ld	r24, Z
     aa6:	8e 7f       	andi	r24, 0xFE	; 254
     aa8:	8c 93       	st	X, r24
     aaa:	a8 e3       	ldi	r26, 0x38	; 56
     aac:	b0 e0       	ldi	r27, 0x00	; 0
     aae:	e8 e3       	ldi	r30, 0x38	; 56
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 81       	ld	r24, Z
     ab4:	81 60       	ori	r24, 0x01	; 1
     ab6:	8c 93       	st	X, r24
	// set up all devices for local control
	release_bit(DDRB, PORTB, G_REN);
     ab8:	a7 e3       	ldi	r26, 0x37	; 55
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	e7 e3       	ldi	r30, 0x37	; 55
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	80 81       	ld	r24, Z
     ac2:	8d 7f       	andi	r24, 0xFD	; 253
     ac4:	8c 93       	st	X, r24
     ac6:	a8 e3       	ldi	r26, 0x38	; 56
     ac8:	b0 e0       	ldi	r27, 0x00	; 0
     aca:	e8 e3       	ldi	r30, 0x38	; 56
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	80 81       	ld	r24, Z
     ad0:	82 60       	ori	r24, 0x02	; 2
     ad2:	8c 93       	st	X, r24
}
     ad4:	cf 91       	pop	r28
     ad6:	df 91       	pop	r29
     ad8:	08 95       	ret

00000ada <gpib_write>:

/**
 * Write GPIB string to bus
 * \brief See _gpib_write() for further information.
 */
uchar gpib_write(uchar *bytes, int length) {
     ada:	df 93       	push	r29
     adc:	cf 93       	push	r28
     ade:	00 d0       	rcall	.+0      	; 0xae0 <gpib_write+0x6>
     ae0:	00 d0       	rcall	.+0      	; 0xae2 <gpib_write+0x8>
     ae2:	cd b7       	in	r28, 0x3d	; 61
     ae4:	de b7       	in	r29, 0x3e	; 62
     ae6:	9a 83       	std	Y+2, r25	; 0x02
     ae8:	89 83       	std	Y+1, r24	; 0x01
     aea:	7c 83       	std	Y+4, r23	; 0x04
     aec:	6b 83       	std	Y+3, r22	; 0x03
	// set attention arg false for ordinary strings
	return _gpib_write(bytes, length, (uchar) 0);
     aee:	89 81       	ldd	r24, Y+1	; 0x01
     af0:	9a 81       	ldd	r25, Y+2	; 0x02
     af2:	2b 81       	ldd	r18, Y+3	; 0x03
     af4:	3c 81       	ldd	r19, Y+4	; 0x04
     af6:	b9 01       	movw	r22, r18
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_gpib_write>
}
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	cf 91       	pop	r28
     b08:	df 91       	pop	r29
     b0a:	08 95       	ret

00000b0c <gpib_cmd>:

/**
 * Write GPIB command to bus
 * \brief See _gpib_write() for further information.
 */
uchar gpib_cmd(uchar *bytes, int length) {
     b0c:	df 93       	push	r29
     b0e:	cf 93       	push	r28
     b10:	00 d0       	rcall	.+0      	; 0xb12 <gpib_cmd+0x6>
     b12:	00 d0       	rcall	.+0      	; 0xb14 <gpib_cmd+0x8>
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
     b18:	9a 83       	std	Y+2, r25	; 0x02
     b1a:	89 83       	std	Y+1, r24	; 0x01
     b1c:	7c 83       	std	Y+4, r23	; 0x04
     b1e:	6b 83       	std	Y+3, r22	; 0x03
	// set attention arg true for commands
	return _gpib_write(bytes, length, (uchar) 1);
     b20:	89 81       	ldd	r24, Y+1	; 0x01
     b22:	9a 81       	ldd	r25, Y+2	; 0x02
     b24:	2b 81       	ldd	r18, Y+3	; 0x03
     b26:	3c 81       	ldd	r19, Y+4	; 0x04
     b28:	b9 01       	movw	r22, r18
     b2a:	41 e0       	ldi	r20, 0x01	; 1
     b2c:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_gpib_write>
}
     b30:	0f 90       	pop	r0
     b32:	0f 90       	pop	r0
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	cf 91       	pop	r28
     b3a:	df 91       	pop	r29
     b3c:	08 95       	ret

00000b3e <_gpib_write>:
 * \param length length of valid bytes in byte array or zero.
 * for binary data, lenght must be defined. For strings, length can be set to zero. Then the length of
 * the string is calculated internally.
 * \param attention attention tur means assign ATN signal line during write.
 */
uchar _gpib_write(uchar *bytes, int length, uchar attention) {
     b3e:	df 93       	push	r29
     b40:	cf 93       	push	r28
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	2b 97       	sbiw	r28, 0x0b	; 11
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	9f 83       	std	Y+7, r25	; 0x07
     b54:	8e 83       	std	Y+6, r24	; 0x06
     b56:	79 87       	std	Y+9, r23	; 0x09
     b58:	68 87       	std	Y+8, r22	; 0x08
     b5a:	4a 87       	std	Y+10, r20	; 0x0a
	int timeout;
	//uchar buf[64];

	// set talks state. This is used by ISR to recognize own talk
	// (controller must not talk to itself and must not take part in listener handshake when talking)
	controller.talks = 1;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	80 93 7d 04 	sts	0x047D, r24

	if (attention) {
     b62:	8a 85       	ldd	r24, Y+10	; 0x0a
     b64:	88 23       	and	r24, r24
     b66:	a9 f0       	breq	.+42     	; 0xb92 <_gpib_write+0x54>
		//uart_puts("\n\rgpib_controller_write()\n\r");
		// assign ATN for commands
		assign_bit(DDRD, PORTD, G_ATN);
     b68:	a2 e3       	ldi	r26, 0x32	; 50
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e2 e3       	ldi	r30, 0x32	; 50
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	8f 77       	andi	r24, 0x7F	; 127
     b74:	8c 93       	st	X, r24
     b76:	a1 e3       	ldi	r26, 0x31	; 49
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e1 e3       	ldi	r30, 0x31	; 49
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	80 68       	ori	r24, 0x80	; 128
     b82:	8c 93       	st	X, r24
     b84:	a2 e3       	ldi	r26, 0x32	; 50
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e2 e3       	ldi	r30, 0x32	; 50
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	8f 77       	andi	r24, 0x7F	; 127
     b90:	8c 93       	st	X, r24
	}

	if (length == 0) {
     b92:	88 85       	ldd	r24, Y+8	; 0x08
     b94:	99 85       	ldd	r25, Y+9	; 0x09
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	31 f4       	brne	.+12     	; 0xba6 <_gpib_write+0x68>
		// length==0 means this is a common C string, null-terminated.
		// then, length can be easily calculated
		length = strlen((char*) bytes);
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	0e 94 9b 00 	call	0x136	; 0x136 <strlen>
     ba2:	99 87       	std	Y+9, r25	; 0x09
     ba4:	88 87       	std	Y+8, r24	; 0x08
	//	else 
	//		sprintf( buf, "gpib_write: 0x%02x\n\r", bytes[0] );
	//	uart_puts((char*)buf);

	// release EOI during transmission
	release_bit(DDRD, PORTD, G_EOI);
     ba6:	a1 e3       	ldi	r26, 0x31	; 49
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e1 e3       	ldi	r30, 0x31	; 49
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	8f 7e       	andi	r24, 0xEF	; 239
     bb2:	8c 93       	st	X, r24
     bb4:	a2 e3       	ldi	r26, 0x32	; 50
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e2 e3       	ldi	r30, 0x32	; 50
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	80 61       	ori	r24, 0x10	; 16
     bc0:	8c 93       	st	X, r24
	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
     bc2:	a1 e3       	ldi	r26, 0x31	; 49
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e1 e3       	ldi	r30, 0x31	; 49
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	8b 7f       	andi	r24, 0xFB	; 251
     bce:	8c 93       	st	X, r24
     bd0:	a2 e3       	ldi	r26, 0x32	; 50
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e2 e3       	ldi	r30, 0x32	; 50
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	84 60       	ori	r24, 0x04	; 4
     bdc:	8c 93       	st	X, r24
	// release NRFD (just to be sure)
	release_bit(DDRD, PORTD, G_NRFD);
     bde:	a1 e3       	ldi	r26, 0x31	; 49
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e1 e3       	ldi	r30, 0x31	; 49
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	87 7f       	andi	r24, 0xF7	; 247
     bea:	8c 93       	st	X, r24
     bec:	a2 e3       	ldi	r26, 0x32	; 50
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e2 e3       	ldi	r30, 0x32	; 50
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	88 60       	ori	r24, 0x08	; 8
     bf8:	8c 93       	st	X, r24

	// bytes[0] = 'a'
	// bytes[1] = 'b'
	// length = 2
	for (i = 0; i < length; i++) {
     bfa:	1c 82       	std	Y+4, r1	; 0x04
     bfc:	1b 82       	std	Y+3, r1	; 0x03
     bfe:	34 c2       	rjmp	.+1128   	; 0x1068 <_gpib_write+0x52a>

		// put data on bus
		c = bytes[i];
     c00:	2b 81       	ldd	r18, Y+3	; 0x03
     c02:	3c 81       	ldd	r19, Y+4	; 0x04
     c04:	8e 81       	ldd	r24, Y+6	; 0x06
     c06:	9f 81       	ldd	r25, Y+7	; 0x07
     c08:	fc 01       	movw	r30, r24
     c0a:	e2 0f       	add	r30, r18
     c0c:	f3 1f       	adc	r31, r19
     c0e:	80 81       	ld	r24, Z
     c10:	8d 83       	std	Y+5, r24	; 0x05
		//sprintf( buf, "char: %c\n\r", c );
		//uart_puts(buf);		

		release_bit(DDRD, PORTD, G_NDAC);
     c12:	a1 e3       	ldi	r26, 0x31	; 49
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e1 e3       	ldi	r30, 0x31	; 49
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	8f 7d       	andi	r24, 0xDF	; 223
     c1e:	8c 93       	st	X, r24
     c20:	a2 e3       	ldi	r26, 0x32	; 50
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e2 e3       	ldi	r30, 0x32	; 50
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	80 62       	ori	r24, 0x20	; 32
     c2c:	8c 93       	st	X, r24
		//uart_puts("0");
		// wait for NDAC assign from all listeners
#ifdef WITH_TIMEOUT
		timeout = s + 5;
     c2e:	80 91 85 05 	lds	r24, 0x0585
     c32:	88 2f       	mov	r24, r24
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	05 96       	adiw	r24, 0x05	; 5
     c38:	9a 83       	std	Y+2, r25	; 0x02
     c3a:	89 83       	std	Y+1, r24	; 0x01
     c3c:	10 c0       	rjmp	.+32     	; 0xc5e <_gpib_write+0x120>
		//gpib_info();
		while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
			if (s == timeout) {
     c3e:	80 91 85 05 	lds	r24, 0x0585
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	9a 81       	ldd	r25, Y+2	; 0x02
     c4a:	28 17       	cp	r18, r24
     c4c:	39 07       	cpc	r19, r25
     c4e:	39 f4       	brne	.+14     	; 0xc5e <_gpib_write+0x120>
				uart_puts("\n\rError: NDAC timeout\n\r");
     c50:	86 e9       	ldi	r24, 0x96	; 150
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
				return 0xff;
     c58:	8f ef       	ldi	r24, 0xFF	; 255
     c5a:	8b 87       	std	Y+11, r24	; 0x0b
     c5c:	21 c2       	rjmp	.+1090   	; 0x10a0 <_gpib_write+0x562>
		//uart_puts("0");
		// wait for NDAC assign from all listeners
#ifdef WITH_TIMEOUT
		timeout = s + 5;
		//gpib_info();
		while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
     c5e:	e0 e3       	ldi	r30, 0x30	; 48
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	88 2f       	mov	r24, r24
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	80 72       	andi	r24, 0x20	; 32
     c6a:	90 70       	andi	r25, 0x00	; 0
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	49 f0       	breq	.+18     	; 0xc82 <_gpib_write+0x144>
     c70:	80 91 85 05 	lds	r24, 0x0585
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	9a 81       	ldd	r25, Y+2	; 0x02
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	f4 f6       	brge	.-68     	; 0xc3e <_gpib_write+0x100>
		}
#else
		loop_until_bit_is_clear(PIND,G_NDAC);
#endif

		DDRA = 0x00;
     c82:	ea e3       	ldi	r30, 0x3A	; 58
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	10 82       	st	Z, r1
		if (c & 0x01) {
     c88:	8d 81       	ldd	r24, Y+5	; 0x05
     c8a:	88 2f       	mov	r24, r24
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	81 70       	andi	r24, 0x01	; 1
     c90:	90 70       	andi	r25, 0x00	; 0
     c92:	88 23       	and	r24, r24
     c94:	b1 f0       	breq	.+44     	; 0xcc2 <_gpib_write+0x184>
			assign_bit(DDRA, PORTA, PA0);
     c96:	ab e3       	ldi	r26, 0x3B	; 59
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	eb e3       	ldi	r30, 0x3B	; 59
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	8e 7f       	andi	r24, 0xFE	; 254
     ca2:	8c 93       	st	X, r24
     ca4:	aa e3       	ldi	r26, 0x3A	; 58
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	ea e3       	ldi	r30, 0x3A	; 58
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	81 60       	ori	r24, 0x01	; 1
     cb0:	8c 93       	st	X, r24
     cb2:	ab e3       	ldi	r26, 0x3B	; 59
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	eb e3       	ldi	r30, 0x3B	; 59
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8e 7f       	andi	r24, 0xFE	; 254
     cbe:	8c 93       	st	X, r24
     cc0:	0e c0       	rjmp	.+28     	; 0xcde <_gpib_write+0x1a0>
		} else {
			release_bit(DDRA, PORTA, PA0)
     cc2:	aa e3       	ldi	r26, 0x3A	; 58
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ea e3       	ldi	r30, 0x3A	; 58
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8e 7f       	andi	r24, 0xFE	; 254
     cce:	8c 93       	st	X, r24
     cd0:	ab e3       	ldi	r26, 0x3B	; 59
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	eb e3       	ldi	r30, 0x3B	; 59
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	81 60       	ori	r24, 0x01	; 1
     cdc:	8c 93       	st	X, r24
		}

		if (c & 0x02) {
     cde:	8d 81       	ldd	r24, Y+5	; 0x05
     ce0:	88 2f       	mov	r24, r24
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	82 70       	andi	r24, 0x02	; 2
     ce6:	90 70       	andi	r25, 0x00	; 0
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	b1 f0       	breq	.+44     	; 0xd18 <_gpib_write+0x1da>
			assign_bit(DDRA, PORTA, PA1)
     cec:	ab e3       	ldi	r26, 0x3B	; 59
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	eb e3       	ldi	r30, 0x3B	; 59
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8d 7f       	andi	r24, 0xFD	; 253
     cf8:	8c 93       	st	X, r24
     cfa:	aa e3       	ldi	r26, 0x3A	; 58
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	ea e3       	ldi	r30, 0x3A	; 58
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	82 60       	ori	r24, 0x02	; 2
     d06:	8c 93       	st	X, r24
     d08:	ab e3       	ldi	r26, 0x3B	; 59
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	eb e3       	ldi	r30, 0x3B	; 59
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	8d 7f       	andi	r24, 0xFD	; 253
     d14:	8c 93       	st	X, r24
     d16:	0e c0       	rjmp	.+28     	; 0xd34 <_gpib_write+0x1f6>
		} else {
			release_bit(DDRA, PORTA, PA1);
     d18:	aa e3       	ldi	r26, 0x3A	; 58
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	ea e3       	ldi	r30, 0x3A	; 58
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	8d 7f       	andi	r24, 0xFD	; 253
     d24:	8c 93       	st	X, r24
     d26:	ab e3       	ldi	r26, 0x3B	; 59
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	eb e3       	ldi	r30, 0x3B	; 59
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	82 60       	ori	r24, 0x02	; 2
     d32:	8c 93       	st	X, r24
		}

		if (c & 0x04) {
     d34:	8d 81       	ldd	r24, Y+5	; 0x05
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	84 70       	andi	r24, 0x04	; 4
     d3c:	90 70       	andi	r25, 0x00	; 0
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	b1 f0       	breq	.+44     	; 0xd6e <_gpib_write+0x230>
			assign_bit(DDRA, PORTA, PA2);
     d42:	ab e3       	ldi	r26, 0x3B	; 59
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	eb e3       	ldi	r30, 0x3B	; 59
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	8b 7f       	andi	r24, 0xFB	; 251
     d4e:	8c 93       	st	X, r24
     d50:	aa e3       	ldi	r26, 0x3A	; 58
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	ea e3       	ldi	r30, 0x3A	; 58
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	84 60       	ori	r24, 0x04	; 4
     d5c:	8c 93       	st	X, r24
     d5e:	ab e3       	ldi	r26, 0x3B	; 59
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	eb e3       	ldi	r30, 0x3B	; 59
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	8b 7f       	andi	r24, 0xFB	; 251
     d6a:	8c 93       	st	X, r24
     d6c:	0e c0       	rjmp	.+28     	; 0xd8a <_gpib_write+0x24c>
		} else {
			release_bit(DDRA, PORTA, PA2);
     d6e:	aa e3       	ldi	r26, 0x3A	; 58
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	ea e3       	ldi	r30, 0x3A	; 58
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	8b 7f       	andi	r24, 0xFB	; 251
     d7a:	8c 93       	st	X, r24
     d7c:	ab e3       	ldi	r26, 0x3B	; 59
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	eb e3       	ldi	r30, 0x3B	; 59
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	84 60       	ori	r24, 0x04	; 4
     d88:	8c 93       	st	X, r24
		}

		if (c & 0x08) {
     d8a:	8d 81       	ldd	r24, Y+5	; 0x05
     d8c:	88 2f       	mov	r24, r24
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	88 70       	andi	r24, 0x08	; 8
     d92:	90 70       	andi	r25, 0x00	; 0
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	b1 f0       	breq	.+44     	; 0xdc4 <_gpib_write+0x286>
			assign_bit(DDRA, PORTA, PA3);
     d98:	ab e3       	ldi	r26, 0x3B	; 59
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	eb e3       	ldi	r30, 0x3B	; 59
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	87 7f       	andi	r24, 0xF7	; 247
     da4:	8c 93       	st	X, r24
     da6:	aa e3       	ldi	r26, 0x3A	; 58
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	ea e3       	ldi	r30, 0x3A	; 58
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	88 60       	ori	r24, 0x08	; 8
     db2:	8c 93       	st	X, r24
     db4:	ab e3       	ldi	r26, 0x3B	; 59
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	eb e3       	ldi	r30, 0x3B	; 59
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	87 7f       	andi	r24, 0xF7	; 247
     dc0:	8c 93       	st	X, r24
     dc2:	0e c0       	rjmp	.+28     	; 0xde0 <_gpib_write+0x2a2>
		} else {
			release_bit(DDRA, PORTA, PA3);
     dc4:	aa e3       	ldi	r26, 0x3A	; 58
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	ea e3       	ldi	r30, 0x3A	; 58
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	87 7f       	andi	r24, 0xF7	; 247
     dd0:	8c 93       	st	X, r24
     dd2:	ab e3       	ldi	r26, 0x3B	; 59
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	eb e3       	ldi	r30, 0x3B	; 59
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	88 60       	ori	r24, 0x08	; 8
     dde:	8c 93       	st	X, r24
		}

		if (c & 0x10) {
     de0:	8d 81       	ldd	r24, Y+5	; 0x05
     de2:	88 2f       	mov	r24, r24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	80 71       	andi	r24, 0x10	; 16
     de8:	90 70       	andi	r25, 0x00	; 0
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	b1 f0       	breq	.+44     	; 0xe1a <_gpib_write+0x2dc>
			assign_bit(DDRA, PORTA, PA4);
     dee:	ab e3       	ldi	r26, 0x3B	; 59
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	eb e3       	ldi	r30, 0x3B	; 59
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	8f 7e       	andi	r24, 0xEF	; 239
     dfa:	8c 93       	st	X, r24
     dfc:	aa e3       	ldi	r26, 0x3A	; 58
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	ea e3       	ldi	r30, 0x3A	; 58
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	80 61       	ori	r24, 0x10	; 16
     e08:	8c 93       	st	X, r24
     e0a:	ab e3       	ldi	r26, 0x3B	; 59
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	eb e3       	ldi	r30, 0x3B	; 59
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	8f 7e       	andi	r24, 0xEF	; 239
     e16:	8c 93       	st	X, r24
     e18:	0e c0       	rjmp	.+28     	; 0xe36 <_gpib_write+0x2f8>
		} else {
			release_bit(DDRA, PORTA, PA4);
     e1a:	aa e3       	ldi	r26, 0x3A	; 58
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	ea e3       	ldi	r30, 0x3A	; 58
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8f 7e       	andi	r24, 0xEF	; 239
     e26:	8c 93       	st	X, r24
     e28:	ab e3       	ldi	r26, 0x3B	; 59
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	eb e3       	ldi	r30, 0x3B	; 59
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	80 61       	ori	r24, 0x10	; 16
     e34:	8c 93       	st	X, r24
		}

		if (c & 0x20) {
     e36:	8d 81       	ldd	r24, Y+5	; 0x05
     e38:	88 2f       	mov	r24, r24
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	80 72       	andi	r24, 0x20	; 32
     e3e:	90 70       	andi	r25, 0x00	; 0
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	b1 f0       	breq	.+44     	; 0xe70 <_gpib_write+0x332>
			assign_bit(DDRA, PORTA, PA5);
     e44:	ab e3       	ldi	r26, 0x3B	; 59
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	eb e3       	ldi	r30, 0x3B	; 59
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 7d       	andi	r24, 0xDF	; 223
     e50:	8c 93       	st	X, r24
     e52:	aa e3       	ldi	r26, 0x3A	; 58
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ea e3       	ldi	r30, 0x3A	; 58
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 62       	ori	r24, 0x20	; 32
     e5e:	8c 93       	st	X, r24
     e60:	ab e3       	ldi	r26, 0x3B	; 59
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	eb e3       	ldi	r30, 0x3B	; 59
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8f 7d       	andi	r24, 0xDF	; 223
     e6c:	8c 93       	st	X, r24
     e6e:	0e c0       	rjmp	.+28     	; 0xe8c <_gpib_write+0x34e>
		} else {
			release_bit(DDRA, PORTA, PA5);
     e70:	aa e3       	ldi	r26, 0x3A	; 58
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	ea e3       	ldi	r30, 0x3A	; 58
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	8f 7d       	andi	r24, 0xDF	; 223
     e7c:	8c 93       	st	X, r24
     e7e:	ab e3       	ldi	r26, 0x3B	; 59
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	eb e3       	ldi	r30, 0x3B	; 59
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	80 62       	ori	r24, 0x20	; 32
     e8a:	8c 93       	st	X, r24
		}

		if (c & 0x40) {
     e8c:	8d 81       	ldd	r24, Y+5	; 0x05
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	80 74       	andi	r24, 0x40	; 64
     e94:	90 70       	andi	r25, 0x00	; 0
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	b1 f0       	breq	.+44     	; 0xec6 <_gpib_write+0x388>
			assign_bit(DDRA, PORTA, PA6);
     e9a:	ab e3       	ldi	r26, 0x3B	; 59
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	eb e3       	ldi	r30, 0x3B	; 59
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	8f 7b       	andi	r24, 0xBF	; 191
     ea6:	8c 93       	st	X, r24
     ea8:	aa e3       	ldi	r26, 0x3A	; 58
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	ea e3       	ldi	r30, 0x3A	; 58
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 64       	ori	r24, 0x40	; 64
     eb4:	8c 93       	st	X, r24
     eb6:	ab e3       	ldi	r26, 0x3B	; 59
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	eb e3       	ldi	r30, 0x3B	; 59
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	8f 7b       	andi	r24, 0xBF	; 191
     ec2:	8c 93       	st	X, r24
     ec4:	0e c0       	rjmp	.+28     	; 0xee2 <_gpib_write+0x3a4>
		} else {
			release_bit(DDRA, PORTA, PA6);
     ec6:	aa e3       	ldi	r26, 0x3A	; 58
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	ea e3       	ldi	r30, 0x3A	; 58
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	8f 7b       	andi	r24, 0xBF	; 191
     ed2:	8c 93       	st	X, r24
     ed4:	ab e3       	ldi	r26, 0x3B	; 59
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	eb e3       	ldi	r30, 0x3B	; 59
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	80 64       	ori	r24, 0x40	; 64
     ee0:	8c 93       	st	X, r24
		}

		if (c & 0x80) {
     ee2:	8d 81       	ldd	r24, Y+5	; 0x05
     ee4:	88 23       	and	r24, r24
     ee6:	b4 f4       	brge	.+44     	; 0xf14 <_gpib_write+0x3d6>
			assign_bit(DDRA, PORTA, PA7);
     ee8:	ab e3       	ldi	r26, 0x3B	; 59
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	eb e3       	ldi	r30, 0x3B	; 59
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	8f 77       	andi	r24, 0x7F	; 127
     ef4:	8c 93       	st	X, r24
     ef6:	aa e3       	ldi	r26, 0x3A	; 58
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	ea e3       	ldi	r30, 0x3A	; 58
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	80 68       	ori	r24, 0x80	; 128
     f02:	8c 93       	st	X, r24
     f04:	ab e3       	ldi	r26, 0x3B	; 59
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	eb e3       	ldi	r30, 0x3B	; 59
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	8f 77       	andi	r24, 0x7F	; 127
     f10:	8c 93       	st	X, r24
     f12:	0e c0       	rjmp	.+28     	; 0xf30 <_gpib_write+0x3f2>
		} else {
			release_bit(DDRA, PORTA, PA7);
     f14:	aa e3       	ldi	r26, 0x3A	; 58
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ea e3       	ldi	r30, 0x3A	; 58
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8f 77       	andi	r24, 0x7F	; 127
     f20:	8c 93       	st	X, r24
     f22:	ab e3       	ldi	r26, 0x3B	; 59
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	eb e3       	ldi	r30, 0x3B	; 59
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	80 68       	ori	r24, 0x80	; 128
     f2e:	8c 93       	st	X, r24
		}

		// wait until listeners release NRFD
		//uart_puts("1");
		release_bit(DDRD, PORTD, G_NRFD);
     f30:	a1 e3       	ldi	r26, 0x31	; 49
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e1 e3       	ldi	r30, 0x31	; 49
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	87 7f       	andi	r24, 0xF7	; 247
     f3c:	8c 93       	st	X, r24
     f3e:	a2 e3       	ldi	r26, 0x32	; 50
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e2 e3       	ldi	r30, 0x32	; 50
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	88 60       	ori	r24, 0x08	; 8
     f4a:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
		//gpib_info();
		timeout = s + 5;
     f4c:	80 91 85 05 	lds	r24, 0x0585
     f50:	88 2f       	mov	r24, r24
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	05 96       	adiw	r24, 0x05	; 5
     f56:	9a 83       	std	Y+2, r25	; 0x02
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	10 c0       	rjmp	.+32     	; 0xf7c <_gpib_write+0x43e>
		while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
			if (s == timeout) {
     f5c:	80 91 85 05 	lds	r24, 0x0585
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	28 17       	cp	r18, r24
     f6a:	39 07       	cpc	r19, r25
     f6c:	39 f4       	brne	.+14     	; 0xf7c <_gpib_write+0x43e>
				uart_puts("\n\rError: NRFD timeout\n\r");
     f6e:	8e ea       	ldi	r24, 0xAE	; 174
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
				return 0xff;
     f76:	8f ef       	ldi	r24, 0xFF	; 255
     f78:	8b 87       	std	Y+11, r24	; 0x0b
     f7a:	92 c0       	rjmp	.+292    	; 0x10a0 <_gpib_write+0x562>
		//uart_puts("1");
		release_bit(DDRD, PORTD, G_NRFD);
#ifdef WITH_TIMEOUT
		//gpib_info();
		timeout = s + 5;
		while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
     f7c:	e0 e3       	ldi	r30, 0x30	; 48
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	88 70       	andi	r24, 0x08	; 8
     f88:	90 70       	andi	r25, 0x00	; 0
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	49 f4       	brne	.+18     	; 0xfa0 <_gpib_write+0x462>
     f8e:	80 91 85 05 	lds	r24, 0x0585
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	9a 81       	ldd	r25, Y+2	; 0x02
     f9a:	82 17       	cp	r24, r18
     f9c:	93 07       	cpc	r25, r19
     f9e:	f4 f6       	brge	.-68     	; 0xf5c <_gpib_write+0x41e>
#else
		loop_until_bit_is_set(PIND,G_NRFD);
#endif

		// assign EOI during transmission of only last byte
		if ((i == length - 1) && !attention) {
     fa0:	88 85       	ldd	r24, Y+8	; 0x08
     fa2:	99 85       	ldd	r25, Y+9	; 0x09
     fa4:	9c 01       	movw	r18, r24
     fa6:	21 50       	subi	r18, 0x01	; 1
     fa8:	30 40       	sbci	r19, 0x00	; 0
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	9c 81       	ldd	r25, Y+4	; 0x04
     fae:	28 17       	cp	r18, r24
     fb0:	39 07       	cpc	r19, r25
     fb2:	c1 f4       	brne	.+48     	; 0xfe4 <_gpib_write+0x4a6>
     fb4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb6:	88 23       	and	r24, r24
     fb8:	a9 f4       	brne	.+42     	; 0xfe4 <_gpib_write+0x4a6>
			//uart_puts("\n\rE\n\r");
			assign_bit(DDRD, PORTD, G_EOI);
     fba:	a2 e3       	ldi	r26, 0x32	; 50
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e2 e3       	ldi	r30, 0x32	; 50
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8f 7e       	andi	r24, 0xEF	; 239
     fc6:	8c 93       	st	X, r24
     fc8:	a1 e3       	ldi	r26, 0x31	; 49
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e1 e3       	ldi	r30, 0x31	; 49
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	80 61       	ori	r24, 0x10	; 16
     fd4:	8c 93       	st	X, r24
     fd6:	a2 e3       	ldi	r26, 0x32	; 50
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e2 e3       	ldi	r30, 0x32	; 50
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	8f 7e       	andi	r24, 0xEF	; 239
     fe2:	8c 93       	st	X, r24
		}

		// assign DAV, data valid for listeners
		assign_bit(DDRD, PORTD, G_DAV);
     fe4:	a2 e3       	ldi	r26, 0x32	; 50
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e2 e3       	ldi	r30, 0x32	; 50
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8b 7f       	andi	r24, 0xFB	; 251
     ff0:	8c 93       	st	X, r24
     ff2:	a1 e3       	ldi	r26, 0x31	; 49
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e1 e3       	ldi	r30, 0x31	; 49
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	84 60       	ori	r24, 0x04	; 4
     ffe:	8c 93       	st	X, r24
    1000:	a2 e3       	ldi	r26, 0x32	; 50
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e2 e3       	ldi	r30, 0x32	; 50
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8b 7f       	andi	r24, 0xFB	; 251
    100c:	8c 93       	st	X, r24

		// wait for NDAC release
		//uart_puts("2");
		release_bit(DDRD, PORTD, G_NDAC);
    100e:	a1 e3       	ldi	r26, 0x31	; 49
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e1 e3       	ldi	r30, 0x31	; 49
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	8f 7d       	andi	r24, 0xDF	; 223
    101a:	8c 93       	st	X, r24
    101c:	a2 e3       	ldi	r26, 0x32	; 50
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e2 e3       	ldi	r30, 0x32	; 50
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	80 62       	ori	r24, 0x20	; 32
    1028:	8c 93       	st	X, r24
		loop_until_bit_is_set(PIND, G_NDAC);
    102a:	e0 e3       	ldi	r30, 0x30	; 48
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	80 72       	andi	r24, 0x20	; 32
    1036:	90 70       	andi	r25, 0x00	; 0
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	b9 f3       	breq	.-18     	; 0x102a <_gpib_write+0x4ec>

		// release DAV, data not valid anymore
		release_bit(DDRD, PORTD, G_DAV);
    103c:	a1 e3       	ldi	r26, 0x31	; 49
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e1 e3       	ldi	r30, 0x31	; 49
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	8b 7f       	andi	r24, 0xFB	; 251
    1048:	8c 93       	st	X, r24
    104a:	a2 e3       	ldi	r26, 0x32	; 50
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e2 e3       	ldi	r30, 0x32	; 50
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	84 60       	ori	r24, 0x04	; 4
    1056:	8c 93       	st	X, r24

		// reset Port to all input
		DDRA = 0x00;
    1058:	ea e3       	ldi	r30, 0x3A	; 58
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	10 82       	st	Z, r1
	release_bit(DDRD, PORTD, G_NRFD);

	// bytes[0] = 'a'
	// bytes[1] = 'b'
	// length = 2
	for (i = 0; i < length; i++) {
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	9c 81       	ldd	r25, Y+4	; 0x04
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	9c 83       	std	Y+4, r25	; 0x04
    1066:	8b 83       	std	Y+3, r24	; 0x03
    1068:	2b 81       	ldd	r18, Y+3	; 0x03
    106a:	3c 81       	ldd	r19, Y+4	; 0x04
    106c:	88 85       	ldd	r24, Y+8	; 0x08
    106e:	99 85       	ldd	r25, Y+9	; 0x09
    1070:	28 17       	cp	r18, r24
    1072:	39 07       	cpc	r19, r25
    1074:	0c f4       	brge	.+2      	; 0x1078 <_gpib_write+0x53a>
    1076:	c4 cd       	rjmp	.-1144   	; 0xc00 <_gpib_write+0xc2>
		DDRA = 0x00;

		//uart_puts("3\r\n");
	}

	if (attention) {
    1078:	8a 85       	ldd	r24, Y+10	; 0x0a
    107a:	88 23       	and	r24, r24
    107c:	71 f0       	breq	.+28     	; 0x109a <_gpib_write+0x55c>
		// assign ATN for commands
		release_bit(DDRD, PORTD, G_ATN);
    107e:	a1 e3       	ldi	r26, 0x31	; 49
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e1 e3       	ldi	r30, 0x31	; 49
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	8f 77       	andi	r24, 0x7F	; 127
    108a:	8c 93       	st	X, r24
    108c:	a2 e3       	ldi	r26, 0x32	; 50
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e2 e3       	ldi	r30, 0x32	; 50
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	80 68       	ori	r24, 0x80	; 128
    1098:	8c 93       	st	X, r24
	}

	// clear talk state.Controller does not talk anymore.
	controller.talks = 0;
    109a:	10 92 7d 04 	sts	0x047D, r1

	return 0x00;
    109e:	1b 86       	std	Y+11, r1	; 0x0b
    10a0:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    10a2:	2b 96       	adiw	r28, 0x0b	; 11
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <gpib_info>:

/**
 * print some useful info about bus state (for example value of handshake pins)
 */
void gpib_info(void) {
    10b4:	af 92       	push	r10
    10b6:	bf 92       	push	r11
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	2a 97       	sbiw	r28, 0x0a	; 10
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
	uchar dav, nrfd, ndac, eoi, atn, srq, ifc, ren;
	extern uchar buf[80];

	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    10d8:	0e 94 a6 0a 	call	0x154c	; 0x154c <gpib_get_partner_pad>
    10dc:	08 2f       	mov	r16, r24
    10de:	10 e0       	ldi	r17, 0x00	; 0
    10e0:	0e 94 af 0a 	call	0x155e	; 0x155e <gpib_get_partner_sad>
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	8d b7       	in	r24, 0x3d	; 61
    10ea:	9e b7       	in	r25, 0x3e	; 62
    10ec:	08 97       	sbiw	r24, 0x08	; 8
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	9e bf       	out	0x3e, r25	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	8d bf       	out	0x3d, r24	; 61
    10f8:	ed b7       	in	r30, 0x3d	; 61
    10fa:	fe b7       	in	r31, 0x3e	; 62
    10fc:	31 96       	adiw	r30, 0x01	; 1
    10fe:	84 e3       	ldi	r24, 0x34	; 52
    1100:	95 e0       	ldi	r25, 0x05	; 5
    1102:	91 83       	std	Z+1, r25	; 0x01
    1104:	80 83       	st	Z, r24
    1106:	86 ec       	ldi	r24, 0xC6	; 198
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	93 83       	std	Z+3, r25	; 0x03
    110c:	82 83       	std	Z+2, r24	; 0x02
    110e:	15 83       	std	Z+5, r17	; 0x05
    1110:	04 83       	std	Z+4, r16	; 0x04
    1112:	37 83       	std	Z+7, r19	; 0x07
    1114:	26 83       	std	Z+6, r18	; 0x06
    1116:	0e 94 ac 00 	call	0x158	; 0x158 <sprintf>
    111a:	8d b7       	in	r24, 0x3d	; 61
    111c:	9e b7       	in	r25, 0x3e	; 62
    111e:	08 96       	adiw	r24, 0x08	; 8
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	9e bf       	out	0x3e, r25	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	8d bf       	out	0x3d, r24	; 61
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);
    112a:	84 e3       	ldi	r24, 0x34	; 52
    112c:	95 e0       	ldi	r25, 0x05	; 5
    112e:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>

	sprintf(buf, "Partner list\n\r");
    1132:	84 e3       	ldi	r24, 0x34	; 52
    1134:	95 e0       	ldi	r25, 0x05	; 5
    1136:	24 ef       	ldi	r18, 0xF4	; 244
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	b9 01       	movw	r22, r18
    113c:	4f e0       	ldi	r20, 0x0F	; 15
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	0e 94 87 00 	call	0x10e	; 0x10e <memcpy>
	uart_puts(buf);
    1144:	84 e3       	ldi	r24, 0x34	; 52
    1146:	95 e0       	ldi	r25, 0x05	; 5
    1148:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
	for (int i = 0; i < MAX_PARTNER; i++) {
    114c:	1a 82       	std	Y+2, r1	; 0x02
    114e:	19 82       	std	Y+1, r1	; 0x01
    1150:	45 c0       	rjmp	.+138    	; 0x11dc <gpib_info+0x128>
		if (controller.partners[i].primary != ADDRESS_NOT_SET) {
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	fc 01       	movw	r30, r24
    115c:	e1 58       	subi	r30, 0x81	; 129
    115e:	fb 4f       	sbci	r31, 0xFB	; 251
    1160:	80 81       	ld	r24, Z
    1162:	8f 3f       	cpi	r24, 0xFF	; 255
    1164:	b1 f1       	breq	.+108    	; 0x11d2 <gpib_info+0x11e>
			sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	9a 81       	ldd	r25, Y+2	; 0x02
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	fc 01       	movw	r30, r24
    1170:	e1 58       	subi	r30, 0x81	; 129
    1172:	fb 4f       	sbci	r31, 0xFB	; 251
    1174:	80 81       	ld	r24, Z
    1176:	48 2f       	mov	r20, r24
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	9a 81       	ldd	r25, Y+2	; 0x02
    117e:	03 96       	adiw	r24, 0x03	; 3
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	fc 01       	movw	r30, r24
    1186:	e6 58       	subi	r30, 0x86	; 134
    1188:	fb 4f       	sbci	r31, 0xFB	; 251
    118a:	80 81       	ld	r24, Z
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	8d b7       	in	r24, 0x3d	; 61
    1192:	9e b7       	in	r25, 0x3e	; 62
    1194:	08 97       	sbiw	r24, 0x08	; 8
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	9e bf       	out	0x3e, r25	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	8d bf       	out	0x3d, r24	; 61
    11a0:	ed b7       	in	r30, 0x3d	; 61
    11a2:	fe b7       	in	r31, 0x3e	; 62
    11a4:	31 96       	adiw	r30, 0x01	; 1
    11a6:	84 e3       	ldi	r24, 0x34	; 52
    11a8:	95 e0       	ldi	r25, 0x05	; 5
    11aa:	91 83       	std	Z+1, r25	; 0x01
    11ac:	80 83       	st	Z, r24
    11ae:	86 ec       	ldi	r24, 0xC6	; 198
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	93 83       	std	Z+3, r25	; 0x03
    11b4:	82 83       	std	Z+2, r24	; 0x02
    11b6:	55 83       	std	Z+5, r21	; 0x05
    11b8:	44 83       	std	Z+4, r20	; 0x04
    11ba:	37 83       	std	Z+7, r19	; 0x07
    11bc:	26 83       	std	Z+6, r18	; 0x06
    11be:	0e 94 ac 00 	call	0x158	; 0x158 <sprintf>
    11c2:	8d b7       	in	r24, 0x3d	; 61
    11c4:	9e b7       	in	r25, 0x3e	; 62
    11c6:	08 96       	adiw	r24, 0x08	; 8
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	9e bf       	out	0x3e, r25	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	8d bf       	out	0x3d, r24	; 61
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);

	sprintf(buf, "Partner list\n\r");
	uart_puts(buf);
	for (int i = 0; i < MAX_PARTNER; i++) {
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	9a 81       	ldd	r25, Y+2	; 0x02
    11e0:	85 30       	cpi	r24, 0x05	; 5
    11e2:	91 05       	cpc	r25, r1
    11e4:	0c f4       	brge	.+2      	; 0x11e8 <gpib_info+0x134>
    11e6:	b5 cf       	rjmp	.-150    	; 0x1152 <gpib_info+0x9e>
					controller.partners[i].primary,
					controller.partners[i].secondary);
		}
	}

	dav = bit_is_set(PIND, G_DAV);
    11e8:	e0 e3       	ldi	r30, 0x30	; 48
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	84 70       	andi	r24, 0x04	; 4
    11f0:	8a 87       	std	Y+10, r24	; 0x0a
	nrfd = bit_is_set(PIND, G_NRFD);
    11f2:	e0 e3       	ldi	r30, 0x30	; 48
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	88 70       	andi	r24, 0x08	; 8
    11fa:	89 87       	std	Y+9, r24	; 0x09
	ndac = bit_is_set(PIND, G_NDAC);
    11fc:	e0 e3       	ldi	r30, 0x30	; 48
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	80 72       	andi	r24, 0x20	; 32
    1204:	88 87       	std	Y+8, r24	; 0x08
	eoi = bit_is_set(PIND, G_EOI);
    1206:	e0 e3       	ldi	r30, 0x30	; 48
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	80 71       	andi	r24, 0x10	; 16
    120e:	8f 83       	std	Y+7, r24	; 0x07
	atn = bit_is_set(PIND, G_ATN);
    1210:	e0 e3       	ldi	r30, 0x30	; 48
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	80 78       	andi	r24, 0x80	; 128
    1218:	8e 83       	std	Y+6, r24	; 0x06
	srq = bit_is_set(PIND, G_SRQ);
    121a:	e0 e3       	ldi	r30, 0x30	; 48
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	80 74       	andi	r24, 0x40	; 64
    1222:	8d 83       	std	Y+5, r24	; 0x05
	ifc = bit_is_set(PINB, G_IFC);
    1224:	e6 e3       	ldi	r30, 0x36	; 54
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	81 70       	andi	r24, 0x01	; 1
    122c:	8c 83       	std	Y+4, r24	; 0x04
	ren = bit_is_set(PINB, G_REN);
    122e:	e6 e3       	ldi	r30, 0x36	; 54
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	82 70       	andi	r24, 0x02	; 2
    1236:	8b 83       	std	Y+3, r24	; 0x03
	//d = PINA;
	//di = d ^ 0xff;
	if (dav == 0x00)
    1238:	8a 85       	ldd	r24, Y+10	; 0x0a
    123a:	88 23       	and	r24, r24
    123c:	19 f4       	brne	.+6      	; 0x1244 <gpib_info+0x190>
		dav = '0';
    123e:	80 e3       	ldi	r24, 0x30	; 48
    1240:	8a 87       	std	Y+10, r24	; 0x0a
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <gpib_info+0x194>
	else
		dav = '1';
    1244:	81 e3       	ldi	r24, 0x31	; 49
    1246:	8a 87       	std	Y+10, r24	; 0x0a
	if (nrfd == 0x00)
    1248:	89 85       	ldd	r24, Y+9	; 0x09
    124a:	88 23       	and	r24, r24
    124c:	19 f4       	brne	.+6      	; 0x1254 <gpib_info+0x1a0>
		nrfd = '0';
    124e:	80 e3       	ldi	r24, 0x30	; 48
    1250:	89 87       	std	Y+9, r24	; 0x09
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <gpib_info+0x1a4>
	else
		nrfd = '1';
    1254:	81 e3       	ldi	r24, 0x31	; 49
    1256:	89 87       	std	Y+9, r24	; 0x09
	if (ndac == 0x00)
    1258:	88 85       	ldd	r24, Y+8	; 0x08
    125a:	88 23       	and	r24, r24
    125c:	19 f4       	brne	.+6      	; 0x1264 <gpib_info+0x1b0>
		ndac = '0';
    125e:	80 e3       	ldi	r24, 0x30	; 48
    1260:	88 87       	std	Y+8, r24	; 0x08
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <gpib_info+0x1b4>
	else
		ndac = '1';
    1264:	81 e3       	ldi	r24, 0x31	; 49
    1266:	88 87       	std	Y+8, r24	; 0x08
	if (eoi == 0x00)
    1268:	8f 81       	ldd	r24, Y+7	; 0x07
    126a:	88 23       	and	r24, r24
    126c:	19 f4       	brne	.+6      	; 0x1274 <gpib_info+0x1c0>
		eoi = '0';
    126e:	80 e3       	ldi	r24, 0x30	; 48
    1270:	8f 83       	std	Y+7, r24	; 0x07
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <gpib_info+0x1c4>
	else
		eoi = '1';
    1274:	81 e3       	ldi	r24, 0x31	; 49
    1276:	8f 83       	std	Y+7, r24	; 0x07
	if (atn == 0x00)
    1278:	8e 81       	ldd	r24, Y+6	; 0x06
    127a:	88 23       	and	r24, r24
    127c:	19 f4       	brne	.+6      	; 0x1284 <gpib_info+0x1d0>
		atn = '0';
    127e:	80 e3       	ldi	r24, 0x30	; 48
    1280:	8e 83       	std	Y+6, r24	; 0x06
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <gpib_info+0x1d4>
	else
		atn = '1';
    1284:	81 e3       	ldi	r24, 0x31	; 49
    1286:	8e 83       	std	Y+6, r24	; 0x06
	if (srq == 0x00)
    1288:	8d 81       	ldd	r24, Y+5	; 0x05
    128a:	88 23       	and	r24, r24
    128c:	19 f4       	brne	.+6      	; 0x1294 <gpib_info+0x1e0>
		srq = '0';
    128e:	80 e3       	ldi	r24, 0x30	; 48
    1290:	8d 83       	std	Y+5, r24	; 0x05
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <gpib_info+0x1e4>
	else
		srq = '1';
    1294:	81 e3       	ldi	r24, 0x31	; 49
    1296:	8d 83       	std	Y+5, r24	; 0x05
	if (ifc == 0x00)
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
    129a:	88 23       	and	r24, r24
    129c:	19 f4       	brne	.+6      	; 0x12a4 <gpib_info+0x1f0>
		ifc = '0';
    129e:	80 e3       	ldi	r24, 0x30	; 48
    12a0:	8c 83       	std	Y+4, r24	; 0x04
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <gpib_info+0x1f4>
	else
		ifc = '1';
    12a4:	81 e3       	ldi	r24, 0x31	; 49
    12a6:	8c 83       	std	Y+4, r24	; 0x04
	if (ren == 0x00)
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	88 23       	and	r24, r24
    12ac:	19 f4       	brne	.+6      	; 0x12b4 <gpib_info+0x200>
		ren = '0';
    12ae:	80 e3       	ldi	r24, 0x30	; 48
    12b0:	8b 83       	std	Y+3, r24	; 0x03
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <gpib_info+0x204>
	else
		ren = '1';
    12b4:	81 e3       	ldi	r24, 0x31	; 49
    12b6:	8b 83       	std	Y+3, r24	; 0x03

	sprintf(buf,
    12b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ba:	a8 2e       	mov	r10, r24
    12bc:	bb 24       	eor	r11, r11
    12be:	89 85       	ldd	r24, Y+9	; 0x09
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	88 85       	ldd	r24, Y+8	; 0x08
    12c6:	48 2f       	mov	r20, r24
    12c8:	50 e0       	ldi	r21, 0x00	; 0
    12ca:	8f 81       	ldd	r24, Y+7	; 0x07
    12cc:	68 2f       	mov	r22, r24
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	a8 2f       	mov	r26, r24
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	08 2f       	mov	r16, r24
    12da:	10 e0       	ldi	r17, 0x00	; 0
    12dc:	8e 81       	ldd	r24, Y+6	; 0x06
    12de:	e8 2e       	mov	r14, r24
    12e0:	ff 24       	eor	r15, r15
    12e2:	8d 81       	ldd	r24, Y+5	; 0x05
    12e4:	c8 2e       	mov	r12, r24
    12e6:	dd 24       	eor	r13, r13
    12e8:	8d b7       	in	r24, 0x3d	; 61
    12ea:	9e b7       	in	r25, 0x3e	; 62
    12ec:	44 97       	sbiw	r24, 0x14	; 20
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	9e bf       	out	0x3e, r25	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	8d bf       	out	0x3d, r24	; 61
    12f8:	ed b7       	in	r30, 0x3d	; 61
    12fa:	fe b7       	in	r31, 0x3e	; 62
    12fc:	31 96       	adiw	r30, 0x01	; 1
    12fe:	84 e3       	ldi	r24, 0x34	; 52
    1300:	95 e0       	ldi	r25, 0x05	; 5
    1302:	91 83       	std	Z+1, r25	; 0x01
    1304:	80 83       	st	Z, r24
    1306:	83 e0       	ldi	r24, 0x03	; 3
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	93 83       	std	Z+3, r25	; 0x03
    130c:	82 83       	std	Z+2, r24	; 0x02
    130e:	b5 82       	std	Z+5, r11	; 0x05
    1310:	a4 82       	std	Z+4, r10	; 0x04
    1312:	37 83       	std	Z+7, r19	; 0x07
    1314:	26 83       	std	Z+6, r18	; 0x06
    1316:	51 87       	std	Z+9, r21	; 0x09
    1318:	40 87       	std	Z+8, r20	; 0x08
    131a:	73 87       	std	Z+11, r23	; 0x0b
    131c:	62 87       	std	Z+10, r22	; 0x0a
    131e:	b5 87       	std	Z+13, r27	; 0x0d
    1320:	a4 87       	std	Z+12, r26	; 0x0c
    1322:	17 87       	std	Z+15, r17	; 0x0f
    1324:	06 87       	std	Z+14, r16	; 0x0e
    1326:	f1 8a       	std	Z+17, r15	; 0x11
    1328:	e0 8a       	std	Z+16, r14	; 0x10
    132a:	d3 8a       	std	Z+19, r13	; 0x13
    132c:	c2 8a       	std	Z+18, r12	; 0x12
    132e:	0e 94 ac 00 	call	0x158	; 0x158 <sprintf>
    1332:	8d b7       	in	r24, 0x3d	; 61
    1334:	9e b7       	in	r25, 0x3e	; 62
    1336:	44 96       	adiw	r24, 0x14	; 20
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	9e bf       	out	0x3e, r25	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	8d bf       	out	0x3d, r24	; 61
			"dav=%c,nrfd=%c,ndac=%c, eoi=%c, ifc=%c,ren=%c,atn=%c,srq=%c\n\r",
			dav, nrfd, ndac, eoi, ifc, ren, atn, srq);
	uart_puts(buf);
    1342:	84 e3       	ldi	r24, 0x34	; 52
    1344:	95 e0       	ldi	r25, 0x05	; 5
    1346:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
}
    134a:	2a 96       	adiw	r28, 0x0a	; 10
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	ff 90       	pop	r15
    1360:	ef 90       	pop	r14
    1362:	df 90       	pop	r13
    1364:	cf 90       	pop	r12
    1366:	bf 90       	pop	r11
    1368:	af 90       	pop	r10
    136a:	08 95       	ret

0000136c <gpib_serial_poll>:
/**
 * execute serial polling
 *
 * We return the physical address of the device that created the SRQ.
 */
uchar gpib_serial_poll(void) {
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	27 97       	sbiw	r28, 0x07	; 7
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
	uchar b, e;
	uchar address = 0, found = 0, foundPhysical = 0;
    1380:	1d 82       	std	Y+5, r1	; 0x05
    1382:	1c 82       	std	Y+4, r1	; 0x04
    1384:	1b 82       	std	Y+3, r1	; 0x03
	int i;

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	cmd_buf[0] = G_CMD_UNT;
    1386:	8f e5       	ldi	r24, 0x5F	; 95
    1388:	80 93 d0 04 	sts	0x04D0, r24
	gpib_cmd(cmd_buf, 1);
    138c:	80 ed       	ldi	r24, 0xD0	; 208
    138e:	94 e0       	ldi	r25, 0x04	; 4
    1390:	61 e0       	ldi	r22, 0x01	; 1
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>
	cmd_buf[0] = G_CMD_UNL;
    1398:	8f e3       	ldi	r24, 0x3F	; 63
    139a:	80 93 d0 04 	sts	0x04D0, r24
	gpib_cmd(cmd_buf, 1);
    139e:	80 ed       	ldi	r24, 0xD0	; 208
    13a0:	94 e0       	ldi	r25, 0x04	; 4
    13a2:	61 e0       	ldi	r22, 0x01	; 1
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>

	// serial poll enable
	// effect: all devices will send status byte instead of normal data when addressed
	// as talker
	//uart_puts("before SPE\r\n");
	cmd_buf[0] = G_CMD_SPE;
    13aa:	88 e1       	ldi	r24, 0x18	; 24
    13ac:	80 93 d0 04 	sts	0x04D0, r24
	gpib_cmd(cmd_buf, 1);
    13b0:	80 ed       	ldi	r24, 0xD0	; 208
    13b2:	94 e0       	ldi	r25, 0x04	; 4
    13b4:	61 e0       	ldi	r22, 0x01	; 1
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != 0x00) && !found; i++) {
    13bc:	1a 82       	std	Y+2, r1	; 0x02
    13be:	19 82       	std	Y+1, r1	; 0x01
    13c0:	8a c0       	rjmp	.+276    	; 0x14d6 <gpib_serial_poll+0x16a>

		// set partner to talker mode
		address = address2TalkerAddress(controller.partners[i].primary);
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	9a 81       	ldd	r25, Y+2	; 0x02
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	fc 01       	movw	r30, r24
    13cc:	e1 58       	subi	r30, 0x81	; 129
    13ce:	fb 4f       	sbci	r31, 0xFB	; 251
    13d0:	80 81       	ld	r24, Z
    13d2:	80 5c       	subi	r24, 0xC0	; 192
    13d4:	8d 83       	std	Y+5, r24	; 0x05
		// TODO: handle secondary address
		cmd_buf[0] = address;
    13d6:	8d 81       	ldd	r24, Y+5	; 0x05
    13d8:	80 93 d0 04 	sts	0x04D0, r24
		//uart_puts("before talker address write\r\n");
		gpib_cmd(cmd_buf, 1);
    13dc:	80 ed       	ldi	r24, 0xD0	; 208
    13de:	94 e0       	ldi	r25, 0x04	; 4
    13e0:	61 e0       	ldi	r22, 0x01	; 1
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>
		//uart_puts("after talker address write\r\n");

		// now receive data
		//uart_puts("before status byte receive\r\n");
		e = gpib_receive(&b);
    13e8:	ce 01       	movw	r24, r28
    13ea:	07 96       	adiw	r24, 0x07	; 7
    13ec:	0e 94 db 03 	call	0x7b6	; 0x7b6 <gpib_receive>
    13f0:	8e 83       	std	Y+6, r24	; 0x06
		//uart_puts("after status byte receive\r\n");
		// status byte is now in b
		sprintf((char*) cmd_buf,
    13f2:	8d 81       	ldd	r24, Y+5	; 0x05
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	9c 01       	movw	r18, r24
    13fa:	20 54       	subi	r18, 0x40	; 64
    13fc:	30 40       	sbci	r19, 0x00	; 0
    13fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1400:	48 2f       	mov	r20, r24
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	8d b7       	in	r24, 0x3d	; 61
    1406:	9e b7       	in	r25, 0x3e	; 62
    1408:	08 97       	sbiw	r24, 0x08	; 8
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	9e bf       	out	0x3e, r25	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	8d bf       	out	0x3d, r24	; 61
    1414:	ed b7       	in	r30, 0x3d	; 61
    1416:	fe b7       	in	r31, 0x3e	; 62
    1418:	31 96       	adiw	r30, 0x01	; 1
    141a:	80 ed       	ldi	r24, 0xD0	; 208
    141c:	94 e0       	ldi	r25, 0x04	; 4
    141e:	91 83       	std	Z+1, r25	; 0x01
    1420:	80 83       	st	Z, r24
    1422:	81 e4       	ldi	r24, 0x41	; 65
    1424:	91 e0       	ldi	r25, 0x01	; 1
    1426:	93 83       	std	Z+3, r25	; 0x03
    1428:	82 83       	std	Z+2, r24	; 0x02
    142a:	35 83       	std	Z+5, r19	; 0x05
    142c:	24 83       	std	Z+4, r18	; 0x04
    142e:	57 83       	std	Z+7, r21	; 0x07
    1430:	46 83       	std	Z+6, r20	; 0x06
    1432:	0e 94 ac 00 	call	0x158	; 0x158 <sprintf>
    1436:	8d b7       	in	r24, 0x3d	; 61
    1438:	9e b7       	in	r25, 0x3e	; 62
    143a:	08 96       	adiw	r24, 0x08	; 8
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	9e bf       	out	0x3e, r25	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	8d bf       	out	0x3d, r24	; 61
				"Status byte from device 0x%02x (physical address) = 0x%02x\n\r",
				TalkerAddress2Address(address), b);
		uart_puts((char*) cmd_buf);
    1446:	80 ed       	ldi	r24, 0xD0	; 208
    1448:	94 e0       	ldi	r25, 0x04	; 4
    144a:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>

		// send UNT and UNL commands (unlisten and untalk)
		// effect: all talker stop talking and all listeners stop listening
		cmd_buf[0] = G_CMD_UNT;
    144e:	8f e5       	ldi	r24, 0x5F	; 95
    1450:	80 93 d0 04 	sts	0x04D0, r24
		gpib_cmd(cmd_buf, 1);
    1454:	80 ed       	ldi	r24, 0xD0	; 208
    1456:	94 e0       	ldi	r25, 0x04	; 4
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>
		cmd_buf[0] = G_CMD_UNL;
    1460:	8f e3       	ldi	r24, 0x3F	; 63
    1462:	80 93 d0 04 	sts	0x04D0, r24
		gpib_cmd(cmd_buf, 1);
    1466:	80 ed       	ldi	r24, 0xD0	; 208
    1468:	94 e0       	ldi	r25, 0x04	; 4
    146a:	61 e0       	ldi	r22, 0x01	; 1
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>

		if (b & (1 << 6)) {
    1472:	8f 81       	ldd	r24, Y+7	; 0x07
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	80 74       	andi	r24, 0x40	; 64
    147a:	90 70       	andi	r25, 0x00	; 0
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	31 f1       	breq	.+76     	; 0x14cc <gpib_serial_poll+0x160>
			found = address;
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	8c 83       	std	Y+4, r24	; 0x04
			foundPhysical = TalkerAddress2Address(found);
    1484:	8c 81       	ldd	r24, Y+4	; 0x04
    1486:	80 54       	subi	r24, 0x40	; 64
    1488:	8b 83       	std	Y+3, r24	; 0x03
			// bit 6 of status byte of SRQ emitter is 1
			// when reading status byte from emitter, he releases SRQ line (may also be tested here)
			sprintf((char*) cmd_buf,
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	00 d0       	rcall	.+0      	; 0x1492 <gpib_serial_poll+0x126>
    1492:	00 d0       	rcall	.+0      	; 0x1494 <gpib_serial_poll+0x128>
    1494:	00 d0       	rcall	.+0      	; 0x1496 <gpib_serial_poll+0x12a>
    1496:	ed b7       	in	r30, 0x3d	; 61
    1498:	fe b7       	in	r31, 0x3e	; 62
    149a:	31 96       	adiw	r30, 0x01	; 1
    149c:	80 ed       	ldi	r24, 0xD0	; 208
    149e:	94 e0       	ldi	r25, 0x04	; 4
    14a0:	91 83       	std	Z+1, r25	; 0x01
    14a2:	80 83       	st	Z, r24
    14a4:	8e e7       	ldi	r24, 0x7E	; 126
    14a6:	91 e0       	ldi	r25, 0x01	; 1
    14a8:	93 83       	std	Z+3, r25	; 0x03
    14aa:	82 83       	std	Z+2, r24	; 0x02
    14ac:	35 83       	std	Z+5, r19	; 0x05
    14ae:	24 83       	std	Z+4, r18	; 0x04
    14b0:	0e 94 ac 00 	call	0x158	; 0x158 <sprintf>
    14b4:	8d b7       	in	r24, 0x3d	; 61
    14b6:	9e b7       	in	r25, 0x3e	; 62
    14b8:	06 96       	adiw	r24, 0x06	; 6
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	9e bf       	out	0x3e, r25	; 62
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	8d bf       	out	0x3d, r24	; 61
					"SRQ emitter is device = 0x%02x (physical address)\n\r",
					foundPhysical);
			uart_puts((char*) cmd_buf);
    14c4:	80 ed       	ldi	r24, 0xD0	; 208
    14c6:	94 e0       	ldi	r25, 0x04	; 4
    14c8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
	cmd_buf[0] = G_CMD_SPE;
	gpib_cmd(cmd_buf, 1);
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != 0x00) && !found; i++) {
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	9a 81       	ldd	r25, Y+2	; 0x02
    14d0:	01 96       	adiw	r24, 0x01	; 1
    14d2:	9a 83       	std	Y+2, r25	; 0x02
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	9a 81       	ldd	r25, Y+2	; 0x02
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	fc 01       	movw	r30, r24
    14e0:	e1 58       	subi	r30, 0x81	; 129
    14e2:	fb 4f       	sbci	r31, 0xFB	; 251
    14e4:	80 81       	ld	r24, Z
    14e6:	88 23       	and	r24, r24
    14e8:	21 f0       	breq	.+8      	; 0x14f2 <gpib_serial_poll+0x186>
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	88 23       	and	r24, r24
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <gpib_serial_poll+0x186>
    14f0:	68 cf       	rjmp	.-304    	; 0x13c2 <gpib_serial_poll+0x56>
		}
	}

	// serial poll disable
	// effect: all devices will return to normal behaviour as talker
	cmd_buf[0] = G_CMD_SPD;
    14f2:	89 e1       	ldi	r24, 0x19	; 25
    14f4:	80 93 d0 04 	sts	0x04D0, r24
	//uart_puts("before SPD\r\n");
	gpib_cmd(cmd_buf, 1);
    14f8:	80 ed       	ldi	r24, 0xD0	; 208
    14fa:	94 e0       	ldi	r25, 0x04	; 4
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>
	//uart_puts("after SPD\r\n");

	// return SRQ emitter address if found
	return foundPhysical;
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1506:	27 96       	adiw	r28, 0x07	; 7
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <gpib_set_partner_pad>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_pad(uchar address) {
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	0f 92       	push	r0
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	89 83       	std	Y+1, r24	; 0x01
	controller.partner.primary = address;
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	80 93 7b 04 	sts	0x047B, r24
}
    152a:	0f 90       	pop	r0
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <gpib_set_partner_sad>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_sad(uchar address) {
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	0f 92       	push	r0
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	89 83       	std	Y+1, r24	; 0x01
	controller.partner.secondary = address;
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	80 93 7c 04 	sts	0x047C, r24
}
    1544:	0f 90       	pop	r0
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <gpib_get_partner_pad>:

/**
 * Get primary address of device currently controlled.
 * \returns primary address Address of device.
 */
uchar gpib_get_partner_pad(void) {
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.primary;
    1554:	80 91 7b 04 	lds	r24, 0x047B
}
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <gpib_get_partner_sad>:

/**
 * Get secondary address of device currently controlled.
 * \returns secondary address Address of device.
 */
uchar gpib_get_partner_sad(void) {
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.secondary;
    1566:	80 91 7c 04 	lds	r24, 0x047C
}
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <gpib_get_address>:

/**
 * Get controller address.
 * \returns address of controller.
 */
uchar gpib_get_address(void) {
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
	return controller.myaddress;
    1578:	80 91 7a 04 	lds	r24, 0x047A
}
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <gpib_clear_partners>:

void gpib_clear_partners() {
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	00 d0       	rcall	.+0      	; 0x1588 <gpib_clear_partners+0x6>
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < MAX_PARTNER; i++) {
    158c:	1a 82       	std	Y+2, r1	; 0x02
    158e:	19 82       	std	Y+1, r1	; 0x01
    1590:	0e c0       	rjmp	.+28     	; 0x15ae <gpib_clear_partners+0x2c>
		controller.partners[i].primary = ADDRESS_NOT_SET;
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	9a 81       	ldd	r25, Y+2	; 0x02
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	fc 01       	movw	r30, r24
    159c:	e1 58       	subi	r30, 0x81	; 129
    159e:	fb 4f       	sbci	r31, 0xFB	; 251
    15a0:	8f ef       	ldi	r24, 0xFF	; 255
    15a2:	80 83       	st	Z, r24
uchar gpib_get_address(void) {
	return controller.myaddress;
}

void gpib_clear_partners() {
	for (int i = 0; i < MAX_PARTNER; i++) {
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	9a 81       	ldd	r25, Y+2	; 0x02
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	9a 81       	ldd	r25, Y+2	; 0x02
    15b2:	85 30       	cpi	r24, 0x05	; 5
    15b4:	91 05       	cpc	r25, r1
    15b6:	6c f3       	brlt	.-38     	; 0x1592 <gpib_clear_partners+0x10>
		controller.partners[i].primary = ADDRESS_NOT_SET;
	}
}
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	08 95       	ret

000015c2 <gpib_set_flavour>:

void gpib_set_flavour(uchar flavour) {
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	0f 92       	push	r0
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	89 83       	std	Y+1, r24	; 0x01
	controller.flavour = flavour;
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	80 93 7e 04 	sts	0x047E, r24
}
    15d4:	0f 90       	pop	r0
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <gpib_get_flavour>:

uchar gpib_get_flavour(void) {
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
	return controller.flavour;
    15e4:	80 91 7e 04 	lds	r24, 0x047E
}
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <handle_internal_commands>:
int rs232_remote_echo = 1;

/**
 * Handles builtin commands.
 */
void handle_internal_commands(uchar *commandString) {
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	a5 97       	sbiw	r28, 0x25	; 37
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	9b a3       	std	Y+35, r25	; 0x23
    1604:	8a a3       	std	Y+34, r24	; 0x22
	uchar sbuf[32];
	uchar val;

	switch (buf[1]) {
    1606:	80 91 35 05 	lds	r24, 0x0535
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	3d a3       	std	Y+37, r19	; 0x25
    1610:	2c a3       	std	Y+36, r18	; 0x24
    1612:	8c a1       	ldd	r24, Y+36	; 0x24
    1614:	9d a1       	ldd	r25, Y+37	; 0x25
    1616:	88 36       	cpi	r24, 0x68	; 104
    1618:	91 05       	cpc	r25, r1
    161a:	09 f4       	brne	.+2      	; 0x161e <handle_internal_commands+0x30>
    161c:	cd c0       	rjmp	.+410    	; 0x17b8 <handle_internal_commands+0x1ca>
    161e:	2c a1       	ldd	r18, Y+36	; 0x24
    1620:	3d a1       	ldd	r19, Y+37	; 0x25
    1622:	29 36       	cpi	r18, 0x69	; 105
    1624:	31 05       	cpc	r19, r1
    1626:	94 f4       	brge	.+36     	; 0x164c <handle_internal_commands+0x5e>
    1628:	8c a1       	ldd	r24, Y+36	; 0x24
    162a:	9d a1       	ldd	r25, Y+37	; 0x25
    162c:	8d 32       	cpi	r24, 0x2D	; 45
    162e:	91 05       	cpc	r25, r1
    1630:	09 f4       	brne	.+2      	; 0x1634 <handle_internal_commands+0x46>
    1632:	98 c0       	rjmp	.+304    	; 0x1764 <handle_internal_commands+0x176>
    1634:	2c a1       	ldd	r18, Y+36	; 0x24
    1636:	3d a1       	ldd	r19, Y+37	; 0x25
    1638:	21 36       	cpi	r18, 0x61	; 97
    163a:	31 05       	cpc	r19, r1
    163c:	99 f0       	breq	.+38     	; 0x1664 <handle_internal_commands+0x76>
    163e:	8c a1       	ldd	r24, Y+36	; 0x24
    1640:	9d a1       	ldd	r25, Y+37	; 0x25
    1642:	8b 32       	cpi	r24, 0x2B	; 43
    1644:	91 05       	cpc	r25, r1
    1646:	09 f4       	brne	.+2      	; 0x164a <handle_internal_commands+0x5c>
    1648:	62 c0       	rjmp	.+196    	; 0x170e <handle_internal_commands+0x120>
    164a:	bc c0       	rjmp	.+376    	; 0x17c4 <handle_internal_commands+0x1d6>
    164c:	2c a1       	ldd	r18, Y+36	; 0x24
    164e:	3d a1       	ldd	r19, Y+37	; 0x25
    1650:	29 36       	cpi	r18, 0x69	; 105
    1652:	31 05       	cpc	r19, r1
    1654:	09 f4       	brne	.+2      	; 0x1658 <handle_internal_commands+0x6a>
    1656:	b3 c0       	rjmp	.+358    	; 0x17be <handle_internal_commands+0x1d0>
    1658:	8c a1       	ldd	r24, Y+36	; 0x24
    165a:	9d a1       	ldd	r25, Y+37	; 0x25
    165c:	83 37       	cpi	r24, 0x73	; 115
    165e:	91 05       	cpc	r25, r1
    1660:	61 f1       	breq	.+88     	; 0x16ba <handle_internal_commands+0xcc>
    1662:	b0 c0       	rjmp	.+352    	; 0x17c4 <handle_internal_commands+0x1d6>
	case 'a':
		/* set partner address */
		val = atoi((char*) (&(buf[2])));
    1664:	86 e3       	ldi	r24, 0x36	; 54
    1666:	95 e0       	ldi	r25, 0x05	; 5
    1668:	0e 94 69 00 	call	0xd2	; 0xd2 <atoi>
    166c:	89 83       	std	Y+1, r24	; 0x01
		sprintf(sbuf, "Set partner address to %u\n\r", val);
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	00 d0       	rcall	.+0      	; 0x1676 <handle_internal_commands+0x88>
    1676:	00 d0       	rcall	.+0      	; 0x1678 <handle_internal_commands+0x8a>
    1678:	00 d0       	rcall	.+0      	; 0x167a <handle_internal_commands+0x8c>
    167a:	ed b7       	in	r30, 0x3d	; 61
    167c:	fe b7       	in	r31, 0x3e	; 62
    167e:	31 96       	adiw	r30, 0x01	; 1
    1680:	ce 01       	movw	r24, r28
    1682:	02 96       	adiw	r24, 0x02	; 2
    1684:	91 83       	std	Z+1, r25	; 0x01
    1686:	80 83       	st	Z, r24
    1688:	82 eb       	ldi	r24, 0xB2	; 178
    168a:	91 e0       	ldi	r25, 0x01	; 1
    168c:	93 83       	std	Z+3, r25	; 0x03
    168e:	82 83       	std	Z+2, r24	; 0x02
    1690:	35 83       	std	Z+5, r19	; 0x05
    1692:	24 83       	std	Z+4, r18	; 0x04
    1694:	0e 94 ac 00 	call	0x158	; 0x158 <sprintf>
    1698:	2d b7       	in	r18, 0x3d	; 61
    169a:	3e b7       	in	r19, 0x3e	; 62
    169c:	2a 5f       	subi	r18, 0xFA	; 250
    169e:	3f 4f       	sbci	r19, 0xFF	; 255
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	3e bf       	out	0x3e, r19	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	2d bf       	out	0x3d, r18	; 61
		uart_puts(sbuf);
    16aa:	ce 01       	movw	r24, r28
    16ac:	02 96       	adiw	r24, 0x02	; 2
    16ae:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
		gpib_set_partner_pad(val);
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	0e 94 8c 0a 	call	0x1518	; 0x1518 <gpib_set_partner_pad>
    16b8:	8b c0       	rjmp	.+278    	; 0x17d0 <handle_internal_commands+0x1e2>
		break;
	case 's':
		/* set partner secondary address */
		val = atoi((char*) (&(buf[2])));
    16ba:	86 e3       	ldi	r24, 0x36	; 54
    16bc:	95 e0       	ldi	r25, 0x05	; 5
    16be:	0e 94 69 00 	call	0xd2	; 0xd2 <atoi>
    16c2:	89 83       	std	Y+1, r24	; 0x01
		sprintf(sbuf, "Set partner secondary address to %u\n\r", val);
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <handle_internal_commands+0xde>
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <handle_internal_commands+0xe0>
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <handle_internal_commands+0xe2>
    16d0:	ed b7       	in	r30, 0x3d	; 61
    16d2:	fe b7       	in	r31, 0x3e	; 62
    16d4:	31 96       	adiw	r30, 0x01	; 1
    16d6:	ce 01       	movw	r24, r28
    16d8:	02 96       	adiw	r24, 0x02	; 2
    16da:	91 83       	std	Z+1, r25	; 0x01
    16dc:	80 83       	st	Z, r24
    16de:	8e ec       	ldi	r24, 0xCE	; 206
    16e0:	91 e0       	ldi	r25, 0x01	; 1
    16e2:	93 83       	std	Z+3, r25	; 0x03
    16e4:	82 83       	std	Z+2, r24	; 0x02
    16e6:	35 83       	std	Z+5, r19	; 0x05
    16e8:	24 83       	std	Z+4, r18	; 0x04
    16ea:	0e 94 ac 00 	call	0x158	; 0x158 <sprintf>
    16ee:	8d b7       	in	r24, 0x3d	; 61
    16f0:	9e b7       	in	r25, 0x3e	; 62
    16f2:	06 96       	adiw	r24, 0x06	; 6
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	9e bf       	out	0x3e, r25	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	8d bf       	out	0x3d, r24	; 61
		uart_puts(sbuf);
    16fe:	ce 01       	movw	r24, r28
    1700:	02 96       	adiw	r24, 0x02	; 2
    1702:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
		gpib_set_partner_sad(val);
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	0e 94 99 0a 	call	0x1532	; 0x1532 <gpib_set_partner_sad>
    170c:	61 c0       	rjmp	.+194    	; 0x17d0 <handle_internal_commands+0x1e2>
		break;
	case '+':
		/* add device */
		val = atoi((char*) (&(buf[2])));
    170e:	86 e3       	ldi	r24, 0x36	; 54
    1710:	95 e0       	ldi	r25, 0x05	; 5
    1712:	0e 94 69 00 	call	0xd2	; 0xd2 <atoi>
    1716:	89 83       	std	Y+1, r24	; 0x01
		sprintf(sbuf, "Added device with address %u\n\r", val);
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	00 d0       	rcall	.+0      	; 0x1720 <handle_internal_commands+0x132>
    1720:	00 d0       	rcall	.+0      	; 0x1722 <handle_internal_commands+0x134>
    1722:	00 d0       	rcall	.+0      	; 0x1724 <handle_internal_commands+0x136>
    1724:	ed b7       	in	r30, 0x3d	; 61
    1726:	fe b7       	in	r31, 0x3e	; 62
    1728:	31 96       	adiw	r30, 0x01	; 1
    172a:	ce 01       	movw	r24, r28
    172c:	02 96       	adiw	r24, 0x02	; 2
    172e:	91 83       	std	Z+1, r25	; 0x01
    1730:	80 83       	st	Z, r24
    1732:	84 ef       	ldi	r24, 0xF4	; 244
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	93 83       	std	Z+3, r25	; 0x03
    1738:	82 83       	std	Z+2, r24	; 0x02
    173a:	35 83       	std	Z+5, r19	; 0x05
    173c:	24 83       	std	Z+4, r18	; 0x04
    173e:	0e 94 ac 00 	call	0x158	; 0x158 <sprintf>
    1742:	2d b7       	in	r18, 0x3d	; 61
    1744:	3e b7       	in	r19, 0x3e	; 62
    1746:	2a 5f       	subi	r18, 0xFA	; 250
    1748:	3f 4f       	sbci	r19, 0xFF	; 255
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	3e bf       	out	0x3e, r19	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	2d bf       	out	0x3d, r18	; 61
		uart_puts(sbuf);
    1754:	ce 01       	movw	r24, r28
    1756:	02 96       	adiw	r24, 0x02	; 2
    1758:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
		gpib_add_partner_sad(val);
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	0e 94 c2 04 	call	0x984	; 0x984 <gpib_add_partner_sad>
    1762:	36 c0       	rjmp	.+108    	; 0x17d0 <handle_internal_commands+0x1e2>
		break;
	case '-':
		/* add device */
		val = atoi((char*) (&(buf[2])));
    1764:	86 e3       	ldi	r24, 0x36	; 54
    1766:	95 e0       	ldi	r25, 0x05	; 5
    1768:	0e 94 69 00 	call	0xd2	; 0xd2 <atoi>
    176c:	89 83       	std	Y+1, r24	; 0x01
		sprintf(sbuf, "Removed device with address %u\n\r", val);
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	00 d0       	rcall	.+0      	; 0x1776 <handle_internal_commands+0x188>
    1776:	00 d0       	rcall	.+0      	; 0x1778 <handle_internal_commands+0x18a>
    1778:	00 d0       	rcall	.+0      	; 0x177a <handle_internal_commands+0x18c>
    177a:	ed b7       	in	r30, 0x3d	; 61
    177c:	fe b7       	in	r31, 0x3e	; 62
    177e:	31 96       	adiw	r30, 0x01	; 1
    1780:	ce 01       	movw	r24, r28
    1782:	02 96       	adiw	r24, 0x02	; 2
    1784:	91 83       	std	Z+1, r25	; 0x01
    1786:	80 83       	st	Z, r24
    1788:	83 e1       	ldi	r24, 0x13	; 19
    178a:	92 e0       	ldi	r25, 0x02	; 2
    178c:	93 83       	std	Z+3, r25	; 0x03
    178e:	82 83       	std	Z+2, r24	; 0x02
    1790:	35 83       	std	Z+5, r19	; 0x05
    1792:	24 83       	std	Z+4, r18	; 0x04
    1794:	0e 94 ac 00 	call	0x158	; 0x158 <sprintf>
    1798:	8d b7       	in	r24, 0x3d	; 61
    179a:	9e b7       	in	r25, 0x3e	; 62
    179c:	06 96       	adiw	r24, 0x06	; 6
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	9e bf       	out	0x3e, r25	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	8d bf       	out	0x3d, r24	; 61
		uart_puts(sbuf);
    17a8:	ce 01       	movw	r24, r28
    17aa:	02 96       	adiw	r24, 0x02	; 2
    17ac:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
		gpib_remove_partner_sad(val);
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	0e 94 cd 04 	call	0x99a	; 0x99a <gpib_remove_partner_sad>
    17b6:	0c c0       	rjmp	.+24     	; 0x17d0 <handle_internal_commands+0x1e2>
		break;
	case 'h':
		/* print some usage infos */
		printHelp();
    17b8:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <printHelp>
    17bc:	09 c0       	rjmp	.+18     	; 0x17d0 <handle_internal_commands+0x1e2>
		break;
	case 'i':
		gpib_info();
    17be:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <gpib_info>
    17c2:	06 c0       	rjmp	.+12     	; 0x17d0 <handle_internal_commands+0x1e2>
		break;
	default:
		uart_puts("unknown command\n\r");
    17c4:	84 e3       	ldi	r24, 0x34	; 52
    17c6:	92 e0       	ldi	r25, 0x02	; 2
    17c8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
		printHelp();
    17cc:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <printHelp>
		break;
	}
}
    17d0:	a5 96       	adiw	r28, 0x25	; 37
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <send_command>:
/**
 * Sends a command.
 *
 * Returns 1 if command is a query, 0 otherwise.
 */
uchar send_command(uchar *commandString) {
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	2b 97       	sbiw	r28, 0x0b	; 11
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	9b 87       	std	Y+11, r25	; 0x0b
    17f8:	8a 87       	std	Y+10, r24	; 0x0a
	uchar controlString[8];
	uchar is_query;
	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
    17fa:	8f e5       	ldi	r24, 0x5F	; 95
    17fc:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    17fe:	ce 01       	movw	r24, r28
    1800:	02 96       	adiw	r24, 0x02	; 2
    1802:	61 e0       	ldi	r22, 0x01	; 1
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    180a:	8f e3       	ldi	r24, 0x3F	; 63
    180c:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    180e:	ce 01       	movw	r24, r28
    1810:	02 96       	adiw	r24, 0x02	; 2
    1812:	61 e0       	ldi	r22, 0x01	; 1
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>

	// set device to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_partner_pad());
    181a:	0e 94 a6 0a 	call	0x154c	; 0x154c <gpib_get_partner_pad>
    181e:	80 5e       	subi	r24, 0xE0	; 224
    1820:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1822:	ce 01       	movw	r24, r28
    1824:	02 96       	adiw	r24, 0x02	; 2
    1826:	61 e0       	ldi	r22, 0x01	; 1
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>
	// send secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
    182e:	0e 94 af 0a 	call	0x155e	; 0x155e <gpib_get_partner_sad>
    1832:	8f 3f       	cpi	r24, 0xFF	; 255
    1834:	51 f0       	breq	.+20     	; 0x184a <send_command+0x68>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
    1836:	0e 94 af 0a 	call	0x155e	; 0x155e <gpib_get_partner_sad>
    183a:	80 66       	ori	r24, 0x60	; 96
    183c:	8a 83       	std	Y+2, r24	; 0x02
		gpib_cmd(controlString, 1);
    183e:	ce 01       	movw	r24, r28
    1840:	02 96       	adiw	r24, 0x02	; 2
    1842:	61 e0       	ldi	r22, 0x01	; 1
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>
	}

	// set myself (controller) to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_address());
    184a:	0e 94 b8 0a 	call	0x1570	; 0x1570 <gpib_get_address>
    184e:	80 5c       	subi	r24, 0xC0	; 192
    1850:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1852:	ce 01       	movw	r24, r28
    1854:	02 96       	adiw	r24, 0x02	; 2
    1856:	61 e0       	ldi	r22, 0x01	; 1
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>

	// put out command to listeners
	uart_puts("\n\rcommand: ");
    185e:	86 e4       	ldi	r24, 0x46	; 70
    1860:	92 e0       	ldi	r25, 0x02	; 2
    1862:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
	uart_puts((char*) commandString);
    1866:	8a 85       	ldd	r24, Y+10	; 0x0a
    1868:	9b 85       	ldd	r25, Y+11	; 0x0b
    186a:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
	uart_puts("\n\r");
    186e:	82 e5       	ldi	r24, 0x52	; 82
    1870:	92 e0       	ldi	r25, 0x02	; 2
    1872:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
	// gpib bus write
	gpib_write(commandString, 0);
    1876:	8a 85       	ldd	r24, Y+10	; 0x0a
    1878:	9b 85       	ldd	r25, Y+11	; 0x0b
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	0e 94 6d 05 	call	0xada	; 0xada <gpib_write>

	// check if query or command only
	// all queries contain a '?'
	if (strchr((char*) commandString, '?') != NULL) {
    1882:	8a 85       	ldd	r24, Y+10	; 0x0a
    1884:	9b 85       	ldd	r25, Y+11	; 0x0b
    1886:	6f e3       	ldi	r22, 0x3F	; 63
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	0e 94 90 00 	call	0x120	; 0x120 <strchr>
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	39 f0       	breq	.+14     	; 0x18a0 <send_command+0xbe>
		uart_puts("Query. Will check for answer.\n\r");
    1892:	85 e5       	ldi	r24, 0x55	; 85
    1894:	92 e0       	ldi	r25, 0x02	; 2
    1896:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
		is_query = 1;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	89 83       	std	Y+1, r24	; 0x01
    189e:	05 c0       	rjmp	.+10     	; 0x18aa <send_command+0xc8>
	} else {
		uart_puts("Command only.\n\r> ");
    18a0:	85 e7       	ldi	r24, 0x75	; 117
    18a2:	92 e0       	ldi	r25, 0x02	; 2
    18a4:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
		is_query = 0;
    18a8:	19 82       	std	Y+1, r1	; 0x01
	}
	return is_query;
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ac:	2b 96       	adiw	r28, 0x0b	; 11
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	cd bf       	out	0x3d, r28	; 61
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <receiveAnswer>:

/**
 * Receives answer after command was sent.
 */
void receiveAnswer() {
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	2a 97       	sbiw	r28, 0x0a	; 10
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	de bf       	out	0x3e, r29	; 62
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	uchar b, e;

	// UNT and UNL
	controlString[0] = G_CMD_UNT;
    18d2:	8f e5       	ldi	r24, 0x5F	; 95
    18d4:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    18d6:	ce 01       	movw	r24, r28
    18d8:	02 96       	adiw	r24, 0x02	; 2
    18da:	61 e0       	ldi	r22, 0x01	; 1
    18dc:	70 e0       	ldi	r23, 0x00	; 0
    18de:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    18e2:	8f e3       	ldi	r24, 0x3F	; 63
    18e4:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    18e6:	ce 01       	movw	r24, r28
    18e8:	02 96       	adiw	r24, 0x02	; 2
    18ea:	61 e0       	ldi	r22, 0x01	; 1
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>

	// set myself (controller) to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_address());
    18f2:	0e 94 b8 0a 	call	0x1570	; 0x1570 <gpib_get_address>
    18f6:	80 5e       	subi	r24, 0xE0	; 224
    18f8:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    18fa:	ce 01       	movw	r24, r28
    18fc:	02 96       	adiw	r24, 0x02	; 2
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>

	// set device to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_partner_pad());
    1906:	0e 94 a6 0a 	call	0x154c	; 0x154c <gpib_get_partner_pad>
    190a:	80 5c       	subi	r24, 0xC0	; 192
    190c:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    190e:	ce 01       	movw	r24, r28
    1910:	02 96       	adiw	r24, 0x02	; 2
    1912:	61 e0       	ldi	r22, 0x01	; 1
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>
	// secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
    191a:	0e 94 af 0a 	call	0x155e	; 0x155e <gpib_get_partner_sad>
    191e:	8f 3f       	cpi	r24, 0xFF	; 255
    1920:	51 f0       	breq	.+20     	; 0x1936 <receiveAnswer+0x78>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
    1922:	0e 94 af 0a 	call	0x155e	; 0x155e <gpib_get_partner_sad>
    1926:	80 66       	ori	r24, 0x60	; 96
    1928:	8a 83       	std	Y+2, r24	; 0x02
		gpib_cmd(controlString, 1);
    192a:	ce 01       	movw	r24, r28
    192c:	02 96       	adiw	r24, 0x02	; 2
    192e:	61 e0       	ldi	r22, 0x01	; 1
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>
	}

	// read the answer until EOI is detected (then e becomes true)
	do {
		// gpib bus receive
		e = gpib_receive(&b);
    1936:	ce 01       	movw	r24, r28
    1938:	0a 96       	adiw	r24, 0x0a	; 10
    193a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <gpib_receive>
    193e:	89 83       	std	Y+1, r24	; 0x01
		// write out character
		uart_putc(b);
    1940:	8a 85       	ldd	r24, Y+10	; 0x0a
    1942:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <uart_putc>
		//sprintf((char*)buf,"%02x - %c\n\r", b, b);
		//uart_puts((char*)buf);
	} while (!e);
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	88 23       	and	r24, r24
    194a:	a9 f3       	breq	.-22     	; 0x1936 <receiveAnswer+0x78>

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
    194c:	8f e5       	ldi	r24, 0x5F	; 95
    194e:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1950:	ce 01       	movw	r24, r28
    1952:	02 96       	adiw	r24, 0x02	; 2
    1954:	61 e0       	ldi	r22, 0x01	; 1
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    195c:	8f e3       	ldi	r24, 0x3F	; 63
    195e:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1960:	ce 01       	movw	r24, r28
    1962:	02 96       	adiw	r24, 0x02	; 2
    1964:	61 e0       	ldi	r22, 0x01	; 1
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	0e 94 86 05 	call	0xb0c	; 0xb0c <gpib_cmd>
}
    196c:	2a 96       	adiw	r28, 0x0a	; 10
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	de bf       	out	0x3e, r29	; 62
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	cd bf       	out	0x3d, r28	; 61
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <main>:
 * \brief Implementation of GPIB controller. Reads a command from RS232, sends it via bus.
 * If The command contains a '?', an answer from the device is expected and read in. The
 * answer then is printed out. If an SRQ occured, a serial poll is initiated.
 * 
 */
int main(void) {
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	00 d0       	rcall	.+0      	; 0x1984 <main+0x6>
    1984:	00 d0       	rcall	.+0      	; 0x1986 <main+0x8>
    1986:	00 d0       	rcall	.+0      	; 0x1988 <main+0xa>
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
	int old_time = 0;
    198c:	1e 82       	std	Y+6, r1	; 0x06
    198e:	1d 82       	std	Y+5, r1	; 0x05
	uchar is_query = 0;
    1990:	1c 82       	std	Y+4, r1	; 0x04
	uchar command_ready = 0;
    1992:	1b 82       	std	Y+3, r1	; 0x03
	uchar do_prompt = 1;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	8a 83       	std	Y+2, r24	; 0x02
	uchar srq;

	/*
	 *  Initialize UART library, pass baudrate and avr cpu clock 
	 *  with the macro UART_BAUD_SELECT()
	 */DI();
    1998:	8c e0       	ldi	r24, 0x0C	; 12
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <uart_init>

	/*
	 * now enable interrupt, since UART and TIMER library is interrupt controlled
	 */sei();
    19a0:	78 94       	sei

	/** clear secondary address */
	gpib_set_partner_sad(ADDRESS_NOT_SET);
    19a2:	8f ef       	ldi	r24, 0xFF	; 255
    19a4:	0e 94 99 0a 	call	0x1532	; 0x1532 <gpib_set_partner_sad>
	/** clear list of partners */
	gpib_clear_partners();
    19a8:	0e 94 c1 0a 	call	0x1582	; 0x1582 <gpib_clear_partners>
	/** init flavour */
	gpib_set_flavour(FLAVOUR_NONE);
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <gpib_set_flavour>

	/** print some usage infos */
	printHelp();
    19b2:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <printHelp>
	/*
	 * WRITE: Controller talks and listens
	 */

	// init timer for timeout detection
	timer16_init();
    19b6:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <timer16_init>

	// init gpib lines
	gpib_init();
    19ba:	0e 94 84 03 	call	0x708	; 0x708 <gpib_init>
	// init controller part - assign bus 
	gpib_controller_assign(0x00);
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	0e 94 d7 04 	call	0x9ae	; 0x9ae <gpib_controller_assign>
	 * 3. if command was a query, read the answer from device (become listener and set device to talker)
	 * 	4. check if SRQ occured and handle that
	 */
	for (;;) {

		if (do_prompt) {
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	88 23       	and	r24, r24
    19c8:	29 f0       	breq	.+10     	; 0x19d4 <main+0x56>
			uart_puts("> ");
    19ca:	87 e8       	ldi	r24, 0x87	; 135
    19cc:	92 e0       	ldi	r25, 0x02	; 2
    19ce:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
			do_prompt = 0;
    19d2:	1a 82       	std	Y+2, r1	; 0x02
		}
		// input processing via rs232
		// command_ready may already been set by SRQ that occured before
		if (!command_ready)
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	88 23       	and	r24, r24
    19d8:	19 f4       	brne	.+6      	; 0x19e0 <main+0x62>
			command_ready = input_process();
    19da:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <input_process>
    19de:	8b 83       	std	Y+3, r24	; 0x03

		// check for internal command
		if (command_ready) {
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	88 23       	and	r24, r24
    19e4:	d9 f0       	breq	.+54     	; 0x1a1c <main+0x9e>
			// all internal cmds start with a '.'
			if (buf[0] == '.') {
    19e6:	80 91 34 05 	lds	r24, 0x0534
    19ea:	8e 32       	cpi	r24, 0x2E	; 46
    19ec:	b9 f4       	brne	.+46     	; 0x1a1c <main+0x9e>
				uart_puts("\n\rInternal command: ");
    19ee:	8a e8       	ldi	r24, 0x8A	; 138
    19f0:	92 e0       	ldi	r25, 0x02	; 2
    19f2:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
				uart_puts((char*) buf);
    19f6:	84 e3       	ldi	r24, 0x34	; 52
    19f8:	95 e0       	ldi	r25, 0x05	; 5
    19fa:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
				uart_puts("\n\r");
    19fe:	82 e5       	ldi	r24, 0x52	; 82
    1a00:	92 e0       	ldi	r25, 0x02	; 2
    1a02:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
				// reset local vars for command string reading
				buf_ptr = 0;
    1a06:	10 92 8a 04 	sts	0x048A, r1
    1a0a:	10 92 89 04 	sts	0x0489, r1
				command_ready = 0;
    1a0e:	1b 82       	std	Y+3, r1	; 0x03
				// handle commands
				handle_internal_commands(buf);
    1a10:	84 e3       	ldi	r24, 0x34	; 52
    1a12:	95 e0       	ldi	r25, 0x05	; 5
    1a14:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <handle_internal_commands>
				do_prompt = 1;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	8a 83       	std	Y+2, r24	; 0x02
			}
		}

		if (command_ready == 1 && (gpib_get_partner_pad() == ADDRESS_NOT_SET)) {
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	99 f4       	brne	.+38     	; 0x1a48 <main+0xca>
    1a22:	0e 94 a6 0a 	call	0x154c	; 0x154c <gpib_get_partner_pad>
    1a26:	8f 3f       	cpi	r24, 0xFF	; 255
    1a28:	79 f4       	brne	.+30     	; 0x1a48 <main+0xca>
			uart_puts("\n\rDevice address is not set. Will not send commands.");
    1a2a:	8f e9       	ldi	r24, 0x9F	; 159
    1a2c:	92 e0       	ldi	r25, 0x02	; 2
    1a2e:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
			uart_puts("\n\r");
    1a32:	82 e5       	ldi	r24, 0x52	; 82
    1a34:	92 e0       	ldi	r25, 0x02	; 2
    1a36:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
			command_ready = 0;
    1a3a:	1b 82       	std	Y+3, r1	; 0x03
			buf_ptr = 0;
    1a3c:	10 92 8a 04 	sts	0x048A, r1
    1a40:	10 92 89 04 	sts	0x0489, r1
			do_prompt = 1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	8a 83       	std	Y+2, r24	; 0x02
		}

		// if a command was entered, send it to listeners
		if (command_ready) {
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	88 23       	and	r24, r24
    1a4c:	51 f0       	breq	.+20     	; 0x1a62 <main+0xe4>
			is_query = send_command(buf);
    1a4e:	84 e3       	ldi	r24, 0x34	; 52
    1a50:	95 e0       	ldi	r25, 0x05	; 5
    1a52:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <send_command>
    1a56:	8c 83       	std	Y+4, r24	; 0x04
			// reset local vars for command string reading
			buf_ptr = 0;
    1a58:	10 92 8a 04 	sts	0x048A, r1
    1a5c:	10 92 89 04 	sts	0x0489, r1
			command_ready = 0;
    1a60:	1b 82       	std	Y+3, r1	; 0x03
		}

		// if we sent a query, read the answer
		if (is_query) {
    1a62:	8c 81       	ldd	r24, Y+4	; 0x04
    1a64:	88 23       	and	r24, r24
    1a66:	79 f0       	breq	.+30     	; 0x1a86 <main+0x108>
			receiveAnswer();
    1a68:	0e 94 5f 0c 	call	0x18be	; 0x18be <receiveAnswer>
			if (gpib_get_flavour() == FLAVOUR_TEK) {
    1a6c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <gpib_get_flavour>
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	41 f4       	brne	.+16     	; 0x1a84 <main+0x106>
				/// Tek: tek1241 is not sending cr,lf at command end, so create it always itself
				uart_puts("\n\r");
    1a74:	82 e5       	ldi	r24, 0x52	; 82
    1a76:	92 e0       	ldi	r25, 0x02	; 2
    1a78:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
				uart_puts("> ");
    1a7c:	87 e8       	ldi	r24, 0x87	; 135
    1a7e:	92 e0       	ldi	r25, 0x02	; 2
    1a80:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
			}
			// reset for next command
			is_query = 0;
    1a84:	1c 82       	std	Y+4, r1	; 0x04
		}

		// SRQ detection - do this every time when time value s has changed
		// s is incremented every second. So we check once a second.
		srq = 0;
    1a86:	19 82       	std	Y+1, r1	; 0x01
		if (old_time == 0) {
    1a88:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	39 f4       	brne	.+14     	; 0x1a9e <main+0x120>
			// old_time value initialization on first call with value s
			old_time = s;
    1a90:	80 91 85 05 	lds	r24, 0x0585
    1a94:	88 2f       	mov	r24, r24
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	9e 83       	std	Y+6, r25	; 0x06
    1a9a:	8d 83       	std	Y+5, r24	; 0x05
    1a9c:	1c c0       	rjmp	.+56     	; 0x1ad6 <main+0x158>
		} else {
			if (s > old_time) {
    1a9e:	80 91 85 05 	lds	r24, 0x0585
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aaa:	82 17       	cp	r24, r18
    1aac:	93 07       	cpc	r25, r19
    1aae:	9c f4       	brge	.+38     	; 0x1ad6 <main+0x158>
				// some time has passed - check if srq was set
				srq = bit_is_clear(PIND, G_SRQ);
    1ab0:	e0 e3       	ldi	r30, 0x30	; 48
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	88 2f       	mov	r24, r24
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	80 74       	andi	r24, 0x40	; 64
    1abc:	90 70       	andi	r25, 0x00	; 0
    1abe:	19 82       	std	Y+1, r1	; 0x01
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	11 f4       	brne	.+4      	; 0x1ac8 <main+0x14a>
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	89 83       	std	Y+1, r24	; 0x01
				if (srq)
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	88 23       	and	r24, r24
    1acc:	21 f0       	breq	.+8      	; 0x1ad6 <main+0x158>
					uart_puts("\n\rSRQ detected.\n\r");
    1ace:	84 ed       	ldi	r24, 0xD4	; 212
    1ad0:	92 e0       	ldi	r25, 0x02	; 2
    1ad2:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
			}
		}

		// SRQ handling by doing serial poll
		if (srq) {
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	88 23       	and	r24, r24
    1ada:	09 f4       	brne	.+2      	; 0x1ade <main+0x160>
    1adc:	73 cf       	rjmp	.-282    	; 0x19c4 <main+0x46>
			// reset srq for next call
			srq = 0;
    1ade:	19 82       	std	Y+1, r1	; 0x01
			// handle srq with serial poll
			gpib_set_partner_pad(gpib_serial_poll());
    1ae0:	0e 94 b6 09 	call	0x136c	; 0x136c <gpib_serial_poll>
    1ae4:	0e 94 8c 0a 	call	0x1518	; 0x1518 <gpib_set_partner_pad>

			if (gpib_get_flavour() == FLAVOUR_TEK) {
    1ae8:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <gpib_get_flavour>
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <main+0x174>
    1af0:	69 cf       	rjmp	.-302    	; 0x19c4 <main+0x46>
				// Tek: check status for reason
				buf[0] = 'E';
    1af2:	85 e4       	ldi	r24, 0x45	; 69
    1af4:	80 93 34 05 	sts	0x0534, r24
				buf[1] = 'V';
    1af8:	86 e5       	ldi	r24, 0x56	; 86
    1afa:	80 93 35 05 	sts	0x0535, r24
				buf[2] = 'E';
    1afe:	85 e4       	ldi	r24, 0x45	; 69
    1b00:	80 93 36 05 	sts	0x0536, r24
				buf[3] = 'N';
    1b04:	8e e4       	ldi	r24, 0x4E	; 78
    1b06:	80 93 37 05 	sts	0x0537, r24
				buf[4] = 'T';
    1b0a:	84 e5       	ldi	r24, 0x54	; 84
    1b0c:	80 93 38 05 	sts	0x0538, r24
				buf[5] = '?';
    1b10:	8f e3       	ldi	r24, 0x3F	; 63
    1b12:	80 93 39 05 	sts	0x0539, r24
				buf[6] = '\0';
    1b16:	10 92 3a 05 	sts	0x053A, r1
				buf_ptr = 6;
    1b1a:	86 e0       	ldi	r24, 0x06	; 6
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	90 93 8a 04 	sts	0x048A, r25
    1b22:	80 93 89 04 	sts	0x0489, r24
				command_ready = 1;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	8b 83       	std	Y+3, r24	; 0x03
    1b2a:	4c cf       	rjmp	.-360    	; 0x19c4 <main+0x46>

00001b2c <input_process>:
 * Processing user input
 * \brief Read in user input via rs232 using peter fleurys UART library.
 * \returns The character read in
 */

uchar input_process(void) {
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <input_process+0x6>
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <input_process+0x8>
    1b34:	0f 92       	push	r0
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
	unsigned int c;
	uchar ch;
	uchar ret = 0;
    1b3a:	19 82       	std	Y+1, r1	; 0x01
	 * uart_getc() returns in the lower byte the received character and 
	 * in the higher byte (bitmask) the last receive error
	 * UART_NO_DATA is returned when no data is available.
	 *
	 */
	c = uart_getc();
    1b3c:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <uart_getc>
    1b40:	9c 83       	std	Y+4, r25	; 0x04
    1b42:	8b 83       	std	Y+3, r24	; 0x03
	if (c & UART_NO_DATA) {
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	80 70       	andi	r24, 0x00	; 0
    1b4a:	91 70       	andi	r25, 0x01	; 1
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	11 f0       	breq	.+4      	; 0x1b54 <input_process+0x28>
		// no data available from UART
		return 0;
    1b50:	1d 82       	std	Y+5, r1	; 0x05
    1b52:	58 c0       	rjmp	.+176    	; 0x1c04 <input_process+0xd8>

	/*
	 * new data available from UART
	 * check for Frame or Overrun error
	 */
	if (c & UART_FRAME_ERROR) {
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	80 70       	andi	r24, 0x00	; 0
    1b5a:	98 70       	andi	r25, 0x08	; 8
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	21 f0       	breq	.+8      	; 0x1b68 <input_process+0x3c>
		/* Framing Error detected, i.e no stop bit detected */
		uart_puts_P("UART Frame Error: ");
    1b60:	81 e8       	ldi	r24, 0x81	; 129
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <uart_puts_p>
	}
	if (c & UART_OVERRUN_ERROR) {
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	80 70       	andi	r24, 0x00	; 0
    1b6e:	94 70       	andi	r25, 0x04	; 4
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	21 f0       	breq	.+8      	; 0x1b7c <input_process+0x50>
		/* 
		 * Overrun, a character already present in the UART UDR register was 
		 * not read by the interrupt handler before the next character arrived,
		 * one or more received characters have been dropped
		 */
		uart_puts_P("UART Overrun Error: ");
    1b74:	8c e6       	ldi	r24, 0x6C	; 108
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <uart_puts_p>
	}
	if (c & UART_BUFFER_OVERFLOW) {
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	80 70       	andi	r24, 0x00	; 0
    1b82:	92 70       	andi	r25, 0x02	; 2
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	21 f0       	breq	.+8      	; 0x1b90 <input_process+0x64>
		/* 
		 * We are not reading the receive buffer fast enough,
		 * one or more received character have been dropped 
		 */
		uart_puts_P("Buffer overflow error: ");
    1b88:	84 e5       	ldi	r24, 0x54	; 84
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <uart_puts_p>
	}

	/* 
	 * send received character back depending on global flag
	 */
	if (rs232_remote_echo)
    1b90:	80 91 77 04 	lds	r24, 0x0477
    1b94:	90 91 78 04 	lds	r25, 0x0478
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	19 f0       	breq	.+6      	; 0x1ba2 <input_process+0x76>
		uart_putc((unsigned char) c);
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <uart_putc>

	// make uchar from character in int value
	ch = (uchar) c;
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	8a 83       	std	Y+2, r24	; 0x02
	// add to buffer
	buf[buf_ptr++] = ch;
    1ba6:	20 91 89 04 	lds	r18, 0x0489
    1baa:	30 91 8a 04 	lds	r19, 0x048A
    1bae:	f9 01       	movw	r30, r18
    1bb0:	ec 5c       	subi	r30, 0xCC	; 204
    1bb2:	fa 4f       	sbci	r31, 0xFA	; 250
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	80 83       	st	Z, r24
    1bb8:	c9 01       	movw	r24, r18
    1bba:	01 96       	adiw	r24, 0x01	; 1
    1bbc:	90 93 8a 04 	sts	0x048A, r25
    1bc0:	80 93 89 04 	sts	0x0489, r24
	// terminate string
	buf[buf_ptr] = '\0';
    1bc4:	80 91 89 04 	lds	r24, 0x0489
    1bc8:	90 91 8a 04 	lds	r25, 0x048A
    1bcc:	fc 01       	movw	r30, r24
    1bce:	ec 5c       	subi	r30, 0xCC	; 204
    1bd0:	fa 4f       	sbci	r31, 0xFA	; 250
    1bd2:	10 82       	st	Z, r1

	// <CR> means command input is complete
	if (ch == ASCII_CODE_CR) {
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	8d 30       	cpi	r24, 0x0D	; 13
    1bd8:	99 f4       	brne	.+38     	; 0x1c00 <input_process+0xd4>
		// adjust string terminator
		buf[--buf_ptr] = '\0';
    1bda:	80 91 89 04 	lds	r24, 0x0489
    1bde:	90 91 8a 04 	lds	r25, 0x048A
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	90 93 8a 04 	sts	0x048A, r25
    1be8:	80 93 89 04 	sts	0x0489, r24
    1bec:	80 91 89 04 	lds	r24, 0x0489
    1bf0:	90 91 8a 04 	lds	r25, 0x048A
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	ec 5c       	subi	r30, 0xCC	; 204
    1bf8:	fa 4f       	sbci	r31, 0xFA	; 250
    1bfa:	10 82       	st	Z, r1
		ret = 1;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	8d 83       	std	Y+5, r24	; 0x05
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	cf 91       	pop	r28
    1c12:	df 91       	pop	r29
    1c14:	08 95       	ret

00001c16 <printHelp>:

#define REVISION "0.7"

void printHelp() {
    1c16:	df 93       	push	r29
    1c18:	cf 93       	push	r28
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
#ifdef WRITE
	sprintf(buf,
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <printHelp+0xa>
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <printHelp+0xc>
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <printHelp+0xe>
    1c24:	ed b7       	in	r30, 0x3d	; 61
    1c26:	fe b7       	in	r31, 0x3e	; 62
    1c28:	31 96       	adiw	r30, 0x01	; 1
    1c2a:	84 e3       	ldi	r24, 0x34	; 52
    1c2c:	95 e0       	ldi	r25, 0x05	; 5
    1c2e:	91 83       	std	Z+1, r25	; 0x01
    1c30:	80 83       	st	Z, r24
    1c32:	86 ee       	ldi	r24, 0xE6	; 230
    1c34:	92 e0       	ldi	r25, 0x02	; 2
    1c36:	93 83       	std	Z+3, r25	; 0x03
    1c38:	82 83       	std	Z+2, r24	; 0x02
    1c3a:	86 e2       	ldi	r24, 0x26	; 38
    1c3c:	93 e0       	ldi	r25, 0x03	; 3
    1c3e:	95 83       	std	Z+5, r25	; 0x05
    1c40:	84 83       	std	Z+4, r24	; 0x04
    1c42:	0e 94 ac 00 	call	0x158	; 0x158 <sprintf>
    1c46:	8d b7       	in	r24, 0x3d	; 61
    1c48:	9e b7       	in	r25, 0x3e	; 62
    1c4a:	06 96       	adiw	r24, 0x06	; 6
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	9e bf       	out	0x3e, r25	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	8d bf       	out	0x3d, r24	; 61
			"\n\rGPIB Controller (T/L/C) (Rev.%s) (c) spurtikus.de 2008-2015\n\r",
			REVISION);
	uart_puts(buf);
    1c56:	84 e3       	ldi	r24, 0x34	; 52
    1c58:	95 e0       	ldi	r25, 0x05	; 5
    1c5a:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
#else
	uart_puts("\n\rGPIB Listener Only (L) (Rev.%s) (c) spurtikus.de 2008-2015\n\r", REVISION);
	uart_puts(buf);
#endif
	uart_puts("Internal commands:\n\r");
    1c5e:	8a e2       	ldi	r24, 0x2A	; 42
    1c60:	93 e0       	ldi	r25, 0x03	; 3
    1c62:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
	uart_puts(".a <device address> - set primary address of remote device\n\r");
    1c66:	8f e3       	ldi	r24, 0x3F	; 63
    1c68:	93 e0       	ldi	r25, 0x03	; 3
    1c6a:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
	uart_puts(
    1c6e:	8c e7       	ldi	r24, 0x7C	; 124
    1c70:	93 e0       	ldi	r25, 0x03	; 3
    1c72:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
			".+ <n> - add partner device address to list of known devices.\n\r");
	uart_puts(
    1c76:	8c eb       	ldi	r24, 0xBC	; 188
    1c78:	93 e0       	ldi	r25, 0x03	; 3
    1c7a:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
			".- <n> - remove partner device address from list of known devices.\n\r");
	uart_puts(
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	94 e0       	ldi	r25, 0x04	; 4
    1c82:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
			".s <device address> - set secondary address of of remote device\n\r");
	uart_puts(".h - print help\n\r");
    1c86:	83 e4       	ldi	r24, 0x43	; 67
    1c88:	94 e0       	ldi	r25, 0x04	; 4
    1c8a:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
	uart_puts(".i - dump info about GPIB lines\n\r");
    1c8e:	85 e5       	ldi	r24, 0x55	; 85
    1c90:	94 e0       	ldi	r25, 0x04	; 4
    1c92:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <uart_puts>
}
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <__vector_7>:

/**
 * Interrupt Service Routine - do not call directly
 *  This routine is called when the Timer Value TCNT1 reaches the Output Compare Register Value OCR1A
 */ 
ISR(TIMER1_COMPA_vect) {
    1c9c:	1f 92       	push	r1
    1c9e:	0f 92       	push	r0
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	0f 92       	push	r0
    1ca4:	11 24       	eor	r1, r1
    1ca6:	8f 93       	push	r24
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
#if XTAL_CPU % DEBOUNCE
	OCR1A = XTAL_CPU / DEBOUNCE - 1;
#endif
	if (--timer==0) {
    1cb0:	80 91 84 05 	lds	r24, 0x0584
    1cb4:	81 50       	subi	r24, 0x01	; 1
    1cb6:	80 93 84 05 	sts	0x0584, r24
    1cba:	80 91 84 05 	lds	r24, 0x0584
    1cbe:	88 23       	and	r24, r24
    1cc0:	39 f4       	brne	.+14     	; 0x1cd0 <__vector_7+0x34>
		timer=(uint8_t) DEBOUNCE;
    1cc2:	10 92 84 05 	sts	0x0584, r1
		s++;
    1cc6:	80 91 85 05 	lds	r24, 0x0585
    1cca:	8f 5f       	subi	r24, 0xFF	; 255
    1ccc:	80 93 85 05 	sts	0x0585, r24
#if XTAL_CPU % DEBOUNCE
		OCR1A = XTAL_CPU / DEBOUNCE + XTAL_CPU % DEBOUNCE - 1;
#endif
	}
}
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	8f 91       	pop	r24
    1cd6:	0f 90       	pop	r0
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	0f 90       	pop	r0
    1cdc:	1f 90       	pop	r1
    1cde:	18 95       	reti

00001ce0 <timer16_init>:
/**
 * Timer initialisation.
 *  \brief initializes all registers ands sets second value 's' to zero. Timer is immediately
 * started.
 */ 
void timer16_init( void ) {
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62

	// OCR1A=XTAL/DEBOUNCE-1 -> Bei Erreichen dieses Wertes (31249) wird die ISR besucht
	// die ISR wird also alle 1/256s aufgerufen. Wenn man dort also bis 256 hochzählt, ist genau
	// 1 Sekunde um! 256 ist der Wert der Variable timer und wird über das define DEBOUNCE festgelegt

	TCCR1B = (1<<CS10) ^ (1<<WGM12);	// Prescaler of 1 | CTC mode
    1ce8:	ee e4       	ldi	r30, 0x4E	; 78
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	89 e0       	ldi	r24, 0x09	; 9
    1cee:	80 83       	st	Z, r24
	OCR1A  = F_CPU/DEBOUNCE-1;		// Output compare register value 
    1cf0:	ea e4       	ldi	r30, 0x4A	; 74
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	81 e1       	ldi	r24, 0x11	; 17
    1cf6:	9a e7       	ldi	r25, 0x7A	; 122
    1cf8:	91 83       	std	Z+1, r25	; 0x01
    1cfa:	80 83       	st	Z, r24
	TCNT1 = 0; // Start value for timer register
    1cfc:	ec e4       	ldi	r30, 0x4C	; 76
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	11 82       	std	Z+1, r1	; 0x01
    1d02:	10 82       	st	Z, r1
	s=0; // Initialize second value (s) to zero
    1d04:	10 92 85 05 	sts	0x0585, r1
	timer = (uint8_t)DEBOUNCE; 
    1d08:	10 92 84 05 	sts	0x0584, r1
	TIMSK |= (1<<OCIE1A);		// activate timer interrupts which starts timer run
    1d0c:	a9 e5       	ldi	r26, 0x59	; 89
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e9 e5       	ldi	r30, 0x59	; 89
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	80 61       	ori	r24, 0x10	; 16
    1d18:	8c 93       	st	X, r24
}
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    1d20:	1f 92       	push	r1
    1d22:	0f 92       	push	r0
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	0f 92       	push	r0
    1d28:	11 24       	eor	r1, r1
    1d2a:	8f 93       	push	r24
    1d2c:	9f 93       	push	r25
    1d2e:	ef 93       	push	r30
    1d30:	ff 93       	push	r31
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <__vector_13+0x18>
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <__vector_13+0x1a>
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    1d3e:	eb e2       	ldi	r30, 0x2B	; 43
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	8a 83       	std	Y+2, r24	; 0x02
    data = UART0_DATA;
    1d46:	ec e2       	ldi	r30, 0x2C	; 44
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	8b 83       	std	Y+3, r24	; 0x03
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	88 71       	andi	r24, 0x18	; 24
    1d52:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    1d54:	80 91 cd 04 	lds	r24, 0x04CD
    1d58:	8f 5f       	subi	r24, 0xFF	; 255
    1d5a:	8f 71       	andi	r24, 0x1F	; 31
    1d5c:	8c 83       	std	Y+4, r24	; 0x04
    
    if ( tmphead == UART_RxTail ) {
    1d5e:	90 91 ce 04 	lds	r25, 0x04CE
    1d62:	8c 81       	ldd	r24, Y+4	; 0x04
    1d64:	89 17       	cp	r24, r25
    1d66:	19 f4       	brne	.+6      	; 0x1d6e <__vector_13+0x4e>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1d68:	82 e0       	ldi	r24, 0x02	; 2
    1d6a:	89 83       	std	Y+1, r24	; 0x01
    1d6c:	0b c0       	rjmp	.+22     	; 0x1d84 <__vector_13+0x64>
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    1d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d70:	80 93 cd 04 	sts	0x04CD, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    1d74:	8c 81       	ldd	r24, Y+4	; 0x04
    1d76:	88 2f       	mov	r24, r24
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	e5 55       	subi	r30, 0x55	; 85
    1d7e:	fb 4f       	sbci	r31, 0xFB	; 251
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	80 83       	st	Z, r24
    }
    UART_LastRxError = lastRxError;   
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	80 93 cf 04 	sts	0x04CF, r24
}
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	ff 91       	pop	r31
    1d98:	ef 91       	pop	r30
    1d9a:	9f 91       	pop	r25
    1d9c:	8f 91       	pop	r24
    1d9e:	0f 90       	pop	r0
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	0f 90       	pop	r0
    1da4:	1f 90       	pop	r1
    1da6:	18 95       	reti

00001da8 <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    1da8:	1f 92       	push	r1
    1daa:	0f 92       	push	r0
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	0f 92       	push	r0
    1db0:	11 24       	eor	r1, r1
    1db2:	8f 93       	push	r24
    1db4:	9f 93       	push	r25
    1db6:	af 93       	push	r26
    1db8:	bf 93       	push	r27
    1dba:	ef 93       	push	r30
    1dbc:	ff 93       	push	r31
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	0f 92       	push	r0
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    1dc8:	90 91 cb 04 	lds	r25, 0x04CB
    1dcc:	80 91 cc 04 	lds	r24, 0x04CC
    1dd0:	98 17       	cp	r25, r24
    1dd2:	99 f0       	breq	.+38     	; 0x1dfa <__vector_14+0x52>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    1dd4:	80 91 cc 04 	lds	r24, 0x04CC
    1dd8:	8f 5f       	subi	r24, 0xFF	; 255
    1dda:	8f 71       	andi	r24, 0x1F	; 31
    1ddc:	89 83       	std	Y+1, r24	; 0x01
        UART_TxTail = tmptail;
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	80 93 cc 04 	sts	0x04CC, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    1de4:	ac e2       	ldi	r26, 0x2C	; 44
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	88 2f       	mov	r24, r24
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	fc 01       	movw	r30, r24
    1df0:	e5 57       	subi	r30, 0x75	; 117
    1df2:	fb 4f       	sbci	r31, 0xFB	; 251
    1df4:	80 81       	ld	r24, Z
    1df6:	8c 93       	st	X, r24
    1df8:	07 c0       	rjmp	.+14     	; 0x1e08 <__vector_14+0x60>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    1dfa:	aa e2       	ldi	r26, 0x2A	; 42
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	ea e2       	ldi	r30, 0x2A	; 42
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	8f 7d       	andi	r24, 0xDF	; 223
    1e06:	8c 93       	st	X, r24
    }
}
    1e08:	0f 90       	pop	r0
    1e0a:	cf 91       	pop	r28
    1e0c:	df 91       	pop	r29
    1e0e:	ff 91       	pop	r31
    1e10:	ef 91       	pop	r30
    1e12:	bf 91       	pop	r27
    1e14:	af 91       	pop	r26
    1e16:	9f 91       	pop	r25
    1e18:	8f 91       	pop	r24
    1e1a:	0f 90       	pop	r0
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	0f 90       	pop	r0
    1e20:	1f 90       	pop	r1
    1e22:	18 95       	reti

00001e24 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <uart_init+0x6>
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	9a 83       	std	Y+2, r25	; 0x02
    1e30:	89 83       	std	Y+1, r24	; 0x01
    UART_TxHead = 0;
    1e32:	10 92 cb 04 	sts	0x04CB, r1
    UART_TxTail = 0;
    1e36:	10 92 cc 04 	sts	0x04CC, r1
    UART_RxHead = 0;
    1e3a:	10 92 cd 04 	sts	0x04CD, r1
    UART_RxTail = 0;
    1e3e:	10 92 ce 04 	sts	0x04CE, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	9a 81       	ldd	r25, Y+2	; 0x02
    1e46:	99 23       	and	r25, r25
    1e48:	4c f4       	brge	.+18     	; 0x1e5c <uart_init+0x38>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
    1e4a:	eb e2       	ldi	r30, 0x2B	; 43
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	82 e0       	ldi	r24, 0x02	; 2
    1e50:	80 83       	st	Z, r24
    	 baudrate &= ~0x8000;
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	9a 81       	ldd	r25, Y+2	; 0x02
    1e56:	9f 77       	andi	r25, 0x7F	; 127
    1e58:	9a 83       	std	Y+2, r25	; 0x02
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    }
    UBRRH = (unsigned char)(baudrate>>8);
    1e5c:	e0 e4       	ldi	r30, 0x40	; 64
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	9a 81       	ldd	r25, Y+2	; 0x02
    1e64:	89 2f       	mov	r24, r25
    1e66:	99 27       	eor	r25, r25
    1e68:	80 83       	st	Z, r24
    UBRRL = (unsigned char) baudrate;
    1e6a:	e9 e2       	ldi	r30, 0x29	; 41
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	80 83       	st	Z, r24
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
    1e72:	ea e2       	ldi	r30, 0x2A	; 42
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	88 e9       	ldi	r24, 0x98	; 152
    1e78:	80 83       	st	Z, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
    1e7a:	e0 e4       	ldi	r30, 0x40	; 64
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	86 e8       	ldi	r24, 0x86	; 134
    1e80:	80 83       	st	Z, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	cf 91       	pop	r28
    1e88:	df 91       	pop	r29
    1e8a:	08 95       	ret

00001e8c <uart_getc>:
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <uart_getc+0x6>
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <uart_getc+0x8>
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
    1e98:	90 91 cd 04 	lds	r25, 0x04CD
    1e9c:	80 91 ce 04 	lds	r24, 0x04CE
    1ea0:	98 17       	cp	r25, r24
    1ea2:	29 f4       	brne	.+10     	; 0x1eae <uart_getc+0x22>
        return UART_NO_DATA;   /* no data available */
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	91 e0       	ldi	r25, 0x01	; 1
    1ea8:	9c 83       	std	Y+4, r25	; 0x04
    1eaa:	8b 83       	std	Y+3, r24	; 0x03
    1eac:	1d c0       	rjmp	.+58     	; 0x1ee8 <uart_getc+0x5c>
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    1eae:	80 91 ce 04 	lds	r24, 0x04CE
    1eb2:	8f 5f       	subi	r24, 0xFF	; 255
    1eb4:	8f 71       	andi	r24, 0x1F	; 31
    1eb6:	8a 83       	std	Y+2, r24	; 0x02
    UART_RxTail = tmptail; 
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	80 93 ce 04 	sts	0x04CE, r24
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	88 2f       	mov	r24, r24
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	e5 55       	subi	r30, 0x55	; 85
    1ec8:	fb 4f       	sbci	r31, 0xFB	; 251
    1eca:	80 81       	ld	r24, Z
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    
    return (UART_LastRxError << 8) + data;
    1ece:	80 91 cf 04 	lds	r24, 0x04CF
    1ed2:	88 2f       	mov	r24, r24
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	38 2f       	mov	r19, r24
    1ed8:	22 27       	eor	r18, r18
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	82 0f       	add	r24, r18
    1ee2:	93 1f       	adc	r25, r19
    1ee4:	9c 83       	std	Y+4, r25	; 0x04
    1ee6:	8b 83       	std	Y+3, r24	; 0x03
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <uart_putc+0x6>
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1f06:	80 91 cb 04 	lds	r24, 0x04CB
    1f0a:	8f 5f       	subi	r24, 0xFF	; 255
    1f0c:	8f 71       	andi	r24, 0x1F	; 31
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    
    while ( tmphead == UART_TxTail ){
    1f10:	90 91 cc 04 	lds	r25, 0x04CC
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	89 17       	cp	r24, r25
    1f18:	d9 f3       	breq	.-10     	; 0x1f10 <uart_putc+0x16>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	88 2f       	mov	r24, r24
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	fc 01       	movw	r30, r24
    1f22:	e5 57       	subi	r30, 0x75	; 117
    1f24:	fb 4f       	sbci	r31, 0xFB	; 251
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	80 93 cb 04 	sts	0x04CB, r24

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    1f30:	aa e2       	ldi	r26, 0x2A	; 42
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	ea e2       	ldi	r30, 0x2A	; 42
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	80 62       	ori	r24, 0x20	; 32
    1f3c:	8c 93       	st	X, r24

}/* uart_putc */
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <uart_puts+0x6>
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	9a 83       	std	Y+2, r25	; 0x02
    1f54:	89 83       	std	Y+1, r24	; 0x01
    1f56:	0b c0       	rjmp	.+22     	; 0x1f6e <uart_puts+0x26>
    while (*s) 
      uart_putc(*s++);
    1f58:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5c:	20 81       	ld	r18, Z
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	9a 81       	ldd	r25, Y+2	; 0x02
    1f62:	01 96       	adiw	r24, 0x01	; 1
    1f64:	9a 83       	std	Y+2, r25	; 0x02
    1f66:	89 83       	std	Y+1, r24	; 0x01
    1f68:	82 2f       	mov	r24, r18
    1f6a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    1f6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f70:	fa 81       	ldd	r31, Y+2	; 0x02
    1f72:	80 81       	ld	r24, Z
    1f74:	88 23       	and	r24, r24
    1f76:	81 f7       	brne	.-32     	; 0x1f58 <uart_puts+0x10>
      uart_putc(*s++);

}/* uart_puts */
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	00 d0       	rcall	.+0      	; 0x1f88 <uart_puts_p+0x6>
    1f88:	00 d0       	rcall	.+0      	; 0x1f8a <uart_puts_p+0x8>
    1f8a:	00 d0       	rcall	.+0      	; 0x1f8c <uart_puts_p+0xa>
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	9d 83       	std	Y+5, r25	; 0x05
    1f92:	8c 83       	std	Y+4, r24	; 0x04
    1f94:	03 c0       	rjmp	.+6      	; 0x1f9c <uart_puts_p+0x1a>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
    1f96:	8e 81       	ldd	r24, Y+6	; 0x06
    1f98:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1f9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa0:	9b 83       	std	Y+3, r25	; 0x03
    1fa2:	8a 83       	std	Y+2, r24	; 0x02
    1fa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa8:	01 96       	adiw	r24, 0x01	; 1
    1faa:	9d 83       	std	Y+5, r25	; 0x05
    1fac:	8c 83       	std	Y+4, r24	; 0x04
    1fae:	ea 81       	ldd	r30, Y+2	; 0x02
    1fb0:	fb 81       	ldd	r31, Y+3	; 0x03
    1fb2:	84 91       	lpm	r24, Z+
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	8e 83       	std	Y+6, r24	; 0x06
    1fba:	8e 81       	ldd	r24, Y+6	; 0x06
    1fbc:	88 23       	and	r24, r24
    1fbe:	59 f7       	brne	.-42     	; 0x1f96 <uart_puts_p+0x14>
      uart_putc(c);

}/* uart_puts_p */
    1fc0:	26 96       	adiw	r28, 0x06	; 6
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <__prologue_saves__>:
    1fd2:	2f 92       	push	r2
    1fd4:	3f 92       	push	r3
    1fd6:	4f 92       	push	r4
    1fd8:	5f 92       	push	r5
    1fda:	6f 92       	push	r6
    1fdc:	7f 92       	push	r7
    1fde:	8f 92       	push	r8
    1fe0:	9f 92       	push	r9
    1fe2:	af 92       	push	r10
    1fe4:	bf 92       	push	r11
    1fe6:	cf 92       	push	r12
    1fe8:	df 92       	push	r13
    1fea:	ef 92       	push	r14
    1fec:	ff 92       	push	r15
    1fee:	0f 93       	push	r16
    1ff0:	1f 93       	push	r17
    1ff2:	cf 93       	push	r28
    1ff4:	df 93       	push	r29
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	ca 1b       	sub	r28, r26
    1ffc:	db 0b       	sbc	r29, r27
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
    2008:	09 94       	ijmp

0000200a <__epilogue_restores__>:
    200a:	2a 88       	ldd	r2, Y+18	; 0x12
    200c:	39 88       	ldd	r3, Y+17	; 0x11
    200e:	48 88       	ldd	r4, Y+16	; 0x10
    2010:	5f 84       	ldd	r5, Y+15	; 0x0f
    2012:	6e 84       	ldd	r6, Y+14	; 0x0e
    2014:	7d 84       	ldd	r7, Y+13	; 0x0d
    2016:	8c 84       	ldd	r8, Y+12	; 0x0c
    2018:	9b 84       	ldd	r9, Y+11	; 0x0b
    201a:	aa 84       	ldd	r10, Y+10	; 0x0a
    201c:	b9 84       	ldd	r11, Y+9	; 0x09
    201e:	c8 84       	ldd	r12, Y+8	; 0x08
    2020:	df 80       	ldd	r13, Y+7	; 0x07
    2022:	ee 80       	ldd	r14, Y+6	; 0x06
    2024:	fd 80       	ldd	r15, Y+5	; 0x05
    2026:	0c 81       	ldd	r16, Y+4	; 0x04
    2028:	1b 81       	ldd	r17, Y+3	; 0x03
    202a:	aa 81       	ldd	r26, Y+2	; 0x02
    202c:	b9 81       	ldd	r27, Y+1	; 0x01
    202e:	ce 0f       	add	r28, r30
    2030:	d1 1d       	adc	r29, r1
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	ed 01       	movw	r28, r26
    203e:	08 95       	ret

00002040 <_exit>:
    2040:	f8 94       	cli

00002042 <__stop_program>:
    2042:	ff cf       	rjmp	.-2      	; 0x2042 <__stop_program>

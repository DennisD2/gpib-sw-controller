
gpib_004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000042a  00800060  000030a8  0000311c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000161  0080048a  000034d2  00003546  2**0
                  ALLOC
  3 .stab         00005f58  00000000  00000000  00003548  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002c22  00000000  00000000  000094a0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c2 01 	jmp	0x384	; 0x384 <__ctors_end>
       4:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
       8:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
       c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      10:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      14:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      18:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      1c:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__vector_7>
      20:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      24:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      28:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      2c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      30:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      34:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <__vector_13>
      38:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <__vector_14>
      3c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      40:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      44:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      48:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      4c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      50:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>

00000054 <__c.2019>:
      54:	0a 0d 00                                            ...

00000057 <__c.1881>:
      57:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
      67:	65 72 72 6f 72 3a 20 00                             error: .

0000006f <__c.1879>:
      6f:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
      7f:	6f 72 3a 20 00                                      or: .

00000084 <__c.1877>:
      84:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
      94:	3a 20 00                                            : .

00000097 <__c.1905>:
      97:	43 6f 6d 6d 61 6e 64 20 6f 76 65 72 66 6c 6f 77     Command overflow
      a7:	2e 00                                               ..

000000a9 <__c.1991>:
      a9:	75 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 0a     unknown command.
      b9:	0d 00                                               ..

000000bb <__c.1988>:
      bb:	6d 61 63 68 69 6e 65 20 6f 75 74 70 75 74 20 6f     machine output o
      cb:	66 66 0a 0d 00                                      ff...

000000d0 <__c.1986>:
      d0:	6d 61 63 68 69 6e 65 20 6f 75 74 70 75 74 20 6f     machine output o
      e0:	6e 0a 0d 00                                         n...

000000e4 <__c.1983>:
      e4:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      f4:	74 72 6f 6c 20 6f 66 66 0a 0d 00                    trol off...

000000ff <__c.1981>:
      ff:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
     10f:	74 72 6f 6c 20 6f 6e 0a 0d 00                       trol on...

00000119 <__c.1975>:
     119:	53 52 51 73 20 64 69 73 61 62 6c 65 64 0a 0d 00     SRQs disabled...

00000129 <__c.1973>:
     129:	53 52 51 73 20 65 6e 61 62 6c 65 64 0a 0d 00        SRQs enabled...

00000138 <__c.1967>:
     138:	43 68 65 63 6b 20 65 72 72 6f 72 73 0a 0d 00        Check errors...

00000147 <__c.2057>:
     147:	0a 0d 53 52 51 20 64 65 74 65 63 74 65 64 2e 0a     ..SRQ detected..
     157:	0d 00                                               ..

00000159 <__c.2087>:
     159:	0a 0d 53 52 51 73 20 61 72 65 20 64 69 73 61 62     ..SRQs are disab
     169:	6c 65 64 20 6e 6f 77 2e 0a 0d 00                    led now....

00000174 <__c.2085>:
     174:	0a 0d 53 52 51 20 65 6d 69 74 74 65 72 20 69 73     ..SRQ emitter is
     184:	20 6e 6f 74 20 69 6e 20 6c 69 73 74 20 6f 66 20      not in list of 
     194:	6b 6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 20 53     known devices. S
     1a4:	52 51 20 49 67 6e 6f 72 65 64 2e 0a 0d 00           RQ Ignored....

000001b2 <__c.2126>:
     1b2:	2e 2d 20 3c 70 3e 20 5b 3c 73 3e 5d 20 2d 20 72     .- <p> [<s>] - r
     1c2:	65 6d 6f 76 65 20 70 61 72 74 6e 65 72 20 64 65     emove partner de
     1d2:	76 69 63 65 20 61 64 64 72 65 73 73 20 66 72 6f     vice address fro
     1e2:	6d 20 6c 69 73 74 20 6f 66 20 6b 6e 6f 77 6e 20     m list of known 
     1f2:	64 65 76 69 63 65 73 2e 0a 0d 00                    devices....

000001fd <__c.2124>:
     1fd:	2e 2b 20 3c 70 3e 20 5b 3c 73 3e 5d 20 2d 20 61     .+ <p> [<s>] - a
     20d:	64 64 20 70 61 72 74 6e 65 72 20 64 65 76 69 63     dd partner devic
     21d:	65 20 61 64 64 72 65 73 73 20 74 6f 20 6c 69 73     e address to lis
     22d:	74 20 6f 66 20 6b 6e 6f 77 6e 20 64 65 76 69 63     t of known devic
     23d:	65 73 2e 0a 0d 00                                   es....

00000243 <__c.2122>:
     243:	2e 78 20 2d 20 74 6f 67 67 6c 65 20 58 6f 6e 2f     .x - toggle Xon/
     253:	58 6f 66 66 20 66 6c 6f 77 20 63 6f 6e 74 72 6f     Xoff flow contro
     263:	6c 2e 0a 0d 00                                      l....

00000268 <__c.2120>:
     268:	2e 73 20 3c 73 65 63 6f 6e 64 61 72 79 3e 20 2d     .s <secondary> -
     278:	20 73 65 74 20 73 65 63 6f 6e 64 61 72 79 20 61      set secondary a
     288:	64 64 72 65 73 73 20 6f 66 20 72 65 6d 6f 74 65     ddress of remote
     298:	20 64 65 76 69 63 65 2e 0a 0d 00                     device....

000002a3 <__c.2118>:
     2a3:	2e 72 20 2d 20 74 6f 67 67 6c 65 20 53 52 51 20     .r - toggle SRQ 
     2b3:	65 6e 61 62 6c 65 6d 65 6e 74 2e 0a 0d 00           enablement....

000002c1 <__c.2116>:
     2c1:	2e 69 20 2d 20 64 75 6d 70 20 69 6e 66 6f 20 61     .i - dump info a
     2d1:	62 6f 75 74 20 63 6f 6e 74 72 6f 6c 6c 65 72 20     bout controller 
     2e1:	73 74 61 74 65 2e 0a 0d 00                          state....

000002ea <__c.2114>:
     2ea:	2e 68 20 2d 20 70 72 69 6e 74 20 68 65 6c 70 2e     .h - print help.
     2fa:	0a 0d 00                                            ...

000002fd <__c.2112>:
     2fd:	2e 66 20 2d 20 66 69 6e 64 20 70 61 72 74 6e 65     .f - find partne
     30d:	72 73 2e 0a 0d 00                                   rs....

00000313 <__c.2110>:
     313:	2e 65 20 2d 20 64 75 6d 70 20 65 72 72 6f 72 20     .e - dump error 
     323:	71 75 65 75 65 2e 0a 0d 00                          queue....

0000032c <__c.2108>:
     32c:	49 6e 74 65 72 6e 61 6c 20 63 6f 6d 6d 61 6e 64     Internal command
     33c:	73 3a 0a 0d 00                                      s:...

00000341 <__c.2150>:
     341:	0a 0d 00                                            ...

00000344 <__c.2148>:
     344:	5b 45 4f 49 5d 00                                   [EOI].

0000034a <__c.2146>:
     34a:	0a 0d 00                                            ...

0000034d <__c.2143>:
     34d:	44 65 76 69 63 65 20 61 64 64 72 65 73 73 20 69     Device address i
     35d:	73 20 6e 6f 74 20 73 65 74 2e 20 43 61 6e 20 6e     s not set. Can n
     36d:	6f 74 20 73 65 6e 64 20 63 6f 6d 6d 61 6e 64 2e     ot send command.
     37d:	0a 0d 00                                            ...

00000380 <__c.2141>:
     380:	0a 0d 00 00                                         ....

00000384 <__ctors_end>:
     384:	11 24       	eor	r1, r1
     386:	1f be       	out	0x3f, r1	; 63
     388:	cf e5       	ldi	r28, 0x5F	; 95
     38a:	d8 e0       	ldi	r29, 0x08	; 8
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	cd bf       	out	0x3d, r28	; 61

00000390 <__do_copy_data>:
     390:	14 e0       	ldi	r17, 0x04	; 4
     392:	a0 e6       	ldi	r26, 0x60	; 96
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	e8 ea       	ldi	r30, 0xA8	; 168
     398:	f0 e3       	ldi	r31, 0x30	; 48
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <.do_copy_data_start>

0000039c <.do_copy_data_loop>:
     39c:	05 90       	lpm	r0, Z+
     39e:	0d 92       	st	X+, r0

000003a0 <.do_copy_data_start>:
     3a0:	aa 38       	cpi	r26, 0x8A	; 138
     3a2:	b1 07       	cpc	r27, r17
     3a4:	d9 f7       	brne	.-10     	; 0x39c <.do_copy_data_loop>

000003a6 <__do_clear_bss>:
     3a6:	15 e0       	ldi	r17, 0x05	; 5
     3a8:	aa e8       	ldi	r26, 0x8A	; 138
     3aa:	b4 e0       	ldi	r27, 0x04	; 4
     3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <.do_clear_bss_start>

000003ae <.do_clear_bss_loop>:
     3ae:	1d 92       	st	X+, r1

000003b0 <.do_clear_bss_start>:
     3b0:	ab 3e       	cpi	r26, 0xEB	; 235
     3b2:	b1 07       	cpc	r27, r17
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <.do_clear_bss_loop>
     3b6:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <main>
     3ba:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <_exit>

000003be <__bad_interrupt>:
     3be:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000003c2 <atoi>:
     3c2:	fc 01       	movw	r30, r24
     3c4:	88 27       	eor	r24, r24
     3c6:	99 27       	eor	r25, r25
     3c8:	e8 94       	clt
     3ca:	21 91       	ld	r18, Z+
     3cc:	20 32       	cpi	r18, 0x20	; 32
     3ce:	e9 f3       	breq	.-6      	; 0x3ca <atoi+0x8>
     3d0:	29 30       	cpi	r18, 0x09	; 9
     3d2:	10 f0       	brcs	.+4      	; 0x3d8 <atoi+0x16>
     3d4:	2e 30       	cpi	r18, 0x0E	; 14
     3d6:	c8 f3       	brcs	.-14     	; 0x3ca <atoi+0x8>
     3d8:	2b 32       	cpi	r18, 0x2B	; 43
     3da:	41 f0       	breq	.+16     	; 0x3ec <atoi+0x2a>
     3dc:	2d 32       	cpi	r18, 0x2D	; 45
     3de:	39 f4       	brne	.+14     	; 0x3ee <atoi+0x2c>
     3e0:	68 94       	set
     3e2:	04 c0       	rjmp	.+8      	; 0x3ec <atoi+0x2a>
     3e4:	0e 94 4d 02 	call	0x49a	; 0x49a <__mulhi_const_10>
     3e8:	82 0f       	add	r24, r18
     3ea:	91 1d       	adc	r25, r1
     3ec:	21 91       	ld	r18, Z+
     3ee:	20 53       	subi	r18, 0x30	; 48
     3f0:	2a 30       	cpi	r18, 0x0A	; 10
     3f2:	c0 f3       	brcs	.-16     	; 0x3e4 <atoi+0x22>
     3f4:	1e f4       	brtc	.+6      	; 0x3fc <atoi+0x3a>
     3f6:	90 95       	com	r25
     3f8:	81 95       	neg	r24
     3fa:	9f 4f       	sbci	r25, 0xFF	; 255
     3fc:	08 95       	ret

000003fe <strtok>:
     3fe:	4a e8       	ldi	r20, 0x8A	; 138
     400:	54 e0       	ldi	r21, 0x04	; 4
     402:	0e 94 1b 02 	call	0x436	; 0x436 <strtok_r>
     406:	08 95       	ret

00000408 <strlen>:
     408:	fc 01       	movw	r30, r24
     40a:	01 90       	ld	r0, Z+
     40c:	00 20       	and	r0, r0
     40e:	e9 f7       	brne	.-6      	; 0x40a <strlen+0x2>
     410:	80 95       	com	r24
     412:	90 95       	com	r25
     414:	8e 0f       	add	r24, r30
     416:	9f 1f       	adc	r25, r31
     418:	08 95       	ret

0000041a <strncmp>:
     41a:	fb 01       	movw	r30, r22
     41c:	dc 01       	movw	r26, r24
     41e:	41 50       	subi	r20, 0x01	; 1
     420:	50 40       	sbci	r21, 0x00	; 0
     422:	30 f0       	brcs	.+12     	; 0x430 <strncmp+0x16>
     424:	8d 91       	ld	r24, X+
     426:	01 90       	ld	r0, Z+
     428:	80 19       	sub	r24, r0
     42a:	19 f4       	brne	.+6      	; 0x432 <strncmp+0x18>
     42c:	00 20       	and	r0, r0
     42e:	b9 f7       	brne	.-18     	; 0x41e <strncmp+0x4>
     430:	88 1b       	sub	r24, r24
     432:	99 0b       	sbc	r25, r25
     434:	08 95       	ret

00000436 <strtok_r>:
     436:	00 97       	sbiw	r24, 0x00	; 0
     438:	31 f4       	brne	.+12     	; 0x446 <strtok_r+0x10>
     43a:	da 01       	movw	r26, r20
     43c:	8d 91       	ld	r24, X+
     43e:	9c 91       	ld	r25, X
     440:	00 97       	sbiw	r24, 0x00	; 0
     442:	09 f4       	brne	.+2      	; 0x446 <strtok_r+0x10>
     444:	0e c0       	rjmp	.+28     	; 0x462 <strtok_r+0x2c>
     446:	dc 01       	movw	r26, r24
     448:	fb 01       	movw	r30, r22
     44a:	3d 91       	ld	r19, X+
     44c:	21 91       	ld	r18, Z+
     44e:	22 23       	and	r18, r18
     450:	19 f0       	breq	.+6      	; 0x458 <strtok_r+0x22>
     452:	32 17       	cp	r19, r18
     454:	c9 f3       	breq	.-14     	; 0x448 <strtok_r+0x12>
     456:	fa cf       	rjmp	.-12     	; 0x44c <strtok_r+0x16>
     458:	33 23       	and	r19, r19
     45a:	31 f4       	brne	.+12     	; 0x468 <strtok_r+0x32>
     45c:	da 01       	movw	r26, r20
     45e:	1d 92       	st	X+, r1
     460:	1c 92       	st	X, r1
     462:	88 27       	eor	r24, r24
     464:	99 27       	eor	r25, r25
     466:	08 95       	ret
     468:	11 97       	sbiw	r26, 0x01	; 1
     46a:	af 93       	push	r26
     46c:	bf 93       	push	r27
     46e:	fb 01       	movw	r30, r22
     470:	3d 91       	ld	r19, X+
     472:	21 91       	ld	r18, Z+
     474:	32 17       	cp	r19, r18
     476:	71 f4       	brne	.+28     	; 0x494 <strtok_r+0x5e>
     478:	33 23       	and	r19, r19
     47a:	21 f4       	brne	.+8      	; 0x484 <strtok_r+0x4e>
     47c:	88 27       	eor	r24, r24
     47e:	99 27       	eor	r25, r25
     480:	11 97       	sbiw	r26, 0x01	; 1
     482:	02 c0       	rjmp	.+4      	; 0x488 <strtok_r+0x52>
     484:	1e 92       	st	-X, r1
     486:	11 96       	adiw	r26, 0x01	; 1
     488:	fa 01       	movw	r30, r20
     48a:	a1 93       	st	Z+, r26
     48c:	b0 83       	st	Z, r27
     48e:	9f 91       	pop	r25
     490:	8f 91       	pop	r24
     492:	08 95       	ret
     494:	22 23       	and	r18, r18
     496:	69 f7       	brne	.-38     	; 0x472 <strtok_r+0x3c>
     498:	ea cf       	rjmp	.-44     	; 0x46e <strtok_r+0x38>

0000049a <__mulhi_const_10>:
     49a:	7a e0       	ldi	r23, 0x0A	; 10
     49c:	97 9f       	mul	r25, r23
     49e:	90 2d       	mov	r25, r0
     4a0:	87 9f       	mul	r24, r23
     4a2:	80 2d       	mov	r24, r0
     4a4:	91 0d       	add	r25, r1
     4a6:	11 24       	eor	r1, r1
     4a8:	08 95       	ret

000004aa <sprintf>:
     4aa:	ae e0       	ldi	r26, 0x0E	; 14
     4ac:	b0 e0       	ldi	r27, 0x00	; 0
     4ae:	eb e5       	ldi	r30, 0x5B	; 91
     4b0:	f2 e0       	ldi	r31, 0x02	; 2
     4b2:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__prologue_saves__+0x1c>
     4b6:	0d 89       	ldd	r16, Y+21	; 0x15
     4b8:	1e 89       	ldd	r17, Y+22	; 0x16
     4ba:	86 e0       	ldi	r24, 0x06	; 6
     4bc:	8c 83       	std	Y+4, r24	; 0x04
     4be:	1a 83       	std	Y+2, r17	; 0x02
     4c0:	09 83       	std	Y+1, r16	; 0x01
     4c2:	8f ef       	ldi	r24, 0xFF	; 255
     4c4:	9f e7       	ldi	r25, 0x7F	; 127
     4c6:	9e 83       	std	Y+6, r25	; 0x06
     4c8:	8d 83       	std	Y+5, r24	; 0x05
     4ca:	9e 01       	movw	r18, r28
     4cc:	27 5e       	subi	r18, 0xE7	; 231
     4ce:	3f 4f       	sbci	r19, 0xFF	; 255
     4d0:	ce 01       	movw	r24, r28
     4d2:	01 96       	adiw	r24, 0x01	; 1
     4d4:	6f 89       	ldd	r22, Y+23	; 0x17
     4d6:	78 8d       	ldd	r23, Y+24	; 0x18
     4d8:	a9 01       	movw	r20, r18
     4da:	0e 94 79 02 	call	0x4f2	; 0x4f2 <vfprintf>
     4de:	2f 81       	ldd	r18, Y+7	; 0x07
     4e0:	38 85       	ldd	r19, Y+8	; 0x08
     4e2:	02 0f       	add	r16, r18
     4e4:	13 1f       	adc	r17, r19
     4e6:	f8 01       	movw	r30, r16
     4e8:	10 82       	st	Z, r1
     4ea:	2e 96       	adiw	r28, 0x0e	; 14
     4ec:	e4 e0       	ldi	r30, 0x04	; 4
     4ee:	0c 94 45 18 	jmp	0x308a	; 0x308a <__epilogue_restores__+0x1c>

000004f2 <vfprintf>:
     4f2:	ab e0       	ldi	r26, 0x0B	; 11
     4f4:	b0 e0       	ldi	r27, 0x00	; 0
     4f6:	ef e7       	ldi	r30, 0x7F	; 127
     4f8:	f2 e0       	ldi	r31, 0x02	; 2
     4fa:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <__prologue_saves__>
     4fe:	3c 01       	movw	r6, r24
     500:	2b 01       	movw	r4, r22
     502:	5a 01       	movw	r10, r20
     504:	fc 01       	movw	r30, r24
     506:	17 82       	std	Z+7, r1	; 0x07
     508:	16 82       	std	Z+6, r1	; 0x06
     50a:	83 81       	ldd	r24, Z+3	; 0x03
     50c:	81 fd       	sbrc	r24, 1
     50e:	03 c0       	rjmp	.+6      	; 0x516 <vfprintf+0x24>
     510:	6f ef       	ldi	r22, 0xFF	; 255
     512:	7f ef       	ldi	r23, 0xFF	; 255
     514:	c6 c1       	rjmp	.+908    	; 0x8a2 <__stack+0x43>
     516:	9a e0       	ldi	r25, 0x0A	; 10
     518:	89 2e       	mov	r8, r25
     51a:	1e 01       	movw	r2, r28
     51c:	08 94       	sec
     51e:	21 1c       	adc	r2, r1
     520:	31 1c       	adc	r3, r1
     522:	f3 01       	movw	r30, r6
     524:	23 81       	ldd	r18, Z+3	; 0x03
     526:	f2 01       	movw	r30, r4
     528:	23 fd       	sbrc	r18, 3
     52a:	85 91       	lpm	r24, Z+
     52c:	23 ff       	sbrs	r18, 3
     52e:	81 91       	ld	r24, Z+
     530:	2f 01       	movw	r4, r30
     532:	88 23       	and	r24, r24
     534:	09 f4       	brne	.+2      	; 0x538 <vfprintf+0x46>
     536:	b2 c1       	rjmp	.+868    	; 0x89c <__stack+0x3d>
     538:	85 32       	cpi	r24, 0x25	; 37
     53a:	39 f4       	brne	.+14     	; 0x54a <vfprintf+0x58>
     53c:	23 fd       	sbrc	r18, 3
     53e:	85 91       	lpm	r24, Z+
     540:	23 ff       	sbrs	r18, 3
     542:	81 91       	ld	r24, Z+
     544:	2f 01       	movw	r4, r30
     546:	85 32       	cpi	r24, 0x25	; 37
     548:	29 f4       	brne	.+10     	; 0x554 <vfprintf+0x62>
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	b3 01       	movw	r22, r6
     54e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <fputc>
     552:	e7 cf       	rjmp	.-50     	; 0x522 <vfprintf+0x30>
     554:	98 2f       	mov	r25, r24
     556:	ff 24       	eor	r15, r15
     558:	ee 24       	eor	r14, r14
     55a:	99 24       	eor	r9, r9
     55c:	ff e1       	ldi	r31, 0x1F	; 31
     55e:	ff 15       	cp	r31, r15
     560:	d0 f0       	brcs	.+52     	; 0x596 <vfprintf+0xa4>
     562:	9b 32       	cpi	r25, 0x2B	; 43
     564:	69 f0       	breq	.+26     	; 0x580 <vfprintf+0x8e>
     566:	9c 32       	cpi	r25, 0x2C	; 44
     568:	28 f4       	brcc	.+10     	; 0x574 <vfprintf+0x82>
     56a:	90 32       	cpi	r25, 0x20	; 32
     56c:	59 f0       	breq	.+22     	; 0x584 <vfprintf+0x92>
     56e:	93 32       	cpi	r25, 0x23	; 35
     570:	91 f4       	brne	.+36     	; 0x596 <vfprintf+0xa4>
     572:	0e c0       	rjmp	.+28     	; 0x590 <vfprintf+0x9e>
     574:	9d 32       	cpi	r25, 0x2D	; 45
     576:	49 f0       	breq	.+18     	; 0x58a <vfprintf+0x98>
     578:	90 33       	cpi	r25, 0x30	; 48
     57a:	69 f4       	brne	.+26     	; 0x596 <vfprintf+0xa4>
     57c:	41 e0       	ldi	r20, 0x01	; 1
     57e:	24 c0       	rjmp	.+72     	; 0x5c8 <vfprintf+0xd6>
     580:	52 e0       	ldi	r21, 0x02	; 2
     582:	f5 2a       	or	r15, r21
     584:	84 e0       	ldi	r24, 0x04	; 4
     586:	f8 2a       	or	r15, r24
     588:	28 c0       	rjmp	.+80     	; 0x5da <vfprintf+0xe8>
     58a:	98 e0       	ldi	r25, 0x08	; 8
     58c:	f9 2a       	or	r15, r25
     58e:	25 c0       	rjmp	.+74     	; 0x5da <vfprintf+0xe8>
     590:	e0 e1       	ldi	r30, 0x10	; 16
     592:	fe 2a       	or	r15, r30
     594:	22 c0       	rjmp	.+68     	; 0x5da <vfprintf+0xe8>
     596:	f7 fc       	sbrc	r15, 7
     598:	29 c0       	rjmp	.+82     	; 0x5ec <vfprintf+0xfa>
     59a:	89 2f       	mov	r24, r25
     59c:	80 53       	subi	r24, 0x30	; 48
     59e:	8a 30       	cpi	r24, 0x0A	; 10
     5a0:	70 f4       	brcc	.+28     	; 0x5be <vfprintf+0xcc>
     5a2:	f6 fe       	sbrs	r15, 6
     5a4:	05 c0       	rjmp	.+10     	; 0x5b0 <vfprintf+0xbe>
     5a6:	98 9c       	mul	r9, r8
     5a8:	90 2c       	mov	r9, r0
     5aa:	11 24       	eor	r1, r1
     5ac:	98 0e       	add	r9, r24
     5ae:	15 c0       	rjmp	.+42     	; 0x5da <vfprintf+0xe8>
     5b0:	e8 9c       	mul	r14, r8
     5b2:	e0 2c       	mov	r14, r0
     5b4:	11 24       	eor	r1, r1
     5b6:	e8 0e       	add	r14, r24
     5b8:	f0 e2       	ldi	r31, 0x20	; 32
     5ba:	ff 2a       	or	r15, r31
     5bc:	0e c0       	rjmp	.+28     	; 0x5da <vfprintf+0xe8>
     5be:	9e 32       	cpi	r25, 0x2E	; 46
     5c0:	29 f4       	brne	.+10     	; 0x5cc <vfprintf+0xda>
     5c2:	f6 fc       	sbrc	r15, 6
     5c4:	6b c1       	rjmp	.+726    	; 0x89c <__stack+0x3d>
     5c6:	40 e4       	ldi	r20, 0x40	; 64
     5c8:	f4 2a       	or	r15, r20
     5ca:	07 c0       	rjmp	.+14     	; 0x5da <vfprintf+0xe8>
     5cc:	9c 36       	cpi	r25, 0x6C	; 108
     5ce:	19 f4       	brne	.+6      	; 0x5d6 <vfprintf+0xe4>
     5d0:	50 e8       	ldi	r21, 0x80	; 128
     5d2:	f5 2a       	or	r15, r21
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <vfprintf+0xe8>
     5d6:	98 36       	cpi	r25, 0x68	; 104
     5d8:	49 f4       	brne	.+18     	; 0x5ec <vfprintf+0xfa>
     5da:	f2 01       	movw	r30, r4
     5dc:	23 fd       	sbrc	r18, 3
     5de:	95 91       	lpm	r25, Z+
     5e0:	23 ff       	sbrs	r18, 3
     5e2:	91 91       	ld	r25, Z+
     5e4:	2f 01       	movw	r4, r30
     5e6:	99 23       	and	r25, r25
     5e8:	09 f0       	breq	.+2      	; 0x5ec <vfprintf+0xfa>
     5ea:	b8 cf       	rjmp	.-144    	; 0x55c <vfprintf+0x6a>
     5ec:	89 2f       	mov	r24, r25
     5ee:	85 54       	subi	r24, 0x45	; 69
     5f0:	83 30       	cpi	r24, 0x03	; 3
     5f2:	18 f0       	brcs	.+6      	; 0x5fa <vfprintf+0x108>
     5f4:	80 52       	subi	r24, 0x20	; 32
     5f6:	83 30       	cpi	r24, 0x03	; 3
     5f8:	38 f4       	brcc	.+14     	; 0x608 <vfprintf+0x116>
     5fa:	44 e0       	ldi	r20, 0x04	; 4
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	a4 0e       	add	r10, r20
     600:	b5 1e       	adc	r11, r21
     602:	5f e3       	ldi	r21, 0x3F	; 63
     604:	59 83       	std	Y+1, r21	; 0x01
     606:	0f c0       	rjmp	.+30     	; 0x626 <vfprintf+0x134>
     608:	93 36       	cpi	r25, 0x63	; 99
     60a:	31 f0       	breq	.+12     	; 0x618 <vfprintf+0x126>
     60c:	93 37       	cpi	r25, 0x73	; 115
     60e:	79 f0       	breq	.+30     	; 0x62e <vfprintf+0x13c>
     610:	93 35       	cpi	r25, 0x53	; 83
     612:	09 f0       	breq	.+2      	; 0x616 <vfprintf+0x124>
     614:	56 c0       	rjmp	.+172    	; 0x6c2 <vfprintf+0x1d0>
     616:	20 c0       	rjmp	.+64     	; 0x658 <vfprintf+0x166>
     618:	f5 01       	movw	r30, r10
     61a:	80 81       	ld	r24, Z
     61c:	89 83       	std	Y+1, r24	; 0x01
     61e:	42 e0       	ldi	r20, 0x02	; 2
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	a4 0e       	add	r10, r20
     624:	b5 1e       	adc	r11, r21
     626:	61 01       	movw	r12, r2
     628:	01 e0       	ldi	r16, 0x01	; 1
     62a:	10 e0       	ldi	r17, 0x00	; 0
     62c:	12 c0       	rjmp	.+36     	; 0x652 <vfprintf+0x160>
     62e:	f5 01       	movw	r30, r10
     630:	c0 80       	ld	r12, Z
     632:	d1 80       	ldd	r13, Z+1	; 0x01
     634:	f6 fc       	sbrc	r15, 6
     636:	03 c0       	rjmp	.+6      	; 0x63e <vfprintf+0x14c>
     638:	6f ef       	ldi	r22, 0xFF	; 255
     63a:	7f ef       	ldi	r23, 0xFF	; 255
     63c:	02 c0       	rjmp	.+4      	; 0x642 <vfprintf+0x150>
     63e:	69 2d       	mov	r22, r9
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	42 e0       	ldi	r20, 0x02	; 2
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	a4 0e       	add	r10, r20
     648:	b5 1e       	adc	r11, r21
     64a:	c6 01       	movw	r24, r12
     64c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <strnlen>
     650:	8c 01       	movw	r16, r24
     652:	5f e7       	ldi	r21, 0x7F	; 127
     654:	f5 22       	and	r15, r21
     656:	14 c0       	rjmp	.+40     	; 0x680 <vfprintf+0x18e>
     658:	f5 01       	movw	r30, r10
     65a:	c0 80       	ld	r12, Z
     65c:	d1 80       	ldd	r13, Z+1	; 0x01
     65e:	f6 fc       	sbrc	r15, 6
     660:	03 c0       	rjmp	.+6      	; 0x668 <vfprintf+0x176>
     662:	6f ef       	ldi	r22, 0xFF	; 255
     664:	7f ef       	ldi	r23, 0xFF	; 255
     666:	02 c0       	rjmp	.+4      	; 0x66c <vfprintf+0x17a>
     668:	69 2d       	mov	r22, r9
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	42 e0       	ldi	r20, 0x02	; 2
     66e:	50 e0       	ldi	r21, 0x00	; 0
     670:	a4 0e       	add	r10, r20
     672:	b5 1e       	adc	r11, r21
     674:	c6 01       	movw	r24, r12
     676:	0e 94 56 04 	call	0x8ac	; 0x8ac <strnlen_P>
     67a:	8c 01       	movw	r16, r24
     67c:	50 e8       	ldi	r21, 0x80	; 128
     67e:	f5 2a       	or	r15, r21
     680:	f3 fe       	sbrs	r15, 3
     682:	07 c0       	rjmp	.+14     	; 0x692 <vfprintf+0x1a0>
     684:	1a c0       	rjmp	.+52     	; 0x6ba <vfprintf+0x1c8>
     686:	80 e2       	ldi	r24, 0x20	; 32
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	b3 01       	movw	r22, r6
     68c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <fputc>
     690:	ea 94       	dec	r14
     692:	8e 2d       	mov	r24, r14
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	08 17       	cp	r16, r24
     698:	19 07       	cpc	r17, r25
     69a:	a8 f3       	brcs	.-22     	; 0x686 <vfprintf+0x194>
     69c:	0e c0       	rjmp	.+28     	; 0x6ba <vfprintf+0x1c8>
     69e:	f6 01       	movw	r30, r12
     6a0:	f7 fc       	sbrc	r15, 7
     6a2:	85 91       	lpm	r24, Z+
     6a4:	f7 fe       	sbrs	r15, 7
     6a6:	81 91       	ld	r24, Z+
     6a8:	6f 01       	movw	r12, r30
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	b3 01       	movw	r22, r6
     6ae:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <fputc>
     6b2:	e1 10       	cpse	r14, r1
     6b4:	ea 94       	dec	r14
     6b6:	01 50       	subi	r16, 0x01	; 1
     6b8:	10 40       	sbci	r17, 0x00	; 0
     6ba:	01 15       	cp	r16, r1
     6bc:	11 05       	cpc	r17, r1
     6be:	79 f7       	brne	.-34     	; 0x69e <vfprintf+0x1ac>
     6c0:	ea c0       	rjmp	.+468    	; 0x896 <__stack+0x37>
     6c2:	94 36       	cpi	r25, 0x64	; 100
     6c4:	11 f0       	breq	.+4      	; 0x6ca <vfprintf+0x1d8>
     6c6:	99 36       	cpi	r25, 0x69	; 105
     6c8:	69 f5       	brne	.+90     	; 0x724 <vfprintf+0x232>
     6ca:	f7 fe       	sbrs	r15, 7
     6cc:	08 c0       	rjmp	.+16     	; 0x6de <vfprintf+0x1ec>
     6ce:	f5 01       	movw	r30, r10
     6d0:	20 81       	ld	r18, Z
     6d2:	31 81       	ldd	r19, Z+1	; 0x01
     6d4:	42 81       	ldd	r20, Z+2	; 0x02
     6d6:	53 81       	ldd	r21, Z+3	; 0x03
     6d8:	84 e0       	ldi	r24, 0x04	; 4
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0a c0       	rjmp	.+20     	; 0x6f2 <vfprintf+0x200>
     6de:	f5 01       	movw	r30, r10
     6e0:	80 81       	ld	r24, Z
     6e2:	91 81       	ldd	r25, Z+1	; 0x01
     6e4:	9c 01       	movw	r18, r24
     6e6:	44 27       	eor	r20, r20
     6e8:	37 fd       	sbrc	r19, 7
     6ea:	40 95       	com	r20
     6ec:	54 2f       	mov	r21, r20
     6ee:	82 e0       	ldi	r24, 0x02	; 2
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	a8 0e       	add	r10, r24
     6f4:	b9 1e       	adc	r11, r25
     6f6:	9f e6       	ldi	r25, 0x6F	; 111
     6f8:	f9 22       	and	r15, r25
     6fa:	57 ff       	sbrs	r21, 7
     6fc:	09 c0       	rjmp	.+18     	; 0x710 <vfprintf+0x21e>
     6fe:	50 95       	com	r21
     700:	40 95       	com	r20
     702:	30 95       	com	r19
     704:	21 95       	neg	r18
     706:	3f 4f       	sbci	r19, 0xFF	; 255
     708:	4f 4f       	sbci	r20, 0xFF	; 255
     70a:	5f 4f       	sbci	r21, 0xFF	; 255
     70c:	e0 e8       	ldi	r30, 0x80	; 128
     70e:	fe 2a       	or	r15, r30
     710:	ca 01       	movw	r24, r20
     712:	b9 01       	movw	r22, r18
     714:	a1 01       	movw	r20, r2
     716:	2a e0       	ldi	r18, 0x0A	; 10
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	0e 94 98 04 	call	0x930	; 0x930 <__ultoa_invert>
     71e:	d8 2e       	mov	r13, r24
     720:	d2 18       	sub	r13, r2
     722:	40 c0       	rjmp	.+128    	; 0x7a4 <vfprintf+0x2b2>
     724:	95 37       	cpi	r25, 0x75	; 117
     726:	29 f4       	brne	.+10     	; 0x732 <vfprintf+0x240>
     728:	1f 2d       	mov	r17, r15
     72a:	1f 7e       	andi	r17, 0xEF	; 239
     72c:	2a e0       	ldi	r18, 0x0A	; 10
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	1d c0       	rjmp	.+58     	; 0x76c <vfprintf+0x27a>
     732:	1f 2d       	mov	r17, r15
     734:	19 7f       	andi	r17, 0xF9	; 249
     736:	9f 36       	cpi	r25, 0x6F	; 111
     738:	61 f0       	breq	.+24     	; 0x752 <vfprintf+0x260>
     73a:	90 37       	cpi	r25, 0x70	; 112
     73c:	20 f4       	brcc	.+8      	; 0x746 <vfprintf+0x254>
     73e:	98 35       	cpi	r25, 0x58	; 88
     740:	09 f0       	breq	.+2      	; 0x744 <vfprintf+0x252>
     742:	ac c0       	rjmp	.+344    	; 0x89c <__stack+0x3d>
     744:	0f c0       	rjmp	.+30     	; 0x764 <vfprintf+0x272>
     746:	90 37       	cpi	r25, 0x70	; 112
     748:	39 f0       	breq	.+14     	; 0x758 <vfprintf+0x266>
     74a:	98 37       	cpi	r25, 0x78	; 120
     74c:	09 f0       	breq	.+2      	; 0x750 <vfprintf+0x25e>
     74e:	a6 c0       	rjmp	.+332    	; 0x89c <__stack+0x3d>
     750:	04 c0       	rjmp	.+8      	; 0x75a <vfprintf+0x268>
     752:	28 e0       	ldi	r18, 0x08	; 8
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	0a c0       	rjmp	.+20     	; 0x76c <vfprintf+0x27a>
     758:	10 61       	ori	r17, 0x10	; 16
     75a:	14 fd       	sbrc	r17, 4
     75c:	14 60       	ori	r17, 0x04	; 4
     75e:	20 e1       	ldi	r18, 0x10	; 16
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	04 c0       	rjmp	.+8      	; 0x76c <vfprintf+0x27a>
     764:	14 fd       	sbrc	r17, 4
     766:	16 60       	ori	r17, 0x06	; 6
     768:	20 e1       	ldi	r18, 0x10	; 16
     76a:	32 e0       	ldi	r19, 0x02	; 2
     76c:	17 ff       	sbrs	r17, 7
     76e:	08 c0       	rjmp	.+16     	; 0x780 <vfprintf+0x28e>
     770:	f5 01       	movw	r30, r10
     772:	60 81       	ld	r22, Z
     774:	71 81       	ldd	r23, Z+1	; 0x01
     776:	82 81       	ldd	r24, Z+2	; 0x02
     778:	93 81       	ldd	r25, Z+3	; 0x03
     77a:	44 e0       	ldi	r20, 0x04	; 4
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	08 c0       	rjmp	.+16     	; 0x790 <vfprintf+0x29e>
     780:	f5 01       	movw	r30, r10
     782:	80 81       	ld	r24, Z
     784:	91 81       	ldd	r25, Z+1	; 0x01
     786:	bc 01       	movw	r22, r24
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	42 e0       	ldi	r20, 0x02	; 2
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	a4 0e       	add	r10, r20
     792:	b5 1e       	adc	r11, r21
     794:	a1 01       	movw	r20, r2
     796:	0e 94 98 04 	call	0x930	; 0x930 <__ultoa_invert>
     79a:	d8 2e       	mov	r13, r24
     79c:	d2 18       	sub	r13, r2
     79e:	8f e7       	ldi	r24, 0x7F	; 127
     7a0:	f8 2e       	mov	r15, r24
     7a2:	f1 22       	and	r15, r17
     7a4:	f6 fe       	sbrs	r15, 6
     7a6:	0b c0       	rjmp	.+22     	; 0x7be <vfprintf+0x2cc>
     7a8:	5e ef       	ldi	r21, 0xFE	; 254
     7aa:	f5 22       	and	r15, r21
     7ac:	d9 14       	cp	r13, r9
     7ae:	38 f4       	brcc	.+14     	; 0x7be <vfprintf+0x2cc>
     7b0:	f4 fe       	sbrs	r15, 4
     7b2:	07 c0       	rjmp	.+14     	; 0x7c2 <vfprintf+0x2d0>
     7b4:	f2 fc       	sbrc	r15, 2
     7b6:	05 c0       	rjmp	.+10     	; 0x7c2 <vfprintf+0x2d0>
     7b8:	8f ee       	ldi	r24, 0xEF	; 239
     7ba:	f8 22       	and	r15, r24
     7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <vfprintf+0x2d0>
     7be:	1d 2d       	mov	r17, r13
     7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <vfprintf+0x2d2>
     7c2:	19 2d       	mov	r17, r9
     7c4:	f4 fe       	sbrs	r15, 4
     7c6:	0d c0       	rjmp	.+26     	; 0x7e2 <vfprintf+0x2f0>
     7c8:	fe 01       	movw	r30, r28
     7ca:	ed 0d       	add	r30, r13
     7cc:	f1 1d       	adc	r31, r1
     7ce:	80 81       	ld	r24, Z
     7d0:	80 33       	cpi	r24, 0x30	; 48
     7d2:	19 f4       	brne	.+6      	; 0x7da <vfprintf+0x2e8>
     7d4:	99 ee       	ldi	r25, 0xE9	; 233
     7d6:	f9 22       	and	r15, r25
     7d8:	08 c0       	rjmp	.+16     	; 0x7ea <vfprintf+0x2f8>
     7da:	1f 5f       	subi	r17, 0xFF	; 255
     7dc:	f2 fe       	sbrs	r15, 2
     7de:	05 c0       	rjmp	.+10     	; 0x7ea <vfprintf+0x2f8>
     7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <vfprintf+0x2f6>
     7e2:	8f 2d       	mov	r24, r15
     7e4:	86 78       	andi	r24, 0x86	; 134
     7e6:	09 f0       	breq	.+2      	; 0x7ea <vfprintf+0x2f8>
     7e8:	1f 5f       	subi	r17, 0xFF	; 255
     7ea:	0f 2d       	mov	r16, r15
     7ec:	f3 fc       	sbrc	r15, 3
     7ee:	14 c0       	rjmp	.+40     	; 0x818 <vfprintf+0x326>
     7f0:	f0 fe       	sbrs	r15, 0
     7f2:	0f c0       	rjmp	.+30     	; 0x812 <vfprintf+0x320>
     7f4:	1e 15       	cp	r17, r14
     7f6:	10 f0       	brcs	.+4      	; 0x7fc <vfprintf+0x30a>
     7f8:	9d 2c       	mov	r9, r13
     7fa:	0b c0       	rjmp	.+22     	; 0x812 <vfprintf+0x320>
     7fc:	9d 2c       	mov	r9, r13
     7fe:	9e 0c       	add	r9, r14
     800:	91 1a       	sub	r9, r17
     802:	1e 2d       	mov	r17, r14
     804:	06 c0       	rjmp	.+12     	; 0x812 <vfprintf+0x320>
     806:	80 e2       	ldi	r24, 0x20	; 32
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	b3 01       	movw	r22, r6
     80c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <fputc>
     810:	1f 5f       	subi	r17, 0xFF	; 255
     812:	1e 15       	cp	r17, r14
     814:	c0 f3       	brcs	.-16     	; 0x806 <vfprintf+0x314>
     816:	04 c0       	rjmp	.+8      	; 0x820 <vfprintf+0x32e>
     818:	1e 15       	cp	r17, r14
     81a:	10 f4       	brcc	.+4      	; 0x820 <vfprintf+0x32e>
     81c:	e1 1a       	sub	r14, r17
     81e:	01 c0       	rjmp	.+2      	; 0x822 <vfprintf+0x330>
     820:	ee 24       	eor	r14, r14
     822:	04 ff       	sbrs	r16, 4
     824:	0f c0       	rjmp	.+30     	; 0x844 <vfprintf+0x352>
     826:	80 e3       	ldi	r24, 0x30	; 48
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	b3 01       	movw	r22, r6
     82c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <fputc>
     830:	02 ff       	sbrs	r16, 2
     832:	1d c0       	rjmp	.+58     	; 0x86e <__stack+0xf>
     834:	01 fd       	sbrc	r16, 1
     836:	03 c0       	rjmp	.+6      	; 0x83e <vfprintf+0x34c>
     838:	88 e7       	ldi	r24, 0x78	; 120
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0e c0       	rjmp	.+28     	; 0x85a <vfprintf+0x368>
     83e:	88 e5       	ldi	r24, 0x58	; 88
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0b c0       	rjmp	.+22     	; 0x85a <vfprintf+0x368>
     844:	80 2f       	mov	r24, r16
     846:	86 78       	andi	r24, 0x86	; 134
     848:	91 f0       	breq	.+36     	; 0x86e <__stack+0xf>
     84a:	01 ff       	sbrs	r16, 1
     84c:	02 c0       	rjmp	.+4      	; 0x852 <vfprintf+0x360>
     84e:	8b e2       	ldi	r24, 0x2B	; 43
     850:	01 c0       	rjmp	.+2      	; 0x854 <vfprintf+0x362>
     852:	80 e2       	ldi	r24, 0x20	; 32
     854:	f7 fc       	sbrc	r15, 7
     856:	8d e2       	ldi	r24, 0x2D	; 45
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	b3 01       	movw	r22, r6
     85c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <fputc>
     860:	06 c0       	rjmp	.+12     	; 0x86e <__stack+0xf>
     862:	80 e3       	ldi	r24, 0x30	; 48
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	b3 01       	movw	r22, r6
     868:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <fputc>
     86c:	9a 94       	dec	r9
     86e:	d9 14       	cp	r13, r9
     870:	c0 f3       	brcs	.-16     	; 0x862 <__stack+0x3>
     872:	da 94       	dec	r13
     874:	f1 01       	movw	r30, r2
     876:	ed 0d       	add	r30, r13
     878:	f1 1d       	adc	r31, r1
     87a:	80 81       	ld	r24, Z
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	b3 01       	movw	r22, r6
     880:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <fputc>
     884:	dd 20       	and	r13, r13
     886:	a9 f7       	brne	.-22     	; 0x872 <__stack+0x13>
     888:	06 c0       	rjmp	.+12     	; 0x896 <__stack+0x37>
     88a:	80 e2       	ldi	r24, 0x20	; 32
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	b3 01       	movw	r22, r6
     890:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <fputc>
     894:	ea 94       	dec	r14
     896:	ee 20       	and	r14, r14
     898:	c1 f7       	brne	.-16     	; 0x88a <__stack+0x2b>
     89a:	43 ce       	rjmp	.-890    	; 0x522 <vfprintf+0x30>
     89c:	f3 01       	movw	r30, r6
     89e:	66 81       	ldd	r22, Z+6	; 0x06
     8a0:	77 81       	ldd	r23, Z+7	; 0x07
     8a2:	cb 01       	movw	r24, r22
     8a4:	2b 96       	adiw	r28, 0x0b	; 11
     8a6:	e2 e1       	ldi	r30, 0x12	; 18
     8a8:	0c 94 37 18 	jmp	0x306e	; 0x306e <__epilogue_restores__>

000008ac <strnlen_P>:
     8ac:	fc 01       	movw	r30, r24
     8ae:	05 90       	lpm	r0, Z+
     8b0:	61 50       	subi	r22, 0x01	; 1
     8b2:	70 40       	sbci	r23, 0x00	; 0
     8b4:	01 10       	cpse	r0, r1
     8b6:	d8 f7       	brcc	.-10     	; 0x8ae <strnlen_P+0x2>
     8b8:	80 95       	com	r24
     8ba:	90 95       	com	r25
     8bc:	8e 0f       	add	r24, r30
     8be:	9f 1f       	adc	r25, r31
     8c0:	08 95       	ret

000008c2 <strnlen>:
     8c2:	fc 01       	movw	r30, r24
     8c4:	61 50       	subi	r22, 0x01	; 1
     8c6:	70 40       	sbci	r23, 0x00	; 0
     8c8:	01 90       	ld	r0, Z+
     8ca:	01 10       	cpse	r0, r1
     8cc:	d8 f7       	brcc	.-10     	; 0x8c4 <strnlen+0x2>
     8ce:	80 95       	com	r24
     8d0:	90 95       	com	r25
     8d2:	8e 0f       	add	r24, r30
     8d4:	9f 1f       	adc	r25, r31
     8d6:	08 95       	ret

000008d8 <fputc>:
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	8c 01       	movw	r16, r24
     8e2:	eb 01       	movw	r28, r22
     8e4:	8b 81       	ldd	r24, Y+3	; 0x03
     8e6:	81 ff       	sbrs	r24, 1
     8e8:	1b c0       	rjmp	.+54     	; 0x920 <fputc+0x48>
     8ea:	82 ff       	sbrs	r24, 2
     8ec:	0d c0       	rjmp	.+26     	; 0x908 <fputc+0x30>
     8ee:	2e 81       	ldd	r18, Y+6	; 0x06
     8f0:	3f 81       	ldd	r19, Y+7	; 0x07
     8f2:	8c 81       	ldd	r24, Y+4	; 0x04
     8f4:	9d 81       	ldd	r25, Y+5	; 0x05
     8f6:	28 17       	cp	r18, r24
     8f8:	39 07       	cpc	r19, r25
     8fa:	64 f4       	brge	.+24     	; 0x914 <fputc+0x3c>
     8fc:	e8 81       	ld	r30, Y
     8fe:	f9 81       	ldd	r31, Y+1	; 0x01
     900:	01 93       	st	Z+, r16
     902:	f9 83       	std	Y+1, r31	; 0x01
     904:	e8 83       	st	Y, r30
     906:	06 c0       	rjmp	.+12     	; 0x914 <fputc+0x3c>
     908:	e8 85       	ldd	r30, Y+8	; 0x08
     90a:	f9 85       	ldd	r31, Y+9	; 0x09
     90c:	80 2f       	mov	r24, r16
     90e:	09 95       	icall
     910:	89 2b       	or	r24, r25
     912:	31 f4       	brne	.+12     	; 0x920 <fputc+0x48>
     914:	8e 81       	ldd	r24, Y+6	; 0x06
     916:	9f 81       	ldd	r25, Y+7	; 0x07
     918:	01 96       	adiw	r24, 0x01	; 1
     91a:	9f 83       	std	Y+7, r25	; 0x07
     91c:	8e 83       	std	Y+6, r24	; 0x06
     91e:	02 c0       	rjmp	.+4      	; 0x924 <fputc+0x4c>
     920:	0f ef       	ldi	r16, 0xFF	; 255
     922:	1f ef       	ldi	r17, 0xFF	; 255
     924:	c8 01       	movw	r24, r16
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	08 95       	ret

00000930 <__ultoa_invert>:
     930:	fa 01       	movw	r30, r20
     932:	aa 27       	eor	r26, r26
     934:	28 30       	cpi	r18, 0x08	; 8
     936:	51 f1       	breq	.+84     	; 0x98c <__ultoa_invert+0x5c>
     938:	20 31       	cpi	r18, 0x10	; 16
     93a:	81 f1       	breq	.+96     	; 0x99c <__ultoa_invert+0x6c>
     93c:	e8 94       	clt
     93e:	6f 93       	push	r22
     940:	6e 7f       	andi	r22, 0xFE	; 254
     942:	6e 5f       	subi	r22, 0xFE	; 254
     944:	7f 4f       	sbci	r23, 0xFF	; 255
     946:	8f 4f       	sbci	r24, 0xFF	; 255
     948:	9f 4f       	sbci	r25, 0xFF	; 255
     94a:	af 4f       	sbci	r26, 0xFF	; 255
     94c:	b1 e0       	ldi	r27, 0x01	; 1
     94e:	3e d0       	rcall	.+124    	; 0x9cc <__ultoa_invert+0x9c>
     950:	b4 e0       	ldi	r27, 0x04	; 4
     952:	3c d0       	rcall	.+120    	; 0x9cc <__ultoa_invert+0x9c>
     954:	67 0f       	add	r22, r23
     956:	78 1f       	adc	r23, r24
     958:	89 1f       	adc	r24, r25
     95a:	9a 1f       	adc	r25, r26
     95c:	a1 1d       	adc	r26, r1
     95e:	68 0f       	add	r22, r24
     960:	79 1f       	adc	r23, r25
     962:	8a 1f       	adc	r24, r26
     964:	91 1d       	adc	r25, r1
     966:	a1 1d       	adc	r26, r1
     968:	6a 0f       	add	r22, r26
     96a:	71 1d       	adc	r23, r1
     96c:	81 1d       	adc	r24, r1
     96e:	91 1d       	adc	r25, r1
     970:	a1 1d       	adc	r26, r1
     972:	20 d0       	rcall	.+64     	; 0x9b4 <__ultoa_invert+0x84>
     974:	09 f4       	brne	.+2      	; 0x978 <__ultoa_invert+0x48>
     976:	68 94       	set
     978:	3f 91       	pop	r19
     97a:	2a e0       	ldi	r18, 0x0A	; 10
     97c:	26 9f       	mul	r18, r22
     97e:	11 24       	eor	r1, r1
     980:	30 19       	sub	r19, r0
     982:	30 5d       	subi	r19, 0xD0	; 208
     984:	31 93       	st	Z+, r19
     986:	de f6       	brtc	.-74     	; 0x93e <__ultoa_invert+0xe>
     988:	cf 01       	movw	r24, r30
     98a:	08 95       	ret
     98c:	46 2f       	mov	r20, r22
     98e:	47 70       	andi	r20, 0x07	; 7
     990:	40 5d       	subi	r20, 0xD0	; 208
     992:	41 93       	st	Z+, r20
     994:	b3 e0       	ldi	r27, 0x03	; 3
     996:	0f d0       	rcall	.+30     	; 0x9b6 <__ultoa_invert+0x86>
     998:	c9 f7       	brne	.-14     	; 0x98c <__ultoa_invert+0x5c>
     99a:	f6 cf       	rjmp	.-20     	; 0x988 <__ultoa_invert+0x58>
     99c:	46 2f       	mov	r20, r22
     99e:	4f 70       	andi	r20, 0x0F	; 15
     9a0:	40 5d       	subi	r20, 0xD0	; 208
     9a2:	4a 33       	cpi	r20, 0x3A	; 58
     9a4:	18 f0       	brcs	.+6      	; 0x9ac <__ultoa_invert+0x7c>
     9a6:	49 5d       	subi	r20, 0xD9	; 217
     9a8:	31 fd       	sbrc	r19, 1
     9aa:	40 52       	subi	r20, 0x20	; 32
     9ac:	41 93       	st	Z+, r20
     9ae:	02 d0       	rcall	.+4      	; 0x9b4 <__ultoa_invert+0x84>
     9b0:	a9 f7       	brne	.-22     	; 0x99c <__ultoa_invert+0x6c>
     9b2:	ea cf       	rjmp	.-44     	; 0x988 <__ultoa_invert+0x58>
     9b4:	b4 e0       	ldi	r27, 0x04	; 4
     9b6:	a6 95       	lsr	r26
     9b8:	97 95       	ror	r25
     9ba:	87 95       	ror	r24
     9bc:	77 95       	ror	r23
     9be:	67 95       	ror	r22
     9c0:	ba 95       	dec	r27
     9c2:	c9 f7       	brne	.-14     	; 0x9b6 <__ultoa_invert+0x86>
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	61 05       	cpc	r22, r1
     9c8:	71 05       	cpc	r23, r1
     9ca:	08 95       	ret
     9cc:	9b 01       	movw	r18, r22
     9ce:	ac 01       	movw	r20, r24
     9d0:	0a 2e       	mov	r0, r26
     9d2:	06 94       	lsr	r0
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	37 95       	ror	r19
     9da:	27 95       	ror	r18
     9dc:	ba 95       	dec	r27
     9de:	c9 f7       	brne	.-14     	; 0x9d2 <__ultoa_invert+0xa2>
     9e0:	62 0f       	add	r22, r18
     9e2:	73 1f       	adc	r23, r19
     9e4:	84 1f       	adc	r24, r20
     9e6:	95 1f       	adc	r25, r21
     9e8:	a0 1d       	adc	r26, r0
     9ea:	08 95       	ret

000009ec <delay_ms>:
uchar buf[80];

/**
 * Some basic delay function
 */
void delay_ms(unsigned short ms) {
     9ec:	df 93       	push	r29
     9ee:	cf 93       	push	r28
     9f0:	00 d0       	rcall	.+0      	; 0x9f2 <delay_ms+0x6>
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <delay_ms+0x8>
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <delay_ms+0xa>
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
     9fa:	9e 83       	std	Y+6, r25	; 0x06
     9fc:	8d 83       	std	Y+5, r24	; 0x05
	unsigned short outer1, outer2;
	outer1 = 200 * 12;
     9fe:	80 e6       	ldi	r24, 0x60	; 96
     a00:	99 e0       	ldi	r25, 0x09	; 9
     a02:	9c 83       	std	Y+4, r25	; 0x04
     a04:	8b 83       	std	Y+3, r24	; 0x03
     a06:	1c c0       	rjmp	.+56     	; 0xa40 <delay_ms+0x54>

	while (outer1) {
		outer2 = 100;
     a08:	84 e6       	ldi	r24, 0x64	; 100
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	9a 83       	std	Y+2, r25	; 0x02
     a0e:	89 83       	std	Y+1, r24	; 0x01
     a10:	0e c0       	rjmp	.+28     	; 0xa2e <delay_ms+0x42>
		while (outer2) {
			while (ms)
				ms--;
     a12:	8d 81       	ldd	r24, Y+5	; 0x05
     a14:	9e 81       	ldd	r25, Y+6	; 0x06
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	9e 83       	std	Y+6, r25	; 0x06
     a1a:	8d 83       	std	Y+5, r24	; 0x05
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
			while (ms)
     a1c:	8d 81       	ldd	r24, Y+5	; 0x05
     a1e:	9e 81       	ldd	r25, Y+6	; 0x06
     a20:	00 97       	sbiw	r24, 0x00	; 0
     a22:	b9 f7       	brne	.-18     	; 0xa12 <delay_ms+0x26>
				ms--;
			outer2--;
     a24:	89 81       	ldd	r24, Y+1	; 0x01
     a26:	9a 81       	ldd	r25, Y+2	; 0x02
     a28:	01 97       	sbiw	r24, 0x01	; 1
     a2a:	9a 83       	std	Y+2, r25	; 0x02
     a2c:	89 83       	std	Y+1, r24	; 0x01
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	9a 81       	ldd	r25, Y+2	; 0x02
     a32:	00 97       	sbiw	r24, 0x00	; 0
     a34:	99 f7       	brne	.-26     	; 0xa1c <delay_ms+0x30>
			while (ms)
				ms--;
			outer2--;
		}
		outer1--;
     a36:	8b 81       	ldd	r24, Y+3	; 0x03
     a38:	9c 81       	ldd	r25, Y+4	; 0x04
     a3a:	01 97       	sbiw	r24, 0x01	; 1
     a3c:	9c 83       	std	Y+4, r25	; 0x04
     a3e:	8b 83       	std	Y+3, r24	; 0x03
 */
void delay_ms(unsigned short ms) {
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
     a40:	8b 81       	ldd	r24, Y+3	; 0x03
     a42:	9c 81       	ldd	r25, Y+4	; 0x04
     a44:	00 97       	sbiw	r24, 0x00	; 0
     a46:	01 f7       	brne	.-64     	; 0xa08 <delay_ms+0x1c>
				ms--;
			outer2--;
		}
		outer1--;
	}
}
     a48:	26 96       	adiw	r28, 0x06	; 6
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	de bf       	out	0x3e, r29	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	cd bf       	out	0x3d, r28	; 61
     a54:	cf 91       	pop	r28
     a56:	df 91       	pop	r29
     a58:	08 95       	ret

00000a5a <gpib_init>:
 * Init GPIB pins and variables.
 * \brief All signal lines not related to the controller part
 * 		are initialized with useful values.
 *		(The controller part initialization is done on gpib_controller_assert())
 */
void gpib_init(void) {
     a5a:	df 93       	push	r29
     a5c:	cf 93       	push	r28
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
	// data lines - complete port A as input
	DDRA = 0x00;
     a62:	ea e3       	ldi	r30, 0x3A	; 58
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	10 82       	st	Z, r1

	// handshake lines - on port D , everything as input
	DDRD &= ~_BV(G_DAV); // DAV 
     a68:	a1 e3       	ldi	r26, 0x31	; 49
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	e1 e3       	ldi	r30, 0x31	; 49
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	80 81       	ld	r24, Z
     a72:	8b 7f       	andi	r24, 0xFB	; 251
     a74:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_EOI); // EOI 
     a76:	a1 e3       	ldi	r26, 0x31	; 49
     a78:	b0 e0       	ldi	r27, 0x00	; 0
     a7a:	e1 e3       	ldi	r30, 0x31	; 49
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	80 81       	ld	r24, Z
     a80:	8f 7e       	andi	r24, 0xEF	; 239
     a82:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_SRQ); // SRQ 
     a84:	a1 e3       	ldi	r26, 0x31	; 49
     a86:	b0 e0       	ldi	r27, 0x00	; 0
     a88:	e1 e3       	ldi	r30, 0x31	; 49
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	80 81       	ld	r24, Z
     a8e:	8f 7b       	andi	r24, 0xBF	; 191
     a90:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_ATN); // ATN  
     a92:	a1 e3       	ldi	r26, 0x31	; 49
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	e1 e3       	ldi	r30, 0x31	; 49
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	8f 77       	andi	r24, 0x7F	; 127
     a9e:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_REN); // REN  
     aa0:	a7 e3       	ldi	r26, 0x37	; 55
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	e7 e3       	ldi	r30, 0x37	; 55
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	80 81       	ld	r24, Z
     aaa:	8d 7f       	andi	r24, 0xFD	; 253
     aac:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_IFC); // IFC  
     aae:	a7 e3       	ldi	r26, 0x37	; 55
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
     ab2:	e7 e3       	ldi	r30, 0x37	; 55
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	80 81       	ld	r24, Z
     ab8:	8e 7f       	andi	r24, 0xFE	; 254
     aba:	8c 93       	st	X, r24

	// init handshake lines - not ready for data now
	assign_bit(DDRD, PORTD, G_NRFD);
     abc:	a2 e3       	ldi	r26, 0x32	; 50
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e2 e3       	ldi	r30, 0x32	; 50
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	80 81       	ld	r24, Z
     ac6:	87 7f       	andi	r24, 0xF7	; 247
     ac8:	8c 93       	st	X, r24
     aca:	a1 e3       	ldi	r26, 0x31	; 49
     acc:	b0 e0       	ldi	r27, 0x00	; 0
     ace:	e1 e3       	ldi	r30, 0x31	; 49
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	80 81       	ld	r24, Z
     ad4:	88 60       	ori	r24, 0x08	; 8
     ad6:	8c 93       	st	X, r24
     ad8:	a2 e3       	ldi	r26, 0x32	; 50
     ada:	b0 e0       	ldi	r27, 0x00	; 0
     adc:	e2 e3       	ldi	r30, 0x32	; 50
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	80 81       	ld	r24, Z
     ae2:	87 7f       	andi	r24, 0xF7	; 247
     ae4:	8c 93       	st	X, r24
	// release 'data accepted'
	release_bit(DDRD, PORTD, G_NDAC);
     ae6:	a1 e3       	ldi	r26, 0x31	; 49
     ae8:	b0 e0       	ldi	r27, 0x00	; 0
     aea:	e1 e3       	ldi	r30, 0x31	; 49
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	80 81       	ld	r24, Z
     af0:	8f 7d       	andi	r24, 0xDF	; 223
     af2:	8c 93       	st	X, r24
     af4:	a2 e3       	ldi	r26, 0x32	; 50
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	e2 e3       	ldi	r30, 0x32	; 50
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 81       	ld	r24, Z
     afe:	80 62       	ori	r24, 0x20	; 32
     b00:	8c 93       	st	X, r24
	// initially: ok so far
}
     b02:	cf 91       	pop	r28
     b04:	df 91       	pop	r29
     b06:	08 95       	ret

00000b08 <gpib_send_address>:
 * Sends address bytes to address a partner. Caller of this function must decide
 * if talker or listener address is used.
 * \param primary primary address of device
 * \param secondary secondary address of device
 */
void gpib_send_address(uchar primary, uchar secondary) {
     b08:	df 93       	push	r29
     b0a:	cf 93       	push	r28
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	2c 97       	sbiw	r28, 0x0c	; 12
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	8b 87       	std	Y+11, r24	; 0x0b
     b1e:	6c 87       	std	Y+12, r22	; 0x0c
	uchar controlString[10];
	controlString[0] = primary;
     b20:	8b 85       	ldd	r24, Y+11	; 0x0b
     b22:	89 83       	std	Y+1, r24	; 0x01
	//uart_puts("before talker address p write\r\n");
	gpib_cmd(controlString, 1);
     b24:	ce 01       	movw	r24, r28
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	61 e0       	ldi	r22, 0x01	; 1
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	0e 94 07 08 	call	0x100e	; 0x100e <gpib_cmd>
	// handle secondary address if required
	if (secondary != ADDRESS_NOT_SET) {
     b30:	8c 85       	ldd	r24, Y+12	; 0x0c
     b32:	8f 3f       	cpi	r24, 0xFF	; 255
     b34:	41 f0       	breq	.+16     	; 0xb46 <gpib_send_address+0x3e>
		controlString[0] = secondary;
     b36:	8c 85       	ldd	r24, Y+12	; 0x0c
     b38:	89 83       	std	Y+1, r24	; 0x01
		//uart_puts("before talker address s write\r\n");
		gpib_cmd(controlString, 1);
     b3a:	ce 01       	movw	r24, r28
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	61 e0       	ldi	r22, 0x01	; 1
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	0e 94 07 08 	call	0x100e	; 0x100e <gpib_cmd>
	}
	//uart_puts("after talker address write\r\n");
}
     b46:	2c 96       	adiw	r28, 0x0c	; 12
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	08 95       	ret

00000b58 <gpib_prepare_write>:

/**
 * Prepare partner for writing
 */
void gpib_prepare_write() {
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	2b 97       	sbiw	r28, 0x0b	; 11
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	de bf       	out	0x3e, r29	; 62
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// send UNT and UNL commands (unlisten and untalk)
	gpib_untalkUnlisten();
     b6c:	0e 94 16 06 	call	0xc2c	; 0xc2c <gpib_untalkUnlisten>

	// set device to listener mode
	uchar primary = address2ListenerAddress(gpib_get_partner_pad());
     b70:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <gpib_get_partner_pad>
     b74:	80 5e       	subi	r24, 0xE0	; 224
     b76:	8a 83       	std	Y+2, r24	; 0x02
	uchar secondary =
			(gpib_get_partner_sad() == ADDRESS_NOT_SET) ?
					ADDRESS_NOT_SET :
					secondaryAdressToAdressByte(gpib_get_partner_sad());
     b78:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <gpib_get_partner_sad>
     b7c:	8f 3f       	cpi	r24, 0xFF	; 255
     b7e:	31 f0       	breq	.+12     	; 0xb8c <gpib_prepare_write+0x34>
     b80:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <gpib_get_partner_sad>
     b84:	98 2f       	mov	r25, r24
     b86:	90 66       	ori	r25, 0x60	; 96
     b88:	9b 87       	std	Y+11, r25	; 0x0b
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <gpib_prepare_write+0x38>
     b8c:	8f ef       	ldi	r24, 0xFF	; 255
     b8e:	8b 87       	std	Y+11, r24	; 0x0b
     b90:	9b 85       	ldd	r25, Y+11	; 0x0b
     b92:	99 83       	std	Y+1, r25	; 0x01
	gpib_send_address(primary, secondary);
     b94:	8a 81       	ldd	r24, Y+2	; 0x02
     b96:	69 81       	ldd	r22, Y+1	; 0x01
     b98:	0e 94 84 05 	call	0xb08	; 0xb08 <gpib_send_address>

	// set myself (controller) to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_address());
     b9c:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <gpib_get_address>
     ba0:	80 5c       	subi	r24, 0xC0	; 192
     ba2:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
     ba4:	ce 01       	movw	r24, r28
     ba6:	03 96       	adiw	r24, 0x03	; 3
     ba8:	61 e0       	ldi	r22, 0x01	; 1
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	0e 94 07 08 	call	0x100e	; 0x100e <gpib_cmd>
}
     bb0:	2b 96       	adiw	r28, 0x0b	; 11
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	cf 91       	pop	r28
     bbe:	df 91       	pop	r29
     bc0:	08 95       	ret

00000bc2 <gpib_prepare_read>:

/**
 * Prepare partner for writing
 */
void gpib_prepare_read() {
     bc2:	df 93       	push	r29
     bc4:	cf 93       	push	r28
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
     bca:	2b 97       	sbiw	r28, 0x0b	; 11
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
     bd0:	de bf       	out	0x3e, r29	; 62
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// untalk/unlisten all partners
	gpib_untalkUnlisten();
     bd6:	0e 94 16 06 	call	0xc2c	; 0xc2c <gpib_untalkUnlisten>

	// set myself (controller) to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_address());
     bda:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <gpib_get_address>
     bde:	80 5e       	subi	r24, 0xE0	; 224
     be0:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
     be2:	ce 01       	movw	r24, r28
     be4:	03 96       	adiw	r24, 0x03	; 3
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	0e 94 07 08 	call	0x100e	; 0x100e <gpib_cmd>

	// set device to talker mode
	uchar primary = address2TalkerAddress(gpib_get_partner_pad());
     bee:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <gpib_get_partner_pad>
     bf2:	80 5c       	subi	r24, 0xC0	; 192
     bf4:	8a 83       	std	Y+2, r24	; 0x02
	uchar secondary =
			(gpib_get_partner_sad() == ADDRESS_NOT_SET) ?
					ADDRESS_NOT_SET :
					secondaryAdressToAdressByte(gpib_get_partner_sad());
     bf6:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <gpib_get_partner_sad>
     bfa:	8f 3f       	cpi	r24, 0xFF	; 255
     bfc:	31 f0       	breq	.+12     	; 0xc0a <gpib_prepare_read+0x48>
     bfe:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <gpib_get_partner_sad>
     c02:	98 2f       	mov	r25, r24
     c04:	90 66       	ori	r25, 0x60	; 96
     c06:	9b 87       	std	Y+11, r25	; 0x0b
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <gpib_prepare_read+0x4c>
     c0a:	8f ef       	ldi	r24, 0xFF	; 255
     c0c:	8b 87       	std	Y+11, r24	; 0x0b
     c0e:	9b 85       	ldd	r25, Y+11	; 0x0b
     c10:	99 83       	std	Y+1, r25	; 0x01
	gpib_send_address(primary, secondary);
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	69 81       	ldd	r22, Y+1	; 0x01
     c16:	0e 94 84 05 	call	0xb08	; 0xb08 <gpib_send_address>
}
     c1a:	2b 96       	adiw	r28, 0x0b	; 11
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	08 95       	ret

00000c2c <gpib_untalkUnlisten>:

/**
 * Untalk / unlisten all partners on bus.
 */
void gpib_untalkUnlisten() {
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	28 97       	sbiw	r28, 0x08	; 8
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
     c40:	8f e5       	ldi	r24, 0x5F	; 95
     c42:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     c44:	ce 01       	movw	r24, r28
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	0e 94 07 08 	call	0x100e	; 0x100e <gpib_cmd>
	controlString[0] = G_CMD_UNL;
     c50:	8f e3       	ldi	r24, 0x3F	; 63
     c52:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     c54:	ce 01       	movw	r24, r28
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	0e 94 07 08 	call	0x100e	; 0x100e <gpib_cmd>
}
     c60:	28 96       	adiw	r28, 0x08	; 8
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <gpib_receive>:
 *  \returns		On any error, 0xff is returned. in this case, the value of parameter *_byte is undefined.
 * 		Otherwise the value of the EOI signal line during read is returned. If EOI was assigned, a 0x01 is
 * 		returned. If EOI was not assigned, a 0x00 is returned. Assignment of EOI means that the talker
 * 		is sending the last character for this transmission.
 */
uchar gpib_receive(uchar* _byte) {
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	27 97       	sbiw	r28, 0x07	; 7
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	9e 83       	std	Y+6, r25	; 0x06
     c88:	8d 83       	std	Y+5, r24	; 0x05
	uchar byte, eoi;

	//uart_puts("\n\rgpib_receive()\n\r");

	// handshake: I have not accepted/completed the read so far
	assign_bit(DDRD, PORTD, G_NDAC);
     c8a:	a2 e3       	ldi	r26, 0x32	; 50
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e2 e3       	ldi	r30, 0x32	; 50
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	8f 7d       	andi	r24, 0xDF	; 223
     c96:	8c 93       	st	X, r24
     c98:	a1 e3       	ldi	r26, 0x31	; 49
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	e1 e3       	ldi	r30, 0x31	; 49
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	80 62       	ori	r24, 0x20	; 32
     ca4:	8c 93       	st	X, r24
     ca6:	a2 e3       	ldi	r26, 0x32	; 50
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e2 e3       	ldi	r30, 0x32	; 50
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 7d       	andi	r24, 0xDF	; 223
     cb2:	8c 93       	st	X, r24
	// handshake: release nrfd, means I am ready to receive some data
	release_bit(DDRD, PORTD, G_NRFD);
     cb4:	a1 e3       	ldi	r26, 0x31	; 49
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e1 e3       	ldi	r30, 0x31	; 49
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	87 7f       	andi	r24, 0xF7	; 247
     cc0:	8c 93       	st	X, r24
     cc2:	a2 e3       	ldi	r26, 0x32	; 50
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e2 e3       	ldi	r30, 0x32	; 50
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	88 60       	ori	r24, 0x08	; 8
     cce:	8c 93       	st	X, r24

	//gpib_info();

	// handshake: wait for data valid from talker (then DAV is asserted)
	s=0;
     cd0:	10 92 ea 05 	sts	0x05EA, r1
#ifdef WITH_TIMEOUT
	timeout = s + 5;
     cd4:	80 91 ea 05 	lds	r24, 0x05EA
     cd8:	88 2f       	mov	r24, r24
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	05 96       	adiw	r24, 0x05	; 5
     cde:	9c 83       	std	Y+4, r25	; 0x04
     ce0:	8b 83       	std	Y+3, r24	; 0x03
     ce2:	12 c0       	rjmp	.+36     	; 0xd08 <gpib_receive+0x96>
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     ce4:	80 91 ea 05 	lds	r24, 0x05EA
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	9c 81       	ldd	r25, Y+4	; 0x04
     cf0:	28 17       	cp	r18, r24
     cf2:	39 07       	cpc	r19, r25
     cf4:	49 f4       	brne	.+18     	; 0xd08 <gpib_receive+0x96>
			gpib_info();
     cf6:	0e 94 4b 0b 	call	0x1696	; 0x1696 <gpib_info>
			uart_puts("\n\rError: DAV timeout (1)\n\r");
     cfa:	80 e6       	ldi	r24, 0x60	; 96
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
			return 0xff;
     d02:	8f ef       	ldi	r24, 0xFF	; 255
     d04:	8f 83       	std	Y+7, r24	; 0x07
     d06:	99 c0       	rjmp	.+306    	; 0xe3a <gpib_receive+0x1c8>
	// handshake: wait for data valid from talker (then DAV is asserted)
	s=0;
#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
     d08:	e0 e3       	ldi	r30, 0x30	; 48
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	88 2f       	mov	r24, r24
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	84 70       	andi	r24, 0x04	; 4
     d14:	90 70       	andi	r25, 0x00	; 0
     d16:	00 97       	sbiw	r24, 0x00	; 0
     d18:	49 f0       	breq	.+18     	; 0xd2c <gpib_receive+0xba>
     d1a:	80 91 ea 05 	lds	r24, 0x05EA
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	9c 81       	ldd	r25, Y+4	; 0x04
     d26:	82 17       	cp	r24, r18
     d28:	93 07       	cpc	r25, r19
     d2a:	e4 f6       	brge	.-72     	; 0xce4 <gpib_receive+0x72>
#else
	loop_until_bit_is_clear(PIND,G_DAV);
#endif

	// handshake: assign NRFD, means I am busy now to read data
	assign_bit(DDRD, PORTD, G_NRFD);
     d2c:	a2 e3       	ldi	r26, 0x32	; 50
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e2 e3       	ldi	r30, 0x32	; 50
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	87 7f       	andi	r24, 0xF7	; 247
     d38:	8c 93       	st	X, r24
     d3a:	a1 e3       	ldi	r26, 0x31	; 49
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e1 e3       	ldi	r30, 0x31	; 49
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	88 60       	ori	r24, 0x08	; 8
     d46:	8c 93       	st	X, r24
     d48:	a2 e3       	ldi	r26, 0x32	; 50
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e2 e3       	ldi	r30, 0x32	; 50
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	87 7f       	andi	r24, 0xF7	; 247
     d54:	8c 93       	st	X, r24

	// read in data
	byte = PINA ^ 0xff;
     d56:	e9 e3       	ldi	r30, 0x39	; 57
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	80 95       	com	r24
     d5e:	8a 83       	std	Y+2, r24	; 0x02

	// check if last byte of transmission
	eoi = bit_is_clear(PIND, G_EOI);
     d60:	e0 e3       	ldi	r30, 0x30	; 48
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	88 2f       	mov	r24, r24
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	80 71       	andi	r24, 0x10	; 16
     d6c:	90 70       	andi	r25, 0x00	; 0
     d6e:	19 82       	std	Y+1, r1	; 0x01
     d70:	00 97       	sbiw	r24, 0x00	; 0
     d72:	11 f4       	brne	.+4      	; 0xd78 <gpib_receive+0x106>
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	89 83       	std	Y+1, r24	; 0x01

	// handshake: release ndac, means I have completed/accepted the read
	release_bit(DDRD, PORTD, G_NDAC);
     d78:	a1 e3       	ldi	r26, 0x31	; 49
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e1 e3       	ldi	r30, 0x31	; 49
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	8f 7d       	andi	r24, 0xDF	; 223
     d84:	8c 93       	st	X, r24
     d86:	a2 e3       	ldi	r26, 0x32	; 50
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e2 e3       	ldi	r30, 0x32	; 50
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	80 62       	ori	r24, 0x20	; 32
     d92:	8c 93       	st	X, r24

	// wait until current DAV period is over (then DAV is released)
#ifdef WITH_TIMEOUT
	timeout = s + 5;
     d94:	80 91 ea 05 	lds	r24, 0x05EA
     d98:	88 2f       	mov	r24, r24
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	05 96       	adiw	r24, 0x05	; 5
     d9e:	9c 83       	std	Y+4, r25	; 0x04
     da0:	8b 83       	std	Y+3, r24	; 0x03
     da2:	10 c0       	rjmp	.+32     	; 0xdc4 <gpib_receive+0x152>
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     da4:	80 91 ea 05 	lds	r24, 0x05EA
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	9c 81       	ldd	r25, Y+4	; 0x04
     db0:	28 17       	cp	r18, r24
     db2:	39 07       	cpc	r19, r25
     db4:	39 f4       	brne	.+14     	; 0xdc4 <gpib_receive+0x152>
			uart_puts("\n\rError: DAV timeout (2)\n\r");
     db6:	8b e7       	ldi	r24, 0x7B	; 123
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
			return 0xff;
     dbe:	8f ef       	ldi	r24, 0xFF	; 255
     dc0:	8f 83       	std	Y+7, r24	; 0x07
     dc2:	3b c0       	rjmp	.+118    	; 0xe3a <gpib_receive+0x1c8>

	// wait until current DAV period is over (then DAV is released)
#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
     dc4:	e0 e3       	ldi	r30, 0x30	; 48
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	88 2f       	mov	r24, r24
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	84 70       	andi	r24, 0x04	; 4
     dd0:	90 70       	andi	r25, 0x00	; 0
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	49 f4       	brne	.+18     	; 0xde8 <gpib_receive+0x176>
     dd6:	80 91 ea 05 	lds	r24, 0x05EA
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	9c 81       	ldd	r25, Y+4	; 0x04
     de2:	82 17       	cp	r24, r18
     de4:	93 07       	cpc	r25, r19
     de6:	f4 f6       	brge	.-68     	; 0xda4 <gpib_receive+0x132>
	}
#else
	loop_until_bit_is_set(PIND,G_DAV);
#endif

	*_byte = byte;
     de8:	ed 81       	ldd	r30, Y+5	; 0x05
     dea:	fe 81       	ldd	r31, Y+6	; 0x06
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	80 83       	st	Z, r24

	assign_bit(DDRD, PORTD, G_NDAC);
     df0:	a2 e3       	ldi	r26, 0x32	; 50
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e2 e3       	ldi	r30, 0x32	; 50
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8f 7d       	andi	r24, 0xDF	; 223
     dfc:	8c 93       	st	X, r24
     dfe:	a1 e3       	ldi	r26, 0x31	; 49
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e1 e3       	ldi	r30, 0x31	; 49
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	80 62       	ori	r24, 0x20	; 32
     e0a:	8c 93       	st	X, r24
     e0c:	a2 e3       	ldi	r26, 0x32	; 50
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e2 e3       	ldi	r30, 0x32	; 50
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	8f 7d       	andi	r24, 0xDF	; 223
     e18:	8c 93       	st	X, r24
	release_bit(DDRD, PORTD, G_NRFD);
     e1a:	a1 e3       	ldi	r26, 0x31	; 49
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e1 e3       	ldi	r30, 0x31	; 49
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	87 7f       	andi	r24, 0xF7	; 247
     e26:	8c 93       	st	X, r24
     e28:	a2 e3       	ldi	r26, 0x32	; 50
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e2 e3       	ldi	r30, 0x32	; 50
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	88 60       	ori	r24, 0x08	; 8
     e34:	8c 93       	st	X, r24

	return eoi;
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	8f 83       	std	Y+7, r24	; 0x07
     e3a:	8f 81       	ldd	r24, Y+7	; 0x07
}
     e3c:	27 96       	adiw	r28, 0x07	; 7
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <gpib_read_until_eoi>:
#endif

/**
 * Reads the answer until EOI is detected (then e becomes true)
 */
void gpib_read_until_eoi(uint8_t machineOutput, uint8_t linebreak) {
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	00 d0       	rcall	.+0      	; 0xe54 <gpib_read_until_eoi+0x6>
     e54:	00 d0       	rcall	.+0      	; 0xe56 <gpib_read_until_eoi+0x8>
     e56:	00 d0       	rcall	.+0      	; 0xe58 <gpib_read_until_eoi+0xa>
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	8c 83       	std	Y+4, r24	; 0x04
     e5e:	6d 83       	std	Y+5, r22	; 0x05
	uchar b, e;
	uchar colptr = 0;
     e60:	19 82       	std	Y+1, r1	; 0x01

	if (controller.talks == 1) {
     e62:	80 91 8f 04 	lds	r24, 0x048F
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	21 f4       	brne	.+8      	; 0xe72 <gpib_read_until_eoi+0x24>
		uart_puts("\n\rError: You shall not talk to yourself.\n\r");
     e6a:	86 e9       	ldi	r24, 0x96	; 150
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
	do {
		// gpib bus receive
#ifdef FAKE_READ
		e = fake_receive(&b);
#else
		e = gpib_receive(&b);
     e72:	ce 01       	movw	r24, r28
     e74:	03 96       	adiw	r24, 0x03	; 3
     e76:	0e 94 39 06 	call	0xc72	; 0xc72 <gpib_receive>
     e7a:	8a 83       	std	Y+2, r24	; 0x02
#endif
		if (machineOutput && (e == 0xff)) {
     e7c:	8c 81       	ldd	r24, Y+4	; 0x04
     e7e:	88 23       	and	r24, r24
     e80:	41 f0       	breq	.+16     	; 0xe92 <gpib_read_until_eoi+0x44>
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	8f 3f       	cpi	r24, 0xFF	; 255
     e86:	29 f4       	brne	.+10     	; 0xe92 <gpib_read_until_eoi+0x44>
				uart_puts("[ERREOI]");
     e88:	81 ec       	ldi	r24, 0xC1	; 193
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
     e90:	1b c0       	rjmp	.+54     	; 0xec8 <gpib_read_until_eoi+0x7a>
				return;
		}
		// write out character
		uart_putc(b);
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <uart_putc>

		if (linebreak && (colptr++ == linebreak)) {
     e98:	8d 81       	ldd	r24, Y+5	; 0x05
     e9a:	88 23       	and	r24, r24
     e9c:	91 f0       	breq	.+36     	; 0xec2 <gpib_read_until_eoi+0x74>
     e9e:	1e 82       	std	Y+6, r1	; 0x06
     ea0:	99 81       	ldd	r25, Y+1	; 0x01
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	98 17       	cp	r25, r24
     ea6:	11 f4       	brne	.+4      	; 0xeac <gpib_read_until_eoi+0x5e>
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	8e 83       	std	Y+6, r24	; 0x06
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	8f 5f       	subi	r24, 0xFF	; 255
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	8e 81       	ldd	r24, Y+6	; 0x06
     eb4:	88 23       	and	r24, r24
     eb6:	29 f0       	breq	.+10     	; 0xec2 <gpib_read_until_eoi+0x74>
			uart_puts_P("\n\r");
     eb8:	84 e5       	ldi	r24, 0x54	; 84
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
			colptr = 0;
     ec0:	19 82       	std	Y+1, r1	; 0x01
		}

	} while (!e);
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	88 23       	and	r24, r24
     ec6:	a9 f2       	breq	.-86     	; 0xe72 <gpib_read_until_eoi+0x24>
}
     ec8:	26 96       	adiw	r28, 0x06	; 6
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <gpib_controller_assign>:
 * You have to change the initialization of the partner array according to your environment.
 * The partners-array is used by gpib_serial_poll() for looping over all existing devices.
 * 
 * \param address the address to be used by the controller. Usually 0x00.
 */
void gpib_controller_assign(uchar address) {
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	0f 92       	push	r0
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	89 83       	std	Y+1, r24	; 0x01
	controller.myaddress = address;
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	80 93 8c 04 	sts	0x048C, r24
	controller.talks = 0;
     eec:	10 92 8f 04 	sts	0x048F, r1
	controller.partner.primary = ADDRESS_NOT_SET; // init default active partner
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	80 93 8d 04 	sts	0x048D, r24
	controller.partner.secondary = ADDRESS_NOT_SET;
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	80 93 8e 04 	sts	0x048E, r24
	controller.flavour = FLAVOUR_NONE;
     efc:	10 92 90 04 	sts	0x0490, r1
	/** clear list of partners */
	gpib_clear_partners();
     f00:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <gpib_clear_partners>
// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     f04:	a8 e3       	ldi	r26, 0x38	; 56
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e8 e3       	ldi	r30, 0x38	; 56
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	8e 7f       	andi	r24, 0xFE	; 254
     f10:	8c 93       	st	X, r24
     f12:	a7 e3       	ldi	r26, 0x37	; 55
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e7 e3       	ldi	r30, 0x37	; 55
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	81 60       	ori	r24, 0x01	; 1
     f1e:	8c 93       	st	X, r24
     f20:	a8 e3       	ldi	r26, 0x38	; 56
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e8 e3       	ldi	r30, 0x38	; 56
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	8e 7f       	andi	r24, 0xFE	; 254
     f2c:	8c 93       	st	X, r24
	delay_ms(200);
     f2e:	88 ec       	ldi	r24, 0xC8	; 200
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 f6 04 	call	0x9ec	; 0x9ec <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     f36:	a7 e3       	ldi	r26, 0x37	; 55
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e7 e3       	ldi	r30, 0x37	; 55
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	8e 7f       	andi	r24, 0xFE	; 254
     f42:	8c 93       	st	X, r24
     f44:	a8 e3       	ldi	r26, 0x38	; 56
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e8 e3       	ldi	r30, 0x38	; 56
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	81 60       	ori	r24, 0x01	; 1
     f50:	8c 93       	st	X, r24
// set up all devices for remote control
	assign_bit(DDRB, PORTB, G_REN);
     f52:	a8 e3       	ldi	r26, 0x38	; 56
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e8 e3       	ldi	r30, 0x38	; 56
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8d 7f       	andi	r24, 0xFD	; 253
     f5e:	8c 93       	st	X, r24
     f60:	a7 e3       	ldi	r26, 0x37	; 55
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e7 e3       	ldi	r30, 0x37	; 55
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	82 60       	ori	r24, 0x02	; 2
     f6c:	8c 93       	st	X, r24
     f6e:	a8 e3       	ldi	r26, 0x38	; 56
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e8 e3       	ldi	r30, 0x38	; 56
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	8d 7f       	andi	r24, 0xFD	; 253
     f7a:	8c 93       	st	X, r24

// DCL - device clear for all devices on bus
	cmd_buf[0] = G_CMD_DCL;
     f7c:	84 e1       	ldi	r24, 0x14	; 20
     f7e:	80 93 35 05 	sts	0x0535, r24
	gpib_cmd(cmd_buf, 1);
     f82:	85 e3       	ldi	r24, 0x35	; 53
     f84:	95 e0       	ldi	r25, 0x05	; 5
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	0e 94 07 08 	call	0x100e	; 0x100e <gpib_cmd>
}
     f8e:	0f 90       	pop	r0
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <gpib_controller_release>:

/**
 * Release bus 
 */
void gpib_controller_release(void) {
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     f9e:	a8 e3       	ldi	r26, 0x38	; 56
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e8 e3       	ldi	r30, 0x38	; 56
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	8e 7f       	andi	r24, 0xFE	; 254
     faa:	8c 93       	st	X, r24
     fac:	a7 e3       	ldi	r26, 0x37	; 55
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e7 e3       	ldi	r30, 0x37	; 55
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	81 60       	ori	r24, 0x01	; 1
     fb8:	8c 93       	st	X, r24
     fba:	a8 e3       	ldi	r26, 0x38	; 56
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e8 e3       	ldi	r30, 0x38	; 56
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8e 7f       	andi	r24, 0xFE	; 254
     fc6:	8c 93       	st	X, r24
	delay_ms(200);
     fc8:	88 ec       	ldi	r24, 0xC8	; 200
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 f6 04 	call	0x9ec	; 0x9ec <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     fd0:	a7 e3       	ldi	r26, 0x37	; 55
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e7 e3       	ldi	r30, 0x37	; 55
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8e 7f       	andi	r24, 0xFE	; 254
     fdc:	8c 93       	st	X, r24
     fde:	a8 e3       	ldi	r26, 0x38	; 56
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e8 e3       	ldi	r30, 0x38	; 56
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	81 60       	ori	r24, 0x01	; 1
     fea:	8c 93       	st	X, r24
// set up all devices for local control
	release_bit(DDRB, PORTB, G_REN);
     fec:	a7 e3       	ldi	r26, 0x37	; 55
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e7 e3       	ldi	r30, 0x37	; 55
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	8d 7f       	andi	r24, 0xFD	; 253
     ff8:	8c 93       	st	X, r24
     ffa:	a8 e3       	ldi	r26, 0x38	; 56
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e8 e3       	ldi	r30, 0x38	; 56
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	82 60       	ori	r24, 0x02	; 2
    1006:	8c 93       	st	X, r24
}
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <gpib_cmd>:
 * \param bytes byte array containing bytes to be send
 * \param length length of valid bytes in byte array or zero.
 * for binary data, lenght must be defined. For strings, length can be set to zero. Then the length of
 * the string is calculated internally.
 */
uchar gpib_cmd(uchar *bytes, int length) {
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	2b 97       	sbiw	r28, 0x0b	; 11
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	9f 83       	std	Y+7, r25	; 0x07
    1024:	8e 83       	std	Y+6, r24	; 0x06
    1026:	79 87       	std	Y+9, r23	; 0x09
    1028:	68 87       	std	Y+8, r22	; 0x08
	uchar c;
	int i;
// set attention arg true for commands
	uchar attention = 1;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	8a 83       	std	Y+2, r24	; 0x02

	gpib_write_prologue(attention);
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	0e 94 63 08 	call	0x10c6	; 0x10c6 <gpib_write_prologue>

	if (length == 0) {
    1034:	88 85       	ldd	r24, Y+8	; 0x08
    1036:	99 85       	ldd	r25, Y+9	; 0x09
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	31 f4       	brne	.+12     	; 0x1048 <gpib_cmd+0x3a>
		// length==0 means this is a common C string, null-terminated.
		// then, length can be easily calculated
		length = strlen((char*) bytes);
    103c:	8e 81       	ldd	r24, Y+6	; 0x06
    103e:	9f 81       	ldd	r25, Y+7	; 0x07
    1040:	0e 94 04 02 	call	0x408	; 0x408 <strlen>
    1044:	99 87       	std	Y+9, r25	; 0x09
    1046:	88 87       	std	Y+8, r24	; 0x08
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif

	for (i = 0; i < length; i++) {
    1048:	1c 82       	std	Y+4, r1	; 0x04
    104a:	1b 82       	std	Y+3, r1	; 0x03
    104c:	28 c0       	rjmp	.+80     	; 0x109e <gpib_cmd+0x90>
		// put data on bus
		c = bytes[i];
    104e:	2b 81       	ldd	r18, Y+3	; 0x03
    1050:	3c 81       	ldd	r19, Y+4	; 0x04
    1052:	8e 81       	ldd	r24, Y+6	; 0x06
    1054:	9f 81       	ldd	r25, Y+7	; 0x07
    1056:	fc 01       	movw	r30, r24
    1058:	e2 0f       	add	r30, r18
    105a:	f3 1f       	adc	r31, r19
    105c:	80 81       	ld	r24, Z
    105e:	8d 83       	std	Y+5, r24	; 0x05
		//sprintf( buf, "char: %c\n\r", c );
		//uart_puts(buf);

		uchar isLastByte = (i == length - 1) && !attention;
    1060:	88 85       	ldd	r24, Y+8	; 0x08
    1062:	99 85       	ldd	r25, Y+9	; 0x09
    1064:	9c 01       	movw	r18, r24
    1066:	21 50       	subi	r18, 0x01	; 1
    1068:	30 40       	sbci	r19, 0x00	; 0
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	28 17       	cp	r18, r24
    1070:	39 07       	cpc	r19, r25
    1072:	41 f4       	brne	.+16     	; 0x1084 <gpib_cmd+0x76>
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	88 23       	and	r24, r24
    1078:	29 f4       	brne	.+10     	; 0x1084 <gpib_cmd+0x76>
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	9b 87       	std	Y+11, r25	; 0x0b
    1080:	8a 87       	std	Y+10, r24	; 0x0a
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <gpib_cmd+0x7a>
    1084:	1b 86       	std	Y+11, r1	; 0x0b
    1086:	1a 86       	std	Y+10, r1	; 0x0a
    1088:	9a 85       	ldd	r25, Y+10	; 0x0a
    108a:	99 83       	std	Y+1, r25	; 0x01
		gpib_write_byte(c, isLastByte);
    108c:	8d 81       	ldd	r24, Y+5	; 0x05
    108e:	69 81       	ldd	r22, Y+1	; 0x01
    1090:	0e 94 1c 09 	call	0x1238	; 0x1238 <gpib_write_byte>
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif

	for (i = 0; i < length; i++) {
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	9c 81       	ldd	r25, Y+4	; 0x04
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	9c 83       	std	Y+4, r25	; 0x04
    109c:	8b 83       	std	Y+3, r24	; 0x03
    109e:	2b 81       	ldd	r18, Y+3	; 0x03
    10a0:	3c 81       	ldd	r19, Y+4	; 0x04
    10a2:	88 85       	ldd	r24, Y+8	; 0x08
    10a4:	99 85       	ldd	r25, Y+9	; 0x09
    10a6:	28 17       	cp	r18, r24
    10a8:	39 07       	cpc	r19, r25
    10aa:	8c f2       	brlt	.-94     	; 0x104e <gpib_cmd+0x40>

		uchar isLastByte = (i == length - 1) && !attention;
		gpib_write_byte(c, isLastByte);
	}

	gpib_write_epilogue(attention);
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	0e 94 b2 08 	call	0x1164	; 0x1164 <gpib_write_epilogue>

	return 0x00;
    10b2:	80 e0       	ldi	r24, 0x00	; 0
}
    10b4:	2b 96       	adiw	r28, 0x0b	; 11
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <gpib_write_prologue>:

/**
 * Emits prologue before writing to a listener.
 *
 */
void gpib_write_prologue(uchar attention) {
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	0f 92       	push	r0
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	89 83       	std	Y+1, r24	; 0x01
// set talks state. This is used by ISR to recognize own talk
// (controller must not talk to itself and must not take part in listener handshake when talking)
	controller.talks = 1;
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	80 93 8f 04 	sts	0x048F, r24
	if (attention) {
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	88 23       	and	r24, r24
    10dc:	a9 f0       	breq	.+42     	; 0x1108 <gpib_write_prologue+0x42>
		//uart_puts("\n\rgpib_controller_write()\n\r");
		// assign ATN for commands
		assign_bit(DDRD, PORTD, G_ATN);
    10de:	a2 e3       	ldi	r26, 0x32	; 50
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e2 e3       	ldi	r30, 0x32	; 50
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	8f 77       	andi	r24, 0x7F	; 127
    10ea:	8c 93       	st	X, r24
    10ec:	a1 e3       	ldi	r26, 0x31	; 49
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e1 e3       	ldi	r30, 0x31	; 49
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	80 68       	ori	r24, 0x80	; 128
    10f8:	8c 93       	st	X, r24
    10fa:	a2 e3       	ldi	r26, 0x32	; 50
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e2 e3       	ldi	r30, 0x32	; 50
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	8f 77       	andi	r24, 0x7F	; 127
    1106:	8c 93       	st	X, r24
	}
// release EOI during transmission
	release_bit(DDRD, PORTD, G_EOI);
    1108:	a1 e3       	ldi	r26, 0x31	; 49
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e1 e3       	ldi	r30, 0x31	; 49
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	8f 7e       	andi	r24, 0xEF	; 239
    1114:	8c 93       	st	X, r24
    1116:	a2 e3       	ldi	r26, 0x32	; 50
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e2 e3       	ldi	r30, 0x32	; 50
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	80 61       	ori	r24, 0x10	; 16
    1122:	8c 93       	st	X, r24
// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
    1124:	a1 e3       	ldi	r26, 0x31	; 49
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e1 e3       	ldi	r30, 0x31	; 49
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	8b 7f       	andi	r24, 0xFB	; 251
    1130:	8c 93       	st	X, r24
    1132:	a2 e3       	ldi	r26, 0x32	; 50
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e2 e3       	ldi	r30, 0x32	; 50
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	84 60       	ori	r24, 0x04	; 4
    113e:	8c 93       	st	X, r24
// release NRFD (just to be sure)
	release_bit(DDRD, PORTD, G_NRFD);
    1140:	a1 e3       	ldi	r26, 0x31	; 49
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e1 e3       	ldi	r30, 0x31	; 49
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	87 7f       	andi	r24, 0xF7	; 247
    114c:	8c 93       	st	X, r24
    114e:	a2 e3       	ldi	r26, 0x32	; 50
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e2 e3       	ldi	r30, 0x32	; 50
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	88 60       	ori	r24, 0x08	; 8
    115a:	8c 93       	st	X, r24
}
    115c:	0f 90       	pop	r0
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <gpib_write_epilogue>:

/**
 * Emits epilogue after writing to a listener.
 *
 */
void gpib_write_epilogue(uchar attention) {
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	0f 92       	push	r0
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	89 83       	std	Y+1, r24	; 0x01
	if (attention) {
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	88 23       	and	r24, r24
    1174:	71 f0       	breq	.+28     	; 0x1192 <gpib_write_epilogue+0x2e>
		// assign ATN for commands
		release_bit(DDRD, PORTD, G_ATN);
    1176:	a1 e3       	ldi	r26, 0x31	; 49
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e1 e3       	ldi	r30, 0x31	; 49
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	8f 77       	andi	r24, 0x7F	; 127
    1182:	8c 93       	st	X, r24
    1184:	a2 e3       	ldi	r26, 0x32	; 50
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e2 e3       	ldi	r30, 0x32	; 50
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	80 68       	ori	r24, 0x80	; 128
    1190:	8c 93       	st	X, r24
	}
// clear talk state.Controller does not talk anymore.
	controller.talks = 0;
    1192:	10 92 8f 04 	sts	0x048F, r1
}
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <gpib_write_command>:
 * - prefix with GPIB write prologue
 * - the string
 * - postfix with GPIB epilogue
 * - postfix that untalks/unlistens all partners
 */
void gpib_write_command(uchar *s) {
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <gpib_write_command+0x6>
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	9a 83       	std	Y+2, r25	; 0x02
    11aa:	89 83       	std	Y+1, r24	; 0x01
	gpib_prepare_write();
    11ac:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_prepare_write>
	gpib_write_prologue(0);
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	0e 94 63 08 	call	0x10c6	; 0x10c6 <gpib_write_prologue>
	gpib_write_string(s);
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ba:	0e 94 ed 08 	call	0x11da	; 0x11da <gpib_write_string>
	gpib_write_byte(ASCII_CODE_CR, 1);
    11be:	8d e0       	ldi	r24, 0x0D	; 13
    11c0:	61 e0       	ldi	r22, 0x01	; 1
    11c2:	0e 94 1c 09 	call	0x1238	; 0x1238 <gpib_write_byte>
	gpib_write_epilogue(0);
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	0e 94 b2 08 	call	0x1164	; 0x1164 <gpib_write_epilogue>
	gpib_untalkUnlisten();
    11cc:	0e 94 16 06 	call	0xc2c	; 0xc2c <gpib_untalkUnlisten>
}
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <gpib_write_string>:

/**
 * Write string. Only the raw string is written, no prefix and no postfix.
 */
void gpib_write_string(uchar *s) {
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <gpib_write_string+0xa>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <gpib_write_string+0xc>
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	9c 83       	std	Y+4, r25	; 0x04
    11ec:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < strlen(s); i++) {
    11ee:	1a 82       	std	Y+2, r1	; 0x02
    11f0:	19 82       	std	Y+1, r1	; 0x01
    11f2:	10 c0       	rjmp	.+32     	; 0x1214 <gpib_write_string+0x3a>
		gpib_write_byte(s[i], 0);
    11f4:	29 81       	ldd	r18, Y+1	; 0x01
    11f6:	3a 81       	ldd	r19, Y+2	; 0x02
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	fc 01       	movw	r30, r24
    11fe:	e2 0f       	add	r30, r18
    1200:	f3 1f       	adc	r31, r19
    1202:	80 81       	ld	r24, Z
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	0e 94 1c 09 	call	0x1238	; 0x1238 <gpib_write_byte>

/**
 * Write string. Only the raw string is written, no prefix and no postfix.
 */
void gpib_write_string(uchar *s) {
	for (int i = 0; i < strlen(s); i++) {
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	9a 81       	ldd	r25, Y+2	; 0x02
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	9a 83       	std	Y+2, r25	; 0x02
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	09 81       	ldd	r16, Y+1	; 0x01
    1216:	1a 81       	ldd	r17, Y+2	; 0x02
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	0e 94 04 02 	call	0x408	; 0x408 <strlen>
    1220:	08 17       	cp	r16, r24
    1222:	19 07       	cpc	r17, r25
    1224:	38 f3       	brcs	.-50     	; 0x11f4 <gpib_write_string+0x1a>
		gpib_write_byte(s[i], 0);
	}
}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	08 95       	ret

00001238 <gpib_write_byte>:

/**
 * Emits single byte to GPIB port pins.
 */
uchar gpib_write_byte(uchar c, uchar isLastByte) {
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	00 d0       	rcall	.+0      	; 0x123e <gpib_write_byte+0x6>
    123e:	00 d0       	rcall	.+0      	; 0x1240 <gpib_write_byte+0x8>
    1240:	0f 92       	push	r0
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	8b 83       	std	Y+3, r24	; 0x03
    1248:	6c 83       	std	Y+4, r22	; 0x04
	int timeout;

// wait for NDAC assign from all listeners
	release_bit(DDRD, PORTD, G_NDAC);
    124a:	a1 e3       	ldi	r26, 0x31	; 49
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e1 e3       	ldi	r30, 0x31	; 49
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	8f 7d       	andi	r24, 0xDF	; 223
    1256:	8c 93       	st	X, r24
    1258:	a2 e3       	ldi	r26, 0x32	; 50
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e2 e3       	ldi	r30, 0x32	; 50
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	80 62       	ori	r24, 0x20	; 32
    1264:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
	timeout = s + 5;
    1266:	80 91 ea 05 	lds	r24, 0x05EA
    126a:	88 2f       	mov	r24, r24
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	05 96       	adiw	r24, 0x05	; 5
    1270:	9a 83       	std	Y+2, r25	; 0x02
    1272:	89 83       	std	Y+1, r24	; 0x01
    1274:	10 c0       	rjmp	.+32     	; 0x1296 <gpib_write_byte+0x5e>
//gpib_info();
	while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
		if (s == timeout) {
    1276:	80 91 ea 05 	lds	r24, 0x05EA
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	9a 81       	ldd	r25, Y+2	; 0x02
    1282:	28 17       	cp	r18, r24
    1284:	39 07       	cpc	r19, r25
    1286:	39 f4       	brne	.+14     	; 0x1296 <gpib_write_byte+0x5e>
			uart_puts("\n\rError: NDAC timeout\n\r");
    1288:	8a ec       	ldi	r24, 0xCA	; 202
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
			return 0xff;
    1290:	8f ef       	ldi	r24, 0xFF	; 255
    1292:	8d 83       	std	Y+5, r24	; 0x05
    1294:	f7 c1       	rjmp	.+1006   	; 0x1684 <gpib_write_byte+0x44c>
// wait for NDAC assign from all listeners
	release_bit(DDRD, PORTD, G_NDAC);
#ifdef WITH_TIMEOUT
	timeout = s + 5;
//gpib_info();
	while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
    1296:	e0 e3       	ldi	r30, 0x30	; 48
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	80 72       	andi	r24, 0x20	; 32
    12a2:	90 70       	andi	r25, 0x00	; 0
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	49 f0       	breq	.+18     	; 0x12ba <gpib_write_byte+0x82>
    12a8:	80 91 ea 05 	lds	r24, 0x05EA
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	82 17       	cp	r24, r18
    12b6:	93 07       	cpc	r25, r19
    12b8:	f4 f6       	brge	.-68     	; 0x1276 <gpib_write_byte+0x3e>
	}
#else
	loop_until_bit_is_clear(PIND,G_NDAC);
#endif

	DDRA = 0x00;
    12ba:	ea e3       	ldi	r30, 0x3A	; 58
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	10 82       	st	Z, r1
	if (c & 0x01) {
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	88 2f       	mov	r24, r24
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	81 70       	andi	r24, 0x01	; 1
    12c8:	90 70       	andi	r25, 0x00	; 0
    12ca:	88 23       	and	r24, r24
    12cc:	b1 f0       	breq	.+44     	; 0x12fa <gpib_write_byte+0xc2>
		assign_bit(DDRA, PORTA, PA0);
    12ce:	ab e3       	ldi	r26, 0x3B	; 59
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	eb e3       	ldi	r30, 0x3B	; 59
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	8e 7f       	andi	r24, 0xFE	; 254
    12da:	8c 93       	st	X, r24
    12dc:	aa e3       	ldi	r26, 0x3A	; 58
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	ea e3       	ldi	r30, 0x3A	; 58
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	81 60       	ori	r24, 0x01	; 1
    12e8:	8c 93       	st	X, r24
    12ea:	ab e3       	ldi	r26, 0x3B	; 59
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	eb e3       	ldi	r30, 0x3B	; 59
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	8e 7f       	andi	r24, 0xFE	; 254
    12f6:	8c 93       	st	X, r24
    12f8:	0e c0       	rjmp	.+28     	; 0x1316 <gpib_write_byte+0xde>
	} else {
		release_bit(DDRA, PORTA, PA0)
    12fa:	aa e3       	ldi	r26, 0x3A	; 58
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	ea e3       	ldi	r30, 0x3A	; 58
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8e 7f       	andi	r24, 0xFE	; 254
    1306:	8c 93       	st	X, r24
    1308:	ab e3       	ldi	r26, 0x3B	; 59
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	eb e3       	ldi	r30, 0x3B	; 59
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	81 60       	ori	r24, 0x01	; 1
    1314:	8c 93       	st	X, r24
	}
	if (c & 0x02) {
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	88 2f       	mov	r24, r24
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	82 70       	andi	r24, 0x02	; 2
    131e:	90 70       	andi	r25, 0x00	; 0
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	b1 f0       	breq	.+44     	; 0x1350 <gpib_write_byte+0x118>
		assign_bit(DDRA, PORTA, PA1)
    1324:	ab e3       	ldi	r26, 0x3B	; 59
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	eb e3       	ldi	r30, 0x3B	; 59
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	8d 7f       	andi	r24, 0xFD	; 253
    1330:	8c 93       	st	X, r24
    1332:	aa e3       	ldi	r26, 0x3A	; 58
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	ea e3       	ldi	r30, 0x3A	; 58
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	82 60       	ori	r24, 0x02	; 2
    133e:	8c 93       	st	X, r24
    1340:	ab e3       	ldi	r26, 0x3B	; 59
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	eb e3       	ldi	r30, 0x3B	; 59
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	8d 7f       	andi	r24, 0xFD	; 253
    134c:	8c 93       	st	X, r24
    134e:	0e c0       	rjmp	.+28     	; 0x136c <gpib_write_byte+0x134>
	} else {
		release_bit(DDRA, PORTA, PA1);
    1350:	aa e3       	ldi	r26, 0x3A	; 58
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	ea e3       	ldi	r30, 0x3A	; 58
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	8d 7f       	andi	r24, 0xFD	; 253
    135c:	8c 93       	st	X, r24
    135e:	ab e3       	ldi	r26, 0x3B	; 59
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	eb e3       	ldi	r30, 0x3B	; 59
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	82 60       	ori	r24, 0x02	; 2
    136a:	8c 93       	st	X, r24
	}
	if (c & 0x04) {
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	88 2f       	mov	r24, r24
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	84 70       	andi	r24, 0x04	; 4
    1374:	90 70       	andi	r25, 0x00	; 0
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	b1 f0       	breq	.+44     	; 0x13a6 <gpib_write_byte+0x16e>
		assign_bit(DDRA, PORTA, PA2);
    137a:	ab e3       	ldi	r26, 0x3B	; 59
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	eb e3       	ldi	r30, 0x3B	; 59
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	8b 7f       	andi	r24, 0xFB	; 251
    1386:	8c 93       	st	X, r24
    1388:	aa e3       	ldi	r26, 0x3A	; 58
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ea e3       	ldi	r30, 0x3A	; 58
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	84 60       	ori	r24, 0x04	; 4
    1394:	8c 93       	st	X, r24
    1396:	ab e3       	ldi	r26, 0x3B	; 59
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	eb e3       	ldi	r30, 0x3B	; 59
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	8b 7f       	andi	r24, 0xFB	; 251
    13a2:	8c 93       	st	X, r24
    13a4:	0e c0       	rjmp	.+28     	; 0x13c2 <gpib_write_byte+0x18a>
	} else {
		release_bit(DDRA, PORTA, PA2);
    13a6:	aa e3       	ldi	r26, 0x3A	; 58
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	ea e3       	ldi	r30, 0x3A	; 58
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	8b 7f       	andi	r24, 0xFB	; 251
    13b2:	8c 93       	st	X, r24
    13b4:	ab e3       	ldi	r26, 0x3B	; 59
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	eb e3       	ldi	r30, 0x3B	; 59
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	84 60       	ori	r24, 0x04	; 4
    13c0:	8c 93       	st	X, r24
	}
	if (c & 0x08) {
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	88 70       	andi	r24, 0x08	; 8
    13ca:	90 70       	andi	r25, 0x00	; 0
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	b1 f0       	breq	.+44     	; 0x13fc <gpib_write_byte+0x1c4>
		assign_bit(DDRA, PORTA, PA3);
    13d0:	ab e3       	ldi	r26, 0x3B	; 59
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	eb e3       	ldi	r30, 0x3B	; 59
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	87 7f       	andi	r24, 0xF7	; 247
    13dc:	8c 93       	st	X, r24
    13de:	aa e3       	ldi	r26, 0x3A	; 58
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	ea e3       	ldi	r30, 0x3A	; 58
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	88 60       	ori	r24, 0x08	; 8
    13ea:	8c 93       	st	X, r24
    13ec:	ab e3       	ldi	r26, 0x3B	; 59
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	eb e3       	ldi	r30, 0x3B	; 59
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	87 7f       	andi	r24, 0xF7	; 247
    13f8:	8c 93       	st	X, r24
    13fa:	0e c0       	rjmp	.+28     	; 0x1418 <gpib_write_byte+0x1e0>
	} else {
		release_bit(DDRA, PORTA, PA3);
    13fc:	aa e3       	ldi	r26, 0x3A	; 58
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	ea e3       	ldi	r30, 0x3A	; 58
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	87 7f       	andi	r24, 0xF7	; 247
    1408:	8c 93       	st	X, r24
    140a:	ab e3       	ldi	r26, 0x3B	; 59
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	eb e3       	ldi	r30, 0x3B	; 59
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	88 60       	ori	r24, 0x08	; 8
    1416:	8c 93       	st	X, r24
	}
	if (c & 0x10) {
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	88 2f       	mov	r24, r24
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	80 71       	andi	r24, 0x10	; 16
    1420:	90 70       	andi	r25, 0x00	; 0
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	b1 f0       	breq	.+44     	; 0x1452 <gpib_write_byte+0x21a>
		assign_bit(DDRA, PORTA, PA4);
    1426:	ab e3       	ldi	r26, 0x3B	; 59
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	eb e3       	ldi	r30, 0x3B	; 59
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	8f 7e       	andi	r24, 0xEF	; 239
    1432:	8c 93       	st	X, r24
    1434:	aa e3       	ldi	r26, 0x3A	; 58
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	ea e3       	ldi	r30, 0x3A	; 58
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	80 61       	ori	r24, 0x10	; 16
    1440:	8c 93       	st	X, r24
    1442:	ab e3       	ldi	r26, 0x3B	; 59
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	eb e3       	ldi	r30, 0x3B	; 59
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	8f 7e       	andi	r24, 0xEF	; 239
    144e:	8c 93       	st	X, r24
    1450:	0e c0       	rjmp	.+28     	; 0x146e <gpib_write_byte+0x236>
	} else {
		release_bit(DDRA, PORTA, PA4);
    1452:	aa e3       	ldi	r26, 0x3A	; 58
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ea e3       	ldi	r30, 0x3A	; 58
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	8f 7e       	andi	r24, 0xEF	; 239
    145e:	8c 93       	st	X, r24
    1460:	ab e3       	ldi	r26, 0x3B	; 59
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	eb e3       	ldi	r30, 0x3B	; 59
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	80 61       	ori	r24, 0x10	; 16
    146c:	8c 93       	st	X, r24
	}
	if (c & 0x20) {
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	88 2f       	mov	r24, r24
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	80 72       	andi	r24, 0x20	; 32
    1476:	90 70       	andi	r25, 0x00	; 0
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	b1 f0       	breq	.+44     	; 0x14a8 <gpib_write_byte+0x270>
		assign_bit(DDRA, PORTA, PA5);
    147c:	ab e3       	ldi	r26, 0x3B	; 59
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	eb e3       	ldi	r30, 0x3B	; 59
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	8f 7d       	andi	r24, 0xDF	; 223
    1488:	8c 93       	st	X, r24
    148a:	aa e3       	ldi	r26, 0x3A	; 58
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	ea e3       	ldi	r30, 0x3A	; 58
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	80 62       	ori	r24, 0x20	; 32
    1496:	8c 93       	st	X, r24
    1498:	ab e3       	ldi	r26, 0x3B	; 59
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	eb e3       	ldi	r30, 0x3B	; 59
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	8f 7d       	andi	r24, 0xDF	; 223
    14a4:	8c 93       	st	X, r24
    14a6:	0e c0       	rjmp	.+28     	; 0x14c4 <gpib_write_byte+0x28c>
	} else {
		release_bit(DDRA, PORTA, PA5);
    14a8:	aa e3       	ldi	r26, 0x3A	; 58
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	ea e3       	ldi	r30, 0x3A	; 58
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	8f 7d       	andi	r24, 0xDF	; 223
    14b4:	8c 93       	st	X, r24
    14b6:	ab e3       	ldi	r26, 0x3B	; 59
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	eb e3       	ldi	r30, 0x3B	; 59
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	80 62       	ori	r24, 0x20	; 32
    14c2:	8c 93       	st	X, r24
	}
	if (c & 0x40) {
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	88 2f       	mov	r24, r24
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	80 74       	andi	r24, 0x40	; 64
    14cc:	90 70       	andi	r25, 0x00	; 0
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	b1 f0       	breq	.+44     	; 0x14fe <gpib_write_byte+0x2c6>
		assign_bit(DDRA, PORTA, PA6);
    14d2:	ab e3       	ldi	r26, 0x3B	; 59
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	eb e3       	ldi	r30, 0x3B	; 59
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	8f 7b       	andi	r24, 0xBF	; 191
    14de:	8c 93       	st	X, r24
    14e0:	aa e3       	ldi	r26, 0x3A	; 58
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	ea e3       	ldi	r30, 0x3A	; 58
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	80 64       	ori	r24, 0x40	; 64
    14ec:	8c 93       	st	X, r24
    14ee:	ab e3       	ldi	r26, 0x3B	; 59
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	eb e3       	ldi	r30, 0x3B	; 59
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	8f 7b       	andi	r24, 0xBF	; 191
    14fa:	8c 93       	st	X, r24
    14fc:	0e c0       	rjmp	.+28     	; 0x151a <gpib_write_byte+0x2e2>
	} else {
		release_bit(DDRA, PORTA, PA6);
    14fe:	aa e3       	ldi	r26, 0x3A	; 58
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	ea e3       	ldi	r30, 0x3A	; 58
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	8f 7b       	andi	r24, 0xBF	; 191
    150a:	8c 93       	st	X, r24
    150c:	ab e3       	ldi	r26, 0x3B	; 59
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	eb e3       	ldi	r30, 0x3B	; 59
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	80 64       	ori	r24, 0x40	; 64
    1518:	8c 93       	st	X, r24
	}
	if (c & 0x80) {
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	88 23       	and	r24, r24
    151e:	b4 f4       	brge	.+44     	; 0x154c <gpib_write_byte+0x314>
		assign_bit(DDRA, PORTA, PA7);
    1520:	ab e3       	ldi	r26, 0x3B	; 59
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	eb e3       	ldi	r30, 0x3B	; 59
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	8f 77       	andi	r24, 0x7F	; 127
    152c:	8c 93       	st	X, r24
    152e:	aa e3       	ldi	r26, 0x3A	; 58
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	ea e3       	ldi	r30, 0x3A	; 58
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	80 68       	ori	r24, 0x80	; 128
    153a:	8c 93       	st	X, r24
    153c:	ab e3       	ldi	r26, 0x3B	; 59
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	eb e3       	ldi	r30, 0x3B	; 59
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	8f 77       	andi	r24, 0x7F	; 127
    1548:	8c 93       	st	X, r24
    154a:	0e c0       	rjmp	.+28     	; 0x1568 <gpib_write_byte+0x330>
	} else {
		release_bit(DDRA, PORTA, PA7);
    154c:	aa e3       	ldi	r26, 0x3A	; 58
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	ea e3       	ldi	r30, 0x3A	; 58
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	8f 77       	andi	r24, 0x7F	; 127
    1558:	8c 93       	st	X, r24
    155a:	ab e3       	ldi	r26, 0x3B	; 59
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	eb e3       	ldi	r30, 0x3B	; 59
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	80 68       	ori	r24, 0x80	; 128
    1566:	8c 93       	st	X, r24
	}

// wait until listeners release NRFD
//uart_puts("1");
	release_bit(DDRD, PORTD, G_NRFD);
    1568:	a1 e3       	ldi	r26, 0x31	; 49
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e1 e3       	ldi	r30, 0x31	; 49
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	87 7f       	andi	r24, 0xF7	; 247
    1574:	8c 93       	st	X, r24
    1576:	a2 e3       	ldi	r26, 0x32	; 50
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e2 e3       	ldi	r30, 0x32	; 50
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	88 60       	ori	r24, 0x08	; 8
    1582:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
//gpib_info();
	timeout = s + 5;
    1584:	80 91 ea 05 	lds	r24, 0x05EA
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	05 96       	adiw	r24, 0x05	; 5
    158e:	9a 83       	std	Y+2, r25	; 0x02
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	10 c0       	rjmp	.+32     	; 0x15b4 <gpib_write_byte+0x37c>
	while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
		if (s == timeout) {
    1594:	80 91 ea 05 	lds	r24, 0x05EA
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	9a 81       	ldd	r25, Y+2	; 0x02
    15a0:	28 17       	cp	r18, r24
    15a2:	39 07       	cpc	r19, r25
    15a4:	39 f4       	brne	.+14     	; 0x15b4 <gpib_write_byte+0x37c>
			uart_puts("\n\rError: NRFD timeout\n\r");
    15a6:	82 ee       	ldi	r24, 0xE2	; 226
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
			return 0xff;
    15ae:	8f ef       	ldi	r24, 0xFF	; 255
    15b0:	8d 83       	std	Y+5, r24	; 0x05
    15b2:	68 c0       	rjmp	.+208    	; 0x1684 <gpib_write_byte+0x44c>
//uart_puts("1");
	release_bit(DDRD, PORTD, G_NRFD);
#ifdef WITH_TIMEOUT
//gpib_info();
	timeout = s + 5;
	while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
    15b4:	e0 e3       	ldi	r30, 0x30	; 48
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	88 2f       	mov	r24, r24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	88 70       	andi	r24, 0x08	; 8
    15c0:	90 70       	andi	r25, 0x00	; 0
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	49 f4       	brne	.+18     	; 0x15d8 <gpib_write_byte+0x3a0>
    15c6:	80 91 ea 05 	lds	r24, 0x05EA
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	9a 81       	ldd	r25, Y+2	; 0x02
    15d2:	82 17       	cp	r24, r18
    15d4:	93 07       	cpc	r25, r19
    15d6:	f4 f6       	brge	.-68     	; 0x1594 <gpib_write_byte+0x35c>
#else
	loop_until_bit_is_set(PIND,G_NRFD);
#endif

// assign EOI during transmission of only last byte
	if (isLastByte) {
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	88 23       	and	r24, r24
    15dc:	a9 f0       	breq	.+42     	; 0x1608 <gpib_write_byte+0x3d0>
		//uart_puts("\n\rE\n\r");
		assign_bit(DDRD, PORTD, G_EOI);
    15de:	a2 e3       	ldi	r26, 0x32	; 50
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e2 e3       	ldi	r30, 0x32	; 50
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	8f 7e       	andi	r24, 0xEF	; 239
    15ea:	8c 93       	st	X, r24
    15ec:	a1 e3       	ldi	r26, 0x31	; 49
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e1 e3       	ldi	r30, 0x31	; 49
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	80 61       	ori	r24, 0x10	; 16
    15f8:	8c 93       	st	X, r24
    15fa:	a2 e3       	ldi	r26, 0x32	; 50
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e2 e3       	ldi	r30, 0x32	; 50
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	8f 7e       	andi	r24, 0xEF	; 239
    1606:	8c 93       	st	X, r24
	}

// assign DAV, data valid for listeners
	assign_bit(DDRD, PORTD, G_DAV);
    1608:	a2 e3       	ldi	r26, 0x32	; 50
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e2 e3       	ldi	r30, 0x32	; 50
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	8b 7f       	andi	r24, 0xFB	; 251
    1614:	8c 93       	st	X, r24
    1616:	a1 e3       	ldi	r26, 0x31	; 49
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e1 e3       	ldi	r30, 0x31	; 49
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	84 60       	ori	r24, 0x04	; 4
    1622:	8c 93       	st	X, r24
    1624:	a2 e3       	ldi	r26, 0x32	; 50
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e2 e3       	ldi	r30, 0x32	; 50
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	8b 7f       	andi	r24, 0xFB	; 251
    1630:	8c 93       	st	X, r24

// wait for NDAC release
//uart_puts("2");
	release_bit(DDRD, PORTD, G_NDAC);
    1632:	a1 e3       	ldi	r26, 0x31	; 49
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e1 e3       	ldi	r30, 0x31	; 49
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	8f 7d       	andi	r24, 0xDF	; 223
    163e:	8c 93       	st	X, r24
    1640:	a2 e3       	ldi	r26, 0x32	; 50
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e2 e3       	ldi	r30, 0x32	; 50
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	80 62       	ori	r24, 0x20	; 32
    164c:	8c 93       	st	X, r24
	loop_until_bit_is_set(PIND, G_NDAC);
    164e:	e0 e3       	ldi	r30, 0x30	; 48
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	88 2f       	mov	r24, r24
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	80 72       	andi	r24, 0x20	; 32
    165a:	90 70       	andi	r25, 0x00	; 0
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	b9 f3       	breq	.-18     	; 0x164e <gpib_write_byte+0x416>

// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
    1660:	a1 e3       	ldi	r26, 0x31	; 49
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e1 e3       	ldi	r30, 0x31	; 49
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	8b 7f       	andi	r24, 0xFB	; 251
    166c:	8c 93       	st	X, r24
    166e:	a2 e3       	ldi	r26, 0x32	; 50
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e2 e3       	ldi	r30, 0x32	; 50
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	84 60       	ori	r24, 0x04	; 4
    167a:	8c 93       	st	X, r24

// reset Port to all input
	DDRA = 0x00;
    167c:	ea e3       	ldi	r30, 0x3A	; 58
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	10 82       	st	Z, r1

//uart_puts("3\r\n");

	return 0;
    1682:	1d 82       	std	Y+5, r1	; 0x05
    1684:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <gpib_info>:

/**
 * print some useful info about bus state (for example value of handshake pins)
 */
void gpib_info(void) {
    1696:	af 92       	push	r10
    1698:	bf 92       	push	r11
    169a:	cf 92       	push	r12
    169c:	df 92       	push	r13
    169e:	ef 92       	push	r14
    16a0:	ff 92       	push	r15
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	2a 97       	sbiw	r28, 0x0a	; 10
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	de bf       	out	0x3e, r29	; 62
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	cd bf       	out	0x3d, r28	; 61
	uchar dav, nrfd, ndac, eoi, atn, srq, ifc, ren;
	extern uchar buf[80];

	sprintf(buf, "Partner address(primary,secondary): (%u,%u)\n\r",
    16ba:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <gpib_get_partner_pad>
    16be:	08 2f       	mov	r16, r24
    16c0:	10 e0       	ldi	r17, 0x00	; 0
    16c2:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <gpib_get_partner_sad>
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	8d b7       	in	r24, 0x3d	; 61
    16cc:	9e b7       	in	r25, 0x3e	; 62
    16ce:	08 97       	sbiw	r24, 0x08	; 8
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	9e bf       	out	0x3e, r25	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	8d bf       	out	0x3d, r24	; 61
    16da:	ed b7       	in	r30, 0x3d	; 61
    16dc:	fe b7       	in	r31, 0x3e	; 62
    16de:	31 96       	adiw	r30, 0x01	; 1
    16e0:	89 e9       	ldi	r24, 0x99	; 153
    16e2:	95 e0       	ldi	r25, 0x05	; 5
    16e4:	91 83       	std	Z+1, r25	; 0x01
    16e6:	80 83       	st	Z, r24
    16e8:	8a ef       	ldi	r24, 0xFA	; 250
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	93 83       	std	Z+3, r25	; 0x03
    16ee:	82 83       	std	Z+2, r24	; 0x02
    16f0:	15 83       	std	Z+5, r17	; 0x05
    16f2:	04 83       	std	Z+4, r16	; 0x04
    16f4:	37 83       	std	Z+7, r19	; 0x07
    16f6:	26 83       	std	Z+6, r18	; 0x06
    16f8:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
    16fc:	8d b7       	in	r24, 0x3d	; 61
    16fe:	9e b7       	in	r25, 0x3e	; 62
    1700:	08 96       	adiw	r24, 0x08	; 8
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	9e bf       	out	0x3e, r25	; 62
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	8d bf       	out	0x3d, r24	; 61
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);
    170c:	89 e9       	ldi	r24, 0x99	; 153
    170e:	95 e0       	ldi	r25, 0x05	; 5
    1710:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>

	uart_puts("Partner list\n\r");
    1714:	88 e2       	ldi	r24, 0x28	; 40
    1716:	91 e0       	ldi	r25, 0x01	; 1
    1718:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
	for (int i = 0; i < MAX_PARTNER; i++) {
    171c:	1a 82       	std	Y+2, r1	; 0x02
    171e:	19 82       	std	Y+1, r1	; 0x01
    1720:	49 c0       	rjmp	.+146    	; 0x17b4 <gpib_info+0x11e>
		if (controller.partners[i].primary != ADDRESS_NOT_SET) {
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	9a 81       	ldd	r25, Y+2	; 0x02
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	fc 01       	movw	r30, r24
    172c:	ef 56       	subi	r30, 0x6F	; 111
    172e:	fb 4f       	sbci	r31, 0xFB	; 251
    1730:	80 81       	ld	r24, Z
    1732:	8f 3f       	cpi	r24, 0xFF	; 255
    1734:	d1 f1       	breq	.+116    	; 0x17aa <gpib_info+0x114>
			sprintf(buf, "Partner(primary,secondary) : (%u,%u)\n\r",
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	fc 01       	movw	r30, r24
    1740:	ef 56       	subi	r30, 0x6F	; 111
    1742:	fb 4f       	sbci	r31, 0xFB	; 251
    1744:	80 81       	ld	r24, Z
    1746:	48 2f       	mov	r20, r24
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	9a 81       	ldd	r25, Y+2	; 0x02
    174e:	03 96       	adiw	r24, 0x03	; 3
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	fc 01       	movw	r30, r24
    1756:	e4 57       	subi	r30, 0x74	; 116
    1758:	fb 4f       	sbci	r31, 0xFB	; 251
    175a:	80 81       	ld	r24, Z
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	8d b7       	in	r24, 0x3d	; 61
    1762:	9e b7       	in	r25, 0x3e	; 62
    1764:	08 97       	sbiw	r24, 0x08	; 8
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	9e bf       	out	0x3e, r25	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	8d bf       	out	0x3d, r24	; 61
    1770:	ed b7       	in	r30, 0x3d	; 61
    1772:	fe b7       	in	r31, 0x3e	; 62
    1774:	31 96       	adiw	r30, 0x01	; 1
    1776:	89 e9       	ldi	r24, 0x99	; 153
    1778:	95 e0       	ldi	r25, 0x05	; 5
    177a:	91 83       	std	Z+1, r25	; 0x01
    177c:	80 83       	st	Z, r24
    177e:	87 e3       	ldi	r24, 0x37	; 55
    1780:	91 e0       	ldi	r25, 0x01	; 1
    1782:	93 83       	std	Z+3, r25	; 0x03
    1784:	82 83       	std	Z+2, r24	; 0x02
    1786:	55 83       	std	Z+5, r21	; 0x05
    1788:	44 83       	std	Z+4, r20	; 0x04
    178a:	37 83       	std	Z+7, r19	; 0x07
    178c:	26 83       	std	Z+6, r18	; 0x06
    178e:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
    1792:	8d b7       	in	r24, 0x3d	; 61
    1794:	9e b7       	in	r25, 0x3e	; 62
    1796:	08 96       	adiw	r24, 0x08	; 8
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	9e bf       	out	0x3e, r25	; 62
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	8d bf       	out	0x3d, r24	; 61
					controller.partners[i].primary,
					controller.partners[i].secondary);
			uart_puts(buf);
    17a2:	89 e9       	ldi	r24, 0x99	; 153
    17a4:	95 e0       	ldi	r25, 0x05	; 5
    17a6:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
	sprintf(buf, "Partner address(primary,secondary): (%u,%u)\n\r",
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);

	uart_puts("Partner list\n\r");
	for (int i = 0; i < MAX_PARTNER; i++) {
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	9a 81       	ldd	r25, Y+2	; 0x02
    17ae:	01 96       	adiw	r24, 0x01	; 1
    17b0:	9a 83       	std	Y+2, r25	; 0x02
    17b2:	89 83       	std	Y+1, r24	; 0x01
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	9a 81       	ldd	r25, Y+2	; 0x02
    17b8:	85 30       	cpi	r24, 0x05	; 5
    17ba:	91 05       	cpc	r25, r1
    17bc:	0c f4       	brge	.+2      	; 0x17c0 <gpib_info+0x12a>
    17be:	b1 cf       	rjmp	.-158    	; 0x1722 <gpib_info+0x8c>
					controller.partners[i].secondary);
			uart_puts(buf);
		}
	}

	dav = bit_is_set(PIND, G_DAV);
    17c0:	e0 e3       	ldi	r30, 0x30	; 48
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	84 70       	andi	r24, 0x04	; 4
    17c8:	8a 87       	std	Y+10, r24	; 0x0a
	nrfd = bit_is_set(PIND, G_NRFD);
    17ca:	e0 e3       	ldi	r30, 0x30	; 48
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	88 70       	andi	r24, 0x08	; 8
    17d2:	89 87       	std	Y+9, r24	; 0x09
	ndac = bit_is_set(PIND, G_NDAC);
    17d4:	e0 e3       	ldi	r30, 0x30	; 48
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	80 72       	andi	r24, 0x20	; 32
    17dc:	88 87       	std	Y+8, r24	; 0x08
	eoi = bit_is_set(PIND, G_EOI);
    17de:	e0 e3       	ldi	r30, 0x30	; 48
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	80 71       	andi	r24, 0x10	; 16
    17e6:	8f 83       	std	Y+7, r24	; 0x07
	atn = bit_is_set(PIND, G_ATN);
    17e8:	e0 e3       	ldi	r30, 0x30	; 48
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	80 78       	andi	r24, 0x80	; 128
    17f0:	8e 83       	std	Y+6, r24	; 0x06
	srq = bit_is_set(PIND, G_SRQ);
    17f2:	e0 e3       	ldi	r30, 0x30	; 48
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	80 74       	andi	r24, 0x40	; 64
    17fa:	8d 83       	std	Y+5, r24	; 0x05
	ifc = bit_is_set(PINB, G_IFC);
    17fc:	e6 e3       	ldi	r30, 0x36	; 54
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	81 70       	andi	r24, 0x01	; 1
    1804:	8c 83       	std	Y+4, r24	; 0x04
	ren = bit_is_set(PINB, G_REN);
    1806:	e6 e3       	ldi	r30, 0x36	; 54
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	82 70       	andi	r24, 0x02	; 2
    180e:	8b 83       	std	Y+3, r24	; 0x03
//d = PINA;
//di = d ^ 0xff;
	if (dav == 0x00)
    1810:	8a 85       	ldd	r24, Y+10	; 0x0a
    1812:	88 23       	and	r24, r24
    1814:	19 f4       	brne	.+6      	; 0x181c <gpib_info+0x186>
		dav = '0';
    1816:	80 e3       	ldi	r24, 0x30	; 48
    1818:	8a 87       	std	Y+10, r24	; 0x0a
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <gpib_info+0x18a>
	else
		dav = '1';
    181c:	81 e3       	ldi	r24, 0x31	; 49
    181e:	8a 87       	std	Y+10, r24	; 0x0a
	if (nrfd == 0x00)
    1820:	89 85       	ldd	r24, Y+9	; 0x09
    1822:	88 23       	and	r24, r24
    1824:	19 f4       	brne	.+6      	; 0x182c <gpib_info+0x196>
		nrfd = '0';
    1826:	80 e3       	ldi	r24, 0x30	; 48
    1828:	89 87       	std	Y+9, r24	; 0x09
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <gpib_info+0x19a>
	else
		nrfd = '1';
    182c:	81 e3       	ldi	r24, 0x31	; 49
    182e:	89 87       	std	Y+9, r24	; 0x09
	if (ndac == 0x00)
    1830:	88 85       	ldd	r24, Y+8	; 0x08
    1832:	88 23       	and	r24, r24
    1834:	19 f4       	brne	.+6      	; 0x183c <gpib_info+0x1a6>
		ndac = '0';
    1836:	80 e3       	ldi	r24, 0x30	; 48
    1838:	88 87       	std	Y+8, r24	; 0x08
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <gpib_info+0x1aa>
	else
		ndac = '1';
    183c:	81 e3       	ldi	r24, 0x31	; 49
    183e:	88 87       	std	Y+8, r24	; 0x08
	if (eoi == 0x00)
    1840:	8f 81       	ldd	r24, Y+7	; 0x07
    1842:	88 23       	and	r24, r24
    1844:	19 f4       	brne	.+6      	; 0x184c <gpib_info+0x1b6>
		eoi = '0';
    1846:	80 e3       	ldi	r24, 0x30	; 48
    1848:	8f 83       	std	Y+7, r24	; 0x07
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <gpib_info+0x1ba>
	else
		eoi = '1';
    184c:	81 e3       	ldi	r24, 0x31	; 49
    184e:	8f 83       	std	Y+7, r24	; 0x07
	if (atn == 0x00)
    1850:	8e 81       	ldd	r24, Y+6	; 0x06
    1852:	88 23       	and	r24, r24
    1854:	19 f4       	brne	.+6      	; 0x185c <gpib_info+0x1c6>
		atn = '0';
    1856:	80 e3       	ldi	r24, 0x30	; 48
    1858:	8e 83       	std	Y+6, r24	; 0x06
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <gpib_info+0x1ca>
	else
		atn = '1';
    185c:	81 e3       	ldi	r24, 0x31	; 49
    185e:	8e 83       	std	Y+6, r24	; 0x06
	if (srq == 0x00)
    1860:	8d 81       	ldd	r24, Y+5	; 0x05
    1862:	88 23       	and	r24, r24
    1864:	19 f4       	brne	.+6      	; 0x186c <gpib_info+0x1d6>
		srq = '0';
    1866:	80 e3       	ldi	r24, 0x30	; 48
    1868:	8d 83       	std	Y+5, r24	; 0x05
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <gpib_info+0x1da>
	else
		srq = '1';
    186c:	81 e3       	ldi	r24, 0x31	; 49
    186e:	8d 83       	std	Y+5, r24	; 0x05
	if (ifc == 0x00)
    1870:	8c 81       	ldd	r24, Y+4	; 0x04
    1872:	88 23       	and	r24, r24
    1874:	19 f4       	brne	.+6      	; 0x187c <gpib_info+0x1e6>
		ifc = '0';
    1876:	80 e3       	ldi	r24, 0x30	; 48
    1878:	8c 83       	std	Y+4, r24	; 0x04
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <gpib_info+0x1ea>
	else
		ifc = '1';
    187c:	81 e3       	ldi	r24, 0x31	; 49
    187e:	8c 83       	std	Y+4, r24	; 0x04
	if (ren == 0x00)
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	88 23       	and	r24, r24
    1884:	19 f4       	brne	.+6      	; 0x188c <gpib_info+0x1f6>
		ren = '0';
    1886:	80 e3       	ldi	r24, 0x30	; 48
    1888:	8b 83       	std	Y+3, r24	; 0x03
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <gpib_info+0x1fa>
	else
		ren = '1';
    188c:	81 e3       	ldi	r24, 0x31	; 49
    188e:	8b 83       	std	Y+3, r24	; 0x03

	sprintf(buf,
    1890:	8a 85       	ldd	r24, Y+10	; 0x0a
    1892:	a8 2e       	mov	r10, r24
    1894:	bb 24       	eor	r11, r11
    1896:	89 85       	ldd	r24, Y+9	; 0x09
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	88 85       	ldd	r24, Y+8	; 0x08
    189e:	48 2f       	mov	r20, r24
    18a0:	50 e0       	ldi	r21, 0x00	; 0
    18a2:	8f 81       	ldd	r24, Y+7	; 0x07
    18a4:	68 2f       	mov	r22, r24
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	8c 81       	ldd	r24, Y+4	; 0x04
    18aa:	a8 2f       	mov	r26, r24
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	08 2f       	mov	r16, r24
    18b2:	10 e0       	ldi	r17, 0x00	; 0
    18b4:	8e 81       	ldd	r24, Y+6	; 0x06
    18b6:	e8 2e       	mov	r14, r24
    18b8:	ff 24       	eor	r15, r15
    18ba:	8d 81       	ldd	r24, Y+5	; 0x05
    18bc:	c8 2e       	mov	r12, r24
    18be:	dd 24       	eor	r13, r13
    18c0:	8d b7       	in	r24, 0x3d	; 61
    18c2:	9e b7       	in	r25, 0x3e	; 62
    18c4:	44 97       	sbiw	r24, 0x14	; 20
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	9e bf       	out	0x3e, r25	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	8d bf       	out	0x3d, r24	; 61
    18d0:	ed b7       	in	r30, 0x3d	; 61
    18d2:	fe b7       	in	r31, 0x3e	; 62
    18d4:	31 96       	adiw	r30, 0x01	; 1
    18d6:	89 e9       	ldi	r24, 0x99	; 153
    18d8:	95 e0       	ldi	r25, 0x05	; 5
    18da:	91 83       	std	Z+1, r25	; 0x01
    18dc:	80 83       	st	Z, r24
    18de:	8e e5       	ldi	r24, 0x5E	; 94
    18e0:	91 e0       	ldi	r25, 0x01	; 1
    18e2:	93 83       	std	Z+3, r25	; 0x03
    18e4:	82 83       	std	Z+2, r24	; 0x02
    18e6:	b5 82       	std	Z+5, r11	; 0x05
    18e8:	a4 82       	std	Z+4, r10	; 0x04
    18ea:	37 83       	std	Z+7, r19	; 0x07
    18ec:	26 83       	std	Z+6, r18	; 0x06
    18ee:	51 87       	std	Z+9, r21	; 0x09
    18f0:	40 87       	std	Z+8, r20	; 0x08
    18f2:	73 87       	std	Z+11, r23	; 0x0b
    18f4:	62 87       	std	Z+10, r22	; 0x0a
    18f6:	b5 87       	std	Z+13, r27	; 0x0d
    18f8:	a4 87       	std	Z+12, r26	; 0x0c
    18fa:	17 87       	std	Z+15, r17	; 0x0f
    18fc:	06 87       	std	Z+14, r16	; 0x0e
    18fe:	f1 8a       	std	Z+17, r15	; 0x11
    1900:	e0 8a       	std	Z+16, r14	; 0x10
    1902:	d3 8a       	std	Z+19, r13	; 0x13
    1904:	c2 8a       	std	Z+18, r12	; 0x12
    1906:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
    190a:	8d b7       	in	r24, 0x3d	; 61
    190c:	9e b7       	in	r25, 0x3e	; 62
    190e:	44 96       	adiw	r24, 0x14	; 20
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	9e bf       	out	0x3e, r25	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	8d bf       	out	0x3d, r24	; 61
			"dav=%c,nrfd=%c,ndac=%c, eoi=%c, ifc=%c,ren=%c,atn=%c,srq=%c\n\r",
			dav, nrfd, ndac, eoi, ifc, ren, atn, srq);
	uart_puts(buf);
    191a:	89 e9       	ldi	r24, 0x99	; 153
    191c:	95 e0       	ldi	r25, 0x05	; 5
    191e:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
}
    1922:	2a 96       	adiw	r28, 0x0a	; 10
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	ff 90       	pop	r15
    1938:	ef 90       	pop	r14
    193a:	df 90       	pop	r13
    193c:	cf 90       	pop	r12
    193e:	bf 90       	pop	r11
    1940:	af 90       	pop	r10
    1942:	08 95       	ret

00001944 <gpib_spoll_start>:

/**
 * Enable serial poll.
 * Effect: all devices will send status byte instead of normal data when addressed as talker
 */
void gpib_spoll_start() {
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	00 d0       	rcall	.+0      	; 0x194a <gpib_spoll_start+0x6>
    194a:	00 d0       	rcall	.+0      	; 0x194c <gpib_spoll_start+0x8>
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
	uchar controlString[4];
//uart_puts("before SPE\r\n");
	controlString[0] = G_CMD_SPE;
    1950:	88 e1       	ldi	r24, 0x18	; 24
    1952:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
    1954:	ce 01       	movw	r24, r28
    1956:	01 96       	adiw	r24, 0x01	; 1
    1958:	61 e0       	ldi	r22, 0x01	; 1
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	0e 94 07 08 	call	0x100e	; 0x100e <gpib_cmd>
//uart_puts("after SPE\r\n");
}
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <gpib_spoll_end>:

/**
 * Disable (end) serial poll.All devices will return to normal behaviour as talker
 */
void gpib_spoll_end() {
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	00 d0       	rcall	.+0      	; 0x1974 <gpib_spoll_end+0x6>
    1974:	00 d0       	rcall	.+0      	; 0x1976 <gpib_spoll_end+0x8>
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
	uchar controlString[4];
	controlString[0] = G_CMD_SPD;
    197a:	89 e1       	ldi	r24, 0x19	; 25
    197c:	89 83       	std	Y+1, r24	; 0x01
//uart_puts("before SPD\r\n");
	gpib_cmd(controlString, 1);
    197e:	ce 01       	movw	r24, r28
    1980:	01 96       	adiw	r24, 0x01	; 1
    1982:	61 e0       	ldi	r22, 0x01	; 1
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	0e 94 07 08 	call	0x100e	; 0x100e <gpib_cmd>
}
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <gpib_spoll_single>:
 * \param primary primary talker address of device
 * \param secondary secondary talker address of device
 * \param status byte
 * \returns 0xff on failure.
 */
uchar gpib_spoll_single(uchar primary, uchar secondary, uchar *b) {
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	c9 56       	subi	r28, 0x69	; 105
    19a2:	d0 40       	sbci	r29, 0x00	; 0
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	fe 01       	movw	r30, r28
    19b0:	ea 59       	subi	r30, 0x9A	; 154
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	80 83       	st	Z, r24
    19b6:	fe 01       	movw	r30, r28
    19b8:	e9 59       	subi	r30, 0x99	; 153
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	60 83       	st	Z, r22
    19be:	fe 01       	movw	r30, r28
    19c0:	e8 59       	subi	r30, 0x98	; 152
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	51 83       	std	Z+1, r21	; 0x01
    19c6:	40 83       	st	Z, r20
	uchar controlString[100];
	uchar e;

// address device
	gpib_send_address(primary, secondary);
    19c8:	fe 01       	movw	r30, r28
    19ca:	ea 59       	subi	r30, 0x9A	; 154
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	de 01       	movw	r26, r28
    19d0:	a9 59       	subi	r26, 0x99	; 153
    19d2:	bf 4f       	sbci	r27, 0xFF	; 255
    19d4:	80 81       	ld	r24, Z
    19d6:	6c 91       	ld	r22, X
    19d8:	0e 94 84 05 	call	0xb08	; 0xb08 <gpib_send_address>

// now receive data
//uart_puts("before status byte receive\r\n");
	e = gpib_receive(b);
    19dc:	fe 01       	movw	r30, r28
    19de:	e8 59       	subi	r30, 0x98	; 152
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	80 81       	ld	r24, Z
    19e4:	91 81       	ldd	r25, Z+1	; 0x01
    19e6:	0e 94 39 06 	call	0xc72	; 0xc72 <gpib_receive>
    19ea:	89 83       	std	Y+1, r24	; 0x01
//uart_puts("after status byte receive\r\n");
// status byte is now in b
	if (secondary != ADDRESS_NOT_SET) {
    19ec:	fe 01       	movw	r30, r28
    19ee:	e9 59       	subi	r30, 0x99	; 153
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	80 81       	ld	r24, Z
    19f4:	8f 3f       	cpi	r24, 0xFF	; 255
    19f6:	09 f4       	brne	.+2      	; 0x19fa <gpib_spoll_single+0x62>
    19f8:	3f c0       	rjmp	.+126    	; 0x1a78 <gpib_spoll_single+0xe0>
		sprintf((char*) controlString,
    19fa:	fe 01       	movw	r30, r28
    19fc:	e8 59       	subi	r30, 0x98	; 152
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	01 90       	ld	r0, Z+
    1a02:	f0 81       	ld	r31, Z
    1a04:	e0 2d       	mov	r30, r0
    1a06:	80 81       	ld	r24, Z
    1a08:	48 2f       	mov	r20, r24
    1a0a:	50 e0       	ldi	r21, 0x00	; 0
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	ea 59       	subi	r30, 0x9A	; 154
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 81       	ld	r24, Z
    1a14:	88 2f       	mov	r24, r24
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	bc 01       	movw	r22, r24
    1a1a:	60 54       	subi	r22, 0x40	; 64
    1a1c:	70 40       	sbci	r23, 0x00	; 0
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e9 59       	subi	r30, 0x99	; 153
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	80 81       	ld	r24, Z
    1a26:	88 2f       	mov	r24, r24
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	9c 01       	movw	r18, r24
    1a2c:	2f 79       	andi	r18, 0x9F	; 159
    1a2e:	30 70       	andi	r19, 0x00	; 0
    1a30:	8d b7       	in	r24, 0x3d	; 61
    1a32:	9e b7       	in	r25, 0x3e	; 62
    1a34:	0a 97       	sbiw	r24, 0x0a	; 10
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	9e bf       	out	0x3e, r25	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	8d bf       	out	0x3d, r24	; 61
    1a40:	ed b7       	in	r30, 0x3d	; 61
    1a42:	fe b7       	in	r31, 0x3e	; 62
    1a44:	31 96       	adiw	r30, 0x01	; 1
    1a46:	ce 01       	movw	r24, r28
    1a48:	02 96       	adiw	r24, 0x02	; 2
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	80 83       	st	Z, r24
    1a4e:	8c e9       	ldi	r24, 0x9C	; 156
    1a50:	91 e0       	ldi	r25, 0x01	; 1
    1a52:	93 83       	std	Z+3, r25	; 0x03
    1a54:	82 83       	std	Z+2, r24	; 0x02
    1a56:	55 83       	std	Z+5, r21	; 0x05
    1a58:	44 83       	std	Z+4, r20	; 0x04
    1a5a:	77 83       	std	Z+7, r23	; 0x07
    1a5c:	66 83       	std	Z+6, r22	; 0x06
    1a5e:	31 87       	std	Z+9, r19	; 0x09
    1a60:	20 87       	std	Z+8, r18	; 0x08
    1a62:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
    1a66:	8d b7       	in	r24, 0x3d	; 61
    1a68:	9e b7       	in	r25, 0x3e	; 62
    1a6a:	0a 96       	adiw	r24, 0x0a	; 10
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	9e bf       	out	0x3e, r25	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	8d bf       	out	0x3d, r24	; 61
    1a76:	33 c0       	rjmp	.+102    	; 0x1ade <gpib_spoll_single+0x146>
				"Status byte 0x%02x from device(primary,secondary) = (0x%02x,0x%02x)\n\r",
				*b, TalkerAddress2Address(primary),
				secondaryAdressByteToAdress(secondary));
	} else {
		sprintf((char*) controlString,
    1a78:	fe 01       	movw	r30, r28
    1a7a:	e8 59       	subi	r30, 0x98	; 152
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	01 90       	ld	r0, Z+
    1a80:	f0 81       	ld	r31, Z
    1a82:	e0 2d       	mov	r30, r0
    1a84:	80 81       	ld	r24, Z
    1a86:	48 2f       	mov	r20, r24
    1a88:	50 e0       	ldi	r21, 0x00	; 0
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	ea 59       	subi	r30, 0x9A	; 154
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	80 81       	ld	r24, Z
    1a92:	88 2f       	mov	r24, r24
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	9c 01       	movw	r18, r24
    1a98:	20 54       	subi	r18, 0x40	; 64
    1a9a:	30 40       	sbci	r19, 0x00	; 0
    1a9c:	8d b7       	in	r24, 0x3d	; 61
    1a9e:	9e b7       	in	r25, 0x3e	; 62
    1aa0:	08 97       	sbiw	r24, 0x08	; 8
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	9e bf       	out	0x3e, r25	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	8d bf       	out	0x3d, r24	; 61
    1aac:	ed b7       	in	r30, 0x3d	; 61
    1aae:	fe b7       	in	r31, 0x3e	; 62
    1ab0:	31 96       	adiw	r30, 0x01	; 1
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	02 96       	adiw	r24, 0x02	; 2
    1ab6:	91 83       	std	Z+1, r25	; 0x01
    1ab8:	80 83       	st	Z, r24
    1aba:	82 ee       	ldi	r24, 0xE2	; 226
    1abc:	91 e0       	ldi	r25, 0x01	; 1
    1abe:	93 83       	std	Z+3, r25	; 0x03
    1ac0:	82 83       	std	Z+2, r24	; 0x02
    1ac2:	55 83       	std	Z+5, r21	; 0x05
    1ac4:	44 83       	std	Z+4, r20	; 0x04
    1ac6:	37 83       	std	Z+7, r19	; 0x07
    1ac8:	26 83       	std	Z+6, r18	; 0x06
    1aca:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
    1ace:	8d b7       	in	r24, 0x3d	; 61
    1ad0:	9e b7       	in	r25, 0x3e	; 62
    1ad2:	08 96       	adiw	r24, 0x08	; 8
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	9e bf       	out	0x3e, r25	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	8d bf       	out	0x3d, r24	; 61
				"Status byte 0x%02x from device(primary) = 0x%02x\n\r", *b,
				TalkerAddress2Address(primary));
	}
	uart_puts((char*) controlString);
    1ade:	ce 01       	movw	r24, r28
    1ae0:	02 96       	adiw	r24, 0x02	; 2
    1ae2:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>

// send UNT and UNL commands (unlisten and untalk)
// effect: all talker stop talking and all listeners stop listening
	gpib_untalkUnlisten();
    1ae6:	0e 94 16 06 	call	0xc2c	; 0xc2c <gpib_untalkUnlisten>
	return e;
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aec:	c7 59       	subi	r28, 0x97	; 151
    1aee:	df 4f       	sbci	r29, 0xFF	; 255
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <gpib_serial_poll>:
 * I haven't looked how a device with two byte address behaves.
 *
 * Secondary/primary is returned in inout parameters
 * If any emitter is found, return value is != 0.
 */
uchar gpib_serial_poll(uint8_t *primary_v, uint8_t* secondary_v) {
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	2d 97       	sbiw	r28, 0x0d	; 13
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	de bf       	out	0x3e, r29	; 62
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	cd bf       	out	0x3d, r28	; 61
    1b14:	9b 87       	std	Y+11, r25	; 0x0b
    1b16:	8a 87       	std	Y+10, r24	; 0x0a
    1b18:	7d 87       	std	Y+13, r23	; 0x0d
    1b1a:	6c 87       	std	Y+12, r22	; 0x0c
	uchar b, e;
	uchar primary = 0, secondary, found = 0, foundPrimary = ADDRESS_NOT_SET,
    1b1c:	1f 82       	std	Y+7, r1	; 0x07
    1b1e:	1d 82       	std	Y+5, r1	; 0x05
    1b20:	8f ef       	ldi	r24, 0xFF	; 255
    1b22:	8c 83       	std	Y+4, r24	; 0x04
			foundSecondary = ADDRESS_NOT_SET;
    1b24:	8f ef       	ldi	r24, 0xFF	; 255
    1b26:	8b 83       	std	Y+3, r24	; 0x03
	int i;

// send unlisten and untalk to all
	gpib_untalkUnlisten();
    1b28:	0e 94 16 06 	call	0xc2c	; 0xc2c <gpib_untalkUnlisten>

// serial poll sequence start
	gpib_spoll_start();
    1b2c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <gpib_spoll_start>

// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    1b30:	1a 82       	std	Y+2, r1	; 0x02
    1b32:	19 82       	std	Y+1, r1	; 0x01
    1b34:	a2 c0       	rjmp	.+324    	; 0x1c7a <gpib_serial_poll+0x17a>
			i++) {

		// set partner to talker mode
		primary = address2TalkerAddress(controller.partners[i].primary);
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	fc 01       	movw	r30, r24
    1b40:	ef 56       	subi	r30, 0x6F	; 111
    1b42:	fb 4f       	sbci	r31, 0xFB	; 251
    1b44:	80 81       	ld	r24, Z
    1b46:	80 5c       	subi	r24, 0xC0	; 192
    1b48:	8f 83       	std	Y+7, r24	; 0x07
		if (controller.partners[i].secondary != ADDRESS_NOT_SET) {
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4e:	03 96       	adiw	r24, 0x03	; 3
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	fc 01       	movw	r30, r24
    1b56:	e4 57       	subi	r30, 0x74	; 116
    1b58:	fb 4f       	sbci	r31, 0xFB	; 251
    1b5a:	80 81       	ld	r24, Z
    1b5c:	8f 3f       	cpi	r24, 0xFF	; 255
    1b5e:	61 f0       	breq	.+24     	; 0x1b78 <gpib_serial_poll+0x78>
			secondary = secondaryAdressToAdressByte(
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	9a 81       	ldd	r25, Y+2	; 0x02
    1b64:	03 96       	adiw	r24, 0x03	; 3
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	e4 57       	subi	r30, 0x74	; 116
    1b6e:	fb 4f       	sbci	r31, 0xFB	; 251
    1b70:	80 81       	ld	r24, Z
    1b72:	80 66       	ori	r24, 0x60	; 96
    1b74:	8e 83       	std	Y+6, r24	; 0x06
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <gpib_serial_poll+0x7c>
					controller.partners[i].secondary);
		} else {
			secondary = ADDRESS_NOT_SET;
    1b78:	8f ef       	ldi	r24, 0xFF	; 255
    1b7a:	8e 83       	std	Y+6, r24	; 0x06
		}
		// query status byte from device
		e = gpib_spoll_single(primary, secondary, &b);
    1b7c:	9e 01       	movw	r18, r28
    1b7e:	27 5f       	subi	r18, 0xF7	; 247
    1b80:	3f 4f       	sbci	r19, 0xFF	; 255
    1b82:	8f 81       	ldd	r24, Y+7	; 0x07
    1b84:	6e 81       	ldd	r22, Y+6	; 0x06
    1b86:	a9 01       	movw	r20, r18
    1b88:	0e 94 cc 0c 	call	0x1998	; 0x1998 <gpib_spoll_single>
    1b8c:	88 87       	std	Y+8, r24	; 0x08

		// bit 6 of status byte of SRQ emitter is 1; check this
		// when reading status byte from emitter, he releases SRQ line (may also be tested here)
		if (b & (1 << 6)) {
    1b8e:	89 85       	ldd	r24, Y+9	; 0x09
    1b90:	88 2f       	mov	r24, r24
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	80 74       	andi	r24, 0x40	; 64
    1b96:	90 70       	andi	r25, 0x00	; 0
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <gpib_serial_poll+0x9e>
    1b9c:	69 c0       	rjmp	.+210    	; 0x1c70 <gpib_serial_poll+0x170>
			found = 1;
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	8d 83       	std	Y+5, r24	; 0x05
			foundPrimary = controller.partners[i].primary;
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	fc 01       	movw	r30, r24
    1bac:	ef 56       	subi	r30, 0x6F	; 111
    1bae:	fb 4f       	sbci	r31, 0xFB	; 251
    1bb0:	80 81       	ld	r24, Z
    1bb2:	8c 83       	std	Y+4, r24	; 0x04
			foundSecondary = controller.partners[i].secondary;
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb8:	03 96       	adiw	r24, 0x03	; 3
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	e4 57       	subi	r30, 0x74	; 116
    1bc2:	fb 4f       	sbci	r31, 0xFB	; 251
    1bc4:	80 81       	ld	r24, Z
    1bc6:	8b 83       	std	Y+3, r24	; 0x03
			if (controller.partners[i].secondary != ADDRESS_NOT_SET) {
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	9a 81       	ldd	r25, Y+2	; 0x02
    1bcc:	03 96       	adiw	r24, 0x03	; 3
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	e4 57       	subi	r30, 0x74	; 116
    1bd6:	fb 4f       	sbci	r31, 0xFB	; 251
    1bd8:	80 81       	ld	r24, Z
    1bda:	8f 3f       	cpi	r24, 0xFF	; 255
    1bdc:	41 f1       	breq	.+80     	; 0x1c2e <gpib_serial_poll+0x12e>
				sprintf((char*) cmd_buf,
    1bde:	8c 81       	ldd	r24, Y+4	; 0x04
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	48 2f       	mov	r20, r24
    1be8:	50 e0       	ldi	r21, 0x00	; 0
    1bea:	8d b7       	in	r24, 0x3d	; 61
    1bec:	9e b7       	in	r25, 0x3e	; 62
    1bee:	08 97       	sbiw	r24, 0x08	; 8
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	9e bf       	out	0x3e, r25	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	8d bf       	out	0x3d, r24	; 61
    1bfa:	ed b7       	in	r30, 0x3d	; 61
    1bfc:	fe b7       	in	r31, 0x3e	; 62
    1bfe:	31 96       	adiw	r30, 0x01	; 1
    1c00:	85 e3       	ldi	r24, 0x35	; 53
    1c02:	95 e0       	ldi	r25, 0x05	; 5
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	80 83       	st	Z, r24
    1c08:	85 e1       	ldi	r24, 0x15	; 21
    1c0a:	92 e0       	ldi	r25, 0x02	; 2
    1c0c:	93 83       	std	Z+3, r25	; 0x03
    1c0e:	82 83       	std	Z+2, r24	; 0x02
    1c10:	35 83       	std	Z+5, r19	; 0x05
    1c12:	24 83       	std	Z+4, r18	; 0x04
    1c14:	57 83       	std	Z+7, r21	; 0x07
    1c16:	46 83       	std	Z+6, r20	; 0x06
    1c18:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
    1c1c:	8d b7       	in	r24, 0x3d	; 61
    1c1e:	9e b7       	in	r25, 0x3e	; 62
    1c20:	08 96       	adiw	r24, 0x08	; 8
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	9e bf       	out	0x3e, r25	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	8d bf       	out	0x3d, r24	; 61
    1c2c:	1d c0       	rjmp	.+58     	; 0x1c68 <gpib_serial_poll+0x168>
						"SRQ emitter is device(primary,secondary) = (0x%02x,0x%02x)\n\r",
						foundPrimary, foundSecondary);
			} else {
				sprintf((char*) cmd_buf,
    1c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <gpib_serial_poll+0x136>
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <gpib_serial_poll+0x138>
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <gpib_serial_poll+0x13a>
    1c3a:	ed b7       	in	r30, 0x3d	; 61
    1c3c:	fe b7       	in	r31, 0x3e	; 62
    1c3e:	31 96       	adiw	r30, 0x01	; 1
    1c40:	85 e3       	ldi	r24, 0x35	; 53
    1c42:	95 e0       	ldi	r25, 0x05	; 5
    1c44:	91 83       	std	Z+1, r25	; 0x01
    1c46:	80 83       	st	Z, r24
    1c48:	82 e5       	ldi	r24, 0x52	; 82
    1c4a:	92 e0       	ldi	r25, 0x02	; 2
    1c4c:	93 83       	std	Z+3, r25	; 0x03
    1c4e:	82 83       	std	Z+2, r24	; 0x02
    1c50:	35 83       	std	Z+5, r19	; 0x05
    1c52:	24 83       	std	Z+4, r18	; 0x04
    1c54:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
    1c58:	8d b7       	in	r24, 0x3d	; 61
    1c5a:	9e b7       	in	r25, 0x3e	; 62
    1c5c:	06 96       	adiw	r24, 0x06	; 6
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	9e bf       	out	0x3e, r25	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	8d bf       	out	0x3d, r24	; 61
						"SRQ emitter is device(primary) = 0x%02x\n\r",
						foundPrimary);
			}
			uart_puts((char*) cmd_buf);
    1c68:	85 e3       	ldi	r24, 0x35	; 53
    1c6a:	95 e0       	ldi	r25, 0x05	; 5
    1c6c:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
// serial poll sequence start
	gpib_spoll_start();

// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
			i++) {
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	9a 81       	ldd	r25, Y+2	; 0x02
    1c74:	01 96       	adiw	r24, 0x01	; 1
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01

// serial poll sequence start
	gpib_spoll_start();

// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	fc 01       	movw	r30, r24
    1c84:	ef 56       	subi	r30, 0x6F	; 111
    1c86:	fb 4f       	sbci	r31, 0xFB	; 251
    1c88:	80 81       	ld	r24, Z
    1c8a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c8c:	21 f0       	breq	.+8      	; 0x1c96 <gpib_serial_poll+0x196>
    1c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c90:	88 23       	and	r24, r24
    1c92:	09 f4       	brne	.+2      	; 0x1c96 <gpib_serial_poll+0x196>
    1c94:	50 cf       	rjmp	.-352    	; 0x1b36 <gpib_serial_poll+0x36>
			uart_puts((char*) cmd_buf);
		}
	}

// serial poll sequence end
	gpib_spoll_end(cmd_buf);
    1c96:	85 e3       	ldi	r24, 0x35	; 53
    1c98:	95 e0       	ldi	r25, 0x05	; 5
    1c9a:	0e 94 b7 0c 	call	0x196e	; 0x196e <gpib_spoll_end>

// "return" values determined
	*primary_v = foundPrimary;
    1c9e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1ca0:	fb 85       	ldd	r31, Y+11	; 0x0b
    1ca2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca4:	80 83       	st	Z, r24
	*secondary_v = foundSecondary;
    1ca6:	ec 85       	ldd	r30, Y+12	; 0x0c
    1ca8:	fd 85       	ldd	r31, Y+13	; 0x0d
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	80 83       	st	Z, r24

	return found;
    1cae:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1cb0:	2d 96       	adiw	r28, 0x0d	; 13
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <gpib_set_partner_address>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_address(uchar primary, uchar secondary) {
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <gpib_set_partner_address+0x6>
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    1cce:	6a 83       	std	Y+2, r22	; 0x02
	controller.partner.primary = primary;
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	80 93 8d 04 	sts	0x048D, r24
	controller.partner.secondary = secondary;
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	80 93 8e 04 	sts	0x048E, r24
}
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	08 95       	ret

00001ce6 <gpib_set_partner_secondary>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_secondary(uchar secondary) {
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	0f 92       	push	r0
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	89 83       	std	Y+1, r24	; 0x01
	controller.partner.secondary = secondary;
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	80 93 8e 04 	sts	0x048E, r24
}
    1cf8:	0f 90       	pop	r0
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <gpib_get_partner_pad>:

/**
 * Get primary address of device currently controlled.
 * \returns primary address Address of device.
 */
uchar gpib_get_partner_pad(void) {
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.primary;
    1d08:	80 91 8d 04 	lds	r24, 0x048D
}
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <gpib_get_partner_sad>:

/**
 * Get secondary address of device currently controlled.
 * \returns secondary address Address of device.
 */
uchar gpib_get_partner_sad(void) {
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.secondary;
    1d1a:	80 91 8e 04 	lds	r24, 0x048E
}
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <gpib_get_address>:

/**
 * Get controller address.
 * \returns address of controller.
 */
uchar gpib_get_address(void) {
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
	return controller.myaddress;
    1d2c:	80 91 8c 04 	lds	r24, 0x048C
}
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <gpib_set_flavour>:

void gpib_set_flavour(uchar flavour) {
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	0f 92       	push	r0
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	89 83       	std	Y+1, r24	; 0x01
	controller.flavour = flavour;
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	80 93 90 04 	sts	0x0490, r24
}
    1d48:	0f 90       	pop	r0
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <gpib_get_flavour>:

uchar gpib_get_flavour(void) {
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
	return controller.flavour;
    1d58:	80 91 90 04 	lds	r24, 0x0490
}
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <gpib_clear_partners>:

/**
 * Clear partners list
 */
void gpib_clear_partners() {
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <gpib_clear_partners+0x6>
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < MAX_PARTNER; i++) {
    1d6c:	1a 82       	std	Y+2, r1	; 0x02
    1d6e:	19 82       	std	Y+1, r1	; 0x01
    1d70:	0e c0       	rjmp	.+28     	; 0x1d8e <gpib_clear_partners+0x2c>
		controller.partners[i].primary = ADDRESS_NOT_SET;
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	9a 81       	ldd	r25, Y+2	; 0x02
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	ef 56       	subi	r30, 0x6F	; 111
    1d7e:	fb 4f       	sbci	r31, 0xFB	; 251
    1d80:	8f ef       	ldi	r24, 0xFF	; 255
    1d82:	80 83       	st	Z, r24

/**
 * Clear partners list
 */
void gpib_clear_partners() {
	for (int i = 0; i < MAX_PARTNER; i++) {
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	9a 81       	ldd	r25, Y+2	; 0x02
    1d88:	01 96       	adiw	r24, 0x01	; 1
    1d8a:	9a 83       	std	Y+2, r25	; 0x02
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	9a 81       	ldd	r25, Y+2	; 0x02
    1d92:	85 30       	cpi	r24, 0x05	; 5
    1d94:	91 05       	cpc	r25, r1
    1d96:	6c f3       	brlt	.-38     	; 0x1d72 <gpib_clear_partners+0x10>
		controller.partners[i].primary = ADDRESS_NOT_SET;
	}
}
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <gpib_add_partner_address>:

/**
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <gpib_add_partner_address+0x6>
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <gpib_add_partner_address+0x8>
    1daa:	0f 92       	push	r0
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	8b 83       	std	Y+3, r24	; 0x03
    1db2:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1db4:	1a 82       	std	Y+2, r1	; 0x02
    1db6:	19 82       	std	Y+1, r1	; 0x01
    1db8:	05 c0       	rjmp	.+10     	; 0x1dc4 <gpib_add_partner_address+0x22>
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
			i++) {
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbe:	01 96       	adiw	r24, 0x01	; 1
    1dc0:	9a 83       	std	Y+2, r25	; 0x02
    1dc2:	89 83       	std	Y+1, r24	; 0x01
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc8:	85 30       	cpi	r24, 0x05	; 5
    1dca:	91 05       	cpc	r25, r1
    1dcc:	54 f4       	brge	.+20     	; 0x1de2 <gpib_add_partner_address+0x40>
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	ef 56       	subi	r30, 0x6F	; 111
    1dda:	fb 4f       	sbci	r31, 0xFB	; 251
    1ddc:	80 81       	ld	r24, Z
    1dde:	8f 3f       	cpi	r24, 0xFF	; 255
    1de0:	61 f7       	brne	.-40     	; 0x1dba <gpib_add_partner_address+0x18>
			i++) {
	}
	if (i == MAX_PARTNER) {
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	9a 81       	ldd	r25, Y+2	; 0x02
    1de6:	85 30       	cpi	r24, 0x05	; 5
    1de8:	91 05       	cpc	r25, r1
    1dea:	39 f4       	brne	.+14     	; 0x1dfa <gpib_add_partner_address+0x58>
		uart_puts("Too much partners.\n\r");
    1dec:	8c e7       	ldi	r24, 0x7C	; 124
    1dee:	92 e0       	ldi	r25, 0x02	; 2
    1df0:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
		return 1;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	8d 83       	std	Y+5, r24	; 0x05
    1df8:	14 c0       	rjmp	.+40     	; 0x1e22 <gpib_add_partner_address+0x80>
	}
	controller.partners[i].primary = primary;
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	fc 01       	movw	r30, r24
    1e04:	ef 56       	subi	r30, 0x6F	; 111
    1e06:	fb 4f       	sbci	r31, 0xFB	; 251
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	80 83       	st	Z, r24
	controller.partners[i].secondary = secondary;
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e10:	03 96       	adiw	r24, 0x03	; 3
    1e12:	88 0f       	add	r24, r24
    1e14:	99 1f       	adc	r25, r25
    1e16:	fc 01       	movw	r30, r24
    1e18:	e4 57       	subi	r30, 0x74	; 116
    1e1a:	fb 4f       	sbci	r31, 0xFB	; 251
    1e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1e:	80 83       	st	Z, r24
	return 0;
    1e20:	1d 82       	std	Y+5, r1	; 0x05
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <gpib_remove_partner_address>:

/**
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	00 d0       	rcall	.+0      	; 0x1e3a <gpib_remove_partner_address+0x6>
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <gpib_remove_partner_address+0x8>
    1e3c:	0f 92       	push	r0
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	8b 83       	std	Y+3, r24	; 0x03
    1e44:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1e46:	1a 82       	std	Y+2, r1	; 0x02
    1e48:	19 82       	std	Y+1, r1	; 0x01
    1e4a:	05 c0       	rjmp	.+10     	; 0x1e56 <gpib_remove_partner_address+0x22>
			i < MAX_PARTNER
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e50:	01 96       	adiw	r24, 0x01	; 1
    1e52:	9a 83       	std	Y+2, r25	; 0x02
    1e54:	89 83       	std	Y+1, r24	; 0x01
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5a:	85 30       	cpi	r24, 0x05	; 5
    1e5c:	91 05       	cpc	r25, r1
    1e5e:	bc f4       	brge	.+46     	; 0x1e8e <gpib_remove_partner_address+0x5a>
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	9a 81       	ldd	r25, Y+2	; 0x02
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	fc 01       	movw	r30, r24
    1e6a:	ef 56       	subi	r30, 0x6F	; 111
    1e6c:	fb 4f       	sbci	r31, 0xFB	; 251
    1e6e:	90 81       	ld	r25, Z
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	98 17       	cp	r25, r24
    1e74:	59 f7       	brne	.-42     	; 0x1e4c <gpib_remove_partner_address+0x18>
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7a:	03 96       	adiw	r24, 0x03	; 3
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	fc 01       	movw	r30, r24
    1e82:	e4 57       	subi	r30, 0x74	; 116
    1e84:	fb 4f       	sbci	r31, 0xFB	; 251
    1e86:	90 81       	ld	r25, Z
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	98 17       	cp	r25, r24
    1e8c:	f9 f6       	brne	.-66     	; 0x1e4c <gpib_remove_partner_address+0x18>
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
	}
	if (i == MAX_PARTNER) {
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	9a 81       	ldd	r25, Y+2	; 0x02
    1e92:	85 30       	cpi	r24, 0x05	; 5
    1e94:	91 05       	cpc	r25, r1
    1e96:	39 f4       	brne	.+14     	; 0x1ea6 <gpib_remove_partner_address+0x72>
		uart_puts("Partner unknown.\n\r");
    1e98:	81 e9       	ldi	r24, 0x91	; 145
    1e9a:	92 e0       	ldi	r25, 0x02	; 2
    1e9c:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
		return 1;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	8d 83       	std	Y+5, r24	; 0x05
    1ea4:	14 c0       	rjmp	.+40     	; 0x1ece <gpib_remove_partner_address+0x9a>
	}
	controller.partners[i].primary = ADDRESS_NOT_SET;
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	fc 01       	movw	r30, r24
    1eb0:	ef 56       	subi	r30, 0x6F	; 111
    1eb2:	fb 4f       	sbci	r31, 0xFB	; 251
    1eb4:	8f ef       	ldi	r24, 0xFF	; 255
    1eb6:	80 83       	st	Z, r24
	controller.partners[i].secondary = ADDRESS_NOT_SET;
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebc:	03 96       	adiw	r24, 0x03	; 3
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	e4 57       	subi	r30, 0x74	; 116
    1ec6:	fb 4f       	sbci	r31, 0xFB	; 251
    1ec8:	8f ef       	ldi	r24, 0xFF	; 255
    1eca:	80 83       	st	Z, r24
	return 0;
    1ecc:	1d 82       	std	Y+5, r1	; 0x05
    1ece:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <gpib_device_exists>:
/**
 * Returns true if device exists.
 *
 * Existence is checked by reading in the status byte of the device in a serial poll sequence.
 */
uchar gpib_device_exists(uchar primary, uchar secondary) {
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	27 97       	sbiw	r28, 0x07	; 7
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	6e 83       	std	Y+6, r22	; 0x06
	uchar b, e;
	uchar found = 0, foundPhysical = ADDRESS_NOT_SET;
    1ef8:	1a 82       	std	Y+2, r1	; 0x02
    1efa:	8f ef       	ldi	r24, 0xFF	; 255
    1efc:	89 83       	std	Y+1, r24	; 0x01

// send unlisten and untalk to all
	gpib_untalkUnlisten();
    1efe:	0e 94 16 06 	call	0xc2c	; 0xc2c <gpib_untalkUnlisten>

// serial poll sequence start
	gpib_spoll_start();
    1f02:	0e 94 a2 0c 	call	0x1944	; 0x1944 <gpib_spoll_start>

// TODO: do next line with a timeout!!!
// query status byte from device
	e = gpib_spoll_single(primary, secondary, &b);
    1f06:	9e 01       	movw	r18, r28
    1f08:	2c 5f       	subi	r18, 0xFC	; 252
    1f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	6e 81       	ldd	r22, Y+6	; 0x06
    1f10:	a9 01       	movw	r20, r18
    1f12:	0e 94 cc 0c 	call	0x1998	; 0x1998 <gpib_spoll_single>
    1f16:	8b 83       	std	Y+3, r24	; 0x03

// serial poll sequence end
	gpib_spoll_end(cmd_buf);
    1f18:	85 e3       	ldi	r24, 0x35	; 53
    1f1a:	95 e0       	ldi	r25, 0x05	; 5
    1f1c:	0e 94 b7 0c 	call	0x196e	; 0x196e <gpib_spoll_end>

	return e != 0xff;
    1f20:	1f 82       	std	Y+7, r1	; 0x07
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	8f 3f       	cpi	r24, 0xFF	; 255
    1f26:	11 f0       	breq	.+4      	; 0x1f2c <gpib_device_exists+0x4c>
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	8f 83       	std	Y+7, r24	; 0x07
    1f2c:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1f2e:	27 96       	adiw	r28, 0x07	; 7
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <gpib_find_devices>:

void gpib_find_devices(uchar maxAddress) {
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	e5 97       	sbiw	r28, 0x35	; 53
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	8d ab       	std	Y+53, r24	; 0x35
	char txt[50];
	for (int i = 1; i < maxAddress; i++) {
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	89 83       	std	Y+1, r24	; 0x01
    1f5e:	39 c0       	rjmp	.+114    	; 0x1fd2 <gpib_find_devices+0x92>
		if (gpib_device_exists(address2TalkerAddress(i), ADDRESS_NOT_SET)) {
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	80 5c       	subi	r24, 0xC0	; 192
    1f64:	6f ef       	ldi	r22, 0xFF	; 255
    1f66:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <gpib_device_exists>
    1f6a:	88 23       	and	r24, r24
    1f6c:	99 f0       	breq	.+38     	; 0x1f94 <gpib_find_devices+0x54>
			sprintf("Device found at address: %d", i);
    1f6e:	29 81       	ldd	r18, Y+1	; 0x01
    1f70:	3a 81       	ldd	r19, Y+2	; 0x02
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <gpib_find_devices+0x34>
    1f74:	00 d0       	rcall	.+0      	; 0x1f76 <gpib_find_devices+0x36>
    1f76:	ed b7       	in	r30, 0x3d	; 61
    1f78:	fe b7       	in	r31, 0x3e	; 62
    1f7a:	31 96       	adiw	r30, 0x01	; 1
    1f7c:	84 ea       	ldi	r24, 0xA4	; 164
    1f7e:	92 e0       	ldi	r25, 0x02	; 2
    1f80:	91 83       	std	Z+1, r25	; 0x01
    1f82:	80 83       	st	Z, r24
    1f84:	33 83       	std	Z+3, r19	; 0x03
    1f86:	22 83       	std	Z+2, r18	; 0x02
    1f88:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
		}
		if (gpib_device_exists(address2TalkerAddress(i), 0)) {
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	80 5c       	subi	r24, 0xC0	; 192
    1f98:	60 e0       	ldi	r22, 0x00	; 0
    1f9a:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <gpib_device_exists>
    1f9e:	88 23       	and	r24, r24
    1fa0:	99 f0       	breq	.+38     	; 0x1fc8 <gpib_find_devices+0x88>
			sprintf("Device found at address: (%d,0)", i);
    1fa2:	29 81       	ldd	r18, Y+1	; 0x01
    1fa4:	3a 81       	ldd	r19, Y+2	; 0x02
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <gpib_find_devices+0x68>
    1fa8:	00 d0       	rcall	.+0      	; 0x1faa <gpib_find_devices+0x6a>
    1faa:	ed b7       	in	r30, 0x3d	; 61
    1fac:	fe b7       	in	r31, 0x3e	; 62
    1fae:	31 96       	adiw	r30, 0x01	; 1
    1fb0:	80 ec       	ldi	r24, 0xC0	; 192
    1fb2:	92 e0       	ldi	r25, 0x02	; 2
    1fb4:	91 83       	std	Z+1, r25	; 0x01
    1fb6:	80 83       	st	Z, r24
    1fb8:	33 83       	std	Z+3, r19	; 0x03
    1fba:	22 83       	std	Z+2, r18	; 0x02
    1fbc:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
	return e != 0xff;
}

void gpib_find_devices(uchar maxAddress) {
	char txt[50];
	for (int i = 1; i < maxAddress; i++) {
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	01 96       	adiw	r24, 0x01	; 1
    1fce:	9a 83       	std	Y+2, r25	; 0x02
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	8d a9       	ldd	r24, Y+53	; 0x35
    1fd4:	28 2f       	mov	r18, r24
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	9a 81       	ldd	r25, Y+2	; 0x02
    1fdc:	82 17       	cp	r24, r18
    1fde:	93 07       	cpc	r25, r19
    1fe0:	0c f4       	brge	.+2      	; 0x1fe4 <gpib_find_devices+0xa4>
    1fe2:	be cf       	rjmp	.-132    	; 0x1f60 <gpib_find_devices+0x20>
		}
		if (gpib_device_exists(address2TalkerAddress(i), 0)) {
			sprintf("Device found at address: (%d,0)", i);
		}
	}
}
    1fe4:	e5 96       	adiw	r28, 0x35	; 53
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <stringToTwoUchars>:

/**
 * Read two integers from string like "45 56" or one integer. In latter case
 * the second integer is initialized with a special value.
 */
static void stringToTwoUchars(char *string, uchar *a, uchar *b) {
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	28 97       	sbiw	r28, 0x08	; 8
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	9c 83       	std	Y+4, r25	; 0x04
    200c:	8b 83       	std	Y+3, r24	; 0x03
    200e:	7e 83       	std	Y+6, r23	; 0x06
    2010:	6d 83       	std	Y+5, r22	; 0x05
    2012:	58 87       	std	Y+8, r21	; 0x08
    2014:	4f 83       	std	Y+7, r20	; 0x07
	char *token = strtok(string, " ");
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	9c 81       	ldd	r25, Y+4	; 0x04
    201a:	20 ee       	ldi	r18, 0xE0	; 224
    201c:	32 e0       	ldi	r19, 0x02	; 2
    201e:	b9 01       	movw	r22, r18
    2020:	0e 94 ff 01 	call	0x3fe	; 0x3fe <strtok>
    2024:	9a 83       	std	Y+2, r25	; 0x02
    2026:	89 83       	std	Y+1, r24	; 0x01
	*a = atoi((char*) token);
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	9a 81       	ldd	r25, Y+2	; 0x02
    202c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <atoi>
    2030:	ed 81       	ldd	r30, Y+5	; 0x05
    2032:	fe 81       	ldd	r31, Y+6	; 0x06
    2034:	80 83       	st	Z, r24
	token = strtok(NULL, " ");
    2036:	20 ee       	ldi	r18, 0xE0	; 224
    2038:	32 e0       	ldi	r19, 0x02	; 2
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	b9 01       	movw	r22, r18
    2040:	0e 94 ff 01 	call	0x3fe	; 0x3fe <strtok>
    2044:	9a 83       	std	Y+2, r25	; 0x02
    2046:	89 83       	std	Y+1, r24	; 0x01
	if (token != NULL) {
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	9a 81       	ldd	r25, Y+2	; 0x02
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	41 f0       	breq	.+16     	; 0x2060 <stringToTwoUchars+0x6a>
		*b = atoi((char*) token);
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	9a 81       	ldd	r25, Y+2	; 0x02
    2054:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <atoi>
    2058:	ef 81       	ldd	r30, Y+7	; 0x07
    205a:	f8 85       	ldd	r31, Y+8	; 0x08
    205c:	80 83       	st	Z, r24
    205e:	04 c0       	rjmp	.+8      	; 0x2068 <stringToTwoUchars+0x72>
	} else {
		*b = ADDRESS_NOT_SET;
    2060:	ef 81       	ldd	r30, Y+7	; 0x07
    2062:	f8 85       	ldd	r31, Y+8	; 0x08
    2064:	8f ef       	ldi	r24, 0xFF	; 255
    2066:	80 83       	st	Z, r24
	}
}
    2068:	28 96       	adiw	r28, 0x08	; 8
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	de bf       	out	0x3e, r29	; 62
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	cd bf       	out	0x3d, r28	; 61
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <check_errors>:
 * Checks for errors.
 *
 * Reads error queue. output is one error per line.
 *
 */
void check_errors() {
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	c6 55       	subi	r28, 0x56	; 86
    2084:	d0 40       	sbci	r29, 0x00	; 0
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	cd bf       	out	0x3d, r28	; 61
	char *error_cmd = "SYST:ERR?";
    2090:	82 ee       	ldi	r24, 0xE2	; 226
    2092:	92 e0       	ldi	r25, 0x02	; 2
    2094:	9d 83       	std	Y+5, r25	; 0x05
    2096:	8c 83       	std	Y+4, r24	; 0x04
	uchar msg[80];
	uchar b, e;
	//uchar colptr = 0;
	uchar allErrorsRead = 0;
    2098:	1a 82       	std	Y+2, r1	; 0x02
    209a:	48 c0       	rjmp	.+144    	; 0x212c <check_errors+0xb2>

	while (!allErrorsRead) {
		gpib_write_command((uchar*) error_cmd);
    209c:	8c 81       	ldd	r24, Y+4	; 0x04
    209e:	9d 81       	ldd	r25, Y+5	; 0x05
    20a0:	0e 94 cf 08 	call	0x119e	; 0x119e <gpib_write_command>
		gpib_prepare_read();
    20a4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <gpib_prepare_read>
		// read the answer until EOI is detected (then e becomes true)
		uchar i = 0;
    20a8:	19 82       	std	Y+1, r1	; 0x01
		do {
			// gpib bus receive
			e = gpib_receive(&b);
    20aa:	ce 01       	movw	r24, r28
    20ac:	8a 5a       	subi	r24, 0xAA	; 170
    20ae:	9f 4f       	sbci	r25, 0xFF	; 255
    20b0:	0e 94 39 06 	call	0xc72	; 0xc72 <gpib_receive>
    20b4:	8b 83       	std	Y+3, r24	; 0x03
			msg[i++] = b;
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	fe 01       	movw	r30, r28
    20be:	ea 5a       	subi	r30, 0xAA	; 170
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	40 81       	ld	r20, Z
    20c4:	ce 01       	movw	r24, r28
    20c6:	06 96       	adiw	r24, 0x06	; 6
    20c8:	fc 01       	movw	r30, r24
    20ca:	e2 0f       	add	r30, r18
    20cc:	f3 1f       	adc	r31, r19
    20ce:	40 83       	st	Z, r20
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	8f 5f       	subi	r24, 0xFF	; 255
    20d4:	89 83       	std	Y+1, r24	; 0x01
		} while (!e);
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	88 23       	and	r24, r24
    20da:	39 f3       	breq	.-50     	; 0x20aa <check_errors+0x30>
		// terminate string
		//msg[i++] = '\n';
		msg[i++] = '\r';
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	28 2f       	mov	r18, r24
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	ce 01       	movw	r24, r28
    20e4:	06 96       	adiw	r24, 0x06	; 6
    20e6:	fc 01       	movw	r30, r24
    20e8:	e2 0f       	add	r30, r18
    20ea:	f3 1f       	adc	r31, r19
    20ec:	8d e0       	ldi	r24, 0x0D	; 13
    20ee:	80 83       	st	Z, r24
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	8f 5f       	subi	r24, 0xFF	; 255
    20f4:	89 83       	std	Y+1, r24	; 0x01
		msg[i] = 0x00;
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	ce 01       	movw	r24, r28
    20fe:	06 96       	adiw	r24, 0x06	; 6
    2100:	fc 01       	movw	r30, r24
    2102:	e2 0f       	add	r30, r18
    2104:	f3 1f       	adc	r31, r19
    2106:	10 82       	st	Z, r1
		// check if all errors have been read
		if (strncmp((char*) msg, "+0,", 3) == 0) {
    2108:	ce 01       	movw	r24, r28
    210a:	06 96       	adiw	r24, 0x06	; 6
    210c:	2c ee       	ldi	r18, 0xEC	; 236
    210e:	32 e0       	ldi	r19, 0x02	; 2
    2110:	b9 01       	movw	r22, r18
    2112:	43 e0       	ldi	r20, 0x03	; 3
    2114:	50 e0       	ldi	r21, 0x00	; 0
    2116:	0e 94 0d 02 	call	0x41a	; 0x41a <strncmp>
    211a:	00 97       	sbiw	r24, 0x00	; 0
    211c:	19 f4       	brne	.+6      	; 0x2124 <check_errors+0xaa>
			allErrorsRead = 1;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	8a 83       	std	Y+2, r24	; 0x02
    2122:	04 c0       	rjmp	.+8      	; 0x212c <check_errors+0xb2>
		} else {
			uart_puts((char*) msg);
    2124:	ce 01       	movw	r24, r28
    2126:	06 96       	adiw	r24, 0x06	; 6
    2128:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
	uchar msg[80];
	uchar b, e;
	//uchar colptr = 0;
	uchar allErrorsRead = 0;

	while (!allErrorsRead) {
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	88 23       	and	r24, r24
    2130:	09 f4       	brne	.+2      	; 0x2134 <check_errors+0xba>
    2132:	b4 cf       	rjmp	.-152    	; 0x209c <check_errors+0x22>
			allErrorsRead = 1;
		} else {
			uart_puts((char*) msg);
		}
	}
}
    2134:	ca 5a       	subi	r28, 0xAA	; 170
    2136:	df 4f       	sbci	r29, 0xFF	; 255
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	de bf       	out	0x3e, r29	; 62
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	cd bf       	out	0x3d, r28	; 61
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <input_char>:

/**
 * Reads in character into parameter c. Checks for errors and prints them out.
 * Returns 0 if there is no char to read, 1 if there was a char read in.
 */
uchar input_char(uchar *ch) {
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	00 d0       	rcall	.+0      	; 0x214e <input_char+0x6>
    214e:	00 d0       	rcall	.+0      	; 0x2150 <input_char+0x8>
    2150:	0f 92       	push	r0
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	9c 83       	std	Y+4, r25	; 0x04
    2158:	8b 83       	std	Y+3, r24	; 0x03
	 * uart_getc() returns in the lower byte the received character and
	 * in the higher byte (bitmask) the last receive error
	 * UART_NO_DATA is returned when no data is available.
	 *
	 */
	c = uart_getc();
    215a:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <uart_getc>
    215e:	9a 83       	std	Y+2, r25	; 0x02
    2160:	89 83       	std	Y+1, r24	; 0x01
	if (c & UART_NO_DATA) {
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	9a 81       	ldd	r25, Y+2	; 0x02
    2166:	80 70       	andi	r24, 0x00	; 0
    2168:	91 70       	andi	r25, 0x01	; 1
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	11 f0       	breq	.+4      	; 0x2172 <input_char+0x2a>
		// no data available from UART
		return 0;
    216e:	1d 82       	std	Y+5, r1	; 0x05
    2170:	24 c0       	rjmp	.+72     	; 0x21ba <input_char+0x72>
	}
	// make uchar from character in int value
	*ch = (uchar) c;
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	eb 81       	ldd	r30, Y+3	; 0x03
    2176:	fc 81       	ldd	r31, Y+4	; 0x04
    2178:	80 83       	st	Z, r24

	/*
	 * new data available from UART
	 * check for Frame or Overrun error
	 */
	if (c & UART_FRAME_ERROR) {
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	9a 81       	ldd	r25, Y+2	; 0x02
    217e:	80 70       	andi	r24, 0x00	; 0
    2180:	98 70       	andi	r25, 0x08	; 8
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	21 f0       	breq	.+8      	; 0x218e <input_char+0x46>
		/* Framing Error detected, i.e no stop bit detected */
		uart_puts_P("UART Frame Error: ");
    2186:	84 e8       	ldi	r24, 0x84	; 132
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
	}
	if (c & UART_OVERRUN_ERROR) {
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	9a 81       	ldd	r25, Y+2	; 0x02
    2192:	80 70       	andi	r24, 0x00	; 0
    2194:	94 70       	andi	r25, 0x04	; 4
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	21 f0       	breq	.+8      	; 0x21a2 <input_char+0x5a>
		/*
		 * Overrun, a character already present in the UART UDR register was
		 * not read by the interrupt handler before the next character arrived,
		 * one or more received characters have been dropped
		 */
		uart_puts_P("UART Overrun Error: ");
    219a:	8f e6       	ldi	r24, 0x6F	; 111
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
	}
	if (c & UART_BUFFER_OVERFLOW) {
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	9a 81       	ldd	r25, Y+2	; 0x02
    21a6:	80 70       	andi	r24, 0x00	; 0
    21a8:	92 70       	andi	r25, 0x02	; 2
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	21 f0       	breq	.+8      	; 0x21b6 <input_char+0x6e>
		/*
		 * We are not reading the receive buffer fast enough,
		 * one or more received character have been dropped
		 */
		uart_puts_P("Buffer overflow error: ");
    21ae:	87 e5       	ldi	r24, 0x57	; 87
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
	}
	return 1;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	8d 83       	std	Y+5, r24	; 0x05
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
}
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <process_char>:
 * a) xon/xoff mode forward buffer to GPIB
 * b) no flow control: prints error message that input buffer is full.
 *
 * Returns 1 if command end is detected, 0 otherwise.
 */
uchar process_char(uchar *buf, uchar ch, int *ptr) {
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <process_char+0x6>
    21d2:	00 d0       	rcall	.+0      	; 0x21d4 <process_char+0x8>
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <process_char+0xa>
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	9b 83       	std	Y+3, r25	; 0x03
    21dc:	8a 83       	std	Y+2, r24	; 0x02
    21de:	6c 83       	std	Y+4, r22	; 0x04
    21e0:	5e 83       	std	Y+6, r21	; 0x06
    21e2:	4d 83       	std	Y+5, r20	; 0x05
	uchar ret = 0;
    21e4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * send received character back depending on global flag
	 */
	if (rs232_remote_echo) {
    21e6:	80 91 86 04 	lds	r24, 0x0486
    21ea:	88 23       	and	r24, r24
    21ec:	19 f0       	breq	.+6      	; 0x21f4 <process_char+0x28>
		uart_putc((unsigned char) ch);
    21ee:	8c 81       	ldd	r24, Y+4	; 0x04
    21f0:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <uart_putc>
	}

	// if input buffer is not full, add char
	if (*ptr < COMMAND_INPUT_BUFFER_SIZE - 1) {
    21f4:	ed 81       	ldd	r30, Y+5	; 0x05
    21f6:	fe 81       	ldd	r31, Y+6	; 0x06
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	8f 34       	cpi	r24, 0x4F	; 79
    21fe:	91 05       	cpc	r25, r1
    2200:	ec f4       	brge	.+58     	; 0x223c <process_char+0x70>
		buf[(*ptr)++] = ch;
    2202:	ed 81       	ldd	r30, Y+5	; 0x05
    2204:	fe 81       	ldd	r31, Y+6	; 0x06
    2206:	40 81       	ld	r20, Z
    2208:	51 81       	ldd	r21, Z+1	; 0x01
    220a:	9a 01       	movw	r18, r20
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	9b 81       	ldd	r25, Y+3	; 0x03
    2210:	fc 01       	movw	r30, r24
    2212:	e2 0f       	add	r30, r18
    2214:	f3 1f       	adc	r31, r19
    2216:	8c 81       	ldd	r24, Y+4	; 0x04
    2218:	80 83       	st	Z, r24
    221a:	ca 01       	movw	r24, r20
    221c:	01 96       	adiw	r24, 0x01	; 1
    221e:	ed 81       	ldd	r30, Y+5	; 0x05
    2220:	fe 81       	ldd	r31, Y+6	; 0x06
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	80 83       	st	Z, r24
		buf[*ptr] = '\0';
    2226:	ed 81       	ldd	r30, Y+5	; 0x05
    2228:	fe 81       	ldd	r31, Y+6	; 0x06
    222a:	80 81       	ld	r24, Z
    222c:	91 81       	ldd	r25, Z+1	; 0x01
    222e:	9c 01       	movw	r18, r24
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	9b 81       	ldd	r25, Y+3	; 0x03
    2234:	fc 01       	movw	r30, r24
    2236:	e2 0f       	add	r30, r18
    2238:	f3 1f       	adc	r31, r19
    223a:	10 82       	st	Z, r1
	}

	// if command ends or buffer is full ...
	if (ch == ASCII_CODE_CR || *ptr >= COMMAND_INPUT_BUFFER_SIZE - 1) {
    223c:	8c 81       	ldd	r24, Y+4	; 0x04
    223e:	8d 30       	cpi	r24, 0x0D	; 13
    2240:	39 f0       	breq	.+14     	; 0x2250 <process_char+0x84>
    2242:	ed 81       	ldd	r30, Y+5	; 0x05
    2244:	fe 81       	ldd	r31, Y+6	; 0x06
    2246:	80 81       	ld	r24, Z
    2248:	91 81       	ldd	r25, Z+1	; 0x01
    224a:	8f 34       	cpi	r24, 0x4F	; 79
    224c:	91 05       	cpc	r25, r1
    224e:	14 f1       	brlt	.+68     	; 0x2294 <process_char+0xc8>
		if (ch == ASCII_CODE_CR) {
    2250:	8c 81       	ldd	r24, Y+4	; 0x04
    2252:	8d 30       	cpi	r24, 0x0D	; 13
    2254:	b9 f4       	brne	.+46     	; 0x2284 <process_char+0xb8>
			// adjust string terminator
			buf[--(*ptr)] = '\0';
    2256:	ed 81       	ldd	r30, Y+5	; 0x05
    2258:	fe 81       	ldd	r31, Y+6	; 0x06
    225a:	80 81       	ld	r24, Z
    225c:	91 81       	ldd	r25, Z+1	; 0x01
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	ed 81       	ldd	r30, Y+5	; 0x05
    2262:	fe 81       	ldd	r31, Y+6	; 0x06
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	80 83       	st	Z, r24
    2268:	ed 81       	ldd	r30, Y+5	; 0x05
    226a:	fe 81       	ldd	r31, Y+6	; 0x06
    226c:	80 81       	ld	r24, Z
    226e:	91 81       	ldd	r25, Z+1	; 0x01
    2270:	9c 01       	movw	r18, r24
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	9b 81       	ldd	r25, Y+3	; 0x03
    2276:	fc 01       	movw	r30, r24
    2278:	e2 0f       	add	r30, r18
    227a:	f3 1f       	adc	r31, r19
    227c:	10 82       	st	Z, r1
			// let calling function send last command part (or command itself)
			ret = 1;
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	89 83       	std	Y+1, r24	; 0x01
    2282:	08 c0       	rjmp	.+16     	; 0x2294 <process_char+0xc8>
		} else {
			// send intermediate part of command.
			uart_puts_P("Command overflow.");
    2284:	87 e9       	ldi	r24, 0x97	; 151
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
			*ptr = 0;
    228c:	ed 81       	ldd	r30, Y+5	; 0x05
    228e:	fe 81       	ldd	r31, Y+6	; 0x06
    2290:	11 82       	std	Z+1, r1	; 0x01
    2292:	10 82       	st	Z, r1
		}
	}
	return ret;
    2294:	89 81       	ldd	r24, Y+1	; 0x01
}
    2296:	26 96       	adiw	r28, 0x06	; 6
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <input_process>:
 * This approach handles small single line commands (needing no flow control) and large
 * multi-line commands if flow control is xon/xoff.
 *
 * \returns The character read in
 */
uchar input_process(uchar *buf, int *ptr) {
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	27 97       	sbiw	r28, 0x07	; 7
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	9c 83       	std	Y+4, r25	; 0x04
    22be:	8b 83       	std	Y+3, r24	; 0x03
    22c0:	7e 83       	std	Y+6, r23	; 0x06
    22c2:	6d 83       	std	Y+5, r22	; 0x05
	uchar ch, ret = 0;
    22c4:	19 82       	std	Y+1, r1	; 0x01

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
    22c6:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <uart_get_flow_control>
    22ca:	81 30       	cpi	r24, 0x01	; 1
    22cc:	b9 f4       	brne	.+46     	; 0x22fc <input_process+0x54>
    22ce:	12 c0       	rjmp	.+36     	; 0x22f4 <input_process+0x4c>
		while (!ret) {
			// if nothing can be read in, return
			if (!input_char(&ch)) {
    22d0:	ce 01       	movw	r24, r28
    22d2:	02 96       	adiw	r24, 0x02	; 2
    22d4:	0e 94 a4 10 	call	0x2148	; 0x2148 <input_char>
    22d8:	88 23       	and	r24, r24
    22da:	11 f4       	brne	.+4      	; 0x22e0 <input_process+0x38>
				return 0;
    22dc:	1f 82       	std	Y+7, r1	; 0x07
    22de:	22 c0       	rjmp	.+68     	; 0x2324 <input_process+0x7c>
			}
			ret = process_char(buf, ch, ptr);
    22e0:	4a 81       	ldd	r20, Y+2	; 0x02
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	9c 81       	ldd	r25, Y+4	; 0x04
    22e6:	2d 81       	ldd	r18, Y+5	; 0x05
    22e8:	3e 81       	ldd	r19, Y+6	; 0x06
    22ea:	64 2f       	mov	r22, r20
    22ec:	a9 01       	movw	r20, r18
    22ee:	0e 94 e6 10 	call	0x21cc	; 0x21cc <process_char>
    22f2:	89 83       	std	Y+1, r24	; 0x01
 */
uchar input_process(uchar *buf, int *ptr) {
	uchar ch, ret = 0;

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
		while (!ret) {
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	88 23       	and	r24, r24
    22f8:	59 f3       	breq	.-42     	; 0x22d0 <input_process+0x28>
    22fa:	12 c0       	rjmp	.+36     	; 0x2320 <input_process+0x78>
			}
			ret = process_char(buf, ch, ptr);
		}
	} else {
		// if nothing can be read in, return
		if (!input_char(&ch)) {
    22fc:	ce 01       	movw	r24, r28
    22fe:	02 96       	adiw	r24, 0x02	; 2
    2300:	0e 94 a4 10 	call	0x2148	; 0x2148 <input_char>
    2304:	88 23       	and	r24, r24
    2306:	11 f4       	brne	.+4      	; 0x230c <input_process+0x64>
			return 0;
    2308:	1f 82       	std	Y+7, r1	; 0x07
    230a:	0c c0       	rjmp	.+24     	; 0x2324 <input_process+0x7c>
		}
		ret = process_char(buf, ch, ptr);
    230c:	4a 81       	ldd	r20, Y+2	; 0x02
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	9c 81       	ldd	r25, Y+4	; 0x04
    2312:	2d 81       	ldd	r18, Y+5	; 0x05
    2314:	3e 81       	ldd	r19, Y+6	; 0x06
    2316:	64 2f       	mov	r22, r20
    2318:	a9 01       	movw	r20, r18
    231a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <process_char>
    231e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    2320:	89 81       	ldd	r24, Y+1	; 0x01
    2322:	8f 83       	std	Y+7, r24	; 0x07
    2324:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2326:	27 96       	adiw	r28, 0x07	; 7
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <handle_internal_commands>:

/**
 * Handles builtin commands.
 */
void handle_internal_commands(uchar *cmd) {
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	00 d0       	rcall	.+0      	; 0x233e <handle_internal_commands+0x6>
    233e:	00 d0       	rcall	.+0      	; 0x2340 <handle_internal_commands+0x8>
    2340:	00 d0       	rcall	.+0      	; 0x2342 <handle_internal_commands+0xa>
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	9c 83       	std	Y+4, r25	; 0x04
    2348:	8b 83       	std	Y+3, r24	; 0x03
	uchar val, val1;

	switch (cmd[1]) {
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	fc 01       	movw	r30, r24
    2350:	31 96       	adiw	r30, 0x01	; 1
    2352:	80 81       	ld	r24, Z
    2354:	28 2f       	mov	r18, r24
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	3e 83       	std	Y+6, r19	; 0x06
    235a:	2d 83       	std	Y+5, r18	; 0x05
    235c:	8d 81       	ldd	r24, Y+5	; 0x05
    235e:	9e 81       	ldd	r25, Y+6	; 0x06
    2360:	88 36       	cpi	r24, 0x68	; 104
    2362:	91 05       	cpc	r25, r1
    2364:	09 f4       	brne	.+2      	; 0x2368 <handle_internal_commands+0x30>
    2366:	98 c0       	rjmp	.+304    	; 0x2498 <handle_internal_commands+0x160>
    2368:	2d 81       	ldd	r18, Y+5	; 0x05
    236a:	3e 81       	ldd	r19, Y+6	; 0x06
    236c:	29 36       	cpi	r18, 0x69	; 105
    236e:	31 05       	cpc	r19, r1
    2370:	2c f5       	brge	.+74     	; 0x23bc <handle_internal_commands+0x84>
    2372:	8d 81       	ldd	r24, Y+5	; 0x05
    2374:	9e 81       	ldd	r25, Y+6	; 0x06
    2376:	81 36       	cpi	r24, 0x61	; 97
    2378:	91 05       	cpc	r25, r1
    237a:	09 f4       	brne	.+2      	; 0x237e <handle_internal_commands+0x46>
    237c:	44 c0       	rjmp	.+136    	; 0x2406 <handle_internal_commands+0xce>
    237e:	2d 81       	ldd	r18, Y+5	; 0x05
    2380:	3e 81       	ldd	r19, Y+6	; 0x06
    2382:	22 36       	cpi	r18, 0x62	; 98
    2384:	31 05       	cpc	r19, r1
    2386:	6c f4       	brge	.+26     	; 0x23a2 <handle_internal_commands+0x6a>
    2388:	8d 81       	ldd	r24, Y+5	; 0x05
    238a:	9e 81       	ldd	r25, Y+6	; 0x06
    238c:	8b 32       	cpi	r24, 0x2B	; 43
    238e:	91 05       	cpc	r25, r1
    2390:	09 f4       	brne	.+2      	; 0x2394 <handle_internal_commands+0x5c>
    2392:	50 c1       	rjmp	.+672    	; 0x2634 <handle_internal_commands+0x2fc>
    2394:	2d 81       	ldd	r18, Y+5	; 0x05
    2396:	3e 81       	ldd	r19, Y+6	; 0x06
    2398:	2d 32       	cpi	r18, 0x2D	; 45
    239a:	31 05       	cpc	r19, r1
    239c:	09 f4       	brne	.+2      	; 0x23a0 <handle_internal_commands+0x68>
    239e:	88 c1       	rjmp	.+784    	; 0x26b0 <handle_internal_commands+0x378>
    23a0:	f1 c1       	rjmp	.+994    	; 0x2784 <handle_internal_commands+0x44c>
    23a2:	8d 81       	ldd	r24, Y+5	; 0x05
    23a4:	9e 81       	ldd	r25, Y+6	; 0x06
    23a6:	85 36       	cpi	r24, 0x65	; 101
    23a8:	91 05       	cpc	r25, r1
    23aa:	09 f4       	brne	.+2      	; 0x23ae <handle_internal_commands+0x76>
    23ac:	6a c0       	rjmp	.+212    	; 0x2482 <handle_internal_commands+0x14a>
    23ae:	2d 81       	ldd	r18, Y+5	; 0x05
    23b0:	3e 81       	ldd	r19, Y+6	; 0x06
    23b2:	26 36       	cpi	r18, 0x66	; 102
    23b4:	31 05       	cpc	r19, r1
    23b6:	09 f4       	brne	.+2      	; 0x23ba <handle_internal_commands+0x82>
    23b8:	6b c0       	rjmp	.+214    	; 0x2490 <handle_internal_commands+0x158>
    23ba:	e4 c1       	rjmp	.+968    	; 0x2784 <handle_internal_commands+0x44c>
    23bc:	8d 81       	ldd	r24, Y+5	; 0x05
    23be:	9e 81       	ldd	r25, Y+6	; 0x06
    23c0:	83 37       	cpi	r24, 0x73	; 115
    23c2:	91 05       	cpc	r25, r1
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <handle_internal_commands+0x90>
    23c6:	0b c1       	rjmp	.+534    	; 0x25de <handle_internal_commands+0x2a6>
    23c8:	2d 81       	ldd	r18, Y+5	; 0x05
    23ca:	3e 81       	ldd	r19, Y+6	; 0x06
    23cc:	24 37       	cpi	r18, 0x74	; 116
    23ce:	31 05       	cpc	r19, r1
    23d0:	6c f4       	brge	.+26     	; 0x23ec <handle_internal_commands+0xb4>
    23d2:	8d 81       	ldd	r24, Y+5	; 0x05
    23d4:	9e 81       	ldd	r25, Y+6	; 0x06
    23d6:	89 36       	cpi	r24, 0x69	; 105
    23d8:	91 05       	cpc	r25, r1
    23da:	09 f4       	brne	.+2      	; 0x23de <handle_internal_commands+0xa6>
    23dc:	60 c0       	rjmp	.+192    	; 0x249e <handle_internal_commands+0x166>
    23de:	2d 81       	ldd	r18, Y+5	; 0x05
    23e0:	3e 81       	ldd	r19, Y+6	; 0x06
    23e2:	22 37       	cpi	r18, 0x72	; 114
    23e4:	31 05       	cpc	r19, r1
    23e6:	09 f4       	brne	.+2      	; 0x23ea <handle_internal_commands+0xb2>
    23e8:	e7 c0       	rjmp	.+462    	; 0x25b8 <handle_internal_commands+0x280>
    23ea:	cc c1       	rjmp	.+920    	; 0x2784 <handle_internal_commands+0x44c>
    23ec:	8d 81       	ldd	r24, Y+5	; 0x05
    23ee:	9e 81       	ldd	r25, Y+6	; 0x06
    23f0:	88 37       	cpi	r24, 0x78	; 120
    23f2:	91 05       	cpc	r25, r1
    23f4:	09 f4       	brne	.+2      	; 0x23f8 <handle_internal_commands+0xc0>
    23f6:	9a c1       	rjmp	.+820    	; 0x272c <handle_internal_commands+0x3f4>
    23f8:	2d 81       	ldd	r18, Y+5	; 0x05
    23fa:	3e 81       	ldd	r19, Y+6	; 0x06
    23fc:	29 37       	cpi	r18, 0x79	; 121
    23fe:	31 05       	cpc	r19, r1
    2400:	09 f4       	brne	.+2      	; 0x2404 <handle_internal_commands+0xcc>
    2402:	ad c1       	rjmp	.+858    	; 0x275e <handle_internal_commands+0x426>
    2404:	bf c1       	rjmp	.+894    	; 0x2784 <handle_internal_commands+0x44c>
	case 'a':
		/* set partner primary+secondary address */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	9c 81       	ldd	r25, Y+4	; 0x04
    240a:	02 96       	adiw	r24, 0x02	; 2
    240c:	ae 01       	movw	r20, r28
    240e:	4e 5f       	subi	r20, 0xFE	; 254
    2410:	5f 4f       	sbci	r21, 0xFF	; 255
    2412:	9e 01       	movw	r18, r28
    2414:	2f 5f       	subi	r18, 0xFF	; 255
    2416:	3f 4f       	sbci	r19, 0xFF	; 255
    2418:	b9 01       	movw	r22, r18
    241a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <stringToTwoUchars>
		sprintf((char*) cmd,
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	28 2f       	mov	r18, r24
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	48 2f       	mov	r20, r24
    2428:	50 e0       	ldi	r21, 0x00	; 0
    242a:	8d b7       	in	r24, 0x3d	; 61
    242c:	9e b7       	in	r25, 0x3e	; 62
    242e:	08 97       	sbiw	r24, 0x08	; 8
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	9e bf       	out	0x3e, r25	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	8d bf       	out	0x3d, r24	; 61
    243a:	ed b7       	in	r30, 0x3d	; 61
    243c:	fe b7       	in	r31, 0x3e	; 62
    243e:	31 96       	adiw	r30, 0x01	; 1
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	9c 81       	ldd	r25, Y+4	; 0x04
    2444:	91 83       	std	Z+1, r25	; 0x01
    2446:	80 83       	st	Z, r24
    2448:	80 ef       	ldi	r24, 0xF0	; 240
    244a:	92 e0       	ldi	r25, 0x02	; 2
    244c:	93 83       	std	Z+3, r25	; 0x03
    244e:	82 83       	std	Z+2, r24	; 0x02
    2450:	35 83       	std	Z+5, r19	; 0x05
    2452:	24 83       	std	Z+4, r18	; 0x04
    2454:	57 83       	std	Z+7, r21	; 0x07
    2456:	46 83       	std	Z+6, r20	; 0x06
    2458:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
    245c:	2d b7       	in	r18, 0x3d	; 61
    245e:	3e b7       	in	r19, 0x3e	; 62
    2460:	28 5f       	subi	r18, 0xF8	; 248
    2462:	3f 4f       	sbci	r19, 0xFF	; 255
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	f8 94       	cli
    2468:	3e bf       	out	0x3e, r19	; 62
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	2d bf       	out	0x3d, r18	; 61
				"Set partner address, primary: %u , secondary: %u\n\r", val,
				val1);
		uart_puts((char*) cmd);
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	9c 81       	ldd	r25, Y+4	; 0x04
    2472:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
		gpib_set_partner_address(val, val1);
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	9a 81       	ldd	r25, Y+2	; 0x02
    247a:	69 2f       	mov	r22, r25
    247c:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <gpib_set_partner_address>
    2480:	87 c1       	rjmp	.+782    	; 0x2790 <handle_internal_commands+0x458>
		break;
	case 'e':
		uart_puts_P("Check errors\n\r");
    2482:	88 e3       	ldi	r24, 0x38	; 56
    2484:	91 e0       	ldi	r25, 0x01	; 1
    2486:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
		check_errors();
    248a:	0e 94 3d 10 	call	0x207a	; 0x207a <check_errors>
    248e:	80 c1       	rjmp	.+768    	; 0x2790 <handle_internal_commands+0x458>
		break;
	case 'f':
		/* find devices */
		gpib_find_devices(10);
    2490:	8a e0       	ldi	r24, 0x0A	; 10
    2492:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <gpib_find_devices>
    2496:	7c c1       	rjmp	.+760    	; 0x2790 <handle_internal_commands+0x458>
		break;
	case 'h':
		/* print some usage infos */
		printHelp();
    2498:	0e 94 90 14 	call	0x2920	; 0x2920 <printHelp>
    249c:	79 c1       	rjmp	.+754    	; 0x2790 <handle_internal_commands+0x458>
		break;
	case 'i':
		gpib_info();
    249e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <gpib_info>
		sprintf((char*) cmd, "Xon/Xoff flow control: %u\n\r", xonXoffMode);
    24a2:	80 91 87 04 	lds	r24, 0x0487
    24a6:	28 2f       	mov	r18, r24
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	00 d0       	rcall	.+0      	; 0x24ac <handle_internal_commands+0x174>
    24ac:	00 d0       	rcall	.+0      	; 0x24ae <handle_internal_commands+0x176>
    24ae:	00 d0       	rcall	.+0      	; 0x24b0 <handle_internal_commands+0x178>
    24b0:	ed b7       	in	r30, 0x3d	; 61
    24b2:	fe b7       	in	r31, 0x3e	; 62
    24b4:	31 96       	adiw	r30, 0x01	; 1
    24b6:	8b 81       	ldd	r24, Y+3	; 0x03
    24b8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ba:	91 83       	std	Z+1, r25	; 0x01
    24bc:	80 83       	st	Z, r24
    24be:	83 e2       	ldi	r24, 0x23	; 35
    24c0:	93 e0       	ldi	r25, 0x03	; 3
    24c2:	93 83       	std	Z+3, r25	; 0x03
    24c4:	82 83       	std	Z+2, r24	; 0x02
    24c6:	35 83       	std	Z+5, r19	; 0x05
    24c8:	24 83       	std	Z+4, r18	; 0x04
    24ca:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
    24ce:	8d b7       	in	r24, 0x3d	; 61
    24d0:	9e b7       	in	r25, 0x3e	; 62
    24d2:	06 96       	adiw	r24, 0x06	; 6
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	9e bf       	out	0x3e, r25	; 62
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	8d bf       	out	0x3d, r24	; 61
		uart_puts((char*) cmd);
    24de:	8b 81       	ldd	r24, Y+3	; 0x03
    24e0:	9c 81       	ldd	r25, Y+4	; 0x04
    24e2:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
		sprintf((char*) cmd, "RS232 echo: %u\n\r", rs232_remote_echo);
    24e6:	80 91 86 04 	lds	r24, 0x0486
    24ea:	28 2f       	mov	r18, r24
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	00 d0       	rcall	.+0      	; 0x24f0 <handle_internal_commands+0x1b8>
    24f0:	00 d0       	rcall	.+0      	; 0x24f2 <handle_internal_commands+0x1ba>
    24f2:	00 d0       	rcall	.+0      	; 0x24f4 <handle_internal_commands+0x1bc>
    24f4:	ed b7       	in	r30, 0x3d	; 61
    24f6:	fe b7       	in	r31, 0x3e	; 62
    24f8:	31 96       	adiw	r30, 0x01	; 1
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	9c 81       	ldd	r25, Y+4	; 0x04
    24fe:	91 83       	std	Z+1, r25	; 0x01
    2500:	80 83       	st	Z, r24
    2502:	8f e3       	ldi	r24, 0x3F	; 63
    2504:	93 e0       	ldi	r25, 0x03	; 3
    2506:	93 83       	std	Z+3, r25	; 0x03
    2508:	82 83       	std	Z+2, r24	; 0x02
    250a:	35 83       	std	Z+5, r19	; 0x05
    250c:	24 83       	std	Z+4, r18	; 0x04
    250e:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
    2512:	2d b7       	in	r18, 0x3d	; 61
    2514:	3e b7       	in	r19, 0x3e	; 62
    2516:	2a 5f       	subi	r18, 0xFA	; 250
    2518:	3f 4f       	sbci	r19, 0xFF	; 255
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	3e bf       	out	0x3e, r19	; 62
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	2d bf       	out	0x3d, r18	; 61
		uart_puts((char*) cmd);
    2524:	8b 81       	ldd	r24, Y+3	; 0x03
    2526:	9c 81       	ldd	r25, Y+4	; 0x04
    2528:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
		sprintf((char*) cmd, "SRQs enabled: %u\n\r", srq_enabled);
    252c:	80 91 88 04 	lds	r24, 0x0488
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	00 d0       	rcall	.+0      	; 0x2536 <handle_internal_commands+0x1fe>
    2536:	00 d0       	rcall	.+0      	; 0x2538 <handle_internal_commands+0x200>
    2538:	00 d0       	rcall	.+0      	; 0x253a <handle_internal_commands+0x202>
    253a:	ed b7       	in	r30, 0x3d	; 61
    253c:	fe b7       	in	r31, 0x3e	; 62
    253e:	31 96       	adiw	r30, 0x01	; 1
    2540:	8b 81       	ldd	r24, Y+3	; 0x03
    2542:	9c 81       	ldd	r25, Y+4	; 0x04
    2544:	91 83       	std	Z+1, r25	; 0x01
    2546:	80 83       	st	Z, r24
    2548:	80 e5       	ldi	r24, 0x50	; 80
    254a:	93 e0       	ldi	r25, 0x03	; 3
    254c:	93 83       	std	Z+3, r25	; 0x03
    254e:	82 83       	std	Z+2, r24	; 0x02
    2550:	35 83       	std	Z+5, r19	; 0x05
    2552:	24 83       	std	Z+4, r18	; 0x04
    2554:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
    2558:	8d b7       	in	r24, 0x3d	; 61
    255a:	9e b7       	in	r25, 0x3e	; 62
    255c:	06 96       	adiw	r24, 0x06	; 6
    255e:	0f b6       	in	r0, 0x3f	; 63
    2560:	f8 94       	cli
    2562:	9e bf       	out	0x3e, r25	; 62
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	8d bf       	out	0x3d, r24	; 61
		uart_puts((char*) cmd);
    2568:	8b 81       	ldd	r24, Y+3	; 0x03
    256a:	9c 81       	ldd	r25, Y+4	; 0x04
    256c:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
		sprintf((char*) cmd, "Linebreak value: %u\n\r", linebreak);
    2570:	80 91 89 04 	lds	r24, 0x0489
    2574:	28 2f       	mov	r18, r24
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	00 d0       	rcall	.+0      	; 0x257a <handle_internal_commands+0x242>
    257a:	00 d0       	rcall	.+0      	; 0x257c <handle_internal_commands+0x244>
    257c:	00 d0       	rcall	.+0      	; 0x257e <handle_internal_commands+0x246>
    257e:	ed b7       	in	r30, 0x3d	; 61
    2580:	fe b7       	in	r31, 0x3e	; 62
    2582:	31 96       	adiw	r30, 0x01	; 1
    2584:	8b 81       	ldd	r24, Y+3	; 0x03
    2586:	9c 81       	ldd	r25, Y+4	; 0x04
    2588:	91 83       	std	Z+1, r25	; 0x01
    258a:	80 83       	st	Z, r24
    258c:	83 e6       	ldi	r24, 0x63	; 99
    258e:	93 e0       	ldi	r25, 0x03	; 3
    2590:	93 83       	std	Z+3, r25	; 0x03
    2592:	82 83       	std	Z+2, r24	; 0x02
    2594:	35 83       	std	Z+5, r19	; 0x05
    2596:	24 83       	std	Z+4, r18	; 0x04
    2598:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
    259c:	2d b7       	in	r18, 0x3d	; 61
    259e:	3e b7       	in	r19, 0x3e	; 62
    25a0:	2a 5f       	subi	r18, 0xFA	; 250
    25a2:	3f 4f       	sbci	r19, 0xFF	; 255
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	f8 94       	cli
    25a8:	3e bf       	out	0x3e, r19	; 62
    25aa:	0f be       	out	0x3f, r0	; 63
    25ac:	2d bf       	out	0x3d, r18	; 61
		uart_puts((char*) cmd);
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	9c 81       	ldd	r25, Y+4	; 0x04
    25b2:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
    25b6:	ec c0       	rjmp	.+472    	; 0x2790 <handle_internal_commands+0x458>
		break;
	case 'r':
		/* SRQ enablement */
		if (!srq_enabled) {
    25b8:	80 91 88 04 	lds	r24, 0x0488
    25bc:	88 23       	and	r24, r24
    25be:	41 f4       	brne	.+16     	; 0x25d0 <handle_internal_commands+0x298>
			srq_enabled = 1;
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	80 93 88 04 	sts	0x0488, r24
			uart_puts_P("SRQs enabled\n\r");
    25c6:	89 e2       	ldi	r24, 0x29	; 41
    25c8:	91 e0       	ldi	r25, 0x01	; 1
    25ca:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
    25ce:	e0 c0       	rjmp	.+448    	; 0x2790 <handle_internal_commands+0x458>
		} else {
			srq_enabled = 0;
    25d0:	10 92 88 04 	sts	0x0488, r1
			uart_puts_P("SRQs disabled\n\r");
    25d4:	89 e1       	ldi	r24, 0x19	; 25
    25d6:	91 e0       	ldi	r25, 0x01	; 1
    25d8:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
    25dc:	d9 c0       	rjmp	.+434    	; 0x2790 <handle_internal_commands+0x458>
		}
		break;
	case 's':
		/* set partner secondary address */
		val = atoi((char*) (&(cmd[2])));
    25de:	8b 81       	ldd	r24, Y+3	; 0x03
    25e0:	9c 81       	ldd	r25, Y+4	; 0x04
    25e2:	02 96       	adiw	r24, 0x02	; 2
    25e4:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <atoi>
    25e8:	89 83       	std	Y+1, r24	; 0x01
		sprintf((char*) cmd, "Set partner secondary address to %u\n\r", val);
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <handle_internal_commands+0x2ba>
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <handle_internal_commands+0x2bc>
    25f4:	00 d0       	rcall	.+0      	; 0x25f6 <handle_internal_commands+0x2be>
    25f6:	ed b7       	in	r30, 0x3d	; 61
    25f8:	fe b7       	in	r31, 0x3e	; 62
    25fa:	31 96       	adiw	r30, 0x01	; 1
    25fc:	8b 81       	ldd	r24, Y+3	; 0x03
    25fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	80 83       	st	Z, r24
    2604:	89 e7       	ldi	r24, 0x79	; 121
    2606:	93 e0       	ldi	r25, 0x03	; 3
    2608:	93 83       	std	Z+3, r25	; 0x03
    260a:	82 83       	std	Z+2, r24	; 0x02
    260c:	35 83       	std	Z+5, r19	; 0x05
    260e:	24 83       	std	Z+4, r18	; 0x04
    2610:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
    2614:	8d b7       	in	r24, 0x3d	; 61
    2616:	9e b7       	in	r25, 0x3e	; 62
    2618:	06 96       	adiw	r24, 0x06	; 6
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	9e bf       	out	0x3e, r25	; 62
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	8d bf       	out	0x3d, r24	; 61
		uart_puts((char*) cmd);
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	9c 81       	ldd	r25, Y+4	; 0x04
    2628:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
		gpib_set_partner_secondary(val);
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <gpib_set_partner_secondary>
    2632:	ae c0       	rjmp	.+348    	; 0x2790 <handle_internal_commands+0x458>
		break;
	case '+':
		/* add device */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	9c 81       	ldd	r25, Y+4	; 0x04
    2638:	02 96       	adiw	r24, 0x02	; 2
    263a:	ae 01       	movw	r20, r28
    263c:	4e 5f       	subi	r20, 0xFE	; 254
    263e:	5f 4f       	sbci	r21, 0xFF	; 255
    2640:	9e 01       	movw	r18, r28
    2642:	2f 5f       	subi	r18, 0xFF	; 255
    2644:	3f 4f       	sbci	r19, 0xFF	; 255
    2646:	b9 01       	movw	r22, r18
    2648:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <stringToTwoUchars>
		sprintf((char*) cmd, "Add device, primary: %u , secondary: %u\n\r", val,
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	28 2f       	mov	r18, r24
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	8a 81       	ldd	r24, Y+2	; 0x02
    2654:	48 2f       	mov	r20, r24
    2656:	50 e0       	ldi	r21, 0x00	; 0
    2658:	8d b7       	in	r24, 0x3d	; 61
    265a:	9e b7       	in	r25, 0x3e	; 62
    265c:	08 97       	sbiw	r24, 0x08	; 8
    265e:	0f b6       	in	r0, 0x3f	; 63
    2660:	f8 94       	cli
    2662:	9e bf       	out	0x3e, r25	; 62
    2664:	0f be       	out	0x3f, r0	; 63
    2666:	8d bf       	out	0x3d, r24	; 61
    2668:	ed b7       	in	r30, 0x3d	; 61
    266a:	fe b7       	in	r31, 0x3e	; 62
    266c:	31 96       	adiw	r30, 0x01	; 1
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	9c 81       	ldd	r25, Y+4	; 0x04
    2672:	91 83       	std	Z+1, r25	; 0x01
    2674:	80 83       	st	Z, r24
    2676:	8f e9       	ldi	r24, 0x9F	; 159
    2678:	93 e0       	ldi	r25, 0x03	; 3
    267a:	93 83       	std	Z+3, r25	; 0x03
    267c:	82 83       	std	Z+2, r24	; 0x02
    267e:	35 83       	std	Z+5, r19	; 0x05
    2680:	24 83       	std	Z+4, r18	; 0x04
    2682:	57 83       	std	Z+7, r21	; 0x07
    2684:	46 83       	std	Z+6, r20	; 0x06
    2686:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
    268a:	2d b7       	in	r18, 0x3d	; 61
    268c:	3e b7       	in	r19, 0x3e	; 62
    268e:	28 5f       	subi	r18, 0xF8	; 248
    2690:	3f 4f       	sbci	r19, 0xFF	; 255
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	3e bf       	out	0x3e, r19	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	2d bf       	out	0x3d, r18	; 61
				val1);
		uart_puts((char*) cmd);
    269c:	8b 81       	ldd	r24, Y+3	; 0x03
    269e:	9c 81       	ldd	r25, Y+4	; 0x04
    26a0:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
		gpib_add_partner_address(val, val1);
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	9a 81       	ldd	r25, Y+2	; 0x02
    26a8:	69 2f       	mov	r22, r25
    26aa:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <gpib_add_partner_address>
    26ae:	70 c0       	rjmp	.+224    	; 0x2790 <handle_internal_commands+0x458>
		break;
	case '-':
		/* add device */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    26b0:	8b 81       	ldd	r24, Y+3	; 0x03
    26b2:	9c 81       	ldd	r25, Y+4	; 0x04
    26b4:	02 96       	adiw	r24, 0x02	; 2
    26b6:	ae 01       	movw	r20, r28
    26b8:	4e 5f       	subi	r20, 0xFE	; 254
    26ba:	5f 4f       	sbci	r21, 0xFF	; 255
    26bc:	9e 01       	movw	r18, r28
    26be:	2f 5f       	subi	r18, 0xFF	; 255
    26c0:	3f 4f       	sbci	r19, 0xFF	; 255
    26c2:	b9 01       	movw	r22, r18
    26c4:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <stringToTwoUchars>
		sprintf((char*) cmd, "Remove device, primary: %u , secondary: %u\n\r",
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	8a 81       	ldd	r24, Y+2	; 0x02
    26d0:	48 2f       	mov	r20, r24
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	8d b7       	in	r24, 0x3d	; 61
    26d6:	9e b7       	in	r25, 0x3e	; 62
    26d8:	08 97       	sbiw	r24, 0x08	; 8
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	9e bf       	out	0x3e, r25	; 62
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	8d bf       	out	0x3d, r24	; 61
    26e4:	ed b7       	in	r30, 0x3d	; 61
    26e6:	fe b7       	in	r31, 0x3e	; 62
    26e8:	31 96       	adiw	r30, 0x01	; 1
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	9c 81       	ldd	r25, Y+4	; 0x04
    26ee:	91 83       	std	Z+1, r25	; 0x01
    26f0:	80 83       	st	Z, r24
    26f2:	89 ec       	ldi	r24, 0xC9	; 201
    26f4:	93 e0       	ldi	r25, 0x03	; 3
    26f6:	93 83       	std	Z+3, r25	; 0x03
    26f8:	82 83       	std	Z+2, r24	; 0x02
    26fa:	35 83       	std	Z+5, r19	; 0x05
    26fc:	24 83       	std	Z+4, r18	; 0x04
    26fe:	57 83       	std	Z+7, r21	; 0x07
    2700:	46 83       	std	Z+6, r20	; 0x06
    2702:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
    2706:	2d b7       	in	r18, 0x3d	; 61
    2708:	3e b7       	in	r19, 0x3e	; 62
    270a:	28 5f       	subi	r18, 0xF8	; 248
    270c:	3f 4f       	sbci	r19, 0xFF	; 255
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	3e bf       	out	0x3e, r19	; 62
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	2d bf       	out	0x3d, r18	; 61
				val, val1);
		uart_puts((char*) cmd);
    2718:	8b 81       	ldd	r24, Y+3	; 0x03
    271a:	9c 81       	ldd	r25, Y+4	; 0x04
    271c:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
		gpib_remove_partner_address(val, val1);
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	69 2f       	mov	r22, r25
    2726:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <gpib_remove_partner_address>
    272a:	32 c0       	rjmp	.+100    	; 0x2790 <handle_internal_commands+0x458>
		break;
	case 'x':
		/* Xon/Xoff flow control */
		if (!xonXoffMode) {
    272c:	80 91 87 04 	lds	r24, 0x0487
    2730:	88 23       	and	r24, r24
    2732:	59 f4       	brne	.+22     	; 0x274a <handle_internal_commands+0x412>
			xonXoffMode = 1;
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	80 93 87 04 	sts	0x0487, r24
			uart_set_flow_control(FLOWCONTROL_XONXOFF);
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol on\n\r");
    2740:	8f ef       	ldi	r24, 0xFF	; 255
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
    2748:	23 c0       	rjmp	.+70     	; 0x2790 <handle_internal_commands+0x458>
		} else {
			xonXoffMode = 0;
    274a:	10 92 87 04 	sts	0x0487, r1
			uart_set_flow_control(FLOWCONTROL_NONE);
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol off\n\r");
    2754:	84 ee       	ldi	r24, 0xE4	; 228
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
    275c:	19 c0       	rjmp	.+50     	; 0x2790 <handle_internal_commands+0x458>
		}
		break;
	case 'y':
		/* machine output control */
		if (!machineOutput) {
    275e:	80 91 9b 04 	lds	r24, 0x049B
    2762:	88 23       	and	r24, r24
    2764:	41 f4       	brne	.+16     	; 0x2776 <handle_internal_commands+0x43e>
			machineOutput = 1;
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	80 93 9b 04 	sts	0x049B, r24
			uart_puts_P("machine output on\n\r");
    276c:	80 ed       	ldi	r24, 0xD0	; 208
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
    2774:	0d c0       	rjmp	.+26     	; 0x2790 <handle_internal_commands+0x458>
		} else {
			machineOutput = 0;
    2776:	10 92 9b 04 	sts	0x049B, r1
			uart_puts_P("machine output off\n\r");
    277a:	8b eb       	ldi	r24, 0xBB	; 187
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
    2782:	06 c0       	rjmp	.+12     	; 0x2790 <handle_internal_commands+0x458>
		arb();
		uart_puts("arb done\n\r");
		break;
#endif
	default:
		uart_puts_P("unknown command\n\r");
    2784:	89 ea       	ldi	r24, 0xA9	; 169
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
		printHelp();
    278c:	0e 94 90 14 	call	0x2920	; 0x2920 <printHelp>
		break;
	}
	if (machineOutput) {
    2790:	80 91 9b 04 	lds	r24, 0x049B
    2794:	88 23       	and	r24, r24
    2796:	21 f0       	breq	.+8      	; 0x27a0 <handle_internal_commands+0x468>
		uart_puts("[EOI]");
    2798:	86 ef       	ldi	r24, 0xF6	; 246
    279a:	93 e0       	ldi	r25, 0x03	; 3
    279c:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
	}
}
    27a0:	26 96       	adiw	r28, 0x06	; 6
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	f8 94       	cli
    27a6:	de bf       	out	0x3e, r29	; 62
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	cd bf       	out	0x3d, r28	; 61
    27ac:	cf 91       	pop	r28
    27ae:	df 91       	pop	r29
    27b0:	08 95       	ret

000027b2 <receiveAnswer>:
		//uart_puts((char*)buf);
	} while (!e);
}
#else

void receiveAnswer() {
    27b2:	df 93       	push	r29
    27b4:	cf 93       	push	r28
    27b6:	cd b7       	in	r28, 0x3d	; 61
    27b8:	de b7       	in	r29, 0x3e	; 62
	gpib_prepare_read();
    27ba:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <gpib_prepare_read>
	gpib_read_until_eoi(machineOutput, linebreak);
    27be:	80 91 9b 04 	lds	r24, 0x049B
    27c2:	90 91 89 04 	lds	r25, 0x0489
    27c6:	69 2f       	mov	r22, r25
    27c8:	0e 94 27 07 	call	0xe4e	; 0xe4e <gpib_read_until_eoi>
}
    27cc:	cf 91       	pop	r28
    27ce:	df 91       	pop	r29
    27d0:	08 95       	ret

000027d2 <srq_occured>:
#endif

/**
 * Check if a SRQ occured
 */
uchar srq_occured(int* old_time) {
    27d2:	df 93       	push	r29
    27d4:	cf 93       	push	r28
    27d6:	00 d0       	rcall	.+0      	; 0x27d8 <srq_occured+0x6>
    27d8:	0f 92       	push	r0
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    27de:	9b 83       	std	Y+3, r25	; 0x03
    27e0:	8a 83       	std	Y+2, r24	; 0x02
	uchar srq = 0;
    27e2:	19 82       	std	Y+1, r1	; 0x01
	if (*old_time == 0) {
    27e4:	ea 81       	ldd	r30, Y+2	; 0x02
    27e6:	fb 81       	ldd	r31, Y+3	; 0x03
    27e8:	80 81       	ld	r24, Z
    27ea:	91 81       	ldd	r25, Z+1	; 0x01
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	49 f4       	brne	.+18     	; 0x2802 <srq_occured+0x30>
		// old_time value initialization on first call with value s
		*old_time = s;
    27f0:	80 91 ea 05 	lds	r24, 0x05EA
    27f4:	88 2f       	mov	r24, r24
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	ea 81       	ldd	r30, Y+2	; 0x02
    27fa:	fb 81       	ldd	r31, Y+3	; 0x03
    27fc:	91 83       	std	Z+1, r25	; 0x01
    27fe:	80 83       	st	Z, r24
    2800:	1e c0       	rjmp	.+60     	; 0x283e <srq_occured+0x6c>
	} else {
		if (s > *old_time) {
    2802:	80 91 ea 05 	lds	r24, 0x05EA
    2806:	28 2f       	mov	r18, r24
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	ea 81       	ldd	r30, Y+2	; 0x02
    280c:	fb 81       	ldd	r31, Y+3	; 0x03
    280e:	80 81       	ld	r24, Z
    2810:	91 81       	ldd	r25, Z+1	; 0x01
    2812:	82 17       	cp	r24, r18
    2814:	93 07       	cpc	r25, r19
    2816:	9c f4       	brge	.+38     	; 0x283e <srq_occured+0x6c>
			// some time has passed - check if srq was set
			srq = bit_is_clear(PIND, G_SRQ);
    2818:	e0 e3       	ldi	r30, 0x30	; 48
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	88 2f       	mov	r24, r24
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	80 74       	andi	r24, 0x40	; 64
    2824:	90 70       	andi	r25, 0x00	; 0
    2826:	19 82       	std	Y+1, r1	; 0x01
    2828:	00 97       	sbiw	r24, 0x00	; 0
    282a:	11 f4       	brne	.+4      	; 0x2830 <srq_occured+0x5e>
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	89 83       	std	Y+1, r24	; 0x01
			if (srq)
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	88 23       	and	r24, r24
    2834:	21 f0       	breq	.+8      	; 0x283e <srq_occured+0x6c>
				uart_puts_P("\n\rSRQ detected.\n\r");
    2836:	87 e4       	ldi	r24, 0x47	; 71
    2838:	91 e0       	ldi	r25, 0x01	; 1
    283a:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
		}
	}
	return srq;
    283e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2840:	0f 90       	pop	r0
    2842:	0f 90       	pop	r0
    2844:	0f 90       	pop	r0
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <srq_handle>:

/**
 * Handles SRQs by doing serial poll
 *
 */
uchar srq_handle(uchar *buf, int *buf_ptr) {
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	28 97       	sbiw	r28, 0x08	; 8
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	9d 83       	std	Y+5, r25	; 0x05
    2862:	8c 83       	std	Y+4, r24	; 0x04
    2864:	7f 83       	std	Y+7, r23	; 0x07
    2866:	6e 83       	std	Y+6, r22	; 0x06
	uchar command_ready = 0;
    2868:	19 82       	std	Y+1, r1	; 0x01
	uint8_t primary, secondary;

	if (!gpib_serial_poll(&primary, &secondary)) {
    286a:	ce 01       	movw	r24, r28
    286c:	02 96       	adiw	r24, 0x02	; 2
    286e:	9e 01       	movw	r18, r28
    2870:	2d 5f       	subi	r18, 0xFD	; 253
    2872:	3f 4f       	sbci	r19, 0xFF	; 255
    2874:	b9 01       	movw	r22, r18
    2876:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <gpib_serial_poll>
    287a:	88 23       	and	r24, r24
    287c:	69 f4       	brne	.+26     	; 0x2898 <srq_handle+0x4c>
		uart_puts_P(
    287e:	84 e7       	ldi	r24, 0x74	; 116
    2880:	91 e0       	ldi	r25, 0x01	; 1
    2882:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
				"\n\rSRQ emitter is not in list of known devices. SRQ Ignored.\n\r");
		uart_puts_P("\n\rSRQs are disabled now.\n\r");
    2886:	89 e5       	ldi	r24, 0x59	; 89
    2888:	91 e0       	ldi	r25, 0x01	; 1
    288a:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
		srq_enabled = 0;
    288e:	10 92 88 04 	sts	0x0488, r1
		return command_ready;
    2892:	89 81       	ldd	r24, Y+1	; 0x01
    2894:	88 87       	std	Y+8, r24	; 0x08
    2896:	3a c0       	rjmp	.+116    	; 0x290c <srq_handle+0xc0>
	}

	if (gpib_get_flavour() == FLAVOUR_TEK) {
    2898:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <gpib_get_flavour>
    289c:	81 30       	cpi	r24, 0x01	; 1
    289e:	a1 f5       	brne	.+104    	; 0x2908 <srq_handle+0xbc>
		gpib_set_partner_address(primary, secondary);
    28a0:	8a 81       	ldd	r24, Y+2	; 0x02
    28a2:	9b 81       	ldd	r25, Y+3	; 0x03
    28a4:	69 2f       	mov	r22, r25
    28a6:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <gpib_set_partner_address>
		// Tek: check status for reason
		buf[0] = 'E';
    28aa:	ec 81       	ldd	r30, Y+4	; 0x04
    28ac:	fd 81       	ldd	r31, Y+5	; 0x05
    28ae:	85 e4       	ldi	r24, 0x45	; 69
    28b0:	80 83       	st	Z, r24
		buf[1] = 'V';
    28b2:	8c 81       	ldd	r24, Y+4	; 0x04
    28b4:	9d 81       	ldd	r25, Y+5	; 0x05
    28b6:	fc 01       	movw	r30, r24
    28b8:	31 96       	adiw	r30, 0x01	; 1
    28ba:	86 e5       	ldi	r24, 0x56	; 86
    28bc:	80 83       	st	Z, r24
		buf[2] = 'E';
    28be:	8c 81       	ldd	r24, Y+4	; 0x04
    28c0:	9d 81       	ldd	r25, Y+5	; 0x05
    28c2:	fc 01       	movw	r30, r24
    28c4:	32 96       	adiw	r30, 0x02	; 2
    28c6:	85 e4       	ldi	r24, 0x45	; 69
    28c8:	80 83       	st	Z, r24
		buf[3] = 'N';
    28ca:	8c 81       	ldd	r24, Y+4	; 0x04
    28cc:	9d 81       	ldd	r25, Y+5	; 0x05
    28ce:	fc 01       	movw	r30, r24
    28d0:	33 96       	adiw	r30, 0x03	; 3
    28d2:	8e e4       	ldi	r24, 0x4E	; 78
    28d4:	80 83       	st	Z, r24
		buf[4] = 'T';
    28d6:	8c 81       	ldd	r24, Y+4	; 0x04
    28d8:	9d 81       	ldd	r25, Y+5	; 0x05
    28da:	fc 01       	movw	r30, r24
    28dc:	34 96       	adiw	r30, 0x04	; 4
    28de:	84 e5       	ldi	r24, 0x54	; 84
    28e0:	80 83       	st	Z, r24
		buf[5] = '?';
    28e2:	8c 81       	ldd	r24, Y+4	; 0x04
    28e4:	9d 81       	ldd	r25, Y+5	; 0x05
    28e6:	fc 01       	movw	r30, r24
    28e8:	35 96       	adiw	r30, 0x05	; 5
    28ea:	8f e3       	ldi	r24, 0x3F	; 63
    28ec:	80 83       	st	Z, r24
		buf[6] = '\0';
    28ee:	8c 81       	ldd	r24, Y+4	; 0x04
    28f0:	9d 81       	ldd	r25, Y+5	; 0x05
    28f2:	fc 01       	movw	r30, r24
    28f4:	36 96       	adiw	r30, 0x06	; 6
    28f6:	10 82       	st	Z, r1
		*buf_ptr = 6;
    28f8:	ee 81       	ldd	r30, Y+6	; 0x06
    28fa:	ff 81       	ldd	r31, Y+7	; 0x07
    28fc:	86 e0       	ldi	r24, 0x06	; 6
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	91 83       	std	Z+1, r25	; 0x01
    2902:	80 83       	st	Z, r24
		command_ready = 1;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	89 83       	std	Y+1, r24	; 0x01
	}
	return command_ready;
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	88 87       	std	Y+8, r24	; 0x08
    290c:	88 85       	ldd	r24, Y+8	; 0x08
}
    290e:	28 96       	adiw	r28, 0x08	; 8
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	08 95       	ret

00002920 <printHelp>:

void printHelp() {
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	c0 55       	subi	r28, 0x50	; 80
    292a:	d0 40       	sbci	r29, 0x00	; 0
    292c:	0f b6       	in	r0, 0x3f	; 63
    292e:	f8 94       	cli
    2930:	de bf       	out	0x3e, r29	; 62
    2932:	0f be       	out	0x3f, r0	; 63
    2934:	cd bf       	out	0x3d, r28	; 61
	char buf[COMMAND_INPUT_BUFFER_SIZE];
	sprintf(buf, "\n\rGPIB Controller (Rev.%s) (c) spurtikus.de 2008-2015\n\r",
    2936:	00 d0       	rcall	.+0      	; 0x2938 <printHelp+0x18>
    2938:	00 d0       	rcall	.+0      	; 0x293a <printHelp+0x1a>
    293a:	00 d0       	rcall	.+0      	; 0x293c <printHelp+0x1c>
    293c:	ed b7       	in	r30, 0x3d	; 61
    293e:	fe b7       	in	r31, 0x3e	; 62
    2940:	31 96       	adiw	r30, 0x01	; 1
    2942:	ce 01       	movw	r24, r28
    2944:	01 96       	adiw	r24, 0x01	; 1
    2946:	91 83       	std	Z+1, r25	; 0x01
    2948:	80 83       	st	Z, r24
    294a:	8c ef       	ldi	r24, 0xFC	; 252
    294c:	93 e0       	ldi	r25, 0x03	; 3
    294e:	93 83       	std	Z+3, r25	; 0x03
    2950:	82 83       	std	Z+2, r24	; 0x02
    2952:	84 e3       	ldi	r24, 0x34	; 52
    2954:	94 e0       	ldi	r25, 0x04	; 4
    2956:	95 83       	std	Z+5, r25	; 0x05
    2958:	84 83       	std	Z+4, r24	; 0x04
    295a:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
    295e:	8d b7       	in	r24, 0x3d	; 61
    2960:	9e b7       	in	r25, 0x3e	; 62
    2962:	06 96       	adiw	r24, 0x06	; 6
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	f8 94       	cli
    2968:	9e bf       	out	0x3e, r25	; 62
    296a:	0f be       	out	0x3f, r0	; 63
    296c:	8d bf       	out	0x3d, r24	; 61
	REVISION);
	uart_puts(buf);
    296e:	ce 01       	movw	r24, r28
    2970:	01 96       	adiw	r24, 0x01	; 1
    2972:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
	uart_puts_P("Internal commands:\n\r");
    2976:	8c e2       	ldi	r24, 0x2C	; 44
    2978:	93 e0       	ldi	r25, 0x03	; 3
    297a:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
	uart_puts(
    297e:	88 e3       	ldi	r24, 0x38	; 56
    2980:	94 e0       	ldi	r25, 0x04	; 4
    2982:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
			".a <primary> [<secondary>] - set prim./second. address of remote device.\n\r");
	uart_puts_P(".e - dump error queue.\n\r");
    2986:	83 e1       	ldi	r24, 0x13	; 19
    2988:	93 e0       	ldi	r25, 0x03	; 3
    298a:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
	uart_puts_P(".f - find partners.\n\r");
    298e:	8d ef       	ldi	r24, 0xFD	; 253
    2990:	92 e0       	ldi	r25, 0x02	; 2
    2992:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
	uart_puts_P(".h - print help.\n\r");
    2996:	8a ee       	ldi	r24, 0xEA	; 234
    2998:	92 e0       	ldi	r25, 0x02	; 2
    299a:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
	uart_puts_P(".i - dump info about controller state.\n\r");
    299e:	81 ec       	ldi	r24, 0xC1	; 193
    29a0:	92 e0       	ldi	r25, 0x02	; 2
    29a2:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
	uart_puts_P(".r - toggle SRQ enablement.\n\r");
    29a6:	83 ea       	ldi	r24, 0xA3	; 163
    29a8:	92 e0       	ldi	r25, 0x02	; 2
    29aa:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
	uart_puts_P(".s <secondary> - set secondary address of remote device.\n\r");
    29ae:	88 e6       	ldi	r24, 0x68	; 104
    29b0:	92 e0       	ldi	r25, 0x02	; 2
    29b2:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
	uart_puts_P(".x - toggle Xon/Xoff flow control.\n\r");
    29b6:	83 e4       	ldi	r24, 0x43	; 67
    29b8:	92 e0       	ldi	r25, 0x02	; 2
    29ba:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
	uart_puts_P(
    29be:	8d ef       	ldi	r24, 0xFD	; 253
    29c0:	91 e0       	ldi	r25, 0x01	; 1
    29c2:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
			".+ <p> [<s>] - add partner device address to list of known devices.\n\r");
	uart_puts_P(
    29c6:	82 eb       	ldi	r24, 0xB2	; 178
    29c8:	91 e0       	ldi	r25, 0x01	; 1
    29ca:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
			".- <p> [<s>] - remove partner device address from list of known devices.\n\r");
}
    29ce:	c0 5b       	subi	r28, 0xB0	; 176
    29d0:	df 4f       	sbci	r29, 0xFF	; 255
    29d2:	0f b6       	in	r0, 0x3f	; 63
    29d4:	f8 94       	cli
    29d6:	de bf       	out	0x3e, r29	; 62
    29d8:	0f be       	out	0x3f, r0	; 63
    29da:	cd bf       	out	0x3d, r28	; 61
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	08 95       	ret

000029e2 <state_machine>:
 * 2. send user entered command, if available, to listeners (act as talker, set devices to listeners)
 * 3. if command was a query, read the answer from device (become listener and set device to talker)
 * 4. check if SRQ occured and handle that
 *
 */
void state_machine() {
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	c9 55       	subi	r28, 0x59	; 89
    29ec:	d0 40       	sbci	r29, 0x00	; 0
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	f8 94       	cli
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	0f be       	out	0x3f, r0	; 63
    29f6:	cd bf       	out	0x3d, r28	; 61
	int old_time = 0;
    29f8:	1e 82       	std	Y+6, r1	; 0x06
    29fa:	1d 82       	std	Y+5, r1	; 0x05
	uchar is_query = 0;
    29fc:	1c 82       	std	Y+4, r1	; 0x04
	uchar do_prompt = 1;
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	8b 83       	std	Y+3, r24	; 0x03
	uchar ch;

	/** buffers used for commands and output strings */
	uchar buf[COMMAND_INPUT_BUFFER_SIZE];
	/** pointer in buffer */
	int buf_ptr = 0;
    2a02:	fe 01       	movw	r30, r28
    2a04:	e8 5a       	subi	r30, 0xA8	; 168
    2a06:	ff 4f       	sbci	r31, 0xFF	; 255
    2a08:	11 82       	std	Z+1, r1	; 0x01
    2a0a:	10 82       	st	Z, r1

	uchar state = S_INITIAL;
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	8a 83       	std	Y+2, r24	; 0x02
	for (;;) {
		if (state == S_INITIAL) {
    2a10:	8a 81       	ldd	r24, Y+2	; 0x02
    2a12:	81 30       	cpi	r24, 0x01	; 1
    2a14:	69 f4       	brne	.+26     	; 0x2a30 <state_machine+0x4e>
			// suppress prompt when outputting to a machine
			if (do_prompt && !machineOutput) {
    2a16:	8b 81       	ldd	r24, Y+3	; 0x03
    2a18:	88 23       	and	r24, r24
    2a1a:	51 f0       	breq	.+20     	; 0x2a30 <state_machine+0x4e>
    2a1c:	80 91 9b 04 	lds	r24, 0x049B
    2a20:	88 23       	and	r24, r24
    2a22:	31 f4       	brne	.+12     	; 0x2a30 <state_machine+0x4e>
				uart_puts("> ");
    2a24:	83 e8       	ldi	r24, 0x83	; 131
    2a26:	94 e0       	ldi	r25, 0x04	; 4
    2a28:	0e 94 d6 17 	call	0x2fac	; 0x2fac <uart_puts>
				do_prompt = 0;
    2a2c:	1b 82       	std	Y+3, r1	; 0x03
				is_query = 0;
    2a2e:	1c 82       	std	Y+4, r1	; 0x04
			}
		}

		if (!input_char(&ch))
    2a30:	ce 01       	movw	r24, r28
    2a32:	07 96       	adiw	r24, 0x07	; 7
    2a34:	0e 94 a4 10 	call	0x2148	; 0x2148 <input_char>
    2a38:	88 23       	and	r24, r24
    2a3a:	51 f3       	breq	.-44     	; 0x2a10 <state_machine+0x2e>
			continue;

		// byte received. Decide with state what to do.

		if (state == S_INITIAL) {
    2a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3e:	81 30       	cpi	r24, 0x01	; 1
    2a40:	41 f4       	brne	.+16     	; 0x2a52 <state_machine+0x70>
			// internal or external command?
			if (ch == '.') {
    2a42:	8f 81       	ldd	r24, Y+7	; 0x07
    2a44:	8e 32       	cpi	r24, 0x2E	; 46
    2a46:	19 f4       	brne	.+6      	; 0x2a4e <state_machine+0x6c>
				// internal command
				state = S_FIRST_BYTE_INT;
    2a48:	82 e0       	ldi	r24, 0x02	; 2
    2a4a:	8a 83       	std	Y+2, r24	; 0x02
    2a4c:	02 c0       	rjmp	.+4      	; 0x2a52 <state_machine+0x70>
			} else {
				// gpib command
				state = S_FIRST_BYTE_GPIB;
    2a4e:	83 e0       	ldi	r24, 0x03	; 3
    2a50:	8a 83       	std	Y+2, r24	; 0x02

			}
		}

		if (state == S_FIRST_BYTE_INT) {
    2a52:	8a 81       	ldd	r24, Y+2	; 0x02
    2a54:	82 30       	cpi	r24, 0x02	; 2
    2a56:	59 f5       	brne	.+86     	; 0x2aae <state_machine+0xcc>
			buf[0] = ch;
    2a58:	8f 81       	ldd	r24, Y+7	; 0x07
    2a5a:	88 87       	std	Y+8, r24	; 0x08
			buf_ptr = 1;
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e8 5a       	subi	r30, 0xA8	; 168
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	91 83       	std	Z+1, r25	; 0x01
    2a68:	80 83       	st	Z, r24
			// send received character back depending on global flag
			if (rs232_remote_echo) {
    2a6a:	80 91 86 04 	lds	r24, 0x0486
    2a6e:	88 23       	and	r24, r24
    2a70:	19 f0       	breq	.+6      	; 0x2a78 <state_machine+0x96>
				uart_putc((unsigned char) ch);
    2a72:	8f 81       	ldd	r24, Y+7	; 0x07
    2a74:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <uart_putc>
			}
			// collect line until CR
			while (!input_process(buf, &buf_ptr))
    2a78:	ce 01       	movw	r24, r28
    2a7a:	08 96       	adiw	r24, 0x08	; 8
    2a7c:	9e 01       	movw	r18, r28
    2a7e:	28 5a       	subi	r18, 0xA8	; 168
    2a80:	3f 4f       	sbci	r19, 0xFF	; 255
    2a82:	b9 01       	movw	r22, r18
    2a84:	0e 94 54 11 	call	0x22a8	; 0x22a8 <input_process>
    2a88:	88 23       	and	r24, r24
    2a8a:	b1 f3       	breq	.-20     	; 0x2a78 <state_machine+0x96>
				;
			uart_puts_P("\n\r");
    2a8c:	80 e8       	ldi	r24, 0x80	; 128
    2a8e:	93 e0       	ldi	r25, 0x03	; 3
    2a90:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
			// execute internal command
			handle_internal_commands(buf);
    2a94:	ce 01       	movw	r24, r28
    2a96:	08 96       	adiw	r24, 0x08	; 8
    2a98:	0e 94 9c 11 	call	0x2338	; 0x2338 <handle_internal_commands>
			// reset local vars
			state = S_INITIAL;
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	8a 83       	std	Y+2, r24	; 0x02
			buf_ptr = 0;
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e8 5a       	subi	r30, 0xA8	; 168
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	11 82       	std	Z+1, r1	; 0x01
    2aa8:	10 82       	st	Z, r1
			do_prompt = 1;
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	8b 83       	std	Y+3, r24	; 0x03
		}

		if (state == S_FIRST_BYTE_GPIB) {
    2aae:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab0:	83 30       	cpi	r24, 0x03	; 3
    2ab2:	d1 f4       	brne	.+52     	; 0x2ae8 <state_machine+0x106>
			// GPIB command. Check if a partner was defined.
			if (gpib_get_partner_pad() == ADDRESS_NOT_SET) {
    2ab4:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <gpib_get_partner_pad>
    2ab8:	8f 3f       	cpi	r24, 0xFF	; 255
    2aba:	79 f4       	brne	.+30     	; 0x2ada <state_machine+0xf8>
				uart_puts_P(
    2abc:	8d e4       	ldi	r24, 0x4D	; 77
    2abe:	93 e0       	ldi	r25, 0x03	; 3
    2ac0:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
						"Device address is not set. Can not send command.\n\r");
				// reset local vars
				state = S_INITIAL;
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	8a 83       	std	Y+2, r24	; 0x02
				buf_ptr = 0;
    2ac8:	fe 01       	movw	r30, r28
    2aca:	e8 5a       	subi	r30, 0xA8	; 168
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	11 82       	std	Z+1, r1	; 0x01
    2ad0:	10 82       	st	Z, r1
				do_prompt = 1;
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	8b 83       	std	Y+3, r24	; 0x03
				is_query = 0;
    2ad6:	1c 82       	std	Y+4, r1	; 0x04
    2ad8:	07 c0       	rjmp	.+14     	; 0x2ae8 <state_machine+0x106>
			} else {
				// write prologue
				state = S_SEND_BYTES;
    2ada:	84 e0       	ldi	r24, 0x04	; 4
    2adc:	8a 83       	std	Y+2, r24	; 0x02
				gpib_prepare_write();
    2ade:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_prepare_write>
				gpib_write_prologue(0);
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	0e 94 63 08 	call	0x10c6	; 0x10c6 <gpib_write_prologue>
			}
		}

		if (state == S_SEND_BYTES) {
    2ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aea:	84 30       	cpi	r24, 0x04	; 4
    2aec:	29 f5       	brne	.+74     	; 0x2b38 <state_machine+0x156>
			// send received character back depending on global flag
			if (rs232_remote_echo) {
    2aee:	80 91 86 04 	lds	r24, 0x0486
    2af2:	88 23       	and	r24, r24
    2af4:	19 f0       	breq	.+6      	; 0x2afc <state_machine+0x11a>
				uart_putc((unsigned char) ch);
    2af6:	8f 81       	ldd	r24, Y+7	; 0x07
    2af8:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <uart_putc>
			}
			uchar isLastByte = (ch == ASCII_CODE_CR);
    2afc:	8f 81       	ldd	r24, Y+7	; 0x07
    2afe:	19 82       	std	Y+1, r1	; 0x01
    2b00:	8d 30       	cpi	r24, 0x0D	; 13
    2b02:	11 f4       	brne	.+4      	; 0x2b08 <state_machine+0x126>
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	89 83       	std	Y+1, r24	; 0x01
			gpib_write_byte(ch, isLastByte);
    2b08:	8f 81       	ldd	r24, Y+7	; 0x07
    2b0a:	69 81       	ldd	r22, Y+1	; 0x01
    2b0c:	0e 94 1c 09 	call	0x1238	; 0x1238 <gpib_write_byte>

			if (ch == '?') {
    2b10:	8f 81       	ldd	r24, Y+7	; 0x07
    2b12:	8f 33       	cpi	r24, 0x3F	; 63
    2b14:	11 f4       	brne	.+4      	; 0x2b1a <state_machine+0x138>
				is_query = 1;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	8c 83       	std	Y+4, r24	; 0x04
			}

			if (isLastByte) {
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	88 23       	and	r24, r24
    2b1e:	61 f0       	breq	.+24     	; 0x2b38 <state_machine+0x156>
				uart_puts_P("\n\r");
    2b20:	8a e4       	ldi	r24, 0x4A	; 74
    2b22:	93 e0       	ldi	r25, 0x03	; 3
    2b24:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
				if (is_query) {
    2b28:	8c 81       	ldd	r24, Y+4	; 0x04
    2b2a:	88 23       	and	r24, r24
    2b2c:	19 f0       	breq	.+6      	; 0x2b34 <state_machine+0x152>
					//uart_puts("Query. Will check for answer.\n\r");
					state = S_GPIB_ANSWER;
    2b2e:	85 e0       	ldi	r24, 0x05	; 5
    2b30:	8a 83       	std	Y+2, r24	; 0x02
    2b32:	02 c0       	rjmp	.+4      	; 0x2b38 <state_machine+0x156>
				} else {
					//uart_puts("Command only.\n\r");
					state = S_GPIB_NO_ANSWER;
    2b34:	86 e0       	ldi	r24, 0x06	; 6
    2b36:	8a 83       	std	Y+2, r24	; 0x02
				}
			}
		}

		// write epilogue
		if (state == S_GPIB_ANSWER || state == S_GPIB_NO_ANSWER) {
    2b38:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3a:	85 30       	cpi	r24, 0x05	; 5
    2b3c:	19 f0       	breq	.+6      	; 0x2b44 <state_machine+0x162>
    2b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b40:	86 30       	cpi	r24, 0x06	; 6
    2b42:	41 f4       	brne	.+16     	; 0x2b54 <state_machine+0x172>
			gpib_write_epilogue(0);
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	0e 94 b2 08 	call	0x1164	; 0x1164 <gpib_write_epilogue>
			buf_ptr = 0;
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	e8 5a       	subi	r30, 0xA8	; 168
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	11 82       	std	Z+1, r1	; 0x01
    2b52:	10 82       	st	Z, r1
		}

		// if we sent a query, read the answer
		if (state == S_GPIB_ANSWER) {
    2b54:	8a 81       	ldd	r24, Y+2	; 0x02
    2b56:	85 30       	cpi	r24, 0x05	; 5
    2b58:	21 f4       	brne	.+8      	; 0x2b62 <state_machine+0x180>
			receiveAnswer();
    2b5a:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <receiveAnswer>
			state = S_FINAL;
    2b5e:	87 e0       	ldi	r24, 0x07	; 7
    2b60:	8a 83       	std	Y+2, r24	; 0x02
		}

		// finalize state machine
		if (state == S_GPIB_NO_ANSWER || state == S_FINAL) {
    2b62:	8a 81       	ldd	r24, Y+2	; 0x02
    2b64:	86 30       	cpi	r24, 0x06	; 6
    2b66:	19 f0       	breq	.+6      	; 0x2b6e <state_machine+0x18c>
    2b68:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6a:	87 30       	cpi	r24, 0x07	; 7
    2b6c:	99 f4       	brne	.+38     	; 0x2b94 <state_machine+0x1b2>
			// untalk/unlisten all partners
			gpib_untalkUnlisten();
    2b6e:	0e 94 16 06 	call	0xc2c	; 0xc2c <gpib_untalkUnlisten>
			if (machineOutput) {
    2b72:	80 91 9b 04 	lds	r24, 0x049B
    2b76:	88 23       	and	r24, r24
    2b78:	29 f0       	breq	.+10     	; 0x2b84 <state_machine+0x1a2>
				uart_puts_P("[EOI]");
    2b7a:	84 e4       	ldi	r24, 0x44	; 68
    2b7c:	93 e0       	ldi	r25, 0x03	; 3
    2b7e:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
    2b82:	04 c0       	rjmp	.+8      	; 0x2b8c <state_machine+0x1aa>
			} else {
				// some devices do not send cr,lf at command end, so create it always itself
				uart_puts_P("\n\r");
    2b84:	81 e4       	ldi	r24, 0x41	; 65
    2b86:	93 e0       	ldi	r25, 0x03	; 3
    2b88:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <uart_puts_p>
			}
			do_prompt = 1;
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	8b 83       	std	Y+3, r24	; 0x03
			state = S_INITIAL;
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	8a 83       	std	Y+2, r24	; 0x02
		}

		// SRQ detection - do this every time when time value s has changed
		// s is incremented every second. So we check once a second.
		if (srq_enabled && srq_occured(&old_time)) {
    2b94:	80 91 88 04 	lds	r24, 0x0488
    2b98:	88 23       	and	r24, r24
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <state_machine+0x1bc>
    2b9c:	39 cf       	rjmp	.-398    	; 0x2a10 <state_machine+0x2e>
    2b9e:	ce 01       	movw	r24, r28
    2ba0:	05 96       	adiw	r24, 0x05	; 5
    2ba2:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <srq_occured>
    2ba6:	88 23       	and	r24, r24
    2ba8:	09 f4       	brne	.+2      	; 0x2bac <state_machine+0x1ca>
    2baa:	32 cf       	rjmp	.-412    	; 0x2a10 <state_machine+0x2e>
			// TODO: make handle srq work again
			// the returned command_ready was interpreted to read in an answer
			// but this was turned of for new input loop
			// next two lines replace that but must be tested.
			if (srq_handle(buf, &buf_ptr)) {
    2bac:	ce 01       	movw	r24, r28
    2bae:	08 96       	adiw	r24, 0x08	; 8
    2bb0:	9e 01       	movw	r18, r28
    2bb2:	28 5a       	subi	r18, 0xA8	; 168
    2bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb6:	b9 01       	movw	r22, r18
    2bb8:	0e 94 26 14 	call	0x284c	; 0x284c <srq_handle>
    2bbc:	88 23       	and	r24, r24
    2bbe:	09 f4       	brne	.+2      	; 0x2bc2 <state_machine+0x1e0>
    2bc0:	27 cf       	rjmp	.-434    	; 0x2a10 <state_machine+0x2e>
				state = S_GPIB_ANSWER;
    2bc2:	85 e0       	ldi	r24, 0x05	; 5
    2bc4:	8a 83       	std	Y+2, r24	; 0x02
    2bc6:	24 cf       	rjmp	.-440    	; 0x2a10 <state_machine+0x2e>

00002bc8 <main>:
 * \brief Implementation of GPIB controller. Reads a command from RS232, sends it via bus.
 * If The command contains a '?', an answer from the device is expected and read in. The
 * answer then is printed out. If an SRQ occured, a serial poll is initiated.
 * 
 */
int main(void) {
    2bc8:	df 93       	push	r29
    2bca:	cf 93       	push	r28
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
	/*
	 *  Initialize UART library, pass baudrate and avr cpu clock 
	 *  with the macro UART_BAUD_SELECT()
	 */DI();
    2bd0:	8c e0       	ldi	r24, 0x0C	; 12
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <uart_init>

	/*
	 * now enable interrupt, since UART and TIMER library is interrupt controlled
	 */sei();
    2bd8:	78 94       	sei

	/** print some usage infos */
	printHelp();
    2bda:	0e 94 90 14 	call	0x2920	; 0x2920 <printHelp>

	// init timer for timeout detection
	timer16_init();
    2bde:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <timer16_init>

	// init gpib lines
	gpib_init();
    2be2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <gpib_init>
	// init controller part - assign bus 
	gpib_controller_assign(0x00);
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	0e 94 6d 07 	call	0xeda	; 0xeda <gpib_controller_assign>

	if (xonXoffMode) {
    2bec:	80 91 87 04 	lds	r24, 0x0487
    2bf0:	88 23       	and	r24, r24
    2bf2:	19 f0       	breq	.+6      	; 0x2bfa <main+0x32>
		uart_set_flow_control(FLOWCONTROL_XONXOFF);
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <uart_set_flow_control>
	}

	// state machine loops forever
	state_machine();
    2bfa:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <state_machine>
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	90 e0       	ldi	r25, 0x00	; 0
}
    2c02:	cf 91       	pop	r28
    2c04:	df 91       	pop	r29
    2c06:	08 95       	ret

00002c08 <__vector_7>:

/**
 * Interrupt Service Routine - do not call directly
 *  This routine is called when the Timer Value TCNT1 reaches the Output Compare Register Value OCR1A
 */ 
ISR(TIMER1_COMPA_vect) {
    2c08:	1f 92       	push	r1
    2c0a:	0f 92       	push	r0
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	0f 92       	push	r0
    2c10:	11 24       	eor	r1, r1
    2c12:	8f 93       	push	r24
    2c14:	df 93       	push	r29
    2c16:	cf 93       	push	r28
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
#if XTAL_CPU % DEBOUNCE
	OCR1A = XTAL_CPU / DEBOUNCE - 1;
#endif
	if (--timer==0) {
    2c1c:	80 91 e9 05 	lds	r24, 0x05E9
    2c20:	81 50       	subi	r24, 0x01	; 1
    2c22:	80 93 e9 05 	sts	0x05E9, r24
    2c26:	80 91 e9 05 	lds	r24, 0x05E9
    2c2a:	88 23       	and	r24, r24
    2c2c:	39 f4       	brne	.+14     	; 0x2c3c <__vector_7+0x34>
		timer=(uint8_t) DEBOUNCE;
    2c2e:	10 92 e9 05 	sts	0x05E9, r1
		s++;
    2c32:	80 91 ea 05 	lds	r24, 0x05EA
    2c36:	8f 5f       	subi	r24, 0xFF	; 255
    2c38:	80 93 ea 05 	sts	0x05EA, r24
#if XTAL_CPU % DEBOUNCE
		OCR1A = XTAL_CPU / DEBOUNCE + XTAL_CPU % DEBOUNCE - 1;
#endif
	}
}
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	8f 91       	pop	r24
    2c42:	0f 90       	pop	r0
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	0f 90       	pop	r0
    2c48:	1f 90       	pop	r1
    2c4a:	18 95       	reti

00002c4c <timer16_init>:
/**
 * Timer initialisation.
 *  \brief initializes all registers ands sets second value 's' to zero. Timer is immediately
 * started.
 */ 
void timer16_init( void ) {
    2c4c:	df 93       	push	r29
    2c4e:	cf 93       	push	r28
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62

	// OCR1A=XTAL/DEBOUNCE-1 -> Bei Erreichen dieses Wertes (31249) wird die ISR besucht
	// die ISR wird also alle 1/256s aufgerufen. Wenn man dort also bis 256 hochzählt, ist genau
	// 1 Sekunde um! 256 ist der Wert der Variable timer und wird über das define DEBOUNCE festgelegt

	TCCR1B = (1<<CS10) ^ (1<<WGM12);	// Prescaler of 1 | CTC mode
    2c54:	ee e4       	ldi	r30, 0x4E	; 78
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	89 e0       	ldi	r24, 0x09	; 9
    2c5a:	80 83       	st	Z, r24
	OCR1A  = F_CPU/DEBOUNCE-1;		// Output compare register value 
    2c5c:	ea e4       	ldi	r30, 0x4A	; 74
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	81 e1       	ldi	r24, 0x11	; 17
    2c62:	9a e7       	ldi	r25, 0x7A	; 122
    2c64:	91 83       	std	Z+1, r25	; 0x01
    2c66:	80 83       	st	Z, r24
	TCNT1 = 0; // Start value for timer register
    2c68:	ec e4       	ldi	r30, 0x4C	; 76
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	11 82       	std	Z+1, r1	; 0x01
    2c6e:	10 82       	st	Z, r1
	s=0; // Initialize second value (s) to zero
    2c70:	10 92 ea 05 	sts	0x05EA, r1
	timer = (uint8_t)DEBOUNCE; 
    2c74:	10 92 e9 05 	sts	0x05E9, r1
	TIMSK |= (1<<OCIE1A);		// activate timer interrupts which starts timer run
    2c78:	a9 e5       	ldi	r26, 0x59	; 89
    2c7a:	b0 e0       	ldi	r27, 0x00	; 0
    2c7c:	e9 e5       	ldi	r30, 0x59	; 89
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	80 81       	ld	r24, Z
    2c82:	80 61       	ori	r24, 0x10	; 16
    2c84:	8c 93       	st	X, r24
}
    2c86:	cf 91       	pop	r28
    2c88:	df 91       	pop	r29
    2c8a:	08 95       	ret

00002c8c <uart_set_flow_control>:
/** number of chars in rx buffer */
static volatile unsigned char chars_in_rx_buffer = 0;

void SendOutOfBand(unsigned char c);

void uart_set_flow_control(unsigned char _flowControl) {
    2c8c:	df 93       	push	r29
    2c8e:	cf 93       	push	r28
    2c90:	0f 92       	push	r0
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62
    2c96:	89 83       	std	Y+1, r24	; 0x01
	flowControl = _flowControl;
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
    2c9a:	80 93 9c 04 	sts	0x049C, r24
}
    2c9e:	0f 90       	pop	r0
    2ca0:	cf 91       	pop	r28
    2ca2:	df 91       	pop	r29
    2ca4:	08 95       	ret

00002ca6 <uart_get_flow_control>:

unsigned char uart_get_flow_control() {
    2ca6:	df 93       	push	r29
    2ca8:	cf 93       	push	r28
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
	return flowControl;
    2cae:	80 91 9c 04 	lds	r24, 0x049C
}
    2cb2:	cf 91       	pop	r28
    2cb4:	df 91       	pop	r29
    2cb6:	08 95       	ret

00002cb8 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
 Function: UART Receive Complete interrupt
 Purpose:  called when the UART has received a character
 **************************************************************************/
{
    2cb8:	1f 92       	push	r1
    2cba:	0f 92       	push	r0
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	0f 92       	push	r0
    2cc0:	11 24       	eor	r1, r1
    2cc2:	2f 93       	push	r18
    2cc4:	3f 93       	push	r19
    2cc6:	4f 93       	push	r20
    2cc8:	5f 93       	push	r21
    2cca:	6f 93       	push	r22
    2ccc:	7f 93       	push	r23
    2cce:	8f 93       	push	r24
    2cd0:	9f 93       	push	r25
    2cd2:	af 93       	push	r26
    2cd4:	bf 93       	push	r27
    2cd6:	ef 93       	push	r30
    2cd8:	ff 93       	push	r31
    2cda:	df 93       	push	r29
    2cdc:	cf 93       	push	r28
    2cde:	00 d0       	rcall	.+0      	; 0x2ce0 <__vector_13+0x28>
    2ce0:	00 d0       	rcall	.+0      	; 0x2ce2 <__vector_13+0x2a>
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	unsigned char usr;
	unsigned char lastRxError;

	/* read UART status register and UART data register */
	usr = UART0_STATUS;
    2ce6:	eb e2       	ldi	r30, 0x2B	; 43
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	8a 83       	std	Y+2, r24	; 0x02
	data = UART0_DATA;
    2cee:	ec e2       	ldi	r30, 0x2C	; 44
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	80 81       	ld	r24, Z
    2cf4:	8b 83       	std	Y+3, r24	; 0x03

	/* */
#if defined( AT90_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
    2cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf8:	88 71       	andi	r24, 0x18	; 24
    2cfa:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif

	/* calculate buffer index */
	tmphead = (UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    2cfc:	80 91 32 05 	lds	r24, 0x0532
    2d00:	8f 5f       	subi	r24, 0xFF	; 255
    2d02:	8f 77       	andi	r24, 0x7F	; 127
    2d04:	8c 83       	std	Y+4, r24	; 0x04

	if (tmphead == UART_RxTail) {
    2d06:	90 91 33 05 	lds	r25, 0x0533
    2d0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d0c:	89 17       	cp	r24, r25
    2d0e:	19 f4       	brne	.+6      	; 0x2d16 <__vector_13+0x5e>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    2d10:	82 e0       	ldi	r24, 0x02	; 2
    2d12:	89 83       	std	Y+1, r24	; 0x01
    2d14:	10 c0       	rjmp	.+32     	; 0x2d36 <__vector_13+0x7e>
	} else {
		/* store new index */
		UART_RxHead = tmphead;
    2d16:	8c 81       	ldd	r24, Y+4	; 0x04
    2d18:	80 93 32 05 	sts	0x0532, r24
		/* store received data in buffer */
		UART_RxBuf[tmphead] = data;
    2d1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d1e:	88 2f       	mov	r24, r24
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	fc 01       	movw	r30, r24
    2d24:	e0 55       	subi	r30, 0x50	; 80
    2d26:	fb 4f       	sbci	r31, 0xFB	; 251
    2d28:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2a:	80 83       	st	Z, r24
		chars_in_rx_buffer++;
    2d2c:	80 91 9f 04 	lds	r24, 0x049F
    2d30:	8f 5f       	subi	r24, 0xFF	; 255
    2d32:	80 93 9f 04 	sts	0x049F, r24
	}

	if (flowControl == FLOWCONTROL_XONXOFF
    2d36:	80 91 9c 04 	lds	r24, 0x049C
    2d3a:	81 30       	cpi	r24, 0x01	; 1
    2d3c:	99 f4       	brne	.+38     	; 0x2d64 <__vector_13+0xac>
    2d3e:	80 91 9f 04 	lds	r24, 0x049F
    2d42:	81 36       	cpi	r24, 0x61	; 97
    2d44:	78 f0       	brcs	.+30     	; 0x2d64 <__vector_13+0xac>
			&& chars_in_rx_buffer > UART_RX_BUFFER_MAX_MARK) {
		/* immediately send XOFF */
		oob_event = 1;
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	80 93 9d 04 	sts	0x049D, r24
		if (!after_xoff_sent) {
    2d4c:	80 91 9e 04 	lds	r24, 0x049E
    2d50:	88 23       	and	r24, r24
    2d52:	31 f4       	brne	.+12     	; 0x2d60 <__vector_13+0xa8>
			SendOutOfBand(XOFF);
    2d54:	83 e1       	ldi	r24, 0x13	; 19
    2d56:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <SendOutOfBand>
			after_xoff_sent = 1;
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	80 93 9e 04 	sts	0x049E, r24
		}
		oob_event = 0;
    2d60:	10 92 9d 04 	sts	0x049D, r1
	}

	UART_LastRxError = lastRxError;
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
    2d66:	80 93 34 05 	sts	0x0534, r24
}
    2d6a:	0f 90       	pop	r0
    2d6c:	0f 90       	pop	r0
    2d6e:	0f 90       	pop	r0
    2d70:	0f 90       	pop	r0
    2d72:	cf 91       	pop	r28
    2d74:	df 91       	pop	r29
    2d76:	ff 91       	pop	r31
    2d78:	ef 91       	pop	r30
    2d7a:	bf 91       	pop	r27
    2d7c:	af 91       	pop	r26
    2d7e:	9f 91       	pop	r25
    2d80:	8f 91       	pop	r24
    2d82:	7f 91       	pop	r23
    2d84:	6f 91       	pop	r22
    2d86:	5f 91       	pop	r21
    2d88:	4f 91       	pop	r20
    2d8a:	3f 91       	pop	r19
    2d8c:	2f 91       	pop	r18
    2d8e:	0f 90       	pop	r0
    2d90:	0f be       	out	0x3f, r0	; 63
    2d92:	0f 90       	pop	r0
    2d94:	1f 90       	pop	r1
    2d96:	18 95       	reti

00002d98 <SendOutOfBand>:

void SendOutOfBand(unsigned char c) {
    2d98:	df 93       	push	r29
    2d9a:	cf 93       	push	r28
    2d9c:	0f 92       	push	r0
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
    2da2:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << UDRE)))
    2da4:	eb e2       	ldi	r30, 0x2B	; 43
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	80 81       	ld	r24, Z
    2daa:	88 2f       	mov	r24, r24
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	80 72       	andi	r24, 0x20	; 32
    2db0:	90 70       	andi	r25, 0x00	; 0
    2db2:	00 97       	sbiw	r24, 0x00	; 0
    2db4:	b9 f3       	breq	.-18     	; 0x2da4 <SendOutOfBand+0xc>
		;
	UDR = c;
    2db6:	ec e2       	ldi	r30, 0x2C	; 44
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	80 83       	st	Z, r24
}
    2dbe:	0f 90       	pop	r0
    2dc0:	cf 91       	pop	r28
    2dc2:	df 91       	pop	r29
    2dc4:	08 95       	ret

00002dc6 <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
 Function: UART Data Register Empty interrupt
 Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
    2dc6:	1f 92       	push	r1
    2dc8:	0f 92       	push	r0
    2dca:	0f b6       	in	r0, 0x3f	; 63
    2dcc:	0f 92       	push	r0
    2dce:	11 24       	eor	r1, r1
    2dd0:	8f 93       	push	r24
    2dd2:	9f 93       	push	r25
    2dd4:	af 93       	push	r26
    2dd6:	bf 93       	push	r27
    2dd8:	ef 93       	push	r30
    2dda:	ff 93       	push	r31
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	0f 92       	push	r0
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;

	if (oob_event) {
    2de6:	80 91 9d 04 	lds	r24, 0x049D
    2dea:	88 23       	and	r24, r24
    2dec:	01 f5       	brne	.+64     	; 0x2e2e <__vector_14+0x68>
		/* suppress transmitting during oob handling */
		return;
	}
	if (UART_TxHead != UART_TxTail) {
    2dee:	90 91 30 05 	lds	r25, 0x0530
    2df2:	80 91 31 05 	lds	r24, 0x0531
    2df6:	98 17       	cp	r25, r24
    2df8:	99 f0       	breq	.+38     	; 0x2e20 <__vector_14+0x5a>
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    2dfa:	80 91 31 05 	lds	r24, 0x0531
    2dfe:	8f 5f       	subi	r24, 0xFF	; 255
    2e00:	8f 70       	andi	r24, 0x0F	; 15
    2e02:	89 83       	std	Y+1, r24	; 0x01
		UART_TxTail = tmptail;
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
    2e06:	80 93 31 05 	sts	0x0531, r24
		/* get one byte from buffer and write it to UART */
		UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
    2e0a:	ac e2       	ldi	r26, 0x2C	; 44
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	89 81       	ldd	r24, Y+1	; 0x01
    2e10:	88 2f       	mov	r24, r24
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	fc 01       	movw	r30, r24
    2e16:	e0 56       	subi	r30, 0x60	; 96
    2e18:	fb 4f       	sbci	r31, 0xFB	; 251
    2e1a:	80 81       	ld	r24, Z
    2e1c:	8c 93       	st	X, r24
    2e1e:	07 c0       	rjmp	.+14     	; 0x2e2e <__vector_14+0x68>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
    2e20:	aa e2       	ldi	r26, 0x2A	; 42
    2e22:	b0 e0       	ldi	r27, 0x00	; 0
    2e24:	ea e2       	ldi	r30, 0x2A	; 42
    2e26:	f0 e0       	ldi	r31, 0x00	; 0
    2e28:	80 81       	ld	r24, Z
    2e2a:	8f 7d       	andi	r24, 0xDF	; 223
    2e2c:	8c 93       	st	X, r24
	}
}
    2e2e:	0f 90       	pop	r0
    2e30:	cf 91       	pop	r28
    2e32:	df 91       	pop	r29
    2e34:	ff 91       	pop	r31
    2e36:	ef 91       	pop	r30
    2e38:	bf 91       	pop	r27
    2e3a:	af 91       	pop	r26
    2e3c:	9f 91       	pop	r25
    2e3e:	8f 91       	pop	r24
    2e40:	0f 90       	pop	r0
    2e42:	0f be       	out	0x3f, r0	; 63
    2e44:	0f 90       	pop	r0
    2e46:	1f 90       	pop	r1
    2e48:	18 95       	reti

00002e4a <uart_init>:
 Function: uart_init()
 Purpose:  initialize UART and set baudrate
 Input:    baudrate using macro UART_BAUD_SELECT()
 Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate) {
    2e4a:	df 93       	push	r29
    2e4c:	cf 93       	push	r28
    2e4e:	00 d0       	rcall	.+0      	; 0x2e50 <uart_init+0x6>
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62
    2e54:	9a 83       	std	Y+2, r25	; 0x02
    2e56:	89 83       	std	Y+1, r24	; 0x01
	UART_TxHead = 0;
    2e58:	10 92 30 05 	sts	0x0530, r1
	UART_TxTail = 0;
    2e5c:	10 92 31 05 	sts	0x0531, r1
	UART_RxHead = 0;
    2e60:	10 92 32 05 	sts	0x0532, r1
	UART_RxTail = 0;
    2e64:	10 92 33 05 	sts	0x0533, r1
	/* enable UART receiver and transmmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if (baudrate & 0x8000) {
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6c:	99 23       	and	r25, r25
    2e6e:	4c f4       	brge	.+18     	; 0x2e82 <uart_init+0x38>
		UART0_STATUS = (1 << U2X);  //Enable 2x speed
    2e70:	eb e2       	ldi	r30, 0x2B	; 43
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	82 e0       	ldi	r24, 0x02	; 2
    2e76:	80 83       	st	Z, r24
		baudrate &= ~0x8000;
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7c:	9f 77       	andi	r25, 0x7F	; 127
    2e7e:	9a 83       	std	Y+2, r25	; 0x02
    2e80:	89 83       	std	Y+1, r24	; 0x01
	}
	UBRRH = (unsigned char) (baudrate >> 8);
    2e82:	e0 e4       	ldi	r30, 0x40	; 64
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	9a 81       	ldd	r25, Y+2	; 0x02
    2e8a:	89 2f       	mov	r24, r25
    2e8c:	99 27       	eor	r25, r25
    2e8e:	80 83       	st	Z, r24
	UBRRL = (unsigned char) baudrate;
    2e90:	e9 e2       	ldi	r30, 0x29	; 41
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	89 81       	ldd	r24, Y+1	; 0x01
    2e96:	80 83       	st	Z, r24

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | (1 << RXEN) | (1 << TXEN);
    2e98:	ea e2       	ldi	r30, 0x2A	; 42
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	88 e9       	ldi	r24, 0x98	; 152
    2e9e:	80 83       	st	Z, r24

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
    2ea0:	e0 e4       	ldi	r30, 0x40	; 64
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	86 e8       	ldi	r24, 0x86	; 134
    2ea6:	80 83       	st	Z, r24
	/* Enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    2ea8:	0f 90       	pop	r0
    2eaa:	0f 90       	pop	r0
    2eac:	cf 91       	pop	r28
    2eae:	df 91       	pop	r29
    2eb0:	08 95       	ret

00002eb2 <uart_getc>:
 Function: uart_getc()
 Purpose:  return byte from ringbuffer
 Returns:  lower byte:  received byte from ringbuffer
 higher byte: last receive error
 **************************************************************************/
unsigned int uart_getc(void) {
    2eb2:	df 93       	push	r29
    2eb4:	cf 93       	push	r28
    2eb6:	00 d0       	rcall	.+0      	; 0x2eb8 <uart_getc+0x6>
    2eb8:	00 d0       	rcall	.+0      	; 0x2eba <uart_getc+0x8>
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;
	unsigned char data;

	if (UART_RxHead == UART_RxTail) {
    2ebe:	90 91 32 05 	lds	r25, 0x0532
    2ec2:	80 91 33 05 	lds	r24, 0x0533
    2ec6:	98 17       	cp	r25, r24
    2ec8:	29 f4       	brne	.+10     	; 0x2ed4 <uart_getc+0x22>
		return UART_NO_DATA; /* no data available */
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	91 e0       	ldi	r25, 0x01	; 1
    2ece:	9c 83       	std	Y+4, r25	; 0x04
    2ed0:	8b 83       	std	Y+3, r24	; 0x03
    2ed2:	3c c0       	rjmp	.+120    	; 0x2f4c <uart_getc+0x9a>
	}

	/* calculate /store buffer index */
	tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    2ed4:	80 91 33 05 	lds	r24, 0x0533
    2ed8:	8f 5f       	subi	r24, 0xFF	; 255
    2eda:	8f 77       	andi	r24, 0x7F	; 127
    2edc:	8a 83       	std	Y+2, r24	; 0x02
	UART_RxTail = tmptail;
    2ede:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee0:	80 93 33 05 	sts	0x0533, r24

	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];
    2ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee6:	88 2f       	mov	r24, r24
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	fc 01       	movw	r30, r24
    2eec:	e0 55       	subi	r30, 0x50	; 80
    2eee:	fb 4f       	sbci	r31, 0xFB	; 251
    2ef0:	80 81       	ld	r24, Z
    2ef2:	89 83       	std	Y+1, r24	; 0x01
	if (chars_in_rx_buffer > 0) {
    2ef4:	80 91 9f 04 	lds	r24, 0x049F
    2ef8:	88 23       	and	r24, r24
    2efa:	29 f0       	breq	.+10     	; 0x2f06 <uart_getc+0x54>
		chars_in_rx_buffer--;
    2efc:	80 91 9f 04 	lds	r24, 0x049F
    2f00:	81 50       	subi	r24, 0x01	; 1
    2f02:	80 93 9f 04 	sts	0x049F, r24
	}
	if ((flowControl == FLOWCONTROL_XONXOFF) && after_xoff_sent) {
    2f06:	80 91 9c 04 	lds	r24, 0x049C
    2f0a:	81 30       	cpi	r24, 0x01	; 1
    2f0c:	91 f4       	brne	.+36     	; 0x2f32 <uart_getc+0x80>
    2f0e:	80 91 9e 04 	lds	r24, 0x049E
    2f12:	88 23       	and	r24, r24
    2f14:	71 f0       	breq	.+28     	; 0x2f32 <uart_getc+0x80>
		if (chars_in_rx_buffer <= UART_RX_BUFFER_MIN_MARK) {
    2f16:	80 91 9f 04 	lds	r24, 0x049F
    2f1a:	81 31       	cpi	r24, 0x11	; 17
    2f1c:	50 f4       	brcc	.+20     	; 0x2f32 <uart_getc+0x80>
			/* immediately send XON */
			oob_event = 1;
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	80 93 9d 04 	sts	0x049D, r24
			SendOutOfBand(XON);
    2f24:	81 e1       	ldi	r24, 0x11	; 17
    2f26:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <SendOutOfBand>
			after_xoff_sent = 0;
    2f2a:	10 92 9e 04 	sts	0x049E, r1
			oob_event = 0;
    2f2e:	10 92 9d 04 	sts	0x049D, r1
		}
	}

	return (UART_LastRxError << 8) + data;
    2f32:	80 91 34 05 	lds	r24, 0x0534
    2f36:	88 2f       	mov	r24, r24
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	38 2f       	mov	r19, r24
    2f3c:	22 27       	eor	r18, r18
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	88 2f       	mov	r24, r24
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	82 0f       	add	r24, r18
    2f46:	93 1f       	adc	r25, r19
    2f48:	9c 83       	std	Y+4, r25	; 0x04
    2f4a:	8b 83       	std	Y+3, r24	; 0x03
    2f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4e:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    2f50:	0f 90       	pop	r0
    2f52:	0f 90       	pop	r0
    2f54:	0f 90       	pop	r0
    2f56:	0f 90       	pop	r0
    2f58:	cf 91       	pop	r28
    2f5a:	df 91       	pop	r29
    2f5c:	08 95       	ret

00002f5e <uart_putc>:
 Function: uart_putc()
 Purpose:  write byte to ringbuffer for transmitting via UART
 Input:    byte to be transmitted
 Returns:  none
 **************************************************************************/
void uart_putc(unsigned char data) {
    2f5e:	df 93       	push	r29
    2f60:	cf 93       	push	r28
    2f62:	00 d0       	rcall	.+0      	; 0x2f64 <uart_putc+0x6>
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char tmphead;

	tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    2f6a:	80 91 30 05 	lds	r24, 0x0530
    2f6e:	8f 5f       	subi	r24, 0xFF	; 255
    2f70:	8f 70       	andi	r24, 0x0F	; 15
    2f72:	89 83       	std	Y+1, r24	; 0x01

	while (tmphead == UART_TxTail) {
    2f74:	90 91 31 05 	lds	r25, 0x0531
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	89 17       	cp	r24, r25
    2f7c:	d9 f3       	breq	.-10     	; 0x2f74 <uart_putc+0x16>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
    2f80:	88 2f       	mov	r24, r24
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	fc 01       	movw	r30, r24
    2f86:	e0 56       	subi	r30, 0x60	; 96
    2f88:	fb 4f       	sbci	r31, 0xFB	; 251
    2f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8c:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	80 93 30 05 	sts	0x0530, r24

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    2f94:	aa e2       	ldi	r26, 0x2A	; 42
    2f96:	b0 e0       	ldi	r27, 0x00	; 0
    2f98:	ea e2       	ldi	r30, 0x2A	; 42
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	80 81       	ld	r24, Z
    2f9e:	80 62       	ori	r24, 0x20	; 32
    2fa0:	8c 93       	st	X, r24

}/* uart_putc */
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	cf 91       	pop	r28
    2fa8:	df 91       	pop	r29
    2faa:	08 95       	ret

00002fac <uart_puts>:
 Function: uart_puts()
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
    2fac:	df 93       	push	r29
    2fae:	cf 93       	push	r28
    2fb0:	00 d0       	rcall	.+0      	; 0x2fb2 <uart_puts+0x6>
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    2fb6:	9a 83       	std	Y+2, r25	; 0x02
    2fb8:	89 83       	std	Y+1, r24	; 0x01
    2fba:	0b c0       	rjmp	.+22     	; 0x2fd2 <uart_puts+0x26>
	while (*s)
		uart_putc(*s++);
    2fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc0:	20 81       	ld	r18, Z
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc6:	01 96       	adiw	r24, 0x01	; 1
    2fc8:	9a 83       	std	Y+2, r25	; 0x02
    2fca:	89 83       	std	Y+1, r24	; 0x01
    2fcc:	82 2f       	mov	r24, r18
    2fce:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <uart_putc>
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
	while (*s)
    2fd2:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd4:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd6:	80 81       	ld	r24, Z
    2fd8:	88 23       	and	r24, r24
    2fda:	81 f7       	brne	.-32     	; 0x2fbc <uart_puts+0x10>
		uart_putc(*s++);

}/* uart_puts */
    2fdc:	0f 90       	pop	r0
    2fde:	0f 90       	pop	r0
    2fe0:	cf 91       	pop	r28
    2fe2:	df 91       	pop	r29
    2fe4:	08 95       	ret

00002fe6 <uart_puts_p>:
 Function: uart_puts_p()
 Purpose:  transmit string from program memory to UART
 Input:    program memory string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
    2fe6:	df 93       	push	r29
    2fe8:	cf 93       	push	r28
    2fea:	00 d0       	rcall	.+0      	; 0x2fec <uart_puts_p+0x6>
    2fec:	00 d0       	rcall	.+0      	; 0x2fee <uart_puts_p+0x8>
    2fee:	00 d0       	rcall	.+0      	; 0x2ff0 <uart_puts_p+0xa>
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62
    2ff4:	9d 83       	std	Y+5, r25	; 0x05
    2ff6:	8c 83       	std	Y+4, r24	; 0x04
    2ff8:	03 c0       	rjmp	.+6      	; 0x3000 <uart_puts_p+0x1a>
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
		uart_putc(c);
    2ffa:	8e 81       	ldd	r24, Y+6	; 0x06
    2ffc:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <uart_putc>
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
    3000:	8c 81       	ldd	r24, Y+4	; 0x04
    3002:	9d 81       	ldd	r25, Y+5	; 0x05
    3004:	9b 83       	std	Y+3, r25	; 0x03
    3006:	8a 83       	std	Y+2, r24	; 0x02
    3008:	8c 81       	ldd	r24, Y+4	; 0x04
    300a:	9d 81       	ldd	r25, Y+5	; 0x05
    300c:	01 96       	adiw	r24, 0x01	; 1
    300e:	9d 83       	std	Y+5, r25	; 0x05
    3010:	8c 83       	std	Y+4, r24	; 0x04
    3012:	ea 81       	ldd	r30, Y+2	; 0x02
    3014:	fb 81       	ldd	r31, Y+3	; 0x03
    3016:	84 91       	lpm	r24, Z+
    3018:	89 83       	std	Y+1, r24	; 0x01
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	8e 83       	std	Y+6, r24	; 0x06
    301e:	8e 81       	ldd	r24, Y+6	; 0x06
    3020:	88 23       	and	r24, r24
    3022:	59 f7       	brne	.-42     	; 0x2ffa <uart_puts_p+0x14>
		uart_putc(c);

}/* uart_puts_p */
    3024:	26 96       	adiw	r28, 0x06	; 6
    3026:	0f b6       	in	r0, 0x3f	; 63
    3028:	f8 94       	cli
    302a:	de bf       	out	0x3e, r29	; 62
    302c:	0f be       	out	0x3f, r0	; 63
    302e:	cd bf       	out	0x3d, r28	; 61
    3030:	cf 91       	pop	r28
    3032:	df 91       	pop	r29
    3034:	08 95       	ret

00003036 <__prologue_saves__>:
    3036:	2f 92       	push	r2
    3038:	3f 92       	push	r3
    303a:	4f 92       	push	r4
    303c:	5f 92       	push	r5
    303e:	6f 92       	push	r6
    3040:	7f 92       	push	r7
    3042:	8f 92       	push	r8
    3044:	9f 92       	push	r9
    3046:	af 92       	push	r10
    3048:	bf 92       	push	r11
    304a:	cf 92       	push	r12
    304c:	df 92       	push	r13
    304e:	ef 92       	push	r14
    3050:	ff 92       	push	r15
    3052:	0f 93       	push	r16
    3054:	1f 93       	push	r17
    3056:	cf 93       	push	r28
    3058:	df 93       	push	r29
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	ca 1b       	sub	r28, r26
    3060:	db 0b       	sbc	r29, r27
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	f8 94       	cli
    3066:	de bf       	out	0x3e, r29	; 62
    3068:	0f be       	out	0x3f, r0	; 63
    306a:	cd bf       	out	0x3d, r28	; 61
    306c:	09 94       	ijmp

0000306e <__epilogue_restores__>:
    306e:	2a 88       	ldd	r2, Y+18	; 0x12
    3070:	39 88       	ldd	r3, Y+17	; 0x11
    3072:	48 88       	ldd	r4, Y+16	; 0x10
    3074:	5f 84       	ldd	r5, Y+15	; 0x0f
    3076:	6e 84       	ldd	r6, Y+14	; 0x0e
    3078:	7d 84       	ldd	r7, Y+13	; 0x0d
    307a:	8c 84       	ldd	r8, Y+12	; 0x0c
    307c:	9b 84       	ldd	r9, Y+11	; 0x0b
    307e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3080:	b9 84       	ldd	r11, Y+9	; 0x09
    3082:	c8 84       	ldd	r12, Y+8	; 0x08
    3084:	df 80       	ldd	r13, Y+7	; 0x07
    3086:	ee 80       	ldd	r14, Y+6	; 0x06
    3088:	fd 80       	ldd	r15, Y+5	; 0x05
    308a:	0c 81       	ldd	r16, Y+4	; 0x04
    308c:	1b 81       	ldd	r17, Y+3	; 0x03
    308e:	aa 81       	ldd	r26, Y+2	; 0x02
    3090:	b9 81       	ldd	r27, Y+1	; 0x01
    3092:	ce 0f       	add	r28, r30
    3094:	d1 1d       	adc	r29, r1
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	cd bf       	out	0x3d, r28	; 61
    30a0:	ed 01       	movw	r28, r26
    30a2:	08 95       	ret

000030a4 <_exit>:
    30a4:	f8 94       	cli

000030a6 <__stop_program>:
    30a6:	ff cf       	rjmp	.-2      	; 0x30a6 <__stop_program>

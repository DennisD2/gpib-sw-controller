
gpib_004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e2e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000436  00800060  00002e2e  00002ea2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000170  00800496  00003264  000032d8  2**0
                  ALLOC
  3 .stab         00005b80  00000000  00000000  000032d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002998  00000000  00000000  00008e58  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__ctors_end>
       4:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
       8:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
       c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      10:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      14:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      18:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      1c:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__vector_7>
      20:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      24:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      28:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      2c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      30:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      34:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <__vector_13>
      38:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__vector_14>
      3c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      40:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      44:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      48:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      4c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      50:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>

00000054 <__c.1890>:
      54:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
      64:	65 72 72 6f 72 3a 20 00                             error: .

0000006c <__c.1888>:
      6c:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
      7c:	6f 72 3a 20 00                                      or: .

00000081 <__c.1886>:
      81:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
      91:	3a 20 00                                            : .

00000094 <__c.1914>:
      94:	43 6f 6d 6d 61 6e 64 20 6f 76 65 72 66 6c 6f 77     Command overflow
      a4:	2e 00                                               ..

000000a6 <__c.1990>:
      a6:	75 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 0a     unknown command.
      b6:	0d 00                                               ..

000000b8 <__c.1986>:
      b8:	43 68 65 63 6b 20 65 72 72 6f 72 73 0a 0d 00        Check errors...

000000c7 <__c.1981>:
      c7:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      d7:	74 72 6f 6c 20 6f 66 66 0a 0d 00                    trol off...

000000e2 <__c.1979>:
      e2:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      f2:	74 72 6f 6c 20 6f 6e 0a 0d 00                       trol on...

000000fc <__c.2042>:
      fc:	0a 0d 00                                            ...

000000ff <__c.2059>:
      ff:	0a 0d 53 52 51 20 64 65 74 65 63 74 65 64 2e 0a     ..SRQ detected..
     10f:	0d 00                                               ..

00000111 <__c.2089>:
     111:	0a 0d 53 52 51 73 20 61 72 65 20 64 69 73 61 62     ..SRQs are disab
     121:	6c 65 64 20 6e 6f 77 2e 0a 0d 00                    led now....

0000012c <__c.2087>:
     12c:	0a 0d 53 52 51 20 65 6d 69 74 74 65 72 20 69 73     ..SRQ emitter is
     13c:	20 6e 6f 74 20 69 6e 20 6c 69 73 74 20 6f 66 20      not in list of 
     14c:	6b 6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 20 53     known devices. S
     15c:	52 51 20 49 67 6e 6f 72 65 64 2e 0a 0d 00           RQ Ignored....

0000016a <__c.2124>:
     16a:	2e 69 20 2d 20 64 75 6d 70 20 69 6e 66 6f 20 61     .i - dump info a
     17a:	62 6f 75 74 20 47 50 49 42 20 6c 69 6e 65 73 2e     bout GPIB lines.
     18a:	0a 0d 00                                            ...

0000018d <__c.2122>:
     18d:	2e 65 20 2d 20 64 75 6d 70 20 65 72 72 6f 72 20     .e - dump error 
     19d:	71 75 65 75 65 2e 0a 0d 00                          queue....

000001a6 <__c.2120>:
     1a6:	2e 68 20 2d 20 70 72 69 6e 74 20 68 65 6c 70 2e     .h - print help.
     1b6:	0a 0d 00                                            ...

000001b9 <__c.2118>:
     1b9:	2e 78 20 2d 20 74 6f 67 67 6c 65 20 58 6f 6e 2f     .x - toggle Xon/
     1c9:	58 6f 66 66 20 66 6c 6f 77 20 63 6f 6e 74 72 6f     Xoff flow contro
     1d9:	6c 2e 0a 0d 00                                      l....

000001de <__c.2116>:
     1de:	2e 2d 20 3c 6e 3e 20 2d 20 72 65 6d 6f 76 65 20     .- <n> - remove 
     1ee:	70 61 72 74 6e 65 72 20 64 65 76 69 63 65 20 61     partner device a
     1fe:	64 64 72 65 73 73 20 66 72 6f 6d 20 6c 69 73 74     ddress from list
     20e:	20 6f 66 20 6b 6e 6f 77 6e 20 64 65 76 69 63 65      of known device
     21e:	73 2e 0a 0d 00                                      s....

00000223 <__c.2114>:
     223:	2e 2b 20 3c 6e 3e 20 2d 20 61 64 64 20 70 61 72     .+ <n> - add par
     233:	74 6e 65 72 20 64 65 76 69 63 65 20 61 64 64 72     tner device addr
     243:	65 73 73 20 74 6f 20 6c 69 73 74 20 6f 66 20 6b     ess to list of k
     253:	6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 0a 0d 00     nown devices....

00000263 <__c.2112>:
     263:	2e 73 20 3c 73 65 63 6f 6e 64 61 72 79 3e 20 2d     .s <secondary> -
     273:	20 73 65 74 20 73 65 63 6f 6e 64 61 72 79 20 61      set secondary a
     283:	64 64 72 65 73 73 20 6f 66 20 72 65 6d 6f 74 65     ddress of remote
     293:	20 64 65 76 69 63 65 0a 0d 00                        device...

0000029d <__c.2110>:
     29d:	49 6e 74 65 72 6e 61 6c 20 63 6f 6d 6d 61 6e 64     Internal command
     2ad:	73 3a 0a 0d 00                                      s:...

000002b2 <__c.2146>:
     2b2:	0a 0d 00                                            ...

000002b5 <__c.2144>:
     2b5:	0a 0d 00                                            ...

000002b8 <__c.2141>:
     2b8:	44 65 76 69 63 65 20 61 64 64 72 65 73 73 20 69     Device address i
     2c8:	73 20 6e 6f 74 20 73 65 74 2e 20 43 61 6e 20 6e     s not set. Can n
     2d8:	6f 74 20 73 65 6e 64 20 63 6f 6d 6d 61 6e 64 2e     ot send command.
     2e8:	0a 0d 00                                            ...

000002eb <__c.2139>:
     2eb:	0a 0d 00                                            ...

000002ee <__ctors_end>:
     2ee:	11 24       	eor	r1, r1
     2f0:	1f be       	out	0x3f, r1	; 63
     2f2:	cf e5       	ldi	r28, 0x5F	; 95
     2f4:	d8 e0       	ldi	r29, 0x08	; 8
     2f6:	de bf       	out	0x3e, r29	; 62
     2f8:	cd bf       	out	0x3d, r28	; 61

000002fa <__do_copy_data>:
     2fa:	14 e0       	ldi	r17, 0x04	; 4
     2fc:	a0 e6       	ldi	r26, 0x60	; 96
     2fe:	b0 e0       	ldi	r27, 0x00	; 0
     300:	ee e2       	ldi	r30, 0x2E	; 46
     302:	fe e2       	ldi	r31, 0x2E	; 46
     304:	02 c0       	rjmp	.+4      	; 0x30a <.do_copy_data_start>

00000306 <.do_copy_data_loop>:
     306:	05 90       	lpm	r0, Z+
     308:	0d 92       	st	X+, r0

0000030a <.do_copy_data_start>:
     30a:	a6 39       	cpi	r26, 0x96	; 150
     30c:	b1 07       	cpc	r27, r17
     30e:	d9 f7       	brne	.-10     	; 0x306 <.do_copy_data_loop>

00000310 <__do_clear_bss>:
     310:	16 e0       	ldi	r17, 0x06	; 6
     312:	a6 e9       	ldi	r26, 0x96	; 150
     314:	b4 e0       	ldi	r27, 0x04	; 4
     316:	01 c0       	rjmp	.+2      	; 0x31a <.do_clear_bss_start>

00000318 <.do_clear_bss_loop>:
     318:	1d 92       	st	X+, r1

0000031a <.do_clear_bss_start>:
     31a:	a6 30       	cpi	r26, 0x06	; 6
     31c:	b1 07       	cpc	r27, r17
     31e:	e1 f7       	brne	.-8      	; 0x318 <.do_clear_bss_loop>
     320:	0e 94 80 14 	call	0x2900	; 0x2900 <main>
     324:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <_exit>

00000328 <__bad_interrupt>:
     328:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

0000032c <atoi>:
     32c:	fc 01       	movw	r30, r24
     32e:	88 27       	eor	r24, r24
     330:	99 27       	eor	r25, r25
     332:	e8 94       	clt
     334:	21 91       	ld	r18, Z+
     336:	20 32       	cpi	r18, 0x20	; 32
     338:	e9 f3       	breq	.-6      	; 0x334 <atoi+0x8>
     33a:	29 30       	cpi	r18, 0x09	; 9
     33c:	10 f0       	brcs	.+4      	; 0x342 <atoi+0x16>
     33e:	2e 30       	cpi	r18, 0x0E	; 14
     340:	c8 f3       	brcs	.-14     	; 0x334 <atoi+0x8>
     342:	2b 32       	cpi	r18, 0x2B	; 43
     344:	41 f0       	breq	.+16     	; 0x356 <atoi+0x2a>
     346:	2d 32       	cpi	r18, 0x2D	; 45
     348:	39 f4       	brne	.+14     	; 0x358 <atoi+0x2c>
     34a:	68 94       	set
     34c:	04 c0       	rjmp	.+8      	; 0x356 <atoi+0x2a>
     34e:	0e 94 02 02 	call	0x404	; 0x404 <__mulhi_const_10>
     352:	82 0f       	add	r24, r18
     354:	91 1d       	adc	r25, r1
     356:	21 91       	ld	r18, Z+
     358:	20 53       	subi	r18, 0x30	; 48
     35a:	2a 30       	cpi	r18, 0x0A	; 10
     35c:	c0 f3       	brcs	.-16     	; 0x34e <atoi+0x22>
     35e:	1e f4       	brtc	.+6      	; 0x366 <atoi+0x3a>
     360:	90 95       	com	r25
     362:	81 95       	neg	r24
     364:	9f 4f       	sbci	r25, 0xFF	; 255
     366:	08 95       	ret

00000368 <strtok>:
     368:	46 e9       	ldi	r20, 0x96	; 150
     36a:	54 e0       	ldi	r21, 0x04	; 4
     36c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <strtok_r>
     370:	08 95       	ret

00000372 <strlen>:
     372:	fc 01       	movw	r30, r24
     374:	01 90       	ld	r0, Z+
     376:	00 20       	and	r0, r0
     378:	e9 f7       	brne	.-6      	; 0x374 <strlen+0x2>
     37a:	80 95       	com	r24
     37c:	90 95       	com	r25
     37e:	8e 0f       	add	r24, r30
     380:	9f 1f       	adc	r25, r31
     382:	08 95       	ret

00000384 <strncmp>:
     384:	fb 01       	movw	r30, r22
     386:	dc 01       	movw	r26, r24
     388:	41 50       	subi	r20, 0x01	; 1
     38a:	50 40       	sbci	r21, 0x00	; 0
     38c:	30 f0       	brcs	.+12     	; 0x39a <strncmp+0x16>
     38e:	8d 91       	ld	r24, X+
     390:	01 90       	ld	r0, Z+
     392:	80 19       	sub	r24, r0
     394:	19 f4       	brne	.+6      	; 0x39c <strncmp+0x18>
     396:	00 20       	and	r0, r0
     398:	b9 f7       	brne	.-18     	; 0x388 <strncmp+0x4>
     39a:	88 1b       	sub	r24, r24
     39c:	99 0b       	sbc	r25, r25
     39e:	08 95       	ret

000003a0 <strtok_r>:
     3a0:	00 97       	sbiw	r24, 0x00	; 0
     3a2:	31 f4       	brne	.+12     	; 0x3b0 <strtok_r+0x10>
     3a4:	da 01       	movw	r26, r20
     3a6:	8d 91       	ld	r24, X+
     3a8:	9c 91       	ld	r25, X
     3aa:	00 97       	sbiw	r24, 0x00	; 0
     3ac:	09 f4       	brne	.+2      	; 0x3b0 <strtok_r+0x10>
     3ae:	0e c0       	rjmp	.+28     	; 0x3cc <strtok_r+0x2c>
     3b0:	dc 01       	movw	r26, r24
     3b2:	fb 01       	movw	r30, r22
     3b4:	3d 91       	ld	r19, X+
     3b6:	21 91       	ld	r18, Z+
     3b8:	22 23       	and	r18, r18
     3ba:	19 f0       	breq	.+6      	; 0x3c2 <strtok_r+0x22>
     3bc:	32 17       	cp	r19, r18
     3be:	c9 f3       	breq	.-14     	; 0x3b2 <strtok_r+0x12>
     3c0:	fa cf       	rjmp	.-12     	; 0x3b6 <strtok_r+0x16>
     3c2:	33 23       	and	r19, r19
     3c4:	31 f4       	brne	.+12     	; 0x3d2 <strtok_r+0x32>
     3c6:	da 01       	movw	r26, r20
     3c8:	1d 92       	st	X+, r1
     3ca:	1c 92       	st	X, r1
     3cc:	88 27       	eor	r24, r24
     3ce:	99 27       	eor	r25, r25
     3d0:	08 95       	ret
     3d2:	11 97       	sbiw	r26, 0x01	; 1
     3d4:	af 93       	push	r26
     3d6:	bf 93       	push	r27
     3d8:	fb 01       	movw	r30, r22
     3da:	3d 91       	ld	r19, X+
     3dc:	21 91       	ld	r18, Z+
     3de:	32 17       	cp	r19, r18
     3e0:	71 f4       	brne	.+28     	; 0x3fe <strtok_r+0x5e>
     3e2:	33 23       	and	r19, r19
     3e4:	21 f4       	brne	.+8      	; 0x3ee <strtok_r+0x4e>
     3e6:	88 27       	eor	r24, r24
     3e8:	99 27       	eor	r25, r25
     3ea:	11 97       	sbiw	r26, 0x01	; 1
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <strtok_r+0x52>
     3ee:	1e 92       	st	-X, r1
     3f0:	11 96       	adiw	r26, 0x01	; 1
     3f2:	fa 01       	movw	r30, r20
     3f4:	a1 93       	st	Z+, r26
     3f6:	b0 83       	st	Z, r27
     3f8:	9f 91       	pop	r25
     3fa:	8f 91       	pop	r24
     3fc:	08 95       	ret
     3fe:	22 23       	and	r18, r18
     400:	69 f7       	brne	.-38     	; 0x3dc <strtok_r+0x3c>
     402:	ea cf       	rjmp	.-44     	; 0x3d8 <strtok_r+0x38>

00000404 <__mulhi_const_10>:
     404:	7a e0       	ldi	r23, 0x0A	; 10
     406:	97 9f       	mul	r25, r23
     408:	90 2d       	mov	r25, r0
     40a:	87 9f       	mul	r24, r23
     40c:	80 2d       	mov	r24, r0
     40e:	91 0d       	add	r25, r1
     410:	11 24       	eor	r1, r1
     412:	08 95       	ret

00000414 <sprintf>:
     414:	ae e0       	ldi	r26, 0x0E	; 14
     416:	b0 e0       	ldi	r27, 0x00	; 0
     418:	e0 e1       	ldi	r30, 0x10	; 16
     41a:	f2 e0       	ldi	r31, 0x02	; 2
     41c:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__prologue_saves__+0x1c>
     420:	0d 89       	ldd	r16, Y+21	; 0x15
     422:	1e 89       	ldd	r17, Y+22	; 0x16
     424:	86 e0       	ldi	r24, 0x06	; 6
     426:	8c 83       	std	Y+4, r24	; 0x04
     428:	1a 83       	std	Y+2, r17	; 0x02
     42a:	09 83       	std	Y+1, r16	; 0x01
     42c:	8f ef       	ldi	r24, 0xFF	; 255
     42e:	9f e7       	ldi	r25, 0x7F	; 127
     430:	9e 83       	std	Y+6, r25	; 0x06
     432:	8d 83       	std	Y+5, r24	; 0x05
     434:	9e 01       	movw	r18, r28
     436:	27 5e       	subi	r18, 0xE7	; 231
     438:	3f 4f       	sbci	r19, 0xFF	; 255
     43a:	ce 01       	movw	r24, r28
     43c:	01 96       	adiw	r24, 0x01	; 1
     43e:	6f 89       	ldd	r22, Y+23	; 0x17
     440:	78 8d       	ldd	r23, Y+24	; 0x18
     442:	a9 01       	movw	r20, r18
     444:	0e 94 2e 02 	call	0x45c	; 0x45c <vfprintf>
     448:	2f 81       	ldd	r18, Y+7	; 0x07
     44a:	38 85       	ldd	r19, Y+8	; 0x08
     44c:	02 0f       	add	r16, r18
     44e:	13 1f       	adc	r17, r19
     450:	f8 01       	movw	r30, r16
     452:	10 82       	st	Z, r1
     454:	2e 96       	adiw	r28, 0x0e	; 14
     456:	e4 e0       	ldi	r30, 0x04	; 4
     458:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__epilogue_restores__+0x1c>

0000045c <vfprintf>:
     45c:	ab e0       	ldi	r26, 0x0B	; 11
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	e4 e3       	ldi	r30, 0x34	; 52
     462:	f2 e0       	ldi	r31, 0x02	; 2
     464:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__prologue_saves__>
     468:	3c 01       	movw	r6, r24
     46a:	2b 01       	movw	r4, r22
     46c:	5a 01       	movw	r10, r20
     46e:	fc 01       	movw	r30, r24
     470:	17 82       	std	Z+7, r1	; 0x07
     472:	16 82       	std	Z+6, r1	; 0x06
     474:	83 81       	ldd	r24, Z+3	; 0x03
     476:	81 fd       	sbrc	r24, 1
     478:	03 c0       	rjmp	.+6      	; 0x480 <vfprintf+0x24>
     47a:	6f ef       	ldi	r22, 0xFF	; 255
     47c:	7f ef       	ldi	r23, 0xFF	; 255
     47e:	c6 c1       	rjmp	.+908    	; 0x80c <vfprintf+0x3b0>
     480:	9a e0       	ldi	r25, 0x0A	; 10
     482:	89 2e       	mov	r8, r25
     484:	1e 01       	movw	r2, r28
     486:	08 94       	sec
     488:	21 1c       	adc	r2, r1
     48a:	31 1c       	adc	r3, r1
     48c:	f3 01       	movw	r30, r6
     48e:	23 81       	ldd	r18, Z+3	; 0x03
     490:	f2 01       	movw	r30, r4
     492:	23 fd       	sbrc	r18, 3
     494:	85 91       	lpm	r24, Z+
     496:	23 ff       	sbrs	r18, 3
     498:	81 91       	ld	r24, Z+
     49a:	2f 01       	movw	r4, r30
     49c:	88 23       	and	r24, r24
     49e:	09 f4       	brne	.+2      	; 0x4a2 <vfprintf+0x46>
     4a0:	b2 c1       	rjmp	.+868    	; 0x806 <vfprintf+0x3aa>
     4a2:	85 32       	cpi	r24, 0x25	; 37
     4a4:	39 f4       	brne	.+14     	; 0x4b4 <vfprintf+0x58>
     4a6:	23 fd       	sbrc	r18, 3
     4a8:	85 91       	lpm	r24, Z+
     4aa:	23 ff       	sbrs	r18, 3
     4ac:	81 91       	ld	r24, Z+
     4ae:	2f 01       	movw	r4, r30
     4b0:	85 32       	cpi	r24, 0x25	; 37
     4b2:	29 f4       	brne	.+10     	; 0x4be <vfprintf+0x62>
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	b3 01       	movw	r22, r6
     4b8:	0e 94 21 04 	call	0x842	; 0x842 <fputc>
     4bc:	e7 cf       	rjmp	.-50     	; 0x48c <vfprintf+0x30>
     4be:	98 2f       	mov	r25, r24
     4c0:	ff 24       	eor	r15, r15
     4c2:	ee 24       	eor	r14, r14
     4c4:	99 24       	eor	r9, r9
     4c6:	ff e1       	ldi	r31, 0x1F	; 31
     4c8:	ff 15       	cp	r31, r15
     4ca:	d0 f0       	brcs	.+52     	; 0x500 <vfprintf+0xa4>
     4cc:	9b 32       	cpi	r25, 0x2B	; 43
     4ce:	69 f0       	breq	.+26     	; 0x4ea <vfprintf+0x8e>
     4d0:	9c 32       	cpi	r25, 0x2C	; 44
     4d2:	28 f4       	brcc	.+10     	; 0x4de <vfprintf+0x82>
     4d4:	90 32       	cpi	r25, 0x20	; 32
     4d6:	59 f0       	breq	.+22     	; 0x4ee <vfprintf+0x92>
     4d8:	93 32       	cpi	r25, 0x23	; 35
     4da:	91 f4       	brne	.+36     	; 0x500 <vfprintf+0xa4>
     4dc:	0e c0       	rjmp	.+28     	; 0x4fa <vfprintf+0x9e>
     4de:	9d 32       	cpi	r25, 0x2D	; 45
     4e0:	49 f0       	breq	.+18     	; 0x4f4 <vfprintf+0x98>
     4e2:	90 33       	cpi	r25, 0x30	; 48
     4e4:	69 f4       	brne	.+26     	; 0x500 <vfprintf+0xa4>
     4e6:	41 e0       	ldi	r20, 0x01	; 1
     4e8:	24 c0       	rjmp	.+72     	; 0x532 <vfprintf+0xd6>
     4ea:	52 e0       	ldi	r21, 0x02	; 2
     4ec:	f5 2a       	or	r15, r21
     4ee:	84 e0       	ldi	r24, 0x04	; 4
     4f0:	f8 2a       	or	r15, r24
     4f2:	28 c0       	rjmp	.+80     	; 0x544 <vfprintf+0xe8>
     4f4:	98 e0       	ldi	r25, 0x08	; 8
     4f6:	f9 2a       	or	r15, r25
     4f8:	25 c0       	rjmp	.+74     	; 0x544 <vfprintf+0xe8>
     4fa:	e0 e1       	ldi	r30, 0x10	; 16
     4fc:	fe 2a       	or	r15, r30
     4fe:	22 c0       	rjmp	.+68     	; 0x544 <vfprintf+0xe8>
     500:	f7 fc       	sbrc	r15, 7
     502:	29 c0       	rjmp	.+82     	; 0x556 <vfprintf+0xfa>
     504:	89 2f       	mov	r24, r25
     506:	80 53       	subi	r24, 0x30	; 48
     508:	8a 30       	cpi	r24, 0x0A	; 10
     50a:	70 f4       	brcc	.+28     	; 0x528 <vfprintf+0xcc>
     50c:	f6 fe       	sbrs	r15, 6
     50e:	05 c0       	rjmp	.+10     	; 0x51a <vfprintf+0xbe>
     510:	98 9c       	mul	r9, r8
     512:	90 2c       	mov	r9, r0
     514:	11 24       	eor	r1, r1
     516:	98 0e       	add	r9, r24
     518:	15 c0       	rjmp	.+42     	; 0x544 <vfprintf+0xe8>
     51a:	e8 9c       	mul	r14, r8
     51c:	e0 2c       	mov	r14, r0
     51e:	11 24       	eor	r1, r1
     520:	e8 0e       	add	r14, r24
     522:	f0 e2       	ldi	r31, 0x20	; 32
     524:	ff 2a       	or	r15, r31
     526:	0e c0       	rjmp	.+28     	; 0x544 <vfprintf+0xe8>
     528:	9e 32       	cpi	r25, 0x2E	; 46
     52a:	29 f4       	brne	.+10     	; 0x536 <vfprintf+0xda>
     52c:	f6 fc       	sbrc	r15, 6
     52e:	6b c1       	rjmp	.+726    	; 0x806 <vfprintf+0x3aa>
     530:	40 e4       	ldi	r20, 0x40	; 64
     532:	f4 2a       	or	r15, r20
     534:	07 c0       	rjmp	.+14     	; 0x544 <vfprintf+0xe8>
     536:	9c 36       	cpi	r25, 0x6C	; 108
     538:	19 f4       	brne	.+6      	; 0x540 <vfprintf+0xe4>
     53a:	50 e8       	ldi	r21, 0x80	; 128
     53c:	f5 2a       	or	r15, r21
     53e:	02 c0       	rjmp	.+4      	; 0x544 <vfprintf+0xe8>
     540:	98 36       	cpi	r25, 0x68	; 104
     542:	49 f4       	brne	.+18     	; 0x556 <vfprintf+0xfa>
     544:	f2 01       	movw	r30, r4
     546:	23 fd       	sbrc	r18, 3
     548:	95 91       	lpm	r25, Z+
     54a:	23 ff       	sbrs	r18, 3
     54c:	91 91       	ld	r25, Z+
     54e:	2f 01       	movw	r4, r30
     550:	99 23       	and	r25, r25
     552:	09 f0       	breq	.+2      	; 0x556 <vfprintf+0xfa>
     554:	b8 cf       	rjmp	.-144    	; 0x4c6 <vfprintf+0x6a>
     556:	89 2f       	mov	r24, r25
     558:	85 54       	subi	r24, 0x45	; 69
     55a:	83 30       	cpi	r24, 0x03	; 3
     55c:	18 f0       	brcs	.+6      	; 0x564 <vfprintf+0x108>
     55e:	80 52       	subi	r24, 0x20	; 32
     560:	83 30       	cpi	r24, 0x03	; 3
     562:	38 f4       	brcc	.+14     	; 0x572 <vfprintf+0x116>
     564:	44 e0       	ldi	r20, 0x04	; 4
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	a4 0e       	add	r10, r20
     56a:	b5 1e       	adc	r11, r21
     56c:	5f e3       	ldi	r21, 0x3F	; 63
     56e:	59 83       	std	Y+1, r21	; 0x01
     570:	0f c0       	rjmp	.+30     	; 0x590 <vfprintf+0x134>
     572:	93 36       	cpi	r25, 0x63	; 99
     574:	31 f0       	breq	.+12     	; 0x582 <vfprintf+0x126>
     576:	93 37       	cpi	r25, 0x73	; 115
     578:	79 f0       	breq	.+30     	; 0x598 <vfprintf+0x13c>
     57a:	93 35       	cpi	r25, 0x53	; 83
     57c:	09 f0       	breq	.+2      	; 0x580 <vfprintf+0x124>
     57e:	56 c0       	rjmp	.+172    	; 0x62c <vfprintf+0x1d0>
     580:	20 c0       	rjmp	.+64     	; 0x5c2 <vfprintf+0x166>
     582:	f5 01       	movw	r30, r10
     584:	80 81       	ld	r24, Z
     586:	89 83       	std	Y+1, r24	; 0x01
     588:	42 e0       	ldi	r20, 0x02	; 2
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	a4 0e       	add	r10, r20
     58e:	b5 1e       	adc	r11, r21
     590:	61 01       	movw	r12, r2
     592:	01 e0       	ldi	r16, 0x01	; 1
     594:	10 e0       	ldi	r17, 0x00	; 0
     596:	12 c0       	rjmp	.+36     	; 0x5bc <vfprintf+0x160>
     598:	f5 01       	movw	r30, r10
     59a:	c0 80       	ld	r12, Z
     59c:	d1 80       	ldd	r13, Z+1	; 0x01
     59e:	f6 fc       	sbrc	r15, 6
     5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <vfprintf+0x14c>
     5a2:	6f ef       	ldi	r22, 0xFF	; 255
     5a4:	7f ef       	ldi	r23, 0xFF	; 255
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <vfprintf+0x150>
     5a8:	69 2d       	mov	r22, r9
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	42 e0       	ldi	r20, 0x02	; 2
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	a4 0e       	add	r10, r20
     5b2:	b5 1e       	adc	r11, r21
     5b4:	c6 01       	movw	r24, r12
     5b6:	0e 94 16 04 	call	0x82c	; 0x82c <strnlen>
     5ba:	8c 01       	movw	r16, r24
     5bc:	5f e7       	ldi	r21, 0x7F	; 127
     5be:	f5 22       	and	r15, r21
     5c0:	14 c0       	rjmp	.+40     	; 0x5ea <vfprintf+0x18e>
     5c2:	f5 01       	movw	r30, r10
     5c4:	c0 80       	ld	r12, Z
     5c6:	d1 80       	ldd	r13, Z+1	; 0x01
     5c8:	f6 fc       	sbrc	r15, 6
     5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <vfprintf+0x176>
     5cc:	6f ef       	ldi	r22, 0xFF	; 255
     5ce:	7f ef       	ldi	r23, 0xFF	; 255
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <vfprintf+0x17a>
     5d2:	69 2d       	mov	r22, r9
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	42 e0       	ldi	r20, 0x02	; 2
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	a4 0e       	add	r10, r20
     5dc:	b5 1e       	adc	r11, r21
     5de:	c6 01       	movw	r24, r12
     5e0:	0e 94 0b 04 	call	0x816	; 0x816 <strnlen_P>
     5e4:	8c 01       	movw	r16, r24
     5e6:	50 e8       	ldi	r21, 0x80	; 128
     5e8:	f5 2a       	or	r15, r21
     5ea:	f3 fe       	sbrs	r15, 3
     5ec:	07 c0       	rjmp	.+14     	; 0x5fc <vfprintf+0x1a0>
     5ee:	1a c0       	rjmp	.+52     	; 0x624 <vfprintf+0x1c8>
     5f0:	80 e2       	ldi	r24, 0x20	; 32
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	b3 01       	movw	r22, r6
     5f6:	0e 94 21 04 	call	0x842	; 0x842 <fputc>
     5fa:	ea 94       	dec	r14
     5fc:	8e 2d       	mov	r24, r14
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	08 17       	cp	r16, r24
     602:	19 07       	cpc	r17, r25
     604:	a8 f3       	brcs	.-22     	; 0x5f0 <vfprintf+0x194>
     606:	0e c0       	rjmp	.+28     	; 0x624 <vfprintf+0x1c8>
     608:	f6 01       	movw	r30, r12
     60a:	f7 fc       	sbrc	r15, 7
     60c:	85 91       	lpm	r24, Z+
     60e:	f7 fe       	sbrs	r15, 7
     610:	81 91       	ld	r24, Z+
     612:	6f 01       	movw	r12, r30
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	b3 01       	movw	r22, r6
     618:	0e 94 21 04 	call	0x842	; 0x842 <fputc>
     61c:	e1 10       	cpse	r14, r1
     61e:	ea 94       	dec	r14
     620:	01 50       	subi	r16, 0x01	; 1
     622:	10 40       	sbci	r17, 0x00	; 0
     624:	01 15       	cp	r16, r1
     626:	11 05       	cpc	r17, r1
     628:	79 f7       	brne	.-34     	; 0x608 <vfprintf+0x1ac>
     62a:	ea c0       	rjmp	.+468    	; 0x800 <vfprintf+0x3a4>
     62c:	94 36       	cpi	r25, 0x64	; 100
     62e:	11 f0       	breq	.+4      	; 0x634 <vfprintf+0x1d8>
     630:	99 36       	cpi	r25, 0x69	; 105
     632:	69 f5       	brne	.+90     	; 0x68e <vfprintf+0x232>
     634:	f7 fe       	sbrs	r15, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <vfprintf+0x1ec>
     638:	f5 01       	movw	r30, r10
     63a:	20 81       	ld	r18, Z
     63c:	31 81       	ldd	r19, Z+1	; 0x01
     63e:	42 81       	ldd	r20, Z+2	; 0x02
     640:	53 81       	ldd	r21, Z+3	; 0x03
     642:	84 e0       	ldi	r24, 0x04	; 4
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0a c0       	rjmp	.+20     	; 0x65c <vfprintf+0x200>
     648:	f5 01       	movw	r30, r10
     64a:	80 81       	ld	r24, Z
     64c:	91 81       	ldd	r25, Z+1	; 0x01
     64e:	9c 01       	movw	r18, r24
     650:	44 27       	eor	r20, r20
     652:	37 fd       	sbrc	r19, 7
     654:	40 95       	com	r20
     656:	54 2f       	mov	r21, r20
     658:	82 e0       	ldi	r24, 0x02	; 2
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	a8 0e       	add	r10, r24
     65e:	b9 1e       	adc	r11, r25
     660:	9f e6       	ldi	r25, 0x6F	; 111
     662:	f9 22       	and	r15, r25
     664:	57 ff       	sbrs	r21, 7
     666:	09 c0       	rjmp	.+18     	; 0x67a <vfprintf+0x21e>
     668:	50 95       	com	r21
     66a:	40 95       	com	r20
     66c:	30 95       	com	r19
     66e:	21 95       	neg	r18
     670:	3f 4f       	sbci	r19, 0xFF	; 255
     672:	4f 4f       	sbci	r20, 0xFF	; 255
     674:	5f 4f       	sbci	r21, 0xFF	; 255
     676:	e0 e8       	ldi	r30, 0x80	; 128
     678:	fe 2a       	or	r15, r30
     67a:	ca 01       	movw	r24, r20
     67c:	b9 01       	movw	r22, r18
     67e:	a1 01       	movw	r20, r2
     680:	2a e0       	ldi	r18, 0x0A	; 10
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	0e 94 4d 04 	call	0x89a	; 0x89a <__ultoa_invert>
     688:	d8 2e       	mov	r13, r24
     68a:	d2 18       	sub	r13, r2
     68c:	40 c0       	rjmp	.+128    	; 0x70e <vfprintf+0x2b2>
     68e:	95 37       	cpi	r25, 0x75	; 117
     690:	29 f4       	brne	.+10     	; 0x69c <vfprintf+0x240>
     692:	1f 2d       	mov	r17, r15
     694:	1f 7e       	andi	r17, 0xEF	; 239
     696:	2a e0       	ldi	r18, 0x0A	; 10
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	1d c0       	rjmp	.+58     	; 0x6d6 <vfprintf+0x27a>
     69c:	1f 2d       	mov	r17, r15
     69e:	19 7f       	andi	r17, 0xF9	; 249
     6a0:	9f 36       	cpi	r25, 0x6F	; 111
     6a2:	61 f0       	breq	.+24     	; 0x6bc <vfprintf+0x260>
     6a4:	90 37       	cpi	r25, 0x70	; 112
     6a6:	20 f4       	brcc	.+8      	; 0x6b0 <vfprintf+0x254>
     6a8:	98 35       	cpi	r25, 0x58	; 88
     6aa:	09 f0       	breq	.+2      	; 0x6ae <vfprintf+0x252>
     6ac:	ac c0       	rjmp	.+344    	; 0x806 <vfprintf+0x3aa>
     6ae:	0f c0       	rjmp	.+30     	; 0x6ce <vfprintf+0x272>
     6b0:	90 37       	cpi	r25, 0x70	; 112
     6b2:	39 f0       	breq	.+14     	; 0x6c2 <vfprintf+0x266>
     6b4:	98 37       	cpi	r25, 0x78	; 120
     6b6:	09 f0       	breq	.+2      	; 0x6ba <vfprintf+0x25e>
     6b8:	a6 c0       	rjmp	.+332    	; 0x806 <vfprintf+0x3aa>
     6ba:	04 c0       	rjmp	.+8      	; 0x6c4 <vfprintf+0x268>
     6bc:	28 e0       	ldi	r18, 0x08	; 8
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	0a c0       	rjmp	.+20     	; 0x6d6 <vfprintf+0x27a>
     6c2:	10 61       	ori	r17, 0x10	; 16
     6c4:	14 fd       	sbrc	r17, 4
     6c6:	14 60       	ori	r17, 0x04	; 4
     6c8:	20 e1       	ldi	r18, 0x10	; 16
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <vfprintf+0x27a>
     6ce:	14 fd       	sbrc	r17, 4
     6d0:	16 60       	ori	r17, 0x06	; 6
     6d2:	20 e1       	ldi	r18, 0x10	; 16
     6d4:	32 e0       	ldi	r19, 0x02	; 2
     6d6:	17 ff       	sbrs	r17, 7
     6d8:	08 c0       	rjmp	.+16     	; 0x6ea <vfprintf+0x28e>
     6da:	f5 01       	movw	r30, r10
     6dc:	60 81       	ld	r22, Z
     6de:	71 81       	ldd	r23, Z+1	; 0x01
     6e0:	82 81       	ldd	r24, Z+2	; 0x02
     6e2:	93 81       	ldd	r25, Z+3	; 0x03
     6e4:	44 e0       	ldi	r20, 0x04	; 4
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	08 c0       	rjmp	.+16     	; 0x6fa <vfprintf+0x29e>
     6ea:	f5 01       	movw	r30, r10
     6ec:	80 81       	ld	r24, Z
     6ee:	91 81       	ldd	r25, Z+1	; 0x01
     6f0:	bc 01       	movw	r22, r24
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	42 e0       	ldi	r20, 0x02	; 2
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	a4 0e       	add	r10, r20
     6fc:	b5 1e       	adc	r11, r21
     6fe:	a1 01       	movw	r20, r2
     700:	0e 94 4d 04 	call	0x89a	; 0x89a <__ultoa_invert>
     704:	d8 2e       	mov	r13, r24
     706:	d2 18       	sub	r13, r2
     708:	8f e7       	ldi	r24, 0x7F	; 127
     70a:	f8 2e       	mov	r15, r24
     70c:	f1 22       	and	r15, r17
     70e:	f6 fe       	sbrs	r15, 6
     710:	0b c0       	rjmp	.+22     	; 0x728 <vfprintf+0x2cc>
     712:	5e ef       	ldi	r21, 0xFE	; 254
     714:	f5 22       	and	r15, r21
     716:	d9 14       	cp	r13, r9
     718:	38 f4       	brcc	.+14     	; 0x728 <vfprintf+0x2cc>
     71a:	f4 fe       	sbrs	r15, 4
     71c:	07 c0       	rjmp	.+14     	; 0x72c <vfprintf+0x2d0>
     71e:	f2 fc       	sbrc	r15, 2
     720:	05 c0       	rjmp	.+10     	; 0x72c <vfprintf+0x2d0>
     722:	8f ee       	ldi	r24, 0xEF	; 239
     724:	f8 22       	and	r15, r24
     726:	02 c0       	rjmp	.+4      	; 0x72c <vfprintf+0x2d0>
     728:	1d 2d       	mov	r17, r13
     72a:	01 c0       	rjmp	.+2      	; 0x72e <vfprintf+0x2d2>
     72c:	19 2d       	mov	r17, r9
     72e:	f4 fe       	sbrs	r15, 4
     730:	0d c0       	rjmp	.+26     	; 0x74c <vfprintf+0x2f0>
     732:	fe 01       	movw	r30, r28
     734:	ed 0d       	add	r30, r13
     736:	f1 1d       	adc	r31, r1
     738:	80 81       	ld	r24, Z
     73a:	80 33       	cpi	r24, 0x30	; 48
     73c:	19 f4       	brne	.+6      	; 0x744 <vfprintf+0x2e8>
     73e:	99 ee       	ldi	r25, 0xE9	; 233
     740:	f9 22       	and	r15, r25
     742:	08 c0       	rjmp	.+16     	; 0x754 <vfprintf+0x2f8>
     744:	1f 5f       	subi	r17, 0xFF	; 255
     746:	f2 fe       	sbrs	r15, 2
     748:	05 c0       	rjmp	.+10     	; 0x754 <vfprintf+0x2f8>
     74a:	03 c0       	rjmp	.+6      	; 0x752 <vfprintf+0x2f6>
     74c:	8f 2d       	mov	r24, r15
     74e:	86 78       	andi	r24, 0x86	; 134
     750:	09 f0       	breq	.+2      	; 0x754 <vfprintf+0x2f8>
     752:	1f 5f       	subi	r17, 0xFF	; 255
     754:	0f 2d       	mov	r16, r15
     756:	f3 fc       	sbrc	r15, 3
     758:	14 c0       	rjmp	.+40     	; 0x782 <vfprintf+0x326>
     75a:	f0 fe       	sbrs	r15, 0
     75c:	0f c0       	rjmp	.+30     	; 0x77c <vfprintf+0x320>
     75e:	1e 15       	cp	r17, r14
     760:	10 f0       	brcs	.+4      	; 0x766 <vfprintf+0x30a>
     762:	9d 2c       	mov	r9, r13
     764:	0b c0       	rjmp	.+22     	; 0x77c <vfprintf+0x320>
     766:	9d 2c       	mov	r9, r13
     768:	9e 0c       	add	r9, r14
     76a:	91 1a       	sub	r9, r17
     76c:	1e 2d       	mov	r17, r14
     76e:	06 c0       	rjmp	.+12     	; 0x77c <vfprintf+0x320>
     770:	80 e2       	ldi	r24, 0x20	; 32
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	b3 01       	movw	r22, r6
     776:	0e 94 21 04 	call	0x842	; 0x842 <fputc>
     77a:	1f 5f       	subi	r17, 0xFF	; 255
     77c:	1e 15       	cp	r17, r14
     77e:	c0 f3       	brcs	.-16     	; 0x770 <vfprintf+0x314>
     780:	04 c0       	rjmp	.+8      	; 0x78a <vfprintf+0x32e>
     782:	1e 15       	cp	r17, r14
     784:	10 f4       	brcc	.+4      	; 0x78a <vfprintf+0x32e>
     786:	e1 1a       	sub	r14, r17
     788:	01 c0       	rjmp	.+2      	; 0x78c <vfprintf+0x330>
     78a:	ee 24       	eor	r14, r14
     78c:	04 ff       	sbrs	r16, 4
     78e:	0f c0       	rjmp	.+30     	; 0x7ae <vfprintf+0x352>
     790:	80 e3       	ldi	r24, 0x30	; 48
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	b3 01       	movw	r22, r6
     796:	0e 94 21 04 	call	0x842	; 0x842 <fputc>
     79a:	02 ff       	sbrs	r16, 2
     79c:	1d c0       	rjmp	.+58     	; 0x7d8 <vfprintf+0x37c>
     79e:	01 fd       	sbrc	r16, 1
     7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <vfprintf+0x34c>
     7a2:	88 e7       	ldi	r24, 0x78	; 120
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e c0       	rjmp	.+28     	; 0x7c4 <vfprintf+0x368>
     7a8:	88 e5       	ldi	r24, 0x58	; 88
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0b c0       	rjmp	.+22     	; 0x7c4 <vfprintf+0x368>
     7ae:	80 2f       	mov	r24, r16
     7b0:	86 78       	andi	r24, 0x86	; 134
     7b2:	91 f0       	breq	.+36     	; 0x7d8 <vfprintf+0x37c>
     7b4:	01 ff       	sbrs	r16, 1
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <vfprintf+0x360>
     7b8:	8b e2       	ldi	r24, 0x2B	; 43
     7ba:	01 c0       	rjmp	.+2      	; 0x7be <vfprintf+0x362>
     7bc:	80 e2       	ldi	r24, 0x20	; 32
     7be:	f7 fc       	sbrc	r15, 7
     7c0:	8d e2       	ldi	r24, 0x2D	; 45
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	b3 01       	movw	r22, r6
     7c6:	0e 94 21 04 	call	0x842	; 0x842 <fputc>
     7ca:	06 c0       	rjmp	.+12     	; 0x7d8 <vfprintf+0x37c>
     7cc:	80 e3       	ldi	r24, 0x30	; 48
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	b3 01       	movw	r22, r6
     7d2:	0e 94 21 04 	call	0x842	; 0x842 <fputc>
     7d6:	9a 94       	dec	r9
     7d8:	d9 14       	cp	r13, r9
     7da:	c0 f3       	brcs	.-16     	; 0x7cc <vfprintf+0x370>
     7dc:	da 94       	dec	r13
     7de:	f1 01       	movw	r30, r2
     7e0:	ed 0d       	add	r30, r13
     7e2:	f1 1d       	adc	r31, r1
     7e4:	80 81       	ld	r24, Z
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	b3 01       	movw	r22, r6
     7ea:	0e 94 21 04 	call	0x842	; 0x842 <fputc>
     7ee:	dd 20       	and	r13, r13
     7f0:	a9 f7       	brne	.-22     	; 0x7dc <vfprintf+0x380>
     7f2:	06 c0       	rjmp	.+12     	; 0x800 <vfprintf+0x3a4>
     7f4:	80 e2       	ldi	r24, 0x20	; 32
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	b3 01       	movw	r22, r6
     7fa:	0e 94 21 04 	call	0x842	; 0x842 <fputc>
     7fe:	ea 94       	dec	r14
     800:	ee 20       	and	r14, r14
     802:	c1 f7       	brne	.-16     	; 0x7f4 <vfprintf+0x398>
     804:	43 ce       	rjmp	.-890    	; 0x48c <vfprintf+0x30>
     806:	f3 01       	movw	r30, r6
     808:	66 81       	ldd	r22, Z+6	; 0x06
     80a:	77 81       	ldd	r23, Z+7	; 0x07
     80c:	cb 01       	movw	r24, r22
     80e:	2b 96       	adiw	r28, 0x0b	; 11
     810:	e2 e1       	ldi	r30, 0x12	; 18
     812:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <__epilogue_restores__>

00000816 <strnlen_P>:
     816:	fc 01       	movw	r30, r24
     818:	05 90       	lpm	r0, Z+
     81a:	61 50       	subi	r22, 0x01	; 1
     81c:	70 40       	sbci	r23, 0x00	; 0
     81e:	01 10       	cpse	r0, r1
     820:	d8 f7       	brcc	.-10     	; 0x818 <strnlen_P+0x2>
     822:	80 95       	com	r24
     824:	90 95       	com	r25
     826:	8e 0f       	add	r24, r30
     828:	9f 1f       	adc	r25, r31
     82a:	08 95       	ret

0000082c <strnlen>:
     82c:	fc 01       	movw	r30, r24
     82e:	61 50       	subi	r22, 0x01	; 1
     830:	70 40       	sbci	r23, 0x00	; 0
     832:	01 90       	ld	r0, Z+
     834:	01 10       	cpse	r0, r1
     836:	d8 f7       	brcc	.-10     	; 0x82e <strnlen+0x2>
     838:	80 95       	com	r24
     83a:	90 95       	com	r25
     83c:	8e 0f       	add	r24, r30
     83e:	9f 1f       	adc	r25, r31
     840:	08 95       	ret

00000842 <fputc>:
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	8c 01       	movw	r16, r24
     84c:	eb 01       	movw	r28, r22
     84e:	8b 81       	ldd	r24, Y+3	; 0x03
     850:	81 ff       	sbrs	r24, 1
     852:	1b c0       	rjmp	.+54     	; 0x88a <__stack+0x2b>
     854:	82 ff       	sbrs	r24, 2
     856:	0d c0       	rjmp	.+26     	; 0x872 <__stack+0x13>
     858:	2e 81       	ldd	r18, Y+6	; 0x06
     85a:	3f 81       	ldd	r19, Y+7	; 0x07
     85c:	8c 81       	ldd	r24, Y+4	; 0x04
     85e:	9d 81       	ldd	r25, Y+5	; 0x05
     860:	28 17       	cp	r18, r24
     862:	39 07       	cpc	r19, r25
     864:	64 f4       	brge	.+24     	; 0x87e <__stack+0x1f>
     866:	e8 81       	ld	r30, Y
     868:	f9 81       	ldd	r31, Y+1	; 0x01
     86a:	01 93       	st	Z+, r16
     86c:	f9 83       	std	Y+1, r31	; 0x01
     86e:	e8 83       	st	Y, r30
     870:	06 c0       	rjmp	.+12     	; 0x87e <__stack+0x1f>
     872:	e8 85       	ldd	r30, Y+8	; 0x08
     874:	f9 85       	ldd	r31, Y+9	; 0x09
     876:	80 2f       	mov	r24, r16
     878:	09 95       	icall
     87a:	89 2b       	or	r24, r25
     87c:	31 f4       	brne	.+12     	; 0x88a <__stack+0x2b>
     87e:	8e 81       	ldd	r24, Y+6	; 0x06
     880:	9f 81       	ldd	r25, Y+7	; 0x07
     882:	01 96       	adiw	r24, 0x01	; 1
     884:	9f 83       	std	Y+7, r25	; 0x07
     886:	8e 83       	std	Y+6, r24	; 0x06
     888:	02 c0       	rjmp	.+4      	; 0x88e <__stack+0x2f>
     88a:	0f ef       	ldi	r16, 0xFF	; 255
     88c:	1f ef       	ldi	r17, 0xFF	; 255
     88e:	c8 01       	movw	r24, r16
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	08 95       	ret

0000089a <__ultoa_invert>:
     89a:	fa 01       	movw	r30, r20
     89c:	aa 27       	eor	r26, r26
     89e:	28 30       	cpi	r18, 0x08	; 8
     8a0:	51 f1       	breq	.+84     	; 0x8f6 <__ultoa_invert+0x5c>
     8a2:	20 31       	cpi	r18, 0x10	; 16
     8a4:	81 f1       	breq	.+96     	; 0x906 <__ultoa_invert+0x6c>
     8a6:	e8 94       	clt
     8a8:	6f 93       	push	r22
     8aa:	6e 7f       	andi	r22, 0xFE	; 254
     8ac:	6e 5f       	subi	r22, 0xFE	; 254
     8ae:	7f 4f       	sbci	r23, 0xFF	; 255
     8b0:	8f 4f       	sbci	r24, 0xFF	; 255
     8b2:	9f 4f       	sbci	r25, 0xFF	; 255
     8b4:	af 4f       	sbci	r26, 0xFF	; 255
     8b6:	b1 e0       	ldi	r27, 0x01	; 1
     8b8:	3e d0       	rcall	.+124    	; 0x936 <__ultoa_invert+0x9c>
     8ba:	b4 e0       	ldi	r27, 0x04	; 4
     8bc:	3c d0       	rcall	.+120    	; 0x936 <__ultoa_invert+0x9c>
     8be:	67 0f       	add	r22, r23
     8c0:	78 1f       	adc	r23, r24
     8c2:	89 1f       	adc	r24, r25
     8c4:	9a 1f       	adc	r25, r26
     8c6:	a1 1d       	adc	r26, r1
     8c8:	68 0f       	add	r22, r24
     8ca:	79 1f       	adc	r23, r25
     8cc:	8a 1f       	adc	r24, r26
     8ce:	91 1d       	adc	r25, r1
     8d0:	a1 1d       	adc	r26, r1
     8d2:	6a 0f       	add	r22, r26
     8d4:	71 1d       	adc	r23, r1
     8d6:	81 1d       	adc	r24, r1
     8d8:	91 1d       	adc	r25, r1
     8da:	a1 1d       	adc	r26, r1
     8dc:	20 d0       	rcall	.+64     	; 0x91e <__ultoa_invert+0x84>
     8de:	09 f4       	brne	.+2      	; 0x8e2 <__ultoa_invert+0x48>
     8e0:	68 94       	set
     8e2:	3f 91       	pop	r19
     8e4:	2a e0       	ldi	r18, 0x0A	; 10
     8e6:	26 9f       	mul	r18, r22
     8e8:	11 24       	eor	r1, r1
     8ea:	30 19       	sub	r19, r0
     8ec:	30 5d       	subi	r19, 0xD0	; 208
     8ee:	31 93       	st	Z+, r19
     8f0:	de f6       	brtc	.-74     	; 0x8a8 <__ultoa_invert+0xe>
     8f2:	cf 01       	movw	r24, r30
     8f4:	08 95       	ret
     8f6:	46 2f       	mov	r20, r22
     8f8:	47 70       	andi	r20, 0x07	; 7
     8fa:	40 5d       	subi	r20, 0xD0	; 208
     8fc:	41 93       	st	Z+, r20
     8fe:	b3 e0       	ldi	r27, 0x03	; 3
     900:	0f d0       	rcall	.+30     	; 0x920 <__ultoa_invert+0x86>
     902:	c9 f7       	brne	.-14     	; 0x8f6 <__ultoa_invert+0x5c>
     904:	f6 cf       	rjmp	.-20     	; 0x8f2 <__ultoa_invert+0x58>
     906:	46 2f       	mov	r20, r22
     908:	4f 70       	andi	r20, 0x0F	; 15
     90a:	40 5d       	subi	r20, 0xD0	; 208
     90c:	4a 33       	cpi	r20, 0x3A	; 58
     90e:	18 f0       	brcs	.+6      	; 0x916 <__ultoa_invert+0x7c>
     910:	49 5d       	subi	r20, 0xD9	; 217
     912:	31 fd       	sbrc	r19, 1
     914:	40 52       	subi	r20, 0x20	; 32
     916:	41 93       	st	Z+, r20
     918:	02 d0       	rcall	.+4      	; 0x91e <__ultoa_invert+0x84>
     91a:	a9 f7       	brne	.-22     	; 0x906 <__ultoa_invert+0x6c>
     91c:	ea cf       	rjmp	.-44     	; 0x8f2 <__ultoa_invert+0x58>
     91e:	b4 e0       	ldi	r27, 0x04	; 4
     920:	a6 95       	lsr	r26
     922:	97 95       	ror	r25
     924:	87 95       	ror	r24
     926:	77 95       	ror	r23
     928:	67 95       	ror	r22
     92a:	ba 95       	dec	r27
     92c:	c9 f7       	brne	.-14     	; 0x920 <__ultoa_invert+0x86>
     92e:	00 97       	sbiw	r24, 0x00	; 0
     930:	61 05       	cpc	r22, r1
     932:	71 05       	cpc	r23, r1
     934:	08 95       	ret
     936:	9b 01       	movw	r18, r22
     938:	ac 01       	movw	r20, r24
     93a:	0a 2e       	mov	r0, r26
     93c:	06 94       	lsr	r0
     93e:	57 95       	ror	r21
     940:	47 95       	ror	r20
     942:	37 95       	ror	r19
     944:	27 95       	ror	r18
     946:	ba 95       	dec	r27
     948:	c9 f7       	brne	.-14     	; 0x93c <__ultoa_invert+0xa2>
     94a:	62 0f       	add	r22, r18
     94c:	73 1f       	adc	r23, r19
     94e:	84 1f       	adc	r24, r20
     950:	95 1f       	adc	r25, r21
     952:	a0 1d       	adc	r26, r0
     954:	08 95       	ret

00000956 <delay_ms>:
uchar buf[80];

/**
 * Some basic delay function
 */
void delay_ms(unsigned short ms) {
     956:	df 93       	push	r29
     958:	cf 93       	push	r28
     95a:	00 d0       	rcall	.+0      	; 0x95c <delay_ms+0x6>
     95c:	00 d0       	rcall	.+0      	; 0x95e <delay_ms+0x8>
     95e:	00 d0       	rcall	.+0      	; 0x960 <delay_ms+0xa>
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	9e 83       	std	Y+6, r25	; 0x06
     966:	8d 83       	std	Y+5, r24	; 0x05
	unsigned short outer1, outer2;
	outer1 = 200 * 12;
     968:	80 e6       	ldi	r24, 0x60	; 96
     96a:	99 e0       	ldi	r25, 0x09	; 9
     96c:	9c 83       	std	Y+4, r25	; 0x04
     96e:	8b 83       	std	Y+3, r24	; 0x03
     970:	1c c0       	rjmp	.+56     	; 0x9aa <delay_ms+0x54>

	while (outer1) {
		outer2 = 100;
     972:	84 e6       	ldi	r24, 0x64	; 100
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	9a 83       	std	Y+2, r25	; 0x02
     978:	89 83       	std	Y+1, r24	; 0x01
     97a:	0e c0       	rjmp	.+28     	; 0x998 <delay_ms+0x42>
		while (outer2) {
			while (ms)
				ms--;
     97c:	8d 81       	ldd	r24, Y+5	; 0x05
     97e:	9e 81       	ldd	r25, Y+6	; 0x06
     980:	01 97       	sbiw	r24, 0x01	; 1
     982:	9e 83       	std	Y+6, r25	; 0x06
     984:	8d 83       	std	Y+5, r24	; 0x05
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
			while (ms)
     986:	8d 81       	ldd	r24, Y+5	; 0x05
     988:	9e 81       	ldd	r25, Y+6	; 0x06
     98a:	00 97       	sbiw	r24, 0x00	; 0
     98c:	b9 f7       	brne	.-18     	; 0x97c <delay_ms+0x26>
				ms--;
			outer2--;
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	9a 81       	ldd	r25, Y+2	; 0x02
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	9a 83       	std	Y+2, r25	; 0x02
     996:	89 83       	std	Y+1, r24	; 0x01
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	9a 81       	ldd	r25, Y+2	; 0x02
     99c:	00 97       	sbiw	r24, 0x00	; 0
     99e:	99 f7       	brne	.-26     	; 0x986 <delay_ms+0x30>
			while (ms)
				ms--;
			outer2--;
		}
		outer1--;
     9a0:	8b 81       	ldd	r24, Y+3	; 0x03
     9a2:	9c 81       	ldd	r25, Y+4	; 0x04
     9a4:	01 97       	sbiw	r24, 0x01	; 1
     9a6:	9c 83       	std	Y+4, r25	; 0x04
     9a8:	8b 83       	std	Y+3, r24	; 0x03
 */
void delay_ms(unsigned short ms) {
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
     9aa:	8b 81       	ldd	r24, Y+3	; 0x03
     9ac:	9c 81       	ldd	r25, Y+4	; 0x04
     9ae:	00 97       	sbiw	r24, 0x00	; 0
     9b0:	01 f7       	brne	.-64     	; 0x972 <delay_ms+0x1c>
				ms--;
			outer2--;
		}
		outer1--;
	}
}
     9b2:	26 96       	adiw	r28, 0x06	; 6
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	cd bf       	out	0x3d, r28	; 61
     9be:	cf 91       	pop	r28
     9c0:	df 91       	pop	r29
     9c2:	08 95       	ret

000009c4 <gpib_init>:
 * Init GPIB pins and variables.
 * \brief All signal lines not related to the controller part
 * 		are initialized with useful values.
 *		(The controller part initialization is done on gpib_controller_assert())
 */
void gpib_init(void) {
     9c4:	df 93       	push	r29
     9c6:	cf 93       	push	r28
     9c8:	cd b7       	in	r28, 0x3d	; 61
     9ca:	de b7       	in	r29, 0x3e	; 62
	// data lines - complete port A as input
	DDRA = 0x00;
     9cc:	ea e3       	ldi	r30, 0x3A	; 58
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	10 82       	st	Z, r1

	// handshake lines - on port D , everything as input
	DDRD &= ~_BV(G_DAV); // DAV 
     9d2:	a1 e3       	ldi	r26, 0x31	; 49
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	e1 e3       	ldi	r30, 0x31	; 49
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	80 81       	ld	r24, Z
     9dc:	8b 7f       	andi	r24, 0xFB	; 251
     9de:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_EOI); // EOI 
     9e0:	a1 e3       	ldi	r26, 0x31	; 49
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	e1 e3       	ldi	r30, 0x31	; 49
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	80 81       	ld	r24, Z
     9ea:	8f 7e       	andi	r24, 0xEF	; 239
     9ec:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_SRQ); // SRQ 
     9ee:	a1 e3       	ldi	r26, 0x31	; 49
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	e1 e3       	ldi	r30, 0x31	; 49
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	80 81       	ld	r24, Z
     9f8:	8f 7b       	andi	r24, 0xBF	; 191
     9fa:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_ATN); // ATN  
     9fc:	a1 e3       	ldi	r26, 0x31	; 49
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	e1 e3       	ldi	r30, 0x31	; 49
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	8f 77       	andi	r24, 0x7F	; 127
     a08:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_REN); // REN  
     a0a:	a7 e3       	ldi	r26, 0x37	; 55
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	e7 e3       	ldi	r30, 0x37	; 55
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	8d 7f       	andi	r24, 0xFD	; 253
     a16:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_IFC); // IFC  
     a18:	a7 e3       	ldi	r26, 0x37	; 55
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	e7 e3       	ldi	r30, 0x37	; 55
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
     a22:	8e 7f       	andi	r24, 0xFE	; 254
     a24:	8c 93       	st	X, r24

	// init handshake lines
	assign_bit(DDRD, PORTD, G_NRFD);
     a26:	a2 e3       	ldi	r26, 0x32	; 50
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	e2 e3       	ldi	r30, 0x32	; 50
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 81       	ld	r24, Z
     a30:	87 7f       	andi	r24, 0xF7	; 247
     a32:	8c 93       	st	X, r24
     a34:	a1 e3       	ldi	r26, 0x31	; 49
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	e1 e3       	ldi	r30, 0x31	; 49
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	88 60       	ori	r24, 0x08	; 8
     a40:	8c 93       	st	X, r24
     a42:	a2 e3       	ldi	r26, 0x32	; 50
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e2 e3       	ldi	r30, 0x32	; 50
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	87 7f       	andi	r24, 0xF7	; 247
     a4e:	8c 93       	st	X, r24
	// not ready for data now
	release_bit(DDRD, PORTD, G_NDAC);
     a50:	a1 e3       	ldi	r26, 0x31	; 49
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	e1 e3       	ldi	r30, 0x31	; 49
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	80 81       	ld	r24, Z
     a5a:	8f 7d       	andi	r24, 0xDF	; 223
     a5c:	8c 93       	st	X, r24
     a5e:	a2 e3       	ldi	r26, 0x32	; 50
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	e2 e3       	ldi	r30, 0x32	; 50
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	80 81       	ld	r24, Z
     a68:	80 62       	ori	r24, 0x20	; 32
     a6a:	8c 93       	st	X, r24
	// initially: ok so far
}
     a6c:	cf 91       	pop	r28
     a6e:	df 91       	pop	r29
     a70:	08 95       	ret

00000a72 <gpib_prepare_write>:

/**
 * Prepare partner for writing
 */
void gpib_prepare_write() {
     a72:	df 93       	push	r29
     a74:	cf 93       	push	r28
     a76:	cd b7       	in	r28, 0x3d	; 61
     a78:	de b7       	in	r29, 0x3e	; 62
     a7a:	28 97       	sbiw	r28, 0x08	; 8
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	// untalk/unlisten all partbners
	gpib_untalkUnlisten();
     a86:	0e 94 a7 05 	call	0xb4e	; 0xb4e <gpib_untalkUnlisten>
	// set device to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_partner_pad());
     a8a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <gpib_get_partner_pad>
     a8e:	80 5e       	subi	r24, 0xE0	; 224
     a90:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     a92:	ce 01       	movw	r24, r28
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	61 e0       	ldi	r22, 0x01	; 1
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	0e 94 4b 07 	call	0xe96	; 0xe96 <gpib_cmd>
	// send secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
     a9e:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <gpib_get_partner_sad>
     aa2:	8f 3f       	cpi	r24, 0xFF	; 255
     aa4:	51 f0       	breq	.+20     	; 0xaba <gpib_prepare_write+0x48>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
     aa6:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <gpib_get_partner_sad>
     aaa:	80 66       	ori	r24, 0x60	; 96
     aac:	89 83       	std	Y+1, r24	; 0x01
		gpib_cmd(controlString, 1);
     aae:	ce 01       	movw	r24, r28
     ab0:	01 96       	adiw	r24, 0x01	; 1
     ab2:	61 e0       	ldi	r22, 0x01	; 1
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	0e 94 4b 07 	call	0xe96	; 0xe96 <gpib_cmd>
	}
	// set myself (controller) to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_address());
     aba:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <gpib_get_address>
     abe:	80 5c       	subi	r24, 0xC0	; 192
     ac0:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     ac2:	ce 01       	movw	r24, r28
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	61 e0       	ldi	r22, 0x01	; 1
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	0e 94 4b 07 	call	0xe96	; 0xe96 <gpib_cmd>
}
     ace:	28 96       	adiw	r28, 0x08	; 8
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
     ada:	cf 91       	pop	r28
     adc:	df 91       	pop	r29
     ade:	08 95       	ret

00000ae0 <gpib_prepare_read>:

/**
 * Prepare partner for writing
 */
void gpib_prepare_read() {
     ae0:	df 93       	push	r29
     ae2:	cf 93       	push	r28
     ae4:	cd b7       	in	r28, 0x3d	; 61
     ae6:	de b7       	in	r29, 0x3e	; 62
     ae8:	28 97       	sbiw	r28, 0x08	; 8
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// untalk/unlisten all partbners
	gpib_untalkUnlisten();
     af4:	0e 94 a7 05 	call	0xb4e	; 0xb4e <gpib_untalkUnlisten>
	// set myself (controller) to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_address());
     af8:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <gpib_get_address>
     afc:	80 5e       	subi	r24, 0xE0	; 224
     afe:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     b00:	ce 01       	movw	r24, r28
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	61 e0       	ldi	r22, 0x01	; 1
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	0e 94 4b 07 	call	0xe96	; 0xe96 <gpib_cmd>
	// set device to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_partner_pad());
     b0c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <gpib_get_partner_pad>
     b10:	80 5c       	subi	r24, 0xC0	; 192
     b12:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     b14:	ce 01       	movw	r24, r28
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	61 e0       	ldi	r22, 0x01	; 1
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	0e 94 4b 07 	call	0xe96	; 0xe96 <gpib_cmd>
	// secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
     b20:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <gpib_get_partner_sad>
     b24:	8f 3f       	cpi	r24, 0xFF	; 255
     b26:	51 f0       	breq	.+20     	; 0xb3c <gpib_prepare_read+0x5c>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
     b28:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <gpib_get_partner_sad>
     b2c:	80 66       	ori	r24, 0x60	; 96
     b2e:	89 83       	std	Y+1, r24	; 0x01
		gpib_cmd(controlString, 1);
     b30:	ce 01       	movw	r24, r28
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	61 e0       	ldi	r22, 0x01	; 1
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	0e 94 4b 07 	call	0xe96	; 0xe96 <gpib_cmd>
	}
}
     b3c:	28 96       	adiw	r28, 0x08	; 8
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	f8 94       	cli
     b42:	de bf       	out	0x3e, r29	; 62
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	cd bf       	out	0x3d, r28	; 61
     b48:	cf 91       	pop	r28
     b4a:	df 91       	pop	r29
     b4c:	08 95       	ret

00000b4e <gpib_untalkUnlisten>:

/**
 * Untalk / unlisten all partners on bus.
 */
void gpib_untalkUnlisten() {
     b4e:	df 93       	push	r29
     b50:	cf 93       	push	r28
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	28 97       	sbiw	r28, 0x08	; 8
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
     b62:	8f e5       	ldi	r24, 0x5F	; 95
     b64:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     b66:	ce 01       	movw	r24, r28
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	61 e0       	ldi	r22, 0x01	; 1
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	0e 94 4b 07 	call	0xe96	; 0xe96 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
     b72:	8f e3       	ldi	r24, 0x3F	; 63
     b74:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	61 e0       	ldi	r22, 0x01	; 1
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	0e 94 4b 07 	call	0xe96	; 0xe96 <gpib_cmd>
}
     b82:	28 96       	adiw	r28, 0x08	; 8
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61
     b8e:	cf 91       	pop	r28
     b90:	df 91       	pop	r29
     b92:	08 95       	ret

00000b94 <gpib_receive>:
 *  \returns		On any error, 0xff is returned. in this case, the value of parameter *_byte is undefined.
 * 		Otherwise the value of the EOI signal line during read is returned. If EOI was assigned, a 0x01 is
 * 		returned. If EOI was not assigned, a 0x00 is returned. Assignment of EOI means that the talker
 * 		is sending the last character for this transmission.
 */
uchar gpib_receive(uchar* _byte) {
     b94:	df 93       	push	r29
     b96:	cf 93       	push	r28
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	27 97       	sbiw	r28, 0x07	; 7
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	cd bf       	out	0x3d, r28	; 61
     ba8:	9e 83       	std	Y+6, r25	; 0x06
     baa:	8d 83       	std	Y+5, r24	; 0x05
	int timeout;
	uchar byte, eoi;

	//uart_puts("\n\rgpib_receive()\n\r");

	if (controller.talks == 1) {
     bac:	80 91 9b 04 	lds	r24, 0x049B
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	39 f4       	brne	.+14     	; 0xbc2 <gpib_receive+0x2e>
		*_byte = 0xff;
     bb4:	ed 81       	ldd	r30, Y+5	; 0x05
     bb6:	fe 81       	ldd	r31, Y+6	; 0x06
     bb8:	8f ef       	ldi	r24, 0xFF	; 255
     bba:	80 83       	st	Z, r24
		return 0xff;
     bbc:	8f ef       	ldi	r24, 0xFF	; 255
     bbe:	8f 83       	std	Y+7, r24	; 0x07
     bc0:	c6 c0       	rjmp	.+396    	; 0xd4e <gpib_receive+0x1ba>
	}

	// handshake: set nrfd, means i am ready to receive some data
	release_bit(DDRD, PORTD, G_NRFD);
     bc2:	a1 e3       	ldi	r26, 0x31	; 49
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e1 e3       	ldi	r30, 0x31	; 49
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	87 7f       	andi	r24, 0xF7	; 247
     bce:	8c 93       	st	X, r24
     bd0:	a2 e3       	ldi	r26, 0x32	; 50
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e2 e3       	ldi	r30, 0x32	; 50
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	88 60       	ori	r24, 0x08	; 8
     bdc:	8c 93       	st	X, r24
	assign_bit(DDRD, PORTD, G_NDAC);
     bde:	a2 e3       	ldi	r26, 0x32	; 50
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e2 e3       	ldi	r30, 0x32	; 50
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	8f 7d       	andi	r24, 0xDF	; 223
     bea:	8c 93       	st	X, r24
     bec:	a1 e3       	ldi	r26, 0x31	; 49
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e1 e3       	ldi	r30, 0x31	; 49
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	80 62       	ori	r24, 0x20	; 32
     bf8:	8c 93       	st	X, r24
     bfa:	a2 e3       	ldi	r26, 0x32	; 50
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e2 e3       	ldi	r30, 0x32	; 50
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	8f 7d       	andi	r24, 0xDF	; 223
     c06:	8c 93       	st	X, r24

	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     c08:	80 91 05 06 	lds	r24, 0x0605
     c0c:	88 2f       	mov	r24, r24
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	05 96       	adiw	r24, 0x05	; 5
     c12:	9c 83       	std	Y+4, r25	; 0x04
     c14:	8b 83       	std	Y+3, r24	; 0x03
     c16:	10 c0       	rjmp	.+32     	; 0xc38 <gpib_receive+0xa4>
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     c18:	80 91 05 06 	lds	r24, 0x0605
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	9c 81       	ldd	r25, Y+4	; 0x04
     c24:	28 17       	cp	r18, r24
     c26:	39 07       	cpc	r19, r25
     c28:	39 f4       	brne	.+14     	; 0xc38 <gpib_receive+0xa4>
			uart_puts("\n\rError: DAV timeout (1)\n\r");
     c2a:	80 e6       	ldi	r24, 0x60	; 96
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
			return 0xff;
     c32:	8f ef       	ldi	r24, 0xFF	; 255
     c34:	8f 83       	std	Y+7, r24	; 0x07
     c36:	8b c0       	rjmp	.+278    	; 0xd4e <gpib_receive+0x1ba>
	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
     c38:	e0 e3       	ldi	r30, 0x30	; 48
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	88 2f       	mov	r24, r24
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	84 70       	andi	r24, 0x04	; 4
     c44:	90 70       	andi	r25, 0x00	; 0
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	49 f0       	breq	.+18     	; 0xc5c <gpib_receive+0xc8>
     c4a:	80 91 05 06 	lds	r24, 0x0605
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	9c 81       	ldd	r25, Y+4	; 0x04
     c56:	82 17       	cp	r24, r18
     c58:	93 07       	cpc	r25, r19
     c5a:	f4 f6       	brge	.-68     	; 0xc18 <gpib_receive+0x84>
#else
	loop_until_bit_is_clear(PIND,G_DAV);
#endif

	// handshake: clear NRFD, means i am busy now to read data
	assign_bit(DDRD, PORTD, G_NRFD);
     c5c:	a2 e3       	ldi	r26, 0x32	; 50
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e2 e3       	ldi	r30, 0x32	; 50
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	87 7f       	andi	r24, 0xF7	; 247
     c68:	8c 93       	st	X, r24
     c6a:	a1 e3       	ldi	r26, 0x31	; 49
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e1 e3       	ldi	r30, 0x31	; 49
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	88 60       	ori	r24, 0x08	; 8
     c76:	8c 93       	st	X, r24
     c78:	a2 e3       	ldi	r26, 0x32	; 50
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e2 e3       	ldi	r30, 0x32	; 50
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	87 7f       	andi	r24, 0xF7	; 247
     c84:	8c 93       	st	X, r24
	// read data
	byte = PINA ^ 0xff;
     c86:	e9 e3       	ldi	r30, 0x39	; 57
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	80 95       	com	r24
     c8e:	8a 83       	std	Y+2, r24	; 0x02

	// handshake: set ndac, means i have completed/accepted the read
	release_bit(DDRD, PORTD, G_NDAC);
     c90:	a1 e3       	ldi	r26, 0x31	; 49
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	e1 e3       	ldi	r30, 0x31	; 49
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	8f 7d       	andi	r24, 0xDF	; 223
     c9c:	8c 93       	st	X, r24
     c9e:	a2 e3       	ldi	r26, 0x32	; 50
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e2 e3       	ldi	r30, 0x32	; 50
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	80 62       	ori	r24, 0x20	; 32
     caa:	8c 93       	st	X, r24

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     cac:	80 91 05 06 	lds	r24, 0x0605
     cb0:	88 2f       	mov	r24, r24
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	05 96       	adiw	r24, 0x05	; 5
     cb6:	9c 83       	std	Y+4, r25	; 0x04
     cb8:	8b 83       	std	Y+3, r24	; 0x03
     cba:	10 c0       	rjmp	.+32     	; 0xcdc <gpib_receive+0x148>
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     cbc:	80 91 05 06 	lds	r24, 0x0605
     cc0:	28 2f       	mov	r18, r24
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	28 17       	cp	r18, r24
     cca:	39 07       	cpc	r19, r25
     ccc:	39 f4       	brne	.+14     	; 0xcdc <gpib_receive+0x148>
			uart_puts("\n\rError: DAV timeout (2)\n\r");
     cce:	8b e7       	ldi	r24, 0x7B	; 123
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
			return 0xff;
     cd6:	8f ef       	ldi	r24, 0xFF	; 255
     cd8:	8f 83       	std	Y+7, r24	; 0x07
     cda:	39 c0       	rjmp	.+114    	; 0xd4e <gpib_receive+0x1ba>
	release_bit(DDRD, PORTD, G_NDAC);

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
     cdc:	e0 e3       	ldi	r30, 0x30	; 48
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	88 2f       	mov	r24, r24
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	84 70       	andi	r24, 0x04	; 4
     ce8:	90 70       	andi	r25, 0x00	; 0
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	49 f4       	brne	.+18     	; 0xd00 <gpib_receive+0x16c>
     cee:	80 91 05 06 	lds	r24, 0x0605
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	9c 81       	ldd	r25, Y+4	; 0x04
     cfa:	82 17       	cp	r24, r18
     cfc:	93 07       	cpc	r25, r19
     cfe:	f4 f6       	brge	.-68     	; 0xcbc <gpib_receive+0x128>
	}
#else
	loop_until_bit_is_set(PIND,G_DAV);
#endif
	// handshake: clear ndac (this is a prerequisite for receive next byte)
	assign_bit(DDRD, PORTD, G_NDAC);
     d00:	a2 e3       	ldi	r26, 0x32	; 50
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e2 e3       	ldi	r30, 0x32	; 50
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8f 7d       	andi	r24, 0xDF	; 223
     d0c:	8c 93       	st	X, r24
     d0e:	a1 e3       	ldi	r26, 0x31	; 49
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e1 e3       	ldi	r30, 0x31	; 49
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	80 62       	ori	r24, 0x20	; 32
     d1a:	8c 93       	st	X, r24
     d1c:	a2 e3       	ldi	r26, 0x32	; 50
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e2 e3       	ldi	r30, 0x32	; 50
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	8f 7d       	andi	r24, 0xDF	; 223
     d28:	8c 93       	st	X, r24

	// check if last byte of transmission
	eoi = bit_is_clear(PIND, G_EOI);
     d2a:	e0 e3       	ldi	r30, 0x30	; 48
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	88 2f       	mov	r24, r24
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	80 71       	andi	r24, 0x10	; 16
     d36:	90 70       	andi	r25, 0x00	; 0
     d38:	19 82       	std	Y+1, r1	; 0x01
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	11 f4       	brne	.+4      	; 0xd42 <gpib_receive+0x1ae>
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	89 83       	std	Y+1, r24	; 0x01

	*_byte = byte;
     d42:	ed 81       	ldd	r30, Y+5	; 0x05
     d44:	fe 81       	ldd	r31, Y+6	; 0x06
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	80 83       	st	Z, r24

	return eoi;
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	8f 83       	std	Y+7, r24	; 0x07
     d4e:	8f 81       	ldd	r24, Y+7	; 0x07
}
     d50:	27 96       	adiw	r28, 0x07	; 7
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	cd bf       	out	0x3d, r28	; 61
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <gpib_controller_assign>:
 * You have to change the initialization of the partner array according to your environment.
 * The partners-array is used by gpib_serial_poll() for looping over all existing devices.
 * 
 * \param address the address to be used by the controller. Usually 0x00.
 */
void gpib_controller_assign(uchar address) {
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	0f 92       	push	r0
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	89 83       	std	Y+1, r24	; 0x01
	controller.myaddress = address;
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	80 93 98 04 	sts	0x0498, r24
	controller.talks = 0;
     d74:	10 92 9b 04 	sts	0x049B, r1
	controller.partner.primary = ADDRESS_NOT_SET; // init default active partner
     d78:	8f ef       	ldi	r24, 0xFF	; 255
     d7a:	80 93 99 04 	sts	0x0499, r24
	controller.partner.secondary = ADDRESS_NOT_SET;
     d7e:	8f ef       	ldi	r24, 0xFF	; 255
     d80:	80 93 9a 04 	sts	0x049A, r24
	controller.flavour = FLAVOUR_NONE;
     d84:	10 92 9c 04 	sts	0x049C, r1
	/** clear list of partners */
	gpib_clear_partners();
     d88:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <gpib_clear_partners>
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     d8c:	a8 e3       	ldi	r26, 0x38	; 56
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e8 e3       	ldi	r30, 0x38	; 56
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	8e 7f       	andi	r24, 0xFE	; 254
     d98:	8c 93       	st	X, r24
     d9a:	a7 e3       	ldi	r26, 0x37	; 55
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e7 e3       	ldi	r30, 0x37	; 55
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	81 60       	ori	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	a8 e3       	ldi	r26, 0x38	; 56
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e8 e3       	ldi	r30, 0x38	; 56
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	8e 7f       	andi	r24, 0xFE	; 254
     db4:	8c 93       	st	X, r24
	delay_ms(200);
     db6:	88 ec       	ldi	r24, 0xC8	; 200
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 ab 04 	call	0x956	; 0x956 <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     dbe:	a7 e3       	ldi	r26, 0x37	; 55
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e7 e3       	ldi	r30, 0x37	; 55
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	8e 7f       	andi	r24, 0xFE	; 254
     dca:	8c 93       	st	X, r24
     dcc:	a8 e3       	ldi	r26, 0x38	; 56
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e8 e3       	ldi	r30, 0x38	; 56
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	81 60       	ori	r24, 0x01	; 1
     dd8:	8c 93       	st	X, r24
	// set up all devices for remote control
	assign_bit(DDRB, PORTB, G_REN);
     dda:	a8 e3       	ldi	r26, 0x38	; 56
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e8 e3       	ldi	r30, 0x38	; 56
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	8d 7f       	andi	r24, 0xFD	; 253
     de6:	8c 93       	st	X, r24
     de8:	a7 e3       	ldi	r26, 0x37	; 55
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e7 e3       	ldi	r30, 0x37	; 55
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	82 60       	ori	r24, 0x02	; 2
     df4:	8c 93       	st	X, r24
     df6:	a8 e3       	ldi	r26, 0x38	; 56
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e8 e3       	ldi	r30, 0x38	; 56
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	8d 7f       	andi	r24, 0xFD	; 253
     e02:	8c 93       	st	X, r24

	// DCL - device clear for all devices on bus
	cmd_buf[0] = G_CMD_DCL;
     e04:	84 e1       	ldi	r24, 0x14	; 20
     e06:	80 93 50 05 	sts	0x0550, r24
	gpib_cmd(cmd_buf, 1);
     e0a:	80 e5       	ldi	r24, 0x50	; 80
     e0c:	95 e0       	ldi	r25, 0x05	; 5
     e0e:	61 e0       	ldi	r22, 0x01	; 1
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	0e 94 4b 07 	call	0xe96	; 0xe96 <gpib_cmd>
}
     e16:	0f 90       	pop	r0
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <gpib_controller_release>:

/**
 * Release bus 
 */
void gpib_controller_release(void) {
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     e26:	a8 e3       	ldi	r26, 0x38	; 56
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e8 e3       	ldi	r30, 0x38	; 56
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	8e 7f       	andi	r24, 0xFE	; 254
     e32:	8c 93       	st	X, r24
     e34:	a7 e3       	ldi	r26, 0x37	; 55
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e7 e3       	ldi	r30, 0x37	; 55
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	81 60       	ori	r24, 0x01	; 1
     e40:	8c 93       	st	X, r24
     e42:	a8 e3       	ldi	r26, 0x38	; 56
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e8 e3       	ldi	r30, 0x38	; 56
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8e 7f       	andi	r24, 0xFE	; 254
     e4e:	8c 93       	st	X, r24
	delay_ms(200);
     e50:	88 ec       	ldi	r24, 0xC8	; 200
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 ab 04 	call	0x956	; 0x956 <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     e58:	a7 e3       	ldi	r26, 0x37	; 55
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e7 e3       	ldi	r30, 0x37	; 55
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8e 7f       	andi	r24, 0xFE	; 254
     e64:	8c 93       	st	X, r24
     e66:	a8 e3       	ldi	r26, 0x38	; 56
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e8 e3       	ldi	r30, 0x38	; 56
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	81 60       	ori	r24, 0x01	; 1
     e72:	8c 93       	st	X, r24
	// set up all devices for local control
	release_bit(DDRB, PORTB, G_REN);
     e74:	a7 e3       	ldi	r26, 0x37	; 55
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e7 e3       	ldi	r30, 0x37	; 55
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8d 7f       	andi	r24, 0xFD	; 253
     e80:	8c 93       	st	X, r24
     e82:	a8 e3       	ldi	r26, 0x38	; 56
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e8 e3       	ldi	r30, 0x38	; 56
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	82 60       	ori	r24, 0x02	; 2
     e8e:	8c 93       	st	X, r24
}
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <gpib_cmd>:
 * \param bytes byte array containing bytes to be send
 * \param length length of valid bytes in byte array or zero.
 * for binary data, lenght must be defined. For strings, length can be set to zero. Then the length of
 * the string is calculated internally.
  */
uchar gpib_cmd(uchar *bytes, int length) {
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	2b 97       	sbiw	r28, 0x0b	; 11
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	9f 83       	std	Y+7, r25	; 0x07
     eac:	8e 83       	std	Y+6, r24	; 0x06
     eae:	79 87       	std	Y+9, r23	; 0x09
     eb0:	68 87       	std	Y+8, r22	; 0x08
	uchar c;
	int i;
	// set attention arg true for commands
	uchar attention = 1;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	8a 83       	std	Y+2, r24	; 0x02

	gpib_write_prologue(attention);
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <gpib_write_prologue>

	if (length == 0) {
     ebc:	88 85       	ldd	r24, Y+8	; 0x08
     ebe:	99 85       	ldd	r25, Y+9	; 0x09
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	31 f4       	brne	.+12     	; 0xed0 <gpib_cmd+0x3a>
		// length==0 means this is a common C string, null-terminated.
		// then, length can be easily calculated
		length = strlen((char*) bytes);
     ec4:	8e 81       	ldd	r24, Y+6	; 0x06
     ec6:	9f 81       	ldd	r25, Y+7	; 0x07
     ec8:	0e 94 b9 01 	call	0x372	; 0x372 <strlen>
     ecc:	99 87       	std	Y+9, r25	; 0x09
     ece:	88 87       	std	Y+8, r24	; 0x08
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif

	for (i = 0; i < length; i++) {
     ed0:	1c 82       	std	Y+4, r1	; 0x04
     ed2:	1b 82       	std	Y+3, r1	; 0x03
     ed4:	28 c0       	rjmp	.+80     	; 0xf26 <gpib_cmd+0x90>
		// put data on bus
		c = bytes[i];
     ed6:	2b 81       	ldd	r18, Y+3	; 0x03
     ed8:	3c 81       	ldd	r19, Y+4	; 0x04
     eda:	8e 81       	ldd	r24, Y+6	; 0x06
     edc:	9f 81       	ldd	r25, Y+7	; 0x07
     ede:	fc 01       	movw	r30, r24
     ee0:	e2 0f       	add	r30, r18
     ee2:	f3 1f       	adc	r31, r19
     ee4:	80 81       	ld	r24, Z
     ee6:	8d 83       	std	Y+5, r24	; 0x05
		//sprintf( buf, "char: %c\n\r", c );
		//uart_puts(buf);

		uchar isLastByte = (i == length - 1) && !attention;
     ee8:	88 85       	ldd	r24, Y+8	; 0x08
     eea:	99 85       	ldd	r25, Y+9	; 0x09
     eec:	9c 01       	movw	r18, r24
     eee:	21 50       	subi	r18, 0x01	; 1
     ef0:	30 40       	sbci	r19, 0x00	; 0
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	9c 81       	ldd	r25, Y+4	; 0x04
     ef6:	28 17       	cp	r18, r24
     ef8:	39 07       	cpc	r19, r25
     efa:	41 f4       	brne	.+16     	; 0xf0c <gpib_cmd+0x76>
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	88 23       	and	r24, r24
     f00:	29 f4       	brne	.+10     	; 0xf0c <gpib_cmd+0x76>
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	9b 87       	std	Y+11, r25	; 0x0b
     f08:	8a 87       	std	Y+10, r24	; 0x0a
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <gpib_cmd+0x7a>
     f0c:	1b 86       	std	Y+11, r1	; 0x0b
     f0e:	1a 86       	std	Y+10, r1	; 0x0a
     f10:	9a 85       	ldd	r25, Y+10	; 0x0a
     f12:	99 83       	std	Y+1, r25	; 0x01
		gpib_write_byte(c, isLastByte);
     f14:	8d 81       	ldd	r24, Y+5	; 0x05
     f16:	69 81       	ldd	r22, Y+1	; 0x01
     f18:	0e 94 60 08 	call	0x10c0	; 0x10c0 <gpib_write_byte>
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif

	for (i = 0; i < length; i++) {
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	9c 81       	ldd	r25, Y+4	; 0x04
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	9c 83       	std	Y+4, r25	; 0x04
     f24:	8b 83       	std	Y+3, r24	; 0x03
     f26:	2b 81       	ldd	r18, Y+3	; 0x03
     f28:	3c 81       	ldd	r19, Y+4	; 0x04
     f2a:	88 85       	ldd	r24, Y+8	; 0x08
     f2c:	99 85       	ldd	r25, Y+9	; 0x09
     f2e:	28 17       	cp	r18, r24
     f30:	39 07       	cpc	r19, r25
     f32:	8c f2       	brlt	.-94     	; 0xed6 <gpib_cmd+0x40>

		uchar isLastByte = (i == length - 1) && !attention;
		gpib_write_byte(c, isLastByte);
	}

	gpib_write_epilogue(attention);
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	0e 94 f6 07 	call	0xfec	; 0xfec <gpib_write_epilogue>

	return 0x00;
     f3a:	80 e0       	ldi	r24, 0x00	; 0
}
     f3c:	2b 96       	adiw	r28, 0x0b	; 11
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <gpib_write_prologue>:

/**
 * Emits prologue before writing to a listener.
 *
 */
void gpib_write_prologue(uchar attention) {
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	0f 92       	push	r0
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	89 83       	std	Y+1, r24	; 0x01
	// set talks state. This is used by ISR to recognize own talk
	// (controller must not talk to itself and must not take part in listener handshake when talking)
	controller.talks = 1;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	80 93 9b 04 	sts	0x049B, r24
	if (attention) {
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	88 23       	and	r24, r24
     f64:	a9 f0       	breq	.+42     	; 0xf90 <gpib_write_prologue+0x42>
		//uart_puts("\n\rgpib_controller_write()\n\r");
		// assign ATN for commands
		assign_bit(DDRD, PORTD, G_ATN);
     f66:	a2 e3       	ldi	r26, 0x32	; 50
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e2 e3       	ldi	r30, 0x32	; 50
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	8f 77       	andi	r24, 0x7F	; 127
     f72:	8c 93       	st	X, r24
     f74:	a1 e3       	ldi	r26, 0x31	; 49
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e1 e3       	ldi	r30, 0x31	; 49
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	80 68       	ori	r24, 0x80	; 128
     f80:	8c 93       	st	X, r24
     f82:	a2 e3       	ldi	r26, 0x32	; 50
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e2 e3       	ldi	r30, 0x32	; 50
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8f 77       	andi	r24, 0x7F	; 127
     f8e:	8c 93       	st	X, r24
	}
	// release EOI during transmission
	release_bit(DDRD, PORTD, G_EOI);
     f90:	a1 e3       	ldi	r26, 0x31	; 49
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e1 e3       	ldi	r30, 0x31	; 49
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	8f 7e       	andi	r24, 0xEF	; 239
     f9c:	8c 93       	st	X, r24
     f9e:	a2 e3       	ldi	r26, 0x32	; 50
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e2 e3       	ldi	r30, 0x32	; 50
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 61       	ori	r24, 0x10	; 16
     faa:	8c 93       	st	X, r24
	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
     fac:	a1 e3       	ldi	r26, 0x31	; 49
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e1 e3       	ldi	r30, 0x31	; 49
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8b 7f       	andi	r24, 0xFB	; 251
     fb8:	8c 93       	st	X, r24
     fba:	a2 e3       	ldi	r26, 0x32	; 50
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e2 e3       	ldi	r30, 0x32	; 50
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	84 60       	ori	r24, 0x04	; 4
     fc6:	8c 93       	st	X, r24
	// release NRFD (just to be sure)
	release_bit(DDRD, PORTD, G_NRFD);
     fc8:	a1 e3       	ldi	r26, 0x31	; 49
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e1 e3       	ldi	r30, 0x31	; 49
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	87 7f       	andi	r24, 0xF7	; 247
     fd4:	8c 93       	st	X, r24
     fd6:	a2 e3       	ldi	r26, 0x32	; 50
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e2 e3       	ldi	r30, 0x32	; 50
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	88 60       	ori	r24, 0x08	; 8
     fe2:	8c 93       	st	X, r24
}
     fe4:	0f 90       	pop	r0
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <gpib_write_epilogue>:

/**
 * Emits epilogue after writing to a listener.
 *
 */
void gpib_write_epilogue(uchar attention) {
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	0f 92       	push	r0
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	89 83       	std	Y+1, r24	; 0x01
	if (attention) {
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	88 23       	and	r24, r24
     ffc:	71 f0       	breq	.+28     	; 0x101a <gpib_write_epilogue+0x2e>
		// assign ATN for commands
		release_bit(DDRD, PORTD, G_ATN);
     ffe:	a1 e3       	ldi	r26, 0x31	; 49
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e1 e3       	ldi	r30, 0x31	; 49
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8f 77       	andi	r24, 0x7F	; 127
    100a:	8c 93       	st	X, r24
    100c:	a2 e3       	ldi	r26, 0x32	; 50
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e2 e3       	ldi	r30, 0x32	; 50
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	80 68       	ori	r24, 0x80	; 128
    1018:	8c 93       	st	X, r24
	}
	// clear talk state.Controller does not talk anymore.
	controller.talks = 0;
    101a:	10 92 9b 04 	sts	0x049B, r1
}
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <gpib_write_command>:
 * - prefix with GPIB write prologue
 * - the string
 * - postfix with GPIB epilogue
 * - postfix that untalks/unlistens all partners
 */
void gpib_write_command(uchar *s) {
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	00 d0       	rcall	.+0      	; 0x102c <gpib_write_command+0x6>
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	9a 83       	std	Y+2, r25	; 0x02
    1032:	89 83       	std	Y+1, r24	; 0x01
	gpib_prepare_write();
    1034:	0e 94 39 05 	call	0xa72	; 0xa72 <gpib_prepare_write>
	gpib_write_prologue(0);
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <gpib_write_prologue>
	gpib_write_string(s);
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	9a 81       	ldd	r25, Y+2	; 0x02
    1042:	0e 94 31 08 	call	0x1062	; 0x1062 <gpib_write_string>
	gpib_write_byte(ASCII_CODE_CR, 1);
    1046:	8d e0       	ldi	r24, 0x0D	; 13
    1048:	61 e0       	ldi	r22, 0x01	; 1
    104a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <gpib_write_byte>
	gpib_write_epilogue(0);
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	0e 94 f6 07 	call	0xfec	; 0xfec <gpib_write_epilogue>
	gpib_untalkUnlisten();
    1054:	0e 94 a7 05 	call	0xb4e	; 0xb4e <gpib_untalkUnlisten>
}
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <gpib_write_string>:

/**
 * Write string. Only the raw string is written, no prefix and no postfix.
 */
void gpib_write_string(uchar *s) {
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	00 d0       	rcall	.+0      	; 0x106c <gpib_write_string+0xa>
    106c:	00 d0       	rcall	.+0      	; 0x106e <gpib_write_string+0xc>
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	9c 83       	std	Y+4, r25	; 0x04
    1074:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < strlen(s); i++) {
    1076:	1a 82       	std	Y+2, r1	; 0x02
    1078:	19 82       	std	Y+1, r1	; 0x01
    107a:	10 c0       	rjmp	.+32     	; 0x109c <gpib_write_string+0x3a>
		gpib_write_byte(s[i], 0);
    107c:	29 81       	ldd	r18, Y+1	; 0x01
    107e:	3a 81       	ldd	r19, Y+2	; 0x02
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	9c 81       	ldd	r25, Y+4	; 0x04
    1084:	fc 01       	movw	r30, r24
    1086:	e2 0f       	add	r30, r18
    1088:	f3 1f       	adc	r31, r19
    108a:	80 81       	ld	r24, Z
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <gpib_write_byte>

/**
 * Write string. Only the raw string is written, no prefix and no postfix.
 */
void gpib_write_string(uchar *s) {
	for (int i = 0; i < strlen(s); i++) {
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	9a 83       	std	Y+2, r25	; 0x02
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	09 81       	ldd	r16, Y+1	; 0x01
    109e:	1a 81       	ldd	r17, Y+2	; 0x02
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	9c 81       	ldd	r25, Y+4	; 0x04
    10a4:	0e 94 b9 01 	call	0x372	; 0x372 <strlen>
    10a8:	08 17       	cp	r16, r24
    10aa:	19 07       	cpc	r17, r25
    10ac:	38 f3       	brcs	.-50     	; 0x107c <gpib_write_string+0x1a>
		gpib_write_byte(s[i], 0);
	}
}
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	08 95       	ret

000010c0 <gpib_write_byte>:


/**
 * Emits single byte to GPIB port pins.
 */
uchar gpib_write_byte(uchar c, uchar isLastByte) {
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <gpib_write_byte+0x6>
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <gpib_write_byte+0x8>
    10c8:	0f 92       	push	r0
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	8b 83       	std	Y+3, r24	; 0x03
    10d0:	6c 83       	std	Y+4, r22	; 0x04
	int timeout;

	// wait for NDAC assign from all listeners
	release_bit(DDRD, PORTD, G_NDAC);
    10d2:	a1 e3       	ldi	r26, 0x31	; 49
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e1 e3       	ldi	r30, 0x31	; 49
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	8f 7d       	andi	r24, 0xDF	; 223
    10de:	8c 93       	st	X, r24
    10e0:	a2 e3       	ldi	r26, 0x32	; 50
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e2 e3       	ldi	r30, 0x32	; 50
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	80 62       	ori	r24, 0x20	; 32
    10ec:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
	timeout = s + 5;
    10ee:	80 91 05 06 	lds	r24, 0x0605
    10f2:	88 2f       	mov	r24, r24
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	05 96       	adiw	r24, 0x05	; 5
    10f8:	9a 83       	std	Y+2, r25	; 0x02
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	10 c0       	rjmp	.+32     	; 0x111e <gpib_write_byte+0x5e>
	//gpib_info();
	while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
		if (s == timeout) {
    10fe:	80 91 05 06 	lds	r24, 0x0605
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	9a 81       	ldd	r25, Y+2	; 0x02
    110a:	28 17       	cp	r18, r24
    110c:	39 07       	cpc	r19, r25
    110e:	39 f4       	brne	.+14     	; 0x111e <gpib_write_byte+0x5e>
			uart_puts("\n\rError: NDAC timeout\n\r");
    1110:	86 e9       	ldi	r24, 0x96	; 150
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
			return 0xff;
    1118:	8f ef       	ldi	r24, 0xFF	; 255
    111a:	8d 83       	std	Y+5, r24	; 0x05
    111c:	f7 c1       	rjmp	.+1006   	; 0x150c <gpib_write_byte+0x44c>
	// wait for NDAC assign from all listeners
	release_bit(DDRD, PORTD, G_NDAC);
#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
    111e:	e0 e3       	ldi	r30, 0x30	; 48
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	80 72       	andi	r24, 0x20	; 32
    112a:	90 70       	andi	r25, 0x00	; 0
    112c:	00 97       	sbiw	r24, 0x00	; 0
    112e:	49 f0       	breq	.+18     	; 0x1142 <gpib_write_byte+0x82>
    1130:	80 91 05 06 	lds	r24, 0x0605
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	9a 81       	ldd	r25, Y+2	; 0x02
    113c:	82 17       	cp	r24, r18
    113e:	93 07       	cpc	r25, r19
    1140:	f4 f6       	brge	.-68     	; 0x10fe <gpib_write_byte+0x3e>
	}
#else
	loop_until_bit_is_clear(PIND,G_NDAC);
#endif

	DDRA = 0x00;
    1142:	ea e3       	ldi	r30, 0x3A	; 58
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	10 82       	st	Z, r1
	if (c & 0x01) {
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	81 70       	andi	r24, 0x01	; 1
    1150:	90 70       	andi	r25, 0x00	; 0
    1152:	88 23       	and	r24, r24
    1154:	b1 f0       	breq	.+44     	; 0x1182 <gpib_write_byte+0xc2>
		assign_bit(DDRA, PORTA, PA0);
    1156:	ab e3       	ldi	r26, 0x3B	; 59
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	eb e3       	ldi	r30, 0x3B	; 59
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	8e 7f       	andi	r24, 0xFE	; 254
    1162:	8c 93       	st	X, r24
    1164:	aa e3       	ldi	r26, 0x3A	; 58
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	ea e3       	ldi	r30, 0x3A	; 58
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	81 60       	ori	r24, 0x01	; 1
    1170:	8c 93       	st	X, r24
    1172:	ab e3       	ldi	r26, 0x3B	; 59
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	eb e3       	ldi	r30, 0x3B	; 59
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	8e 7f       	andi	r24, 0xFE	; 254
    117e:	8c 93       	st	X, r24
    1180:	0e c0       	rjmp	.+28     	; 0x119e <gpib_write_byte+0xde>
	} else {
		release_bit(DDRA, PORTA, PA0)
    1182:	aa e3       	ldi	r26, 0x3A	; 58
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	ea e3       	ldi	r30, 0x3A	; 58
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	8e 7f       	andi	r24, 0xFE	; 254
    118e:	8c 93       	st	X, r24
    1190:	ab e3       	ldi	r26, 0x3B	; 59
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	eb e3       	ldi	r30, 0x3B	; 59
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	81 60       	ori	r24, 0x01	; 1
    119c:	8c 93       	st	X, r24
	}
	if (c & 0x02) {
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	88 2f       	mov	r24, r24
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	82 70       	andi	r24, 0x02	; 2
    11a6:	90 70       	andi	r25, 0x00	; 0
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	b1 f0       	breq	.+44     	; 0x11d8 <gpib_write_byte+0x118>
		assign_bit(DDRA, PORTA, PA1)
    11ac:	ab e3       	ldi	r26, 0x3B	; 59
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	eb e3       	ldi	r30, 0x3B	; 59
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	8d 7f       	andi	r24, 0xFD	; 253
    11b8:	8c 93       	st	X, r24
    11ba:	aa e3       	ldi	r26, 0x3A	; 58
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	ea e3       	ldi	r30, 0x3A	; 58
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	82 60       	ori	r24, 0x02	; 2
    11c6:	8c 93       	st	X, r24
    11c8:	ab e3       	ldi	r26, 0x3B	; 59
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	eb e3       	ldi	r30, 0x3B	; 59
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8d 7f       	andi	r24, 0xFD	; 253
    11d4:	8c 93       	st	X, r24
    11d6:	0e c0       	rjmp	.+28     	; 0x11f4 <gpib_write_byte+0x134>
	} else {
		release_bit(DDRA, PORTA, PA1);
    11d8:	aa e3       	ldi	r26, 0x3A	; 58
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	ea e3       	ldi	r30, 0x3A	; 58
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	8d 7f       	andi	r24, 0xFD	; 253
    11e4:	8c 93       	st	X, r24
    11e6:	ab e3       	ldi	r26, 0x3B	; 59
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	eb e3       	ldi	r30, 0x3B	; 59
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	82 60       	ori	r24, 0x02	; 2
    11f2:	8c 93       	st	X, r24
	}
	if (c & 0x04) {
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	84 70       	andi	r24, 0x04	; 4
    11fc:	90 70       	andi	r25, 0x00	; 0
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	b1 f0       	breq	.+44     	; 0x122e <gpib_write_byte+0x16e>
		assign_bit(DDRA, PORTA, PA2);
    1202:	ab e3       	ldi	r26, 0x3B	; 59
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	eb e3       	ldi	r30, 0x3B	; 59
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	8b 7f       	andi	r24, 0xFB	; 251
    120e:	8c 93       	st	X, r24
    1210:	aa e3       	ldi	r26, 0x3A	; 58
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	ea e3       	ldi	r30, 0x3A	; 58
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	84 60       	ori	r24, 0x04	; 4
    121c:	8c 93       	st	X, r24
    121e:	ab e3       	ldi	r26, 0x3B	; 59
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	eb e3       	ldi	r30, 0x3B	; 59
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	8b 7f       	andi	r24, 0xFB	; 251
    122a:	8c 93       	st	X, r24
    122c:	0e c0       	rjmp	.+28     	; 0x124a <gpib_write_byte+0x18a>
	} else {
		release_bit(DDRA, PORTA, PA2);
    122e:	aa e3       	ldi	r26, 0x3A	; 58
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	ea e3       	ldi	r30, 0x3A	; 58
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	8b 7f       	andi	r24, 0xFB	; 251
    123a:	8c 93       	st	X, r24
    123c:	ab e3       	ldi	r26, 0x3B	; 59
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	eb e3       	ldi	r30, 0x3B	; 59
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	84 60       	ori	r24, 0x04	; 4
    1248:	8c 93       	st	X, r24
	}
	if (c & 0x08) {
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	88 70       	andi	r24, 0x08	; 8
    1252:	90 70       	andi	r25, 0x00	; 0
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	b1 f0       	breq	.+44     	; 0x1284 <gpib_write_byte+0x1c4>
		assign_bit(DDRA, PORTA, PA3);
    1258:	ab e3       	ldi	r26, 0x3B	; 59
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	eb e3       	ldi	r30, 0x3B	; 59
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	87 7f       	andi	r24, 0xF7	; 247
    1264:	8c 93       	st	X, r24
    1266:	aa e3       	ldi	r26, 0x3A	; 58
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	ea e3       	ldi	r30, 0x3A	; 58
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	88 60       	ori	r24, 0x08	; 8
    1272:	8c 93       	st	X, r24
    1274:	ab e3       	ldi	r26, 0x3B	; 59
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	eb e3       	ldi	r30, 0x3B	; 59
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	87 7f       	andi	r24, 0xF7	; 247
    1280:	8c 93       	st	X, r24
    1282:	0e c0       	rjmp	.+28     	; 0x12a0 <gpib_write_byte+0x1e0>
	} else {
		release_bit(DDRA, PORTA, PA3);
    1284:	aa e3       	ldi	r26, 0x3A	; 58
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	ea e3       	ldi	r30, 0x3A	; 58
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	87 7f       	andi	r24, 0xF7	; 247
    1290:	8c 93       	st	X, r24
    1292:	ab e3       	ldi	r26, 0x3B	; 59
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	eb e3       	ldi	r30, 0x3B	; 59
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	88 60       	ori	r24, 0x08	; 8
    129e:	8c 93       	st	X, r24
	}
	if (c & 0x10) {
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	88 2f       	mov	r24, r24
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	80 71       	andi	r24, 0x10	; 16
    12a8:	90 70       	andi	r25, 0x00	; 0
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	b1 f0       	breq	.+44     	; 0x12da <gpib_write_byte+0x21a>
		assign_bit(DDRA, PORTA, PA4);
    12ae:	ab e3       	ldi	r26, 0x3B	; 59
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	eb e3       	ldi	r30, 0x3B	; 59
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	8f 7e       	andi	r24, 0xEF	; 239
    12ba:	8c 93       	st	X, r24
    12bc:	aa e3       	ldi	r26, 0x3A	; 58
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	ea e3       	ldi	r30, 0x3A	; 58
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	80 61       	ori	r24, 0x10	; 16
    12c8:	8c 93       	st	X, r24
    12ca:	ab e3       	ldi	r26, 0x3B	; 59
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	eb e3       	ldi	r30, 0x3B	; 59
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	8f 7e       	andi	r24, 0xEF	; 239
    12d6:	8c 93       	st	X, r24
    12d8:	0e c0       	rjmp	.+28     	; 0x12f6 <gpib_write_byte+0x236>
	} else {
		release_bit(DDRA, PORTA, PA4);
    12da:	aa e3       	ldi	r26, 0x3A	; 58
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	ea e3       	ldi	r30, 0x3A	; 58
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8f 7e       	andi	r24, 0xEF	; 239
    12e6:	8c 93       	st	X, r24
    12e8:	ab e3       	ldi	r26, 0x3B	; 59
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	eb e3       	ldi	r30, 0x3B	; 59
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	80 61       	ori	r24, 0x10	; 16
    12f4:	8c 93       	st	X, r24
	}
	if (c & 0x20) {
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	88 2f       	mov	r24, r24
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	80 72       	andi	r24, 0x20	; 32
    12fe:	90 70       	andi	r25, 0x00	; 0
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	b1 f0       	breq	.+44     	; 0x1330 <gpib_write_byte+0x270>
		assign_bit(DDRA, PORTA, PA5);
    1304:	ab e3       	ldi	r26, 0x3B	; 59
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	eb e3       	ldi	r30, 0x3B	; 59
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	8f 7d       	andi	r24, 0xDF	; 223
    1310:	8c 93       	st	X, r24
    1312:	aa e3       	ldi	r26, 0x3A	; 58
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	ea e3       	ldi	r30, 0x3A	; 58
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	80 62       	ori	r24, 0x20	; 32
    131e:	8c 93       	st	X, r24
    1320:	ab e3       	ldi	r26, 0x3B	; 59
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	eb e3       	ldi	r30, 0x3B	; 59
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	8f 7d       	andi	r24, 0xDF	; 223
    132c:	8c 93       	st	X, r24
    132e:	0e c0       	rjmp	.+28     	; 0x134c <gpib_write_byte+0x28c>
	} else {
		release_bit(DDRA, PORTA, PA5);
    1330:	aa e3       	ldi	r26, 0x3A	; 58
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	ea e3       	ldi	r30, 0x3A	; 58
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	8f 7d       	andi	r24, 0xDF	; 223
    133c:	8c 93       	st	X, r24
    133e:	ab e3       	ldi	r26, 0x3B	; 59
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	eb e3       	ldi	r30, 0x3B	; 59
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	80 62       	ori	r24, 0x20	; 32
    134a:	8c 93       	st	X, r24
	}
	if (c & 0x40) {
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	88 2f       	mov	r24, r24
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	80 74       	andi	r24, 0x40	; 64
    1354:	90 70       	andi	r25, 0x00	; 0
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	b1 f0       	breq	.+44     	; 0x1386 <gpib_write_byte+0x2c6>
		assign_bit(DDRA, PORTA, PA6);
    135a:	ab e3       	ldi	r26, 0x3B	; 59
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	eb e3       	ldi	r30, 0x3B	; 59
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	8f 7b       	andi	r24, 0xBF	; 191
    1366:	8c 93       	st	X, r24
    1368:	aa e3       	ldi	r26, 0x3A	; 58
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	ea e3       	ldi	r30, 0x3A	; 58
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	80 64       	ori	r24, 0x40	; 64
    1374:	8c 93       	st	X, r24
    1376:	ab e3       	ldi	r26, 0x3B	; 59
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	eb e3       	ldi	r30, 0x3B	; 59
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	8f 7b       	andi	r24, 0xBF	; 191
    1382:	8c 93       	st	X, r24
    1384:	0e c0       	rjmp	.+28     	; 0x13a2 <gpib_write_byte+0x2e2>
	} else {
		release_bit(DDRA, PORTA, PA6);
    1386:	aa e3       	ldi	r26, 0x3A	; 58
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	ea e3       	ldi	r30, 0x3A	; 58
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	8f 7b       	andi	r24, 0xBF	; 191
    1392:	8c 93       	st	X, r24
    1394:	ab e3       	ldi	r26, 0x3B	; 59
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	eb e3       	ldi	r30, 0x3B	; 59
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	80 64       	ori	r24, 0x40	; 64
    13a0:	8c 93       	st	X, r24
	}
	if (c & 0x80) {
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	88 23       	and	r24, r24
    13a6:	b4 f4       	brge	.+44     	; 0x13d4 <gpib_write_byte+0x314>
		assign_bit(DDRA, PORTA, PA7);
    13a8:	ab e3       	ldi	r26, 0x3B	; 59
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	eb e3       	ldi	r30, 0x3B	; 59
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	8f 77       	andi	r24, 0x7F	; 127
    13b4:	8c 93       	st	X, r24
    13b6:	aa e3       	ldi	r26, 0x3A	; 58
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	ea e3       	ldi	r30, 0x3A	; 58
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	80 68       	ori	r24, 0x80	; 128
    13c2:	8c 93       	st	X, r24
    13c4:	ab e3       	ldi	r26, 0x3B	; 59
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	eb e3       	ldi	r30, 0x3B	; 59
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	8f 77       	andi	r24, 0x7F	; 127
    13d0:	8c 93       	st	X, r24
    13d2:	0e c0       	rjmp	.+28     	; 0x13f0 <gpib_write_byte+0x330>
	} else {
		release_bit(DDRA, PORTA, PA7);
    13d4:	aa e3       	ldi	r26, 0x3A	; 58
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	ea e3       	ldi	r30, 0x3A	; 58
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	8f 77       	andi	r24, 0x7F	; 127
    13e0:	8c 93       	st	X, r24
    13e2:	ab e3       	ldi	r26, 0x3B	; 59
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	eb e3       	ldi	r30, 0x3B	; 59
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	80 68       	ori	r24, 0x80	; 128
    13ee:	8c 93       	st	X, r24
	}

	// wait until listeners release NRFD
	//uart_puts("1");
	release_bit(DDRD, PORTD, G_NRFD);
    13f0:	a1 e3       	ldi	r26, 0x31	; 49
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e1 e3       	ldi	r30, 0x31	; 49
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	87 7f       	andi	r24, 0xF7	; 247
    13fc:	8c 93       	st	X, r24
    13fe:	a2 e3       	ldi	r26, 0x32	; 50
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e2 e3       	ldi	r30, 0x32	; 50
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	88 60       	ori	r24, 0x08	; 8
    140a:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
	//gpib_info();
	timeout = s + 5;
    140c:	80 91 05 06 	lds	r24, 0x0605
    1410:	88 2f       	mov	r24, r24
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	05 96       	adiw	r24, 0x05	; 5
    1416:	9a 83       	std	Y+2, r25	; 0x02
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	10 c0       	rjmp	.+32     	; 0x143c <gpib_write_byte+0x37c>
	while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
		if (s == timeout) {
    141c:	80 91 05 06 	lds	r24, 0x0605
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	28 17       	cp	r18, r24
    142a:	39 07       	cpc	r19, r25
    142c:	39 f4       	brne	.+14     	; 0x143c <gpib_write_byte+0x37c>
			uart_puts("\n\rError: NRFD timeout\n\r");
    142e:	8e ea       	ldi	r24, 0xAE	; 174
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
			return 0xff;
    1436:	8f ef       	ldi	r24, 0xFF	; 255
    1438:	8d 83       	std	Y+5, r24	; 0x05
    143a:	68 c0       	rjmp	.+208    	; 0x150c <gpib_write_byte+0x44c>
	//uart_puts("1");
	release_bit(DDRD, PORTD, G_NRFD);
#ifdef WITH_TIMEOUT
	//gpib_info();
	timeout = s + 5;
	while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
    143c:	e0 e3       	ldi	r30, 0x30	; 48
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	88 2f       	mov	r24, r24
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	88 70       	andi	r24, 0x08	; 8
    1448:	90 70       	andi	r25, 0x00	; 0
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	49 f4       	brne	.+18     	; 0x1460 <gpib_write_byte+0x3a0>
    144e:	80 91 05 06 	lds	r24, 0x0605
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	9a 81       	ldd	r25, Y+2	; 0x02
    145a:	82 17       	cp	r24, r18
    145c:	93 07       	cpc	r25, r19
    145e:	f4 f6       	brge	.-68     	; 0x141c <gpib_write_byte+0x35c>
#else
	loop_until_bit_is_set(PIND,G_NRFD);
#endif

	// assign EOI during transmission of only last byte
	if (isLastByte) {
    1460:	8c 81       	ldd	r24, Y+4	; 0x04
    1462:	88 23       	and	r24, r24
    1464:	a9 f0       	breq	.+42     	; 0x1490 <gpib_write_byte+0x3d0>
		//uart_puts("\n\rE\n\r");
		assign_bit(DDRD, PORTD, G_EOI);
    1466:	a2 e3       	ldi	r26, 0x32	; 50
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e2 e3       	ldi	r30, 0x32	; 50
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	8f 7e       	andi	r24, 0xEF	; 239
    1472:	8c 93       	st	X, r24
    1474:	a1 e3       	ldi	r26, 0x31	; 49
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e1 e3       	ldi	r30, 0x31	; 49
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	80 61       	ori	r24, 0x10	; 16
    1480:	8c 93       	st	X, r24
    1482:	a2 e3       	ldi	r26, 0x32	; 50
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e2 e3       	ldi	r30, 0x32	; 50
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	8f 7e       	andi	r24, 0xEF	; 239
    148e:	8c 93       	st	X, r24
	}

	// assign DAV, data valid for listeners
	assign_bit(DDRD, PORTD, G_DAV);
    1490:	a2 e3       	ldi	r26, 0x32	; 50
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e2 e3       	ldi	r30, 0x32	; 50
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	8b 7f       	andi	r24, 0xFB	; 251
    149c:	8c 93       	st	X, r24
    149e:	a1 e3       	ldi	r26, 0x31	; 49
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e1 e3       	ldi	r30, 0x31	; 49
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	84 60       	ori	r24, 0x04	; 4
    14aa:	8c 93       	st	X, r24
    14ac:	a2 e3       	ldi	r26, 0x32	; 50
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e2 e3       	ldi	r30, 0x32	; 50
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	8b 7f       	andi	r24, 0xFB	; 251
    14b8:	8c 93       	st	X, r24

	// wait for NDAC release
	//uart_puts("2");
	release_bit(DDRD, PORTD, G_NDAC);
    14ba:	a1 e3       	ldi	r26, 0x31	; 49
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e1 e3       	ldi	r30, 0x31	; 49
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	8f 7d       	andi	r24, 0xDF	; 223
    14c6:	8c 93       	st	X, r24
    14c8:	a2 e3       	ldi	r26, 0x32	; 50
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e2 e3       	ldi	r30, 0x32	; 50
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	80 62       	ori	r24, 0x20	; 32
    14d4:	8c 93       	st	X, r24
	loop_until_bit_is_set(PIND, G_NDAC);
    14d6:	e0 e3       	ldi	r30, 0x30	; 48
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	88 2f       	mov	r24, r24
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	80 72       	andi	r24, 0x20	; 32
    14e2:	90 70       	andi	r25, 0x00	; 0
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	b9 f3       	breq	.-18     	; 0x14d6 <gpib_write_byte+0x416>

	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
    14e8:	a1 e3       	ldi	r26, 0x31	; 49
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e1 e3       	ldi	r30, 0x31	; 49
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	8b 7f       	andi	r24, 0xFB	; 251
    14f4:	8c 93       	st	X, r24
    14f6:	a2 e3       	ldi	r26, 0x32	; 50
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e2 e3       	ldi	r30, 0x32	; 50
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	84 60       	ori	r24, 0x04	; 4
    1502:	8c 93       	st	X, r24

	// reset Port to all input
	DDRA = 0x00;
    1504:	ea e3       	ldi	r30, 0x3A	; 58
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	10 82       	st	Z, r1

	//uart_puts("3\r\n");

	return 0;
    150a:	1d 82       	std	Y+5, r1	; 0x05
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	08 95       	ret

0000151e <gpib_info>:


/**
 * print some useful info about bus state (for example value of handshake pins)
 */
void gpib_info(void) {
    151e:	af 92       	push	r10
    1520:	bf 92       	push	r11
    1522:	cf 92       	push	r12
    1524:	df 92       	push	r13
    1526:	ef 92       	push	r14
    1528:	ff 92       	push	r15
    152a:	0f 93       	push	r16
    152c:	1f 93       	push	r17
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	2a 97       	sbiw	r28, 0x0a	; 10
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
	uchar dav, nrfd, ndac, eoi, atn, srq, ifc, ren;
	extern uchar buf[80];

	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    1542:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <gpib_get_partner_pad>
    1546:	08 2f       	mov	r16, r24
    1548:	10 e0       	ldi	r17, 0x00	; 0
    154a:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <gpib_get_partner_sad>
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	8d b7       	in	r24, 0x3d	; 61
    1554:	9e b7       	in	r25, 0x3e	; 62
    1556:	08 97       	sbiw	r24, 0x08	; 8
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	9e bf       	out	0x3e, r25	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	8d bf       	out	0x3d, r24	; 61
    1562:	ed b7       	in	r30, 0x3d	; 61
    1564:	fe b7       	in	r31, 0x3e	; 62
    1566:	31 96       	adiw	r30, 0x01	; 1
    1568:	84 eb       	ldi	r24, 0xB4	; 180
    156a:	95 e0       	ldi	r25, 0x05	; 5
    156c:	91 83       	std	Z+1, r25	; 0x01
    156e:	80 83       	st	Z, r24
    1570:	86 ec       	ldi	r24, 0xC6	; 198
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	93 83       	std	Z+3, r25	; 0x03
    1576:	82 83       	std	Z+2, r24	; 0x02
    1578:	15 83       	std	Z+5, r17	; 0x05
    157a:	04 83       	std	Z+4, r16	; 0x04
    157c:	37 83       	std	Z+7, r19	; 0x07
    157e:	26 83       	std	Z+6, r18	; 0x06
    1580:	0e 94 0a 02 	call	0x414	; 0x414 <sprintf>
    1584:	8d b7       	in	r24, 0x3d	; 61
    1586:	9e b7       	in	r25, 0x3e	; 62
    1588:	08 96       	adiw	r24, 0x08	; 8
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	9e bf       	out	0x3e, r25	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	8d bf       	out	0x3d, r24	; 61
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);
    1594:	84 eb       	ldi	r24, 0xB4	; 180
    1596:	95 e0       	ldi	r25, 0x05	; 5
    1598:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>

	uart_puts("Partner list\n\r");
    159c:	84 ef       	ldi	r24, 0xF4	; 244
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
	for (int i = 0; i < MAX_PARTNER; i++) {
    15a4:	1a 82       	std	Y+2, r1	; 0x02
    15a6:	19 82       	std	Y+1, r1	; 0x01
    15a8:	49 c0       	rjmp	.+146    	; 0x163c <gpib_info+0x11e>
		if (controller.partners[i].primary != ADDRESS_NOT_SET) {
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	9a 81       	ldd	r25, Y+2	; 0x02
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	fc 01       	movw	r30, r24
    15b4:	e3 56       	subi	r30, 0x63	; 99
    15b6:	fb 4f       	sbci	r31, 0xFB	; 251
    15b8:	80 81       	ld	r24, Z
    15ba:	8f 3f       	cpi	r24, 0xFF	; 255
    15bc:	d1 f1       	breq	.+116    	; 0x1632 <gpib_info+0x114>
			sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	9a 81       	ldd	r25, Y+2	; 0x02
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	fc 01       	movw	r30, r24
    15c8:	e3 56       	subi	r30, 0x63	; 99
    15ca:	fb 4f       	sbci	r31, 0xFB	; 251
    15cc:	80 81       	ld	r24, Z
    15ce:	48 2f       	mov	r20, r24
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	9a 81       	ldd	r25, Y+2	; 0x02
    15d6:	03 96       	adiw	r24, 0x03	; 3
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	fc 01       	movw	r30, r24
    15de:	e8 56       	subi	r30, 0x68	; 104
    15e0:	fb 4f       	sbci	r31, 0xFB	; 251
    15e2:	80 81       	ld	r24, Z
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	8d b7       	in	r24, 0x3d	; 61
    15ea:	9e b7       	in	r25, 0x3e	; 62
    15ec:	08 97       	sbiw	r24, 0x08	; 8
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	9e bf       	out	0x3e, r25	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	8d bf       	out	0x3d, r24	; 61
    15f8:	ed b7       	in	r30, 0x3d	; 61
    15fa:	fe b7       	in	r31, 0x3e	; 62
    15fc:	31 96       	adiw	r30, 0x01	; 1
    15fe:	84 eb       	ldi	r24, 0xB4	; 180
    1600:	95 e0       	ldi	r25, 0x05	; 5
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	80 83       	st	Z, r24
    1606:	86 ec       	ldi	r24, 0xC6	; 198
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	93 83       	std	Z+3, r25	; 0x03
    160c:	82 83       	std	Z+2, r24	; 0x02
    160e:	55 83       	std	Z+5, r21	; 0x05
    1610:	44 83       	std	Z+4, r20	; 0x04
    1612:	37 83       	std	Z+7, r19	; 0x07
    1614:	26 83       	std	Z+6, r18	; 0x06
    1616:	0e 94 0a 02 	call	0x414	; 0x414 <sprintf>
    161a:	8d b7       	in	r24, 0x3d	; 61
    161c:	9e b7       	in	r25, 0x3e	; 62
    161e:	08 96       	adiw	r24, 0x08	; 8
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	9e bf       	out	0x3e, r25	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	8d bf       	out	0x3d, r24	; 61
					controller.partners[i].primary,
					controller.partners[i].secondary);
			uart_puts(buf);
    162a:	84 eb       	ldi	r24, 0xB4	; 180
    162c:	95 e0       	ldi	r25, 0x05	; 5
    162e:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);

	uart_puts("Partner list\n\r");
	for (int i = 0; i < MAX_PARTNER; i++) {
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	9a 81       	ldd	r25, Y+2	; 0x02
    1636:	01 96       	adiw	r24, 0x01	; 1
    1638:	9a 83       	std	Y+2, r25	; 0x02
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	9a 81       	ldd	r25, Y+2	; 0x02
    1640:	85 30       	cpi	r24, 0x05	; 5
    1642:	91 05       	cpc	r25, r1
    1644:	0c f4       	brge	.+2      	; 0x1648 <gpib_info+0x12a>
    1646:	b1 cf       	rjmp	.-158    	; 0x15aa <gpib_info+0x8c>
					controller.partners[i].secondary);
			uart_puts(buf);
		}
	}

	dav = bit_is_set(PIND, G_DAV);
    1648:	e0 e3       	ldi	r30, 0x30	; 48
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	84 70       	andi	r24, 0x04	; 4
    1650:	8a 87       	std	Y+10, r24	; 0x0a
	nrfd = bit_is_set(PIND, G_NRFD);
    1652:	e0 e3       	ldi	r30, 0x30	; 48
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	88 70       	andi	r24, 0x08	; 8
    165a:	89 87       	std	Y+9, r24	; 0x09
	ndac = bit_is_set(PIND, G_NDAC);
    165c:	e0 e3       	ldi	r30, 0x30	; 48
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	80 72       	andi	r24, 0x20	; 32
    1664:	88 87       	std	Y+8, r24	; 0x08
	eoi = bit_is_set(PIND, G_EOI);
    1666:	e0 e3       	ldi	r30, 0x30	; 48
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	80 71       	andi	r24, 0x10	; 16
    166e:	8f 83       	std	Y+7, r24	; 0x07
	atn = bit_is_set(PIND, G_ATN);
    1670:	e0 e3       	ldi	r30, 0x30	; 48
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	80 78       	andi	r24, 0x80	; 128
    1678:	8e 83       	std	Y+6, r24	; 0x06
	srq = bit_is_set(PIND, G_SRQ);
    167a:	e0 e3       	ldi	r30, 0x30	; 48
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	80 74       	andi	r24, 0x40	; 64
    1682:	8d 83       	std	Y+5, r24	; 0x05
	ifc = bit_is_set(PINB, G_IFC);
    1684:	e6 e3       	ldi	r30, 0x36	; 54
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	81 70       	andi	r24, 0x01	; 1
    168c:	8c 83       	std	Y+4, r24	; 0x04
	ren = bit_is_set(PINB, G_REN);
    168e:	e6 e3       	ldi	r30, 0x36	; 54
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	82 70       	andi	r24, 0x02	; 2
    1696:	8b 83       	std	Y+3, r24	; 0x03
	//d = PINA;
	//di = d ^ 0xff;
	if (dav == 0x00)
    1698:	8a 85       	ldd	r24, Y+10	; 0x0a
    169a:	88 23       	and	r24, r24
    169c:	19 f4       	brne	.+6      	; 0x16a4 <gpib_info+0x186>
		dav = '0';
    169e:	80 e3       	ldi	r24, 0x30	; 48
    16a0:	8a 87       	std	Y+10, r24	; 0x0a
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <gpib_info+0x18a>
	else
		dav = '1';
    16a4:	81 e3       	ldi	r24, 0x31	; 49
    16a6:	8a 87       	std	Y+10, r24	; 0x0a
	if (nrfd == 0x00)
    16a8:	89 85       	ldd	r24, Y+9	; 0x09
    16aa:	88 23       	and	r24, r24
    16ac:	19 f4       	brne	.+6      	; 0x16b4 <gpib_info+0x196>
		nrfd = '0';
    16ae:	80 e3       	ldi	r24, 0x30	; 48
    16b0:	89 87       	std	Y+9, r24	; 0x09
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <gpib_info+0x19a>
	else
		nrfd = '1';
    16b4:	81 e3       	ldi	r24, 0x31	; 49
    16b6:	89 87       	std	Y+9, r24	; 0x09
	if (ndac == 0x00)
    16b8:	88 85       	ldd	r24, Y+8	; 0x08
    16ba:	88 23       	and	r24, r24
    16bc:	19 f4       	brne	.+6      	; 0x16c4 <gpib_info+0x1a6>
		ndac = '0';
    16be:	80 e3       	ldi	r24, 0x30	; 48
    16c0:	88 87       	std	Y+8, r24	; 0x08
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <gpib_info+0x1aa>
	else
		ndac = '1';
    16c4:	81 e3       	ldi	r24, 0x31	; 49
    16c6:	88 87       	std	Y+8, r24	; 0x08
	if (eoi == 0x00)
    16c8:	8f 81       	ldd	r24, Y+7	; 0x07
    16ca:	88 23       	and	r24, r24
    16cc:	19 f4       	brne	.+6      	; 0x16d4 <gpib_info+0x1b6>
		eoi = '0';
    16ce:	80 e3       	ldi	r24, 0x30	; 48
    16d0:	8f 83       	std	Y+7, r24	; 0x07
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <gpib_info+0x1ba>
	else
		eoi = '1';
    16d4:	81 e3       	ldi	r24, 0x31	; 49
    16d6:	8f 83       	std	Y+7, r24	; 0x07
	if (atn == 0x00)
    16d8:	8e 81       	ldd	r24, Y+6	; 0x06
    16da:	88 23       	and	r24, r24
    16dc:	19 f4       	brne	.+6      	; 0x16e4 <gpib_info+0x1c6>
		atn = '0';
    16de:	80 e3       	ldi	r24, 0x30	; 48
    16e0:	8e 83       	std	Y+6, r24	; 0x06
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <gpib_info+0x1ca>
	else
		atn = '1';
    16e4:	81 e3       	ldi	r24, 0x31	; 49
    16e6:	8e 83       	std	Y+6, r24	; 0x06
	if (srq == 0x00)
    16e8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ea:	88 23       	and	r24, r24
    16ec:	19 f4       	brne	.+6      	; 0x16f4 <gpib_info+0x1d6>
		srq = '0';
    16ee:	80 e3       	ldi	r24, 0x30	; 48
    16f0:	8d 83       	std	Y+5, r24	; 0x05
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <gpib_info+0x1da>
	else
		srq = '1';
    16f4:	81 e3       	ldi	r24, 0x31	; 49
    16f6:	8d 83       	std	Y+5, r24	; 0x05
	if (ifc == 0x00)
    16f8:	8c 81       	ldd	r24, Y+4	; 0x04
    16fa:	88 23       	and	r24, r24
    16fc:	19 f4       	brne	.+6      	; 0x1704 <gpib_info+0x1e6>
		ifc = '0';
    16fe:	80 e3       	ldi	r24, 0x30	; 48
    1700:	8c 83       	std	Y+4, r24	; 0x04
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <gpib_info+0x1ea>
	else
		ifc = '1';
    1704:	81 e3       	ldi	r24, 0x31	; 49
    1706:	8c 83       	std	Y+4, r24	; 0x04
	if (ren == 0x00)
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	88 23       	and	r24, r24
    170c:	19 f4       	brne	.+6      	; 0x1714 <gpib_info+0x1f6>
		ren = '0';
    170e:	80 e3       	ldi	r24, 0x30	; 48
    1710:	8b 83       	std	Y+3, r24	; 0x03
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <gpib_info+0x1fa>
	else
		ren = '1';
    1714:	81 e3       	ldi	r24, 0x31	; 49
    1716:	8b 83       	std	Y+3, r24	; 0x03

	sprintf(buf,
    1718:	8a 85       	ldd	r24, Y+10	; 0x0a
    171a:	a8 2e       	mov	r10, r24
    171c:	bb 24       	eor	r11, r11
    171e:	89 85       	ldd	r24, Y+9	; 0x09
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	88 85       	ldd	r24, Y+8	; 0x08
    1726:	48 2f       	mov	r20, r24
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	8f 81       	ldd	r24, Y+7	; 0x07
    172c:	68 2f       	mov	r22, r24
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	8c 81       	ldd	r24, Y+4	; 0x04
    1732:	a8 2f       	mov	r26, r24
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	08 2f       	mov	r16, r24
    173a:	10 e0       	ldi	r17, 0x00	; 0
    173c:	8e 81       	ldd	r24, Y+6	; 0x06
    173e:	e8 2e       	mov	r14, r24
    1740:	ff 24       	eor	r15, r15
    1742:	8d 81       	ldd	r24, Y+5	; 0x05
    1744:	c8 2e       	mov	r12, r24
    1746:	dd 24       	eor	r13, r13
    1748:	8d b7       	in	r24, 0x3d	; 61
    174a:	9e b7       	in	r25, 0x3e	; 62
    174c:	44 97       	sbiw	r24, 0x14	; 20
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	9e bf       	out	0x3e, r25	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	8d bf       	out	0x3d, r24	; 61
    1758:	ed b7       	in	r30, 0x3d	; 61
    175a:	fe b7       	in	r31, 0x3e	; 62
    175c:	31 96       	adiw	r30, 0x01	; 1
    175e:	84 eb       	ldi	r24, 0xB4	; 180
    1760:	95 e0       	ldi	r25, 0x05	; 5
    1762:	91 83       	std	Z+1, r25	; 0x01
    1764:	80 83       	st	Z, r24
    1766:	83 e0       	ldi	r24, 0x03	; 3
    1768:	91 e0       	ldi	r25, 0x01	; 1
    176a:	93 83       	std	Z+3, r25	; 0x03
    176c:	82 83       	std	Z+2, r24	; 0x02
    176e:	b5 82       	std	Z+5, r11	; 0x05
    1770:	a4 82       	std	Z+4, r10	; 0x04
    1772:	37 83       	std	Z+7, r19	; 0x07
    1774:	26 83       	std	Z+6, r18	; 0x06
    1776:	51 87       	std	Z+9, r21	; 0x09
    1778:	40 87       	std	Z+8, r20	; 0x08
    177a:	73 87       	std	Z+11, r23	; 0x0b
    177c:	62 87       	std	Z+10, r22	; 0x0a
    177e:	b5 87       	std	Z+13, r27	; 0x0d
    1780:	a4 87       	std	Z+12, r26	; 0x0c
    1782:	17 87       	std	Z+15, r17	; 0x0f
    1784:	06 87       	std	Z+14, r16	; 0x0e
    1786:	f1 8a       	std	Z+17, r15	; 0x11
    1788:	e0 8a       	std	Z+16, r14	; 0x10
    178a:	d3 8a       	std	Z+19, r13	; 0x13
    178c:	c2 8a       	std	Z+18, r12	; 0x12
    178e:	0e 94 0a 02 	call	0x414	; 0x414 <sprintf>
    1792:	8d b7       	in	r24, 0x3d	; 61
    1794:	9e b7       	in	r25, 0x3e	; 62
    1796:	44 96       	adiw	r24, 0x14	; 20
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	9e bf       	out	0x3e, r25	; 62
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	8d bf       	out	0x3d, r24	; 61
			"dav=%c,nrfd=%c,ndac=%c, eoi=%c, ifc=%c,ren=%c,atn=%c,srq=%c\n\r",
			dav, nrfd, ndac, eoi, ifc, ren, atn, srq);
	uart_puts(buf);
    17a2:	84 eb       	ldi	r24, 0xB4	; 180
    17a4:	95 e0       	ldi	r25, 0x05	; 5
    17a6:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
}
    17aa:	2a 96       	adiw	r28, 0x0a	; 10
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	ff 90       	pop	r15
    17c0:	ef 90       	pop	r14
    17c2:	df 90       	pop	r13
    17c4:	cf 90       	pop	r12
    17c6:	bf 90       	pop	r11
    17c8:	af 90       	pop	r10
    17ca:	08 95       	ret

000017cc <gpib_serial_poll>:
 * I haven't looked how a device with two byte address behaves.
 *
 * Secondary/primary is returned in inout parameters
 * If any emitter is found, return value is != 0.
 */
uchar gpib_serial_poll(uint8_t *primary_v, uint8_t* secondary_v) {
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	2c 97       	sbiw	r28, 0x0c	; 12
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61
    17e0:	9a 87       	std	Y+10, r25	; 0x0a
    17e2:	89 87       	std	Y+9, r24	; 0x09
    17e4:	7c 87       	std	Y+12, r23	; 0x0c
    17e6:	6b 87       	std	Y+11, r22	; 0x0b
	uchar b, e;
	uchar primary = 0, secondary = 0, found = 0, foundPhysical =
    17e8:	1e 82       	std	Y+6, r1	; 0x06
    17ea:	1d 82       	std	Y+5, r1	; 0x05
    17ec:	1c 82       	std	Y+4, r1	; 0x04
	ADDRESS_NOT_SET;
    17ee:	8f ef       	ldi	r24, 0xFF	; 255
    17f0:	8b 83       	std	Y+3, r24	; 0x03
	int i;

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	cmd_buf[0] = G_CMD_UNT;
    17f2:	8f e5       	ldi	r24, 0x5F	; 95
    17f4:	80 93 50 05 	sts	0x0550, r24
	gpib_cmd(cmd_buf, 1);
    17f8:	80 e5       	ldi	r24, 0x50	; 80
    17fa:	95 e0       	ldi	r25, 0x05	; 5
    17fc:	61 e0       	ldi	r22, 0x01	; 1
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	0e 94 4b 07 	call	0xe96	; 0xe96 <gpib_cmd>
	cmd_buf[0] = G_CMD_UNL;
    1804:	8f e3       	ldi	r24, 0x3F	; 63
    1806:	80 93 50 05 	sts	0x0550, r24
	gpib_cmd(cmd_buf, 1);
    180a:	80 e5       	ldi	r24, 0x50	; 80
    180c:	95 e0       	ldi	r25, 0x05	; 5
    180e:	61 e0       	ldi	r22, 0x01	; 1
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	0e 94 4b 07 	call	0xe96	; 0xe96 <gpib_cmd>

	// serial poll enable
	// effect: all devices will send status byte instead of normal data when addressed
	// as talker
	//uart_puts("before SPE\r\n");
	cmd_buf[0] = G_CMD_SPE;
    1816:	88 e1       	ldi	r24, 0x18	; 24
    1818:	80 93 50 05 	sts	0x0550, r24
	gpib_cmd(cmd_buf, 1);
    181c:	80 e5       	ldi	r24, 0x50	; 80
    181e:	95 e0       	ldi	r25, 0x05	; 5
    1820:	61 e0       	ldi	r22, 0x01	; 1
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	0e 94 4b 07 	call	0xe96	; 0xe96 <gpib_cmd>
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    1828:	1a 82       	std	Y+2, r1	; 0x02
    182a:	19 82       	std	Y+1, r1	; 0x01
    182c:	de c0       	rjmp	.+444    	; 0x19ea <gpib_serial_poll+0x21e>
			i++) {

		// set partner to talker mode
		primary = address2TalkerAddress(controller.partners[i].primary);
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	9a 81       	ldd	r25, Y+2	; 0x02
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	fc 01       	movw	r30, r24
    1838:	e3 56       	subi	r30, 0x63	; 99
    183a:	fb 4f       	sbci	r31, 0xFB	; 251
    183c:	80 81       	ld	r24, Z
    183e:	80 5c       	subi	r24, 0xC0	; 192
    1840:	8e 83       	std	Y+6, r24	; 0x06
		secondary = secondaryAdressToAdressByte(
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	9a 81       	ldd	r25, Y+2	; 0x02
    1846:	03 96       	adiw	r24, 0x03	; 3
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	fc 01       	movw	r30, r24
    184e:	e8 56       	subi	r30, 0x68	; 104
    1850:	fb 4f       	sbci	r31, 0xFB	; 251
    1852:	80 81       	ld	r24, Z
    1854:	80 66       	ori	r24, 0x60	; 96
    1856:	8d 83       	std	Y+5, r24	; 0x05
				controller.partners[i].secondary);

		cmd_buf[0] = primary;
    1858:	8e 81       	ldd	r24, Y+6	; 0x06
    185a:	80 93 50 05 	sts	0x0550, r24
		//uart_puts("before talker address write\r\n");
		gpib_cmd(cmd_buf, 1);
    185e:	80 e5       	ldi	r24, 0x50	; 80
    1860:	95 e0       	ldi	r25, 0x05	; 5
    1862:	61 e0       	ldi	r22, 0x01	; 1
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	0e 94 4b 07 	call	0xe96	; 0xe96 <gpib_cmd>
		//uart_puts("after talker address write\r\n");
		// handle secondary address if required
		if (secondary != ADDRESS_NOT_SET) {
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	8f 3f       	cpi	r24, 0xFF	; 255
    186e:	49 f0       	breq	.+18     	; 0x1882 <gpib_serial_poll+0xb6>
			cmd_buf[0] = secondary;
    1870:	8d 81       	ldd	r24, Y+5	; 0x05
    1872:	80 93 50 05 	sts	0x0550, r24
			//uart_puts("before talker address write\r\n");
			gpib_cmd(cmd_buf, 1);
    1876:	80 e5       	ldi	r24, 0x50	; 80
    1878:	95 e0       	ldi	r25, 0x05	; 5
    187a:	61 e0       	ldi	r22, 0x01	; 1
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	0e 94 4b 07 	call	0xe96	; 0xe96 <gpib_cmd>
		}

		// now receive data
		//uart_puts("before status byte receive\r\n");
		e = gpib_receive(&b);
    1882:	ce 01       	movw	r24, r28
    1884:	08 96       	adiw	r24, 0x08	; 8
    1886:	0e 94 ca 05 	call	0xb94	; 0xb94 <gpib_receive>
    188a:	8f 83       	std	Y+7, r24	; 0x07
		//uart_puts("after status byte receive\r\n");
		// status byte is now in b

		if (secondary != ADDRESS_NOT_SET) {
    188c:	8d 81       	ldd	r24, Y+5	; 0x05
    188e:	8f 3f       	cpi	r24, 0xFF	; 255
    1890:	81 f1       	breq	.+96     	; 0x18f2 <gpib_serial_poll+0x126>
			sprintf((char*) cmd_buf,
    1892:	8e 81       	ldd	r24, Y+6	; 0x06
    1894:	88 2f       	mov	r24, r24
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	bc 01       	movw	r22, r24
    189a:	60 54       	subi	r22, 0x40	; 64
    189c:	70 40       	sbci	r23, 0x00	; 0
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	88 85       	ldd	r24, Y+8	; 0x08
    18a6:	48 2f       	mov	r20, r24
    18a8:	50 e0       	ldi	r21, 0x00	; 0
    18aa:	8d b7       	in	r24, 0x3d	; 61
    18ac:	9e b7       	in	r25, 0x3e	; 62
    18ae:	0a 97       	sbiw	r24, 0x0a	; 10
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	9e bf       	out	0x3e, r25	; 62
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	8d bf       	out	0x3d, r24	; 61
    18ba:	ed b7       	in	r30, 0x3d	; 61
    18bc:	fe b7       	in	r31, 0x3e	; 62
    18be:	31 96       	adiw	r30, 0x01	; 1
    18c0:	80 e5       	ldi	r24, 0x50	; 80
    18c2:	95 e0       	ldi	r25, 0x05	; 5
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	80 83       	st	Z, r24
    18c8:	81 e4       	ldi	r24, 0x41	; 65
    18ca:	91 e0       	ldi	r25, 0x01	; 1
    18cc:	93 83       	std	Z+3, r25	; 0x03
    18ce:	82 83       	std	Z+2, r24	; 0x02
    18d0:	75 83       	std	Z+5, r23	; 0x05
    18d2:	64 83       	std	Z+4, r22	; 0x04
    18d4:	37 83       	std	Z+7, r19	; 0x07
    18d6:	26 83       	std	Z+6, r18	; 0x06
    18d8:	51 87       	std	Z+9, r21	; 0x09
    18da:	40 87       	std	Z+8, r20	; 0x08
    18dc:	0e 94 0a 02 	call	0x414	; 0x414 <sprintf>
    18e0:	8d b7       	in	r24, 0x3d	; 61
    18e2:	9e b7       	in	r25, 0x3e	; 62
    18e4:	0a 96       	adiw	r24, 0x0a	; 10
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	9e bf       	out	0x3e, r25	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	8d bf       	out	0x3d, r24	; 61
    18f0:	2a c0       	rjmp	.+84     	; 0x1946 <gpib_serial_poll+0x17a>
					"Status byte from device primary=0x%02x,secondary=0x%02x (physical) = 0x%02x\n\r",
					TalkerAddress2Address(primary), secondary, b);
		} else {
			sprintf((char*) cmd_buf,
    18f2:	8e 81       	ldd	r24, Y+6	; 0x06
    18f4:	88 2f       	mov	r24, r24
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	9c 01       	movw	r18, r24
    18fa:	20 54       	subi	r18, 0x40	; 64
    18fc:	30 40       	sbci	r19, 0x00	; 0
    18fe:	88 85       	ldd	r24, Y+8	; 0x08
    1900:	48 2f       	mov	r20, r24
    1902:	50 e0       	ldi	r21, 0x00	; 0
    1904:	8d b7       	in	r24, 0x3d	; 61
    1906:	9e b7       	in	r25, 0x3e	; 62
    1908:	08 97       	sbiw	r24, 0x08	; 8
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	9e bf       	out	0x3e, r25	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	8d bf       	out	0x3d, r24	; 61
    1914:	ed b7       	in	r30, 0x3d	; 61
    1916:	fe b7       	in	r31, 0x3e	; 62
    1918:	31 96       	adiw	r30, 0x01	; 1
    191a:	80 e5       	ldi	r24, 0x50	; 80
    191c:	95 e0       	ldi	r25, 0x05	; 5
    191e:	91 83       	std	Z+1, r25	; 0x01
    1920:	80 83       	st	Z, r24
    1922:	8f e8       	ldi	r24, 0x8F	; 143
    1924:	91 e0       	ldi	r25, 0x01	; 1
    1926:	93 83       	std	Z+3, r25	; 0x03
    1928:	82 83       	std	Z+2, r24	; 0x02
    192a:	35 83       	std	Z+5, r19	; 0x05
    192c:	24 83       	std	Z+4, r18	; 0x04
    192e:	57 83       	std	Z+7, r21	; 0x07
    1930:	46 83       	std	Z+6, r20	; 0x06
    1932:	0e 94 0a 02 	call	0x414	; 0x414 <sprintf>
    1936:	8d b7       	in	r24, 0x3d	; 61
    1938:	9e b7       	in	r25, 0x3e	; 62
    193a:	08 96       	adiw	r24, 0x08	; 8
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	9e bf       	out	0x3e, r25	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	8d bf       	out	0x3d, r24	; 61
					"Status byte from device primary=0x%02x (physical) = 0x%02x\n\r",
					TalkerAddress2Address(primary), b);
		}
		uart_puts((char*) cmd_buf);
    1946:	80 e5       	ldi	r24, 0x50	; 80
    1948:	95 e0       	ldi	r25, 0x05	; 5
    194a:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>

		// send UNT and UNL commands (unlisten and untalk)
		// effect: all talker stop talking and all listeners stop listening
		cmd_buf[0] = G_CMD_UNT;
    194e:	8f e5       	ldi	r24, 0x5F	; 95
    1950:	80 93 50 05 	sts	0x0550, r24
		gpib_cmd(cmd_buf, 1);
    1954:	80 e5       	ldi	r24, 0x50	; 80
    1956:	95 e0       	ldi	r25, 0x05	; 5
    1958:	61 e0       	ldi	r22, 0x01	; 1
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	0e 94 4b 07 	call	0xe96	; 0xe96 <gpib_cmd>
		cmd_buf[0] = G_CMD_UNL;
    1960:	8f e3       	ldi	r24, 0x3F	; 63
    1962:	80 93 50 05 	sts	0x0550, r24
		gpib_cmd(cmd_buf, 1);
    1966:	80 e5       	ldi	r24, 0x50	; 80
    1968:	95 e0       	ldi	r25, 0x05	; 5
    196a:	61 e0       	ldi	r22, 0x01	; 1
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	0e 94 4b 07 	call	0xe96	; 0xe96 <gpib_cmd>

		if (b & (1 << 6)) {
    1972:	88 85       	ldd	r24, Y+8	; 0x08
    1974:	88 2f       	mov	r24, r24
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	80 74       	andi	r24, 0x40	; 64
    197a:	90 70       	andi	r25, 0x00	; 0
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	81 f1       	breq	.+96     	; 0x19e0 <gpib_serial_poll+0x214>
			found = primary;
    1980:	8e 81       	ldd	r24, Y+6	; 0x06
    1982:	8c 83       	std	Y+4, r24	; 0x04
			foundPhysical = TalkerAddress2Address(found);
    1984:	8c 81       	ldd	r24, Y+4	; 0x04
    1986:	80 54       	subi	r24, 0x40	; 64
    1988:	8b 83       	std	Y+3, r24	; 0x03
			// bit 6 of status byte of SRQ emitter is 1
			// when reading status byte from emitter, he releases SRQ line (may also be tested here)
			sprintf((char*) cmd_buf,
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	8d 81       	ldd	r24, Y+5	; 0x05
    1992:	48 2f       	mov	r20, r24
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	8d b7       	in	r24, 0x3d	; 61
    1998:	9e b7       	in	r25, 0x3e	; 62
    199a:	08 97       	sbiw	r24, 0x08	; 8
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	9e bf       	out	0x3e, r25	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	8d bf       	out	0x3d, r24	; 61
    19a6:	ed b7       	in	r30, 0x3d	; 61
    19a8:	fe b7       	in	r31, 0x3e	; 62
    19aa:	31 96       	adiw	r30, 0x01	; 1
    19ac:	80 e5       	ldi	r24, 0x50	; 80
    19ae:	95 e0       	ldi	r25, 0x05	; 5
    19b0:	91 83       	std	Z+1, r25	; 0x01
    19b2:	80 83       	st	Z, r24
    19b4:	8c ec       	ldi	r24, 0xCC	; 204
    19b6:	91 e0       	ldi	r25, 0x01	; 1
    19b8:	93 83       	std	Z+3, r25	; 0x03
    19ba:	82 83       	std	Z+2, r24	; 0x02
    19bc:	35 83       	std	Z+5, r19	; 0x05
    19be:	24 83       	std	Z+4, r18	; 0x04
    19c0:	57 83       	std	Z+7, r21	; 0x07
    19c2:	46 83       	std	Z+6, r20	; 0x06
    19c4:	0e 94 0a 02 	call	0x414	; 0x414 <sprintf>
    19c8:	8d b7       	in	r24, 0x3d	; 61
    19ca:	9e b7       	in	r25, 0x3e	; 62
    19cc:	08 96       	adiw	r24, 0x08	; 8
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	9e bf       	out	0x3e, r25	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	8d bf       	out	0x3d, r24	; 61
					"SRQ emitter is device = 0x%02x (physical address), secondary = 0x%02x\n\r",
					foundPhysical, secondary);
			uart_puts((char*) cmd_buf);
    19d8:	80 e5       	ldi	r24, 0x50	; 80
    19da:	95 e0       	ldi	r25, 0x05	; 5
    19dc:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
	gpib_cmd(cmd_buf, 1);
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
			i++) {
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	9a 81       	ldd	r25, Y+2	; 0x02
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	9a 83       	std	Y+2, r25	; 0x02
    19e8:	89 83       	std	Y+1, r24	; 0x01
	cmd_buf[0] = G_CMD_SPE;
	gpib_cmd(cmd_buf, 1);
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	9a 81       	ldd	r25, Y+2	; 0x02
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	fc 01       	movw	r30, r24
    19f4:	e3 56       	subi	r30, 0x63	; 99
    19f6:	fb 4f       	sbci	r31, 0xFB	; 251
    19f8:	80 81       	ld	r24, Z
    19fa:	8f 3f       	cpi	r24, 0xFF	; 255
    19fc:	21 f0       	breq	.+8      	; 0x1a06 <gpib_serial_poll+0x23a>
    19fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1a00:	88 23       	and	r24, r24
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <gpib_serial_poll+0x23a>
    1a04:	14 cf       	rjmp	.-472    	; 0x182e <gpib_serial_poll+0x62>
		}
	}

	// serial poll disable
	// effect: all devices will return to normal behaviour as talker
	cmd_buf[0] = G_CMD_SPD;
    1a06:	89 e1       	ldi	r24, 0x19	; 25
    1a08:	80 93 50 05 	sts	0x0550, r24
	//uart_puts("before SPD\r\n");
	gpib_cmd(cmd_buf, 1);
    1a0c:	80 e5       	ldi	r24, 0x50	; 80
    1a0e:	95 e0       	ldi	r25, 0x05	; 5
    1a10:	61 e0       	ldi	r22, 0x01	; 1
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	0e 94 4b 07 	call	0xe96	; 0xe96 <gpib_cmd>
	//uart_puts("after SPD\r\n");

	// "return" values determined
	*primary_v = primary;
    1a18:	e9 85       	ldd	r30, Y+9	; 0x09
    1a1a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a1e:	80 83       	st	Z, r24
	*secondary_v = secondary;
    1a20:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a22:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a24:	8d 81       	ldd	r24, Y+5	; 0x05
    1a26:	80 83       	st	Z, r24

	return found;
    1a28:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1a2a:	2c 96       	adiw	r28, 0x0c	; 12
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	de bf       	out	0x3e, r29	; 62
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	cd bf       	out	0x3d, r28	; 61
    1a36:	cf 91       	pop	r28
    1a38:	df 91       	pop	r29
    1a3a:	08 95       	ret

00001a3c <gpib_set_partner_address>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_address(uchar primary, uchar secondary) {
    1a3c:	df 93       	push	r29
    1a3e:	cf 93       	push	r28
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <gpib_set_partner_address+0x6>
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	6a 83       	std	Y+2, r22	; 0x02
	controller.partner.primary = primary;
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	80 93 99 04 	sts	0x0499, r24
	controller.partner.secondary = secondary;
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	80 93 9a 04 	sts	0x049A, r24
}
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	08 95       	ret

00001a60 <gpib_set_partner_secondary>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_secondary(uchar secondary) {
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	0f 92       	push	r0
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	89 83       	std	Y+1, r24	; 0x01
	controller.partner.secondary = secondary;
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	80 93 9a 04 	sts	0x049A, r24
}
    1a72:	0f 90       	pop	r0
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <gpib_get_partner_pad>:

/**
 * Get primary address of device currently controlled.
 * \returns primary address Address of device.
 */
uchar gpib_get_partner_pad(void) {
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.primary;
    1a82:	80 91 99 04 	lds	r24, 0x0499
}
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	08 95       	ret

00001a8c <gpib_get_partner_sad>:

/**
 * Get secondary address of device currently controlled.
 * \returns secondary address Address of device.
 */
uchar gpib_get_partner_sad(void) {
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.secondary;
    1a94:	80 91 9a 04 	lds	r24, 0x049A
}
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <gpib_get_address>:

/**
 * Get controller address.
 * \returns address of controller.
 */
uchar gpib_get_address(void) {
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
	return controller.myaddress;
    1aa6:	80 91 98 04 	lds	r24, 0x0498
}
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <gpib_set_flavour>:

void gpib_set_flavour(uchar flavour) {
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	0f 92       	push	r0
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	89 83       	std	Y+1, r24	; 0x01
	controller.flavour = flavour;
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	80 93 9c 04 	sts	0x049C, r24
}
    1ac2:	0f 90       	pop	r0
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <gpib_get_flavour>:

uchar gpib_get_flavour(void) {
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
	return controller.flavour;
    1ad2:	80 91 9c 04 	lds	r24, 0x049C
}
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <gpib_clear_partners>:

/**
 * Clear partners list
 */
void gpib_clear_partners() {
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <gpib_clear_partners+0x6>
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < MAX_PARTNER; i++) {
    1ae6:	1a 82       	std	Y+2, r1	; 0x02
    1ae8:	19 82       	std	Y+1, r1	; 0x01
    1aea:	0e c0       	rjmp	.+28     	; 0x1b08 <gpib_clear_partners+0x2c>
		controller.partners[i].primary = ADDRESS_NOT_SET;
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	9a 81       	ldd	r25, Y+2	; 0x02
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	fc 01       	movw	r30, r24
    1af6:	e3 56       	subi	r30, 0x63	; 99
    1af8:	fb 4f       	sbci	r31, 0xFB	; 251
    1afa:	8f ef       	ldi	r24, 0xFF	; 255
    1afc:	80 83       	st	Z, r24

/**
 * Clear partners list
 */
void gpib_clear_partners() {
	for (int i = 0; i < MAX_PARTNER; i++) {
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	9a 81       	ldd	r25, Y+2	; 0x02
    1b02:	01 96       	adiw	r24, 0x01	; 1
    1b04:	9a 83       	std	Y+2, r25	; 0x02
    1b06:	89 83       	std	Y+1, r24	; 0x01
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0c:	85 30       	cpi	r24, 0x05	; 5
    1b0e:	91 05       	cpc	r25, r1
    1b10:	6c f3       	brlt	.-38     	; 0x1aec <gpib_clear_partners+0x10>
		controller.partners[i].primary = ADDRESS_NOT_SET;
	}
}
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <gpib_add_partner_address>:

/**
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <gpib_add_partner_address+0x6>
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <gpib_add_partner_address+0x8>
    1b24:	0f 92       	push	r0
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	8b 83       	std	Y+3, r24	; 0x03
    1b2c:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1b2e:	1a 82       	std	Y+2, r1	; 0x02
    1b30:	19 82       	std	Y+1, r1	; 0x01
    1b32:	05 c0       	rjmp	.+10     	; 0x1b3e <gpib_add_partner_address+0x22>
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
			i++) {
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	9a 81       	ldd	r25, Y+2	; 0x02
    1b38:	01 96       	adiw	r24, 0x01	; 1
    1b3a:	9a 83       	std	Y+2, r25	; 0x02
    1b3c:	89 83       	std	Y+1, r24	; 0x01
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	9a 81       	ldd	r25, Y+2	; 0x02
    1b42:	85 30       	cpi	r24, 0x05	; 5
    1b44:	91 05       	cpc	r25, r1
    1b46:	54 f4       	brge	.+20     	; 0x1b5c <gpib_add_partner_address+0x40>
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	fc 01       	movw	r30, r24
    1b52:	e3 56       	subi	r30, 0x63	; 99
    1b54:	fb 4f       	sbci	r31, 0xFB	; 251
    1b56:	80 81       	ld	r24, Z
    1b58:	8f 3f       	cpi	r24, 0xFF	; 255
    1b5a:	61 f7       	brne	.-40     	; 0x1b34 <gpib_add_partner_address+0x18>
			i++) {
	}
	if (i == MAX_PARTNER) {
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b60:	85 30       	cpi	r24, 0x05	; 5
    1b62:	91 05       	cpc	r25, r1
    1b64:	39 f4       	brne	.+14     	; 0x1b74 <gpib_add_partner_address+0x58>
		uart_puts("Too much partners.\n\r");
    1b66:	84 e1       	ldi	r24, 0x14	; 20
    1b68:	92 e0       	ldi	r25, 0x02	; 2
    1b6a:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
		return 1;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	8d 83       	std	Y+5, r24	; 0x05
    1b72:	14 c0       	rjmp	.+40     	; 0x1b9c <gpib_add_partner_address+0x80>
	}
	controller.partners[i].primary = primary;
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	9a 81       	ldd	r25, Y+2	; 0x02
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	e3 56       	subi	r30, 0x63	; 99
    1b80:	fb 4f       	sbci	r31, 0xFB	; 251
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	80 83       	st	Z, r24
	controller.partners[i].secondary = secondary;
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8a:	03 96       	adiw	r24, 0x03	; 3
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	fc 01       	movw	r30, r24
    1b92:	e8 56       	subi	r30, 0x68	; 104
    1b94:	fb 4f       	sbci	r31, 0xFB	; 251
    1b96:	8c 81       	ldd	r24, Y+4	; 0x04
    1b98:	80 83       	st	Z, r24
	return 0;
    1b9a:	1d 82       	std	Y+5, r1	; 0x05
    1b9c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <gpib_remove_partner_address>:

/**
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <gpib_remove_partner_address+0x6>
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <gpib_remove_partner_address+0x8>
    1bb6:	0f 92       	push	r0
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	8b 83       	std	Y+3, r24	; 0x03
    1bbe:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1bc0:	1a 82       	std	Y+2, r1	; 0x02
    1bc2:	19 82       	std	Y+1, r1	; 0x01
    1bc4:	05 c0       	rjmp	.+10     	; 0x1bd0 <gpib_remove_partner_address+0x22>
			i < MAX_PARTNER
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bca:	01 96       	adiw	r24, 0x01	; 1
    1bcc:	9a 83       	std	Y+2, r25	; 0x02
    1bce:	89 83       	std	Y+1, r24	; 0x01
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd4:	85 30       	cpi	r24, 0x05	; 5
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	bc f4       	brge	.+46     	; 0x1c08 <gpib_remove_partner_address+0x5a>
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	fc 01       	movw	r30, r24
    1be4:	e3 56       	subi	r30, 0x63	; 99
    1be6:	fb 4f       	sbci	r31, 0xFB	; 251
    1be8:	90 81       	ld	r25, Z
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	98 17       	cp	r25, r24
    1bee:	59 f7       	brne	.-42     	; 0x1bc6 <gpib_remove_partner_address+0x18>
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf4:	03 96       	adiw	r24, 0x03	; 3
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	e8 56       	subi	r30, 0x68	; 104
    1bfe:	fb 4f       	sbci	r31, 0xFB	; 251
    1c00:	90 81       	ld	r25, Z
    1c02:	8c 81       	ldd	r24, Y+4	; 0x04
    1c04:	98 17       	cp	r25, r24
    1c06:	f9 f6       	brne	.-66     	; 0x1bc6 <gpib_remove_partner_address+0x18>
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
	}
	if (i == MAX_PARTNER) {
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0c:	85 30       	cpi	r24, 0x05	; 5
    1c0e:	91 05       	cpc	r25, r1
    1c10:	39 f4       	brne	.+14     	; 0x1c20 <gpib_remove_partner_address+0x72>
		uart_puts("Partner unknown.\n\r");
    1c12:	89 e2       	ldi	r24, 0x29	; 41
    1c14:	92 e0       	ldi	r25, 0x02	; 2
    1c16:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
		return 1;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	8d 83       	std	Y+5, r24	; 0x05
    1c1e:	14 c0       	rjmp	.+40     	; 0x1c48 <gpib_remove_partner_address+0x9a>
	}
	controller.partners[i].primary = ADDRESS_NOT_SET;
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	9a 81       	ldd	r25, Y+2	; 0x02
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	fc 01       	movw	r30, r24
    1c2a:	e3 56       	subi	r30, 0x63	; 99
    1c2c:	fb 4f       	sbci	r31, 0xFB	; 251
    1c2e:	8f ef       	ldi	r24, 0xFF	; 255
    1c30:	80 83       	st	Z, r24
	controller.partners[i].secondary = ADDRESS_NOT_SET;
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	9a 81       	ldd	r25, Y+2	; 0x02
    1c36:	03 96       	adiw	r24, 0x03	; 3
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	e8 56       	subi	r30, 0x68	; 104
    1c40:	fb 4f       	sbci	r31, 0xFB	; 251
    1c42:	8f ef       	ldi	r24, 0xFF	; 255
    1c44:	80 83       	st	Z, r24
	return 0;
    1c46:	1d 82       	std	Y+5, r1	; 0x05
    1c48:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <arb_ramp>:
void receiveAnswer();

#define ARB_TEST
#ifdef ARB_TEST

void arb_ramp() {
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	2e 97       	sbiw	r28, 0x0e	; 14
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	f8 94       	cli
    1c68:	de bf       	out	0x3e, r29	; 62
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	cd bf       	out	0x3d, r28	; 61
	uchar b[10];

	gpib_prepare_write();
    1c6e:	0e 94 39 05 	call	0xa72	; 0xa72 <gpib_prepare_write>
	gpib_write_prologue(0);
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	0e 94 a7 07 	call	0xf4e	; 0xf4e <gpib_write_prologue>

	gpib_write_string("SOUR:LIST:SEGM:VOLT ");
    1c78:	8c e3       	ldi	r24, 0x3C	; 60
    1c7a:	92 e0       	ldi	r25, 0x02	; 2
    1c7c:	0e 94 31 08 	call	0x1062	; 0x1062 <gpib_write_string>

	for (int i = 0; i < 4096; i++) {
    1c80:	1c 82       	std	Y+4, r1	; 0x04
    1c82:	1b 82       	std	Y+3, r1	; 0x03
    1c84:	39 c0       	rjmp	.+114    	; 0x1cf8 <arb_ramp+0x9e>
		int f = i / 1000;
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8a:	28 ee       	ldi	r18, 0xE8	; 232
    1c8c:	33 e0       	ldi	r19, 0x03	; 3
    1c8e:	b9 01       	movw	r22, r18
    1c90:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodhi4>
    1c94:	cb 01       	movw	r24, r22
    1c96:	9a 83       	std	Y+2, r25	; 0x02
    1c98:	89 83       	std	Y+1, r24	; 0x01
		sprintf(b, "%d", f);
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <arb_ramp+0x42>
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <arb_ramp+0x44>
    1c9e:	00 d0       	rcall	.+0      	; 0x1ca0 <arb_ramp+0x46>
    1ca0:	ed b7       	in	r30, 0x3d	; 61
    1ca2:	fe b7       	in	r31, 0x3e	; 62
    1ca4:	31 96       	adiw	r30, 0x01	; 1
    1ca6:	ce 01       	movw	r24, r28
    1ca8:	05 96       	adiw	r24, 0x05	; 5
    1caa:	91 83       	std	Z+1, r25	; 0x01
    1cac:	80 83       	st	Z, r24
    1cae:	81 e5       	ldi	r24, 0x51	; 81
    1cb0:	92 e0       	ldi	r25, 0x02	; 2
    1cb2:	93 83       	std	Z+3, r25	; 0x03
    1cb4:	82 83       	std	Z+2, r24	; 0x02
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cba:	95 83       	std	Z+5, r25	; 0x05
    1cbc:	84 83       	std	Z+4, r24	; 0x04
    1cbe:	0e 94 0a 02 	call	0x414	; 0x414 <sprintf>
    1cc2:	8d b7       	in	r24, 0x3d	; 61
    1cc4:	9e b7       	in	r25, 0x3e	; 62
    1cc6:	06 96       	adiw	r24, 0x06	; 6
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	9e bf       	out	0x3e, r25	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	8d bf       	out	0x3d, r24	; 61
		gpib_write_byte(b[0], 0);
    1cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	0e 94 60 08 	call	0x10c0	; 0x10c0 <gpib_write_byte>
		if (i < 4096 - 1) {
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	2f e0       	ldi	r18, 0x0F	; 15
    1ce0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ce2:	92 07       	cpc	r25, r18
    1ce4:	24 f4       	brge	.+8      	; 0x1cee <arb_ramp+0x94>
			gpib_write_byte(',', 0);
    1ce6:	8c e2       	ldi	r24, 0x2C	; 44
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	0e 94 60 08 	call	0x10c0	; 0x10c0 <gpib_write_byte>
	gpib_prepare_write();
	gpib_write_prologue(0);

	gpib_write_string("SOUR:LIST:SEGM:VOLT ");

	for (int i = 0; i < 4096; i++) {
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	01 96       	adiw	r24, 0x01	; 1
    1cf4:	9c 83       	std	Y+4, r25	; 0x04
    1cf6:	8b 83       	std	Y+3, r24	; 0x03
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfc:	20 e1       	ldi	r18, 0x10	; 16
    1cfe:	80 30       	cpi	r24, 0x00	; 0
    1d00:	92 07       	cpc	r25, r18
    1d02:	0c f2       	brlt	.-126    	; 0x1c86 <arb_ramp+0x2c>
		if (i < 4096 - 1) {
			gpib_write_byte(',', 0);
		}
	}

	gpib_write_byte(ASCII_CODE_CR, 1);
    1d04:	8d e0       	ldi	r24, 0x0D	; 13
    1d06:	61 e0       	ldi	r22, 0x01	; 1
    1d08:	0e 94 60 08 	call	0x10c0	; 0x10c0 <gpib_write_byte>
	gpib_write_epilogue(0);
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	0e 94 f6 07 	call	0xfec	; 0xfec <gpib_write_epilogue>
	gpib_untalkUnlisten();
    1d12:	0e 94 a7 05 	call	0xb4e	; 0xb4e <gpib_untalkUnlisten>
}
    1d16:	2e 96       	adiw	r28, 0x0e	; 14
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <arb>:

void arb() {
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
	gpib_write_command("*RST");
    1d30:	84 e5       	ldi	r24, 0x54	; 84
    1d32:	92 e0       	ldi	r25, 0x02	; 2
    1d34:	0e 94 13 08 	call	0x1026	; 0x1026 <gpib_write_command>
	gpib_write_command("SOUR:ROSC:SOUR INT;");
    1d38:	89 e5       	ldi	r24, 0x59	; 89
    1d3a:	92 e0       	ldi	r25, 0x02	; 2
    1d3c:	0e 94 13 08 	call	0x1026	; 0x1026 <gpib_write_command>
	gpib_write_command(":SOUR:FREQ:FIX 1E3;");
    1d40:	8d e6       	ldi	r24, 0x6D	; 109
    1d42:	92 e0       	ldi	r25, 0x02	; 2
    1d44:	0e 94 13 08 	call	0x1026	; 0x1026 <gpib_write_command>
	gpib_write_command(":SOUR:FUNC:SHAP USER;");
    1d48:	81 e8       	ldi	r24, 0x81	; 129
    1d4a:	92 e0       	ldi	r25, 0x02	; 2
    1d4c:	0e 94 13 08 	call	0x1026	; 0x1026 <gpib_write_command>
	gpib_write_command(":SOUR:VOLT:LEV:IMM:AMPL 5V");
    1d50:	87 e9       	ldi	r24, 0x97	; 151
    1d52:	92 e0       	ldi	r25, 0x02	; 2
    1d54:	0e 94 13 08 	call	0x1026	; 0x1026 <gpib_write_command>
	gpib_write_command("SOUR:LIST:SEGM:SEL A"); // no ';' at end!
    1d58:	82 eb       	ldi	r24, 0xB2	; 178
    1d5a:	92 e0       	ldi	r25, 0x02	; 2
    1d5c:	0e 94 13 08 	call	0x1026	; 0x1026 <gpib_write_command>
	arb_ramp();
    1d60:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <arb_ramp>
	gpib_write_command("SOUR:FUNC:USER A");
    1d64:	87 ec       	ldi	r24, 0xC7	; 199
    1d66:	92 e0       	ldi	r25, 0x02	; 2
    1d68:	0e 94 13 08 	call	0x1026	; 0x1026 <gpib_write_command>
	gpib_write_command("INIT:IMM");
    1d6c:	88 ed       	ldi	r24, 0xD8	; 216
    1d6e:	92 e0       	ldi	r25, 0x02	; 2
    1d70:	0e 94 13 08 	call	0x1026	; 0x1026 <gpib_write_command>
	//send_command("SOUR:LIST:SEGM:SEL?");
}
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <stringToTwoUchars>:

/**
 * Read two integers from string like "45 56" or one integer. In latter case
 * the second integer is initialized with a special value.
 */
static void stringToTwoUchars(char *string, uchar *a, uchar *b) {
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	28 97       	sbiw	r28, 0x08	; 8
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	cd bf       	out	0x3d, r28	; 61
    1d8e:	9c 83       	std	Y+4, r25	; 0x04
    1d90:	8b 83       	std	Y+3, r24	; 0x03
    1d92:	7e 83       	std	Y+6, r23	; 0x06
    1d94:	6d 83       	std	Y+5, r22	; 0x05
    1d96:	58 87       	std	Y+8, r21	; 0x08
    1d98:	4f 83       	std	Y+7, r20	; 0x07
	char *token = strtok(string, " ");
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	21 ee       	ldi	r18, 0xE1	; 225
    1da0:	32 e0       	ldi	r19, 0x02	; 2
    1da2:	b9 01       	movw	r22, r18
    1da4:	0e 94 b4 01 	call	0x368	; 0x368 <strtok>
    1da8:	9a 83       	std	Y+2, r25	; 0x02
    1daa:	89 83       	std	Y+1, r24	; 0x01
	*a = atoi((char*) token);
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	0e 94 96 01 	call	0x32c	; 0x32c <atoi>
    1db4:	ed 81       	ldd	r30, Y+5	; 0x05
    1db6:	fe 81       	ldd	r31, Y+6	; 0x06
    1db8:	80 83       	st	Z, r24
	token = strtok(NULL, " ");
    1dba:	21 ee       	ldi	r18, 0xE1	; 225
    1dbc:	32 e0       	ldi	r19, 0x02	; 2
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	b9 01       	movw	r22, r18
    1dc4:	0e 94 b4 01 	call	0x368	; 0x368 <strtok>
    1dc8:	9a 83       	std	Y+2, r25	; 0x02
    1dca:	89 83       	std	Y+1, r24	; 0x01
	if (token != NULL) {
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd0:	00 97       	sbiw	r24, 0x00	; 0
    1dd2:	41 f0       	breq	.+16     	; 0x1de4 <stringToTwoUchars+0x6a>
		*b = atoi((char*) token);
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd8:	0e 94 96 01 	call	0x32c	; 0x32c <atoi>
    1ddc:	ef 81       	ldd	r30, Y+7	; 0x07
    1dde:	f8 85       	ldd	r31, Y+8	; 0x08
    1de0:	80 83       	st	Z, r24
    1de2:	04 c0       	rjmp	.+8      	; 0x1dec <stringToTwoUchars+0x72>
	} else {
		*b = ADDRESS_NOT_SET;
    1de4:	ef 81       	ldd	r30, Y+7	; 0x07
    1de6:	f8 85       	ldd	r31, Y+8	; 0x08
    1de8:	8f ef       	ldi	r24, 0xFF	; 255
    1dea:	80 83       	st	Z, r24
	}
}
    1dec:	28 96       	adiw	r28, 0x08	; 8
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	de bf       	out	0x3e, r29	; 62
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	cd bf       	out	0x3d, r28	; 61
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <check_errors>:
 * Checks for errors.
 *
 * Reads error queue. output is one error per line.
 *
 */
void check_errors() {
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	c7 55       	subi	r28, 0x57	; 87
    1e08:	d0 40       	sbci	r29, 0x00	; 0
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
	char *error_cmd = "SYST:ERR?";
    1e14:	83 ee       	ldi	r24, 0xE3	; 227
    1e16:	92 e0       	ldi	r25, 0x02	; 2
    1e18:	9e 83       	std	Y+6, r25	; 0x06
    1e1a:	8d 83       	std	Y+5, r24	; 0x05
	uchar msg[80];
	uchar b, e;
	uchar colptr = 0;
    1e1c:	1b 82       	std	Y+3, r1	; 0x03
	uchar allErrorsRead = 0;
    1e1e:	1a 82       	std	Y+2, r1	; 0x02
    1e20:	48 c0       	rjmp	.+144    	; 0x1eb2 <check_errors+0xb4>

	while (!allErrorsRead) {
		gpib_write_command(error_cmd);
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	9e 81       	ldd	r25, Y+6	; 0x06
    1e26:	0e 94 13 08 	call	0x1026	; 0x1026 <gpib_write_command>
		gpib_prepare_read();
    1e2a:	0e 94 70 05 	call	0xae0	; 0xae0 <gpib_prepare_read>
		// read the answer until EOI is detected (then e becomes true)
		uchar i = 0;
    1e2e:	19 82       	std	Y+1, r1	; 0x01
		do {
			// gpib bus receive
			e = gpib_receive(&b);
    1e30:	ce 01       	movw	r24, r28
    1e32:	89 5a       	subi	r24, 0xA9	; 169
    1e34:	9f 4f       	sbci	r25, 0xFF	; 255
    1e36:	0e 94 ca 05 	call	0xb94	; 0xb94 <gpib_receive>
    1e3a:	8c 83       	std	Y+4, r24	; 0x04
			msg[i++] = b;
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	fe 01       	movw	r30, r28
    1e44:	e9 5a       	subi	r30, 0xA9	; 169
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	40 81       	ld	r20, Z
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	07 96       	adiw	r24, 0x07	; 7
    1e4e:	fc 01       	movw	r30, r24
    1e50:	e2 0f       	add	r30, r18
    1e52:	f3 1f       	adc	r31, r19
    1e54:	40 83       	st	Z, r20
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	8f 5f       	subi	r24, 0xFF	; 255
    1e5a:	89 83       	std	Y+1, r24	; 0x01
		} while (!e);
    1e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5e:	88 23       	and	r24, r24
    1e60:	39 f3       	breq	.-50     	; 0x1e30 <check_errors+0x32>
		// terminate string
		//msg[i++] = '\n';
		msg[i++] = '\r';
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	ce 01       	movw	r24, r28
    1e6a:	07 96       	adiw	r24, 0x07	; 7
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	e2 0f       	add	r30, r18
    1e70:	f3 1f       	adc	r31, r19
    1e72:	8d e0       	ldi	r24, 0x0D	; 13
    1e74:	80 83       	st	Z, r24
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	8f 5f       	subi	r24, 0xFF	; 255
    1e7a:	89 83       	std	Y+1, r24	; 0x01
		msg[i] = 0x00;
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	ce 01       	movw	r24, r28
    1e84:	07 96       	adiw	r24, 0x07	; 7
    1e86:	fc 01       	movw	r30, r24
    1e88:	e2 0f       	add	r30, r18
    1e8a:	f3 1f       	adc	r31, r19
    1e8c:	10 82       	st	Z, r1
		// check if all errors have been read
		if (strncmp(msg,"+0,",3)==0) {
    1e8e:	ce 01       	movw	r24, r28
    1e90:	07 96       	adiw	r24, 0x07	; 7
    1e92:	2d ee       	ldi	r18, 0xED	; 237
    1e94:	32 e0       	ldi	r19, 0x02	; 2
    1e96:	b9 01       	movw	r22, r18
    1e98:	43 e0       	ldi	r20, 0x03	; 3
    1e9a:	50 e0       	ldi	r21, 0x00	; 0
    1e9c:	0e 94 c2 01 	call	0x384	; 0x384 <strncmp>
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	19 f4       	brne	.+6      	; 0x1eaa <check_errors+0xac>
			allErrorsRead=1;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	8a 83       	std	Y+2, r24	; 0x02
    1ea8:	04 c0       	rjmp	.+8      	; 0x1eb2 <check_errors+0xb4>
		} else {
			uart_puts((char*) msg);
    1eaa:	ce 01       	movw	r24, r28
    1eac:	07 96       	adiw	r24, 0x07	; 7
    1eae:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
	uchar msg[80];
	uchar b, e;
	uchar colptr = 0;
	uchar allErrorsRead = 0;

	while (!allErrorsRead) {
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	88 23       	and	r24, r24
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <check_errors+0xbc>
    1eb8:	b4 cf       	rjmp	.-152    	; 0x1e22 <check_errors+0x24>
			allErrorsRead=1;
		} else {
			uart_puts((char*) msg);
		}
	}
}
    1eba:	c9 5a       	subi	r28, 0xA9	; 169
    1ebc:	df 4f       	sbci	r29, 0xFF	; 255
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <input_char>:

/**
 * Reads in character into parameter c. Checks for errors and prints them out.
 * Returns 0 if there is no char to read, 1 if there was a char read in.
 */
uchar input_char(uchar *ch) {
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	00 d0       	rcall	.+0      	; 0x1ed4 <input_char+0x6>
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <input_char+0x8>
    1ed6:	0f 92       	push	r0
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	9c 83       	std	Y+4, r25	; 0x04
    1ede:	8b 83       	std	Y+3, r24	; 0x03
	 * uart_getc() returns in the lower byte the received character and
	 * in the higher byte (bitmask) the last receive error
	 * UART_NO_DATA is returned when no data is available.
	 *
	 */
	c = uart_getc();
    1ee0:	0e 94 f5 15 	call	0x2bea	; 0x2bea <uart_getc>
    1ee4:	9a 83       	std	Y+2, r25	; 0x02
    1ee6:	89 83       	std	Y+1, r24	; 0x01
	if (c & UART_NO_DATA) {
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	9a 81       	ldd	r25, Y+2	; 0x02
    1eec:	80 70       	andi	r24, 0x00	; 0
    1eee:	91 70       	andi	r25, 0x01	; 1
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	11 f0       	breq	.+4      	; 0x1ef8 <input_char+0x2a>
		// no data available from UART
		return 0;
    1ef4:	1d 82       	std	Y+5, r1	; 0x05
    1ef6:	24 c0       	rjmp	.+72     	; 0x1f40 <input_char+0x72>
	}
	// make uchar from character in int value
	*ch = (uchar) c;
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	eb 81       	ldd	r30, Y+3	; 0x03
    1efc:	fc 81       	ldd	r31, Y+4	; 0x04
    1efe:	80 83       	st	Z, r24

	/*
	 * new data available from UART
	 * check for Frame or Overrun error
	 */
	if (c & UART_FRAME_ERROR) {
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	9a 81       	ldd	r25, Y+2	; 0x02
    1f04:	80 70       	andi	r24, 0x00	; 0
    1f06:	98 70       	andi	r25, 0x08	; 8
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	21 f0       	breq	.+8      	; 0x1f14 <input_char+0x46>
		/* Framing Error detected, i.e no stop bit detected */
		uart_puts_P("UART Frame Error: ");
    1f0c:	81 e8       	ldi	r24, 0x81	; 129
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
	}
	if (c & UART_OVERRUN_ERROR) {
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	9a 81       	ldd	r25, Y+2	; 0x02
    1f18:	80 70       	andi	r24, 0x00	; 0
    1f1a:	94 70       	andi	r25, 0x04	; 4
    1f1c:	00 97       	sbiw	r24, 0x00	; 0
    1f1e:	21 f0       	breq	.+8      	; 0x1f28 <input_char+0x5a>
		/*
		 * Overrun, a character already present in the UART UDR register was
		 * not read by the interrupt handler before the next character arrived,
		 * one or more received characters have been dropped
		 */
		uart_puts_P("UART Overrun Error: ");
    1f20:	8c e6       	ldi	r24, 0x6C	; 108
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
	}
	if (c & UART_BUFFER_OVERFLOW) {
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2c:	80 70       	andi	r24, 0x00	; 0
    1f2e:	92 70       	andi	r25, 0x02	; 2
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	21 f0       	breq	.+8      	; 0x1f3c <input_char+0x6e>
		/*
		 * We are not reading the receive buffer fast enough,
		 * one or more received character have been dropped
		 */
		uart_puts_P("Buffer overflow error: ");
    1f34:	84 e5       	ldi	r24, 0x54	; 84
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
	}
	return 1;
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	8d 83       	std	Y+5, r24	; 0x05
    1f40:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <process_char>:
 * a) xon/xoff mode forward buffer to GPIB
 * b) no flow control: prints error message that input buffer is full.
 *
 * Returns 1 if command end is detected, 0 otherwise.
 */
uchar process_char(uchar *buf, uchar ch, int *ptr) {
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <process_char+0x6>
    1f58:	00 d0       	rcall	.+0      	; 0x1f5a <process_char+0x8>
    1f5a:	00 d0       	rcall	.+0      	; 0x1f5c <process_char+0xa>
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	9b 83       	std	Y+3, r25	; 0x03
    1f62:	8a 83       	std	Y+2, r24	; 0x02
    1f64:	6c 83       	std	Y+4, r22	; 0x04
    1f66:	5e 83       	std	Y+6, r21	; 0x06
    1f68:	4d 83       	std	Y+5, r20	; 0x05
	uchar ret = 0;
    1f6a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * send received character back depending on global flag
	 */
	if (rs232_remote_echo) {
    1f6c:	80 91 91 04 	lds	r24, 0x0491
    1f70:	88 23       	and	r24, r24
    1f72:	19 f0       	breq	.+6      	; 0x1f7a <process_char+0x28>
		uart_putc((unsigned char) ch);
    1f74:	8c 81       	ldd	r24, Y+4	; 0x04
    1f76:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <uart_putc>
	}

	// if input buffer is not full, add char
	if (*ptr < COMMAND_INPUT_BUFFER_SIZE - 1) {
    1f7a:	ed 81       	ldd	r30, Y+5	; 0x05
    1f7c:	fe 81       	ldd	r31, Y+6	; 0x06
    1f7e:	80 81       	ld	r24, Z
    1f80:	91 81       	ldd	r25, Z+1	; 0x01
    1f82:	8f 34       	cpi	r24, 0x4F	; 79
    1f84:	91 05       	cpc	r25, r1
    1f86:	ec f4       	brge	.+58     	; 0x1fc2 <process_char+0x70>
		buf[(*ptr)++] = ch;
    1f88:	ed 81       	ldd	r30, Y+5	; 0x05
    1f8a:	fe 81       	ldd	r31, Y+6	; 0x06
    1f8c:	40 81       	ld	r20, Z
    1f8e:	51 81       	ldd	r21, Z+1	; 0x01
    1f90:	9a 01       	movw	r18, r20
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	9b 81       	ldd	r25, Y+3	; 0x03
    1f96:	fc 01       	movw	r30, r24
    1f98:	e2 0f       	add	r30, r18
    1f9a:	f3 1f       	adc	r31, r19
    1f9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9e:	80 83       	st	Z, r24
    1fa0:	ca 01       	movw	r24, r20
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    1fa4:	ed 81       	ldd	r30, Y+5	; 0x05
    1fa6:	fe 81       	ldd	r31, Y+6	; 0x06
    1fa8:	91 83       	std	Z+1, r25	; 0x01
    1faa:	80 83       	st	Z, r24
		buf[*ptr] = '\0';
    1fac:	ed 81       	ldd	r30, Y+5	; 0x05
    1fae:	fe 81       	ldd	r31, Y+6	; 0x06
    1fb0:	80 81       	ld	r24, Z
    1fb2:	91 81       	ldd	r25, Z+1	; 0x01
    1fb4:	9c 01       	movw	r18, r24
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fba:	fc 01       	movw	r30, r24
    1fbc:	e2 0f       	add	r30, r18
    1fbe:	f3 1f       	adc	r31, r19
    1fc0:	10 82       	st	Z, r1
	}

	// if command ends or buffer is full ...
	if (ch == ASCII_CODE_CR || *ptr >= COMMAND_INPUT_BUFFER_SIZE - 1) {
    1fc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc4:	8d 30       	cpi	r24, 0x0D	; 13
    1fc6:	39 f0       	breq	.+14     	; 0x1fd6 <process_char+0x84>
    1fc8:	ed 81       	ldd	r30, Y+5	; 0x05
    1fca:	fe 81       	ldd	r31, Y+6	; 0x06
    1fcc:	80 81       	ld	r24, Z
    1fce:	91 81       	ldd	r25, Z+1	; 0x01
    1fd0:	8f 34       	cpi	r24, 0x4F	; 79
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	14 f1       	brlt	.+68     	; 0x201a <process_char+0xc8>
		if (ch == ASCII_CODE_CR) {
    1fd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd8:	8d 30       	cpi	r24, 0x0D	; 13
    1fda:	b9 f4       	brne	.+46     	; 0x200a <process_char+0xb8>
			// adjust string terminator
			buf[--(*ptr)] = '\0';
    1fdc:	ed 81       	ldd	r30, Y+5	; 0x05
    1fde:	fe 81       	ldd	r31, Y+6	; 0x06
    1fe0:	80 81       	ld	r24, Z
    1fe2:	91 81       	ldd	r25, Z+1	; 0x01
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	ed 81       	ldd	r30, Y+5	; 0x05
    1fe8:	fe 81       	ldd	r31, Y+6	; 0x06
    1fea:	91 83       	std	Z+1, r25	; 0x01
    1fec:	80 83       	st	Z, r24
    1fee:	ed 81       	ldd	r30, Y+5	; 0x05
    1ff0:	fe 81       	ldd	r31, Y+6	; 0x06
    1ff2:	80 81       	ld	r24, Z
    1ff4:	91 81       	ldd	r25, Z+1	; 0x01
    1ff6:	9c 01       	movw	r18, r24
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	e2 0f       	add	r30, r18
    2000:	f3 1f       	adc	r31, r19
    2002:	10 82       	st	Z, r1
			// let calling function send last command part (or command itself)
			ret = 1;
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	08 c0       	rjmp	.+16     	; 0x201a <process_char+0xc8>
		} else {
			// send intermediate part of command.
			uart_puts_P("Command overflow.");
    200a:	84 e9       	ldi	r24, 0x94	; 148
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
			*ptr = 0;
    2012:	ed 81       	ldd	r30, Y+5	; 0x05
    2014:	fe 81       	ldd	r31, Y+6	; 0x06
    2016:	11 82       	std	Z+1, r1	; 0x01
    2018:	10 82       	st	Z, r1
		}
	}
	return ret;
    201a:	89 81       	ldd	r24, Y+1	; 0x01
}
    201c:	26 96       	adiw	r28, 0x06	; 6
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <input_process>:
 * This approach handles small single line commands (needing no flow control) and large
 * multi-line commands if flow control is xon/xoff.
 *
 * \returns The character read in
 */
uchar input_process(uchar *buf, int *ptr) {
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    2036:	27 97       	sbiw	r28, 0x07	; 7
    2038:	0f b6       	in	r0, 0x3f	; 63
    203a:	f8 94       	cli
    203c:	de bf       	out	0x3e, r29	; 62
    203e:	0f be       	out	0x3f, r0	; 63
    2040:	cd bf       	out	0x3d, r28	; 61
    2042:	9c 83       	std	Y+4, r25	; 0x04
    2044:	8b 83       	std	Y+3, r24	; 0x03
    2046:	7e 83       	std	Y+6, r23	; 0x06
    2048:	6d 83       	std	Y+5, r22	; 0x05
	uchar ch, ret = 0;
    204a:	19 82       	std	Y+1, r1	; 0x01

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
    204c:	0e 94 ef 14 	call	0x29de	; 0x29de <uart_get_flow_control>
    2050:	81 30       	cpi	r24, 0x01	; 1
    2052:	b9 f4       	brne	.+46     	; 0x2082 <input_process+0x54>
    2054:	12 c0       	rjmp	.+36     	; 0x207a <input_process+0x4c>
		while (!ret) {
			// if nothing can be read in, return
			if (!input_char(&ch)) {
    2056:	ce 01       	movw	r24, r28
    2058:	02 96       	adiw	r24, 0x02	; 2
    205a:	0e 94 67 0f 	call	0x1ece	; 0x1ece <input_char>
    205e:	88 23       	and	r24, r24
    2060:	11 f4       	brne	.+4      	; 0x2066 <input_process+0x38>
				return 0;
    2062:	1f 82       	std	Y+7, r1	; 0x07
    2064:	22 c0       	rjmp	.+68     	; 0x20aa <input_process+0x7c>
			}
			ret = process_char(buf, ch, ptr);
    2066:	4a 81       	ldd	r20, Y+2	; 0x02
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	9c 81       	ldd	r25, Y+4	; 0x04
    206c:	2d 81       	ldd	r18, Y+5	; 0x05
    206e:	3e 81       	ldd	r19, Y+6	; 0x06
    2070:	64 2f       	mov	r22, r20
    2072:	a9 01       	movw	r20, r18
    2074:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <process_char>
    2078:	89 83       	std	Y+1, r24	; 0x01
 */
uchar input_process(uchar *buf, int *ptr) {
	uchar ch, ret = 0;

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
		while (!ret) {
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	88 23       	and	r24, r24
    207e:	59 f3       	breq	.-42     	; 0x2056 <input_process+0x28>
    2080:	12 c0       	rjmp	.+36     	; 0x20a6 <input_process+0x78>
			}
			ret = process_char(buf, ch, ptr);
		}
	} else {
		// if nothing can be read in, return
		if (!input_char(&ch)) {
    2082:	ce 01       	movw	r24, r28
    2084:	02 96       	adiw	r24, 0x02	; 2
    2086:	0e 94 67 0f 	call	0x1ece	; 0x1ece <input_char>
    208a:	88 23       	and	r24, r24
    208c:	11 f4       	brne	.+4      	; 0x2092 <input_process+0x64>
			return 0;
    208e:	1f 82       	std	Y+7, r1	; 0x07
    2090:	0c c0       	rjmp	.+24     	; 0x20aa <input_process+0x7c>
		}
		ret = process_char(buf, ch, ptr);
    2092:	4a 81       	ldd	r20, Y+2	; 0x02
    2094:	8b 81       	ldd	r24, Y+3	; 0x03
    2096:	9c 81       	ldd	r25, Y+4	; 0x04
    2098:	2d 81       	ldd	r18, Y+5	; 0x05
    209a:	3e 81       	ldd	r19, Y+6	; 0x06
    209c:	64 2f       	mov	r22, r20
    209e:	a9 01       	movw	r20, r18
    20a0:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <process_char>
    20a4:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	8f 83       	std	Y+7, r24	; 0x07
    20aa:	8f 81       	ldd	r24, Y+7	; 0x07
}
    20ac:	27 96       	adiw	r28, 0x07	; 7
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <handle_internal_commands>:

/**
 * Handles builtin commands.
 */
void handle_internal_commands(uchar *cmd) {
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	00 d0       	rcall	.+0      	; 0x20c4 <handle_internal_commands+0x6>
    20c4:	00 d0       	rcall	.+0      	; 0x20c6 <handle_internal_commands+0x8>
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <handle_internal_commands+0xa>
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	9c 83       	std	Y+4, r25	; 0x04
    20ce:	8b 83       	std	Y+3, r24	; 0x03
	uchar val, val1;

	switch (cmd[1]) {
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	fc 01       	movw	r30, r24
    20d6:	31 96       	adiw	r30, 0x01	; 1
    20d8:	80 81       	ld	r24, Z
    20da:	28 2f       	mov	r18, r24
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	3e 83       	std	Y+6, r19	; 0x06
    20e0:	2d 83       	std	Y+5, r18	; 0x05
    20e2:	8d 81       	ldd	r24, Y+5	; 0x05
    20e4:	9e 81       	ldd	r25, Y+6	; 0x06
    20e6:	88 36       	cpi	r24, 0x68	; 104
    20e8:	91 05       	cpc	r25, r1
    20ea:	09 f4       	brne	.+2      	; 0x20ee <handle_internal_commands+0x30>
    20ec:	40 c1       	rjmp	.+640    	; 0x236e <handle_internal_commands+0x2b0>
    20ee:	2d 81       	ldd	r18, Y+5	; 0x05
    20f0:	3e 81       	ldd	r19, Y+6	; 0x06
    20f2:	29 36       	cpi	r18, 0x69	; 105
    20f4:	31 05       	cpc	r19, r1
    20f6:	f4 f4       	brge	.+60     	; 0x2134 <handle_internal_commands+0x76>
    20f8:	8d 81       	ldd	r24, Y+5	; 0x05
    20fa:	9e 81       	ldd	r25, Y+6	; 0x06
    20fc:	81 36       	cpi	r24, 0x61	; 97
    20fe:	91 05       	cpc	r25, r1
    2100:	c1 f1       	breq	.+112    	; 0x2172 <handle_internal_commands+0xb4>
    2102:	2d 81       	ldd	r18, Y+5	; 0x05
    2104:	3e 81       	ldd	r19, Y+6	; 0x06
    2106:	22 36       	cpi	r18, 0x62	; 98
    2108:	31 05       	cpc	r19, r1
    210a:	6c f4       	brge	.+26     	; 0x2126 <handle_internal_commands+0x68>
    210c:	8d 81       	ldd	r24, Y+5	; 0x05
    210e:	9e 81       	ldd	r25, Y+6	; 0x06
    2110:	8b 32       	cpi	r24, 0x2B	; 43
    2112:	91 05       	cpc	r25, r1
    2114:	09 f4       	brne	.+2      	; 0x2118 <handle_internal_commands+0x5a>
    2116:	96 c0       	rjmp	.+300    	; 0x2244 <handle_internal_commands+0x186>
    2118:	2d 81       	ldd	r18, Y+5	; 0x05
    211a:	3e 81       	ldd	r19, Y+6	; 0x06
    211c:	2d 32       	cpi	r18, 0x2D	; 45
    211e:	31 05       	cpc	r19, r1
    2120:	09 f4       	brne	.+2      	; 0x2124 <handle_internal_commands+0x66>
    2122:	ce c0       	rjmp	.+412    	; 0x22c0 <handle_internal_commands+0x202>
    2124:	c6 c1       	rjmp	.+908    	; 0x24b2 <handle_internal_commands+0x3f4>
    2126:	8d 81       	ldd	r24, Y+5	; 0x05
    2128:	9e 81       	ldd	r25, Y+6	; 0x06
    212a:	85 36       	cpi	r24, 0x65	; 101
    212c:	91 05       	cpc	r25, r1
    212e:	09 f4       	brne	.+2      	; 0x2132 <handle_internal_commands+0x74>
    2130:	ae c1       	rjmp	.+860    	; 0x248e <handle_internal_commands+0x3d0>
    2132:	bf c1       	rjmp	.+894    	; 0x24b2 <handle_internal_commands+0x3f4>
    2134:	2d 81       	ldd	r18, Y+5	; 0x05
    2136:	3e 81       	ldd	r19, Y+6	; 0x06
    2138:	23 37       	cpi	r18, 0x73	; 115
    213a:	31 05       	cpc	r19, r1
    213c:	09 f4       	brne	.+2      	; 0x2140 <handle_internal_commands+0x82>
    213e:	57 c0       	rjmp	.+174    	; 0x21ee <handle_internal_commands+0x130>
    2140:	8d 81       	ldd	r24, Y+5	; 0x05
    2142:	9e 81       	ldd	r25, Y+6	; 0x06
    2144:	84 37       	cpi	r24, 0x74	; 116
    2146:	91 05       	cpc	r25, r1
    2148:	3c f4       	brge	.+14     	; 0x2158 <handle_internal_commands+0x9a>
    214a:	2d 81       	ldd	r18, Y+5	; 0x05
    214c:	3e 81       	ldd	r19, Y+6	; 0x06
    214e:	29 36       	cpi	r18, 0x69	; 105
    2150:	31 05       	cpc	r19, r1
    2152:	09 f4       	brne	.+2      	; 0x2156 <handle_internal_commands+0x98>
    2154:	0f c1       	rjmp	.+542    	; 0x2374 <handle_internal_commands+0x2b6>
    2156:	ad c1       	rjmp	.+858    	; 0x24b2 <handle_internal_commands+0x3f4>
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	9e 81       	ldd	r25, Y+6	; 0x06
    215c:	88 37       	cpi	r24, 0x78	; 120
    215e:	91 05       	cpc	r25, r1
    2160:	09 f4       	brne	.+2      	; 0x2164 <handle_internal_commands+0xa6>
    2162:	ec c0       	rjmp	.+472    	; 0x233c <handle_internal_commands+0x27e>
    2164:	2d 81       	ldd	r18, Y+5	; 0x05
    2166:	3e 81       	ldd	r19, Y+6	; 0x06
    2168:	2a 37       	cpi	r18, 0x7A	; 122
    216a:	31 05       	cpc	r19, r1
    216c:	09 f4       	brne	.+2      	; 0x2170 <handle_internal_commands+0xb2>
    216e:	96 c1       	rjmp	.+812    	; 0x249c <handle_internal_commands+0x3de>
    2170:	a0 c1       	rjmp	.+832    	; 0x24b2 <handle_internal_commands+0x3f4>
	case 'a':
		/* set partner primary+secondary address */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	9c 81       	ldd	r25, Y+4	; 0x04
    2176:	02 96       	adiw	r24, 0x02	; 2
    2178:	ae 01       	movw	r20, r28
    217a:	4e 5f       	subi	r20, 0xFE	; 254
    217c:	5f 4f       	sbci	r21, 0xFF	; 255
    217e:	9e 01       	movw	r18, r28
    2180:	2f 5f       	subi	r18, 0xFF	; 255
    2182:	3f 4f       	sbci	r19, 0xFF	; 255
    2184:	b9 01       	movw	r22, r18
    2186:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <stringToTwoUchars>
		sprintf(cmd, "Set partner address, primary: %u , secondary: %u\n\r",
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	48 2f       	mov	r20, r24
    2194:	50 e0       	ldi	r21, 0x00	; 0
    2196:	8d b7       	in	r24, 0x3d	; 61
    2198:	9e b7       	in	r25, 0x3e	; 62
    219a:	08 97       	sbiw	r24, 0x08	; 8
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	9e bf       	out	0x3e, r25	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	8d bf       	out	0x3d, r24	; 61
    21a6:	ed b7       	in	r30, 0x3d	; 61
    21a8:	fe b7       	in	r31, 0x3e	; 62
    21aa:	31 96       	adiw	r30, 0x01	; 1
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	9c 81       	ldd	r25, Y+4	; 0x04
    21b0:	91 83       	std	Z+1, r25	; 0x01
    21b2:	80 83       	st	Z, r24
    21b4:	81 ef       	ldi	r24, 0xF1	; 241
    21b6:	92 e0       	ldi	r25, 0x02	; 2
    21b8:	93 83       	std	Z+3, r25	; 0x03
    21ba:	82 83       	std	Z+2, r24	; 0x02
    21bc:	35 83       	std	Z+5, r19	; 0x05
    21be:	24 83       	std	Z+4, r18	; 0x04
    21c0:	57 83       	std	Z+7, r21	; 0x07
    21c2:	46 83       	std	Z+6, r20	; 0x06
    21c4:	0e 94 0a 02 	call	0x414	; 0x414 <sprintf>
    21c8:	2d b7       	in	r18, 0x3d	; 61
    21ca:	3e b7       	in	r19, 0x3e	; 62
    21cc:	28 5f       	subi	r18, 0xF8	; 248
    21ce:	3f 4f       	sbci	r19, 0xFF	; 255
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	3e bf       	out	0x3e, r19	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	2d bf       	out	0x3d, r18	; 61
				val, val1);
		uart_puts(cmd);
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	9c 81       	ldd	r25, Y+4	; 0x04
    21de:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
		gpib_set_partner_address(val, val1);
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
    21e6:	69 2f       	mov	r22, r25
    21e8:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <gpib_set_partner_address>
    21ec:	68 c1       	rjmp	.+720    	; 0x24be <handle_internal_commands+0x400>
		break;
	case 's':
		/* set partner secondary address */
		val = atoi((char*) (&(cmd[2])));
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	9c 81       	ldd	r25, Y+4	; 0x04
    21f2:	02 96       	adiw	r24, 0x02	; 2
    21f4:	0e 94 96 01 	call	0x32c	; 0x32c <atoi>
    21f8:	89 83       	std	Y+1, r24	; 0x01
		sprintf(cmd, "Set partner secondary address to %u\n\r", val);
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	28 2f       	mov	r18, r24
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	00 d0       	rcall	.+0      	; 0x2202 <handle_internal_commands+0x144>
    2202:	00 d0       	rcall	.+0      	; 0x2204 <handle_internal_commands+0x146>
    2204:	00 d0       	rcall	.+0      	; 0x2206 <handle_internal_commands+0x148>
    2206:	ed b7       	in	r30, 0x3d	; 61
    2208:	fe b7       	in	r31, 0x3e	; 62
    220a:	31 96       	adiw	r30, 0x01	; 1
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	9c 81       	ldd	r25, Y+4	; 0x04
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	80 83       	st	Z, r24
    2214:	84 e2       	ldi	r24, 0x24	; 36
    2216:	93 e0       	ldi	r25, 0x03	; 3
    2218:	93 83       	std	Z+3, r25	; 0x03
    221a:	82 83       	std	Z+2, r24	; 0x02
    221c:	35 83       	std	Z+5, r19	; 0x05
    221e:	24 83       	std	Z+4, r18	; 0x04
    2220:	0e 94 0a 02 	call	0x414	; 0x414 <sprintf>
    2224:	8d b7       	in	r24, 0x3d	; 61
    2226:	9e b7       	in	r25, 0x3e	; 62
    2228:	06 96       	adiw	r24, 0x06	; 6
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	9e bf       	out	0x3e, r25	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	8d bf       	out	0x3d, r24	; 61
		uart_puts(cmd);
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	9c 81       	ldd	r25, Y+4	; 0x04
    2238:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
		gpib_set_partner_secondary(val);
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <gpib_set_partner_secondary>
    2242:	3d c1       	rjmp	.+634    	; 0x24be <handle_internal_commands+0x400>
		break;
	case '+':
		/* add device */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	9c 81       	ldd	r25, Y+4	; 0x04
    2248:	02 96       	adiw	r24, 0x02	; 2
    224a:	ae 01       	movw	r20, r28
    224c:	4e 5f       	subi	r20, 0xFE	; 254
    224e:	5f 4f       	sbci	r21, 0xFF	; 255
    2250:	9e 01       	movw	r18, r28
    2252:	2f 5f       	subi	r18, 0xFF	; 255
    2254:	3f 4f       	sbci	r19, 0xFF	; 255
    2256:	b9 01       	movw	r22, r18
    2258:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <stringToTwoUchars>
		sprintf(cmd, "Add device, primary: %u , secondary: %u\n\r", val, val1);
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	48 2f       	mov	r20, r24
    2266:	50 e0       	ldi	r21, 0x00	; 0
    2268:	8d b7       	in	r24, 0x3d	; 61
    226a:	9e b7       	in	r25, 0x3e	; 62
    226c:	08 97       	sbiw	r24, 0x08	; 8
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	9e bf       	out	0x3e, r25	; 62
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	8d bf       	out	0x3d, r24	; 61
    2278:	ed b7       	in	r30, 0x3d	; 61
    227a:	fe b7       	in	r31, 0x3e	; 62
    227c:	31 96       	adiw	r30, 0x01	; 1
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	9c 81       	ldd	r25, Y+4	; 0x04
    2282:	91 83       	std	Z+1, r25	; 0x01
    2284:	80 83       	st	Z, r24
    2286:	8a e4       	ldi	r24, 0x4A	; 74
    2288:	93 e0       	ldi	r25, 0x03	; 3
    228a:	93 83       	std	Z+3, r25	; 0x03
    228c:	82 83       	std	Z+2, r24	; 0x02
    228e:	35 83       	std	Z+5, r19	; 0x05
    2290:	24 83       	std	Z+4, r18	; 0x04
    2292:	57 83       	std	Z+7, r21	; 0x07
    2294:	46 83       	std	Z+6, r20	; 0x06
    2296:	0e 94 0a 02 	call	0x414	; 0x414 <sprintf>
    229a:	2d b7       	in	r18, 0x3d	; 61
    229c:	3e b7       	in	r19, 0x3e	; 62
    229e:	28 5f       	subi	r18, 0xF8	; 248
    22a0:	3f 4f       	sbci	r19, 0xFF	; 255
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	3e bf       	out	0x3e, r19	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	2d bf       	out	0x3d, r18	; 61
		uart_puts(cmd);
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	9c 81       	ldd	r25, Y+4	; 0x04
    22b0:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
		gpib_add_partner_address(val, val1);
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	9a 81       	ldd	r25, Y+2	; 0x02
    22b8:	69 2f       	mov	r22, r25
    22ba:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <gpib_add_partner_address>
    22be:	ff c0       	rjmp	.+510    	; 0x24be <handle_internal_commands+0x400>
		break;
	case '-':
		/* add device */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	9c 81       	ldd	r25, Y+4	; 0x04
    22c4:	02 96       	adiw	r24, 0x02	; 2
    22c6:	ae 01       	movw	r20, r28
    22c8:	4e 5f       	subi	r20, 0xFE	; 254
    22ca:	5f 4f       	sbci	r21, 0xFF	; 255
    22cc:	9e 01       	movw	r18, r28
    22ce:	2f 5f       	subi	r18, 0xFF	; 255
    22d0:	3f 4f       	sbci	r19, 0xFF	; 255
    22d2:	b9 01       	movw	r22, r18
    22d4:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <stringToTwoUchars>
		sprintf(cmd, "Remove device, primary: %u , secondary: %u\n\r", val,
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	48 2f       	mov	r20, r24
    22e2:	50 e0       	ldi	r21, 0x00	; 0
    22e4:	8d b7       	in	r24, 0x3d	; 61
    22e6:	9e b7       	in	r25, 0x3e	; 62
    22e8:	08 97       	sbiw	r24, 0x08	; 8
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	9e bf       	out	0x3e, r25	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	8d bf       	out	0x3d, r24	; 61
    22f4:	ed b7       	in	r30, 0x3d	; 61
    22f6:	fe b7       	in	r31, 0x3e	; 62
    22f8:	31 96       	adiw	r30, 0x01	; 1
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	9c 81       	ldd	r25, Y+4	; 0x04
    22fe:	91 83       	std	Z+1, r25	; 0x01
    2300:	80 83       	st	Z, r24
    2302:	84 e7       	ldi	r24, 0x74	; 116
    2304:	93 e0       	ldi	r25, 0x03	; 3
    2306:	93 83       	std	Z+3, r25	; 0x03
    2308:	82 83       	std	Z+2, r24	; 0x02
    230a:	35 83       	std	Z+5, r19	; 0x05
    230c:	24 83       	std	Z+4, r18	; 0x04
    230e:	57 83       	std	Z+7, r21	; 0x07
    2310:	46 83       	std	Z+6, r20	; 0x06
    2312:	0e 94 0a 02 	call	0x414	; 0x414 <sprintf>
    2316:	2d b7       	in	r18, 0x3d	; 61
    2318:	3e b7       	in	r19, 0x3e	; 62
    231a:	28 5f       	subi	r18, 0xF8	; 248
    231c:	3f 4f       	sbci	r19, 0xFF	; 255
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	3e bf       	out	0x3e, r19	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	2d bf       	out	0x3d, r18	; 61
				val1);
		uart_puts(cmd);
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	9c 81       	ldd	r25, Y+4	; 0x04
    232c:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
		gpib_remove_partner_address(val, val1);
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	9a 81       	ldd	r25, Y+2	; 0x02
    2334:	69 2f       	mov	r22, r25
    2336:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <gpib_remove_partner_address>
    233a:	c1 c0       	rjmp	.+386    	; 0x24be <handle_internal_commands+0x400>
		break;
	case 'x':
		/* Xon/Xoff flow control */
		if (!xonXoffMode) {
    233c:	80 91 92 04 	lds	r24, 0x0492
    2340:	88 23       	and	r24, r24
    2342:	59 f4       	brne	.+22     	; 0x235a <handle_internal_commands+0x29c>
			xonXoffMode = 1;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	80 93 92 04 	sts	0x0492, r24
			uart_set_flow_control(FLOWCONTROL_XONXOFF);
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol on\n\r");
    2350:	82 ee       	ldi	r24, 0xE2	; 226
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
    2358:	b2 c0       	rjmp	.+356    	; 0x24be <handle_internal_commands+0x400>
		} else {
			xonXoffMode = 0;
    235a:	10 92 92 04 	sts	0x0492, r1
			uart_set_flow_control(FLOWCONTROL_NONE);
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol off\n\r");
    2364:	87 ec       	ldi	r24, 0xC7	; 199
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
    236c:	a8 c0       	rjmp	.+336    	; 0x24be <handle_internal_commands+0x400>
		}
		break;
	case 'h':
		/* print some usage infos */
		printHelp();
    236e:	0e 94 41 13 	call	0x2682	; 0x2682 <printHelp>
    2372:	a5 c0       	rjmp	.+330    	; 0x24be <handle_internal_commands+0x400>
		break;
	case 'i':
		gpib_info();
    2374:	0e 94 8f 0a 	call	0x151e	; 0x151e <gpib_info>
		sprintf(cmd, "Xon/Xoff flow control: %u\n\r", xonXoffMode);
    2378:	80 91 92 04 	lds	r24, 0x0492
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	00 d0       	rcall	.+0      	; 0x2382 <handle_internal_commands+0x2c4>
    2382:	00 d0       	rcall	.+0      	; 0x2384 <handle_internal_commands+0x2c6>
    2384:	00 d0       	rcall	.+0      	; 0x2386 <handle_internal_commands+0x2c8>
    2386:	ed b7       	in	r30, 0x3d	; 61
    2388:	fe b7       	in	r31, 0x3e	; 62
    238a:	31 96       	adiw	r30, 0x01	; 1
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	9c 81       	ldd	r25, Y+4	; 0x04
    2390:	91 83       	std	Z+1, r25	; 0x01
    2392:	80 83       	st	Z, r24
    2394:	81 ea       	ldi	r24, 0xA1	; 161
    2396:	93 e0       	ldi	r25, 0x03	; 3
    2398:	93 83       	std	Z+3, r25	; 0x03
    239a:	82 83       	std	Z+2, r24	; 0x02
    239c:	35 83       	std	Z+5, r19	; 0x05
    239e:	24 83       	std	Z+4, r18	; 0x04
    23a0:	0e 94 0a 02 	call	0x414	; 0x414 <sprintf>
    23a4:	8d b7       	in	r24, 0x3d	; 61
    23a6:	9e b7       	in	r25, 0x3e	; 62
    23a8:	06 96       	adiw	r24, 0x06	; 6
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	9e bf       	out	0x3e, r25	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	8d bf       	out	0x3d, r24	; 61
		uart_puts(cmd);
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	9c 81       	ldd	r25, Y+4	; 0x04
    23b8:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
		sprintf(cmd, "RS232 echo: %u\n\r", rs232_remote_echo);
    23bc:	80 91 91 04 	lds	r24, 0x0491
    23c0:	28 2f       	mov	r18, r24
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	00 d0       	rcall	.+0      	; 0x23c6 <handle_internal_commands+0x308>
    23c6:	00 d0       	rcall	.+0      	; 0x23c8 <handle_internal_commands+0x30a>
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <handle_internal_commands+0x30c>
    23ca:	ed b7       	in	r30, 0x3d	; 61
    23cc:	fe b7       	in	r31, 0x3e	; 62
    23ce:	31 96       	adiw	r30, 0x01	; 1
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	9c 81       	ldd	r25, Y+4	; 0x04
    23d4:	91 83       	std	Z+1, r25	; 0x01
    23d6:	80 83       	st	Z, r24
    23d8:	8d eb       	ldi	r24, 0xBD	; 189
    23da:	93 e0       	ldi	r25, 0x03	; 3
    23dc:	93 83       	std	Z+3, r25	; 0x03
    23de:	82 83       	std	Z+2, r24	; 0x02
    23e0:	35 83       	std	Z+5, r19	; 0x05
    23e2:	24 83       	std	Z+4, r18	; 0x04
    23e4:	0e 94 0a 02 	call	0x414	; 0x414 <sprintf>
    23e8:	2d b7       	in	r18, 0x3d	; 61
    23ea:	3e b7       	in	r19, 0x3e	; 62
    23ec:	2a 5f       	subi	r18, 0xFA	; 250
    23ee:	3f 4f       	sbci	r19, 0xFF	; 255
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	f8 94       	cli
    23f4:	3e bf       	out	0x3e, r19	; 62
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	2d bf       	out	0x3d, r18	; 61
		uart_puts(cmd);
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	9c 81       	ldd	r25, Y+4	; 0x04
    23fe:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
		sprintf(cmd, "SRQs anabled: %u\n\r", srq_enabled);
    2402:	80 91 93 04 	lds	r24, 0x0493
    2406:	28 2f       	mov	r18, r24
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	00 d0       	rcall	.+0      	; 0x240c <handle_internal_commands+0x34e>
    240c:	00 d0       	rcall	.+0      	; 0x240e <handle_internal_commands+0x350>
    240e:	00 d0       	rcall	.+0      	; 0x2410 <handle_internal_commands+0x352>
    2410:	ed b7       	in	r30, 0x3d	; 61
    2412:	fe b7       	in	r31, 0x3e	; 62
    2414:	31 96       	adiw	r30, 0x01	; 1
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	9c 81       	ldd	r25, Y+4	; 0x04
    241a:	91 83       	std	Z+1, r25	; 0x01
    241c:	80 83       	st	Z, r24
    241e:	8e ec       	ldi	r24, 0xCE	; 206
    2420:	93 e0       	ldi	r25, 0x03	; 3
    2422:	93 83       	std	Z+3, r25	; 0x03
    2424:	82 83       	std	Z+2, r24	; 0x02
    2426:	35 83       	std	Z+5, r19	; 0x05
    2428:	24 83       	std	Z+4, r18	; 0x04
    242a:	0e 94 0a 02 	call	0x414	; 0x414 <sprintf>
    242e:	8d b7       	in	r24, 0x3d	; 61
    2430:	9e b7       	in	r25, 0x3e	; 62
    2432:	06 96       	adiw	r24, 0x06	; 6
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	9e bf       	out	0x3e, r25	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	8d bf       	out	0x3d, r24	; 61
		uart_puts(cmd);
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	9c 81       	ldd	r25, Y+4	; 0x04
    2442:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
		sprintf(cmd, "Linebreak value: %u\n\r", linebreak);
    2446:	80 91 94 04 	lds	r24, 0x0494
    244a:	28 2f       	mov	r18, r24
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	00 d0       	rcall	.+0      	; 0x2450 <handle_internal_commands+0x392>
    2450:	00 d0       	rcall	.+0      	; 0x2452 <handle_internal_commands+0x394>
    2452:	00 d0       	rcall	.+0      	; 0x2454 <handle_internal_commands+0x396>
    2454:	ed b7       	in	r30, 0x3d	; 61
    2456:	fe b7       	in	r31, 0x3e	; 62
    2458:	31 96       	adiw	r30, 0x01	; 1
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	9c 81       	ldd	r25, Y+4	; 0x04
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	80 83       	st	Z, r24
    2462:	81 ee       	ldi	r24, 0xE1	; 225
    2464:	93 e0       	ldi	r25, 0x03	; 3
    2466:	93 83       	std	Z+3, r25	; 0x03
    2468:	82 83       	std	Z+2, r24	; 0x02
    246a:	35 83       	std	Z+5, r19	; 0x05
    246c:	24 83       	std	Z+4, r18	; 0x04
    246e:	0e 94 0a 02 	call	0x414	; 0x414 <sprintf>
    2472:	2d b7       	in	r18, 0x3d	; 61
    2474:	3e b7       	in	r19, 0x3e	; 62
    2476:	2a 5f       	subi	r18, 0xFA	; 250
    2478:	3f 4f       	sbci	r19, 0xFF	; 255
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	f8 94       	cli
    247e:	3e bf       	out	0x3e, r19	; 62
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	2d bf       	out	0x3d, r18	; 61
		uart_puts(cmd);
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	9c 81       	ldd	r25, Y+4	; 0x04
    2488:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
    248c:	18 c0       	rjmp	.+48     	; 0x24be <handle_internal_commands+0x400>
		break;
	case 'e':
		uart_puts_P("Check errors\n\r");
    248e:	88 eb       	ldi	r24, 0xB8	; 184
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
		check_errors();
    2496:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <check_errors>
    249a:	11 c0       	rjmp	.+34     	; 0x24be <handle_internal_commands+0x400>
		break;
#ifdef ARB_TEST
	case 'z':
		uart_puts("arb\n\r");
    249c:	87 ef       	ldi	r24, 0xF7	; 247
    249e:	93 e0       	ldi	r25, 0x03	; 3
    24a0:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
		arb();
    24a4:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <arb>
		uart_puts("arb done\n\r");
    24a8:	8d ef       	ldi	r24, 0xFD	; 253
    24aa:	93 e0       	ldi	r25, 0x03	; 3
    24ac:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
    24b0:	06 c0       	rjmp	.+12     	; 0x24be <handle_internal_commands+0x400>
		break;
#endif
	default:
		uart_puts_P("unknown command\n\r");
    24b2:	86 ea       	ldi	r24, 0xA6	; 166
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
		printHelp();
    24ba:	0e 94 41 13 	call	0x2682	; 0x2682 <printHelp>
		break;
	}
}
    24be:	26 96       	adiw	r28, 0x06	; 6
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	f8 94       	cli
    24c4:	de bf       	out	0x3e, r29	; 62
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	cd bf       	out	0x3d, r28	; 61
    24ca:	cf 91       	pop	r28
    24cc:	df 91       	pop	r29
    24ce:	08 95       	ret

000024d0 <receiveAnswer>:

/**
 * Receives answer after command was sent.
 */
void receiveAnswer() {
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <receiveAnswer+0x6>
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <receiveAnswer+0x8>
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
	uchar b, e;
	uchar colptr = 0;
    24dc:	19 82       	std	Y+1, r1	; 0x01

	gpib_prepare_read();
    24de:	0e 94 70 05 	call	0xae0	; 0xae0 <gpib_prepare_read>
	// read the answer until EOI is detected (then e becomes true)
	do {
		// gpib bus receive
		e = gpib_receive(&b);
    24e2:	ce 01       	movw	r24, r28
    24e4:	03 96       	adiw	r24, 0x03	; 3
    24e6:	0e 94 ca 05 	call	0xb94	; 0xb94 <gpib_receive>
    24ea:	8a 83       	std	Y+2, r24	; 0x02
		// write out character
		uart_putc(b);
    24ec:	8b 81       	ldd	r24, Y+3	; 0x03
    24ee:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <uart_putc>
		if (linebreak && (colptr++ == linebreak)) {
    24f2:	80 91 94 04 	lds	r24, 0x0494
    24f6:	88 23       	and	r24, r24
    24f8:	99 f0       	breq	.+38     	; 0x2520 <receiveAnswer+0x50>
    24fa:	90 91 94 04 	lds	r25, 0x0494
    24fe:	1c 82       	std	Y+4, r1	; 0x04
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	89 17       	cp	r24, r25
    2504:	11 f4       	brne	.+4      	; 0x250a <receiveAnswer+0x3a>
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	8c 83       	std	Y+4, r24	; 0x04
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	8f 5f       	subi	r24, 0xFF	; 255
    250e:	89 83       	std	Y+1, r24	; 0x01
    2510:	8c 81       	ldd	r24, Y+4	; 0x04
    2512:	88 23       	and	r24, r24
    2514:	29 f0       	breq	.+10     	; 0x2520 <receiveAnswer+0x50>
			uart_puts_P("\n\r");
    2516:	8c ef       	ldi	r24, 0xFC	; 252
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
			colptr = 0;
    251e:	19 82       	std	Y+1, r1	; 0x01
		}
		//sprintf((char*)buf,"%02x - %c\n\r", b, b);
		//uart_puts((char*)buf);
	} while (!e);
    2520:	8a 81       	ldd	r24, Y+2	; 0x02
    2522:	88 23       	and	r24, r24
    2524:	f1 f2       	breq	.-68     	; 0x24e2 <receiveAnswer+0x12>
}
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <srq_occured>:

/**
 * Check if a SRQ occured
 */
uchar srq_occured(int* old_time) {
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	00 d0       	rcall	.+0      	; 0x253a <srq_occured+0x6>
    253a:	0f 92       	push	r0
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	9b 83       	std	Y+3, r25	; 0x03
    2542:	8a 83       	std	Y+2, r24	; 0x02
	uchar srq = 0;
    2544:	19 82       	std	Y+1, r1	; 0x01
	if (*old_time == 0) {
    2546:	ea 81       	ldd	r30, Y+2	; 0x02
    2548:	fb 81       	ldd	r31, Y+3	; 0x03
    254a:	80 81       	ld	r24, Z
    254c:	91 81       	ldd	r25, Z+1	; 0x01
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	49 f4       	brne	.+18     	; 0x2564 <srq_occured+0x30>
		// old_time value initialization on first call with value s
		*old_time = s;
    2552:	80 91 05 06 	lds	r24, 0x0605
    2556:	88 2f       	mov	r24, r24
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	ea 81       	ldd	r30, Y+2	; 0x02
    255c:	fb 81       	ldd	r31, Y+3	; 0x03
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	80 83       	st	Z, r24
    2562:	1e c0       	rjmp	.+60     	; 0x25a0 <srq_occured+0x6c>
	} else {
		if (s > *old_time) {
    2564:	80 91 05 06 	lds	r24, 0x0605
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	ea 81       	ldd	r30, Y+2	; 0x02
    256e:	fb 81       	ldd	r31, Y+3	; 0x03
    2570:	80 81       	ld	r24, Z
    2572:	91 81       	ldd	r25, Z+1	; 0x01
    2574:	82 17       	cp	r24, r18
    2576:	93 07       	cpc	r25, r19
    2578:	9c f4       	brge	.+38     	; 0x25a0 <srq_occured+0x6c>
			// some time has passed - check if srq was set
			srq = bit_is_clear(PIND, G_SRQ);
    257a:	e0 e3       	ldi	r30, 0x30	; 48
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	88 2f       	mov	r24, r24
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	80 74       	andi	r24, 0x40	; 64
    2586:	90 70       	andi	r25, 0x00	; 0
    2588:	19 82       	std	Y+1, r1	; 0x01
    258a:	00 97       	sbiw	r24, 0x00	; 0
    258c:	11 f4       	brne	.+4      	; 0x2592 <srq_occured+0x5e>
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	89 83       	std	Y+1, r24	; 0x01
			if (srq)
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	88 23       	and	r24, r24
    2596:	21 f0       	breq	.+8      	; 0x25a0 <srq_occured+0x6c>
				uart_puts_P("\n\rSRQ detected.\n\r");
    2598:	8f ef       	ldi	r24, 0xFF	; 255
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
		}
	}
	return srq;
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <handle_srq>:

/**
 * Handles SRQs by doing serial poll
 *
 */
uchar handle_srq(uchar *buf, int *buf_ptr) {
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
    25b6:	28 97       	sbiw	r28, 0x08	; 8
    25b8:	0f b6       	in	r0, 0x3f	; 63
    25ba:	f8 94       	cli
    25bc:	de bf       	out	0x3e, r29	; 62
    25be:	0f be       	out	0x3f, r0	; 63
    25c0:	cd bf       	out	0x3d, r28	; 61
    25c2:	9d 83       	std	Y+5, r25	; 0x05
    25c4:	8c 83       	std	Y+4, r24	; 0x04
    25c6:	7f 83       	std	Y+7, r23	; 0x07
    25c8:	6e 83       	std	Y+6, r22	; 0x06
	uchar command_ready = 0;
    25ca:	19 82       	std	Y+1, r1	; 0x01
	uint8_t primary, secondary;

	if (!gpib_serial_poll(&primary, &secondary)) {
    25cc:	ce 01       	movw	r24, r28
    25ce:	02 96       	adiw	r24, 0x02	; 2
    25d0:	9e 01       	movw	r18, r28
    25d2:	2d 5f       	subi	r18, 0xFD	; 253
    25d4:	3f 4f       	sbci	r19, 0xFF	; 255
    25d6:	b9 01       	movw	r22, r18
    25d8:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <gpib_serial_poll>
    25dc:	88 23       	and	r24, r24
    25de:	69 f4       	brne	.+26     	; 0x25fa <handle_srq+0x4c>
		uart_puts_P(
    25e0:	8c e2       	ldi	r24, 0x2C	; 44
    25e2:	91 e0       	ldi	r25, 0x01	; 1
    25e4:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
				"\n\rSRQ emitter is not in list of known devices. SRQ Ignored.\n\r");
		uart_puts_P("\n\rSRQs are disabled now.\n\r");
    25e8:	81 e1       	ldi	r24, 0x11	; 17
    25ea:	91 e0       	ldi	r25, 0x01	; 1
    25ec:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
		srq_enabled = 0;
    25f0:	10 92 93 04 	sts	0x0493, r1
		return command_ready;
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	88 87       	std	Y+8, r24	; 0x08
    25f8:	3a c0       	rjmp	.+116    	; 0x266e <handle_srq+0xc0>
	}
	gpib_set_partner_address(primary, secondary);
    25fa:	8a 81       	ldd	r24, Y+2	; 0x02
    25fc:	9b 81       	ldd	r25, Y+3	; 0x03
    25fe:	69 2f       	mov	r22, r25
    2600:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <gpib_set_partner_address>

	if (gpib_get_flavour() == FLAVOUR_TEK) {
    2604:	0e 94 65 0d 	call	0x1aca	; 0x1aca <gpib_get_flavour>
    2608:	81 30       	cpi	r24, 0x01	; 1
    260a:	79 f5       	brne	.+94     	; 0x266a <handle_srq+0xbc>
		// Tek: check status for reason
		buf[0] = 'E';
    260c:	ec 81       	ldd	r30, Y+4	; 0x04
    260e:	fd 81       	ldd	r31, Y+5	; 0x05
    2610:	85 e4       	ldi	r24, 0x45	; 69
    2612:	80 83       	st	Z, r24
		buf[1] = 'V';
    2614:	8c 81       	ldd	r24, Y+4	; 0x04
    2616:	9d 81       	ldd	r25, Y+5	; 0x05
    2618:	fc 01       	movw	r30, r24
    261a:	31 96       	adiw	r30, 0x01	; 1
    261c:	86 e5       	ldi	r24, 0x56	; 86
    261e:	80 83       	st	Z, r24
		buf[2] = 'E';
    2620:	8c 81       	ldd	r24, Y+4	; 0x04
    2622:	9d 81       	ldd	r25, Y+5	; 0x05
    2624:	fc 01       	movw	r30, r24
    2626:	32 96       	adiw	r30, 0x02	; 2
    2628:	85 e4       	ldi	r24, 0x45	; 69
    262a:	80 83       	st	Z, r24
		buf[3] = 'N';
    262c:	8c 81       	ldd	r24, Y+4	; 0x04
    262e:	9d 81       	ldd	r25, Y+5	; 0x05
    2630:	fc 01       	movw	r30, r24
    2632:	33 96       	adiw	r30, 0x03	; 3
    2634:	8e e4       	ldi	r24, 0x4E	; 78
    2636:	80 83       	st	Z, r24
		buf[4] = 'T';
    2638:	8c 81       	ldd	r24, Y+4	; 0x04
    263a:	9d 81       	ldd	r25, Y+5	; 0x05
    263c:	fc 01       	movw	r30, r24
    263e:	34 96       	adiw	r30, 0x04	; 4
    2640:	84 e5       	ldi	r24, 0x54	; 84
    2642:	80 83       	st	Z, r24
		buf[5] = '?';
    2644:	8c 81       	ldd	r24, Y+4	; 0x04
    2646:	9d 81       	ldd	r25, Y+5	; 0x05
    2648:	fc 01       	movw	r30, r24
    264a:	35 96       	adiw	r30, 0x05	; 5
    264c:	8f e3       	ldi	r24, 0x3F	; 63
    264e:	80 83       	st	Z, r24
		buf[6] = '\0';
    2650:	8c 81       	ldd	r24, Y+4	; 0x04
    2652:	9d 81       	ldd	r25, Y+5	; 0x05
    2654:	fc 01       	movw	r30, r24
    2656:	36 96       	adiw	r30, 0x06	; 6
    2658:	10 82       	st	Z, r1
		*buf_ptr = 6;
    265a:	ee 81       	ldd	r30, Y+6	; 0x06
    265c:	ff 81       	ldd	r31, Y+7	; 0x07
    265e:	86 e0       	ldi	r24, 0x06	; 6
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	91 83       	std	Z+1, r25	; 0x01
    2664:	80 83       	st	Z, r24
		command_ready = 1;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	89 83       	std	Y+1, r24	; 0x01
	}
	return command_ready;
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	88 87       	std	Y+8, r24	; 0x08
    266e:	88 85       	ldd	r24, Y+8	; 0x08
}
    2670:	28 96       	adiw	r28, 0x08	; 8
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <printHelp>:

void printHelp() {
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	c0 55       	subi	r28, 0x50	; 80
    268c:	d0 40       	sbci	r29, 0x00	; 0
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	cd bf       	out	0x3d, r28	; 61
	char buf[COMMAND_INPUT_BUFFER_SIZE];
	sprintf(buf, "\n\rGPIB Controller (Rev.%s) (c) spurtikus.de 2008-2015\n\r",
    2698:	00 d0       	rcall	.+0      	; 0x269a <printHelp+0x18>
    269a:	00 d0       	rcall	.+0      	; 0x269c <printHelp+0x1a>
    269c:	00 d0       	rcall	.+0      	; 0x269e <printHelp+0x1c>
    269e:	ed b7       	in	r30, 0x3d	; 61
    26a0:	fe b7       	in	r31, 0x3e	; 62
    26a2:	31 96       	adiw	r30, 0x01	; 1
    26a4:	ce 01       	movw	r24, r28
    26a6:	01 96       	adiw	r24, 0x01	; 1
    26a8:	91 83       	std	Z+1, r25	; 0x01
    26aa:	80 83       	st	Z, r24
    26ac:	88 e0       	ldi	r24, 0x08	; 8
    26ae:	94 e0       	ldi	r25, 0x04	; 4
    26b0:	93 83       	std	Z+3, r25	; 0x03
    26b2:	82 83       	std	Z+2, r24	; 0x02
    26b4:	80 e4       	ldi	r24, 0x40	; 64
    26b6:	94 e0       	ldi	r25, 0x04	; 4
    26b8:	95 83       	std	Z+5, r25	; 0x05
    26ba:	84 83       	std	Z+4, r24	; 0x04
    26bc:	0e 94 0a 02 	call	0x414	; 0x414 <sprintf>
    26c0:	8d b7       	in	r24, 0x3d	; 61
    26c2:	9e b7       	in	r25, 0x3e	; 62
    26c4:	06 96       	adiw	r24, 0x06	; 6
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	9e bf       	out	0x3e, r25	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	8d bf       	out	0x3d, r24	; 61
	REVISION);
	uart_puts(buf);
    26d0:	ce 01       	movw	r24, r28
    26d2:	01 96       	adiw	r24, 0x01	; 1
    26d4:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
	uart_puts_P("Internal commands:\n\r");
    26d8:	8d e9       	ldi	r24, 0x9D	; 157
    26da:	92 e0       	ldi	r25, 0x02	; 2
    26dc:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
	uart_puts(
    26e0:	84 e4       	ldi	r24, 0x44	; 68
    26e2:	94 e0       	ldi	r25, 0x04	; 4
    26e4:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
			".a <primary> [<secondary>] - set prim./second. address of remote device\n\r");
	uart_puts_P(".s <secondary> - set secondary address of remote device\n\r");
    26e8:	83 e6       	ldi	r24, 0x63	; 99
    26ea:	92 e0       	ldi	r25, 0x02	; 2
    26ec:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
	uart_puts_P(
    26f0:	83 e2       	ldi	r24, 0x23	; 35
    26f2:	92 e0       	ldi	r25, 0x02	; 2
    26f4:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
			".+ <n> - add partner device address to list of known devices.\n\r");
	uart_puts_P(
    26f8:	8e ed       	ldi	r24, 0xDE	; 222
    26fa:	91 e0       	ldi	r25, 0x01	; 1
    26fc:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
			".- <n> - remove partner device address from list of known devices.\n\r");
	uart_puts_P(".x - toggle Xon/Xoff flow control.\n\r");
    2700:	89 eb       	ldi	r24, 0xB9	; 185
    2702:	91 e0       	ldi	r25, 0x01	; 1
    2704:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
	uart_puts_P(".h - print help.\n\r");
    2708:	86 ea       	ldi	r24, 0xA6	; 166
    270a:	91 e0       	ldi	r25, 0x01	; 1
    270c:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
	uart_puts_P(".e - dump error queue.\n\r");
    2710:	8d e8       	ldi	r24, 0x8D	; 141
    2712:	91 e0       	ldi	r25, 0x01	; 1
    2714:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
	uart_puts_P(".i - dump info about GPIB lines.\n\r");
    2718:	8a e6       	ldi	r24, 0x6A	; 106
    271a:	91 e0       	ldi	r25, 0x01	; 1
    271c:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
}
    2720:	c0 5b       	subi	r28, 0xB0	; 176
    2722:	df 4f       	sbci	r29, 0xFF	; 255
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	08 95       	ret

00002734 <state_machine>:
 * 2. send user entered command, if available, to listeners (act as talker, set devices to listeners)
 * 3. if command was a query, read the answer from device (become listener and set device to talker)
 * 4. check if SRQ occured and handle that
 *
 */
void state_machine() {
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	c9 55       	subi	r28, 0x59	; 89
    273e:	d0 40       	sbci	r29, 0x00	; 0
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	f8 94       	cli
    2744:	de bf       	out	0x3e, r29	; 62
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	cd bf       	out	0x3d, r28	; 61
	int old_time = 0;
    274a:	1e 82       	std	Y+6, r1	; 0x06
    274c:	1d 82       	std	Y+5, r1	; 0x05
	uchar is_query = 0;
    274e:	1c 82       	std	Y+4, r1	; 0x04
	uchar do_prompt = 1;
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	8b 83       	std	Y+3, r24	; 0x03
	uchar ch;

	/** buffers used for commands and output strings */
	uchar buf[COMMAND_INPUT_BUFFER_SIZE];
	/** pointer in buffer */
	int buf_ptr = 0;
    2754:	fe 01       	movw	r30, r28
    2756:	e8 5a       	subi	r30, 0xA8	; 168
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	11 82       	std	Z+1, r1	; 0x01
    275c:	10 82       	st	Z, r1

	uchar state = S_INITIAL;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	8a 83       	std	Y+2, r24	; 0x02
	for (;;) {
		if (state == S_INITIAL) {
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	81 30       	cpi	r24, 0x01	; 1
    2766:	49 f4       	brne	.+18     	; 0x277a <state_machine+0x46>
			if (do_prompt) {
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	88 23       	and	r24, r24
    276c:	31 f0       	breq	.+12     	; 0x277a <state_machine+0x46>
				uart_puts("> ");
    276e:	8e e8       	ldi	r24, 0x8E	; 142
    2770:	94 e0       	ldi	r25, 0x04	; 4
    2772:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <uart_puts>
				do_prompt = 0;
    2776:	1b 82       	std	Y+3, r1	; 0x03
				is_query = 0;
    2778:	1c 82       	std	Y+4, r1	; 0x04
			}
		}

		if (!input_char(&ch))
    277a:	ce 01       	movw	r24, r28
    277c:	07 96       	adiw	r24, 0x07	; 7
    277e:	0e 94 67 0f 	call	0x1ece	; 0x1ece <input_char>
    2782:	88 23       	and	r24, r24
    2784:	71 f3       	breq	.-36     	; 0x2762 <state_machine+0x2e>
			continue;

		// byte received. Decide with state what to do.

		if (state == S_INITIAL) {
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	81 30       	cpi	r24, 0x01	; 1
    278a:	41 f4       	brne	.+16     	; 0x279c <state_machine+0x68>
			// internal or external command?
			if (ch == '.') {
    278c:	8f 81       	ldd	r24, Y+7	; 0x07
    278e:	8e 32       	cpi	r24, 0x2E	; 46
    2790:	19 f4       	brne	.+6      	; 0x2798 <state_machine+0x64>
				// internal command
				state = S_FIRST_BYTE_INT;
    2792:	82 e0       	ldi	r24, 0x02	; 2
    2794:	8a 83       	std	Y+2, r24	; 0x02
    2796:	02 c0       	rjmp	.+4      	; 0x279c <state_machine+0x68>
			} else {
				// gpib command
				state = S_FIRST_BYTE_GPIB;
    2798:	83 e0       	ldi	r24, 0x03	; 3
    279a:	8a 83       	std	Y+2, r24	; 0x02

			}
		}

		if (state == S_FIRST_BYTE_INT) {
    279c:	8a 81       	ldd	r24, Y+2	; 0x02
    279e:	82 30       	cpi	r24, 0x02	; 2
    27a0:	59 f5       	brne	.+86     	; 0x27f8 <state_machine+0xc4>
			buf[0] = ch;
    27a2:	8f 81       	ldd	r24, Y+7	; 0x07
    27a4:	88 87       	std	Y+8, r24	; 0x08
			buf_ptr = 1;
    27a6:	fe 01       	movw	r30, r28
    27a8:	e8 5a       	subi	r30, 0xA8	; 168
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	80 83       	st	Z, r24
			// send received character back depending on global flag
			if (rs232_remote_echo) {
    27b4:	80 91 91 04 	lds	r24, 0x0491
    27b8:	88 23       	and	r24, r24
    27ba:	19 f0       	breq	.+6      	; 0x27c2 <state_machine+0x8e>
				uart_putc((unsigned char) ch);
    27bc:	8f 81       	ldd	r24, Y+7	; 0x07
    27be:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <uart_putc>
			}
			// collect line until CR
			while (!input_process(buf, &buf_ptr))
    27c2:	ce 01       	movw	r24, r28
    27c4:	08 96       	adiw	r24, 0x08	; 8
    27c6:	9e 01       	movw	r18, r28
    27c8:	28 5a       	subi	r18, 0xA8	; 168
    27ca:	3f 4f       	sbci	r19, 0xFF	; 255
    27cc:	b9 01       	movw	r22, r18
    27ce:	0e 94 17 10 	call	0x202e	; 0x202e <input_process>
    27d2:	88 23       	and	r24, r24
    27d4:	b1 f3       	breq	.-20     	; 0x27c2 <state_machine+0x8e>
				;
			uart_puts_P("\n\r");
    27d6:	8b ee       	ldi	r24, 0xEB	; 235
    27d8:	92 e0       	ldi	r25, 0x02	; 2
    27da:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
			// execute internal command
			handle_internal_commands(buf);
    27de:	ce 01       	movw	r24, r28
    27e0:	08 96       	adiw	r24, 0x08	; 8
    27e2:	0e 94 5f 10 	call	0x20be	; 0x20be <handle_internal_commands>
			// reset local vars
			state = S_INITIAL;
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	8a 83       	std	Y+2, r24	; 0x02
			buf_ptr = 0;
    27ea:	fe 01       	movw	r30, r28
    27ec:	e8 5a       	subi	r30, 0xA8	; 168
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	11 82       	std	Z+1, r1	; 0x01
    27f2:	10 82       	st	Z, r1
			do_prompt = 1;
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	8b 83       	std	Y+3, r24	; 0x03
		}

		if (state == S_FIRST_BYTE_GPIB) {
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	83 30       	cpi	r24, 0x03	; 3
    27fc:	d1 f4       	brne	.+52     	; 0x2832 <state_machine+0xfe>
			// GPIB command. Check if a partner was defined.
			if (gpib_get_partner_pad() == ADDRESS_NOT_SET) {
    27fe:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <gpib_get_partner_pad>
    2802:	8f 3f       	cpi	r24, 0xFF	; 255
    2804:	79 f4       	brne	.+30     	; 0x2824 <state_machine+0xf0>
				uart_puts_P(
    2806:	88 eb       	ldi	r24, 0xB8	; 184
    2808:	92 e0       	ldi	r25, 0x02	; 2
    280a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
						"Device address is not set. Can not send command.\n\r");
				// reset local vars
				state = S_INITIAL;
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	8a 83       	std	Y+2, r24	; 0x02
				buf_ptr = 0;
    2812:	fe 01       	movw	r30, r28
    2814:	e8 5a       	subi	r30, 0xA8	; 168
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	11 82       	std	Z+1, r1	; 0x01
    281a:	10 82       	st	Z, r1
				do_prompt = 1;
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	8b 83       	std	Y+3, r24	; 0x03
				is_query = 0;
    2820:	1c 82       	std	Y+4, r1	; 0x04
    2822:	07 c0       	rjmp	.+14     	; 0x2832 <state_machine+0xfe>
			} else {
				// write prologue
				state = S_SEND_BYTES;
    2824:	84 e0       	ldi	r24, 0x04	; 4
    2826:	8a 83       	std	Y+2, r24	; 0x02
				gpib_prepare_write();
    2828:	0e 94 39 05 	call	0xa72	; 0xa72 <gpib_prepare_write>
				gpib_write_prologue(0);
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <gpib_write_prologue>
			}
		}

		if (state == S_SEND_BYTES) {
    2832:	8a 81       	ldd	r24, Y+2	; 0x02
    2834:	84 30       	cpi	r24, 0x04	; 4
    2836:	29 f5       	brne	.+74     	; 0x2882 <state_machine+0x14e>
			// send received character back depending on global flag
			if (rs232_remote_echo) {
    2838:	80 91 91 04 	lds	r24, 0x0491
    283c:	88 23       	and	r24, r24
    283e:	19 f0       	breq	.+6      	; 0x2846 <state_machine+0x112>
				uart_putc((unsigned char) ch);
    2840:	8f 81       	ldd	r24, Y+7	; 0x07
    2842:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <uart_putc>
			}
			uchar isLastByte = (ch == ASCII_CODE_CR);
    2846:	8f 81       	ldd	r24, Y+7	; 0x07
    2848:	19 82       	std	Y+1, r1	; 0x01
    284a:	8d 30       	cpi	r24, 0x0D	; 13
    284c:	11 f4       	brne	.+4      	; 0x2852 <state_machine+0x11e>
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	89 83       	std	Y+1, r24	; 0x01
			gpib_write_byte(ch, isLastByte);
    2852:	8f 81       	ldd	r24, Y+7	; 0x07
    2854:	69 81       	ldd	r22, Y+1	; 0x01
    2856:	0e 94 60 08 	call	0x10c0	; 0x10c0 <gpib_write_byte>

			if (ch == '?') {
    285a:	8f 81       	ldd	r24, Y+7	; 0x07
    285c:	8f 33       	cpi	r24, 0x3F	; 63
    285e:	11 f4       	brne	.+4      	; 0x2864 <state_machine+0x130>
				is_query = 1;
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	8c 83       	std	Y+4, r24	; 0x04
			}

			if (isLastByte) {
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	88 23       	and	r24, r24
    2868:	61 f0       	breq	.+24     	; 0x2882 <state_machine+0x14e>
				uart_puts_P("\n\r");
    286a:	85 eb       	ldi	r24, 0xB5	; 181
    286c:	92 e0       	ldi	r25, 0x02	; 2
    286e:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
				if (is_query) {
    2872:	8c 81       	ldd	r24, Y+4	; 0x04
    2874:	88 23       	and	r24, r24
    2876:	19 f0       	breq	.+6      	; 0x287e <state_machine+0x14a>
					//uart_puts("Query. Will check for answer.\n\r");
					state = S_GPIB_ANSWER;
    2878:	85 e0       	ldi	r24, 0x05	; 5
    287a:	8a 83       	std	Y+2, r24	; 0x02
    287c:	02 c0       	rjmp	.+4      	; 0x2882 <state_machine+0x14e>
				} else {
					//uart_puts("Command only.\n\r");
					state = S_GPIB_NO_ANSWER;
    287e:	86 e0       	ldi	r24, 0x06	; 6
    2880:	8a 83       	std	Y+2, r24	; 0x02
				}
			}
		}

		// write epilogue
		if (state == S_GPIB_ANSWER || state == S_GPIB_NO_ANSWER) {
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	85 30       	cpi	r24, 0x05	; 5
    2886:	19 f0       	breq	.+6      	; 0x288e <state_machine+0x15a>
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	86 30       	cpi	r24, 0x06	; 6
    288c:	41 f4       	brne	.+16     	; 0x289e <state_machine+0x16a>
			gpib_write_epilogue(0);
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	0e 94 f6 07 	call	0xfec	; 0xfec <gpib_write_epilogue>
			buf_ptr = 0;
    2894:	fe 01       	movw	r30, r28
    2896:	e8 5a       	subi	r30, 0xA8	; 168
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	11 82       	std	Z+1, r1	; 0x01
    289c:	10 82       	st	Z, r1
		}

		// if we sent a query, read the answer
		if (state == S_GPIB_ANSWER) {
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
    28a0:	85 30       	cpi	r24, 0x05	; 5
    28a2:	21 f4       	brne	.+8      	; 0x28ac <state_machine+0x178>
			receiveAnswer();
    28a4:	0e 94 68 12 	call	0x24d0	; 0x24d0 <receiveAnswer>
			state = S_FINAL;
    28a8:	87 e0       	ldi	r24, 0x07	; 7
    28aa:	8a 83       	std	Y+2, r24	; 0x02
		}

		// finalize state machine
		if (state == S_GPIB_NO_ANSWER || state == S_FINAL) {
    28ac:	8a 81       	ldd	r24, Y+2	; 0x02
    28ae:	86 30       	cpi	r24, 0x06	; 6
    28b0:	19 f0       	breq	.+6      	; 0x28b8 <state_machine+0x184>
    28b2:	8a 81       	ldd	r24, Y+2	; 0x02
    28b4:	87 30       	cpi	r24, 0x07	; 7
    28b6:	51 f4       	brne	.+20     	; 0x28cc <state_machine+0x198>
			// untalk/unlisten all partners
			gpib_untalkUnlisten();
    28b8:	0e 94 a7 05 	call	0xb4e	; 0xb4e <gpib_untalkUnlisten>
			// some devices do not send cr,lf at command end, so create it always itself
			uart_puts_P("\n\r");
    28bc:	82 eb       	ldi	r24, 0xB2	; 178
    28be:	92 e0       	ldi	r25, 0x02	; 2
    28c0:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <uart_puts_p>
			do_prompt = 1;
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	8b 83       	std	Y+3, r24	; 0x03
			state = S_INITIAL;
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	8a 83       	std	Y+2, r24	; 0x02
		}

		// SRQ detection - do this every time when time value s has changed
		// s is incremented every second. So we check once a second.
		if (srq_enabled && srq_occured(&old_time)) {
    28cc:	80 91 93 04 	lds	r24, 0x0493
    28d0:	88 23       	and	r24, r24
    28d2:	09 f4       	brne	.+2      	; 0x28d6 <state_machine+0x1a2>
    28d4:	46 cf       	rjmp	.-372    	; 0x2762 <state_machine+0x2e>
    28d6:	ce 01       	movw	r24, r28
    28d8:	05 96       	adiw	r24, 0x05	; 5
    28da:	0e 94 9a 12 	call	0x2534	; 0x2534 <srq_occured>
    28de:	88 23       	and	r24, r24
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <state_machine+0x1b0>
    28e2:	3f cf       	rjmp	.-386    	; 0x2762 <state_machine+0x2e>
			// TODO: make handle srq work again
			// the returned command_ready was interpreted to read in an answer
			// but this was turned of for new input loop
			// next two lines replace that but must be tested.
			if (handle_srq(buf, &buf_ptr)) {
    28e4:	ce 01       	movw	r24, r28
    28e6:	08 96       	adiw	r24, 0x08	; 8
    28e8:	9e 01       	movw	r18, r28
    28ea:	28 5a       	subi	r18, 0xA8	; 168
    28ec:	3f 4f       	sbci	r19, 0xFF	; 255
    28ee:	b9 01       	movw	r22, r18
    28f0:	0e 94 d7 12 	call	0x25ae	; 0x25ae <handle_srq>
    28f4:	88 23       	and	r24, r24
    28f6:	09 f4       	brne	.+2      	; 0x28fa <state_machine+0x1c6>
    28f8:	34 cf       	rjmp	.-408    	; 0x2762 <state_machine+0x2e>
				state = S_GPIB_ANSWER;
    28fa:	85 e0       	ldi	r24, 0x05	; 5
    28fc:	8a 83       	std	Y+2, r24	; 0x02
    28fe:	31 cf       	rjmp	.-414    	; 0x2762 <state_machine+0x2e>

00002900 <main>:
 * \brief Implementation of GPIB controller. Reads a command from RS232, sends it via bus.
 * If The command contains a '?', an answer from the device is expected and read in. The
 * answer then is printed out. If an SRQ occured, a serial poll is initiated.
 * 
 */
int main(void) {
    2900:	df 93       	push	r29
    2902:	cf 93       	push	r28
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
	/*
	 *  Initialize UART library, pass baudrate and avr cpu clock 
	 *  with the macro UART_BAUD_SELECT()
	 */DI();
    2908:	8c e0       	ldi	r24, 0x0C	; 12
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <uart_init>

	/*
	 * now enable interrupt, since UART and TIMER library is interrupt controlled
	 */sei();
    2910:	78 94       	sei

	/** print some usage infos */
	printHelp();
    2912:	0e 94 41 13 	call	0x2682	; 0x2682 <printHelp>

	// init timer for timeout detection
	timer16_init();
    2916:	0e 94 c2 14 	call	0x2984	; 0x2984 <timer16_init>

	// init gpib lines
	gpib_init();
    291a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <gpib_init>
	// init controller part - assign bus 
	gpib_controller_assign(0x00);
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	0e 94 b1 06 	call	0xd62	; 0xd62 <gpib_controller_assign>

	if (xonXoffMode) {
    2924:	80 91 92 04 	lds	r24, 0x0492
    2928:	88 23       	and	r24, r24
    292a:	19 f0       	breq	.+6      	; 0x2932 <main+0x32>
		uart_set_flow_control(FLOWCONTROL_XONXOFF);
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <uart_set_flow_control>
	}

	// state machine loops forever
	state_machine();
    2932:	0e 94 9a 13 	call	0x2734	; 0x2734 <state_machine>
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	90 e0       	ldi	r25, 0x00	; 0
}
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <__vector_7>:

/**
 * Interrupt Service Routine - do not call directly
 *  This routine is called when the Timer Value TCNT1 reaches the Output Compare Register Value OCR1A
 */ 
ISR(TIMER1_COMPA_vect) {
    2940:	1f 92       	push	r1
    2942:	0f 92       	push	r0
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	0f 92       	push	r0
    2948:	11 24       	eor	r1, r1
    294a:	8f 93       	push	r24
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	cd b7       	in	r28, 0x3d	; 61
    2952:	de b7       	in	r29, 0x3e	; 62
#if XTAL_CPU % DEBOUNCE
	OCR1A = XTAL_CPU / DEBOUNCE - 1;
#endif
	if (--timer==0) {
    2954:	80 91 04 06 	lds	r24, 0x0604
    2958:	81 50       	subi	r24, 0x01	; 1
    295a:	80 93 04 06 	sts	0x0604, r24
    295e:	80 91 04 06 	lds	r24, 0x0604
    2962:	88 23       	and	r24, r24
    2964:	39 f4       	brne	.+14     	; 0x2974 <__vector_7+0x34>
		timer=(uint8_t) DEBOUNCE;
    2966:	10 92 04 06 	sts	0x0604, r1
		s++;
    296a:	80 91 05 06 	lds	r24, 0x0605
    296e:	8f 5f       	subi	r24, 0xFF	; 255
    2970:	80 93 05 06 	sts	0x0605, r24
#if XTAL_CPU % DEBOUNCE
		OCR1A = XTAL_CPU / DEBOUNCE + XTAL_CPU % DEBOUNCE - 1;
#endif
	}
}
    2974:	cf 91       	pop	r28
    2976:	df 91       	pop	r29
    2978:	8f 91       	pop	r24
    297a:	0f 90       	pop	r0
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	0f 90       	pop	r0
    2980:	1f 90       	pop	r1
    2982:	18 95       	reti

00002984 <timer16_init>:
/**
 * Timer initialisation.
 *  \brief initializes all registers ands sets second value 's' to zero. Timer is immediately
 * started.
 */ 
void timer16_init( void ) {
    2984:	df 93       	push	r29
    2986:	cf 93       	push	r28
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62

	// OCR1A=XTAL/DEBOUNCE-1 -> Bei Erreichen dieses Wertes (31249) wird die ISR besucht
	// die ISR wird also alle 1/256s aufgerufen. Wenn man dort also bis 256 hochzählt, ist genau
	// 1 Sekunde um! 256 ist der Wert der Variable timer und wird über das define DEBOUNCE festgelegt

	TCCR1B = (1<<CS10) ^ (1<<WGM12);	// Prescaler of 1 | CTC mode
    298c:	ee e4       	ldi	r30, 0x4E	; 78
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	89 e0       	ldi	r24, 0x09	; 9
    2992:	80 83       	st	Z, r24
	OCR1A  = F_CPU/DEBOUNCE-1;		// Output compare register value 
    2994:	ea e4       	ldi	r30, 0x4A	; 74
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	81 e1       	ldi	r24, 0x11	; 17
    299a:	9a e7       	ldi	r25, 0x7A	; 122
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	80 83       	st	Z, r24
	TCNT1 = 0; // Start value for timer register
    29a0:	ec e4       	ldi	r30, 0x4C	; 76
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	11 82       	std	Z+1, r1	; 0x01
    29a6:	10 82       	st	Z, r1
	s=0; // Initialize second value (s) to zero
    29a8:	10 92 05 06 	sts	0x0605, r1
	timer = (uint8_t)DEBOUNCE; 
    29ac:	10 92 04 06 	sts	0x0604, r1
	TIMSK |= (1<<OCIE1A);		// activate timer interrupts which starts timer run
    29b0:	a9 e5       	ldi	r26, 0x59	; 89
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	e9 e5       	ldi	r30, 0x59	; 89
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	80 61       	ori	r24, 0x10	; 16
    29bc:	8c 93       	st	X, r24
}
    29be:	cf 91       	pop	r28
    29c0:	df 91       	pop	r29
    29c2:	08 95       	ret

000029c4 <uart_set_flow_control>:
/** number of chars in rx buffer */
static volatile unsigned char chars_in_rx_buffer = 0;

void SendOutOfBand(unsigned char c);

void uart_set_flow_control(unsigned char _flowControl) {
    29c4:	df 93       	push	r29
    29c6:	cf 93       	push	r28
    29c8:	0f 92       	push	r0
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
    29ce:	89 83       	std	Y+1, r24	; 0x01
	flowControl = _flowControl;
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	80 93 a7 04 	sts	0x04A7, r24
}
    29d6:	0f 90       	pop	r0
    29d8:	cf 91       	pop	r28
    29da:	df 91       	pop	r29
    29dc:	08 95       	ret

000029de <uart_get_flow_control>:

unsigned char uart_get_flow_control() {
    29de:	df 93       	push	r29
    29e0:	cf 93       	push	r28
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
	return flowControl;
    29e6:	80 91 a7 04 	lds	r24, 0x04A7
}
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	08 95       	ret

000029f0 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
 Function: UART Receive Complete interrupt
 Purpose:  called when the UART has received a character
 **************************************************************************/
{
    29f0:	1f 92       	push	r1
    29f2:	0f 92       	push	r0
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	0f 92       	push	r0
    29f8:	11 24       	eor	r1, r1
    29fa:	2f 93       	push	r18
    29fc:	3f 93       	push	r19
    29fe:	4f 93       	push	r20
    2a00:	5f 93       	push	r21
    2a02:	6f 93       	push	r22
    2a04:	7f 93       	push	r23
    2a06:	8f 93       	push	r24
    2a08:	9f 93       	push	r25
    2a0a:	af 93       	push	r26
    2a0c:	bf 93       	push	r27
    2a0e:	ef 93       	push	r30
    2a10:	ff 93       	push	r31
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	00 d0       	rcall	.+0      	; 0x2a18 <__vector_13+0x28>
    2a18:	00 d0       	rcall	.+0      	; 0x2a1a <__vector_13+0x2a>
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	unsigned char usr;
	unsigned char lastRxError;

	/* read UART status register and UART data register */
	usr = UART0_STATUS;
    2a1e:	eb e2       	ldi	r30, 0x2B	; 43
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	8a 83       	std	Y+2, r24	; 0x02
	data = UART0_DATA;
    2a26:	ec e2       	ldi	r30, 0x2C	; 44
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	8b 83       	std	Y+3, r24	; 0x03

	/* */
#if defined( AT90_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
    2a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a30:	88 71       	andi	r24, 0x18	; 24
    2a32:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif

	/* calculate buffer index */
	tmphead = (UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    2a34:	80 91 4d 05 	lds	r24, 0x054D
    2a38:	8f 5f       	subi	r24, 0xFF	; 255
    2a3a:	8f 77       	andi	r24, 0x7F	; 127
    2a3c:	8c 83       	std	Y+4, r24	; 0x04

	if (tmphead == UART_RxTail) {
    2a3e:	90 91 4e 05 	lds	r25, 0x054E
    2a42:	8c 81       	ldd	r24, Y+4	; 0x04
    2a44:	89 17       	cp	r24, r25
    2a46:	19 f4       	brne	.+6      	; 0x2a4e <__vector_13+0x5e>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    2a48:	82 e0       	ldi	r24, 0x02	; 2
    2a4a:	89 83       	std	Y+1, r24	; 0x01
    2a4c:	10 c0       	rjmp	.+32     	; 0x2a6e <__vector_13+0x7e>
	} else {
		/* store new index */
		UART_RxHead = tmphead;
    2a4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a50:	80 93 4d 05 	sts	0x054D, r24
		/* store received data in buffer */
		UART_RxBuf[tmphead] = data;
    2a54:	8c 81       	ldd	r24, Y+4	; 0x04
    2a56:	88 2f       	mov	r24, r24
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	e5 53       	subi	r30, 0x35	; 53
    2a5e:	fb 4f       	sbci	r31, 0xFB	; 251
    2a60:	8b 81       	ldd	r24, Y+3	; 0x03
    2a62:	80 83       	st	Z, r24
		chars_in_rx_buffer++;
    2a64:	80 91 aa 04 	lds	r24, 0x04AA
    2a68:	8f 5f       	subi	r24, 0xFF	; 255
    2a6a:	80 93 aa 04 	sts	0x04AA, r24
	}

	if (flowControl == FLOWCONTROL_XONXOFF
    2a6e:	80 91 a7 04 	lds	r24, 0x04A7
    2a72:	81 30       	cpi	r24, 0x01	; 1
    2a74:	99 f4       	brne	.+38     	; 0x2a9c <__vector_13+0xac>
    2a76:	80 91 aa 04 	lds	r24, 0x04AA
    2a7a:	81 36       	cpi	r24, 0x61	; 97
    2a7c:	78 f0       	brcs	.+30     	; 0x2a9c <__vector_13+0xac>
			&& chars_in_rx_buffer > UART_RX_BUFFER_MAX_MARK) {
		/* immediately send XOFF */
		oob_event = 1;
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	80 93 a8 04 	sts	0x04A8, r24
		if (!after_xoff_sent) {
    2a84:	80 91 a9 04 	lds	r24, 0x04A9
    2a88:	88 23       	and	r24, r24
    2a8a:	31 f4       	brne	.+12     	; 0x2a98 <__vector_13+0xa8>
			SendOutOfBand(XOFF);
    2a8c:	83 e1       	ldi	r24, 0x13	; 19
    2a8e:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <SendOutOfBand>
			after_xoff_sent = 1;
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	80 93 a9 04 	sts	0x04A9, r24
		}
		oob_event = 0;
    2a98:	10 92 a8 04 	sts	0x04A8, r1
	}

	UART_LastRxError = lastRxError;
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	80 93 4f 05 	sts	0x054F, r24
}
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	ff 91       	pop	r31
    2ab0:	ef 91       	pop	r30
    2ab2:	bf 91       	pop	r27
    2ab4:	af 91       	pop	r26
    2ab6:	9f 91       	pop	r25
    2ab8:	8f 91       	pop	r24
    2aba:	7f 91       	pop	r23
    2abc:	6f 91       	pop	r22
    2abe:	5f 91       	pop	r21
    2ac0:	4f 91       	pop	r20
    2ac2:	3f 91       	pop	r19
    2ac4:	2f 91       	pop	r18
    2ac6:	0f 90       	pop	r0
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	0f 90       	pop	r0
    2acc:	1f 90       	pop	r1
    2ace:	18 95       	reti

00002ad0 <SendOutOfBand>:

void SendOutOfBand(unsigned char c) {
    2ad0:	df 93       	push	r29
    2ad2:	cf 93       	push	r28
    2ad4:	0f 92       	push	r0
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << UDRE)))
    2adc:	eb e2       	ldi	r30, 0x2B	; 43
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	88 2f       	mov	r24, r24
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	80 72       	andi	r24, 0x20	; 32
    2ae8:	90 70       	andi	r25, 0x00	; 0
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	b9 f3       	breq	.-18     	; 0x2adc <SendOutOfBand+0xc>
		;
	UDR = c;
    2aee:	ec e2       	ldi	r30, 0x2C	; 44
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
    2af4:	80 83       	st	Z, r24
}
    2af6:	0f 90       	pop	r0
    2af8:	cf 91       	pop	r28
    2afa:	df 91       	pop	r29
    2afc:	08 95       	ret

00002afe <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
 Function: UART Data Register Empty interrupt
 Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
    2afe:	1f 92       	push	r1
    2b00:	0f 92       	push	r0
    2b02:	0f b6       	in	r0, 0x3f	; 63
    2b04:	0f 92       	push	r0
    2b06:	11 24       	eor	r1, r1
    2b08:	8f 93       	push	r24
    2b0a:	9f 93       	push	r25
    2b0c:	af 93       	push	r26
    2b0e:	bf 93       	push	r27
    2b10:	ef 93       	push	r30
    2b12:	ff 93       	push	r31
    2b14:	df 93       	push	r29
    2b16:	cf 93       	push	r28
    2b18:	0f 92       	push	r0
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;

	if (oob_event) {
    2b1e:	80 91 a8 04 	lds	r24, 0x04A8
    2b22:	88 23       	and	r24, r24
    2b24:	01 f5       	brne	.+64     	; 0x2b66 <__vector_14+0x68>
		/* suppress transmitting during oob handling */
		return;
	}
	if (UART_TxHead != UART_TxTail) {
    2b26:	90 91 4b 05 	lds	r25, 0x054B
    2b2a:	80 91 4c 05 	lds	r24, 0x054C
    2b2e:	98 17       	cp	r25, r24
    2b30:	99 f0       	breq	.+38     	; 0x2b58 <__vector_14+0x5a>
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    2b32:	80 91 4c 05 	lds	r24, 0x054C
    2b36:	8f 5f       	subi	r24, 0xFF	; 255
    2b38:	8f 71       	andi	r24, 0x1F	; 31
    2b3a:	89 83       	std	Y+1, r24	; 0x01
		UART_TxTail = tmptail;
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	80 93 4c 05 	sts	0x054C, r24
		/* get one byte from buffer and write it to UART */
		UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
    2b42:	ac e2       	ldi	r26, 0x2C	; 44
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	88 2f       	mov	r24, r24
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	e5 55       	subi	r30, 0x55	; 85
    2b50:	fb 4f       	sbci	r31, 0xFB	; 251
    2b52:	80 81       	ld	r24, Z
    2b54:	8c 93       	st	X, r24
    2b56:	07 c0       	rjmp	.+14     	; 0x2b66 <__vector_14+0x68>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
    2b58:	aa e2       	ldi	r26, 0x2A	; 42
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	ea e2       	ldi	r30, 0x2A	; 42
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	8f 7d       	andi	r24, 0xDF	; 223
    2b64:	8c 93       	st	X, r24
	}
}
    2b66:	0f 90       	pop	r0
    2b68:	cf 91       	pop	r28
    2b6a:	df 91       	pop	r29
    2b6c:	ff 91       	pop	r31
    2b6e:	ef 91       	pop	r30
    2b70:	bf 91       	pop	r27
    2b72:	af 91       	pop	r26
    2b74:	9f 91       	pop	r25
    2b76:	8f 91       	pop	r24
    2b78:	0f 90       	pop	r0
    2b7a:	0f be       	out	0x3f, r0	; 63
    2b7c:	0f 90       	pop	r0
    2b7e:	1f 90       	pop	r1
    2b80:	18 95       	reti

00002b82 <uart_init>:
 Function: uart_init()
 Purpose:  initialize UART and set baudrate
 Input:    baudrate using macro UART_BAUD_SELECT()
 Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate) {
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	00 d0       	rcall	.+0      	; 0x2b88 <uart_init+0x6>
    2b88:	cd b7       	in	r28, 0x3d	; 61
    2b8a:	de b7       	in	r29, 0x3e	; 62
    2b8c:	9a 83       	std	Y+2, r25	; 0x02
    2b8e:	89 83       	std	Y+1, r24	; 0x01
	UART_TxHead = 0;
    2b90:	10 92 4b 05 	sts	0x054B, r1
	UART_TxTail = 0;
    2b94:	10 92 4c 05 	sts	0x054C, r1
	UART_RxHead = 0;
    2b98:	10 92 4d 05 	sts	0x054D, r1
	UART_RxTail = 0;
    2b9c:	10 92 4e 05 	sts	0x054E, r1
	/* enable UART receiver and transmmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if (baudrate & 0x8000) {
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba4:	99 23       	and	r25, r25
    2ba6:	4c f4       	brge	.+18     	; 0x2bba <uart_init+0x38>
		UART0_STATUS = (1 << U2X);  //Enable 2x speed
    2ba8:	eb e2       	ldi	r30, 0x2B	; 43
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	82 e0       	ldi	r24, 0x02	; 2
    2bae:	80 83       	st	Z, r24
		baudrate &= ~0x8000;
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb4:	9f 77       	andi	r25, 0x7F	; 127
    2bb6:	9a 83       	std	Y+2, r25	; 0x02
    2bb8:	89 83       	std	Y+1, r24	; 0x01
	}
	UBRRH = (unsigned char) (baudrate >> 8);
    2bba:	e0 e4       	ldi	r30, 0x40	; 64
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc2:	89 2f       	mov	r24, r25
    2bc4:	99 27       	eor	r25, r25
    2bc6:	80 83       	st	Z, r24
	UBRRL = (unsigned char) baudrate;
    2bc8:	e9 e2       	ldi	r30, 0x29	; 41
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	89 81       	ldd	r24, Y+1	; 0x01
    2bce:	80 83       	st	Z, r24

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | (1 << RXEN) | (1 << TXEN);
    2bd0:	ea e2       	ldi	r30, 0x2A	; 42
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	88 e9       	ldi	r24, 0x98	; 152
    2bd6:	80 83       	st	Z, r24

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
    2bd8:	e0 e4       	ldi	r30, 0x40	; 64
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	86 e8       	ldi	r24, 0x86	; 134
    2bde:	80 83       	st	Z, r24
	/* Enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	cf 91       	pop	r28
    2be6:	df 91       	pop	r29
    2be8:	08 95       	ret

00002bea <uart_getc>:
 Function: uart_getc()
 Purpose:  return byte from ringbuffer
 Returns:  lower byte:  received byte from ringbuffer
 higher byte: last receive error
 **************************************************************************/
unsigned int uart_getc(void) {
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	00 d0       	rcall	.+0      	; 0x2bf0 <uart_getc+0x6>
    2bf0:	00 d0       	rcall	.+0      	; 0x2bf2 <uart_getc+0x8>
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;
	unsigned char data;

	if (UART_RxHead == UART_RxTail) {
    2bf6:	90 91 4d 05 	lds	r25, 0x054D
    2bfa:	80 91 4e 05 	lds	r24, 0x054E
    2bfe:	98 17       	cp	r25, r24
    2c00:	29 f4       	brne	.+10     	; 0x2c0c <uart_getc+0x22>
		return UART_NO_DATA; /* no data available */
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	91 e0       	ldi	r25, 0x01	; 1
    2c06:	9c 83       	std	Y+4, r25	; 0x04
    2c08:	8b 83       	std	Y+3, r24	; 0x03
    2c0a:	3c c0       	rjmp	.+120    	; 0x2c84 <uart_getc+0x9a>
	}

	/* calculate /store buffer index */
	tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    2c0c:	80 91 4e 05 	lds	r24, 0x054E
    2c10:	8f 5f       	subi	r24, 0xFF	; 255
    2c12:	8f 77       	andi	r24, 0x7F	; 127
    2c14:	8a 83       	std	Y+2, r24	; 0x02
	UART_RxTail = tmptail;
    2c16:	8a 81       	ldd	r24, Y+2	; 0x02
    2c18:	80 93 4e 05 	sts	0x054E, r24

	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];
    2c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1e:	88 2f       	mov	r24, r24
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	fc 01       	movw	r30, r24
    2c24:	e5 53       	subi	r30, 0x35	; 53
    2c26:	fb 4f       	sbci	r31, 0xFB	; 251
    2c28:	80 81       	ld	r24, Z
    2c2a:	89 83       	std	Y+1, r24	; 0x01
	if (chars_in_rx_buffer > 0) {
    2c2c:	80 91 aa 04 	lds	r24, 0x04AA
    2c30:	88 23       	and	r24, r24
    2c32:	29 f0       	breq	.+10     	; 0x2c3e <uart_getc+0x54>
		chars_in_rx_buffer--;
    2c34:	80 91 aa 04 	lds	r24, 0x04AA
    2c38:	81 50       	subi	r24, 0x01	; 1
    2c3a:	80 93 aa 04 	sts	0x04AA, r24
	}
	if ((flowControl == FLOWCONTROL_XONXOFF) && after_xoff_sent) {
    2c3e:	80 91 a7 04 	lds	r24, 0x04A7
    2c42:	81 30       	cpi	r24, 0x01	; 1
    2c44:	91 f4       	brne	.+36     	; 0x2c6a <uart_getc+0x80>
    2c46:	80 91 a9 04 	lds	r24, 0x04A9
    2c4a:	88 23       	and	r24, r24
    2c4c:	71 f0       	breq	.+28     	; 0x2c6a <uart_getc+0x80>
		if (chars_in_rx_buffer <= UART_RX_BUFFER_MIN_MARK) {
    2c4e:	80 91 aa 04 	lds	r24, 0x04AA
    2c52:	81 31       	cpi	r24, 0x11	; 17
    2c54:	50 f4       	brcc	.+20     	; 0x2c6a <uart_getc+0x80>
			/* immediately send XON */
			oob_event = 1;
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	80 93 a8 04 	sts	0x04A8, r24
			SendOutOfBand(XON);
    2c5c:	81 e1       	ldi	r24, 0x11	; 17
    2c5e:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <SendOutOfBand>
			after_xoff_sent = 0;
    2c62:	10 92 a9 04 	sts	0x04A9, r1
			oob_event = 0;
    2c66:	10 92 a8 04 	sts	0x04A8, r1
		}
	}

	return (UART_LastRxError << 8) + data;
    2c6a:	80 91 4f 05 	lds	r24, 0x054F
    2c6e:	88 2f       	mov	r24, r24
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	38 2f       	mov	r19, r24
    2c74:	22 27       	eor	r18, r18
    2c76:	89 81       	ldd	r24, Y+1	; 0x01
    2c78:	88 2f       	mov	r24, r24
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	82 0f       	add	r24, r18
    2c7e:	93 1f       	adc	r25, r19
    2c80:	9c 83       	std	Y+4, r25	; 0x04
    2c82:	8b 83       	std	Y+3, r24	; 0x03
    2c84:	8b 81       	ldd	r24, Y+3	; 0x03
    2c86:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    2c88:	0f 90       	pop	r0
    2c8a:	0f 90       	pop	r0
    2c8c:	0f 90       	pop	r0
    2c8e:	0f 90       	pop	r0
    2c90:	cf 91       	pop	r28
    2c92:	df 91       	pop	r29
    2c94:	08 95       	ret

00002c96 <uart_putc>:
 Function: uart_putc()
 Purpose:  write byte to ringbuffer for transmitting via UART
 Input:    byte to be transmitted
 Returns:  none
 **************************************************************************/
void uart_putc(unsigned char data) {
    2c96:	df 93       	push	r29
    2c98:	cf 93       	push	r28
    2c9a:	00 d0       	rcall	.+0      	; 0x2c9c <uart_putc+0x6>
    2c9c:	cd b7       	in	r28, 0x3d	; 61
    2c9e:	de b7       	in	r29, 0x3e	; 62
    2ca0:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char tmphead;

	tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    2ca2:	80 91 4b 05 	lds	r24, 0x054B
    2ca6:	8f 5f       	subi	r24, 0xFF	; 255
    2ca8:	8f 71       	andi	r24, 0x1F	; 31
    2caa:	89 83       	std	Y+1, r24	; 0x01

	while (tmphead == UART_TxTail) {
    2cac:	90 91 4c 05 	lds	r25, 0x054C
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	89 17       	cp	r24, r25
    2cb4:	d9 f3       	breq	.-10     	; 0x2cac <uart_putc+0x16>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	88 2f       	mov	r24, r24
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	e5 55       	subi	r30, 0x55	; 85
    2cc0:	fb 4f       	sbci	r31, 0xFB	; 251
    2cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc4:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	80 93 4b 05 	sts	0x054B, r24

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    2ccc:	aa e2       	ldi	r26, 0x2A	; 42
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	ea e2       	ldi	r30, 0x2A	; 42
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	80 62       	ori	r24, 0x20	; 32
    2cd8:	8c 93       	st	X, r24

}/* uart_putc */
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	08 95       	ret

00002ce4 <uart_puts>:
 Function: uart_puts()
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
    2ce4:	df 93       	push	r29
    2ce6:	cf 93       	push	r28
    2ce8:	00 d0       	rcall	.+0      	; 0x2cea <uart_puts+0x6>
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
    2cee:	9a 83       	std	Y+2, r25	; 0x02
    2cf0:	89 83       	std	Y+1, r24	; 0x01
    2cf2:	0b c0       	rjmp	.+22     	; 0x2d0a <uart_puts+0x26>
	while (*s)
		uart_putc(*s++);
    2cf4:	e9 81       	ldd	r30, Y+1	; 0x01
    2cf6:	fa 81       	ldd	r31, Y+2	; 0x02
    2cf8:	20 81       	ld	r18, Z
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfe:	01 96       	adiw	r24, 0x01	; 1
    2d00:	9a 83       	std	Y+2, r25	; 0x02
    2d02:	89 83       	std	Y+1, r24	; 0x01
    2d04:	82 2f       	mov	r24, r18
    2d06:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <uart_putc>
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
	while (*s)
    2d0a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d0c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d0e:	80 81       	ld	r24, Z
    2d10:	88 23       	and	r24, r24
    2d12:	81 f7       	brne	.-32     	; 0x2cf4 <uart_puts+0x10>
		uart_putc(*s++);

}/* uart_puts */
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	08 95       	ret

00002d1e <uart_puts_p>:
 Function: uart_puts_p()
 Purpose:  transmit string from program memory to UART
 Input:    program memory string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	00 d0       	rcall	.+0      	; 0x2d24 <uart_puts_p+0x6>
    2d24:	00 d0       	rcall	.+0      	; 0x2d26 <uart_puts_p+0x8>
    2d26:	00 d0       	rcall	.+0      	; 0x2d28 <uart_puts_p+0xa>
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    2d2c:	9d 83       	std	Y+5, r25	; 0x05
    2d2e:	8c 83       	std	Y+4, r24	; 0x04
    2d30:	03 c0       	rjmp	.+6      	; 0x2d38 <uart_puts_p+0x1a>
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
		uart_putc(c);
    2d32:	8e 81       	ldd	r24, Y+6	; 0x06
    2d34:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <uart_putc>
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
    2d38:	8c 81       	ldd	r24, Y+4	; 0x04
    2d3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d3c:	9b 83       	std	Y+3, r25	; 0x03
    2d3e:	8a 83       	std	Y+2, r24	; 0x02
    2d40:	8c 81       	ldd	r24, Y+4	; 0x04
    2d42:	9d 81       	ldd	r25, Y+5	; 0x05
    2d44:	01 96       	adiw	r24, 0x01	; 1
    2d46:	9d 83       	std	Y+5, r25	; 0x05
    2d48:	8c 83       	std	Y+4, r24	; 0x04
    2d4a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d4c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d4e:	84 91       	lpm	r24, Z+
    2d50:	89 83       	std	Y+1, r24	; 0x01
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	8e 83       	std	Y+6, r24	; 0x06
    2d56:	8e 81       	ldd	r24, Y+6	; 0x06
    2d58:	88 23       	and	r24, r24
    2d5a:	59 f7       	brne	.-42     	; 0x2d32 <uart_puts_p+0x14>
		uart_putc(c);

}/* uart_puts_p */
    2d5c:	26 96       	adiw	r28, 0x06	; 6
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	f8 94       	cli
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	cd bf       	out	0x3d, r28	; 61
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	08 95       	ret

00002d6e <__divmodhi4>:
    2d6e:	97 fb       	bst	r25, 7
    2d70:	09 2e       	mov	r0, r25
    2d72:	07 26       	eor	r0, r23
    2d74:	0a d0       	rcall	.+20     	; 0x2d8a <__divmodhi4_neg1>
    2d76:	77 fd       	sbrc	r23, 7
    2d78:	04 d0       	rcall	.+8      	; 0x2d82 <__divmodhi4_neg2>
    2d7a:	0c d0       	rcall	.+24     	; 0x2d94 <__udivmodhi4>
    2d7c:	06 d0       	rcall	.+12     	; 0x2d8a <__divmodhi4_neg1>
    2d7e:	00 20       	and	r0, r0
    2d80:	1a f4       	brpl	.+6      	; 0x2d88 <__divmodhi4_exit>

00002d82 <__divmodhi4_neg2>:
    2d82:	70 95       	com	r23
    2d84:	61 95       	neg	r22
    2d86:	7f 4f       	sbci	r23, 0xFF	; 255

00002d88 <__divmodhi4_exit>:
    2d88:	08 95       	ret

00002d8a <__divmodhi4_neg1>:
    2d8a:	f6 f7       	brtc	.-4      	; 0x2d88 <__divmodhi4_exit>
    2d8c:	90 95       	com	r25
    2d8e:	81 95       	neg	r24
    2d90:	9f 4f       	sbci	r25, 0xFF	; 255
    2d92:	08 95       	ret

00002d94 <__udivmodhi4>:
    2d94:	aa 1b       	sub	r26, r26
    2d96:	bb 1b       	sub	r27, r27
    2d98:	51 e1       	ldi	r21, 0x11	; 17
    2d9a:	07 c0       	rjmp	.+14     	; 0x2daa <__udivmodhi4_ep>

00002d9c <__udivmodhi4_loop>:
    2d9c:	aa 1f       	adc	r26, r26
    2d9e:	bb 1f       	adc	r27, r27
    2da0:	a6 17       	cp	r26, r22
    2da2:	b7 07       	cpc	r27, r23
    2da4:	10 f0       	brcs	.+4      	; 0x2daa <__udivmodhi4_ep>
    2da6:	a6 1b       	sub	r26, r22
    2da8:	b7 0b       	sbc	r27, r23

00002daa <__udivmodhi4_ep>:
    2daa:	88 1f       	adc	r24, r24
    2dac:	99 1f       	adc	r25, r25
    2dae:	5a 95       	dec	r21
    2db0:	a9 f7       	brne	.-22     	; 0x2d9c <__udivmodhi4_loop>
    2db2:	80 95       	com	r24
    2db4:	90 95       	com	r25
    2db6:	bc 01       	movw	r22, r24
    2db8:	cd 01       	movw	r24, r26
    2dba:	08 95       	ret

00002dbc <__prologue_saves__>:
    2dbc:	2f 92       	push	r2
    2dbe:	3f 92       	push	r3
    2dc0:	4f 92       	push	r4
    2dc2:	5f 92       	push	r5
    2dc4:	6f 92       	push	r6
    2dc6:	7f 92       	push	r7
    2dc8:	8f 92       	push	r8
    2dca:	9f 92       	push	r9
    2dcc:	af 92       	push	r10
    2dce:	bf 92       	push	r11
    2dd0:	cf 92       	push	r12
    2dd2:	df 92       	push	r13
    2dd4:	ef 92       	push	r14
    2dd6:	ff 92       	push	r15
    2dd8:	0f 93       	push	r16
    2dda:	1f 93       	push	r17
    2ddc:	cf 93       	push	r28
    2dde:	df 93       	push	r29
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
    2de4:	ca 1b       	sub	r28, r26
    2de6:	db 0b       	sbc	r29, r27
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	f8 94       	cli
    2dec:	de bf       	out	0x3e, r29	; 62
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	cd bf       	out	0x3d, r28	; 61
    2df2:	09 94       	ijmp

00002df4 <__epilogue_restores__>:
    2df4:	2a 88       	ldd	r2, Y+18	; 0x12
    2df6:	39 88       	ldd	r3, Y+17	; 0x11
    2df8:	48 88       	ldd	r4, Y+16	; 0x10
    2dfa:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dfc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dfe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e00:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e02:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e04:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e06:	b9 84       	ldd	r11, Y+9	; 0x09
    2e08:	c8 84       	ldd	r12, Y+8	; 0x08
    2e0a:	df 80       	ldd	r13, Y+7	; 0x07
    2e0c:	ee 80       	ldd	r14, Y+6	; 0x06
    2e0e:	fd 80       	ldd	r15, Y+5	; 0x05
    2e10:	0c 81       	ldd	r16, Y+4	; 0x04
    2e12:	1b 81       	ldd	r17, Y+3	; 0x03
    2e14:	aa 81       	ldd	r26, Y+2	; 0x02
    2e16:	b9 81       	ldd	r27, Y+1	; 0x01
    2e18:	ce 0f       	add	r28, r30
    2e1a:	d1 1d       	adc	r29, r1
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	de bf       	out	0x3e, r29	; 62
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	cd bf       	out	0x3d, r28	; 61
    2e26:	ed 01       	movw	r28, r26
    2e28:	08 95       	ret

00002e2a <_exit>:
    2e2a:	f8 94       	cli

00002e2c <__stop_program>:
    2e2c:	ff cf       	rjmp	.-2      	; 0x2e2c <__stop_program>


gpib_004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000267a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000055e  00800060  0000267a  000026ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000173  008005be  00002bd8  00002c4c  2**0
                  ALLOC
  3 .stab         00005028  00000000  00000000  00002c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002569  00000000  00000000  00007c74  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__ctors_end>
       4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
       8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
       c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      1c:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__vector_7>
      20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      34:	0c 94 45 11 	jmp	0x228a	; 0x228a <__vector_13>
      38:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <__vector_14>
      3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>

00000054 <__c.2014>:
      54:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
      64:	65 72 72 6f 72 3a 20 00                             error: .

0000006c <__c.2012>:
      6c:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
      7c:	6f 72 3a 20 00                                      or: .

00000081 <__c.2010>:
      81:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
      91:	3a 20 00                                            : .

00000094 <__c.2036>:
      94:	43 6f 6d 6d 61 6e 64 20 6f 76 65 72 66 6c 6f 77     Command overflow
      a4:	2e 00                                               ..

000000a6 <__ctors_end>:
      a6:	11 24       	eor	r1, r1
      a8:	1f be       	out	0x3f, r1	; 63
      aa:	cf e5       	ldi	r28, 0x5F	; 95
      ac:	d8 e0       	ldi	r29, 0x08	; 8
      ae:	de bf       	out	0x3e, r29	; 62
      b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
      b2:	15 e0       	ldi	r17, 0x05	; 5
      b4:	a0 e6       	ldi	r26, 0x60	; 96
      b6:	b0 e0       	ldi	r27, 0x00	; 0
      b8:	ea e7       	ldi	r30, 0x7A	; 122
      ba:	f6 e2       	ldi	r31, 0x26	; 38
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <.do_copy_data_start>

000000be <.do_copy_data_loop>:
      be:	05 90       	lpm	r0, Z+
      c0:	0d 92       	st	X+, r0

000000c2 <.do_copy_data_start>:
      c2:	ae 3b       	cpi	r26, 0xBE	; 190
      c4:	b1 07       	cpc	r27, r17
      c6:	d9 f7       	brne	.-10     	; 0xbe <.do_copy_data_loop>

000000c8 <__do_clear_bss>:
      c8:	17 e0       	ldi	r17, 0x07	; 7
      ca:	ae eb       	ldi	r26, 0xBE	; 190
      cc:	b5 e0       	ldi	r27, 0x05	; 5
      ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
      d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
      d2:	a1 33       	cpi	r26, 0x31	; 49
      d4:	b1 07       	cpc	r27, r17
      d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
      d8:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <main>
      dc:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <_exit>

000000e0 <__bad_interrupt>:
      e0:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000e4 <atoi>:
      e4:	fc 01       	movw	r30, r24
      e6:	88 27       	eor	r24, r24
      e8:	99 27       	eor	r25, r25
      ea:	e8 94       	clt
      ec:	21 91       	ld	r18, Z+
      ee:	20 32       	cpi	r18, 0x20	; 32
      f0:	e9 f3       	breq	.-6      	; 0xec <atoi+0x8>
      f2:	29 30       	cpi	r18, 0x09	; 9
      f4:	10 f0       	brcs	.+4      	; 0xfa <atoi+0x16>
      f6:	2e 30       	cpi	r18, 0x0E	; 14
      f8:	c8 f3       	brcs	.-14     	; 0xec <atoi+0x8>
      fa:	2b 32       	cpi	r18, 0x2B	; 43
      fc:	41 f0       	breq	.+16     	; 0x10e <atoi+0x2a>
      fe:	2d 32       	cpi	r18, 0x2D	; 45
     100:	39 f4       	brne	.+14     	; 0x110 <atoi+0x2c>
     102:	68 94       	set
     104:	04 c0       	rjmp	.+8      	; 0x10e <atoi+0x2a>
     106:	0e 94 db 00 	call	0x1b6	; 0x1b6 <__mulhi_const_10>
     10a:	82 0f       	add	r24, r18
     10c:	91 1d       	adc	r25, r1
     10e:	21 91       	ld	r18, Z+
     110:	20 53       	subi	r18, 0x30	; 48
     112:	2a 30       	cpi	r18, 0x0A	; 10
     114:	c0 f3       	brcs	.-16     	; 0x106 <atoi+0x22>
     116:	1e f4       	brtc	.+6      	; 0x11e <atoi+0x3a>
     118:	90 95       	com	r25
     11a:	81 95       	neg	r24
     11c:	9f 4f       	sbci	r25, 0xFF	; 255
     11e:	08 95       	ret

00000120 <strtok>:
     120:	4e eb       	ldi	r20, 0xBE	; 190
     122:	55 e0       	ldi	r21, 0x05	; 5
     124:	0e 94 a9 00 	call	0x152	; 0x152 <strtok_r>
     128:	08 95       	ret

0000012a <strchr>:
     12a:	fc 01       	movw	r30, r24
     12c:	81 91       	ld	r24, Z+
     12e:	86 17       	cp	r24, r22
     130:	21 f0       	breq	.+8      	; 0x13a <strchr+0x10>
     132:	88 23       	and	r24, r24
     134:	d9 f7       	brne	.-10     	; 0x12c <strchr+0x2>
     136:	99 27       	eor	r25, r25
     138:	08 95       	ret
     13a:	31 97       	sbiw	r30, 0x01	; 1
     13c:	cf 01       	movw	r24, r30
     13e:	08 95       	ret

00000140 <strlen>:
     140:	fc 01       	movw	r30, r24
     142:	01 90       	ld	r0, Z+
     144:	00 20       	and	r0, r0
     146:	e9 f7       	brne	.-6      	; 0x142 <strlen+0x2>
     148:	80 95       	com	r24
     14a:	90 95       	com	r25
     14c:	8e 0f       	add	r24, r30
     14e:	9f 1f       	adc	r25, r31
     150:	08 95       	ret

00000152 <strtok_r>:
     152:	00 97       	sbiw	r24, 0x00	; 0
     154:	31 f4       	brne	.+12     	; 0x162 <strtok_r+0x10>
     156:	da 01       	movw	r26, r20
     158:	8d 91       	ld	r24, X+
     15a:	9c 91       	ld	r25, X
     15c:	00 97       	sbiw	r24, 0x00	; 0
     15e:	09 f4       	brne	.+2      	; 0x162 <strtok_r+0x10>
     160:	0e c0       	rjmp	.+28     	; 0x17e <strtok_r+0x2c>
     162:	dc 01       	movw	r26, r24
     164:	fb 01       	movw	r30, r22
     166:	3d 91       	ld	r19, X+
     168:	21 91       	ld	r18, Z+
     16a:	22 23       	and	r18, r18
     16c:	19 f0       	breq	.+6      	; 0x174 <strtok_r+0x22>
     16e:	32 17       	cp	r19, r18
     170:	c9 f3       	breq	.-14     	; 0x164 <strtok_r+0x12>
     172:	fa cf       	rjmp	.-12     	; 0x168 <strtok_r+0x16>
     174:	33 23       	and	r19, r19
     176:	31 f4       	brne	.+12     	; 0x184 <strtok_r+0x32>
     178:	da 01       	movw	r26, r20
     17a:	1d 92       	st	X+, r1
     17c:	1c 92       	st	X, r1
     17e:	88 27       	eor	r24, r24
     180:	99 27       	eor	r25, r25
     182:	08 95       	ret
     184:	11 97       	sbiw	r26, 0x01	; 1
     186:	af 93       	push	r26
     188:	bf 93       	push	r27
     18a:	fb 01       	movw	r30, r22
     18c:	3d 91       	ld	r19, X+
     18e:	21 91       	ld	r18, Z+
     190:	32 17       	cp	r19, r18
     192:	71 f4       	brne	.+28     	; 0x1b0 <strtok_r+0x5e>
     194:	33 23       	and	r19, r19
     196:	21 f4       	brne	.+8      	; 0x1a0 <strtok_r+0x4e>
     198:	88 27       	eor	r24, r24
     19a:	99 27       	eor	r25, r25
     19c:	11 97       	sbiw	r26, 0x01	; 1
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <strtok_r+0x52>
     1a0:	1e 92       	st	-X, r1
     1a2:	11 96       	adiw	r26, 0x01	; 1
     1a4:	fa 01       	movw	r30, r20
     1a6:	a1 93       	st	Z+, r26
     1a8:	b0 83       	st	Z, r27
     1aa:	9f 91       	pop	r25
     1ac:	8f 91       	pop	r24
     1ae:	08 95       	ret
     1b0:	22 23       	and	r18, r18
     1b2:	69 f7       	brne	.-38     	; 0x18e <strtok_r+0x3c>
     1b4:	ea cf       	rjmp	.-44     	; 0x18a <strtok_r+0x38>

000001b6 <__mulhi_const_10>:
     1b6:	7a e0       	ldi	r23, 0x0A	; 10
     1b8:	97 9f       	mul	r25, r23
     1ba:	90 2d       	mov	r25, r0
     1bc:	87 9f       	mul	r24, r23
     1be:	80 2d       	mov	r24, r0
     1c0:	91 0d       	add	r25, r1
     1c2:	11 24       	eor	r1, r1
     1c4:	08 95       	ret

000001c6 <sprintf>:
     1c6:	ae e0       	ldi	r26, 0x0E	; 14
     1c8:	b0 e0       	ldi	r27, 0x00	; 0
     1ca:	e9 ee       	ldi	r30, 0xE9	; 233
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__prologue_saves__+0x1c>
     1d2:	0d 89       	ldd	r16, Y+21	; 0x15
     1d4:	1e 89       	ldd	r17, Y+22	; 0x16
     1d6:	86 e0       	ldi	r24, 0x06	; 6
     1d8:	8c 83       	std	Y+4, r24	; 0x04
     1da:	1a 83       	std	Y+2, r17	; 0x02
     1dc:	09 83       	std	Y+1, r16	; 0x01
     1de:	8f ef       	ldi	r24, 0xFF	; 255
     1e0:	9f e7       	ldi	r25, 0x7F	; 127
     1e2:	9e 83       	std	Y+6, r25	; 0x06
     1e4:	8d 83       	std	Y+5, r24	; 0x05
     1e6:	9e 01       	movw	r18, r28
     1e8:	27 5e       	subi	r18, 0xE7	; 231
     1ea:	3f 4f       	sbci	r19, 0xFF	; 255
     1ec:	ce 01       	movw	r24, r28
     1ee:	01 96       	adiw	r24, 0x01	; 1
     1f0:	6f 89       	ldd	r22, Y+23	; 0x17
     1f2:	78 8d       	ldd	r23, Y+24	; 0x18
     1f4:	a9 01       	movw	r20, r18
     1f6:	0e 94 07 01 	call	0x20e	; 0x20e <vfprintf>
     1fa:	2f 81       	ldd	r18, Y+7	; 0x07
     1fc:	38 85       	ldd	r19, Y+8	; 0x08
     1fe:	02 0f       	add	r16, r18
     200:	13 1f       	adc	r17, r19
     202:	f8 01       	movw	r30, r16
     204:	10 82       	st	Z, r1
     206:	2e 96       	adiw	r28, 0x0e	; 14
     208:	e4 e0       	ldi	r30, 0x04	; 4
     20a:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__epilogue_restores__+0x1c>

0000020e <vfprintf>:
     20e:	ab e0       	ldi	r26, 0x0B	; 11
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	ed e0       	ldi	r30, 0x0D	; 13
     214:	f1 e0       	ldi	r31, 0x01	; 1
     216:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__prologue_saves__>
     21a:	3c 01       	movw	r6, r24
     21c:	2b 01       	movw	r4, r22
     21e:	5a 01       	movw	r10, r20
     220:	fc 01       	movw	r30, r24
     222:	17 82       	std	Z+7, r1	; 0x07
     224:	16 82       	std	Z+6, r1	; 0x06
     226:	83 81       	ldd	r24, Z+3	; 0x03
     228:	81 fd       	sbrc	r24, 1
     22a:	03 c0       	rjmp	.+6      	; 0x232 <vfprintf+0x24>
     22c:	6f ef       	ldi	r22, 0xFF	; 255
     22e:	7f ef       	ldi	r23, 0xFF	; 255
     230:	c6 c1       	rjmp	.+908    	; 0x5be <vfprintf+0x3b0>
     232:	9a e0       	ldi	r25, 0x0A	; 10
     234:	89 2e       	mov	r8, r25
     236:	1e 01       	movw	r2, r28
     238:	08 94       	sec
     23a:	21 1c       	adc	r2, r1
     23c:	31 1c       	adc	r3, r1
     23e:	f3 01       	movw	r30, r6
     240:	23 81       	ldd	r18, Z+3	; 0x03
     242:	f2 01       	movw	r30, r4
     244:	23 fd       	sbrc	r18, 3
     246:	85 91       	lpm	r24, Z+
     248:	23 ff       	sbrs	r18, 3
     24a:	81 91       	ld	r24, Z+
     24c:	2f 01       	movw	r4, r30
     24e:	88 23       	and	r24, r24
     250:	09 f4       	brne	.+2      	; 0x254 <vfprintf+0x46>
     252:	b2 c1       	rjmp	.+868    	; 0x5b8 <vfprintf+0x3aa>
     254:	85 32       	cpi	r24, 0x25	; 37
     256:	39 f4       	brne	.+14     	; 0x266 <vfprintf+0x58>
     258:	23 fd       	sbrc	r18, 3
     25a:	85 91       	lpm	r24, Z+
     25c:	23 ff       	sbrs	r18, 3
     25e:	81 91       	ld	r24, Z+
     260:	2f 01       	movw	r4, r30
     262:	85 32       	cpi	r24, 0x25	; 37
     264:	29 f4       	brne	.+10     	; 0x270 <vfprintf+0x62>
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	b3 01       	movw	r22, r6
     26a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <fputc>
     26e:	e7 cf       	rjmp	.-50     	; 0x23e <vfprintf+0x30>
     270:	98 2f       	mov	r25, r24
     272:	ff 24       	eor	r15, r15
     274:	ee 24       	eor	r14, r14
     276:	99 24       	eor	r9, r9
     278:	ff e1       	ldi	r31, 0x1F	; 31
     27a:	ff 15       	cp	r31, r15
     27c:	d0 f0       	brcs	.+52     	; 0x2b2 <vfprintf+0xa4>
     27e:	9b 32       	cpi	r25, 0x2B	; 43
     280:	69 f0       	breq	.+26     	; 0x29c <vfprintf+0x8e>
     282:	9c 32       	cpi	r25, 0x2C	; 44
     284:	28 f4       	brcc	.+10     	; 0x290 <vfprintf+0x82>
     286:	90 32       	cpi	r25, 0x20	; 32
     288:	59 f0       	breq	.+22     	; 0x2a0 <vfprintf+0x92>
     28a:	93 32       	cpi	r25, 0x23	; 35
     28c:	91 f4       	brne	.+36     	; 0x2b2 <vfprintf+0xa4>
     28e:	0e c0       	rjmp	.+28     	; 0x2ac <vfprintf+0x9e>
     290:	9d 32       	cpi	r25, 0x2D	; 45
     292:	49 f0       	breq	.+18     	; 0x2a6 <vfprintf+0x98>
     294:	90 33       	cpi	r25, 0x30	; 48
     296:	69 f4       	brne	.+26     	; 0x2b2 <vfprintf+0xa4>
     298:	41 e0       	ldi	r20, 0x01	; 1
     29a:	24 c0       	rjmp	.+72     	; 0x2e4 <vfprintf+0xd6>
     29c:	52 e0       	ldi	r21, 0x02	; 2
     29e:	f5 2a       	or	r15, r21
     2a0:	84 e0       	ldi	r24, 0x04	; 4
     2a2:	f8 2a       	or	r15, r24
     2a4:	28 c0       	rjmp	.+80     	; 0x2f6 <vfprintf+0xe8>
     2a6:	98 e0       	ldi	r25, 0x08	; 8
     2a8:	f9 2a       	or	r15, r25
     2aa:	25 c0       	rjmp	.+74     	; 0x2f6 <vfprintf+0xe8>
     2ac:	e0 e1       	ldi	r30, 0x10	; 16
     2ae:	fe 2a       	or	r15, r30
     2b0:	22 c0       	rjmp	.+68     	; 0x2f6 <vfprintf+0xe8>
     2b2:	f7 fc       	sbrc	r15, 7
     2b4:	29 c0       	rjmp	.+82     	; 0x308 <vfprintf+0xfa>
     2b6:	89 2f       	mov	r24, r25
     2b8:	80 53       	subi	r24, 0x30	; 48
     2ba:	8a 30       	cpi	r24, 0x0A	; 10
     2bc:	70 f4       	brcc	.+28     	; 0x2da <vfprintf+0xcc>
     2be:	f6 fe       	sbrs	r15, 6
     2c0:	05 c0       	rjmp	.+10     	; 0x2cc <vfprintf+0xbe>
     2c2:	98 9c       	mul	r9, r8
     2c4:	90 2c       	mov	r9, r0
     2c6:	11 24       	eor	r1, r1
     2c8:	98 0e       	add	r9, r24
     2ca:	15 c0       	rjmp	.+42     	; 0x2f6 <vfprintf+0xe8>
     2cc:	e8 9c       	mul	r14, r8
     2ce:	e0 2c       	mov	r14, r0
     2d0:	11 24       	eor	r1, r1
     2d2:	e8 0e       	add	r14, r24
     2d4:	f0 e2       	ldi	r31, 0x20	; 32
     2d6:	ff 2a       	or	r15, r31
     2d8:	0e c0       	rjmp	.+28     	; 0x2f6 <vfprintf+0xe8>
     2da:	9e 32       	cpi	r25, 0x2E	; 46
     2dc:	29 f4       	brne	.+10     	; 0x2e8 <vfprintf+0xda>
     2de:	f6 fc       	sbrc	r15, 6
     2e0:	6b c1       	rjmp	.+726    	; 0x5b8 <vfprintf+0x3aa>
     2e2:	40 e4       	ldi	r20, 0x40	; 64
     2e4:	f4 2a       	or	r15, r20
     2e6:	07 c0       	rjmp	.+14     	; 0x2f6 <vfprintf+0xe8>
     2e8:	9c 36       	cpi	r25, 0x6C	; 108
     2ea:	19 f4       	brne	.+6      	; 0x2f2 <vfprintf+0xe4>
     2ec:	50 e8       	ldi	r21, 0x80	; 128
     2ee:	f5 2a       	or	r15, r21
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <vfprintf+0xe8>
     2f2:	98 36       	cpi	r25, 0x68	; 104
     2f4:	49 f4       	brne	.+18     	; 0x308 <vfprintf+0xfa>
     2f6:	f2 01       	movw	r30, r4
     2f8:	23 fd       	sbrc	r18, 3
     2fa:	95 91       	lpm	r25, Z+
     2fc:	23 ff       	sbrs	r18, 3
     2fe:	91 91       	ld	r25, Z+
     300:	2f 01       	movw	r4, r30
     302:	99 23       	and	r25, r25
     304:	09 f0       	breq	.+2      	; 0x308 <vfprintf+0xfa>
     306:	b8 cf       	rjmp	.-144    	; 0x278 <vfprintf+0x6a>
     308:	89 2f       	mov	r24, r25
     30a:	85 54       	subi	r24, 0x45	; 69
     30c:	83 30       	cpi	r24, 0x03	; 3
     30e:	18 f0       	brcs	.+6      	; 0x316 <vfprintf+0x108>
     310:	80 52       	subi	r24, 0x20	; 32
     312:	83 30       	cpi	r24, 0x03	; 3
     314:	38 f4       	brcc	.+14     	; 0x324 <vfprintf+0x116>
     316:	44 e0       	ldi	r20, 0x04	; 4
     318:	50 e0       	ldi	r21, 0x00	; 0
     31a:	a4 0e       	add	r10, r20
     31c:	b5 1e       	adc	r11, r21
     31e:	5f e3       	ldi	r21, 0x3F	; 63
     320:	59 83       	std	Y+1, r21	; 0x01
     322:	0f c0       	rjmp	.+30     	; 0x342 <vfprintf+0x134>
     324:	93 36       	cpi	r25, 0x63	; 99
     326:	31 f0       	breq	.+12     	; 0x334 <vfprintf+0x126>
     328:	93 37       	cpi	r25, 0x73	; 115
     32a:	79 f0       	breq	.+30     	; 0x34a <vfprintf+0x13c>
     32c:	93 35       	cpi	r25, 0x53	; 83
     32e:	09 f0       	breq	.+2      	; 0x332 <vfprintf+0x124>
     330:	56 c0       	rjmp	.+172    	; 0x3de <vfprintf+0x1d0>
     332:	20 c0       	rjmp	.+64     	; 0x374 <vfprintf+0x166>
     334:	f5 01       	movw	r30, r10
     336:	80 81       	ld	r24, Z
     338:	89 83       	std	Y+1, r24	; 0x01
     33a:	42 e0       	ldi	r20, 0x02	; 2
     33c:	50 e0       	ldi	r21, 0x00	; 0
     33e:	a4 0e       	add	r10, r20
     340:	b5 1e       	adc	r11, r21
     342:	61 01       	movw	r12, r2
     344:	01 e0       	ldi	r16, 0x01	; 1
     346:	10 e0       	ldi	r17, 0x00	; 0
     348:	12 c0       	rjmp	.+36     	; 0x36e <vfprintf+0x160>
     34a:	f5 01       	movw	r30, r10
     34c:	c0 80       	ld	r12, Z
     34e:	d1 80       	ldd	r13, Z+1	; 0x01
     350:	f6 fc       	sbrc	r15, 6
     352:	03 c0       	rjmp	.+6      	; 0x35a <vfprintf+0x14c>
     354:	6f ef       	ldi	r22, 0xFF	; 255
     356:	7f ef       	ldi	r23, 0xFF	; 255
     358:	02 c0       	rjmp	.+4      	; 0x35e <vfprintf+0x150>
     35a:	69 2d       	mov	r22, r9
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	42 e0       	ldi	r20, 0x02	; 2
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	a4 0e       	add	r10, r20
     364:	b5 1e       	adc	r11, r21
     366:	c6 01       	movw	r24, r12
     368:	0e 94 ef 02 	call	0x5de	; 0x5de <strnlen>
     36c:	8c 01       	movw	r16, r24
     36e:	5f e7       	ldi	r21, 0x7F	; 127
     370:	f5 22       	and	r15, r21
     372:	14 c0       	rjmp	.+40     	; 0x39c <vfprintf+0x18e>
     374:	f5 01       	movw	r30, r10
     376:	c0 80       	ld	r12, Z
     378:	d1 80       	ldd	r13, Z+1	; 0x01
     37a:	f6 fc       	sbrc	r15, 6
     37c:	03 c0       	rjmp	.+6      	; 0x384 <vfprintf+0x176>
     37e:	6f ef       	ldi	r22, 0xFF	; 255
     380:	7f ef       	ldi	r23, 0xFF	; 255
     382:	02 c0       	rjmp	.+4      	; 0x388 <vfprintf+0x17a>
     384:	69 2d       	mov	r22, r9
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	42 e0       	ldi	r20, 0x02	; 2
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	a4 0e       	add	r10, r20
     38e:	b5 1e       	adc	r11, r21
     390:	c6 01       	movw	r24, r12
     392:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <strnlen_P>
     396:	8c 01       	movw	r16, r24
     398:	50 e8       	ldi	r21, 0x80	; 128
     39a:	f5 2a       	or	r15, r21
     39c:	f3 fe       	sbrs	r15, 3
     39e:	07 c0       	rjmp	.+14     	; 0x3ae <vfprintf+0x1a0>
     3a0:	1a c0       	rjmp	.+52     	; 0x3d6 <vfprintf+0x1c8>
     3a2:	80 e2       	ldi	r24, 0x20	; 32
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	b3 01       	movw	r22, r6
     3a8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <fputc>
     3ac:	ea 94       	dec	r14
     3ae:	8e 2d       	mov	r24, r14
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	08 17       	cp	r16, r24
     3b4:	19 07       	cpc	r17, r25
     3b6:	a8 f3       	brcs	.-22     	; 0x3a2 <vfprintf+0x194>
     3b8:	0e c0       	rjmp	.+28     	; 0x3d6 <vfprintf+0x1c8>
     3ba:	f6 01       	movw	r30, r12
     3bc:	f7 fc       	sbrc	r15, 7
     3be:	85 91       	lpm	r24, Z+
     3c0:	f7 fe       	sbrs	r15, 7
     3c2:	81 91       	ld	r24, Z+
     3c4:	6f 01       	movw	r12, r30
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	b3 01       	movw	r22, r6
     3ca:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <fputc>
     3ce:	e1 10       	cpse	r14, r1
     3d0:	ea 94       	dec	r14
     3d2:	01 50       	subi	r16, 0x01	; 1
     3d4:	10 40       	sbci	r17, 0x00	; 0
     3d6:	01 15       	cp	r16, r1
     3d8:	11 05       	cpc	r17, r1
     3da:	79 f7       	brne	.-34     	; 0x3ba <vfprintf+0x1ac>
     3dc:	ea c0       	rjmp	.+468    	; 0x5b2 <vfprintf+0x3a4>
     3de:	94 36       	cpi	r25, 0x64	; 100
     3e0:	11 f0       	breq	.+4      	; 0x3e6 <vfprintf+0x1d8>
     3e2:	99 36       	cpi	r25, 0x69	; 105
     3e4:	69 f5       	brne	.+90     	; 0x440 <vfprintf+0x232>
     3e6:	f7 fe       	sbrs	r15, 7
     3e8:	08 c0       	rjmp	.+16     	; 0x3fa <vfprintf+0x1ec>
     3ea:	f5 01       	movw	r30, r10
     3ec:	20 81       	ld	r18, Z
     3ee:	31 81       	ldd	r19, Z+1	; 0x01
     3f0:	42 81       	ldd	r20, Z+2	; 0x02
     3f2:	53 81       	ldd	r21, Z+3	; 0x03
     3f4:	84 e0       	ldi	r24, 0x04	; 4
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0a c0       	rjmp	.+20     	; 0x40e <vfprintf+0x200>
     3fa:	f5 01       	movw	r30, r10
     3fc:	80 81       	ld	r24, Z
     3fe:	91 81       	ldd	r25, Z+1	; 0x01
     400:	9c 01       	movw	r18, r24
     402:	44 27       	eor	r20, r20
     404:	37 fd       	sbrc	r19, 7
     406:	40 95       	com	r20
     408:	54 2f       	mov	r21, r20
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	a8 0e       	add	r10, r24
     410:	b9 1e       	adc	r11, r25
     412:	9f e6       	ldi	r25, 0x6F	; 111
     414:	f9 22       	and	r15, r25
     416:	57 ff       	sbrs	r21, 7
     418:	09 c0       	rjmp	.+18     	; 0x42c <vfprintf+0x21e>
     41a:	50 95       	com	r21
     41c:	40 95       	com	r20
     41e:	30 95       	com	r19
     420:	21 95       	neg	r18
     422:	3f 4f       	sbci	r19, 0xFF	; 255
     424:	4f 4f       	sbci	r20, 0xFF	; 255
     426:	5f 4f       	sbci	r21, 0xFF	; 255
     428:	e0 e8       	ldi	r30, 0x80	; 128
     42a:	fe 2a       	or	r15, r30
     42c:	ca 01       	movw	r24, r20
     42e:	b9 01       	movw	r22, r18
     430:	a1 01       	movw	r20, r2
     432:	2a e0       	ldi	r18, 0x0A	; 10
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	0e 94 26 03 	call	0x64c	; 0x64c <__ultoa_invert>
     43a:	d8 2e       	mov	r13, r24
     43c:	d2 18       	sub	r13, r2
     43e:	40 c0       	rjmp	.+128    	; 0x4c0 <vfprintf+0x2b2>
     440:	95 37       	cpi	r25, 0x75	; 117
     442:	29 f4       	brne	.+10     	; 0x44e <vfprintf+0x240>
     444:	1f 2d       	mov	r17, r15
     446:	1f 7e       	andi	r17, 0xEF	; 239
     448:	2a e0       	ldi	r18, 0x0A	; 10
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	1d c0       	rjmp	.+58     	; 0x488 <vfprintf+0x27a>
     44e:	1f 2d       	mov	r17, r15
     450:	19 7f       	andi	r17, 0xF9	; 249
     452:	9f 36       	cpi	r25, 0x6F	; 111
     454:	61 f0       	breq	.+24     	; 0x46e <vfprintf+0x260>
     456:	90 37       	cpi	r25, 0x70	; 112
     458:	20 f4       	brcc	.+8      	; 0x462 <vfprintf+0x254>
     45a:	98 35       	cpi	r25, 0x58	; 88
     45c:	09 f0       	breq	.+2      	; 0x460 <vfprintf+0x252>
     45e:	ac c0       	rjmp	.+344    	; 0x5b8 <vfprintf+0x3aa>
     460:	0f c0       	rjmp	.+30     	; 0x480 <vfprintf+0x272>
     462:	90 37       	cpi	r25, 0x70	; 112
     464:	39 f0       	breq	.+14     	; 0x474 <vfprintf+0x266>
     466:	98 37       	cpi	r25, 0x78	; 120
     468:	09 f0       	breq	.+2      	; 0x46c <vfprintf+0x25e>
     46a:	a6 c0       	rjmp	.+332    	; 0x5b8 <vfprintf+0x3aa>
     46c:	04 c0       	rjmp	.+8      	; 0x476 <vfprintf+0x268>
     46e:	28 e0       	ldi	r18, 0x08	; 8
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	0a c0       	rjmp	.+20     	; 0x488 <vfprintf+0x27a>
     474:	10 61       	ori	r17, 0x10	; 16
     476:	14 fd       	sbrc	r17, 4
     478:	14 60       	ori	r17, 0x04	; 4
     47a:	20 e1       	ldi	r18, 0x10	; 16
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	04 c0       	rjmp	.+8      	; 0x488 <vfprintf+0x27a>
     480:	14 fd       	sbrc	r17, 4
     482:	16 60       	ori	r17, 0x06	; 6
     484:	20 e1       	ldi	r18, 0x10	; 16
     486:	32 e0       	ldi	r19, 0x02	; 2
     488:	17 ff       	sbrs	r17, 7
     48a:	08 c0       	rjmp	.+16     	; 0x49c <vfprintf+0x28e>
     48c:	f5 01       	movw	r30, r10
     48e:	60 81       	ld	r22, Z
     490:	71 81       	ldd	r23, Z+1	; 0x01
     492:	82 81       	ldd	r24, Z+2	; 0x02
     494:	93 81       	ldd	r25, Z+3	; 0x03
     496:	44 e0       	ldi	r20, 0x04	; 4
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	08 c0       	rjmp	.+16     	; 0x4ac <vfprintf+0x29e>
     49c:	f5 01       	movw	r30, r10
     49e:	80 81       	ld	r24, Z
     4a0:	91 81       	ldd	r25, Z+1	; 0x01
     4a2:	bc 01       	movw	r22, r24
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	42 e0       	ldi	r20, 0x02	; 2
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	a4 0e       	add	r10, r20
     4ae:	b5 1e       	adc	r11, r21
     4b0:	a1 01       	movw	r20, r2
     4b2:	0e 94 26 03 	call	0x64c	; 0x64c <__ultoa_invert>
     4b6:	d8 2e       	mov	r13, r24
     4b8:	d2 18       	sub	r13, r2
     4ba:	8f e7       	ldi	r24, 0x7F	; 127
     4bc:	f8 2e       	mov	r15, r24
     4be:	f1 22       	and	r15, r17
     4c0:	f6 fe       	sbrs	r15, 6
     4c2:	0b c0       	rjmp	.+22     	; 0x4da <vfprintf+0x2cc>
     4c4:	5e ef       	ldi	r21, 0xFE	; 254
     4c6:	f5 22       	and	r15, r21
     4c8:	d9 14       	cp	r13, r9
     4ca:	38 f4       	brcc	.+14     	; 0x4da <vfprintf+0x2cc>
     4cc:	f4 fe       	sbrs	r15, 4
     4ce:	07 c0       	rjmp	.+14     	; 0x4de <vfprintf+0x2d0>
     4d0:	f2 fc       	sbrc	r15, 2
     4d2:	05 c0       	rjmp	.+10     	; 0x4de <vfprintf+0x2d0>
     4d4:	8f ee       	ldi	r24, 0xEF	; 239
     4d6:	f8 22       	and	r15, r24
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <vfprintf+0x2d0>
     4da:	1d 2d       	mov	r17, r13
     4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <vfprintf+0x2d2>
     4de:	19 2d       	mov	r17, r9
     4e0:	f4 fe       	sbrs	r15, 4
     4e2:	0d c0       	rjmp	.+26     	; 0x4fe <vfprintf+0x2f0>
     4e4:	fe 01       	movw	r30, r28
     4e6:	ed 0d       	add	r30, r13
     4e8:	f1 1d       	adc	r31, r1
     4ea:	80 81       	ld	r24, Z
     4ec:	80 33       	cpi	r24, 0x30	; 48
     4ee:	19 f4       	brne	.+6      	; 0x4f6 <vfprintf+0x2e8>
     4f0:	99 ee       	ldi	r25, 0xE9	; 233
     4f2:	f9 22       	and	r15, r25
     4f4:	08 c0       	rjmp	.+16     	; 0x506 <vfprintf+0x2f8>
     4f6:	1f 5f       	subi	r17, 0xFF	; 255
     4f8:	f2 fe       	sbrs	r15, 2
     4fa:	05 c0       	rjmp	.+10     	; 0x506 <vfprintf+0x2f8>
     4fc:	03 c0       	rjmp	.+6      	; 0x504 <vfprintf+0x2f6>
     4fe:	8f 2d       	mov	r24, r15
     500:	86 78       	andi	r24, 0x86	; 134
     502:	09 f0       	breq	.+2      	; 0x506 <vfprintf+0x2f8>
     504:	1f 5f       	subi	r17, 0xFF	; 255
     506:	0f 2d       	mov	r16, r15
     508:	f3 fc       	sbrc	r15, 3
     50a:	14 c0       	rjmp	.+40     	; 0x534 <vfprintf+0x326>
     50c:	f0 fe       	sbrs	r15, 0
     50e:	0f c0       	rjmp	.+30     	; 0x52e <vfprintf+0x320>
     510:	1e 15       	cp	r17, r14
     512:	10 f0       	brcs	.+4      	; 0x518 <vfprintf+0x30a>
     514:	9d 2c       	mov	r9, r13
     516:	0b c0       	rjmp	.+22     	; 0x52e <vfprintf+0x320>
     518:	9d 2c       	mov	r9, r13
     51a:	9e 0c       	add	r9, r14
     51c:	91 1a       	sub	r9, r17
     51e:	1e 2d       	mov	r17, r14
     520:	06 c0       	rjmp	.+12     	; 0x52e <vfprintf+0x320>
     522:	80 e2       	ldi	r24, 0x20	; 32
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	b3 01       	movw	r22, r6
     528:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <fputc>
     52c:	1f 5f       	subi	r17, 0xFF	; 255
     52e:	1e 15       	cp	r17, r14
     530:	c0 f3       	brcs	.-16     	; 0x522 <vfprintf+0x314>
     532:	04 c0       	rjmp	.+8      	; 0x53c <vfprintf+0x32e>
     534:	1e 15       	cp	r17, r14
     536:	10 f4       	brcc	.+4      	; 0x53c <vfprintf+0x32e>
     538:	e1 1a       	sub	r14, r17
     53a:	01 c0       	rjmp	.+2      	; 0x53e <vfprintf+0x330>
     53c:	ee 24       	eor	r14, r14
     53e:	04 ff       	sbrs	r16, 4
     540:	0f c0       	rjmp	.+30     	; 0x560 <vfprintf+0x352>
     542:	80 e3       	ldi	r24, 0x30	; 48
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	b3 01       	movw	r22, r6
     548:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <fputc>
     54c:	02 ff       	sbrs	r16, 2
     54e:	1d c0       	rjmp	.+58     	; 0x58a <vfprintf+0x37c>
     550:	01 fd       	sbrc	r16, 1
     552:	03 c0       	rjmp	.+6      	; 0x55a <vfprintf+0x34c>
     554:	88 e7       	ldi	r24, 0x78	; 120
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e c0       	rjmp	.+28     	; 0x576 <vfprintf+0x368>
     55a:	88 e5       	ldi	r24, 0x58	; 88
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0b c0       	rjmp	.+22     	; 0x576 <vfprintf+0x368>
     560:	80 2f       	mov	r24, r16
     562:	86 78       	andi	r24, 0x86	; 134
     564:	91 f0       	breq	.+36     	; 0x58a <vfprintf+0x37c>
     566:	01 ff       	sbrs	r16, 1
     568:	02 c0       	rjmp	.+4      	; 0x56e <vfprintf+0x360>
     56a:	8b e2       	ldi	r24, 0x2B	; 43
     56c:	01 c0       	rjmp	.+2      	; 0x570 <vfprintf+0x362>
     56e:	80 e2       	ldi	r24, 0x20	; 32
     570:	f7 fc       	sbrc	r15, 7
     572:	8d e2       	ldi	r24, 0x2D	; 45
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	b3 01       	movw	r22, r6
     578:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <fputc>
     57c:	06 c0       	rjmp	.+12     	; 0x58a <vfprintf+0x37c>
     57e:	80 e3       	ldi	r24, 0x30	; 48
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	b3 01       	movw	r22, r6
     584:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <fputc>
     588:	9a 94       	dec	r9
     58a:	d9 14       	cp	r13, r9
     58c:	c0 f3       	brcs	.-16     	; 0x57e <vfprintf+0x370>
     58e:	da 94       	dec	r13
     590:	f1 01       	movw	r30, r2
     592:	ed 0d       	add	r30, r13
     594:	f1 1d       	adc	r31, r1
     596:	80 81       	ld	r24, Z
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	b3 01       	movw	r22, r6
     59c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <fputc>
     5a0:	dd 20       	and	r13, r13
     5a2:	a9 f7       	brne	.-22     	; 0x58e <vfprintf+0x380>
     5a4:	06 c0       	rjmp	.+12     	; 0x5b2 <vfprintf+0x3a4>
     5a6:	80 e2       	ldi	r24, 0x20	; 32
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	b3 01       	movw	r22, r6
     5ac:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <fputc>
     5b0:	ea 94       	dec	r14
     5b2:	ee 20       	and	r14, r14
     5b4:	c1 f7       	brne	.-16     	; 0x5a6 <vfprintf+0x398>
     5b6:	43 ce       	rjmp	.-890    	; 0x23e <vfprintf+0x30>
     5b8:	f3 01       	movw	r30, r6
     5ba:	66 81       	ldd	r22, Z+6	; 0x06
     5bc:	77 81       	ldd	r23, Z+7	; 0x07
     5be:	cb 01       	movw	r24, r22
     5c0:	2b 96       	adiw	r28, 0x0b	; 11
     5c2:	e2 e1       	ldi	r30, 0x12	; 18
     5c4:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__epilogue_restores__>

000005c8 <strnlen_P>:
     5c8:	fc 01       	movw	r30, r24
     5ca:	05 90       	lpm	r0, Z+
     5cc:	61 50       	subi	r22, 0x01	; 1
     5ce:	70 40       	sbci	r23, 0x00	; 0
     5d0:	01 10       	cpse	r0, r1
     5d2:	d8 f7       	brcc	.-10     	; 0x5ca <strnlen_P+0x2>
     5d4:	80 95       	com	r24
     5d6:	90 95       	com	r25
     5d8:	8e 0f       	add	r24, r30
     5da:	9f 1f       	adc	r25, r31
     5dc:	08 95       	ret

000005de <strnlen>:
     5de:	fc 01       	movw	r30, r24
     5e0:	61 50       	subi	r22, 0x01	; 1
     5e2:	70 40       	sbci	r23, 0x00	; 0
     5e4:	01 90       	ld	r0, Z+
     5e6:	01 10       	cpse	r0, r1
     5e8:	d8 f7       	brcc	.-10     	; 0x5e0 <strnlen+0x2>
     5ea:	80 95       	com	r24
     5ec:	90 95       	com	r25
     5ee:	8e 0f       	add	r24, r30
     5f0:	9f 1f       	adc	r25, r31
     5f2:	08 95       	ret

000005f4 <fputc>:
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	8c 01       	movw	r16, r24
     5fe:	eb 01       	movw	r28, r22
     600:	8b 81       	ldd	r24, Y+3	; 0x03
     602:	81 ff       	sbrs	r24, 1
     604:	1b c0       	rjmp	.+54     	; 0x63c <fputc+0x48>
     606:	82 ff       	sbrs	r24, 2
     608:	0d c0       	rjmp	.+26     	; 0x624 <fputc+0x30>
     60a:	2e 81       	ldd	r18, Y+6	; 0x06
     60c:	3f 81       	ldd	r19, Y+7	; 0x07
     60e:	8c 81       	ldd	r24, Y+4	; 0x04
     610:	9d 81       	ldd	r25, Y+5	; 0x05
     612:	28 17       	cp	r18, r24
     614:	39 07       	cpc	r19, r25
     616:	64 f4       	brge	.+24     	; 0x630 <fputc+0x3c>
     618:	e8 81       	ld	r30, Y
     61a:	f9 81       	ldd	r31, Y+1	; 0x01
     61c:	01 93       	st	Z+, r16
     61e:	f9 83       	std	Y+1, r31	; 0x01
     620:	e8 83       	st	Y, r30
     622:	06 c0       	rjmp	.+12     	; 0x630 <fputc+0x3c>
     624:	e8 85       	ldd	r30, Y+8	; 0x08
     626:	f9 85       	ldd	r31, Y+9	; 0x09
     628:	80 2f       	mov	r24, r16
     62a:	09 95       	icall
     62c:	89 2b       	or	r24, r25
     62e:	31 f4       	brne	.+12     	; 0x63c <fputc+0x48>
     630:	8e 81       	ldd	r24, Y+6	; 0x06
     632:	9f 81       	ldd	r25, Y+7	; 0x07
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	9f 83       	std	Y+7, r25	; 0x07
     638:	8e 83       	std	Y+6, r24	; 0x06
     63a:	02 c0       	rjmp	.+4      	; 0x640 <fputc+0x4c>
     63c:	0f ef       	ldi	r16, 0xFF	; 255
     63e:	1f ef       	ldi	r17, 0xFF	; 255
     640:	c8 01       	movw	r24, r16
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	08 95       	ret

0000064c <__ultoa_invert>:
     64c:	fa 01       	movw	r30, r20
     64e:	aa 27       	eor	r26, r26
     650:	28 30       	cpi	r18, 0x08	; 8
     652:	51 f1       	breq	.+84     	; 0x6a8 <__ultoa_invert+0x5c>
     654:	20 31       	cpi	r18, 0x10	; 16
     656:	81 f1       	breq	.+96     	; 0x6b8 <__ultoa_invert+0x6c>
     658:	e8 94       	clt
     65a:	6f 93       	push	r22
     65c:	6e 7f       	andi	r22, 0xFE	; 254
     65e:	6e 5f       	subi	r22, 0xFE	; 254
     660:	7f 4f       	sbci	r23, 0xFF	; 255
     662:	8f 4f       	sbci	r24, 0xFF	; 255
     664:	9f 4f       	sbci	r25, 0xFF	; 255
     666:	af 4f       	sbci	r26, 0xFF	; 255
     668:	b1 e0       	ldi	r27, 0x01	; 1
     66a:	3e d0       	rcall	.+124    	; 0x6e8 <__ultoa_invert+0x9c>
     66c:	b4 e0       	ldi	r27, 0x04	; 4
     66e:	3c d0       	rcall	.+120    	; 0x6e8 <__ultoa_invert+0x9c>
     670:	67 0f       	add	r22, r23
     672:	78 1f       	adc	r23, r24
     674:	89 1f       	adc	r24, r25
     676:	9a 1f       	adc	r25, r26
     678:	a1 1d       	adc	r26, r1
     67a:	68 0f       	add	r22, r24
     67c:	79 1f       	adc	r23, r25
     67e:	8a 1f       	adc	r24, r26
     680:	91 1d       	adc	r25, r1
     682:	a1 1d       	adc	r26, r1
     684:	6a 0f       	add	r22, r26
     686:	71 1d       	adc	r23, r1
     688:	81 1d       	adc	r24, r1
     68a:	91 1d       	adc	r25, r1
     68c:	a1 1d       	adc	r26, r1
     68e:	20 d0       	rcall	.+64     	; 0x6d0 <__ultoa_invert+0x84>
     690:	09 f4       	brne	.+2      	; 0x694 <__ultoa_invert+0x48>
     692:	68 94       	set
     694:	3f 91       	pop	r19
     696:	2a e0       	ldi	r18, 0x0A	; 10
     698:	26 9f       	mul	r18, r22
     69a:	11 24       	eor	r1, r1
     69c:	30 19       	sub	r19, r0
     69e:	30 5d       	subi	r19, 0xD0	; 208
     6a0:	31 93       	st	Z+, r19
     6a2:	de f6       	brtc	.-74     	; 0x65a <__ultoa_invert+0xe>
     6a4:	cf 01       	movw	r24, r30
     6a6:	08 95       	ret
     6a8:	46 2f       	mov	r20, r22
     6aa:	47 70       	andi	r20, 0x07	; 7
     6ac:	40 5d       	subi	r20, 0xD0	; 208
     6ae:	41 93       	st	Z+, r20
     6b0:	b3 e0       	ldi	r27, 0x03	; 3
     6b2:	0f d0       	rcall	.+30     	; 0x6d2 <__ultoa_invert+0x86>
     6b4:	c9 f7       	brne	.-14     	; 0x6a8 <__ultoa_invert+0x5c>
     6b6:	f6 cf       	rjmp	.-20     	; 0x6a4 <__ultoa_invert+0x58>
     6b8:	46 2f       	mov	r20, r22
     6ba:	4f 70       	andi	r20, 0x0F	; 15
     6bc:	40 5d       	subi	r20, 0xD0	; 208
     6be:	4a 33       	cpi	r20, 0x3A	; 58
     6c0:	18 f0       	brcs	.+6      	; 0x6c8 <__ultoa_invert+0x7c>
     6c2:	49 5d       	subi	r20, 0xD9	; 217
     6c4:	31 fd       	sbrc	r19, 1
     6c6:	40 52       	subi	r20, 0x20	; 32
     6c8:	41 93       	st	Z+, r20
     6ca:	02 d0       	rcall	.+4      	; 0x6d0 <__ultoa_invert+0x84>
     6cc:	a9 f7       	brne	.-22     	; 0x6b8 <__ultoa_invert+0x6c>
     6ce:	ea cf       	rjmp	.-44     	; 0x6a4 <__ultoa_invert+0x58>
     6d0:	b4 e0       	ldi	r27, 0x04	; 4
     6d2:	a6 95       	lsr	r26
     6d4:	97 95       	ror	r25
     6d6:	87 95       	ror	r24
     6d8:	77 95       	ror	r23
     6da:	67 95       	ror	r22
     6dc:	ba 95       	dec	r27
     6de:	c9 f7       	brne	.-14     	; 0x6d2 <__ultoa_invert+0x86>
     6e0:	00 97       	sbiw	r24, 0x00	; 0
     6e2:	61 05       	cpc	r22, r1
     6e4:	71 05       	cpc	r23, r1
     6e6:	08 95       	ret
     6e8:	9b 01       	movw	r18, r22
     6ea:	ac 01       	movw	r20, r24
     6ec:	0a 2e       	mov	r0, r26
     6ee:	06 94       	lsr	r0
     6f0:	57 95       	ror	r21
     6f2:	47 95       	ror	r20
     6f4:	37 95       	ror	r19
     6f6:	27 95       	ror	r18
     6f8:	ba 95       	dec	r27
     6fa:	c9 f7       	brne	.-14     	; 0x6ee <__ultoa_invert+0xa2>
     6fc:	62 0f       	add	r22, r18
     6fe:	73 1f       	adc	r23, r19
     700:	84 1f       	adc	r24, r20
     702:	95 1f       	adc	r25, r21
     704:	a0 1d       	adc	r26, r0
     706:	08 95       	ret

00000708 <delay_ms>:
uchar cmd_buf[100];

/**
 * Some basic delay function
 */
void delay_ms(unsigned short ms) {
     708:	df 93       	push	r29
     70a:	cf 93       	push	r28
     70c:	00 d0       	rcall	.+0      	; 0x70e <delay_ms+0x6>
     70e:	00 d0       	rcall	.+0      	; 0x710 <delay_ms+0x8>
     710:	00 d0       	rcall	.+0      	; 0x712 <delay_ms+0xa>
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	9e 83       	std	Y+6, r25	; 0x06
     718:	8d 83       	std	Y+5, r24	; 0x05
	unsigned short outer1, outer2;
	outer1 = 200 * 12;
     71a:	80 e6       	ldi	r24, 0x60	; 96
     71c:	99 e0       	ldi	r25, 0x09	; 9
     71e:	9c 83       	std	Y+4, r25	; 0x04
     720:	8b 83       	std	Y+3, r24	; 0x03
     722:	1c c0       	rjmp	.+56     	; 0x75c <delay_ms+0x54>

	while (outer1) {
		outer2 = 100;
     724:	84 e6       	ldi	r24, 0x64	; 100
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	9a 83       	std	Y+2, r25	; 0x02
     72a:	89 83       	std	Y+1, r24	; 0x01
     72c:	0e c0       	rjmp	.+28     	; 0x74a <delay_ms+0x42>
		while (outer2) {
			while (ms)
				ms--;
     72e:	8d 81       	ldd	r24, Y+5	; 0x05
     730:	9e 81       	ldd	r25, Y+6	; 0x06
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	9e 83       	std	Y+6, r25	; 0x06
     736:	8d 83       	std	Y+5, r24	; 0x05
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
			while (ms)
     738:	8d 81       	ldd	r24, Y+5	; 0x05
     73a:	9e 81       	ldd	r25, Y+6	; 0x06
     73c:	00 97       	sbiw	r24, 0x00	; 0
     73e:	b9 f7       	brne	.-18     	; 0x72e <delay_ms+0x26>
				ms--;
			outer2--;
     740:	89 81       	ldd	r24, Y+1	; 0x01
     742:	9a 81       	ldd	r25, Y+2	; 0x02
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	9a 83       	std	Y+2, r25	; 0x02
     748:	89 83       	std	Y+1, r24	; 0x01
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
     74a:	89 81       	ldd	r24, Y+1	; 0x01
     74c:	9a 81       	ldd	r25, Y+2	; 0x02
     74e:	00 97       	sbiw	r24, 0x00	; 0
     750:	99 f7       	brne	.-26     	; 0x738 <delay_ms+0x30>
			while (ms)
				ms--;
			outer2--;
		}
		outer1--;
     752:	8b 81       	ldd	r24, Y+3	; 0x03
     754:	9c 81       	ldd	r25, Y+4	; 0x04
     756:	01 97       	sbiw	r24, 0x01	; 1
     758:	9c 83       	std	Y+4, r25	; 0x04
     75a:	8b 83       	std	Y+3, r24	; 0x03
 */
void delay_ms(unsigned short ms) {
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
     75c:	8b 81       	ldd	r24, Y+3	; 0x03
     75e:	9c 81       	ldd	r25, Y+4	; 0x04
     760:	00 97       	sbiw	r24, 0x00	; 0
     762:	01 f7       	brne	.-64     	; 0x724 <delay_ms+0x1c>
				ms--;
			outer2--;
		}
		outer1--;
	}
}
     764:	26 96       	adiw	r28, 0x06	; 6
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	cf 91       	pop	r28
     772:	df 91       	pop	r29
     774:	08 95       	ret

00000776 <gpib_init>:
 * Init GPIB pins and variables.
 * \brief All signal lines not related to the controller part
 * 		are initialized with useful values.
 *		(The controller part initialization is done on gpib_controller_assert())
 */
void gpib_init(void) {
     776:	df 93       	push	r29
     778:	cf 93       	push	r28
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
	// data lines - complete port A as input
	DDRA = 0x00;
     77e:	ea e3       	ldi	r30, 0x3A	; 58
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	10 82       	st	Z, r1

	// handshake lines - on port D , everything as input
	DDRD &= ~_BV(G_DAV); // DAV 
     784:	a1 e3       	ldi	r26, 0x31	; 49
     786:	b0 e0       	ldi	r27, 0x00	; 0
     788:	e1 e3       	ldi	r30, 0x31	; 49
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	80 81       	ld	r24, Z
     78e:	8b 7f       	andi	r24, 0xFB	; 251
     790:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_EOI); // EOI 
     792:	a1 e3       	ldi	r26, 0x31	; 49
     794:	b0 e0       	ldi	r27, 0x00	; 0
     796:	e1 e3       	ldi	r30, 0x31	; 49
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	80 81       	ld	r24, Z
     79c:	8f 7e       	andi	r24, 0xEF	; 239
     79e:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_SRQ); // SRQ 
     7a0:	a1 e3       	ldi	r26, 0x31	; 49
     7a2:	b0 e0       	ldi	r27, 0x00	; 0
     7a4:	e1 e3       	ldi	r30, 0x31	; 49
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	80 81       	ld	r24, Z
     7aa:	8f 7b       	andi	r24, 0xBF	; 191
     7ac:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_ATN); // ATN  
     7ae:	a1 e3       	ldi	r26, 0x31	; 49
     7b0:	b0 e0       	ldi	r27, 0x00	; 0
     7b2:	e1 e3       	ldi	r30, 0x31	; 49
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	80 81       	ld	r24, Z
     7b8:	8f 77       	andi	r24, 0x7F	; 127
     7ba:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_REN); // REN  
     7bc:	a7 e3       	ldi	r26, 0x37	; 55
     7be:	b0 e0       	ldi	r27, 0x00	; 0
     7c0:	e7 e3       	ldi	r30, 0x37	; 55
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	8d 7f       	andi	r24, 0xFD	; 253
     7c8:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_IFC); // IFC  
     7ca:	a7 e3       	ldi	r26, 0x37	; 55
     7cc:	b0 e0       	ldi	r27, 0x00	; 0
     7ce:	e7 e3       	ldi	r30, 0x37	; 55
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 81       	ld	r24, Z
     7d4:	8e 7f       	andi	r24, 0xFE	; 254
     7d6:	8c 93       	st	X, r24

	// init handshake lines
	assign_bit(DDRD, PORTD, G_NRFD);
     7d8:	a2 e3       	ldi	r26, 0x32	; 50
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	e2 e3       	ldi	r30, 0x32	; 50
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	80 81       	ld	r24, Z
     7e2:	87 7f       	andi	r24, 0xF7	; 247
     7e4:	8c 93       	st	X, r24
     7e6:	a1 e3       	ldi	r26, 0x31	; 49
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	e1 e3       	ldi	r30, 0x31	; 49
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	80 81       	ld	r24, Z
     7f0:	88 60       	ori	r24, 0x08	; 8
     7f2:	8c 93       	st	X, r24
     7f4:	a2 e3       	ldi	r26, 0x32	; 50
     7f6:	b0 e0       	ldi	r27, 0x00	; 0
     7f8:	e2 e3       	ldi	r30, 0x32	; 50
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	80 81       	ld	r24, Z
     7fe:	87 7f       	andi	r24, 0xF7	; 247
     800:	8c 93       	st	X, r24
	// not ready for data now
	release_bit(DDRD, PORTD, G_NDAC);
     802:	a1 e3       	ldi	r26, 0x31	; 49
     804:	b0 e0       	ldi	r27, 0x00	; 0
     806:	e1 e3       	ldi	r30, 0x31	; 49
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	8f 7d       	andi	r24, 0xDF	; 223
     80e:	8c 93       	st	X, r24
     810:	a2 e3       	ldi	r26, 0x32	; 50
     812:	b0 e0       	ldi	r27, 0x00	; 0
     814:	e2 e3       	ldi	r30, 0x32	; 50
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	80 81       	ld	r24, Z
     81a:	80 62       	ori	r24, 0x20	; 32
     81c:	8c 93       	st	X, r24
	// initially: ok so far
}
     81e:	cf 91       	pop	r28
     820:	df 91       	pop	r29
     822:	08 95       	ret

00000824 <gpib_receive>:
 *  \returns		On any error, 0xff is returned. in this case, the value of parameter *_byte is undefined.
 * 		Otherwise the value of the EOI signal line during read is returned. If EOI was assigned, a 0x01 is
 * 		returned. If EOI was not assigned, a 0x00 is returned. Assignment of EOI means that the talker
 * 		is sending the last character for this transmission.
 */
uchar gpib_receive(uchar* _byte) {
     824:	df 93       	push	r29
     826:	cf 93       	push	r28
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	27 97       	sbiw	r28, 0x07	; 7
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	de bf       	out	0x3e, r29	; 62
     834:	0f be       	out	0x3f, r0	; 63
     836:	cd bf       	out	0x3d, r28	; 61
     838:	9e 83       	std	Y+6, r25	; 0x06
     83a:	8d 83       	std	Y+5, r24	; 0x05
	int timeout;
	uchar byte, eoi;

	//uart_puts("\n\rgpib_receive()\n\r");

	if (controller.talks == 1) {
     83c:	80 91 c3 05 	lds	r24, 0x05C3
     840:	81 30       	cpi	r24, 0x01	; 1
     842:	39 f4       	brne	.+14     	; 0x852 <gpib_receive+0x2e>
		*_byte = 0xff;
     844:	ed 81       	ldd	r30, Y+5	; 0x05
     846:	fe 81       	ldd	r31, Y+6	; 0x06
     848:	8f ef       	ldi	r24, 0xFF	; 255
     84a:	80 83       	st	Z, r24
		return 0xff;
     84c:	8f ef       	ldi	r24, 0xFF	; 255
     84e:	8f 83       	std	Y+7, r24	; 0x07
     850:	c6 c0       	rjmp	.+396    	; 0x9de <__stack+0x17f>
	}

	// handshake: set nrfd, means i am ready to receive some data
	release_bit(DDRD, PORTD, G_NRFD);
     852:	a1 e3       	ldi	r26, 0x31	; 49
     854:	b0 e0       	ldi	r27, 0x00	; 0
     856:	e1 e3       	ldi	r30, 0x31	; 49
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	80 81       	ld	r24, Z
     85c:	87 7f       	andi	r24, 0xF7	; 247
     85e:	8c 93       	st	X, r24
     860:	a2 e3       	ldi	r26, 0x32	; 50
     862:	b0 e0       	ldi	r27, 0x00	; 0
     864:	e2 e3       	ldi	r30, 0x32	; 50
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	80 81       	ld	r24, Z
     86a:	88 60       	ori	r24, 0x08	; 8
     86c:	8c 93       	st	X, r24
	assign_bit(DDRD, PORTD, G_NDAC);
     86e:	a2 e3       	ldi	r26, 0x32	; 50
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	e2 e3       	ldi	r30, 0x32	; 50
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	80 81       	ld	r24, Z
     878:	8f 7d       	andi	r24, 0xDF	; 223
     87a:	8c 93       	st	X, r24
     87c:	a1 e3       	ldi	r26, 0x31	; 49
     87e:	b0 e0       	ldi	r27, 0x00	; 0
     880:	e1 e3       	ldi	r30, 0x31	; 49
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	80 81       	ld	r24, Z
     886:	80 62       	ori	r24, 0x20	; 32
     888:	8c 93       	st	X, r24
     88a:	a2 e3       	ldi	r26, 0x32	; 50
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	e2 e3       	ldi	r30, 0x32	; 50
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	8f 7d       	andi	r24, 0xDF	; 223
     896:	8c 93       	st	X, r24

	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     898:	80 91 30 07 	lds	r24, 0x0730
     89c:	88 2f       	mov	r24, r24
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	05 96       	adiw	r24, 0x05	; 5
     8a2:	9c 83       	std	Y+4, r25	; 0x04
     8a4:	8b 83       	std	Y+3, r24	; 0x03
     8a6:	10 c0       	rjmp	.+32     	; 0x8c8 <__stack+0x69>
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     8a8:	80 91 30 07 	lds	r24, 0x0730
     8ac:	28 2f       	mov	r18, r24
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	8b 81       	ldd	r24, Y+3	; 0x03
     8b2:	9c 81       	ldd	r25, Y+4	; 0x04
     8b4:	28 17       	cp	r18, r24
     8b6:	39 07       	cpc	r19, r25
     8b8:	39 f4       	brne	.+14     	; 0x8c8 <__stack+0x69>
			uart_puts("\n\rError: DAV timeout (1)\n\r");
     8ba:	80 e6       	ldi	r24, 0x60	; 96
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
			return 0xff;
     8c2:	8f ef       	ldi	r24, 0xFF	; 255
     8c4:	8f 83       	std	Y+7, r24	; 0x07
     8c6:	8b c0       	rjmp	.+278    	; 0x9de <__stack+0x17f>
	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
     8c8:	e0 e3       	ldi	r30, 0x30	; 48
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	80 81       	ld	r24, Z
     8ce:	88 2f       	mov	r24, r24
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	84 70       	andi	r24, 0x04	; 4
     8d4:	90 70       	andi	r25, 0x00	; 0
     8d6:	00 97       	sbiw	r24, 0x00	; 0
     8d8:	49 f0       	breq	.+18     	; 0x8ec <__stack+0x8d>
     8da:	80 91 30 07 	lds	r24, 0x0730
     8de:	28 2f       	mov	r18, r24
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	8b 81       	ldd	r24, Y+3	; 0x03
     8e4:	9c 81       	ldd	r25, Y+4	; 0x04
     8e6:	82 17       	cp	r24, r18
     8e8:	93 07       	cpc	r25, r19
     8ea:	f4 f6       	brge	.-68     	; 0x8a8 <__stack+0x49>
#else
	loop_until_bit_is_clear(PIND,G_DAV);
#endif

	// handshake: clear NRFD, means i am busy now to read data
	assign_bit(DDRD, PORTD, G_NRFD);
     8ec:	a2 e3       	ldi	r26, 0x32	; 50
     8ee:	b0 e0       	ldi	r27, 0x00	; 0
     8f0:	e2 e3       	ldi	r30, 0x32	; 50
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	80 81       	ld	r24, Z
     8f6:	87 7f       	andi	r24, 0xF7	; 247
     8f8:	8c 93       	st	X, r24
     8fa:	a1 e3       	ldi	r26, 0x31	; 49
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e1 e3       	ldi	r30, 0x31	; 49
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	88 60       	ori	r24, 0x08	; 8
     906:	8c 93       	st	X, r24
     908:	a2 e3       	ldi	r26, 0x32	; 50
     90a:	b0 e0       	ldi	r27, 0x00	; 0
     90c:	e2 e3       	ldi	r30, 0x32	; 50
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 81       	ld	r24, Z
     912:	87 7f       	andi	r24, 0xF7	; 247
     914:	8c 93       	st	X, r24
	// read data
	byte = PINA ^ 0xff;
     916:	e9 e3       	ldi	r30, 0x39	; 57
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	80 95       	com	r24
     91e:	8a 83       	std	Y+2, r24	; 0x02

	// handshake: set ndac, means i have completed/accepted the read
	release_bit(DDRD, PORTD, G_NDAC);
     920:	a1 e3       	ldi	r26, 0x31	; 49
     922:	b0 e0       	ldi	r27, 0x00	; 0
     924:	e1 e3       	ldi	r30, 0x31	; 49
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	8f 7d       	andi	r24, 0xDF	; 223
     92c:	8c 93       	st	X, r24
     92e:	a2 e3       	ldi	r26, 0x32	; 50
     930:	b0 e0       	ldi	r27, 0x00	; 0
     932:	e2 e3       	ldi	r30, 0x32	; 50
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	80 81       	ld	r24, Z
     938:	80 62       	ori	r24, 0x20	; 32
     93a:	8c 93       	st	X, r24

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     93c:	80 91 30 07 	lds	r24, 0x0730
     940:	88 2f       	mov	r24, r24
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	05 96       	adiw	r24, 0x05	; 5
     946:	9c 83       	std	Y+4, r25	; 0x04
     948:	8b 83       	std	Y+3, r24	; 0x03
     94a:	10 c0       	rjmp	.+32     	; 0x96c <__stack+0x10d>
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     94c:	80 91 30 07 	lds	r24, 0x0730
     950:	28 2f       	mov	r18, r24
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	8b 81       	ldd	r24, Y+3	; 0x03
     956:	9c 81       	ldd	r25, Y+4	; 0x04
     958:	28 17       	cp	r18, r24
     95a:	39 07       	cpc	r19, r25
     95c:	39 f4       	brne	.+14     	; 0x96c <__stack+0x10d>
			uart_puts("\n\rError: DAV timeout (2)\n\r");
     95e:	8b e7       	ldi	r24, 0x7B	; 123
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
			return 0xff;
     966:	8f ef       	ldi	r24, 0xFF	; 255
     968:	8f 83       	std	Y+7, r24	; 0x07
     96a:	39 c0       	rjmp	.+114    	; 0x9de <__stack+0x17f>
	release_bit(DDRD, PORTD, G_NDAC);

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
     96c:	e0 e3       	ldi	r30, 0x30	; 48
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	80 81       	ld	r24, Z
     972:	88 2f       	mov	r24, r24
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	84 70       	andi	r24, 0x04	; 4
     978:	90 70       	andi	r25, 0x00	; 0
     97a:	00 97       	sbiw	r24, 0x00	; 0
     97c:	49 f4       	brne	.+18     	; 0x990 <__stack+0x131>
     97e:	80 91 30 07 	lds	r24, 0x0730
     982:	28 2f       	mov	r18, r24
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	8b 81       	ldd	r24, Y+3	; 0x03
     988:	9c 81       	ldd	r25, Y+4	; 0x04
     98a:	82 17       	cp	r24, r18
     98c:	93 07       	cpc	r25, r19
     98e:	f4 f6       	brge	.-68     	; 0x94c <__stack+0xed>
	}
#else
	loop_until_bit_is_set(PIND,G_DAV);
#endif
	// handshake: clear ndac (this is a prerequisite for receive next byte)
	assign_bit(DDRD, PORTD, G_NDAC);
     990:	a2 e3       	ldi	r26, 0x32	; 50
     992:	b0 e0       	ldi	r27, 0x00	; 0
     994:	e2 e3       	ldi	r30, 0x32	; 50
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	80 81       	ld	r24, Z
     99a:	8f 7d       	andi	r24, 0xDF	; 223
     99c:	8c 93       	st	X, r24
     99e:	a1 e3       	ldi	r26, 0x31	; 49
     9a0:	b0 e0       	ldi	r27, 0x00	; 0
     9a2:	e1 e3       	ldi	r30, 0x31	; 49
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	80 81       	ld	r24, Z
     9a8:	80 62       	ori	r24, 0x20	; 32
     9aa:	8c 93       	st	X, r24
     9ac:	a2 e3       	ldi	r26, 0x32	; 50
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	e2 e3       	ldi	r30, 0x32	; 50
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	8f 7d       	andi	r24, 0xDF	; 223
     9b8:	8c 93       	st	X, r24

	// check if last byte of transmission
	eoi = bit_is_clear(PIND, G_EOI);
     9ba:	e0 e3       	ldi	r30, 0x30	; 48
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	80 81       	ld	r24, Z
     9c0:	88 2f       	mov	r24, r24
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	80 71       	andi	r24, 0x10	; 16
     9c6:	90 70       	andi	r25, 0x00	; 0
     9c8:	19 82       	std	Y+1, r1	; 0x01
     9ca:	00 97       	sbiw	r24, 0x00	; 0
     9cc:	11 f4       	brne	.+4      	; 0x9d2 <__stack+0x173>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	89 83       	std	Y+1, r24	; 0x01

	*_byte = byte;
     9d2:	ed 81       	ldd	r30, Y+5	; 0x05
     9d4:	fe 81       	ldd	r31, Y+6	; 0x06
     9d6:	8a 81       	ldd	r24, Y+2	; 0x02
     9d8:	80 83       	st	Z, r24

	return eoi;
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	8f 83       	std	Y+7, r24	; 0x07
     9de:	8f 81       	ldd	r24, Y+7	; 0x07
}
     9e0:	27 96       	adiw	r28, 0x07	; 7
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	de bf       	out	0x3e, r29	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	cd bf       	out	0x3d, r28	; 61
     9ec:	cf 91       	pop	r28
     9ee:	df 91       	pop	r29
     9f0:	08 95       	ret

000009f2 <gpib_controller_assign>:
 * You have to change the initialization of the partner array according to your environment.
 * The partners-array is used by gpib_serial_poll() for looping over all existing devices.
 * 
 * \param address the address to be used by the controller. Usually 0x00.
 */
void gpib_controller_assign(uchar address) {
     9f2:	df 93       	push	r29
     9f4:	cf 93       	push	r28
     9f6:	0f 92       	push	r0
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	89 83       	std	Y+1, r24	; 0x01
	controller.myaddress = address;
     9fe:	89 81       	ldd	r24, Y+1	; 0x01
     a00:	80 93 c0 05 	sts	0x05C0, r24
	controller.talks = 0;
     a04:	10 92 c3 05 	sts	0x05C3, r1
	controller.partner.primary = ADDRESS_NOT_SET; // init default active partner
     a08:	8f ef       	ldi	r24, 0xFF	; 255
     a0a:	80 93 c1 05 	sts	0x05C1, r24
	controller.partner.secondary = ADDRESS_NOT_SET;
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	80 93 c2 05 	sts	0x05C2, r24
	controller.flavour = FLAVOUR_NONE;
     a14:	10 92 c4 05 	sts	0x05C4, r1
	/** clear list of partners */
	gpib_clear_partners();
     a18:	0e 94 5f 0b 	call	0x16be	; 0x16be <gpib_clear_partners>
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     a1c:	a8 e3       	ldi	r26, 0x38	; 56
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	e8 e3       	ldi	r30, 0x38	; 56
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	8e 7f       	andi	r24, 0xFE	; 254
     a28:	8c 93       	st	X, r24
     a2a:	a7 e3       	ldi	r26, 0x37	; 55
     a2c:	b0 e0       	ldi	r27, 0x00	; 0
     a2e:	e7 e3       	ldi	r30, 0x37	; 55
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	80 81       	ld	r24, Z
     a34:	81 60       	ori	r24, 0x01	; 1
     a36:	8c 93       	st	X, r24
     a38:	a8 e3       	ldi	r26, 0x38	; 56
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	e8 e3       	ldi	r30, 0x38	; 56
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	8e 7f       	andi	r24, 0xFE	; 254
     a44:	8c 93       	st	X, r24
	delay_ms(200);
     a46:	88 ec       	ldi	r24, 0xC8	; 200
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 84 03 	call	0x708	; 0x708 <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     a4e:	a7 e3       	ldi	r26, 0x37	; 55
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	e7 e3       	ldi	r30, 0x37	; 55
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
     a58:	8e 7f       	andi	r24, 0xFE	; 254
     a5a:	8c 93       	st	X, r24
     a5c:	a8 e3       	ldi	r26, 0x38	; 56
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	e8 e3       	ldi	r30, 0x38	; 56
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	80 81       	ld	r24, Z
     a66:	81 60       	ori	r24, 0x01	; 1
     a68:	8c 93       	st	X, r24
	// set up all devices for remote control
	assign_bit(DDRB, PORTB, G_REN);
     a6a:	a8 e3       	ldi	r26, 0x38	; 56
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	e8 e3       	ldi	r30, 0x38	; 56
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	80 81       	ld	r24, Z
     a74:	8d 7f       	andi	r24, 0xFD	; 253
     a76:	8c 93       	st	X, r24
     a78:	a7 e3       	ldi	r26, 0x37	; 55
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	e7 e3       	ldi	r30, 0x37	; 55
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	80 81       	ld	r24, Z
     a82:	82 60       	ori	r24, 0x02	; 2
     a84:	8c 93       	st	X, r24
     a86:	a8 e3       	ldi	r26, 0x38	; 56
     a88:	b0 e0       	ldi	r27, 0x00	; 0
     a8a:	e8 e3       	ldi	r30, 0x38	; 56
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 81       	ld	r24, Z
     a90:	8d 7f       	andi	r24, 0xFD	; 253
     a92:	8c 93       	st	X, r24

	// DCL - device clear for all devices on bus
	cmd_buf[0] = G_CMD_DCL;
     a94:	84 e1       	ldi	r24, 0x14	; 20
     a96:	80 93 7b 06 	sts	0x067B, r24
	gpib_cmd(cmd_buf, 1);
     a9a:	8b e7       	ldi	r24, 0x7B	; 123
     a9c:	96 e0       	ldi	r25, 0x06	; 6
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>
}
     aa6:	0f 90       	pop	r0
     aa8:	cf 91       	pop	r28
     aaa:	df 91       	pop	r29
     aac:	08 95       	ret

00000aae <gpib_controller_release>:

/**
 * Release bus 
 */
void gpib_controller_release(void) {
     aae:	df 93       	push	r29
     ab0:	cf 93       	push	r28
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     ab6:	a8 e3       	ldi	r26, 0x38	; 56
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	e8 e3       	ldi	r30, 0x38	; 56
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	80 81       	ld	r24, Z
     ac0:	8e 7f       	andi	r24, 0xFE	; 254
     ac2:	8c 93       	st	X, r24
     ac4:	a7 e3       	ldi	r26, 0x37	; 55
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	e7 e3       	ldi	r30, 0x37	; 55
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 81       	ld	r24, Z
     ace:	81 60       	ori	r24, 0x01	; 1
     ad0:	8c 93       	st	X, r24
     ad2:	a8 e3       	ldi	r26, 0x38	; 56
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 e3       	ldi	r30, 0x38	; 56
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	8e 7f       	andi	r24, 0xFE	; 254
     ade:	8c 93       	st	X, r24
	delay_ms(200);
     ae0:	88 ec       	ldi	r24, 0xC8	; 200
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 84 03 	call	0x708	; 0x708 <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     ae8:	a7 e3       	ldi	r26, 0x37	; 55
     aea:	b0 e0       	ldi	r27, 0x00	; 0
     aec:	e7 e3       	ldi	r30, 0x37	; 55
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	80 81       	ld	r24, Z
     af2:	8e 7f       	andi	r24, 0xFE	; 254
     af4:	8c 93       	st	X, r24
     af6:	a8 e3       	ldi	r26, 0x38	; 56
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	e8 e3       	ldi	r30, 0x38	; 56
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	80 81       	ld	r24, Z
     b00:	81 60       	ori	r24, 0x01	; 1
     b02:	8c 93       	st	X, r24
	// set up all devices for local control
	release_bit(DDRB, PORTB, G_REN);
     b04:	a7 e3       	ldi	r26, 0x37	; 55
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	e7 e3       	ldi	r30, 0x37	; 55
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	80 81       	ld	r24, Z
     b0e:	8d 7f       	andi	r24, 0xFD	; 253
     b10:	8c 93       	st	X, r24
     b12:	a8 e3       	ldi	r26, 0x38	; 56
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	e8 e3       	ldi	r30, 0x38	; 56
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	82 60       	ori	r24, 0x02	; 2
     b1e:	8c 93       	st	X, r24
}
     b20:	cf 91       	pop	r28
     b22:	df 91       	pop	r29
     b24:	08 95       	ret

00000b26 <gpib_write>:

/**
 * Write GPIB string to bus
 * \brief See _gpib_write() for further information.
 */
uchar gpib_write(uchar *bytes, int length) {
     b26:	df 93       	push	r29
     b28:	cf 93       	push	r28
     b2a:	00 d0       	rcall	.+0      	; 0xb2c <gpib_write+0x6>
     b2c:	00 d0       	rcall	.+0      	; 0xb2e <gpib_write+0x8>
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
     b32:	9a 83       	std	Y+2, r25	; 0x02
     b34:	89 83       	std	Y+1, r24	; 0x01
     b36:	7c 83       	std	Y+4, r23	; 0x04
     b38:	6b 83       	std	Y+3, r22	; 0x03
	// set attention arg false for ordinary strings
	return _gpib_write(bytes, length, (uchar) 0);
     b3a:	89 81       	ldd	r24, Y+1	; 0x01
     b3c:	9a 81       	ldd	r25, Y+2	; 0x02
     b3e:	2b 81       	ldd	r18, Y+3	; 0x03
     b40:	3c 81       	ldd	r19, Y+4	; 0x04
     b42:	b9 01       	movw	r22, r18
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_gpib_write>
}
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	08 95       	ret

00000b58 <gpib_cmd>:

/**
 * Write GPIB command to bus
 * \brief See _gpib_write() for further information.
 */
uchar gpib_cmd(uchar *bytes, int length) {
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	00 d0       	rcall	.+0      	; 0xb5e <gpib_cmd+0x6>
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <gpib_cmd+0x8>
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	9a 83       	std	Y+2, r25	; 0x02
     b66:	89 83       	std	Y+1, r24	; 0x01
     b68:	7c 83       	std	Y+4, r23	; 0x04
     b6a:	6b 83       	std	Y+3, r22	; 0x03
	// set attention arg true for commands
	return _gpib_write(bytes, length, (uchar) 1);
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	9a 81       	ldd	r25, Y+2	; 0x02
     b70:	2b 81       	ldd	r18, Y+3	; 0x03
     b72:	3c 81       	ldd	r19, Y+4	; 0x04
     b74:	b9 01       	movw	r22, r18
     b76:	41 e0       	ldi	r20, 0x01	; 1
     b78:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_gpib_write>
}
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <_gpib_write>:
 * \param length length of valid bytes in byte array or zero.
 * for binary data, lenght must be defined. For strings, length can be set to zero. Then the length of
 * the string is calculated internally.
 * \param attention attention tur means assign ATN signal line during write.
 */
uchar _gpib_write(uchar *bytes, int length, uchar attention) {
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	2b 97       	sbiw	r28, 0x0b	; 11
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61
     b9e:	9f 83       	std	Y+7, r25	; 0x07
     ba0:	8e 83       	std	Y+6, r24	; 0x06
     ba2:	79 87       	std	Y+9, r23	; 0x09
     ba4:	68 87       	std	Y+8, r22	; 0x08
     ba6:	4a 87       	std	Y+10, r20	; 0x0a
	int timeout;
	//uchar buf[64];

	// set talks state. This is used by ISR to recognize own talk
	// (controller must not talk to itself and must not take part in listener handshake when talking)
	controller.talks = 1;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	80 93 c3 05 	sts	0x05C3, r24

	if (attention) {
     bae:	8a 85       	ldd	r24, Y+10	; 0x0a
     bb0:	88 23       	and	r24, r24
     bb2:	a9 f0       	breq	.+42     	; 0xbde <_gpib_write+0x54>
		//uart_puts("\n\rgpib_controller_write()\n\r");
		// assign ATN for commands
		assign_bit(DDRD, PORTD, G_ATN);
     bb4:	a2 e3       	ldi	r26, 0x32	; 50
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e2 e3       	ldi	r30, 0x32	; 50
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	8f 77       	andi	r24, 0x7F	; 127
     bc0:	8c 93       	st	X, r24
     bc2:	a1 e3       	ldi	r26, 0x31	; 49
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e1 e3       	ldi	r30, 0x31	; 49
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	80 68       	ori	r24, 0x80	; 128
     bce:	8c 93       	st	X, r24
     bd0:	a2 e3       	ldi	r26, 0x32	; 50
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e2 e3       	ldi	r30, 0x32	; 50
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	8f 77       	andi	r24, 0x7F	; 127
     bdc:	8c 93       	st	X, r24
	}

	if (length == 0) {
     bde:	88 85       	ldd	r24, Y+8	; 0x08
     be0:	99 85       	ldd	r25, Y+9	; 0x09
     be2:	00 97       	sbiw	r24, 0x00	; 0
     be4:	31 f4       	brne	.+12     	; 0xbf2 <_gpib_write+0x68>
		// length==0 means this is a common C string, null-terminated.
		// then, length can be easily calculated
		length = strlen((char*) bytes);
     be6:	8e 81       	ldd	r24, Y+6	; 0x06
     be8:	9f 81       	ldd	r25, Y+7	; 0x07
     bea:	0e 94 a0 00 	call	0x140	; 0x140 <strlen>
     bee:	99 87       	std	Y+9, r25	; 0x09
     bf0:	88 87       	std	Y+8, r24	; 0x08
	//	else 
	//		sprintf( buf, "gpib_write: 0x%02x\n\r", bytes[0] );
	//	uart_puts((char*)buf);

	// release EOI during transmission
	release_bit(DDRD, PORTD, G_EOI);
     bf2:	a1 e3       	ldi	r26, 0x31	; 49
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e1 e3       	ldi	r30, 0x31	; 49
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	8f 7e       	andi	r24, 0xEF	; 239
     bfe:	8c 93       	st	X, r24
     c00:	a2 e3       	ldi	r26, 0x32	; 50
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e2 e3       	ldi	r30, 0x32	; 50
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	80 61       	ori	r24, 0x10	; 16
     c0c:	8c 93       	st	X, r24
	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
     c0e:	a1 e3       	ldi	r26, 0x31	; 49
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e1 e3       	ldi	r30, 0x31	; 49
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	8b 7f       	andi	r24, 0xFB	; 251
     c1a:	8c 93       	st	X, r24
     c1c:	a2 e3       	ldi	r26, 0x32	; 50
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e2 e3       	ldi	r30, 0x32	; 50
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	84 60       	ori	r24, 0x04	; 4
     c28:	8c 93       	st	X, r24
	// release NRFD (just to be sure)
	release_bit(DDRD, PORTD, G_NRFD);
     c2a:	a1 e3       	ldi	r26, 0x31	; 49
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e1 e3       	ldi	r30, 0x31	; 49
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	87 7f       	andi	r24, 0xF7	; 247
     c36:	8c 93       	st	X, r24
     c38:	a2 e3       	ldi	r26, 0x32	; 50
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e2 e3       	ldi	r30, 0x32	; 50
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	88 60       	ori	r24, 0x08	; 8
     c44:	8c 93       	st	X, r24

	// bytes[0] = 'a'
	// bytes[1] = 'b'
	// length = 2
	for (i = 0; i < length; i++) {
     c46:	1c 82       	std	Y+4, r1	; 0x04
     c48:	1b 82       	std	Y+3, r1	; 0x03
     c4a:	34 c2       	rjmp	.+1128   	; 0x10b4 <_gpib_write+0x52a>

		// put data on bus
		c = bytes[i];
     c4c:	2b 81       	ldd	r18, Y+3	; 0x03
     c4e:	3c 81       	ldd	r19, Y+4	; 0x04
     c50:	8e 81       	ldd	r24, Y+6	; 0x06
     c52:	9f 81       	ldd	r25, Y+7	; 0x07
     c54:	fc 01       	movw	r30, r24
     c56:	e2 0f       	add	r30, r18
     c58:	f3 1f       	adc	r31, r19
     c5a:	80 81       	ld	r24, Z
     c5c:	8d 83       	std	Y+5, r24	; 0x05
		//sprintf( buf, "char: %c\n\r", c );
		//uart_puts(buf);		

		release_bit(DDRD, PORTD, G_NDAC);
     c5e:	a1 e3       	ldi	r26, 0x31	; 49
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e1 e3       	ldi	r30, 0x31	; 49
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	8f 7d       	andi	r24, 0xDF	; 223
     c6a:	8c 93       	st	X, r24
     c6c:	a2 e3       	ldi	r26, 0x32	; 50
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e2 e3       	ldi	r30, 0x32	; 50
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	80 62       	ori	r24, 0x20	; 32
     c78:	8c 93       	st	X, r24
		//uart_puts("0");
		// wait for NDAC assign from all listeners
#ifdef WITH_TIMEOUT
		timeout = s + 5;
     c7a:	80 91 30 07 	lds	r24, 0x0730
     c7e:	88 2f       	mov	r24, r24
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	05 96       	adiw	r24, 0x05	; 5
     c84:	9a 83       	std	Y+2, r25	; 0x02
     c86:	89 83       	std	Y+1, r24	; 0x01
     c88:	10 c0       	rjmp	.+32     	; 0xcaa <_gpib_write+0x120>
		//gpib_info();
		while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
			if (s == timeout) {
     c8a:	80 91 30 07 	lds	r24, 0x0730
     c8e:	28 2f       	mov	r18, r24
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	28 17       	cp	r18, r24
     c98:	39 07       	cpc	r19, r25
     c9a:	39 f4       	brne	.+14     	; 0xcaa <_gpib_write+0x120>
				uart_puts("\n\rError: NDAC timeout\n\r");
     c9c:	86 e9       	ldi	r24, 0x96	; 150
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
				return 0xff;
     ca4:	8f ef       	ldi	r24, 0xFF	; 255
     ca6:	8b 87       	std	Y+11, r24	; 0x0b
     ca8:	21 c2       	rjmp	.+1090   	; 0x10ec <_gpib_write+0x562>
		//uart_puts("0");
		// wait for NDAC assign from all listeners
#ifdef WITH_TIMEOUT
		timeout = s + 5;
		//gpib_info();
		while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
     caa:	e0 e3       	ldi	r30, 0x30	; 48
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	88 2f       	mov	r24, r24
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	80 72       	andi	r24, 0x20	; 32
     cb6:	90 70       	andi	r25, 0x00	; 0
     cb8:	00 97       	sbiw	r24, 0x00	; 0
     cba:	49 f0       	breq	.+18     	; 0xcce <_gpib_write+0x144>
     cbc:	80 91 30 07 	lds	r24, 0x0730
     cc0:	28 2f       	mov	r18, r24
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	9a 81       	ldd	r25, Y+2	; 0x02
     cc8:	82 17       	cp	r24, r18
     cca:	93 07       	cpc	r25, r19
     ccc:	f4 f6       	brge	.-68     	; 0xc8a <_gpib_write+0x100>
		}
#else
		loop_until_bit_is_clear(PIND,G_NDAC);
#endif

		DDRA = 0x00;
     cce:	ea e3       	ldi	r30, 0x3A	; 58
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	10 82       	st	Z, r1
		if (c & 0x01) {
     cd4:	8d 81       	ldd	r24, Y+5	; 0x05
     cd6:	88 2f       	mov	r24, r24
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	81 70       	andi	r24, 0x01	; 1
     cdc:	90 70       	andi	r25, 0x00	; 0
     cde:	88 23       	and	r24, r24
     ce0:	b1 f0       	breq	.+44     	; 0xd0e <_gpib_write+0x184>
			assign_bit(DDRA, PORTA, PA0);
     ce2:	ab e3       	ldi	r26, 0x3B	; 59
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	eb e3       	ldi	r30, 0x3B	; 59
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8e 7f       	andi	r24, 0xFE	; 254
     cee:	8c 93       	st	X, r24
     cf0:	aa e3       	ldi	r26, 0x3A	; 58
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	ea e3       	ldi	r30, 0x3A	; 58
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	81 60       	ori	r24, 0x01	; 1
     cfc:	8c 93       	st	X, r24
     cfe:	ab e3       	ldi	r26, 0x3B	; 59
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	eb e3       	ldi	r30, 0x3B	; 59
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8e 7f       	andi	r24, 0xFE	; 254
     d0a:	8c 93       	st	X, r24
     d0c:	0e c0       	rjmp	.+28     	; 0xd2a <_gpib_write+0x1a0>
		} else {
			release_bit(DDRA, PORTA, PA0)
     d0e:	aa e3       	ldi	r26, 0x3A	; 58
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	ea e3       	ldi	r30, 0x3A	; 58
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	8e 7f       	andi	r24, 0xFE	; 254
     d1a:	8c 93       	st	X, r24
     d1c:	ab e3       	ldi	r26, 0x3B	; 59
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	eb e3       	ldi	r30, 0x3B	; 59
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	81 60       	ori	r24, 0x01	; 1
     d28:	8c 93       	st	X, r24
		}

		if (c & 0x02) {
     d2a:	8d 81       	ldd	r24, Y+5	; 0x05
     d2c:	88 2f       	mov	r24, r24
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	82 70       	andi	r24, 0x02	; 2
     d32:	90 70       	andi	r25, 0x00	; 0
     d34:	00 97       	sbiw	r24, 0x00	; 0
     d36:	b1 f0       	breq	.+44     	; 0xd64 <_gpib_write+0x1da>
			assign_bit(DDRA, PORTA, PA1)
     d38:	ab e3       	ldi	r26, 0x3B	; 59
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	eb e3       	ldi	r30, 0x3B	; 59
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	8d 7f       	andi	r24, 0xFD	; 253
     d44:	8c 93       	st	X, r24
     d46:	aa e3       	ldi	r26, 0x3A	; 58
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	ea e3       	ldi	r30, 0x3A	; 58
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	82 60       	ori	r24, 0x02	; 2
     d52:	8c 93       	st	X, r24
     d54:	ab e3       	ldi	r26, 0x3B	; 59
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	eb e3       	ldi	r30, 0x3B	; 59
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	8d 7f       	andi	r24, 0xFD	; 253
     d60:	8c 93       	st	X, r24
     d62:	0e c0       	rjmp	.+28     	; 0xd80 <_gpib_write+0x1f6>
		} else {
			release_bit(DDRA, PORTA, PA1);
     d64:	aa e3       	ldi	r26, 0x3A	; 58
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	ea e3       	ldi	r30, 0x3A	; 58
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	8d 7f       	andi	r24, 0xFD	; 253
     d70:	8c 93       	st	X, r24
     d72:	ab e3       	ldi	r26, 0x3B	; 59
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	eb e3       	ldi	r30, 0x3B	; 59
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	82 60       	ori	r24, 0x02	; 2
     d7e:	8c 93       	st	X, r24
		}

		if (c & 0x04) {
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	84 70       	andi	r24, 0x04	; 4
     d88:	90 70       	andi	r25, 0x00	; 0
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	b1 f0       	breq	.+44     	; 0xdba <_gpib_write+0x230>
			assign_bit(DDRA, PORTA, PA2);
     d8e:	ab e3       	ldi	r26, 0x3B	; 59
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	eb e3       	ldi	r30, 0x3B	; 59
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8b 7f       	andi	r24, 0xFB	; 251
     d9a:	8c 93       	st	X, r24
     d9c:	aa e3       	ldi	r26, 0x3A	; 58
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	ea e3       	ldi	r30, 0x3A	; 58
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	84 60       	ori	r24, 0x04	; 4
     da8:	8c 93       	st	X, r24
     daa:	ab e3       	ldi	r26, 0x3B	; 59
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	eb e3       	ldi	r30, 0x3B	; 59
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	8b 7f       	andi	r24, 0xFB	; 251
     db6:	8c 93       	st	X, r24
     db8:	0e c0       	rjmp	.+28     	; 0xdd6 <_gpib_write+0x24c>
		} else {
			release_bit(DDRA, PORTA, PA2);
     dba:	aa e3       	ldi	r26, 0x3A	; 58
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	ea e3       	ldi	r30, 0x3A	; 58
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	8b 7f       	andi	r24, 0xFB	; 251
     dc6:	8c 93       	st	X, r24
     dc8:	ab e3       	ldi	r26, 0x3B	; 59
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	eb e3       	ldi	r30, 0x3B	; 59
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	84 60       	ori	r24, 0x04	; 4
     dd4:	8c 93       	st	X, r24
		}

		if (c & 0x08) {
     dd6:	8d 81       	ldd	r24, Y+5	; 0x05
     dd8:	88 2f       	mov	r24, r24
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	88 70       	andi	r24, 0x08	; 8
     dde:	90 70       	andi	r25, 0x00	; 0
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	b1 f0       	breq	.+44     	; 0xe10 <_gpib_write+0x286>
			assign_bit(DDRA, PORTA, PA3);
     de4:	ab e3       	ldi	r26, 0x3B	; 59
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	eb e3       	ldi	r30, 0x3B	; 59
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	87 7f       	andi	r24, 0xF7	; 247
     df0:	8c 93       	st	X, r24
     df2:	aa e3       	ldi	r26, 0x3A	; 58
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	ea e3       	ldi	r30, 0x3A	; 58
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	88 60       	ori	r24, 0x08	; 8
     dfe:	8c 93       	st	X, r24
     e00:	ab e3       	ldi	r26, 0x3B	; 59
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	eb e3       	ldi	r30, 0x3B	; 59
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	87 7f       	andi	r24, 0xF7	; 247
     e0c:	8c 93       	st	X, r24
     e0e:	0e c0       	rjmp	.+28     	; 0xe2c <_gpib_write+0x2a2>
		} else {
			release_bit(DDRA, PORTA, PA3);
     e10:	aa e3       	ldi	r26, 0x3A	; 58
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	ea e3       	ldi	r30, 0x3A	; 58
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	87 7f       	andi	r24, 0xF7	; 247
     e1c:	8c 93       	st	X, r24
     e1e:	ab e3       	ldi	r26, 0x3B	; 59
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	eb e3       	ldi	r30, 0x3B	; 59
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	88 60       	ori	r24, 0x08	; 8
     e2a:	8c 93       	st	X, r24
		}

		if (c & 0x10) {
     e2c:	8d 81       	ldd	r24, Y+5	; 0x05
     e2e:	88 2f       	mov	r24, r24
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	80 71       	andi	r24, 0x10	; 16
     e34:	90 70       	andi	r25, 0x00	; 0
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	b1 f0       	breq	.+44     	; 0xe66 <_gpib_write+0x2dc>
			assign_bit(DDRA, PORTA, PA4);
     e3a:	ab e3       	ldi	r26, 0x3B	; 59
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	eb e3       	ldi	r30, 0x3B	; 59
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8f 7e       	andi	r24, 0xEF	; 239
     e46:	8c 93       	st	X, r24
     e48:	aa e3       	ldi	r26, 0x3A	; 58
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	ea e3       	ldi	r30, 0x3A	; 58
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	80 61       	ori	r24, 0x10	; 16
     e54:	8c 93       	st	X, r24
     e56:	ab e3       	ldi	r26, 0x3B	; 59
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	eb e3       	ldi	r30, 0x3B	; 59
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	8f 7e       	andi	r24, 0xEF	; 239
     e62:	8c 93       	st	X, r24
     e64:	0e c0       	rjmp	.+28     	; 0xe82 <_gpib_write+0x2f8>
		} else {
			release_bit(DDRA, PORTA, PA4);
     e66:	aa e3       	ldi	r26, 0x3A	; 58
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	ea e3       	ldi	r30, 0x3A	; 58
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8f 7e       	andi	r24, 0xEF	; 239
     e72:	8c 93       	st	X, r24
     e74:	ab e3       	ldi	r26, 0x3B	; 59
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	eb e3       	ldi	r30, 0x3B	; 59
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	80 61       	ori	r24, 0x10	; 16
     e80:	8c 93       	st	X, r24
		}

		if (c & 0x20) {
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	80 72       	andi	r24, 0x20	; 32
     e8a:	90 70       	andi	r25, 0x00	; 0
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	b1 f0       	breq	.+44     	; 0xebc <_gpib_write+0x332>
			assign_bit(DDRA, PORTA, PA5);
     e90:	ab e3       	ldi	r26, 0x3B	; 59
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	eb e3       	ldi	r30, 0x3B	; 59
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8f 7d       	andi	r24, 0xDF	; 223
     e9c:	8c 93       	st	X, r24
     e9e:	aa e3       	ldi	r26, 0x3A	; 58
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ea e3       	ldi	r30, 0x3A	; 58
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 62       	ori	r24, 0x20	; 32
     eaa:	8c 93       	st	X, r24
     eac:	ab e3       	ldi	r26, 0x3B	; 59
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	eb e3       	ldi	r30, 0x3B	; 59
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	8f 7d       	andi	r24, 0xDF	; 223
     eb8:	8c 93       	st	X, r24
     eba:	0e c0       	rjmp	.+28     	; 0xed8 <_gpib_write+0x34e>
		} else {
			release_bit(DDRA, PORTA, PA5);
     ebc:	aa e3       	ldi	r26, 0x3A	; 58
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	ea e3       	ldi	r30, 0x3A	; 58
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8f 7d       	andi	r24, 0xDF	; 223
     ec8:	8c 93       	st	X, r24
     eca:	ab e3       	ldi	r26, 0x3B	; 59
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	eb e3       	ldi	r30, 0x3B	; 59
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	80 62       	ori	r24, 0x20	; 32
     ed6:	8c 93       	st	X, r24
		}

		if (c & 0x40) {
     ed8:	8d 81       	ldd	r24, Y+5	; 0x05
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	80 74       	andi	r24, 0x40	; 64
     ee0:	90 70       	andi	r25, 0x00	; 0
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	b1 f0       	breq	.+44     	; 0xf12 <_gpib_write+0x388>
			assign_bit(DDRA, PORTA, PA6);
     ee6:	ab e3       	ldi	r26, 0x3B	; 59
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	eb e3       	ldi	r30, 0x3B	; 59
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8f 7b       	andi	r24, 0xBF	; 191
     ef2:	8c 93       	st	X, r24
     ef4:	aa e3       	ldi	r26, 0x3A	; 58
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	ea e3       	ldi	r30, 0x3A	; 58
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	80 64       	ori	r24, 0x40	; 64
     f00:	8c 93       	st	X, r24
     f02:	ab e3       	ldi	r26, 0x3B	; 59
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	eb e3       	ldi	r30, 0x3B	; 59
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	8f 7b       	andi	r24, 0xBF	; 191
     f0e:	8c 93       	st	X, r24
     f10:	0e c0       	rjmp	.+28     	; 0xf2e <_gpib_write+0x3a4>
		} else {
			release_bit(DDRA, PORTA, PA6);
     f12:	aa e3       	ldi	r26, 0x3A	; 58
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	ea e3       	ldi	r30, 0x3A	; 58
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	8f 7b       	andi	r24, 0xBF	; 191
     f1e:	8c 93       	st	X, r24
     f20:	ab e3       	ldi	r26, 0x3B	; 59
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	eb e3       	ldi	r30, 0x3B	; 59
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	80 64       	ori	r24, 0x40	; 64
     f2c:	8c 93       	st	X, r24
		}

		if (c & 0x80) {
     f2e:	8d 81       	ldd	r24, Y+5	; 0x05
     f30:	88 23       	and	r24, r24
     f32:	b4 f4       	brge	.+44     	; 0xf60 <_gpib_write+0x3d6>
			assign_bit(DDRA, PORTA, PA7);
     f34:	ab e3       	ldi	r26, 0x3B	; 59
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	eb e3       	ldi	r30, 0x3B	; 59
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	8f 77       	andi	r24, 0x7F	; 127
     f40:	8c 93       	st	X, r24
     f42:	aa e3       	ldi	r26, 0x3A	; 58
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ea e3       	ldi	r30, 0x3A	; 58
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	80 68       	ori	r24, 0x80	; 128
     f4e:	8c 93       	st	X, r24
     f50:	ab e3       	ldi	r26, 0x3B	; 59
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	eb e3       	ldi	r30, 0x3B	; 59
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8f 77       	andi	r24, 0x7F	; 127
     f5c:	8c 93       	st	X, r24
     f5e:	0e c0       	rjmp	.+28     	; 0xf7c <_gpib_write+0x3f2>
		} else {
			release_bit(DDRA, PORTA, PA7);
     f60:	aa e3       	ldi	r26, 0x3A	; 58
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	ea e3       	ldi	r30, 0x3A	; 58
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	8f 77       	andi	r24, 0x7F	; 127
     f6c:	8c 93       	st	X, r24
     f6e:	ab e3       	ldi	r26, 0x3B	; 59
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	eb e3       	ldi	r30, 0x3B	; 59
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	80 68       	ori	r24, 0x80	; 128
     f7a:	8c 93       	st	X, r24
		}

		// wait until listeners release NRFD
		//uart_puts("1");
		release_bit(DDRD, PORTD, G_NRFD);
     f7c:	a1 e3       	ldi	r26, 0x31	; 49
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e1 e3       	ldi	r30, 0x31	; 49
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	87 7f       	andi	r24, 0xF7	; 247
     f88:	8c 93       	st	X, r24
     f8a:	a2 e3       	ldi	r26, 0x32	; 50
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e2 e3       	ldi	r30, 0x32	; 50
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	88 60       	ori	r24, 0x08	; 8
     f96:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
		//gpib_info();
		timeout = s + 5;
     f98:	80 91 30 07 	lds	r24, 0x0730
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	05 96       	adiw	r24, 0x05	; 5
     fa2:	9a 83       	std	Y+2, r25	; 0x02
     fa4:	89 83       	std	Y+1, r24	; 0x01
     fa6:	10 c0       	rjmp	.+32     	; 0xfc8 <_gpib_write+0x43e>
		while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
			if (s == timeout) {
     fa8:	80 91 30 07 	lds	r24, 0x0730
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	9a 81       	ldd	r25, Y+2	; 0x02
     fb4:	28 17       	cp	r18, r24
     fb6:	39 07       	cpc	r19, r25
     fb8:	39 f4       	brne	.+14     	; 0xfc8 <_gpib_write+0x43e>
				uart_puts("\n\rError: NRFD timeout\n\r");
     fba:	8e ea       	ldi	r24, 0xAE	; 174
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
				return 0xff;
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
     fc4:	8b 87       	std	Y+11, r24	; 0x0b
     fc6:	92 c0       	rjmp	.+292    	; 0x10ec <_gpib_write+0x562>
		//uart_puts("1");
		release_bit(DDRD, PORTD, G_NRFD);
#ifdef WITH_TIMEOUT
		//gpib_info();
		timeout = s + 5;
		while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
     fc8:	e0 e3       	ldi	r30, 0x30	; 48
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	88 70       	andi	r24, 0x08	; 8
     fd4:	90 70       	andi	r25, 0x00	; 0
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	49 f4       	brne	.+18     	; 0xfec <_gpib_write+0x462>
     fda:	80 91 30 07 	lds	r24, 0x0730
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	82 17       	cp	r24, r18
     fe8:	93 07       	cpc	r25, r19
     fea:	f4 f6       	brge	.-68     	; 0xfa8 <_gpib_write+0x41e>
#else
		loop_until_bit_is_set(PIND,G_NRFD);
#endif

		// assign EOI during transmission of only last byte
		if ((i == length - 1) && !attention) {
     fec:	88 85       	ldd	r24, Y+8	; 0x08
     fee:	99 85       	ldd	r25, Y+9	; 0x09
     ff0:	9c 01       	movw	r18, r24
     ff2:	21 50       	subi	r18, 0x01	; 1
     ff4:	30 40       	sbci	r19, 0x00	; 0
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	28 17       	cp	r18, r24
     ffc:	39 07       	cpc	r19, r25
     ffe:	c1 f4       	brne	.+48     	; 0x1030 <_gpib_write+0x4a6>
    1000:	8a 85       	ldd	r24, Y+10	; 0x0a
    1002:	88 23       	and	r24, r24
    1004:	a9 f4       	brne	.+42     	; 0x1030 <_gpib_write+0x4a6>
			//uart_puts("\n\rE\n\r");
			assign_bit(DDRD, PORTD, G_EOI);
    1006:	a2 e3       	ldi	r26, 0x32	; 50
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e2 e3       	ldi	r30, 0x32	; 50
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	8f 7e       	andi	r24, 0xEF	; 239
    1012:	8c 93       	st	X, r24
    1014:	a1 e3       	ldi	r26, 0x31	; 49
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e1 e3       	ldi	r30, 0x31	; 49
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	80 61       	ori	r24, 0x10	; 16
    1020:	8c 93       	st	X, r24
    1022:	a2 e3       	ldi	r26, 0x32	; 50
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e2 e3       	ldi	r30, 0x32	; 50
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	8f 7e       	andi	r24, 0xEF	; 239
    102e:	8c 93       	st	X, r24
		}

		// assign DAV, data valid for listeners
		assign_bit(DDRD, PORTD, G_DAV);
    1030:	a2 e3       	ldi	r26, 0x32	; 50
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e2 e3       	ldi	r30, 0x32	; 50
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	8b 7f       	andi	r24, 0xFB	; 251
    103c:	8c 93       	st	X, r24
    103e:	a1 e3       	ldi	r26, 0x31	; 49
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e1 e3       	ldi	r30, 0x31	; 49
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	84 60       	ori	r24, 0x04	; 4
    104a:	8c 93       	st	X, r24
    104c:	a2 e3       	ldi	r26, 0x32	; 50
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e2 e3       	ldi	r30, 0x32	; 50
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	8b 7f       	andi	r24, 0xFB	; 251
    1058:	8c 93       	st	X, r24

		// wait for NDAC release
		//uart_puts("2");
		release_bit(DDRD, PORTD, G_NDAC);
    105a:	a1 e3       	ldi	r26, 0x31	; 49
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e1 e3       	ldi	r30, 0x31	; 49
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	8f 7d       	andi	r24, 0xDF	; 223
    1066:	8c 93       	st	X, r24
    1068:	a2 e3       	ldi	r26, 0x32	; 50
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e2 e3       	ldi	r30, 0x32	; 50
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	80 62       	ori	r24, 0x20	; 32
    1074:	8c 93       	st	X, r24
		loop_until_bit_is_set(PIND, G_NDAC);
    1076:	e0 e3       	ldi	r30, 0x30	; 48
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	88 2f       	mov	r24, r24
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	80 72       	andi	r24, 0x20	; 32
    1082:	90 70       	andi	r25, 0x00	; 0
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	b9 f3       	breq	.-18     	; 0x1076 <_gpib_write+0x4ec>

		// release DAV, data not valid anymore
		release_bit(DDRD, PORTD, G_DAV);
    1088:	a1 e3       	ldi	r26, 0x31	; 49
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e1 e3       	ldi	r30, 0x31	; 49
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	8b 7f       	andi	r24, 0xFB	; 251
    1094:	8c 93       	st	X, r24
    1096:	a2 e3       	ldi	r26, 0x32	; 50
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e2 e3       	ldi	r30, 0x32	; 50
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	84 60       	ori	r24, 0x04	; 4
    10a2:	8c 93       	st	X, r24

		// reset Port to all input
		DDRA = 0x00;
    10a4:	ea e3       	ldi	r30, 0x3A	; 58
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	10 82       	st	Z, r1
	release_bit(DDRD, PORTD, G_NRFD);

	// bytes[0] = 'a'
	// bytes[1] = 'b'
	// length = 2
	for (i = 0; i < length; i++) {
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	9c 81       	ldd	r25, Y+4	; 0x04
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	9c 83       	std	Y+4, r25	; 0x04
    10b2:	8b 83       	std	Y+3, r24	; 0x03
    10b4:	2b 81       	ldd	r18, Y+3	; 0x03
    10b6:	3c 81       	ldd	r19, Y+4	; 0x04
    10b8:	88 85       	ldd	r24, Y+8	; 0x08
    10ba:	99 85       	ldd	r25, Y+9	; 0x09
    10bc:	28 17       	cp	r18, r24
    10be:	39 07       	cpc	r19, r25
    10c0:	0c f4       	brge	.+2      	; 0x10c4 <_gpib_write+0x53a>
    10c2:	c4 cd       	rjmp	.-1144   	; 0xc4c <_gpib_write+0xc2>
		DDRA = 0x00;

		//uart_puts("3\r\n");
	}

	if (attention) {
    10c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    10c6:	88 23       	and	r24, r24
    10c8:	71 f0       	breq	.+28     	; 0x10e6 <_gpib_write+0x55c>
		// assign ATN for commands
		release_bit(DDRD, PORTD, G_ATN);
    10ca:	a1 e3       	ldi	r26, 0x31	; 49
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e1 e3       	ldi	r30, 0x31	; 49
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	8f 77       	andi	r24, 0x7F	; 127
    10d6:	8c 93       	st	X, r24
    10d8:	a2 e3       	ldi	r26, 0x32	; 50
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e2 e3       	ldi	r30, 0x32	; 50
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	80 68       	ori	r24, 0x80	; 128
    10e4:	8c 93       	st	X, r24
	}

	// clear talk state.Controller does not talk anymore.
	controller.talks = 0;
    10e6:	10 92 c3 05 	sts	0x05C3, r1

	return 0x00;
    10ea:	1b 86       	std	Y+11, r1	; 0x0b
    10ec:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    10ee:	2b 96       	adiw	r28, 0x0b	; 11
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <gpib_info>:

/**
 * print some useful info about bus state (for example value of handshake pins)
 */
void gpib_info(void) {
    1100:	af 92       	push	r10
    1102:	bf 92       	push	r11
    1104:	cf 92       	push	r12
    1106:	df 92       	push	r13
    1108:	ef 92       	push	r14
    110a:	ff 92       	push	r15
    110c:	0f 93       	push	r16
    110e:	1f 93       	push	r17
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	2a 97       	sbiw	r28, 0x0a	; 10
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
	uchar dav, nrfd, ndac, eoi, atn, srq, ifc, ren;
	extern uchar buf[80];

	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    1124:	0e 94 2e 0b 	call	0x165c	; 0x165c <gpib_get_partner_pad>
    1128:	08 2f       	mov	r16, r24
    112a:	10 e0       	ldi	r17, 0x00	; 0
    112c:	0e 94 37 0b 	call	0x166e	; 0x166e <gpib_get_partner_sad>
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	8d b7       	in	r24, 0x3d	; 61
    1136:	9e b7       	in	r25, 0x3e	; 62
    1138:	08 97       	sbiw	r24, 0x08	; 8
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	9e bf       	out	0x3e, r25	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	8d bf       	out	0x3d, r24	; 61
    1144:	ed b7       	in	r30, 0x3d	; 61
    1146:	fe b7       	in	r31, 0x3e	; 62
    1148:	31 96       	adiw	r30, 0x01	; 1
    114a:	8f ed       	ldi	r24, 0xDF	; 223
    114c:	96 e0       	ldi	r25, 0x06	; 6
    114e:	91 83       	std	Z+1, r25	; 0x01
    1150:	80 83       	st	Z, r24
    1152:	86 ec       	ldi	r24, 0xC6	; 198
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	93 83       	std	Z+3, r25	; 0x03
    1158:	82 83       	std	Z+2, r24	; 0x02
    115a:	15 83       	std	Z+5, r17	; 0x05
    115c:	04 83       	std	Z+4, r16	; 0x04
    115e:	37 83       	std	Z+7, r19	; 0x07
    1160:	26 83       	std	Z+6, r18	; 0x06
    1162:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <sprintf>
    1166:	8d b7       	in	r24, 0x3d	; 61
    1168:	9e b7       	in	r25, 0x3e	; 62
    116a:	08 96       	adiw	r24, 0x08	; 8
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	9e bf       	out	0x3e, r25	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	8d bf       	out	0x3d, r24	; 61
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);
    1176:	8f ed       	ldi	r24, 0xDF	; 223
    1178:	96 e0       	ldi	r25, 0x06	; 6
    117a:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>

	uart_puts("Partner list\n\r");
    117e:	84 ef       	ldi	r24, 0xF4	; 244
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
	for (int i = 0; i < MAX_PARTNER; i++) {
    1186:	1a 82       	std	Y+2, r1	; 0x02
    1188:	19 82       	std	Y+1, r1	; 0x01
    118a:	49 c0       	rjmp	.+146    	; 0x121e <gpib_info+0x11e>
		if (controller.partners[i].primary != ADDRESS_NOT_SET) {
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	fc 01       	movw	r30, r24
    1196:	eb 53       	subi	r30, 0x3B	; 59
    1198:	fa 4f       	sbci	r31, 0xFA	; 250
    119a:	80 81       	ld	r24, Z
    119c:	8f 3f       	cpi	r24, 0xFF	; 255
    119e:	d1 f1       	breq	.+116    	; 0x1214 <gpib_info+0x114>
			sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	9a 81       	ldd	r25, Y+2	; 0x02
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	fc 01       	movw	r30, r24
    11aa:	eb 53       	subi	r30, 0x3B	; 59
    11ac:	fa 4f       	sbci	r31, 0xFA	; 250
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	50 e0       	ldi	r21, 0x00	; 0
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	03 96       	adiw	r24, 0x03	; 3
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	fc 01       	movw	r30, r24
    11c0:	e0 54       	subi	r30, 0x40	; 64
    11c2:	fa 4f       	sbci	r31, 0xFA	; 250
    11c4:	80 81       	ld	r24, Z
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	8d b7       	in	r24, 0x3d	; 61
    11cc:	9e b7       	in	r25, 0x3e	; 62
    11ce:	08 97       	sbiw	r24, 0x08	; 8
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	9e bf       	out	0x3e, r25	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	8d bf       	out	0x3d, r24	; 61
    11da:	ed b7       	in	r30, 0x3d	; 61
    11dc:	fe b7       	in	r31, 0x3e	; 62
    11de:	31 96       	adiw	r30, 0x01	; 1
    11e0:	8f ed       	ldi	r24, 0xDF	; 223
    11e2:	96 e0       	ldi	r25, 0x06	; 6
    11e4:	91 83       	std	Z+1, r25	; 0x01
    11e6:	80 83       	st	Z, r24
    11e8:	86 ec       	ldi	r24, 0xC6	; 198
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	93 83       	std	Z+3, r25	; 0x03
    11ee:	82 83       	std	Z+2, r24	; 0x02
    11f0:	55 83       	std	Z+5, r21	; 0x05
    11f2:	44 83       	std	Z+4, r20	; 0x04
    11f4:	37 83       	std	Z+7, r19	; 0x07
    11f6:	26 83       	std	Z+6, r18	; 0x06
    11f8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <sprintf>
    11fc:	8d b7       	in	r24, 0x3d	; 61
    11fe:	9e b7       	in	r25, 0x3e	; 62
    1200:	08 96       	adiw	r24, 0x08	; 8
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	9e bf       	out	0x3e, r25	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	8d bf       	out	0x3d, r24	; 61
					controller.partners[i].primary,
					controller.partners[i].secondary);
			uart_puts(buf);
    120c:	8f ed       	ldi	r24, 0xDF	; 223
    120e:	96 e0       	ldi	r25, 0x06	; 6
    1210:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);

	uart_puts("Partner list\n\r");
	for (int i = 0; i < MAX_PARTNER; i++) {
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	9a 81       	ldd	r25, Y+2	; 0x02
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	9a 83       	std	Y+2, r25	; 0x02
    121c:	89 83       	std	Y+1, r24	; 0x01
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	9a 81       	ldd	r25, Y+2	; 0x02
    1222:	85 30       	cpi	r24, 0x05	; 5
    1224:	91 05       	cpc	r25, r1
    1226:	0c f4       	brge	.+2      	; 0x122a <gpib_info+0x12a>
    1228:	b1 cf       	rjmp	.-158    	; 0x118c <gpib_info+0x8c>
					controller.partners[i].secondary);
			uart_puts(buf);
		}
	}

	dav = bit_is_set(PIND, G_DAV);
    122a:	e0 e3       	ldi	r30, 0x30	; 48
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	84 70       	andi	r24, 0x04	; 4
    1232:	8a 87       	std	Y+10, r24	; 0x0a
	nrfd = bit_is_set(PIND, G_NRFD);
    1234:	e0 e3       	ldi	r30, 0x30	; 48
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	88 70       	andi	r24, 0x08	; 8
    123c:	89 87       	std	Y+9, r24	; 0x09
	ndac = bit_is_set(PIND, G_NDAC);
    123e:	e0 e3       	ldi	r30, 0x30	; 48
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	80 72       	andi	r24, 0x20	; 32
    1246:	88 87       	std	Y+8, r24	; 0x08
	eoi = bit_is_set(PIND, G_EOI);
    1248:	e0 e3       	ldi	r30, 0x30	; 48
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	80 71       	andi	r24, 0x10	; 16
    1250:	8f 83       	std	Y+7, r24	; 0x07
	atn = bit_is_set(PIND, G_ATN);
    1252:	e0 e3       	ldi	r30, 0x30	; 48
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	80 78       	andi	r24, 0x80	; 128
    125a:	8e 83       	std	Y+6, r24	; 0x06
	srq = bit_is_set(PIND, G_SRQ);
    125c:	e0 e3       	ldi	r30, 0x30	; 48
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	80 74       	andi	r24, 0x40	; 64
    1264:	8d 83       	std	Y+5, r24	; 0x05
	ifc = bit_is_set(PINB, G_IFC);
    1266:	e6 e3       	ldi	r30, 0x36	; 54
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	81 70       	andi	r24, 0x01	; 1
    126e:	8c 83       	std	Y+4, r24	; 0x04
	ren = bit_is_set(PINB, G_REN);
    1270:	e6 e3       	ldi	r30, 0x36	; 54
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	82 70       	andi	r24, 0x02	; 2
    1278:	8b 83       	std	Y+3, r24	; 0x03
	//d = PINA;
	//di = d ^ 0xff;
	if (dav == 0x00)
    127a:	8a 85       	ldd	r24, Y+10	; 0x0a
    127c:	88 23       	and	r24, r24
    127e:	19 f4       	brne	.+6      	; 0x1286 <gpib_info+0x186>
		dav = '0';
    1280:	80 e3       	ldi	r24, 0x30	; 48
    1282:	8a 87       	std	Y+10, r24	; 0x0a
    1284:	02 c0       	rjmp	.+4      	; 0x128a <gpib_info+0x18a>
	else
		dav = '1';
    1286:	81 e3       	ldi	r24, 0x31	; 49
    1288:	8a 87       	std	Y+10, r24	; 0x0a
	if (nrfd == 0x00)
    128a:	89 85       	ldd	r24, Y+9	; 0x09
    128c:	88 23       	and	r24, r24
    128e:	19 f4       	brne	.+6      	; 0x1296 <gpib_info+0x196>
		nrfd = '0';
    1290:	80 e3       	ldi	r24, 0x30	; 48
    1292:	89 87       	std	Y+9, r24	; 0x09
    1294:	02 c0       	rjmp	.+4      	; 0x129a <gpib_info+0x19a>
	else
		nrfd = '1';
    1296:	81 e3       	ldi	r24, 0x31	; 49
    1298:	89 87       	std	Y+9, r24	; 0x09
	if (ndac == 0x00)
    129a:	88 85       	ldd	r24, Y+8	; 0x08
    129c:	88 23       	and	r24, r24
    129e:	19 f4       	brne	.+6      	; 0x12a6 <gpib_info+0x1a6>
		ndac = '0';
    12a0:	80 e3       	ldi	r24, 0x30	; 48
    12a2:	88 87       	std	Y+8, r24	; 0x08
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <gpib_info+0x1aa>
	else
		ndac = '1';
    12a6:	81 e3       	ldi	r24, 0x31	; 49
    12a8:	88 87       	std	Y+8, r24	; 0x08
	if (eoi == 0x00)
    12aa:	8f 81       	ldd	r24, Y+7	; 0x07
    12ac:	88 23       	and	r24, r24
    12ae:	19 f4       	brne	.+6      	; 0x12b6 <gpib_info+0x1b6>
		eoi = '0';
    12b0:	80 e3       	ldi	r24, 0x30	; 48
    12b2:	8f 83       	std	Y+7, r24	; 0x07
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <gpib_info+0x1ba>
	else
		eoi = '1';
    12b6:	81 e3       	ldi	r24, 0x31	; 49
    12b8:	8f 83       	std	Y+7, r24	; 0x07
	if (atn == 0x00)
    12ba:	8e 81       	ldd	r24, Y+6	; 0x06
    12bc:	88 23       	and	r24, r24
    12be:	19 f4       	brne	.+6      	; 0x12c6 <gpib_info+0x1c6>
		atn = '0';
    12c0:	80 e3       	ldi	r24, 0x30	; 48
    12c2:	8e 83       	std	Y+6, r24	; 0x06
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <gpib_info+0x1ca>
	else
		atn = '1';
    12c6:	81 e3       	ldi	r24, 0x31	; 49
    12c8:	8e 83       	std	Y+6, r24	; 0x06
	if (srq == 0x00)
    12ca:	8d 81       	ldd	r24, Y+5	; 0x05
    12cc:	88 23       	and	r24, r24
    12ce:	19 f4       	brne	.+6      	; 0x12d6 <gpib_info+0x1d6>
		srq = '0';
    12d0:	80 e3       	ldi	r24, 0x30	; 48
    12d2:	8d 83       	std	Y+5, r24	; 0x05
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <gpib_info+0x1da>
	else
		srq = '1';
    12d6:	81 e3       	ldi	r24, 0x31	; 49
    12d8:	8d 83       	std	Y+5, r24	; 0x05
	if (ifc == 0x00)
    12da:	8c 81       	ldd	r24, Y+4	; 0x04
    12dc:	88 23       	and	r24, r24
    12de:	19 f4       	brne	.+6      	; 0x12e6 <gpib_info+0x1e6>
		ifc = '0';
    12e0:	80 e3       	ldi	r24, 0x30	; 48
    12e2:	8c 83       	std	Y+4, r24	; 0x04
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <gpib_info+0x1ea>
	else
		ifc = '1';
    12e6:	81 e3       	ldi	r24, 0x31	; 49
    12e8:	8c 83       	std	Y+4, r24	; 0x04
	if (ren == 0x00)
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	88 23       	and	r24, r24
    12ee:	19 f4       	brne	.+6      	; 0x12f6 <gpib_info+0x1f6>
		ren = '0';
    12f0:	80 e3       	ldi	r24, 0x30	; 48
    12f2:	8b 83       	std	Y+3, r24	; 0x03
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <gpib_info+0x1fa>
	else
		ren = '1';
    12f6:	81 e3       	ldi	r24, 0x31	; 49
    12f8:	8b 83       	std	Y+3, r24	; 0x03

	sprintf(buf,
    12fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    12fc:	a8 2e       	mov	r10, r24
    12fe:	bb 24       	eor	r11, r11
    1300:	89 85       	ldd	r24, Y+9	; 0x09
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	88 85       	ldd	r24, Y+8	; 0x08
    1308:	48 2f       	mov	r20, r24
    130a:	50 e0       	ldi	r21, 0x00	; 0
    130c:	8f 81       	ldd	r24, Y+7	; 0x07
    130e:	68 2f       	mov	r22, r24
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	a8 2f       	mov	r26, r24
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	08 2f       	mov	r16, r24
    131c:	10 e0       	ldi	r17, 0x00	; 0
    131e:	8e 81       	ldd	r24, Y+6	; 0x06
    1320:	e8 2e       	mov	r14, r24
    1322:	ff 24       	eor	r15, r15
    1324:	8d 81       	ldd	r24, Y+5	; 0x05
    1326:	c8 2e       	mov	r12, r24
    1328:	dd 24       	eor	r13, r13
    132a:	8d b7       	in	r24, 0x3d	; 61
    132c:	9e b7       	in	r25, 0x3e	; 62
    132e:	44 97       	sbiw	r24, 0x14	; 20
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	9e bf       	out	0x3e, r25	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	8d bf       	out	0x3d, r24	; 61
    133a:	ed b7       	in	r30, 0x3d	; 61
    133c:	fe b7       	in	r31, 0x3e	; 62
    133e:	31 96       	adiw	r30, 0x01	; 1
    1340:	8f ed       	ldi	r24, 0xDF	; 223
    1342:	96 e0       	ldi	r25, 0x06	; 6
    1344:	91 83       	std	Z+1, r25	; 0x01
    1346:	80 83       	st	Z, r24
    1348:	83 e0       	ldi	r24, 0x03	; 3
    134a:	91 e0       	ldi	r25, 0x01	; 1
    134c:	93 83       	std	Z+3, r25	; 0x03
    134e:	82 83       	std	Z+2, r24	; 0x02
    1350:	b5 82       	std	Z+5, r11	; 0x05
    1352:	a4 82       	std	Z+4, r10	; 0x04
    1354:	37 83       	std	Z+7, r19	; 0x07
    1356:	26 83       	std	Z+6, r18	; 0x06
    1358:	51 87       	std	Z+9, r21	; 0x09
    135a:	40 87       	std	Z+8, r20	; 0x08
    135c:	73 87       	std	Z+11, r23	; 0x0b
    135e:	62 87       	std	Z+10, r22	; 0x0a
    1360:	b5 87       	std	Z+13, r27	; 0x0d
    1362:	a4 87       	std	Z+12, r26	; 0x0c
    1364:	17 87       	std	Z+15, r17	; 0x0f
    1366:	06 87       	std	Z+14, r16	; 0x0e
    1368:	f1 8a       	std	Z+17, r15	; 0x11
    136a:	e0 8a       	std	Z+16, r14	; 0x10
    136c:	d3 8a       	std	Z+19, r13	; 0x13
    136e:	c2 8a       	std	Z+18, r12	; 0x12
    1370:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <sprintf>
    1374:	8d b7       	in	r24, 0x3d	; 61
    1376:	9e b7       	in	r25, 0x3e	; 62
    1378:	44 96       	adiw	r24, 0x14	; 20
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	9e bf       	out	0x3e, r25	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	8d bf       	out	0x3d, r24	; 61
			"dav=%c,nrfd=%c,ndac=%c, eoi=%c, ifc=%c,ren=%c,atn=%c,srq=%c\n\r",
			dav, nrfd, ndac, eoi, ifc, ren, atn, srq);
	uart_puts(buf);
    1384:	8f ed       	ldi	r24, 0xDF	; 223
    1386:	96 e0       	ldi	r25, 0x06	; 6
    1388:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
}
    138c:	2a 96       	adiw	r28, 0x0a	; 10
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	ff 90       	pop	r15
    13a2:	ef 90       	pop	r14
    13a4:	df 90       	pop	r13
    13a6:	cf 90       	pop	r12
    13a8:	bf 90       	pop	r11
    13aa:	af 90       	pop	r10
    13ac:	08 95       	ret

000013ae <gpib_serial_poll>:
 * I haven't looked how a device with two byte address behaves.
 *
 * Secondary/primary is returned in inout parameters
 * If any emitter is found, return value is != 0.
 */
uchar gpib_serial_poll(uint8_t *primary_v, uint8_t* secondary_v) {
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	2c 97       	sbiw	r28, 0x0c	; 12
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	9a 87       	std	Y+10, r25	; 0x0a
    13c4:	89 87       	std	Y+9, r24	; 0x09
    13c6:	7c 87       	std	Y+12, r23	; 0x0c
    13c8:	6b 87       	std	Y+11, r22	; 0x0b
	uchar b, e;
	uchar primary = 0, secondary = 0, found = 0,
    13ca:	1e 82       	std	Y+6, r1	; 0x06
    13cc:	1d 82       	std	Y+5, r1	; 0x05
    13ce:	1c 82       	std	Y+4, r1	; 0x04
			foundPhysical = ADDRESS_NOT_SET;
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	8b 83       	std	Y+3, r24	; 0x03
	int i;

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	cmd_buf[0] = G_CMD_UNT;
    13d4:	8f e5       	ldi	r24, 0x5F	; 95
    13d6:	80 93 7b 06 	sts	0x067B, r24
	gpib_cmd(cmd_buf, 1);
    13da:	8b e7       	ldi	r24, 0x7B	; 123
    13dc:	96 e0       	ldi	r25, 0x06	; 6
    13de:	61 e0       	ldi	r22, 0x01	; 1
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>
	cmd_buf[0] = G_CMD_UNL;
    13e6:	8f e3       	ldi	r24, 0x3F	; 63
    13e8:	80 93 7b 06 	sts	0x067B, r24
	gpib_cmd(cmd_buf, 1);
    13ec:	8b e7       	ldi	r24, 0x7B	; 123
    13ee:	96 e0       	ldi	r25, 0x06	; 6
    13f0:	61 e0       	ldi	r22, 0x01	; 1
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>

	// serial poll enable
	// effect: all devices will send status byte instead of normal data when addressed
	// as talker
	//uart_puts("before SPE\r\n");
	cmd_buf[0] = G_CMD_SPE;
    13f8:	88 e1       	ldi	r24, 0x18	; 24
    13fa:	80 93 7b 06 	sts	0x067B, r24
	gpib_cmd(cmd_buf, 1);
    13fe:	8b e7       	ldi	r24, 0x7B	; 123
    1400:	96 e0       	ldi	r25, 0x06	; 6
    1402:	61 e0       	ldi	r22, 0x01	; 1
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    140a:	1a 82       	std	Y+2, r1	; 0x02
    140c:	19 82       	std	Y+1, r1	; 0x01
    140e:	de c0       	rjmp	.+444    	; 0x15cc <gpib_serial_poll+0x21e>
			i++) {

		// set partner to talker mode
		primary = address2TalkerAddress(controller.partners[i].primary);
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	9a 81       	ldd	r25, Y+2	; 0x02
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	fc 01       	movw	r30, r24
    141a:	eb 53       	subi	r30, 0x3B	; 59
    141c:	fa 4f       	sbci	r31, 0xFA	; 250
    141e:	80 81       	ld	r24, Z
    1420:	80 5c       	subi	r24, 0xC0	; 192
    1422:	8e 83       	std	Y+6, r24	; 0x06
		secondary = secondaryAdressToAdressByte(
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	03 96       	adiw	r24, 0x03	; 3
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	fc 01       	movw	r30, r24
    1430:	e0 54       	subi	r30, 0x40	; 64
    1432:	fa 4f       	sbci	r31, 0xFA	; 250
    1434:	80 81       	ld	r24, Z
    1436:	80 66       	ori	r24, 0x60	; 96
    1438:	8d 83       	std	Y+5, r24	; 0x05
				controller.partners[i].secondary);

		cmd_buf[0] = primary;
    143a:	8e 81       	ldd	r24, Y+6	; 0x06
    143c:	80 93 7b 06 	sts	0x067B, r24
		//uart_puts("before talker address write\r\n");
		gpib_cmd(cmd_buf, 1);
    1440:	8b e7       	ldi	r24, 0x7B	; 123
    1442:	96 e0       	ldi	r25, 0x06	; 6
    1444:	61 e0       	ldi	r22, 0x01	; 1
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>
		//uart_puts("after talker address write\r\n");
		// handle secondary address if required
		if (secondary != ADDRESS_NOT_SET) {
    144c:	8d 81       	ldd	r24, Y+5	; 0x05
    144e:	8f 3f       	cpi	r24, 0xFF	; 255
    1450:	49 f0       	breq	.+18     	; 0x1464 <gpib_serial_poll+0xb6>
			cmd_buf[0] = secondary;
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	80 93 7b 06 	sts	0x067B, r24
			//uart_puts("before talker address write\r\n");
			gpib_cmd(cmd_buf, 1);
    1458:	8b e7       	ldi	r24, 0x7B	; 123
    145a:	96 e0       	ldi	r25, 0x06	; 6
    145c:	61 e0       	ldi	r22, 0x01	; 1
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>
		}

		// now receive data
		//uart_puts("before status byte receive\r\n");
		e = gpib_receive(&b);
    1464:	ce 01       	movw	r24, r28
    1466:	08 96       	adiw	r24, 0x08	; 8
    1468:	0e 94 12 04 	call	0x824	; 0x824 <gpib_receive>
    146c:	8f 83       	std	Y+7, r24	; 0x07
		//uart_puts("after status byte receive\r\n");
		// status byte is now in b

		if (secondary != ADDRESS_NOT_SET) {
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	8f 3f       	cpi	r24, 0xFF	; 255
    1472:	81 f1       	breq	.+96     	; 0x14d4 <gpib_serial_poll+0x126>
			sprintf((char*) cmd_buf,
    1474:	8e 81       	ldd	r24, Y+6	; 0x06
    1476:	88 2f       	mov	r24, r24
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	bc 01       	movw	r22, r24
    147c:	60 54       	subi	r22, 0x40	; 64
    147e:	70 40       	sbci	r23, 0x00	; 0
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	88 85       	ldd	r24, Y+8	; 0x08
    1488:	48 2f       	mov	r20, r24
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	8d b7       	in	r24, 0x3d	; 61
    148e:	9e b7       	in	r25, 0x3e	; 62
    1490:	0a 97       	sbiw	r24, 0x0a	; 10
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	9e bf       	out	0x3e, r25	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	8d bf       	out	0x3d, r24	; 61
    149c:	ed b7       	in	r30, 0x3d	; 61
    149e:	fe b7       	in	r31, 0x3e	; 62
    14a0:	31 96       	adiw	r30, 0x01	; 1
    14a2:	8b e7       	ldi	r24, 0x7B	; 123
    14a4:	96 e0       	ldi	r25, 0x06	; 6
    14a6:	91 83       	std	Z+1, r25	; 0x01
    14a8:	80 83       	st	Z, r24
    14aa:	81 e4       	ldi	r24, 0x41	; 65
    14ac:	91 e0       	ldi	r25, 0x01	; 1
    14ae:	93 83       	std	Z+3, r25	; 0x03
    14b0:	82 83       	std	Z+2, r24	; 0x02
    14b2:	75 83       	std	Z+5, r23	; 0x05
    14b4:	64 83       	std	Z+4, r22	; 0x04
    14b6:	37 83       	std	Z+7, r19	; 0x07
    14b8:	26 83       	std	Z+6, r18	; 0x06
    14ba:	51 87       	std	Z+9, r21	; 0x09
    14bc:	40 87       	std	Z+8, r20	; 0x08
    14be:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <sprintf>
    14c2:	8d b7       	in	r24, 0x3d	; 61
    14c4:	9e b7       	in	r25, 0x3e	; 62
    14c6:	0a 96       	adiw	r24, 0x0a	; 10
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	9e bf       	out	0x3e, r25	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	8d bf       	out	0x3d, r24	; 61
    14d2:	2a c0       	rjmp	.+84     	; 0x1528 <gpib_serial_poll+0x17a>
					"Status byte from device primary=0x%02x,secondary=0x%02x (physical) = 0x%02x\n\r",
					TalkerAddress2Address(primary), secondary, b);
		} else {
			sprintf((char*) cmd_buf,
    14d4:	8e 81       	ldd	r24, Y+6	; 0x06
    14d6:	88 2f       	mov	r24, r24
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	9c 01       	movw	r18, r24
    14dc:	20 54       	subi	r18, 0x40	; 64
    14de:	30 40       	sbci	r19, 0x00	; 0
    14e0:	88 85       	ldd	r24, Y+8	; 0x08
    14e2:	48 2f       	mov	r20, r24
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	8d b7       	in	r24, 0x3d	; 61
    14e8:	9e b7       	in	r25, 0x3e	; 62
    14ea:	08 97       	sbiw	r24, 0x08	; 8
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	9e bf       	out	0x3e, r25	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	8d bf       	out	0x3d, r24	; 61
    14f6:	ed b7       	in	r30, 0x3d	; 61
    14f8:	fe b7       	in	r31, 0x3e	; 62
    14fa:	31 96       	adiw	r30, 0x01	; 1
    14fc:	8b e7       	ldi	r24, 0x7B	; 123
    14fe:	96 e0       	ldi	r25, 0x06	; 6
    1500:	91 83       	std	Z+1, r25	; 0x01
    1502:	80 83       	st	Z, r24
    1504:	8f e8       	ldi	r24, 0x8F	; 143
    1506:	91 e0       	ldi	r25, 0x01	; 1
    1508:	93 83       	std	Z+3, r25	; 0x03
    150a:	82 83       	std	Z+2, r24	; 0x02
    150c:	35 83       	std	Z+5, r19	; 0x05
    150e:	24 83       	std	Z+4, r18	; 0x04
    1510:	57 83       	std	Z+7, r21	; 0x07
    1512:	46 83       	std	Z+6, r20	; 0x06
    1514:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <sprintf>
    1518:	8d b7       	in	r24, 0x3d	; 61
    151a:	9e b7       	in	r25, 0x3e	; 62
    151c:	08 96       	adiw	r24, 0x08	; 8
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	9e bf       	out	0x3e, r25	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	8d bf       	out	0x3d, r24	; 61
					"Status byte from device primary=0x%02x (physical) = 0x%02x\n\r",
					TalkerAddress2Address(primary), b);
		}
		uart_puts((char*) cmd_buf);
    1528:	8b e7       	ldi	r24, 0x7B	; 123
    152a:	96 e0       	ldi	r25, 0x06	; 6
    152c:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>

		// send UNT and UNL commands (unlisten and untalk)
		// effect: all talker stop talking and all listeners stop listening
		cmd_buf[0] = G_CMD_UNT;
    1530:	8f e5       	ldi	r24, 0x5F	; 95
    1532:	80 93 7b 06 	sts	0x067B, r24
		gpib_cmd(cmd_buf, 1);
    1536:	8b e7       	ldi	r24, 0x7B	; 123
    1538:	96 e0       	ldi	r25, 0x06	; 6
    153a:	61 e0       	ldi	r22, 0x01	; 1
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>
		cmd_buf[0] = G_CMD_UNL;
    1542:	8f e3       	ldi	r24, 0x3F	; 63
    1544:	80 93 7b 06 	sts	0x067B, r24
		gpib_cmd(cmd_buf, 1);
    1548:	8b e7       	ldi	r24, 0x7B	; 123
    154a:	96 e0       	ldi	r25, 0x06	; 6
    154c:	61 e0       	ldi	r22, 0x01	; 1
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>

		if (b & (1 << 6)) {
    1554:	88 85       	ldd	r24, Y+8	; 0x08
    1556:	88 2f       	mov	r24, r24
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	80 74       	andi	r24, 0x40	; 64
    155c:	90 70       	andi	r25, 0x00	; 0
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	81 f1       	breq	.+96     	; 0x15c2 <gpib_serial_poll+0x214>
			found = primary;
    1562:	8e 81       	ldd	r24, Y+6	; 0x06
    1564:	8c 83       	std	Y+4, r24	; 0x04
			foundPhysical = TalkerAddress2Address(found);
    1566:	8c 81       	ldd	r24, Y+4	; 0x04
    1568:	80 54       	subi	r24, 0x40	; 64
    156a:	8b 83       	std	Y+3, r24	; 0x03
			// bit 6 of status byte of SRQ emitter is 1
			// when reading status byte from emitter, he releases SRQ line (may also be tested here)
			sprintf((char*) cmd_buf,
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	8d 81       	ldd	r24, Y+5	; 0x05
    1574:	48 2f       	mov	r20, r24
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	8d b7       	in	r24, 0x3d	; 61
    157a:	9e b7       	in	r25, 0x3e	; 62
    157c:	08 97       	sbiw	r24, 0x08	; 8
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	9e bf       	out	0x3e, r25	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	8d bf       	out	0x3d, r24	; 61
    1588:	ed b7       	in	r30, 0x3d	; 61
    158a:	fe b7       	in	r31, 0x3e	; 62
    158c:	31 96       	adiw	r30, 0x01	; 1
    158e:	8b e7       	ldi	r24, 0x7B	; 123
    1590:	96 e0       	ldi	r25, 0x06	; 6
    1592:	91 83       	std	Z+1, r25	; 0x01
    1594:	80 83       	st	Z, r24
    1596:	8c ec       	ldi	r24, 0xCC	; 204
    1598:	91 e0       	ldi	r25, 0x01	; 1
    159a:	93 83       	std	Z+3, r25	; 0x03
    159c:	82 83       	std	Z+2, r24	; 0x02
    159e:	35 83       	std	Z+5, r19	; 0x05
    15a0:	24 83       	std	Z+4, r18	; 0x04
    15a2:	57 83       	std	Z+7, r21	; 0x07
    15a4:	46 83       	std	Z+6, r20	; 0x06
    15a6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <sprintf>
    15aa:	8d b7       	in	r24, 0x3d	; 61
    15ac:	9e b7       	in	r25, 0x3e	; 62
    15ae:	08 96       	adiw	r24, 0x08	; 8
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	9e bf       	out	0x3e, r25	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	8d bf       	out	0x3d, r24	; 61
					"SRQ emitter is device = 0x%02x (physical address), secondary = 0x%02x\n\r",
					foundPhysical, secondary);
			uart_puts((char*) cmd_buf);
    15ba:	8b e7       	ldi	r24, 0x7B	; 123
    15bc:	96 e0       	ldi	r25, 0x06	; 6
    15be:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
	gpib_cmd(cmd_buf, 1);
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
			i++) {
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	9a 81       	ldd	r25, Y+2	; 0x02
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	9a 83       	std	Y+2, r25	; 0x02
    15ca:	89 83       	std	Y+1, r24	; 0x01
	cmd_buf[0] = G_CMD_SPE;
	gpib_cmd(cmd_buf, 1);
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	fc 01       	movw	r30, r24
    15d6:	eb 53       	subi	r30, 0x3B	; 59
    15d8:	fa 4f       	sbci	r31, 0xFA	; 250
    15da:	80 81       	ld	r24, Z
    15dc:	8f 3f       	cpi	r24, 0xFF	; 255
    15de:	21 f0       	breq	.+8      	; 0x15e8 <gpib_serial_poll+0x23a>
    15e0:	8c 81       	ldd	r24, Y+4	; 0x04
    15e2:	88 23       	and	r24, r24
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <gpib_serial_poll+0x23a>
    15e6:	14 cf       	rjmp	.-472    	; 0x1410 <gpib_serial_poll+0x62>
		}
	}

	// serial poll disable
	// effect: all devices will return to normal behaviour as talker
	cmd_buf[0] = G_CMD_SPD;
    15e8:	89 e1       	ldi	r24, 0x19	; 25
    15ea:	80 93 7b 06 	sts	0x067B, r24
	//uart_puts("before SPD\r\n");
	gpib_cmd(cmd_buf, 1);
    15ee:	8b e7       	ldi	r24, 0x7B	; 123
    15f0:	96 e0       	ldi	r25, 0x06	; 6
    15f2:	61 e0       	ldi	r22, 0x01	; 1
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>
	//uart_puts("after SPD\r\n");

	// "return" values determined
	*primary_v = primary;
    15fa:	e9 85       	ldd	r30, Y+9	; 0x09
    15fc:	fa 85       	ldd	r31, Y+10	; 0x0a
    15fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1600:	80 83       	st	Z, r24
	*secondary_v = secondary;
    1602:	eb 85       	ldd	r30, Y+11	; 0x0b
    1604:	fc 85       	ldd	r31, Y+12	; 0x0c
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	80 83       	st	Z, r24

	return found;
    160a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    160c:	2c 96       	adiw	r28, 0x0c	; 12
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <gpib_set_partner_address>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_address(uchar primary, uchar secondary) {
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	00 d0       	rcall	.+0      	; 0x1624 <gpib_set_partner_address+0x6>
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	89 83       	std	Y+1, r24	; 0x01
    162a:	6a 83       	std	Y+2, r22	; 0x02
	controller.partner.primary = primary;
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	80 93 c1 05 	sts	0x05C1, r24
	controller.partner.secondary = secondary;
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	80 93 c2 05 	sts	0x05C2, r24
}
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <gpib_set_partner_secondary>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_secondary(uchar secondary) {
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	0f 92       	push	r0
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	89 83       	std	Y+1, r24	; 0x01
	controller.partner.secondary = secondary;
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	80 93 c2 05 	sts	0x05C2, r24
}
    1654:	0f 90       	pop	r0
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <gpib_get_partner_pad>:

/**
 * Get primary address of device currently controlled.
 * \returns primary address Address of device.
 */
uchar gpib_get_partner_pad(void) {
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.primary;
    1664:	80 91 c1 05 	lds	r24, 0x05C1
}
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <gpib_get_partner_sad>:

/**
 * Get secondary address of device currently controlled.
 * \returns secondary address Address of device.
 */
uchar gpib_get_partner_sad(void) {
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.secondary;
    1676:	80 91 c2 05 	lds	r24, 0x05C2
}
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <gpib_get_address>:

/**
 * Get controller address.
 * \returns address of controller.
 */
uchar gpib_get_address(void) {
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
	return controller.myaddress;
    1688:	80 91 c0 05 	lds	r24, 0x05C0
}
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <gpib_set_flavour>:

void gpib_set_flavour(uchar flavour) {
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	0f 92       	push	r0
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	89 83       	std	Y+1, r24	; 0x01
	controller.flavour = flavour;
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	80 93 c4 05 	sts	0x05C4, r24
}
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <gpib_get_flavour>:

uchar gpib_get_flavour(void) {
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
	return controller.flavour;
    16b4:	80 91 c4 05 	lds	r24, 0x05C4
}
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <gpib_clear_partners>:

/**
 * Clear partners list
 */
void gpib_clear_partners() {
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <gpib_clear_partners+0x6>
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < MAX_PARTNER; i++) {
    16c8:	1a 82       	std	Y+2, r1	; 0x02
    16ca:	19 82       	std	Y+1, r1	; 0x01
    16cc:	0e c0       	rjmp	.+28     	; 0x16ea <gpib_clear_partners+0x2c>
		controller.partners[i].primary = ADDRESS_NOT_SET;
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	9a 81       	ldd	r25, Y+2	; 0x02
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	fc 01       	movw	r30, r24
    16d8:	eb 53       	subi	r30, 0x3B	; 59
    16da:	fa 4f       	sbci	r31, 0xFA	; 250
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	80 83       	st	Z, r24

/**
 * Clear partners list
 */
void gpib_clear_partners() {
	for (int i = 0; i < MAX_PARTNER; i++) {
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	9a 81       	ldd	r25, Y+2	; 0x02
    16e4:	01 96       	adiw	r24, 0x01	; 1
    16e6:	9a 83       	std	Y+2, r25	; 0x02
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	85 30       	cpi	r24, 0x05	; 5
    16f0:	91 05       	cpc	r25, r1
    16f2:	6c f3       	brlt	.-38     	; 0x16ce <gpib_clear_partners+0x10>
		controller.partners[i].primary = ADDRESS_NOT_SET;
	}
}
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <gpib_add_partner_address>:

/**
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	00 d0       	rcall	.+0      	; 0x1704 <gpib_add_partner_address+0x6>
    1704:	00 d0       	rcall	.+0      	; 0x1706 <gpib_add_partner_address+0x8>
    1706:	0f 92       	push	r0
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	8b 83       	std	Y+3, r24	; 0x03
    170e:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1710:	1a 82       	std	Y+2, r1	; 0x02
    1712:	19 82       	std	Y+1, r1	; 0x01
    1714:	05 c0       	rjmp	.+10     	; 0x1720 <gpib_add_partner_address+0x22>
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
			i++) {
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	01 96       	adiw	r24, 0x01	; 1
    171c:	9a 83       	std	Y+2, r25	; 0x02
    171e:	89 83       	std	Y+1, r24	; 0x01
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	9a 81       	ldd	r25, Y+2	; 0x02
    1724:	85 30       	cpi	r24, 0x05	; 5
    1726:	91 05       	cpc	r25, r1
    1728:	54 f4       	brge	.+20     	; 0x173e <gpib_add_partner_address+0x40>
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	9a 81       	ldd	r25, Y+2	; 0x02
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	fc 01       	movw	r30, r24
    1734:	eb 53       	subi	r30, 0x3B	; 59
    1736:	fa 4f       	sbci	r31, 0xFA	; 250
    1738:	80 81       	ld	r24, Z
    173a:	8f 3f       	cpi	r24, 0xFF	; 255
    173c:	61 f7       	brne	.-40     	; 0x1716 <gpib_add_partner_address+0x18>
			i++) {
	}
	if (i == MAX_PARTNER) {
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	9a 81       	ldd	r25, Y+2	; 0x02
    1742:	85 30       	cpi	r24, 0x05	; 5
    1744:	91 05       	cpc	r25, r1
    1746:	39 f4       	brne	.+14     	; 0x1756 <gpib_add_partner_address+0x58>
		uart_puts("Too much partners.\n\r");
    1748:	84 e1       	ldi	r24, 0x14	; 20
    174a:	92 e0       	ldi	r25, 0x02	; 2
    174c:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
		return 1;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	8d 83       	std	Y+5, r24	; 0x05
    1754:	14 c0       	rjmp	.+40     	; 0x177e <gpib_add_partner_address+0x80>
	}
	controller.partners[i].primary = primary;
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	9a 81       	ldd	r25, Y+2	; 0x02
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	fc 01       	movw	r30, r24
    1760:	eb 53       	subi	r30, 0x3B	; 59
    1762:	fa 4f       	sbci	r31, 0xFA	; 250
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	80 83       	st	Z, r24
	controller.partners[i].secondary = secondary;
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	9a 81       	ldd	r25, Y+2	; 0x02
    176c:	03 96       	adiw	r24, 0x03	; 3
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	fc 01       	movw	r30, r24
    1774:	e0 54       	subi	r30, 0x40	; 64
    1776:	fa 4f       	sbci	r31, 0xFA	; 250
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	80 83       	st	Z, r24
	return 0;
    177c:	1d 82       	std	Y+5, r1	; 0x05
    177e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <gpib_remove_partner_address>:

/**
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	00 d0       	rcall	.+0      	; 0x1796 <gpib_remove_partner_address+0x6>
    1796:	00 d0       	rcall	.+0      	; 0x1798 <gpib_remove_partner_address+0x8>
    1798:	0f 92       	push	r0
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	8b 83       	std	Y+3, r24	; 0x03
    17a0:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    17a2:	1a 82       	std	Y+2, r1	; 0x02
    17a4:	19 82       	std	Y+1, r1	; 0x01
    17a6:	05 c0       	rjmp	.+10     	; 0x17b2 <gpib_remove_partner_address+0x22>
			i < MAX_PARTNER
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
    17b6:	85 30       	cpi	r24, 0x05	; 5
    17b8:	91 05       	cpc	r25, r1
    17ba:	bc f4       	brge	.+46     	; 0x17ea <gpib_remove_partner_address+0x5a>
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	9a 81       	ldd	r25, Y+2	; 0x02
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	fc 01       	movw	r30, r24
    17c6:	eb 53       	subi	r30, 0x3B	; 59
    17c8:	fa 4f       	sbci	r31, 0xFA	; 250
    17ca:	90 81       	ld	r25, Z
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	98 17       	cp	r25, r24
    17d0:	59 f7       	brne	.-42     	; 0x17a8 <gpib_remove_partner_address+0x18>
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	9a 81       	ldd	r25, Y+2	; 0x02
    17d6:	03 96       	adiw	r24, 0x03	; 3
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	fc 01       	movw	r30, r24
    17de:	e0 54       	subi	r30, 0x40	; 64
    17e0:	fa 4f       	sbci	r31, 0xFA	; 250
    17e2:	90 81       	ld	r25, Z
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	98 17       	cp	r25, r24
    17e8:	f9 f6       	brne	.-66     	; 0x17a8 <gpib_remove_partner_address+0x18>
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
	}
	if (i == MAX_PARTNER) {
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	85 30       	cpi	r24, 0x05	; 5
    17f0:	91 05       	cpc	r25, r1
    17f2:	39 f4       	brne	.+14     	; 0x1802 <gpib_remove_partner_address+0x72>
		uart_puts("Partner unknown.\n\r");
    17f4:	89 e2       	ldi	r24, 0x29	; 41
    17f6:	92 e0       	ldi	r25, 0x02	; 2
    17f8:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
		return 1;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	8d 83       	std	Y+5, r24	; 0x05
    1800:	14 c0       	rjmp	.+40     	; 0x182a <gpib_remove_partner_address+0x9a>
	}
	controller.partners[i].primary = ADDRESS_NOT_SET;
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	fc 01       	movw	r30, r24
    180c:	eb 53       	subi	r30, 0x3B	; 59
    180e:	fa 4f       	sbci	r31, 0xFA	; 250
    1810:	8f ef       	ldi	r24, 0xFF	; 255
    1812:	80 83       	st	Z, r24
	controller.partners[i].secondary = ADDRESS_NOT_SET;
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	9a 81       	ldd	r25, Y+2	; 0x02
    1818:	03 96       	adiw	r24, 0x03	; 3
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	fc 01       	movw	r30, r24
    1820:	e0 54       	subi	r30, 0x40	; 64
    1822:	fa 4f       	sbci	r31, 0xFA	; 250
    1824:	8f ef       	ldi	r24, 0xFF	; 255
    1826:	80 83       	st	Z, r24
	return 0;
    1828:	1d 82       	std	Y+5, r1	; 0x05
    182a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <stringToTwoUchars>:

/**
 * Read two integers from string like "45 56" or one integer. In latter case
 * the second integer is initialized with a special value.
 */
void stringToTwoUchars(char *string, uchar *a, uchar *b) {
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	28 97       	sbiw	r28, 0x08	; 8
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	9c 83       	std	Y+4, r25	; 0x04
    1852:	8b 83       	std	Y+3, r24	; 0x03
    1854:	7e 83       	std	Y+6, r23	; 0x06
    1856:	6d 83       	std	Y+5, r22	; 0x05
    1858:	58 87       	std	Y+8, r21	; 0x08
    185a:	4f 83       	std	Y+7, r20	; 0x07
	char *token = strtok(string, " ");
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	2c e3       	ldi	r18, 0x3C	; 60
    1862:	32 e0       	ldi	r19, 0x02	; 2
    1864:	b9 01       	movw	r22, r18
    1866:	0e 94 90 00 	call	0x120	; 0x120 <strtok>
    186a:	9a 83       	std	Y+2, r25	; 0x02
    186c:	89 83       	std	Y+1, r24	; 0x01
	*a = atoi((char*) token);
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	9a 81       	ldd	r25, Y+2	; 0x02
    1872:	0e 94 72 00 	call	0xe4	; 0xe4 <atoi>
    1876:	ed 81       	ldd	r30, Y+5	; 0x05
    1878:	fe 81       	ldd	r31, Y+6	; 0x06
    187a:	80 83       	st	Z, r24
	token = strtok(NULL, " ");
    187c:	2c e3       	ldi	r18, 0x3C	; 60
    187e:	32 e0       	ldi	r19, 0x02	; 2
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	b9 01       	movw	r22, r18
    1886:	0e 94 90 00 	call	0x120	; 0x120 <strtok>
    188a:	9a 83       	std	Y+2, r25	; 0x02
    188c:	89 83       	std	Y+1, r24	; 0x01
	if (token != NULL) {
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	9a 81       	ldd	r25, Y+2	; 0x02
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	41 f0       	breq	.+16     	; 0x18a6 <stringToTwoUchars+0x6a>
		*b = atoi((char*) token);
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	9a 81       	ldd	r25, Y+2	; 0x02
    189a:	0e 94 72 00 	call	0xe4	; 0xe4 <atoi>
    189e:	ef 81       	ldd	r30, Y+7	; 0x07
    18a0:	f8 85       	ldd	r31, Y+8	; 0x08
    18a2:	80 83       	st	Z, r24
    18a4:	04 c0       	rjmp	.+8      	; 0x18ae <stringToTwoUchars+0x72>
	} else {
		*b = ADDRESS_NOT_SET;
    18a6:	ef 81       	ldd	r30, Y+7	; 0x07
    18a8:	f8 85       	ldd	r31, Y+8	; 0x08
    18aa:	8f ef       	ldi	r24, 0xFF	; 255
    18ac:	80 83       	st	Z, r24
	}
}
    18ae:	28 96       	adiw	r28, 0x08	; 8
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	de bf       	out	0x3e, r29	; 62
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	cd bf       	out	0x3d, r28	; 61
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <handle_internal_commands>:

/**
 * Handles builtin commands.
 */
void handle_internal_commands(uchar *commandString) {
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <handle_internal_commands+0x6>
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <handle_internal_commands+0x8>
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <handle_internal_commands+0xa>
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	9c 83       	std	Y+4, r25	; 0x04
    18d0:	8b 83       	std	Y+3, r24	; 0x03
	uchar val, val1;

	switch (buf[1]) {
    18d2:	80 91 e0 06 	lds	r24, 0x06E0
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	3e 83       	std	Y+6, r19	; 0x06
    18dc:	2d 83       	std	Y+5, r18	; 0x05
    18de:	8d 81       	ldd	r24, Y+5	; 0x05
    18e0:	9e 81       	ldd	r25, Y+6	; 0x06
    18e2:	89 36       	cpi	r24, 0x69	; 105
    18e4:	91 05       	cpc	r25, r1
    18e6:	09 f4       	brne	.+2      	; 0x18ea <handle_internal_commands+0x2a>
    18e8:	33 c1       	rjmp	.+614    	; 0x1b50 <handle_internal_commands+0x290>
    18ea:	2d 81       	ldd	r18, Y+5	; 0x05
    18ec:	3e 81       	ldd	r19, Y+6	; 0x06
    18ee:	2a 36       	cpi	r18, 0x6A	; 106
    18f0:	31 05       	cpc	r19, r1
    18f2:	f4 f4       	brge	.+60     	; 0x1930 <handle_internal_commands+0x70>
    18f4:	8d 81       	ldd	r24, Y+5	; 0x05
    18f6:	9e 81       	ldd	r25, Y+6	; 0x06
    18f8:	81 36       	cpi	r24, 0x61	; 97
    18fa:	91 05       	cpc	r25, r1
    18fc:	61 f1       	breq	.+88     	; 0x1956 <handle_internal_commands+0x96>
    18fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1900:	3e 81       	ldd	r19, Y+6	; 0x06
    1902:	22 36       	cpi	r18, 0x62	; 98
    1904:	31 05       	cpc	r19, r1
    1906:	6c f4       	brge	.+26     	; 0x1922 <handle_internal_commands+0x62>
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	9e 81       	ldd	r25, Y+6	; 0x06
    190c:	8b 32       	cpi	r24, 0x2B	; 43
    190e:	91 05       	cpc	r25, r1
    1910:	09 f4       	brne	.+2      	; 0x1914 <handle_internal_commands+0x54>
    1912:	88 c0       	rjmp	.+272    	; 0x1a24 <handle_internal_commands+0x164>
    1914:	2d 81       	ldd	r18, Y+5	; 0x05
    1916:	3e 81       	ldd	r19, Y+6	; 0x06
    1918:	2d 32       	cpi	r18, 0x2D	; 45
    191a:	31 05       	cpc	r19, r1
    191c:	09 f4       	brne	.+2      	; 0x1920 <handle_internal_commands+0x60>
    191e:	bf c0       	rjmp	.+382    	; 0x1a9e <handle_internal_commands+0x1de>
    1920:	45 c1       	rjmp	.+650    	; 0x1bac <handle_internal_commands+0x2ec>
    1922:	8d 81       	ldd	r24, Y+5	; 0x05
    1924:	9e 81       	ldd	r25, Y+6	; 0x06
    1926:	88 36       	cpi	r24, 0x68	; 104
    1928:	91 05       	cpc	r25, r1
    192a:	09 f4       	brne	.+2      	; 0x192e <handle_internal_commands+0x6e>
    192c:	0e c1       	rjmp	.+540    	; 0x1b4a <handle_internal_commands+0x28a>
    192e:	3e c1       	rjmp	.+636    	; 0x1bac <handle_internal_commands+0x2ec>
    1930:	2d 81       	ldd	r18, Y+5	; 0x05
    1932:	3e 81       	ldd	r19, Y+6	; 0x06
    1934:	28 37       	cpi	r18, 0x78	; 120
    1936:	31 05       	cpc	r19, r1
    1938:	09 f4       	brne	.+2      	; 0x193c <handle_internal_commands+0x7c>
    193a:	ee c0       	rjmp	.+476    	; 0x1b18 <handle_internal_commands+0x258>
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
    193e:	9e 81       	ldd	r25, Y+6	; 0x06
    1940:	8a 37       	cpi	r24, 0x7A	; 122
    1942:	91 05       	cpc	r25, r1
    1944:	09 f4       	brne	.+2      	; 0x1948 <handle_internal_commands+0x88>
    1946:	29 c1       	rjmp	.+594    	; 0x1b9a <handle_internal_commands+0x2da>
    1948:	2d 81       	ldd	r18, Y+5	; 0x05
    194a:	3e 81       	ldd	r19, Y+6	; 0x06
    194c:	23 37       	cpi	r18, 0x73	; 115
    194e:	31 05       	cpc	r19, r1
    1950:	09 f4       	brne	.+2      	; 0x1954 <handle_internal_commands+0x94>
    1952:	3e c0       	rjmp	.+124    	; 0x19d0 <handle_internal_commands+0x110>
    1954:	2b c1       	rjmp	.+598    	; 0x1bac <handle_internal_commands+0x2ec>
	case 'a':
		/* set partner primary+secondary address */
		stringToTwoUchars((char*) (&(buf[2])), &val, &val1);
    1956:	81 ee       	ldi	r24, 0xE1	; 225
    1958:	96 e0       	ldi	r25, 0x06	; 6
    195a:	ae 01       	movw	r20, r28
    195c:	4e 5f       	subi	r20, 0xFE	; 254
    195e:	5f 4f       	sbci	r21, 0xFF	; 255
    1960:	9e 01       	movw	r18, r28
    1962:	2f 5f       	subi	r18, 0xFF	; 255
    1964:	3f 4f       	sbci	r19, 0xFF	; 255
    1966:	b9 01       	movw	r22, r18
    1968:	0e 94 1e 0c 	call	0x183c	; 0x183c <stringToTwoUchars>
		sprintf(buf, "Set partner address, primary: %u , secondary: %u\n\r",
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	48 2f       	mov	r20, r24
    1976:	50 e0       	ldi	r21, 0x00	; 0
    1978:	8d b7       	in	r24, 0x3d	; 61
    197a:	9e b7       	in	r25, 0x3e	; 62
    197c:	08 97       	sbiw	r24, 0x08	; 8
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	9e bf       	out	0x3e, r25	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	8d bf       	out	0x3d, r24	; 61
    1988:	ed b7       	in	r30, 0x3d	; 61
    198a:	fe b7       	in	r31, 0x3e	; 62
    198c:	31 96       	adiw	r30, 0x01	; 1
    198e:	8f ed       	ldi	r24, 0xDF	; 223
    1990:	96 e0       	ldi	r25, 0x06	; 6
    1992:	91 83       	std	Z+1, r25	; 0x01
    1994:	80 83       	st	Z, r24
    1996:	8e e3       	ldi	r24, 0x3E	; 62
    1998:	92 e0       	ldi	r25, 0x02	; 2
    199a:	93 83       	std	Z+3, r25	; 0x03
    199c:	82 83       	std	Z+2, r24	; 0x02
    199e:	35 83       	std	Z+5, r19	; 0x05
    19a0:	24 83       	std	Z+4, r18	; 0x04
    19a2:	57 83       	std	Z+7, r21	; 0x07
    19a4:	46 83       	std	Z+6, r20	; 0x06
    19a6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <sprintf>
    19aa:	2d b7       	in	r18, 0x3d	; 61
    19ac:	3e b7       	in	r19, 0x3e	; 62
    19ae:	28 5f       	subi	r18, 0xF8	; 248
    19b0:	3f 4f       	sbci	r19, 0xFF	; 255
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	3e bf       	out	0x3e, r19	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	2d bf       	out	0x3d, r18	; 61
				val, val1);
		uart_puts(buf);
    19bc:	8f ed       	ldi	r24, 0xDF	; 223
    19be:	96 e0       	ldi	r25, 0x06	; 6
    19c0:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
		gpib_set_partner_address(val, val1);
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	9a 81       	ldd	r25, Y+2	; 0x02
    19c8:	69 2f       	mov	r22, r25
    19ca:	0e 94 0f 0b 	call	0x161e	; 0x161e <gpib_set_partner_address>
    19ce:	f4 c0       	rjmp	.+488    	; 0x1bb8 <handle_internal_commands+0x2f8>
		break;
	case 's':
		/* set partner secondary address */
		val = atoi((char*) (&(buf[2])));
    19d0:	81 ee       	ldi	r24, 0xE1	; 225
    19d2:	96 e0       	ldi	r25, 0x06	; 6
    19d4:	0e 94 72 00 	call	0xe4	; 0xe4 <atoi>
    19d8:	89 83       	std	Y+1, r24	; 0x01
		sprintf(buf, "Set partner secondary address to %u\n\r", val);
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <handle_internal_commands+0x122>
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <handle_internal_commands+0x124>
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <handle_internal_commands+0x126>
    19e6:	ed b7       	in	r30, 0x3d	; 61
    19e8:	fe b7       	in	r31, 0x3e	; 62
    19ea:	31 96       	adiw	r30, 0x01	; 1
    19ec:	8f ed       	ldi	r24, 0xDF	; 223
    19ee:	96 e0       	ldi	r25, 0x06	; 6
    19f0:	91 83       	std	Z+1, r25	; 0x01
    19f2:	80 83       	st	Z, r24
    19f4:	81 e7       	ldi	r24, 0x71	; 113
    19f6:	92 e0       	ldi	r25, 0x02	; 2
    19f8:	93 83       	std	Z+3, r25	; 0x03
    19fa:	82 83       	std	Z+2, r24	; 0x02
    19fc:	35 83       	std	Z+5, r19	; 0x05
    19fe:	24 83       	std	Z+4, r18	; 0x04
    1a00:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <sprintf>
    1a04:	8d b7       	in	r24, 0x3d	; 61
    1a06:	9e b7       	in	r25, 0x3e	; 62
    1a08:	06 96       	adiw	r24, 0x06	; 6
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	9e bf       	out	0x3e, r25	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	8d bf       	out	0x3d, r24	; 61
		uart_puts(buf);
    1a14:	8f ed       	ldi	r24, 0xDF	; 223
    1a16:	96 e0       	ldi	r25, 0x06	; 6
    1a18:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
		gpib_set_partner_secondary(val);
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	0e 94 21 0b 	call	0x1642	; 0x1642 <gpib_set_partner_secondary>
    1a22:	ca c0       	rjmp	.+404    	; 0x1bb8 <handle_internal_commands+0x2f8>
		break;
	case '+':
		/* add device */
		stringToTwoUchars((char*) (&(buf[2])), &val, &val1);
    1a24:	81 ee       	ldi	r24, 0xE1	; 225
    1a26:	96 e0       	ldi	r25, 0x06	; 6
    1a28:	ae 01       	movw	r20, r28
    1a2a:	4e 5f       	subi	r20, 0xFE	; 254
    1a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a2e:	9e 01       	movw	r18, r28
    1a30:	2f 5f       	subi	r18, 0xFF	; 255
    1a32:	3f 4f       	sbci	r19, 0xFF	; 255
    1a34:	b9 01       	movw	r22, r18
    1a36:	0e 94 1e 0c 	call	0x183c	; 0x183c <stringToTwoUchars>
		sprintf(buf, "Add device, primary: %u , secondary: %u\n\r", val, val1);
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	48 2f       	mov	r20, r24
    1a44:	50 e0       	ldi	r21, 0x00	; 0
    1a46:	8d b7       	in	r24, 0x3d	; 61
    1a48:	9e b7       	in	r25, 0x3e	; 62
    1a4a:	08 97       	sbiw	r24, 0x08	; 8
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	9e bf       	out	0x3e, r25	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	8d bf       	out	0x3d, r24	; 61
    1a56:	ed b7       	in	r30, 0x3d	; 61
    1a58:	fe b7       	in	r31, 0x3e	; 62
    1a5a:	31 96       	adiw	r30, 0x01	; 1
    1a5c:	8f ed       	ldi	r24, 0xDF	; 223
    1a5e:	96 e0       	ldi	r25, 0x06	; 6
    1a60:	91 83       	std	Z+1, r25	; 0x01
    1a62:	80 83       	st	Z, r24
    1a64:	87 e9       	ldi	r24, 0x97	; 151
    1a66:	92 e0       	ldi	r25, 0x02	; 2
    1a68:	93 83       	std	Z+3, r25	; 0x03
    1a6a:	82 83       	std	Z+2, r24	; 0x02
    1a6c:	35 83       	std	Z+5, r19	; 0x05
    1a6e:	24 83       	std	Z+4, r18	; 0x04
    1a70:	57 83       	std	Z+7, r21	; 0x07
    1a72:	46 83       	std	Z+6, r20	; 0x06
    1a74:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <sprintf>
    1a78:	2d b7       	in	r18, 0x3d	; 61
    1a7a:	3e b7       	in	r19, 0x3e	; 62
    1a7c:	28 5f       	subi	r18, 0xF8	; 248
    1a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	3e bf       	out	0x3e, r19	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	2d bf       	out	0x3d, r18	; 61
		uart_puts(buf);
    1a8a:	8f ed       	ldi	r24, 0xDF	; 223
    1a8c:	96 e0       	ldi	r25, 0x06	; 6
    1a8e:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
		gpib_add_partner_address(val, val1);
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	9a 81       	ldd	r25, Y+2	; 0x02
    1a96:	69 2f       	mov	r22, r25
    1a98:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <gpib_add_partner_address>
    1a9c:	8d c0       	rjmp	.+282    	; 0x1bb8 <handle_internal_commands+0x2f8>
		break;
	case '-':
		/* add device */
		stringToTwoUchars((char*) (&(buf[2])), &val, &val1);
    1a9e:	81 ee       	ldi	r24, 0xE1	; 225
    1aa0:	96 e0       	ldi	r25, 0x06	; 6
    1aa2:	ae 01       	movw	r20, r28
    1aa4:	4e 5f       	subi	r20, 0xFE	; 254
    1aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa8:	9e 01       	movw	r18, r28
    1aaa:	2f 5f       	subi	r18, 0xFF	; 255
    1aac:	3f 4f       	sbci	r19, 0xFF	; 255
    1aae:	b9 01       	movw	r22, r18
    1ab0:	0e 94 1e 0c 	call	0x183c	; 0x183c <stringToTwoUchars>
		sprintf(buf, "Remove device, primary: %u , secondary: %u\n\r", val,
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	48 2f       	mov	r20, r24
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	8d b7       	in	r24, 0x3d	; 61
    1ac2:	9e b7       	in	r25, 0x3e	; 62
    1ac4:	08 97       	sbiw	r24, 0x08	; 8
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	9e bf       	out	0x3e, r25	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	8d bf       	out	0x3d, r24	; 61
    1ad0:	ed b7       	in	r30, 0x3d	; 61
    1ad2:	fe b7       	in	r31, 0x3e	; 62
    1ad4:	31 96       	adiw	r30, 0x01	; 1
    1ad6:	8f ed       	ldi	r24, 0xDF	; 223
    1ad8:	96 e0       	ldi	r25, 0x06	; 6
    1ada:	91 83       	std	Z+1, r25	; 0x01
    1adc:	80 83       	st	Z, r24
    1ade:	81 ec       	ldi	r24, 0xC1	; 193
    1ae0:	92 e0       	ldi	r25, 0x02	; 2
    1ae2:	93 83       	std	Z+3, r25	; 0x03
    1ae4:	82 83       	std	Z+2, r24	; 0x02
    1ae6:	35 83       	std	Z+5, r19	; 0x05
    1ae8:	24 83       	std	Z+4, r18	; 0x04
    1aea:	57 83       	std	Z+7, r21	; 0x07
    1aec:	46 83       	std	Z+6, r20	; 0x06
    1aee:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <sprintf>
    1af2:	2d b7       	in	r18, 0x3d	; 61
    1af4:	3e b7       	in	r19, 0x3e	; 62
    1af6:	28 5f       	subi	r18, 0xF8	; 248
    1af8:	3f 4f       	sbci	r19, 0xFF	; 255
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	3e bf       	out	0x3e, r19	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	2d bf       	out	0x3d, r18	; 61
				val1);
		uart_puts(buf);
    1b04:	8f ed       	ldi	r24, 0xDF	; 223
    1b06:	96 e0       	ldi	r25, 0x06	; 6
    1b08:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
		gpib_remove_partner_address(val, val1);
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b10:	69 2f       	mov	r22, r25
    1b12:	0e 94 c8 0b 	call	0x1790	; 0x1790 <gpib_remove_partner_address>
    1b16:	50 c0       	rjmp	.+160    	; 0x1bb8 <handle_internal_commands+0x2f8>
		break;
	case 'x':
		/* Xon/Xoff flow control */
		if (!xonXoffMode) {
    1b18:	80 91 d1 05 	lds	r24, 0x05D1
    1b1c:	88 23       	and	r24, r24
    1b1e:	59 f4       	brne	.+22     	; 0x1b36 <handle_internal_commands+0x276>
			xonXoffMode = 1;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	80 93 d1 05 	sts	0x05D1, r24
			uart_set_flow_control(FLOWCONTROL_XONXOFF);
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	0e 94 2f 11 	call	0x225e	; 0x225e <uart_set_flow_control>
			uart_puts("xon/xoff flowcontrol on\n\r");
    1b2c:	8e ee       	ldi	r24, 0xEE	; 238
    1b2e:	92 e0       	ldi	r25, 0x02	; 2
    1b30:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
    1b34:	41 c0       	rjmp	.+130    	; 0x1bb8 <handle_internal_commands+0x2f8>
		} else {
			xonXoffMode = 0;
    1b36:	10 92 d1 05 	sts	0x05D1, r1
			uart_set_flow_control(FLOWCONTROL_NONE);
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	0e 94 2f 11 	call	0x225e	; 0x225e <uart_set_flow_control>
			uart_puts("xon/xoff flowcontrol off\n\r");
    1b40:	88 e0       	ldi	r24, 0x08	; 8
    1b42:	93 e0       	ldi	r25, 0x03	; 3
    1b44:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
    1b48:	37 c0       	rjmp	.+110    	; 0x1bb8 <handle_internal_commands+0x2f8>
		}
		break;
	case 'h':
		/* print some usage infos */
		printHelp();
    1b4a:	0e 94 a6 10 	call	0x214c	; 0x214c <printHelp>
    1b4e:	34 c0       	rjmp	.+104    	; 0x1bb8 <handle_internal_commands+0x2f8>
		break;
	case 'i':
		gpib_info();
    1b50:	0e 94 80 08 	call	0x1100	; 0x1100 <gpib_info>
		sprintf(buf, "Xon/Xoff flow control: %u\n\r", xonXoffMode);
    1b54:	80 91 d1 05 	lds	r24, 0x05D1
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <handle_internal_commands+0x29e>
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <handle_internal_commands+0x2a0>
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <handle_internal_commands+0x2a2>
    1b62:	ed b7       	in	r30, 0x3d	; 61
    1b64:	fe b7       	in	r31, 0x3e	; 62
    1b66:	31 96       	adiw	r30, 0x01	; 1
    1b68:	8f ed       	ldi	r24, 0xDF	; 223
    1b6a:	96 e0       	ldi	r25, 0x06	; 6
    1b6c:	91 83       	std	Z+1, r25	; 0x01
    1b6e:	80 83       	st	Z, r24
    1b70:	83 e2       	ldi	r24, 0x23	; 35
    1b72:	93 e0       	ldi	r25, 0x03	; 3
    1b74:	93 83       	std	Z+3, r25	; 0x03
    1b76:	82 83       	std	Z+2, r24	; 0x02
    1b78:	35 83       	std	Z+5, r19	; 0x05
    1b7a:	24 83       	std	Z+4, r18	; 0x04
    1b7c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <sprintf>
    1b80:	8d b7       	in	r24, 0x3d	; 61
    1b82:	9e b7       	in	r25, 0x3e	; 62
    1b84:	06 96       	adiw	r24, 0x06	; 6
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	9e bf       	out	0x3e, r25	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	8d bf       	out	0x3d, r24	; 61
		uart_puts(buf);
    1b90:	8f ed       	ldi	r24, 0xDF	; 223
    1b92:	96 e0       	ldi	r25, 0x06	; 6
    1b94:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
    1b98:	0f c0       	rjmp	.+30     	; 0x1bb8 <handle_internal_commands+0x2f8>
		break;
	case 'z':
		uart_puts("arb\n\r");
    1b9a:	8f e3       	ldi	r24, 0x3F	; 63
    1b9c:	93 e0       	ldi	r25, 0x03	; 3
    1b9e:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
#ifdef ARB_TEST
		arb_ramp();
#endif
		uart_puts("arb done\n\r");
    1ba2:	85 e4       	ldi	r24, 0x45	; 69
    1ba4:	93 e0       	ldi	r25, 0x03	; 3
    1ba6:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
    1baa:	06 c0       	rjmp	.+12     	; 0x1bb8 <handle_internal_commands+0x2f8>
		break;
	default:
		uart_puts("unknown command\n\r");
    1bac:	80 e5       	ldi	r24, 0x50	; 80
    1bae:	93 e0       	ldi	r25, 0x03	; 3
    1bb0:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
		printHelp();
    1bb4:	0e 94 a6 10 	call	0x214c	; 0x214c <printHelp>
		break;
	}
}
    1bb8:	26 96       	adiw	r28, 0x06	; 6
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	f8 94       	cli
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	0f be       	out	0x3f, r0	; 63
    1bc2:	cd bf       	out	0x3d, r28	; 61
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <send_command>:
/**
 * Sends a command.
 *
 * Returns 1 if command is a query, 0 otherwise.
 */
uchar send_command(uchar *commandString) {
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    1bd2:	2b 97       	sbiw	r28, 0x0b	; 11
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	9b 87       	std	Y+11, r25	; 0x0b
    1be0:	8a 87       	std	Y+10, r24	; 0x0a
	uchar controlString[8];
	uchar is_query;

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
    1be2:	8f e5       	ldi	r24, 0x5F	; 95
    1be4:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1be6:	ce 01       	movw	r24, r28
    1be8:	02 96       	adiw	r24, 0x02	; 2
    1bea:	61 e0       	ldi	r22, 0x01	; 1
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    1bf2:	8f e3       	ldi	r24, 0x3F	; 63
    1bf4:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	02 96       	adiw	r24, 0x02	; 2
    1bfa:	61 e0       	ldi	r22, 0x01	; 1
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>

	// set device to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_partner_pad());
    1c02:	0e 94 2e 0b 	call	0x165c	; 0x165c <gpib_get_partner_pad>
    1c06:	80 5e       	subi	r24, 0xE0	; 224
    1c08:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	02 96       	adiw	r24, 0x02	; 2
    1c0e:	61 e0       	ldi	r22, 0x01	; 1
    1c10:	70 e0       	ldi	r23, 0x00	; 0
    1c12:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>
	// send secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
    1c16:	0e 94 37 0b 	call	0x166e	; 0x166e <gpib_get_partner_sad>
    1c1a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c1c:	51 f0       	breq	.+20     	; 0x1c32 <send_command+0x68>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
    1c1e:	0e 94 37 0b 	call	0x166e	; 0x166e <gpib_get_partner_sad>
    1c22:	80 66       	ori	r24, 0x60	; 96
    1c24:	8a 83       	std	Y+2, r24	; 0x02
		gpib_cmd(controlString, 1);
    1c26:	ce 01       	movw	r24, r28
    1c28:	02 96       	adiw	r24, 0x02	; 2
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	70 e0       	ldi	r23, 0x00	; 0
    1c2e:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>
	}

	// set myself (controller) to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_address());
    1c32:	0e 94 40 0b 	call	0x1680	; 0x1680 <gpib_get_address>
    1c36:	80 5c       	subi	r24, 0xC0	; 192
    1c38:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	02 96       	adiw	r24, 0x02	; 2
    1c3e:	61 e0       	ldi	r22, 0x01	; 1
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>
	//uart_puts("\n\rcommand: ");
	//uart_puts((char*) commandString);
	//uart_puts("\n\r");
	// gpib bus write
	// put out command to listeners
	gpib_write(commandString, 0);
    1c46:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c48:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	70 e0       	ldi	r23, 0x00	; 0
    1c4e:	0e 94 93 05 	call	0xb26	; 0xb26 <gpib_write>

	// check if query or command only
	if (strchr((char*) commandString, '?') != NULL) {
    1c52:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c54:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c56:	6f e3       	ldi	r22, 0x3F	; 63
    1c58:	70 e0       	ldi	r23, 0x00	; 0
    1c5a:	0e 94 95 00 	call	0x12a	; 0x12a <strchr>
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	19 f0       	breq	.+6      	; 0x1c68 <send_command+0x9e>
		//uart_puts("Query. Will check for answer.\n\r");
		is_query = 1;
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	01 c0       	rjmp	.+2      	; 0x1c6a <send_command+0xa0>
	} else {
		//uart_puts("Command only.\n\r");
		is_query = 0;
    1c68:	19 82       	std	Y+1, r1	; 0x01
	}
	return is_query;
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c6c:	2b 96       	adiw	r28, 0x0b	; 11
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <receiveAnswer>:

/**
 * Receives answer after command was sent.
 */
void receiveAnswer() {
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	2a 97       	sbiw	r28, 0x0a	; 10
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	uchar b, e;

	// UNT and UNL
	controlString[0] = G_CMD_UNT;
    1c92:	8f e5       	ldi	r24, 0x5F	; 95
    1c94:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1c96:	ce 01       	movw	r24, r28
    1c98:	02 96       	adiw	r24, 0x02	; 2
    1c9a:	61 e0       	ldi	r22, 0x01	; 1
    1c9c:	70 e0       	ldi	r23, 0x00	; 0
    1c9e:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    1ca2:	8f e3       	ldi	r24, 0x3F	; 63
    1ca4:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1ca6:	ce 01       	movw	r24, r28
    1ca8:	02 96       	adiw	r24, 0x02	; 2
    1caa:	61 e0       	ldi	r22, 0x01	; 1
    1cac:	70 e0       	ldi	r23, 0x00	; 0
    1cae:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>

	// set myself (controller) to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_address());
    1cb2:	0e 94 40 0b 	call	0x1680	; 0x1680 <gpib_get_address>
    1cb6:	80 5e       	subi	r24, 0xE0	; 224
    1cb8:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1cba:	ce 01       	movw	r24, r28
    1cbc:	02 96       	adiw	r24, 0x02	; 2
    1cbe:	61 e0       	ldi	r22, 0x01	; 1
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>

	// set device to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_partner_pad());
    1cc6:	0e 94 2e 0b 	call	0x165c	; 0x165c <gpib_get_partner_pad>
    1cca:	80 5c       	subi	r24, 0xC0	; 192
    1ccc:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1cce:	ce 01       	movw	r24, r28
    1cd0:	02 96       	adiw	r24, 0x02	; 2
    1cd2:	61 e0       	ldi	r22, 0x01	; 1
    1cd4:	70 e0       	ldi	r23, 0x00	; 0
    1cd6:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>
	// secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
    1cda:	0e 94 37 0b 	call	0x166e	; 0x166e <gpib_get_partner_sad>
    1cde:	8f 3f       	cpi	r24, 0xFF	; 255
    1ce0:	51 f0       	breq	.+20     	; 0x1cf6 <receiveAnswer+0x78>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
    1ce2:	0e 94 37 0b 	call	0x166e	; 0x166e <gpib_get_partner_sad>
    1ce6:	80 66       	ori	r24, 0x60	; 96
    1ce8:	8a 83       	std	Y+2, r24	; 0x02
		gpib_cmd(controlString, 1);
    1cea:	ce 01       	movw	r24, r28
    1cec:	02 96       	adiw	r24, 0x02	; 2
    1cee:	61 e0       	ldi	r22, 0x01	; 1
    1cf0:	70 e0       	ldi	r23, 0x00	; 0
    1cf2:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>
	}

	// read the answer until EOI is detected (then e becomes true)
	do {
		// gpib bus receive
		e = gpib_receive(&b);
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	0a 96       	adiw	r24, 0x0a	; 10
    1cfa:	0e 94 12 04 	call	0x824	; 0x824 <gpib_receive>
    1cfe:	89 83       	std	Y+1, r24	; 0x01
		// write out character
		uart_putc(b);
    1d00:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d02:	0e 94 98 12 	call	0x2530	; 0x2530 <uart_putc>
		//sprintf((char*)buf,"%02x - %c\n\r", b, b);
		//uart_puts((char*)buf);
	} while (!e);
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	88 23       	and	r24, r24
    1d0a:	a9 f3       	breq	.-22     	; 0x1cf6 <receiveAnswer+0x78>

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
    1d0c:	8f e5       	ldi	r24, 0x5F	; 95
    1d0e:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1d10:	ce 01       	movw	r24, r28
    1d12:	02 96       	adiw	r24, 0x02	; 2
    1d14:	61 e0       	ldi	r22, 0x01	; 1
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    1d1c:	8f e3       	ldi	r24, 0x3F	; 63
    1d1e:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1d20:	ce 01       	movw	r24, r28
    1d22:	02 96       	adiw	r24, 0x02	; 2
    1d24:	61 e0       	ldi	r22, 0x01	; 1
    1d26:	70 e0       	ldi	r23, 0x00	; 0
    1d28:	0e 94 ac 05 	call	0xb58	; 0xb58 <gpib_cmd>
}
    1d2c:	2a 96       	adiw	r28, 0x0a	; 10
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <srq_occured>:

/**
 * Check if a SRQ occured
 */
uchar srq_occured(int* old_time) {
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <srq_occured+0x6>
    1d44:	0f 92       	push	r0
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	9b 83       	std	Y+3, r25	; 0x03
    1d4c:	8a 83       	std	Y+2, r24	; 0x02
	uchar srq = 0;
    1d4e:	19 82       	std	Y+1, r1	; 0x01
	if (*old_time == 0) {
    1d50:	ea 81       	ldd	r30, Y+2	; 0x02
    1d52:	fb 81       	ldd	r31, Y+3	; 0x03
    1d54:	80 81       	ld	r24, Z
    1d56:	91 81       	ldd	r25, Z+1	; 0x01
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	49 f4       	brne	.+18     	; 0x1d6e <srq_occured+0x30>
		// old_time value initialization on first call with value s
		*old_time = s;
    1d5c:	80 91 30 07 	lds	r24, 0x0730
    1d60:	88 2f       	mov	r24, r24
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	ea 81       	ldd	r30, Y+2	; 0x02
    1d66:	fb 81       	ldd	r31, Y+3	; 0x03
    1d68:	91 83       	std	Z+1, r25	; 0x01
    1d6a:	80 83       	st	Z, r24
    1d6c:	1e c0       	rjmp	.+60     	; 0x1daa <srq_occured+0x6c>
	} else {
		if (s > *old_time) {
    1d6e:	80 91 30 07 	lds	r24, 0x0730
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	ea 81       	ldd	r30, Y+2	; 0x02
    1d78:	fb 81       	ldd	r31, Y+3	; 0x03
    1d7a:	80 81       	ld	r24, Z
    1d7c:	91 81       	ldd	r25, Z+1	; 0x01
    1d7e:	82 17       	cp	r24, r18
    1d80:	93 07       	cpc	r25, r19
    1d82:	9c f4       	brge	.+38     	; 0x1daa <srq_occured+0x6c>
			// some time has passed - check if srq was set
			srq = bit_is_clear(PIND, G_SRQ);
    1d84:	e0 e3       	ldi	r30, 0x30	; 48
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	88 2f       	mov	r24, r24
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	80 74       	andi	r24, 0x40	; 64
    1d90:	90 70       	andi	r25, 0x00	; 0
    1d92:	19 82       	std	Y+1, r1	; 0x01
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	11 f4       	brne	.+4      	; 0x1d9c <srq_occured+0x5e>
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	89 83       	std	Y+1, r24	; 0x01
			if (srq)
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	88 23       	and	r24, r24
    1da0:	21 f0       	breq	.+8      	; 0x1daa <srq_occured+0x6c>
				uart_puts("\n\rSRQ detected.\n\r");
    1da2:	82 e6       	ldi	r24, 0x62	; 98
    1da4:	93 e0       	ldi	r25, 0x03	; 3
    1da6:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
		}
	}
	return srq;
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <handle_srq>:

/**
 * Handles SRQs by doing serial poll
 *
 */
uchar handle_srq(uchar *buf, int *buf_ptr) {
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	28 97       	sbiw	r28, 0x08	; 8
    1dc2:	0f b6       	in	r0, 0x3f	; 63
    1dc4:	f8 94       	cli
    1dc6:	de bf       	out	0x3e, r29	; 62
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	cd bf       	out	0x3d, r28	; 61
    1dcc:	9d 83       	std	Y+5, r25	; 0x05
    1dce:	8c 83       	std	Y+4, r24	; 0x04
    1dd0:	7f 83       	std	Y+7, r23	; 0x07
    1dd2:	6e 83       	std	Y+6, r22	; 0x06
	uchar command_ready = 0;
    1dd4:	19 82       	std	Y+1, r1	; 0x01
	uint8_t primary, secondary;

	if (!gpib_serial_poll(&primary, &secondary)) {
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	02 96       	adiw	r24, 0x02	; 2
    1dda:	9e 01       	movw	r18, r28
    1ddc:	2d 5f       	subi	r18, 0xFD	; 253
    1dde:	3f 4f       	sbci	r19, 0xFF	; 255
    1de0:	b9 01       	movw	r22, r18
    1de2:	0e 94 d7 09 	call	0x13ae	; 0x13ae <gpib_serial_poll>
    1de6:	88 23       	and	r24, r24
    1de8:	69 f4       	brne	.+26     	; 0x1e04 <handle_srq+0x4c>
		uart_puts(
    1dea:	84 e7       	ldi	r24, 0x74	; 116
    1dec:	93 e0       	ldi	r25, 0x03	; 3
    1dee:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
				"\n\rSRQ emitter is not in list of known devices. SRQ Ignored.\n\r");
		uart_puts("\n\rSRQs are disabled now.\n\r");
    1df2:	82 eb       	ldi	r24, 0xB2	; 178
    1df4:	93 e0       	ldi	r25, 0x03	; 3
    1df6:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
		srq_enabled = 0;
    1dfa:	10 92 bc 05 	sts	0x05BC, r1
		return command_ready;
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	88 87       	std	Y+8, r24	; 0x08
    1e02:	3a c0       	rjmp	.+116    	; 0x1e78 <handle_srq+0xc0>
	}
	gpib_set_partner_address(primary, secondary);
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	9b 81       	ldd	r25, Y+3	; 0x03
    1e08:	69 2f       	mov	r22, r25
    1e0a:	0e 94 0f 0b 	call	0x161e	; 0x161e <gpib_set_partner_address>

	if (gpib_get_flavour() == FLAVOUR_TEK) {
    1e0e:	0e 94 56 0b 	call	0x16ac	; 0x16ac <gpib_get_flavour>
    1e12:	81 30       	cpi	r24, 0x01	; 1
    1e14:	79 f5       	brne	.+94     	; 0x1e74 <handle_srq+0xbc>
		// Tek: check status for reason
		buf[0] = 'E';
    1e16:	ec 81       	ldd	r30, Y+4	; 0x04
    1e18:	fd 81       	ldd	r31, Y+5	; 0x05
    1e1a:	85 e4       	ldi	r24, 0x45	; 69
    1e1c:	80 83       	st	Z, r24
		buf[1] = 'V';
    1e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e20:	9d 81       	ldd	r25, Y+5	; 0x05
    1e22:	fc 01       	movw	r30, r24
    1e24:	31 96       	adiw	r30, 0x01	; 1
    1e26:	86 e5       	ldi	r24, 0x56	; 86
    1e28:	80 83       	st	Z, r24
		buf[2] = 'E';
    1e2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e2e:	fc 01       	movw	r30, r24
    1e30:	32 96       	adiw	r30, 0x02	; 2
    1e32:	85 e4       	ldi	r24, 0x45	; 69
    1e34:	80 83       	st	Z, r24
		buf[3] = 'N';
    1e36:	8c 81       	ldd	r24, Y+4	; 0x04
    1e38:	9d 81       	ldd	r25, Y+5	; 0x05
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	33 96       	adiw	r30, 0x03	; 3
    1e3e:	8e e4       	ldi	r24, 0x4E	; 78
    1e40:	80 83       	st	Z, r24
		buf[4] = 'T';
    1e42:	8c 81       	ldd	r24, Y+4	; 0x04
    1e44:	9d 81       	ldd	r25, Y+5	; 0x05
    1e46:	fc 01       	movw	r30, r24
    1e48:	34 96       	adiw	r30, 0x04	; 4
    1e4a:	84 e5       	ldi	r24, 0x54	; 84
    1e4c:	80 83       	st	Z, r24
		buf[5] = '?';
    1e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e50:	9d 81       	ldd	r25, Y+5	; 0x05
    1e52:	fc 01       	movw	r30, r24
    1e54:	35 96       	adiw	r30, 0x05	; 5
    1e56:	8f e3       	ldi	r24, 0x3F	; 63
    1e58:	80 83       	st	Z, r24
		buf[6] = '\0';
    1e5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5e:	fc 01       	movw	r30, r24
    1e60:	36 96       	adiw	r30, 0x06	; 6
    1e62:	10 82       	st	Z, r1
		*buf_ptr = 6;
    1e64:	ee 81       	ldd	r30, Y+6	; 0x06
    1e66:	ff 81       	ldd	r31, Y+7	; 0x07
    1e68:	86 e0       	ldi	r24, 0x06	; 6
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	91 83       	std	Z+1, r25	; 0x01
    1e6e:	80 83       	st	Z, r24
		command_ready = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	89 83       	std	Y+1, r24	; 0x01
	}
	return command_ready;
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	88 87       	std	Y+8, r24	; 0x08
    1e78:	88 85       	ldd	r24, Y+8	; 0x08
}
    1e7a:	28 96       	adiw	r28, 0x08	; 8
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	cf 91       	pop	r28
    1e88:	df 91       	pop	r29
    1e8a:	08 95       	ret

00001e8c <main>:
 * \brief Implementation of GPIB controller. Reads a command from RS232, sends it via bus.
 * If The command contains a '?', an answer from the device is expected and read in. The
 * answer then is printed out. If an SRQ occured, a serial poll is initiated.
 * 
 */
int main(void) {
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <main+0x6>
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <main+0x8>
    1e94:	0f 92       	push	r0
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
	int old_time = 0;
    1e9a:	1d 82       	std	Y+5, r1	; 0x05
    1e9c:	1c 82       	std	Y+4, r1	; 0x04
	uchar is_query = 0;
    1e9e:	1b 82       	std	Y+3, r1	; 0x03
	uchar command_ready = 0;
    1ea0:	1a 82       	std	Y+2, r1	; 0x02
	uchar do_prompt = 1;
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	89 83       	std	Y+1, r24	; 0x01

	/*
	 *  Initialize UART library, pass baudrate and avr cpu clock 
	 *  with the macro UART_BAUD_SELECT()
	 */DI();
    1ea6:	8c e0       	ldi	r24, 0x0C	; 12
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	0e 94 0e 12 	call	0x241c	; 0x241c <uart_init>

	/*
	 * now enable interrupt, since UART and TIMER library is interrupt controlled
	 */sei();
    1eae:	78 94       	sei

	/** print some usage infos */
	printHelp();
    1eb0:	0e 94 a6 10 	call	0x214c	; 0x214c <printHelp>
	/*
	 * WRITE: Controller talks and listens
	 */

	// init timer for timeout detection
	timer16_init();
    1eb4:	0e 94 0f 11 	call	0x221e	; 0x221e <timer16_init>

	// init gpib lines
	gpib_init();
    1eb8:	0e 94 bb 03 	call	0x776	; 0x776 <gpib_init>
	// init controller part - assign bus 
	gpib_controller_assign(0x00);
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <gpib_controller_assign>
	 * 3. if command was a query, read the answer from device (become listener and set device to talker)
	 * 	4. check if SRQ occured and handle that
	 */
	for (;;) {

		if (do_prompt) {
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	88 23       	and	r24, r24
    1ec6:	29 f0       	breq	.+10     	; 0x1ed2 <main+0x46>
			uart_puts("> ");
    1ec8:	8d ec       	ldi	r24, 0xCD	; 205
    1eca:	93 e0       	ldi	r25, 0x03	; 3
    1ecc:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
			do_prompt = 0;
    1ed0:	19 82       	std	Y+1, r1	; 0x01
		}
		// input processing via rs232
		// command_ready may already been set by SRQ that occurred before
		if (!command_ready)
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	88 23       	and	r24, r24
    1ed6:	19 f4       	brne	.+6      	; 0x1ede <main+0x52>
			command_ready = input_process();
    1ed8:	0e 94 75 10 	call	0x20ea	; 0x20ea <input_process>
    1edc:	8a 83       	std	Y+2, r24	; 0x02

		if (command_ready) {
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	88 23       	and	r24, r24
    1ee2:	21 f0       	breq	.+8      	; 0x1eec <main+0x60>
			uart_puts("\n\r");
    1ee4:	80 ed       	ldi	r24, 0xD0	; 208
    1ee6:	93 e0       	ldi	r25, 0x03	; 3
    1ee8:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
		}

		// check for internal commands
		if (command_ready && buf[0] == '.') {
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	88 23       	and	r24, r24
    1ef0:	81 f0       	breq	.+32     	; 0x1f12 <main+0x86>
    1ef2:	80 91 df 06 	lds	r24, 0x06DF
    1ef6:	8e 32       	cpi	r24, 0x2E	; 46
    1ef8:	61 f4       	brne	.+24     	; 0x1f12 <main+0x86>
			// all internal cmds start with a '.'
			//uart_puts("\n\rInternal command: ");
			//uart_puts((char*) buf);
			//uart_puts("\n\r");
			handle_internal_commands(buf);
    1efa:	8f ed       	ldi	r24, 0xDF	; 223
    1efc:	96 e0       	ldi	r25, 0x06	; 6
    1efe:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <handle_internal_commands>
			// reset local vars for command string reading
			buf_ptr = 0;
    1f02:	10 92 d0 05 	sts	0x05D0, r1
    1f06:	10 92 cf 05 	sts	0x05CF, r1
			command_ready = 0;
    1f0a:	1a 82       	std	Y+2, r1	; 0x02
			do_prompt = 1;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	89 83       	std	Y+1, r24	; 0x01
			is_query = 0;
    1f10:	1b 82       	std	Y+3, r1	; 0x03
		}

		// GPIB command. Check if a partner was defined.
		if (command_ready && (gpib_get_partner_pad() == ADDRESS_NOT_SET)) {
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	88 23       	and	r24, r24
    1f16:	79 f0       	breq	.+30     	; 0x1f36 <main+0xaa>
    1f18:	0e 94 2e 0b 	call	0x165c	; 0x165c <gpib_get_partner_pad>
    1f1c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f1e:	59 f4       	brne	.+22     	; 0x1f36 <main+0xaa>
			uart_puts("Device address is not set. Can not send command.\n\r");
    1f20:	83 ed       	ldi	r24, 0xD3	; 211
    1f22:	93 e0       	ldi	r25, 0x03	; 3
    1f24:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
			// reset local vars for command string reading
			command_ready = 0;
    1f28:	1a 82       	std	Y+2, r1	; 0x02
			buf_ptr = 0;
    1f2a:	10 92 d0 05 	sts	0x05D0, r1
    1f2e:	10 92 cf 05 	sts	0x05CF, r1
			do_prompt = 1;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	89 83       	std	Y+1, r24	; 0x01
		}

		// GPIB command and valid partner. Send the command.
		if (command_ready) {
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	88 23       	and	r24, r24
    1f3a:	61 f0       	breq	.+24     	; 0x1f54 <main+0xc8>
			//uart_puts("\n\rGPIB command: ");
			//uart_puts((char*) buf);
			//uart_puts("\n\r");
			is_query = send_command(buf);
    1f3c:	8f ed       	ldi	r24, 0xDF	; 223
    1f3e:	96 e0       	ldi	r25, 0x06	; 6
    1f40:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <send_command>
    1f44:	8b 83       	std	Y+3, r24	; 0x03
			// reset local vars for command string reading
			command_ready = 0;
    1f46:	1a 82       	std	Y+2, r1	; 0x02
			buf_ptr = 0;
    1f48:	10 92 d0 05 	sts	0x05D0, r1
    1f4c:	10 92 cf 05 	sts	0x05CF, r1
			do_prompt = 1;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	89 83       	std	Y+1, r24	; 0x01
		}

		// if we sent a query, read the answer
		if (is_query) {
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	88 23       	and	r24, r24
    1f58:	49 f0       	breq	.+18     	; 0x1f6c <main+0xe0>
			receiveAnswer();
    1f5a:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <receiveAnswer>
			// reset for next command
			is_query = 0;
    1f5e:	1b 82       	std	Y+3, r1	; 0x03
			// some devices do not send cr,lf at command end, so create it always itself
			uart_puts("\n\r");
    1f60:	80 ed       	ldi	r24, 0xD0	; 208
    1f62:	93 e0       	ldi	r25, 0x03	; 3
    1f64:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
			do_prompt = 1;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	89 83       	std	Y+1, r24	; 0x01
		}

		// SRQ detection - do this every time when time value s has changed
		// s is incremented every second. So we check once a second.
		if (srq_enabled && srq_occured(&old_time)) {
    1f6c:	80 91 bc 05 	lds	r24, 0x05BC
    1f70:	88 23       	and	r24, r24
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <main+0xea>
    1f74:	a6 cf       	rjmp	.-180    	; 0x1ec2 <main+0x36>
    1f76:	ce 01       	movw	r24, r28
    1f78:	04 96       	adiw	r24, 0x04	; 4
    1f7a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <srq_occured>
    1f7e:	88 23       	and	r24, r24
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <main+0xf8>
    1f82:	9f cf       	rjmp	.-194    	; 0x1ec2 <main+0x36>
			command_ready = handle_srq(buf, &buf_ptr);
    1f84:	8f ed       	ldi	r24, 0xDF	; 223
    1f86:	96 e0       	ldi	r25, 0x06	; 6
    1f88:	2f ec       	ldi	r18, 0xCF	; 207
    1f8a:	35 e0       	ldi	r19, 0x05	; 5
    1f8c:	b9 01       	movw	r22, r18
    1f8e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <handle_srq>
    1f92:	8a 83       	std	Y+2, r24	; 0x02
    1f94:	96 cf       	rjmp	.-212    	; 0x1ec2 <main+0x36>

00001f96 <input_char>:

/**
 * Reads in character into parameter c. Checks for errors and prints them out.
 * Returns 0 if there is no char to read, 1 if there was a char read in.
 */
uchar input_char(uchar *ch) {
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	00 d0       	rcall	.+0      	; 0x1f9c <input_char+0x6>
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <input_char+0x8>
    1f9e:	0f 92       	push	r0
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	9c 83       	std	Y+4, r25	; 0x04
    1fa6:	8b 83       	std	Y+3, r24	; 0x03
	 * uart_getc() returns in the lower byte the received character and
	 * in the higher byte (bitmask) the last receive error
	 * UART_NO_DATA is returned when no data is available.
	 *
	 */
	c = uart_getc();
    1fa8:	0e 94 42 12 	call	0x2484	; 0x2484 <uart_getc>
    1fac:	9a 83       	std	Y+2, r25	; 0x02
    1fae:	89 83       	std	Y+1, r24	; 0x01
	if (c & UART_NO_DATA) {
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb4:	80 70       	andi	r24, 0x00	; 0
    1fb6:	91 70       	andi	r25, 0x01	; 1
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	11 f0       	breq	.+4      	; 0x1fc0 <input_char+0x2a>
		// no data available from UART
		return 0;
    1fbc:	1d 82       	std	Y+5, r1	; 0x05
    1fbe:	24 c0       	rjmp	.+72     	; 0x2008 <input_char+0x72>
	}
	// make uchar from character in int value
	*ch = (uchar) c;
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	eb 81       	ldd	r30, Y+3	; 0x03
    1fc4:	fc 81       	ldd	r31, Y+4	; 0x04
    1fc6:	80 83       	st	Z, r24

	/*
	 * new data available from UART
	 * check for Frame or Overrun error
	 */
	if (c & UART_FRAME_ERROR) {
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	80 70       	andi	r24, 0x00	; 0
    1fce:	98 70       	andi	r25, 0x08	; 8
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	21 f0       	breq	.+8      	; 0x1fdc <input_char+0x46>
		/* Framing Error detected, i.e no stop bit detected */
		uart_puts_P("UART Frame Error: ");
    1fd4:	81 e8       	ldi	r24, 0x81	; 129
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <uart_puts_p>
	}
	if (c & UART_OVERRUN_ERROR) {
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe0:	80 70       	andi	r24, 0x00	; 0
    1fe2:	94 70       	andi	r25, 0x04	; 4
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	21 f0       	breq	.+8      	; 0x1ff0 <input_char+0x5a>
		/*
		 * Overrun, a character already present in the UART UDR register was
		 * not read by the interrupt handler before the next character arrived,
		 * one or more received characters have been dropped
		 */
		uart_puts_P("UART Overrun Error: ");
    1fe8:	8c e6       	ldi	r24, 0x6C	; 108
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <uart_puts_p>
	}
	if (c & UART_BUFFER_OVERFLOW) {
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff4:	80 70       	andi	r24, 0x00	; 0
    1ff6:	92 70       	andi	r25, 0x02	; 2
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	21 f0       	breq	.+8      	; 0x2004 <input_char+0x6e>
		/*
		 * We are not reading the receive buffer fast enough,
		 * one or more received character have been dropped
		 */
		uart_puts_P("Buffer overflow error: ");
    1ffc:	84 e5       	ldi	r24, 0x54	; 84
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <uart_puts_p>
	}
	return 1;
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	8d 83       	std	Y+5, r24	; 0x05
    2008:	8d 81       	ldd	r24, Y+5	; 0x05
}
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <process_char>:
 * a) xon/xoff mode forward buffer to GPIB
 * b) no flow control: prints error message that input buffer is full.
 *
 * Returns 1 if command end is detected, 0 otherwise.
 */
uchar process_char(uchar ch) {
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	00 d0       	rcall	.+0      	; 0x2020 <process_char+0x6>
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	8a 83       	std	Y+2, r24	; 0x02
	uchar ret = 0;
    2026:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * send received character back depending on global flag
	 */
	if (rs232_remote_echo) {
    2028:	80 91 bb 05 	lds	r24, 0x05BB
    202c:	88 23       	and	r24, r24
    202e:	19 f0       	breq	.+6      	; 0x2036 <process_char+0x1c>
		uart_putc((unsigned char) ch);
    2030:	8a 81       	ldd	r24, Y+2	; 0x02
    2032:	0e 94 98 12 	call	0x2530	; 0x2530 <uart_putc>
	}

	// if input buffer is not full, add char
	if (buf_ptr < COMMAND_INPUT_BUFFER_SIZE - 1) {
    2036:	80 91 cf 05 	lds	r24, 0x05CF
    203a:	90 91 d0 05 	lds	r25, 0x05D0
    203e:	8f 34       	cpi	r24, 0x4F	; 79
    2040:	91 05       	cpc	r25, r1
    2042:	bc f4       	brge	.+46     	; 0x2072 <process_char+0x58>
		buf[buf_ptr++] = ch;
    2044:	20 91 cf 05 	lds	r18, 0x05CF
    2048:	30 91 d0 05 	lds	r19, 0x05D0
    204c:	f9 01       	movw	r30, r18
    204e:	e1 52       	subi	r30, 0x21	; 33
    2050:	f9 4f       	sbci	r31, 0xF9	; 249
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	80 83       	st	Z, r24
    2056:	c9 01       	movw	r24, r18
    2058:	01 96       	adiw	r24, 0x01	; 1
    205a:	90 93 d0 05 	sts	0x05D0, r25
    205e:	80 93 cf 05 	sts	0x05CF, r24
		buf[buf_ptr] = '\0';
    2062:	80 91 cf 05 	lds	r24, 0x05CF
    2066:	90 91 d0 05 	lds	r25, 0x05D0
    206a:	fc 01       	movw	r30, r24
    206c:	e1 52       	subi	r30, 0x21	; 33
    206e:	f9 4f       	sbci	r31, 0xF9	; 249
    2070:	10 82       	st	Z, r1
	}

	// if command ends or buffer is full ...
	if (ch == ASCII_CODE_CR || buf_ptr >= COMMAND_INPUT_BUFFER_SIZE - 1) {
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	8d 30       	cpi	r24, 0x0D	; 13
    2076:	39 f0       	breq	.+14     	; 0x2086 <process_char+0x6c>
    2078:	80 91 cf 05 	lds	r24, 0x05CF
    207c:	90 91 d0 05 	lds	r25, 0x05D0
    2080:	8f 34       	cpi	r24, 0x4F	; 79
    2082:	91 05       	cpc	r25, r1
    2084:	64 f1       	brlt	.+88     	; 0x20de <process_char+0xc4>

		if (ch == ASCII_CODE_CR) {
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	8d 30       	cpi	r24, 0x0D	; 13
    208a:	a1 f4       	brne	.+40     	; 0x20b4 <process_char+0x9a>
			// adjust string terminator
			buf[--buf_ptr] = '\0';
    208c:	80 91 cf 05 	lds	r24, 0x05CF
    2090:	90 91 d0 05 	lds	r25, 0x05D0
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	90 93 d0 05 	sts	0x05D0, r25
    209a:	80 93 cf 05 	sts	0x05CF, r24
    209e:	80 91 cf 05 	lds	r24, 0x05CF
    20a2:	90 91 d0 05 	lds	r25, 0x05D0
    20a6:	fc 01       	movw	r30, r24
    20a8:	e1 52       	subi	r30, 0x21	; 33
    20aa:	f9 4f       	sbci	r31, 0xF9	; 249
    20ac:	10 82       	st	Z, r1
			// let calling function send last command part (or command itself)
			ret = 1;
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	89 83       	std	Y+1, r24	; 0x01
    20b2:	15 c0       	rjmp	.+42     	; 0x20de <process_char+0xc4>
		} else {
			if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
    20b4:	0e 94 3c 11 	call	0x2278	; 0x2278 <uart_get_flow_control>
    20b8:	81 30       	cpi	r24, 0x01	; 1
    20ba:	49 f4       	brne	.+18     	; 0x20ce <process_char+0xb4>
				// send intermediate part of command.
				send_command(buf);
    20bc:	8f ed       	ldi	r24, 0xDF	; 223
    20be:	96 e0       	ldi	r25, 0x06	; 6
    20c0:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <send_command>
				buf_ptr = 0;
    20c4:	10 92 d0 05 	sts	0x05D0, r1
    20c8:	10 92 cf 05 	sts	0x05CF, r1
    20cc:	08 c0       	rjmp	.+16     	; 0x20de <process_char+0xc4>
			} else {
				// send intermediate part of command.
				uart_puts_P("Command overflow.");
    20ce:	84 e9       	ldi	r24, 0x94	; 148
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <uart_puts_p>
				buf_ptr = 0;
    20d6:	10 92 d0 05 	sts	0x05D0, r1
    20da:	10 92 cf 05 	sts	0x05CF, r1
			}
		}
	}
	return ret;
    20de:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <input_process>:
 * This approach handles small single line commands (needing no flow control) and large
 * multi-line commands if flow control is xon/xoff.
 *
 * \returns The character read in
 */
uchar input_process(void) {
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <input_process+0x6>
    20f0:	0f 92       	push	r0
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
	uchar ch, ret = 0;
    20f6:	19 82       	std	Y+1, r1	; 0x01

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
    20f8:	0e 94 3c 11 	call	0x2278	; 0x2278 <uart_get_flow_control>
    20fc:	81 30       	cpi	r24, 0x01	; 1
    20fe:	89 f4       	brne	.+34     	; 0x2122 <input_process+0x38>
    2100:	0c c0       	rjmp	.+24     	; 0x211a <input_process+0x30>
		while (!ret) {
			// if nothing can be read in, return
			if (!input_char(&ch)) {
    2102:	ce 01       	movw	r24, r28
    2104:	02 96       	adiw	r24, 0x02	; 2
    2106:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <input_char>
    210a:	88 23       	and	r24, r24
    210c:	11 f4       	brne	.+4      	; 0x2112 <input_process+0x28>
				return 0;
    210e:	1b 82       	std	Y+3, r1	; 0x03
    2110:	16 c0       	rjmp	.+44     	; 0x213e <input_process+0x54>
			}
			ret = process_char(ch);
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	0e 94 0d 10 	call	0x201a	; 0x201a <process_char>
    2118:	89 83       	std	Y+1, r24	; 0x01
 */
uchar input_process(void) {
	uchar ch, ret = 0;

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
		while (!ret) {
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	88 23       	and	r24, r24
    211e:	89 f3       	breq	.-30     	; 0x2102 <input_process+0x18>
    2120:	0c c0       	rjmp	.+24     	; 0x213a <input_process+0x50>
			}
			ret = process_char(ch);
		}
	} else {
		// if nothing can be read in, return
		if (!input_char(&ch)) {
    2122:	ce 01       	movw	r24, r28
    2124:	02 96       	adiw	r24, 0x02	; 2
    2126:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <input_char>
    212a:	88 23       	and	r24, r24
    212c:	11 f4       	brne	.+4      	; 0x2132 <input_process+0x48>
			return 0;
    212e:	1b 82       	std	Y+3, r1	; 0x03
    2130:	06 c0       	rjmp	.+12     	; 0x213e <input_process+0x54>
		}
		ret = process_char(ch);
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	0e 94 0d 10 	call	0x201a	; 0x201a <process_char>
    2138:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	8b 83       	std	Y+3, r24	; 0x03
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	08 95       	ret

0000214c <printHelp>:

void printHelp() {
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
#ifdef WRITE
	sprintf(buf,
    2154:	00 d0       	rcall	.+0      	; 0x2156 <printHelp+0xa>
    2156:	00 d0       	rcall	.+0      	; 0x2158 <printHelp+0xc>
    2158:	00 d0       	rcall	.+0      	; 0x215a <printHelp+0xe>
    215a:	ed b7       	in	r30, 0x3d	; 61
    215c:	fe b7       	in	r31, 0x3e	; 62
    215e:	31 96       	adiw	r30, 0x01	; 1
    2160:	8f ed       	ldi	r24, 0xDF	; 223
    2162:	96 e0       	ldi	r25, 0x06	; 6
    2164:	91 83       	std	Z+1, r25	; 0x01
    2166:	80 83       	st	Z, r24
    2168:	86 e0       	ldi	r24, 0x06	; 6
    216a:	94 e0       	ldi	r25, 0x04	; 4
    216c:	93 83       	std	Z+3, r25	; 0x03
    216e:	82 83       	std	Z+2, r24	; 0x02
    2170:	8e e3       	ldi	r24, 0x3E	; 62
    2172:	94 e0       	ldi	r25, 0x04	; 4
    2174:	95 83       	std	Z+5, r25	; 0x05
    2176:	84 83       	std	Z+4, r24	; 0x04
    2178:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <sprintf>
    217c:	8d b7       	in	r24, 0x3d	; 61
    217e:	9e b7       	in	r25, 0x3e	; 62
    2180:	06 96       	adiw	r24, 0x06	; 6
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	9e bf       	out	0x3e, r25	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	8d bf       	out	0x3d, r24	; 61
			"\n\rGPIB Controller (Rev.%s) (c) spurtikus.de 2008-2015\n\r",
			REVISION);
	uart_puts(buf);
    218c:	8f ed       	ldi	r24, 0xDF	; 223
    218e:	96 e0       	ldi	r25, 0x06	; 6
    2190:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
#else
	uart_puts("\n\rGPIB Listener Only (Rev.%s) (c) spurtikus.de 2008-2015\n\r", REVISION);
	uart_puts(buf);
#endif
	uart_puts("Internal commands:\n\r");
    2194:	82 e4       	ldi	r24, 0x42	; 66
    2196:	94 e0       	ldi	r25, 0x04	; 4
    2198:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
	uart_puts(
    219c:	87 e5       	ldi	r24, 0x57	; 87
    219e:	94 e0       	ldi	r25, 0x04	; 4
    21a0:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
			".a <primary> [<secondary>] - set prim./second. address of remote device\n\r");
	uart_puts(".s <secondary> - set secondary address of remote device\n\r");
    21a4:	81 ea       	ldi	r24, 0xA1	; 161
    21a6:	94 e0       	ldi	r25, 0x04	; 4
    21a8:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
	uart_puts(
    21ac:	8b ed       	ldi	r24, 0xDB	; 219
    21ae:	94 e0       	ldi	r25, 0x04	; 4
    21b0:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
			".+ <n> - add partner device address to list of known devices.\n\r");
	uart_puts(
    21b4:	8b e1       	ldi	r24, 0x1B	; 27
    21b6:	95 e0       	ldi	r25, 0x05	; 5
    21b8:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
			".- <n> - remove partner device address from list of known devices.\n\r");
	uart_puts(".x - toggle Xon/Xoff flow control.\n\r");
    21bc:	80 e6       	ldi	r24, 0x60	; 96
    21be:	95 e0       	ldi	r25, 0x05	; 5
    21c0:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
	uart_puts(".h - print help.\n\r");
    21c4:	85 e8       	ldi	r24, 0x85	; 133
    21c6:	95 e0       	ldi	r25, 0x05	; 5
    21c8:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
	uart_puts(".i - dump info about GPIB lines.\n\r");
    21cc:	88 e9       	ldi	r24, 0x98	; 152
    21ce:	95 e0       	ldi	r25, 0x05	; 5
    21d0:	0e 94 bf 12 	call	0x257e	; 0x257e <uart_puts>
}
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	08 95       	ret

000021da <__vector_7>:

/**
 * Interrupt Service Routine - do not call directly
 *  This routine is called when the Timer Value TCNT1 reaches the Output Compare Register Value OCR1A
 */ 
ISR(TIMER1_COMPA_vect) {
    21da:	1f 92       	push	r1
    21dc:	0f 92       	push	r0
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	0f 92       	push	r0
    21e2:	11 24       	eor	r1, r1
    21e4:	8f 93       	push	r24
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
#if XTAL_CPU % DEBOUNCE
	OCR1A = XTAL_CPU / DEBOUNCE - 1;
#endif
	if (--timer==0) {
    21ee:	80 91 2f 07 	lds	r24, 0x072F
    21f2:	81 50       	subi	r24, 0x01	; 1
    21f4:	80 93 2f 07 	sts	0x072F, r24
    21f8:	80 91 2f 07 	lds	r24, 0x072F
    21fc:	88 23       	and	r24, r24
    21fe:	39 f4       	brne	.+14     	; 0x220e <__vector_7+0x34>
		timer=(uint8_t) DEBOUNCE;
    2200:	10 92 2f 07 	sts	0x072F, r1
		s++;
    2204:	80 91 30 07 	lds	r24, 0x0730
    2208:	8f 5f       	subi	r24, 0xFF	; 255
    220a:	80 93 30 07 	sts	0x0730, r24
#if XTAL_CPU % DEBOUNCE
		OCR1A = XTAL_CPU / DEBOUNCE + XTAL_CPU % DEBOUNCE - 1;
#endif
	}
}
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	8f 91       	pop	r24
    2214:	0f 90       	pop	r0
    2216:	0f be       	out	0x3f, r0	; 63
    2218:	0f 90       	pop	r0
    221a:	1f 90       	pop	r1
    221c:	18 95       	reti

0000221e <timer16_init>:
/**
 * Timer initialisation.
 *  \brief initializes all registers ands sets second value 's' to zero. Timer is immediately
 * started.
 */ 
void timer16_init( void ) {
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62

	// OCR1A=XTAL/DEBOUNCE-1 -> Bei Erreichen dieses Wertes (31249) wird die ISR besucht
	// die ISR wird also alle 1/256s aufgerufen. Wenn man dort also bis 256 hochzählt, ist genau
	// 1 Sekunde um! 256 ist der Wert der Variable timer und wird über das define DEBOUNCE festgelegt

	TCCR1B = (1<<CS10) ^ (1<<WGM12);	// Prescaler of 1 | CTC mode
    2226:	ee e4       	ldi	r30, 0x4E	; 78
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	89 e0       	ldi	r24, 0x09	; 9
    222c:	80 83       	st	Z, r24
	OCR1A  = F_CPU/DEBOUNCE-1;		// Output compare register value 
    222e:	ea e4       	ldi	r30, 0x4A	; 74
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	81 e1       	ldi	r24, 0x11	; 17
    2234:	9a e7       	ldi	r25, 0x7A	; 122
    2236:	91 83       	std	Z+1, r25	; 0x01
    2238:	80 83       	st	Z, r24
	TCNT1 = 0; // Start value for timer register
    223a:	ec e4       	ldi	r30, 0x4C	; 76
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	11 82       	std	Z+1, r1	; 0x01
    2240:	10 82       	st	Z, r1
	s=0; // Initialize second value (s) to zero
    2242:	10 92 30 07 	sts	0x0730, r1
	timer = (uint8_t)DEBOUNCE; 
    2246:	10 92 2f 07 	sts	0x072F, r1
	TIMSK |= (1<<OCIE1A);		// activate timer interrupts which starts timer run
    224a:	a9 e5       	ldi	r26, 0x59	; 89
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	e9 e5       	ldi	r30, 0x59	; 89
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	80 61       	ori	r24, 0x10	; 16
    2256:	8c 93       	st	X, r24
}
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	08 95       	ret

0000225e <uart_set_flow_control>:
/** number of chars in rx buffer */
static volatile unsigned char chars_in_rx_buffer = 0;

void SendOutOfBand(unsigned char c);

void uart_set_flow_control(unsigned char _flowControl) {
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	0f 92       	push	r0
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	89 83       	std	Y+1, r24	; 0x01
	flowControl = _flowControl;
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	80 93 d2 05 	sts	0x05D2, r24
}
    2270:	0f 90       	pop	r0
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <uart_get_flow_control>:

unsigned char uart_get_flow_control() {
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
	return flowControl;
    2280:	80 91 d2 05 	lds	r24, 0x05D2
}
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
 Function: UART Receive Complete interrupt
 Purpose:  called when the UART has received a character
 **************************************************************************/
{
    228a:	1f 92       	push	r1
    228c:	0f 92       	push	r0
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	0f 92       	push	r0
    2292:	11 24       	eor	r1, r1
    2294:	2f 93       	push	r18
    2296:	3f 93       	push	r19
    2298:	4f 93       	push	r20
    229a:	5f 93       	push	r21
    229c:	6f 93       	push	r22
    229e:	7f 93       	push	r23
    22a0:	8f 93       	push	r24
    22a2:	9f 93       	push	r25
    22a4:	af 93       	push	r26
    22a6:	bf 93       	push	r27
    22a8:	ef 93       	push	r30
    22aa:	ff 93       	push	r31
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <__vector_13+0x28>
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <__vector_13+0x2a>
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	unsigned char usr;
	unsigned char lastRxError;

	/* read UART status register and UART data register */
	usr = UART0_STATUS;
    22b8:	eb e2       	ldi	r30, 0x2B	; 43
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	8a 83       	std	Y+2, r24	; 0x02
	data = UART0_DATA;
    22c0:	ec e2       	ldi	r30, 0x2C	; 44
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	8b 83       	std	Y+3, r24	; 0x03

	/* */
#if defined( AT90_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
    22c8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ca:	88 71       	andi	r24, 0x18	; 24
    22cc:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif

	/* calculate buffer index */
	tmphead = (UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    22ce:	80 91 78 06 	lds	r24, 0x0678
    22d2:	8f 5f       	subi	r24, 0xFF	; 255
    22d4:	8f 77       	andi	r24, 0x7F	; 127
    22d6:	8c 83       	std	Y+4, r24	; 0x04

	if (tmphead == UART_RxTail) {
    22d8:	90 91 79 06 	lds	r25, 0x0679
    22dc:	8c 81       	ldd	r24, Y+4	; 0x04
    22de:	89 17       	cp	r24, r25
    22e0:	19 f4       	brne	.+6      	; 0x22e8 <__vector_13+0x5e>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    22e2:	82 e0       	ldi	r24, 0x02	; 2
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	10 c0       	rjmp	.+32     	; 0x2308 <__vector_13+0x7e>
	} else {
		/* store new index */
		UART_RxHead = tmphead;
    22e8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ea:	80 93 78 06 	sts	0x0678, r24
		/* store received data in buffer */
		UART_RxBuf[tmphead] = data;
    22ee:	8c 81       	ldd	r24, Y+4	; 0x04
    22f0:	88 2f       	mov	r24, r24
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	fc 01       	movw	r30, r24
    22f6:	ea 50       	subi	r30, 0x0A	; 10
    22f8:	fa 4f       	sbci	r31, 0xFA	; 250
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	80 83       	st	Z, r24
		chars_in_rx_buffer++;
    22fe:	80 91 d5 05 	lds	r24, 0x05D5
    2302:	8f 5f       	subi	r24, 0xFF	; 255
    2304:	80 93 d5 05 	sts	0x05D5, r24
	}

	if (flowControl == FLOWCONTROL_XONXOFF
    2308:	80 91 d2 05 	lds	r24, 0x05D2
    230c:	81 30       	cpi	r24, 0x01	; 1
    230e:	99 f4       	brne	.+38     	; 0x2336 <__vector_13+0xac>
    2310:	80 91 d5 05 	lds	r24, 0x05D5
    2314:	81 36       	cpi	r24, 0x61	; 97
    2316:	78 f0       	brcs	.+30     	; 0x2336 <__vector_13+0xac>
			&& chars_in_rx_buffer > UART_RX_BUFFER_MAX_MARK) {
		/* immediately send XOFF */
		oob_event = 1;
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	80 93 d3 05 	sts	0x05D3, r24
		if (!after_xoff_sent) {
    231e:	80 91 d4 05 	lds	r24, 0x05D4
    2322:	88 23       	and	r24, r24
    2324:	31 f4       	brne	.+12     	; 0x2332 <__vector_13+0xa8>
			SendOutOfBand(XOFF);
    2326:	83 e1       	ldi	r24, 0x13	; 19
    2328:	0e 94 b5 11 	call	0x236a	; 0x236a <SendOutOfBand>
			after_xoff_sent = 1;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	80 93 d4 05 	sts	0x05D4, r24
		}
		oob_event = 0;
    2332:	10 92 d3 05 	sts	0x05D3, r1
	}

	UART_LastRxError = lastRxError;
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	80 93 7a 06 	sts	0x067A, r24
}
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	ff 91       	pop	r31
    234a:	ef 91       	pop	r30
    234c:	bf 91       	pop	r27
    234e:	af 91       	pop	r26
    2350:	9f 91       	pop	r25
    2352:	8f 91       	pop	r24
    2354:	7f 91       	pop	r23
    2356:	6f 91       	pop	r22
    2358:	5f 91       	pop	r21
    235a:	4f 91       	pop	r20
    235c:	3f 91       	pop	r19
    235e:	2f 91       	pop	r18
    2360:	0f 90       	pop	r0
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	0f 90       	pop	r0
    2366:	1f 90       	pop	r1
    2368:	18 95       	reti

0000236a <SendOutOfBand>:

void SendOutOfBand(unsigned char c) {
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	0f 92       	push	r0
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    2374:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << UDRE)))
    2376:	eb e2       	ldi	r30, 0x2B	; 43
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	88 2f       	mov	r24, r24
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	80 72       	andi	r24, 0x20	; 32
    2382:	90 70       	andi	r25, 0x00	; 0
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	b9 f3       	breq	.-18     	; 0x2376 <SendOutOfBand+0xc>
		;
	UDR = c;
    2388:	ec e2       	ldi	r30, 0x2C	; 44
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	80 83       	st	Z, r24
}
    2390:	0f 90       	pop	r0
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
 Function: UART Data Register Empty interrupt
 Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
    2398:	1f 92       	push	r1
    239a:	0f 92       	push	r0
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	0f 92       	push	r0
    23a0:	11 24       	eor	r1, r1
    23a2:	8f 93       	push	r24
    23a4:	9f 93       	push	r25
    23a6:	af 93       	push	r26
    23a8:	bf 93       	push	r27
    23aa:	ef 93       	push	r30
    23ac:	ff 93       	push	r31
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	0f 92       	push	r0
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;

	if (oob_event) {
    23b8:	80 91 d3 05 	lds	r24, 0x05D3
    23bc:	88 23       	and	r24, r24
    23be:	01 f5       	brne	.+64     	; 0x2400 <__vector_14+0x68>
		/* suppress transmitting during oob handling */
		return;
	}
	if (UART_TxHead != UART_TxTail) {
    23c0:	90 91 76 06 	lds	r25, 0x0676
    23c4:	80 91 77 06 	lds	r24, 0x0677
    23c8:	98 17       	cp	r25, r24
    23ca:	99 f0       	breq	.+38     	; 0x23f2 <__vector_14+0x5a>
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    23cc:	80 91 77 06 	lds	r24, 0x0677
    23d0:	8f 5f       	subi	r24, 0xFF	; 255
    23d2:	8f 71       	andi	r24, 0x1F	; 31
    23d4:	89 83       	std	Y+1, r24	; 0x01
		UART_TxTail = tmptail;
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	80 93 77 06 	sts	0x0677, r24
		/* get one byte from buffer and write it to UART */
		UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
    23dc:	ac e2       	ldi	r26, 0x2C	; 44
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	88 2f       	mov	r24, r24
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	fc 01       	movw	r30, r24
    23e8:	ea 52       	subi	r30, 0x2A	; 42
    23ea:	fa 4f       	sbci	r31, 0xFA	; 250
    23ec:	80 81       	ld	r24, Z
    23ee:	8c 93       	st	X, r24
    23f0:	07 c0       	rjmp	.+14     	; 0x2400 <__vector_14+0x68>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
    23f2:	aa e2       	ldi	r26, 0x2A	; 42
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	ea e2       	ldi	r30, 0x2A	; 42
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	8f 7d       	andi	r24, 0xDF	; 223
    23fe:	8c 93       	st	X, r24
	}
}
    2400:	0f 90       	pop	r0
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	ff 91       	pop	r31
    2408:	ef 91       	pop	r30
    240a:	bf 91       	pop	r27
    240c:	af 91       	pop	r26
    240e:	9f 91       	pop	r25
    2410:	8f 91       	pop	r24
    2412:	0f 90       	pop	r0
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	0f 90       	pop	r0
    2418:	1f 90       	pop	r1
    241a:	18 95       	reti

0000241c <uart_init>:
 Function: uart_init()
 Purpose:  initialize UART and set baudrate
 Input:    baudrate using macro UART_BAUD_SELECT()
 Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate) {
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	00 d0       	rcall	.+0      	; 0x2422 <uart_init+0x6>
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	9a 83       	std	Y+2, r25	; 0x02
    2428:	89 83       	std	Y+1, r24	; 0x01
	UART_TxHead = 0;
    242a:	10 92 76 06 	sts	0x0676, r1
	UART_TxTail = 0;
    242e:	10 92 77 06 	sts	0x0677, r1
	UART_RxHead = 0;
    2432:	10 92 78 06 	sts	0x0678, r1
	UART_RxTail = 0;
    2436:	10 92 79 06 	sts	0x0679, r1
	/* enable UART receiver and transmmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if (baudrate & 0x8000) {
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	9a 81       	ldd	r25, Y+2	; 0x02
    243e:	99 23       	and	r25, r25
    2440:	4c f4       	brge	.+18     	; 0x2454 <uart_init+0x38>
		UART0_STATUS = (1 << U2X);  //Enable 2x speed
    2442:	eb e2       	ldi	r30, 0x2B	; 43
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	80 83       	st	Z, r24
		baudrate &= ~0x8000;
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	9a 81       	ldd	r25, Y+2	; 0x02
    244e:	9f 77       	andi	r25, 0x7F	; 127
    2450:	9a 83       	std	Y+2, r25	; 0x02
    2452:	89 83       	std	Y+1, r24	; 0x01
	}
	UBRRH = (unsigned char) (baudrate >> 8);
    2454:	e0 e4       	ldi	r30, 0x40	; 64
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	9a 81       	ldd	r25, Y+2	; 0x02
    245c:	89 2f       	mov	r24, r25
    245e:	99 27       	eor	r25, r25
    2460:	80 83       	st	Z, r24
	UBRRL = (unsigned char) baudrate;
    2462:	e9 e2       	ldi	r30, 0x29	; 41
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	80 83       	st	Z, r24

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | (1 << RXEN) | (1 << TXEN);
    246a:	ea e2       	ldi	r30, 0x2A	; 42
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	88 e9       	ldi	r24, 0x98	; 152
    2470:	80 83       	st	Z, r24

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
    2472:	e0 e4       	ldi	r30, 0x40	; 64
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	86 e8       	ldi	r24, 0x86	; 134
    2478:	80 83       	st	Z, r24
	/* Enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	08 95       	ret

00002484 <uart_getc>:
 Function: uart_getc()
 Purpose:  return byte from ringbuffer
 Returns:  lower byte:  received byte from ringbuffer
 higher byte: last receive error
 **************************************************************************/
unsigned int uart_getc(void) {
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	00 d0       	rcall	.+0      	; 0x248a <uart_getc+0x6>
    248a:	00 d0       	rcall	.+0      	; 0x248c <uart_getc+0x8>
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;
	unsigned char data;

	if (UART_RxHead == UART_RxTail) {
    2490:	90 91 78 06 	lds	r25, 0x0678
    2494:	80 91 79 06 	lds	r24, 0x0679
    2498:	98 17       	cp	r25, r24
    249a:	29 f4       	brne	.+10     	; 0x24a6 <uart_getc+0x22>
		return UART_NO_DATA; /* no data available */
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	91 e0       	ldi	r25, 0x01	; 1
    24a0:	9c 83       	std	Y+4, r25	; 0x04
    24a2:	8b 83       	std	Y+3, r24	; 0x03
    24a4:	3c c0       	rjmp	.+120    	; 0x251e <uart_getc+0x9a>
	}

	/* calculate /store buffer index */
	tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    24a6:	80 91 79 06 	lds	r24, 0x0679
    24aa:	8f 5f       	subi	r24, 0xFF	; 255
    24ac:	8f 77       	andi	r24, 0x7F	; 127
    24ae:	8a 83       	std	Y+2, r24	; 0x02
	UART_RxTail = tmptail;
    24b0:	8a 81       	ldd	r24, Y+2	; 0x02
    24b2:	80 93 79 06 	sts	0x0679, r24

	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	88 2f       	mov	r24, r24
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	fc 01       	movw	r30, r24
    24be:	ea 50       	subi	r30, 0x0A	; 10
    24c0:	fa 4f       	sbci	r31, 0xFA	; 250
    24c2:	80 81       	ld	r24, Z
    24c4:	89 83       	std	Y+1, r24	; 0x01
	if (chars_in_rx_buffer > 0) {
    24c6:	80 91 d5 05 	lds	r24, 0x05D5
    24ca:	88 23       	and	r24, r24
    24cc:	29 f0       	breq	.+10     	; 0x24d8 <uart_getc+0x54>
		chars_in_rx_buffer--;
    24ce:	80 91 d5 05 	lds	r24, 0x05D5
    24d2:	81 50       	subi	r24, 0x01	; 1
    24d4:	80 93 d5 05 	sts	0x05D5, r24
	}
	if ((flowControl == FLOWCONTROL_XONXOFF) && after_xoff_sent) {
    24d8:	80 91 d2 05 	lds	r24, 0x05D2
    24dc:	81 30       	cpi	r24, 0x01	; 1
    24de:	91 f4       	brne	.+36     	; 0x2504 <uart_getc+0x80>
    24e0:	80 91 d4 05 	lds	r24, 0x05D4
    24e4:	88 23       	and	r24, r24
    24e6:	71 f0       	breq	.+28     	; 0x2504 <uart_getc+0x80>
		if (chars_in_rx_buffer <= UART_RX_BUFFER_MIN_MARK) {
    24e8:	80 91 d5 05 	lds	r24, 0x05D5
    24ec:	81 31       	cpi	r24, 0x11	; 17
    24ee:	50 f4       	brcc	.+20     	; 0x2504 <uart_getc+0x80>
			/* immediately send XON */
			oob_event = 1;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	80 93 d3 05 	sts	0x05D3, r24
			SendOutOfBand(XON);
    24f6:	81 e1       	ldi	r24, 0x11	; 17
    24f8:	0e 94 b5 11 	call	0x236a	; 0x236a <SendOutOfBand>
			after_xoff_sent = 0;
    24fc:	10 92 d4 05 	sts	0x05D4, r1
			oob_event = 0;
    2500:	10 92 d3 05 	sts	0x05D3, r1
		}
	}

	return (UART_LastRxError << 8) + data;
    2504:	80 91 7a 06 	lds	r24, 0x067A
    2508:	88 2f       	mov	r24, r24
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	38 2f       	mov	r19, r24
    250e:	22 27       	eor	r18, r18
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	88 2f       	mov	r24, r24
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	82 0f       	add	r24, r18
    2518:	93 1f       	adc	r25, r19
    251a:	9c 83       	std	Y+4, r25	; 0x04
    251c:	8b 83       	std	Y+3, r24	; 0x03
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <uart_putc>:
 Function: uart_putc()
 Purpose:  write byte to ringbuffer for transmitting via UART
 Input:    byte to be transmitted
 Returns:  none
 **************************************************************************/
void uart_putc(unsigned char data) {
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	00 d0       	rcall	.+0      	; 0x2536 <uart_putc+0x6>
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char tmphead;

	tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    253c:	80 91 76 06 	lds	r24, 0x0676
    2540:	8f 5f       	subi	r24, 0xFF	; 255
    2542:	8f 71       	andi	r24, 0x1F	; 31
    2544:	89 83       	std	Y+1, r24	; 0x01

	while (tmphead == UART_TxTail) {
    2546:	90 91 77 06 	lds	r25, 0x0677
    254a:	89 81       	ldd	r24, Y+1	; 0x01
    254c:	89 17       	cp	r24, r25
    254e:	d9 f3       	breq	.-10     	; 0x2546 <uart_putc+0x16>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	88 2f       	mov	r24, r24
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	fc 01       	movw	r30, r24
    2558:	ea 52       	subi	r30, 0x2A	; 42
    255a:	fa 4f       	sbci	r31, 0xFA	; 250
    255c:	8a 81       	ldd	r24, Y+2	; 0x02
    255e:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	80 93 76 06 	sts	0x0676, r24

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    2566:	aa e2       	ldi	r26, 0x2A	; 42
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	ea e2       	ldi	r30, 0x2A	; 42
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	80 62       	ori	r24, 0x20	; 32
    2572:	8c 93       	st	X, r24

}/* uart_putc */
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <uart_puts>:
 Function: uart_puts()
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	00 d0       	rcall	.+0      	; 0x2584 <uart_puts+0x6>
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	9a 83       	std	Y+2, r25	; 0x02
    258a:	89 83       	std	Y+1, r24	; 0x01
    258c:	0b c0       	rjmp	.+22     	; 0x25a4 <uart_puts+0x26>
	while (*s)
		uart_putc(*s++);
    258e:	e9 81       	ldd	r30, Y+1	; 0x01
    2590:	fa 81       	ldd	r31, Y+2	; 0x02
    2592:	20 81       	ld	r18, Z
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	9a 81       	ldd	r25, Y+2	; 0x02
    2598:	01 96       	adiw	r24, 0x01	; 1
    259a:	9a 83       	std	Y+2, r25	; 0x02
    259c:	89 83       	std	Y+1, r24	; 0x01
    259e:	82 2f       	mov	r24, r18
    25a0:	0e 94 98 12 	call	0x2530	; 0x2530 <uart_putc>
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
	while (*s)
    25a4:	e9 81       	ldd	r30, Y+1	; 0x01
    25a6:	fa 81       	ldd	r31, Y+2	; 0x02
    25a8:	80 81       	ld	r24, Z
    25aa:	88 23       	and	r24, r24
    25ac:	81 f7       	brne	.-32     	; 0x258e <uart_puts+0x10>
		uart_putc(*s++);

}/* uart_puts */
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <uart_puts_p>:
 Function: uart_puts_p()
 Purpose:  transmit string from program memory to UART
 Input:    program memory string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	00 d0       	rcall	.+0      	; 0x25be <uart_puts_p+0x6>
    25be:	00 d0       	rcall	.+0      	; 0x25c0 <uart_puts_p+0x8>
    25c0:	00 d0       	rcall	.+0      	; 0x25c2 <uart_puts_p+0xa>
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	9d 83       	std	Y+5, r25	; 0x05
    25c8:	8c 83       	std	Y+4, r24	; 0x04
    25ca:	03 c0       	rjmp	.+6      	; 0x25d2 <uart_puts_p+0x1a>
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
		uart_putc(c);
    25cc:	8e 81       	ldd	r24, Y+6	; 0x06
    25ce:	0e 94 98 12 	call	0x2530	; 0x2530 <uart_putc>
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
    25d2:	8c 81       	ldd	r24, Y+4	; 0x04
    25d4:	9d 81       	ldd	r25, Y+5	; 0x05
    25d6:	9b 83       	std	Y+3, r25	; 0x03
    25d8:	8a 83       	std	Y+2, r24	; 0x02
    25da:	8c 81       	ldd	r24, Y+4	; 0x04
    25dc:	9d 81       	ldd	r25, Y+5	; 0x05
    25de:	01 96       	adiw	r24, 0x01	; 1
    25e0:	9d 83       	std	Y+5, r25	; 0x05
    25e2:	8c 83       	std	Y+4, r24	; 0x04
    25e4:	ea 81       	ldd	r30, Y+2	; 0x02
    25e6:	fb 81       	ldd	r31, Y+3	; 0x03
    25e8:	84 91       	lpm	r24, Z+
    25ea:	89 83       	std	Y+1, r24	; 0x01
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	8e 83       	std	Y+6, r24	; 0x06
    25f0:	8e 81       	ldd	r24, Y+6	; 0x06
    25f2:	88 23       	and	r24, r24
    25f4:	59 f7       	brne	.-42     	; 0x25cc <uart_puts_p+0x14>
		uart_putc(c);

}/* uart_puts_p */
    25f6:	26 96       	adiw	r28, 0x06	; 6
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	f8 94       	cli
    25fc:	de bf       	out	0x3e, r29	; 62
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	cd bf       	out	0x3d, r28	; 61
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	08 95       	ret

00002608 <__prologue_saves__>:
    2608:	2f 92       	push	r2
    260a:	3f 92       	push	r3
    260c:	4f 92       	push	r4
    260e:	5f 92       	push	r5
    2610:	6f 92       	push	r6
    2612:	7f 92       	push	r7
    2614:	8f 92       	push	r8
    2616:	9f 92       	push	r9
    2618:	af 92       	push	r10
    261a:	bf 92       	push	r11
    261c:	cf 92       	push	r12
    261e:	df 92       	push	r13
    2620:	ef 92       	push	r14
    2622:	ff 92       	push	r15
    2624:	0f 93       	push	r16
    2626:	1f 93       	push	r17
    2628:	cf 93       	push	r28
    262a:	df 93       	push	r29
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
    2630:	ca 1b       	sub	r28, r26
    2632:	db 0b       	sbc	r29, r27
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	de bf       	out	0x3e, r29	; 62
    263a:	0f be       	out	0x3f, r0	; 63
    263c:	cd bf       	out	0x3d, r28	; 61
    263e:	09 94       	ijmp

00002640 <__epilogue_restores__>:
    2640:	2a 88       	ldd	r2, Y+18	; 0x12
    2642:	39 88       	ldd	r3, Y+17	; 0x11
    2644:	48 88       	ldd	r4, Y+16	; 0x10
    2646:	5f 84       	ldd	r5, Y+15	; 0x0f
    2648:	6e 84       	ldd	r6, Y+14	; 0x0e
    264a:	7d 84       	ldd	r7, Y+13	; 0x0d
    264c:	8c 84       	ldd	r8, Y+12	; 0x0c
    264e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2650:	aa 84       	ldd	r10, Y+10	; 0x0a
    2652:	b9 84       	ldd	r11, Y+9	; 0x09
    2654:	c8 84       	ldd	r12, Y+8	; 0x08
    2656:	df 80       	ldd	r13, Y+7	; 0x07
    2658:	ee 80       	ldd	r14, Y+6	; 0x06
    265a:	fd 80       	ldd	r15, Y+5	; 0x05
    265c:	0c 81       	ldd	r16, Y+4	; 0x04
    265e:	1b 81       	ldd	r17, Y+3	; 0x03
    2660:	aa 81       	ldd	r26, Y+2	; 0x02
    2662:	b9 81       	ldd	r27, Y+1	; 0x01
    2664:	ce 0f       	add	r28, r30
    2666:	d1 1d       	adc	r29, r1
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	f8 94       	cli
    266c:	de bf       	out	0x3e, r29	; 62
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	cd bf       	out	0x3d, r28	; 61
    2672:	ed 01       	movw	r28, r26
    2674:	08 95       	ret

00002676 <_exit>:
    2676:	f8 94       	cli

00002678 <__stop_program>:
    2678:	ff cf       	rjmp	.-2      	; 0x2678 <__stop_program>


gpib_004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002924  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000342  00800060  00002924  00002998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000172  008003a2  00002c66  00002cda  2**0
                  ALLOC
  3 .stab         00005478  00000000  00000000  00002cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000279d  00000000  00000000  00008154  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__ctors_end>
       4:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
       8:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
       c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      10:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      14:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      18:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      1c:	0c 94 42 12 	jmp	0x2484	; 0x2484 <__vector_7>
      20:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      24:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      28:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      2c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      30:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      34:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <__vector_13>
      38:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__vector_14>
      3c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      40:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      44:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      48:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      4c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      50:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>

00000054 <__c.1849>:
      54:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
      64:	65 72 72 6f 72 3a 20 00                             error: .

0000006c <__c.1847>:
      6c:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
      7c:	6f 72 3a 20 00                                      or: .

00000081 <__c.1845>:
      81:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
      91:	3a 20 00                                            : .

00000094 <__c.1871>:
      94:	43 6f 6d 6d 61 6e 64 20 6f 76 65 72 66 6c 6f 77     Command overflow
      a4:	2e 00                                               ..

000000a6 <__c.1943>:
      a6:	75 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 0a     unknown command.
      b6:	0d 00                                               ..

000000b8 <__c.1940>:
      b8:	43 68 65 63 6b 20 65 72 72 6f 72 73 0a 0d 00        Check errors...

000000c7 <__c.1935>:
      c7:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      d7:	74 72 6f 6c 20 6f 66 66 0a 0d 00                    trol off...

000000e2 <__c.1933>:
      e2:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      f2:	74 72 6f 6c 20 6f 6e 0a 0d 00                       trol on...

000000fc <__c.2008>:
      fc:	0a 0d 00                                            ...

000000ff <__c.2034>:
      ff:	0a 0d 53 52 51 20 64 65 74 65 63 74 65 64 2e 0a     ..SRQ detected..
     10f:	0d 00                                               ..

00000111 <__c.2064>:
     111:	0a 0d 53 52 51 73 20 61 72 65 20 64 69 73 61 62     ..SRQs are disab
     121:	6c 65 64 20 6e 6f 77 2e 0a 0d 00                    led now....

0000012c <__c.2062>:
     12c:	0a 0d 53 52 51 20 65 6d 69 74 74 65 72 20 69 73     ..SRQ emitter is
     13c:	20 6e 6f 74 20 69 6e 20 6c 69 73 74 20 6f 66 20      not in list of 
     14c:	6b 6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 20 53     known devices. S
     15c:	52 51 20 49 67 6e 6f 72 65 64 2e 0a 0d 00           RQ Ignored....

0000016a <__c.2096>:
     16a:	2e 69 20 2d 20 64 75 6d 70 20 69 6e 66 6f 20 61     .i - dump info a
     17a:	62 6f 75 74 20 47 50 49 42 20 6c 69 6e 65 73 2e     bout GPIB lines.
     18a:	0a 0d 00                                            ...

0000018d <__c.2094>:
     18d:	2e 68 20 2d 20 70 72 69 6e 74 20 68 65 6c 70 2e     .h - print help.
     19d:	0a 0d 00                                            ...

000001a0 <__c.2092>:
     1a0:	2e 78 20 2d 20 74 6f 67 67 6c 65 20 58 6f 6e 2f     .x - toggle Xon/
     1b0:	58 6f 66 66 20 66 6c 6f 77 20 63 6f 6e 74 72 6f     Xoff flow contro
     1c0:	6c 2e 0a 0d 00                                      l....

000001c5 <__c.2090>:
     1c5:	2e 2d 20 3c 6e 3e 20 2d 20 72 65 6d 6f 76 65 20     .- <n> - remove 
     1d5:	70 61 72 74 6e 65 72 20 64 65 76 69 63 65 20 61     partner device a
     1e5:	64 64 72 65 73 73 20 66 72 6f 6d 20 6c 69 73 74     ddress from list
     1f5:	20 6f 66 20 6b 6e 6f 77 6e 20 64 65 76 69 63 65      of known device
     205:	73 2e 0a 0d 00                                      s....

0000020a <__c.2088>:
     20a:	2e 2b 20 3c 6e 3e 20 2d 20 61 64 64 20 70 61 72     .+ <n> - add par
     21a:	74 6e 65 72 20 64 65 76 69 63 65 20 61 64 64 72     tner device addr
     22a:	65 73 73 20 74 6f 20 6c 69 73 74 20 6f 66 20 6b     ess to list of k
     23a:	6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 0a 0d 00     nown devices....

0000024a <__c.2086>:
     24a:	2e 73 20 3c 73 65 63 6f 6e 64 61 72 79 3e 20 2d     .s <secondary> -
     25a:	20 73 65 74 20 73 65 63 6f 6e 64 61 72 79 20 61      set secondary a
     26a:	64 64 72 65 73 73 20 6f 66 20 72 65 6d 6f 74 65     ddress of remote
     27a:	20 64 65 76 69 63 65 0a 0d 00                        device...

00000284 <__c.2084>:
     284:	49 6e 74 65 72 6e 61 6c 20 63 6f 6d 6d 61 6e 64     Internal command
     294:	73 3a 0a 0d 00                                      s:...

00000299 <__c.2109>:
     299:	0a 0d 00                                            ...

0000029c <__c.2107>:
     29c:	44 65 76 69 63 65 20 61 64 64 72 65 73 73 20 69     Device address i
     2ac:	73 20 6e 6f 74 20 73 65 74 2e 20 43 61 6e 20 6e     s not set. Can n
     2bc:	6f 74 20 73 65 6e 64 20 63 6f 6d 6d 61 6e 64 2e     ot send command.
     2cc:	0a 0d 00                                            ...

000002cf <__c.2105>:
     2cf:	0a 0d 00                                            ...

000002d2 <__ctors_end>:
     2d2:	11 24       	eor	r1, r1
     2d4:	1f be       	out	0x3f, r1	; 63
     2d6:	cf e5       	ldi	r28, 0x5F	; 95
     2d8:	d8 e0       	ldi	r29, 0x08	; 8
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	cd bf       	out	0x3d, r28	; 61

000002de <__do_copy_data>:
     2de:	13 e0       	ldi	r17, 0x03	; 3
     2e0:	a0 e6       	ldi	r26, 0x60	; 96
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	e4 e2       	ldi	r30, 0x24	; 36
     2e6:	f9 e2       	ldi	r31, 0x29	; 41
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <.do_copy_data_start>

000002ea <.do_copy_data_loop>:
     2ea:	05 90       	lpm	r0, Z+
     2ec:	0d 92       	st	X+, r0

000002ee <.do_copy_data_start>:
     2ee:	a2 3a       	cpi	r26, 0xA2	; 162
     2f0:	b1 07       	cpc	r27, r17
     2f2:	d9 f7       	brne	.-10     	; 0x2ea <.do_copy_data_loop>

000002f4 <__do_clear_bss>:
     2f4:	15 e0       	ldi	r17, 0x05	; 5
     2f6:	a2 ea       	ldi	r26, 0xA2	; 162
     2f8:	b3 e0       	ldi	r27, 0x03	; 3
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <.do_clear_bss_start>

000002fc <.do_clear_bss_loop>:
     2fc:	1d 92       	st	X+, r1

000002fe <.do_clear_bss_start>:
     2fe:	a4 31       	cpi	r26, 0x14	; 20
     300:	b1 07       	cpc	r27, r17
     302:	e1 f7       	brne	.-8      	; 0x2fc <.do_clear_bss_loop>
     304:	0e 94 b5 11 	call	0x236a	; 0x236a <main>
     308:	0c 94 90 14 	jmp	0x2920	; 0x2920 <_exit>

0000030c <__bad_interrupt>:
     30c:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000310 <atoi>:
     310:	fc 01       	movw	r30, r24
     312:	88 27       	eor	r24, r24
     314:	99 27       	eor	r25, r25
     316:	e8 94       	clt
     318:	21 91       	ld	r18, Z+
     31a:	20 32       	cpi	r18, 0x20	; 32
     31c:	e9 f3       	breq	.-6      	; 0x318 <atoi+0x8>
     31e:	29 30       	cpi	r18, 0x09	; 9
     320:	10 f0       	brcs	.+4      	; 0x326 <atoi+0x16>
     322:	2e 30       	cpi	r18, 0x0E	; 14
     324:	c8 f3       	brcs	.-14     	; 0x318 <atoi+0x8>
     326:	2b 32       	cpi	r18, 0x2B	; 43
     328:	41 f0       	breq	.+16     	; 0x33a <atoi+0x2a>
     32a:	2d 32       	cpi	r18, 0x2D	; 45
     32c:	39 f4       	brne	.+14     	; 0x33c <atoi+0x2c>
     32e:	68 94       	set
     330:	04 c0       	rjmp	.+8      	; 0x33a <atoi+0x2a>
     332:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__mulhi_const_10>
     336:	82 0f       	add	r24, r18
     338:	91 1d       	adc	r25, r1
     33a:	21 91       	ld	r18, Z+
     33c:	20 53       	subi	r18, 0x30	; 48
     33e:	2a 30       	cpi	r18, 0x0A	; 10
     340:	c0 f3       	brcs	.-16     	; 0x332 <atoi+0x22>
     342:	1e f4       	brtc	.+6      	; 0x34a <atoi+0x3a>
     344:	90 95       	com	r25
     346:	81 95       	neg	r24
     348:	9f 4f       	sbci	r25, 0xFF	; 255
     34a:	08 95       	ret

0000034c <strtok>:
     34c:	42 ea       	ldi	r20, 0xA2	; 162
     34e:	53 e0       	ldi	r21, 0x03	; 3
     350:	0e 94 bf 01 	call	0x37e	; 0x37e <strtok_r>
     354:	08 95       	ret

00000356 <strchr>:
     356:	fc 01       	movw	r30, r24
     358:	81 91       	ld	r24, Z+
     35a:	86 17       	cp	r24, r22
     35c:	21 f0       	breq	.+8      	; 0x366 <strchr+0x10>
     35e:	88 23       	and	r24, r24
     360:	d9 f7       	brne	.-10     	; 0x358 <strchr+0x2>
     362:	99 27       	eor	r25, r25
     364:	08 95       	ret
     366:	31 97       	sbiw	r30, 0x01	; 1
     368:	cf 01       	movw	r24, r30
     36a:	08 95       	ret

0000036c <strlen>:
     36c:	fc 01       	movw	r30, r24
     36e:	01 90       	ld	r0, Z+
     370:	00 20       	and	r0, r0
     372:	e9 f7       	brne	.-6      	; 0x36e <strlen+0x2>
     374:	80 95       	com	r24
     376:	90 95       	com	r25
     378:	8e 0f       	add	r24, r30
     37a:	9f 1f       	adc	r25, r31
     37c:	08 95       	ret

0000037e <strtok_r>:
     37e:	00 97       	sbiw	r24, 0x00	; 0
     380:	31 f4       	brne	.+12     	; 0x38e <strtok_r+0x10>
     382:	da 01       	movw	r26, r20
     384:	8d 91       	ld	r24, X+
     386:	9c 91       	ld	r25, X
     388:	00 97       	sbiw	r24, 0x00	; 0
     38a:	09 f4       	brne	.+2      	; 0x38e <strtok_r+0x10>
     38c:	0e c0       	rjmp	.+28     	; 0x3aa <strtok_r+0x2c>
     38e:	dc 01       	movw	r26, r24
     390:	fb 01       	movw	r30, r22
     392:	3d 91       	ld	r19, X+
     394:	21 91       	ld	r18, Z+
     396:	22 23       	and	r18, r18
     398:	19 f0       	breq	.+6      	; 0x3a0 <strtok_r+0x22>
     39a:	32 17       	cp	r19, r18
     39c:	c9 f3       	breq	.-14     	; 0x390 <strtok_r+0x12>
     39e:	fa cf       	rjmp	.-12     	; 0x394 <strtok_r+0x16>
     3a0:	33 23       	and	r19, r19
     3a2:	31 f4       	brne	.+12     	; 0x3b0 <strtok_r+0x32>
     3a4:	da 01       	movw	r26, r20
     3a6:	1d 92       	st	X+, r1
     3a8:	1c 92       	st	X, r1
     3aa:	88 27       	eor	r24, r24
     3ac:	99 27       	eor	r25, r25
     3ae:	08 95       	ret
     3b0:	11 97       	sbiw	r26, 0x01	; 1
     3b2:	af 93       	push	r26
     3b4:	bf 93       	push	r27
     3b6:	fb 01       	movw	r30, r22
     3b8:	3d 91       	ld	r19, X+
     3ba:	21 91       	ld	r18, Z+
     3bc:	32 17       	cp	r19, r18
     3be:	71 f4       	brne	.+28     	; 0x3dc <strtok_r+0x5e>
     3c0:	33 23       	and	r19, r19
     3c2:	21 f4       	brne	.+8      	; 0x3cc <strtok_r+0x4e>
     3c4:	88 27       	eor	r24, r24
     3c6:	99 27       	eor	r25, r25
     3c8:	11 97       	sbiw	r26, 0x01	; 1
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <strtok_r+0x52>
     3cc:	1e 92       	st	-X, r1
     3ce:	11 96       	adiw	r26, 0x01	; 1
     3d0:	fa 01       	movw	r30, r20
     3d2:	a1 93       	st	Z+, r26
     3d4:	b0 83       	st	Z, r27
     3d6:	9f 91       	pop	r25
     3d8:	8f 91       	pop	r24
     3da:	08 95       	ret
     3dc:	22 23       	and	r18, r18
     3de:	69 f7       	brne	.-38     	; 0x3ba <strtok_r+0x3c>
     3e0:	ea cf       	rjmp	.-44     	; 0x3b6 <strtok_r+0x38>

000003e2 <__mulhi_const_10>:
     3e2:	7a e0       	ldi	r23, 0x0A	; 10
     3e4:	97 9f       	mul	r25, r23
     3e6:	90 2d       	mov	r25, r0
     3e8:	87 9f       	mul	r24, r23
     3ea:	80 2d       	mov	r24, r0
     3ec:	91 0d       	add	r25, r1
     3ee:	11 24       	eor	r1, r1
     3f0:	08 95       	ret

000003f2 <sprintf>:
     3f2:	ae e0       	ldi	r26, 0x0E	; 14
     3f4:	b0 e0       	ldi	r27, 0x00	; 0
     3f6:	ef ef       	ldi	r30, 0xFF	; 255
     3f8:	f1 e0       	ldi	r31, 0x01	; 1
     3fa:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__prologue_saves__+0x1c>
     3fe:	0d 89       	ldd	r16, Y+21	; 0x15
     400:	1e 89       	ldd	r17, Y+22	; 0x16
     402:	86 e0       	ldi	r24, 0x06	; 6
     404:	8c 83       	std	Y+4, r24	; 0x04
     406:	1a 83       	std	Y+2, r17	; 0x02
     408:	09 83       	std	Y+1, r16	; 0x01
     40a:	8f ef       	ldi	r24, 0xFF	; 255
     40c:	9f e7       	ldi	r25, 0x7F	; 127
     40e:	9e 83       	std	Y+6, r25	; 0x06
     410:	8d 83       	std	Y+5, r24	; 0x05
     412:	9e 01       	movw	r18, r28
     414:	27 5e       	subi	r18, 0xE7	; 231
     416:	3f 4f       	sbci	r19, 0xFF	; 255
     418:	ce 01       	movw	r24, r28
     41a:	01 96       	adiw	r24, 0x01	; 1
     41c:	6f 89       	ldd	r22, Y+23	; 0x17
     41e:	78 8d       	ldd	r23, Y+24	; 0x18
     420:	a9 01       	movw	r20, r18
     422:	0e 94 1d 02 	call	0x43a	; 0x43a <vfprintf>
     426:	2f 81       	ldd	r18, Y+7	; 0x07
     428:	38 85       	ldd	r19, Y+8	; 0x08
     42a:	02 0f       	add	r16, r18
     42c:	13 1f       	adc	r17, r19
     42e:	f8 01       	movw	r30, r16
     430:	10 82       	st	Z, r1
     432:	2e 96       	adiw	r28, 0x0e	; 14
     434:	e4 e0       	ldi	r30, 0x04	; 4
     436:	0c 94 83 14 	jmp	0x2906	; 0x2906 <__epilogue_restores__+0x1c>

0000043a <vfprintf>:
     43a:	ab e0       	ldi	r26, 0x0B	; 11
     43c:	b0 e0       	ldi	r27, 0x00	; 0
     43e:	e3 e2       	ldi	r30, 0x23	; 35
     440:	f2 e0       	ldi	r31, 0x02	; 2
     442:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__prologue_saves__>
     446:	3c 01       	movw	r6, r24
     448:	2b 01       	movw	r4, r22
     44a:	5a 01       	movw	r10, r20
     44c:	fc 01       	movw	r30, r24
     44e:	17 82       	std	Z+7, r1	; 0x07
     450:	16 82       	std	Z+6, r1	; 0x06
     452:	83 81       	ldd	r24, Z+3	; 0x03
     454:	81 fd       	sbrc	r24, 1
     456:	03 c0       	rjmp	.+6      	; 0x45e <vfprintf+0x24>
     458:	6f ef       	ldi	r22, 0xFF	; 255
     45a:	7f ef       	ldi	r23, 0xFF	; 255
     45c:	c6 c1       	rjmp	.+908    	; 0x7ea <vfprintf+0x3b0>
     45e:	9a e0       	ldi	r25, 0x0A	; 10
     460:	89 2e       	mov	r8, r25
     462:	1e 01       	movw	r2, r28
     464:	08 94       	sec
     466:	21 1c       	adc	r2, r1
     468:	31 1c       	adc	r3, r1
     46a:	f3 01       	movw	r30, r6
     46c:	23 81       	ldd	r18, Z+3	; 0x03
     46e:	f2 01       	movw	r30, r4
     470:	23 fd       	sbrc	r18, 3
     472:	85 91       	lpm	r24, Z+
     474:	23 ff       	sbrs	r18, 3
     476:	81 91       	ld	r24, Z+
     478:	2f 01       	movw	r4, r30
     47a:	88 23       	and	r24, r24
     47c:	09 f4       	brne	.+2      	; 0x480 <vfprintf+0x46>
     47e:	b2 c1       	rjmp	.+868    	; 0x7e4 <vfprintf+0x3aa>
     480:	85 32       	cpi	r24, 0x25	; 37
     482:	39 f4       	brne	.+14     	; 0x492 <vfprintf+0x58>
     484:	23 fd       	sbrc	r18, 3
     486:	85 91       	lpm	r24, Z+
     488:	23 ff       	sbrs	r18, 3
     48a:	81 91       	ld	r24, Z+
     48c:	2f 01       	movw	r4, r30
     48e:	85 32       	cpi	r24, 0x25	; 37
     490:	29 f4       	brne	.+10     	; 0x49c <vfprintf+0x62>
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	b3 01       	movw	r22, r6
     496:	0e 94 10 04 	call	0x820	; 0x820 <fputc>
     49a:	e7 cf       	rjmp	.-50     	; 0x46a <vfprintf+0x30>
     49c:	98 2f       	mov	r25, r24
     49e:	ff 24       	eor	r15, r15
     4a0:	ee 24       	eor	r14, r14
     4a2:	99 24       	eor	r9, r9
     4a4:	ff e1       	ldi	r31, 0x1F	; 31
     4a6:	ff 15       	cp	r31, r15
     4a8:	d0 f0       	brcs	.+52     	; 0x4de <vfprintf+0xa4>
     4aa:	9b 32       	cpi	r25, 0x2B	; 43
     4ac:	69 f0       	breq	.+26     	; 0x4c8 <vfprintf+0x8e>
     4ae:	9c 32       	cpi	r25, 0x2C	; 44
     4b0:	28 f4       	brcc	.+10     	; 0x4bc <vfprintf+0x82>
     4b2:	90 32       	cpi	r25, 0x20	; 32
     4b4:	59 f0       	breq	.+22     	; 0x4cc <vfprintf+0x92>
     4b6:	93 32       	cpi	r25, 0x23	; 35
     4b8:	91 f4       	brne	.+36     	; 0x4de <vfprintf+0xa4>
     4ba:	0e c0       	rjmp	.+28     	; 0x4d8 <vfprintf+0x9e>
     4bc:	9d 32       	cpi	r25, 0x2D	; 45
     4be:	49 f0       	breq	.+18     	; 0x4d2 <vfprintf+0x98>
     4c0:	90 33       	cpi	r25, 0x30	; 48
     4c2:	69 f4       	brne	.+26     	; 0x4de <vfprintf+0xa4>
     4c4:	41 e0       	ldi	r20, 0x01	; 1
     4c6:	24 c0       	rjmp	.+72     	; 0x510 <vfprintf+0xd6>
     4c8:	52 e0       	ldi	r21, 0x02	; 2
     4ca:	f5 2a       	or	r15, r21
     4cc:	84 e0       	ldi	r24, 0x04	; 4
     4ce:	f8 2a       	or	r15, r24
     4d0:	28 c0       	rjmp	.+80     	; 0x522 <vfprintf+0xe8>
     4d2:	98 e0       	ldi	r25, 0x08	; 8
     4d4:	f9 2a       	or	r15, r25
     4d6:	25 c0       	rjmp	.+74     	; 0x522 <vfprintf+0xe8>
     4d8:	e0 e1       	ldi	r30, 0x10	; 16
     4da:	fe 2a       	or	r15, r30
     4dc:	22 c0       	rjmp	.+68     	; 0x522 <vfprintf+0xe8>
     4de:	f7 fc       	sbrc	r15, 7
     4e0:	29 c0       	rjmp	.+82     	; 0x534 <vfprintf+0xfa>
     4e2:	89 2f       	mov	r24, r25
     4e4:	80 53       	subi	r24, 0x30	; 48
     4e6:	8a 30       	cpi	r24, 0x0A	; 10
     4e8:	70 f4       	brcc	.+28     	; 0x506 <vfprintf+0xcc>
     4ea:	f6 fe       	sbrs	r15, 6
     4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <vfprintf+0xbe>
     4ee:	98 9c       	mul	r9, r8
     4f0:	90 2c       	mov	r9, r0
     4f2:	11 24       	eor	r1, r1
     4f4:	98 0e       	add	r9, r24
     4f6:	15 c0       	rjmp	.+42     	; 0x522 <vfprintf+0xe8>
     4f8:	e8 9c       	mul	r14, r8
     4fa:	e0 2c       	mov	r14, r0
     4fc:	11 24       	eor	r1, r1
     4fe:	e8 0e       	add	r14, r24
     500:	f0 e2       	ldi	r31, 0x20	; 32
     502:	ff 2a       	or	r15, r31
     504:	0e c0       	rjmp	.+28     	; 0x522 <vfprintf+0xe8>
     506:	9e 32       	cpi	r25, 0x2E	; 46
     508:	29 f4       	brne	.+10     	; 0x514 <vfprintf+0xda>
     50a:	f6 fc       	sbrc	r15, 6
     50c:	6b c1       	rjmp	.+726    	; 0x7e4 <vfprintf+0x3aa>
     50e:	40 e4       	ldi	r20, 0x40	; 64
     510:	f4 2a       	or	r15, r20
     512:	07 c0       	rjmp	.+14     	; 0x522 <vfprintf+0xe8>
     514:	9c 36       	cpi	r25, 0x6C	; 108
     516:	19 f4       	brne	.+6      	; 0x51e <vfprintf+0xe4>
     518:	50 e8       	ldi	r21, 0x80	; 128
     51a:	f5 2a       	or	r15, r21
     51c:	02 c0       	rjmp	.+4      	; 0x522 <vfprintf+0xe8>
     51e:	98 36       	cpi	r25, 0x68	; 104
     520:	49 f4       	brne	.+18     	; 0x534 <vfprintf+0xfa>
     522:	f2 01       	movw	r30, r4
     524:	23 fd       	sbrc	r18, 3
     526:	95 91       	lpm	r25, Z+
     528:	23 ff       	sbrs	r18, 3
     52a:	91 91       	ld	r25, Z+
     52c:	2f 01       	movw	r4, r30
     52e:	99 23       	and	r25, r25
     530:	09 f0       	breq	.+2      	; 0x534 <vfprintf+0xfa>
     532:	b8 cf       	rjmp	.-144    	; 0x4a4 <vfprintf+0x6a>
     534:	89 2f       	mov	r24, r25
     536:	85 54       	subi	r24, 0x45	; 69
     538:	83 30       	cpi	r24, 0x03	; 3
     53a:	18 f0       	brcs	.+6      	; 0x542 <vfprintf+0x108>
     53c:	80 52       	subi	r24, 0x20	; 32
     53e:	83 30       	cpi	r24, 0x03	; 3
     540:	38 f4       	brcc	.+14     	; 0x550 <vfprintf+0x116>
     542:	44 e0       	ldi	r20, 0x04	; 4
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	a4 0e       	add	r10, r20
     548:	b5 1e       	adc	r11, r21
     54a:	5f e3       	ldi	r21, 0x3F	; 63
     54c:	59 83       	std	Y+1, r21	; 0x01
     54e:	0f c0       	rjmp	.+30     	; 0x56e <vfprintf+0x134>
     550:	93 36       	cpi	r25, 0x63	; 99
     552:	31 f0       	breq	.+12     	; 0x560 <vfprintf+0x126>
     554:	93 37       	cpi	r25, 0x73	; 115
     556:	79 f0       	breq	.+30     	; 0x576 <vfprintf+0x13c>
     558:	93 35       	cpi	r25, 0x53	; 83
     55a:	09 f0       	breq	.+2      	; 0x55e <vfprintf+0x124>
     55c:	56 c0       	rjmp	.+172    	; 0x60a <vfprintf+0x1d0>
     55e:	20 c0       	rjmp	.+64     	; 0x5a0 <vfprintf+0x166>
     560:	f5 01       	movw	r30, r10
     562:	80 81       	ld	r24, Z
     564:	89 83       	std	Y+1, r24	; 0x01
     566:	42 e0       	ldi	r20, 0x02	; 2
     568:	50 e0       	ldi	r21, 0x00	; 0
     56a:	a4 0e       	add	r10, r20
     56c:	b5 1e       	adc	r11, r21
     56e:	61 01       	movw	r12, r2
     570:	01 e0       	ldi	r16, 0x01	; 1
     572:	10 e0       	ldi	r17, 0x00	; 0
     574:	12 c0       	rjmp	.+36     	; 0x59a <vfprintf+0x160>
     576:	f5 01       	movw	r30, r10
     578:	c0 80       	ld	r12, Z
     57a:	d1 80       	ldd	r13, Z+1	; 0x01
     57c:	f6 fc       	sbrc	r15, 6
     57e:	03 c0       	rjmp	.+6      	; 0x586 <vfprintf+0x14c>
     580:	6f ef       	ldi	r22, 0xFF	; 255
     582:	7f ef       	ldi	r23, 0xFF	; 255
     584:	02 c0       	rjmp	.+4      	; 0x58a <vfprintf+0x150>
     586:	69 2d       	mov	r22, r9
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	42 e0       	ldi	r20, 0x02	; 2
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	a4 0e       	add	r10, r20
     590:	b5 1e       	adc	r11, r21
     592:	c6 01       	movw	r24, r12
     594:	0e 94 05 04 	call	0x80a	; 0x80a <strnlen>
     598:	8c 01       	movw	r16, r24
     59a:	5f e7       	ldi	r21, 0x7F	; 127
     59c:	f5 22       	and	r15, r21
     59e:	14 c0       	rjmp	.+40     	; 0x5c8 <vfprintf+0x18e>
     5a0:	f5 01       	movw	r30, r10
     5a2:	c0 80       	ld	r12, Z
     5a4:	d1 80       	ldd	r13, Z+1	; 0x01
     5a6:	f6 fc       	sbrc	r15, 6
     5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <vfprintf+0x176>
     5aa:	6f ef       	ldi	r22, 0xFF	; 255
     5ac:	7f ef       	ldi	r23, 0xFF	; 255
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <vfprintf+0x17a>
     5b0:	69 2d       	mov	r22, r9
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	42 e0       	ldi	r20, 0x02	; 2
     5b6:	50 e0       	ldi	r21, 0x00	; 0
     5b8:	a4 0e       	add	r10, r20
     5ba:	b5 1e       	adc	r11, r21
     5bc:	c6 01       	movw	r24, r12
     5be:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <strnlen_P>
     5c2:	8c 01       	movw	r16, r24
     5c4:	50 e8       	ldi	r21, 0x80	; 128
     5c6:	f5 2a       	or	r15, r21
     5c8:	f3 fe       	sbrs	r15, 3
     5ca:	07 c0       	rjmp	.+14     	; 0x5da <vfprintf+0x1a0>
     5cc:	1a c0       	rjmp	.+52     	; 0x602 <vfprintf+0x1c8>
     5ce:	80 e2       	ldi	r24, 0x20	; 32
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	b3 01       	movw	r22, r6
     5d4:	0e 94 10 04 	call	0x820	; 0x820 <fputc>
     5d8:	ea 94       	dec	r14
     5da:	8e 2d       	mov	r24, r14
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	08 17       	cp	r16, r24
     5e0:	19 07       	cpc	r17, r25
     5e2:	a8 f3       	brcs	.-22     	; 0x5ce <vfprintf+0x194>
     5e4:	0e c0       	rjmp	.+28     	; 0x602 <vfprintf+0x1c8>
     5e6:	f6 01       	movw	r30, r12
     5e8:	f7 fc       	sbrc	r15, 7
     5ea:	85 91       	lpm	r24, Z+
     5ec:	f7 fe       	sbrs	r15, 7
     5ee:	81 91       	ld	r24, Z+
     5f0:	6f 01       	movw	r12, r30
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	b3 01       	movw	r22, r6
     5f6:	0e 94 10 04 	call	0x820	; 0x820 <fputc>
     5fa:	e1 10       	cpse	r14, r1
     5fc:	ea 94       	dec	r14
     5fe:	01 50       	subi	r16, 0x01	; 1
     600:	10 40       	sbci	r17, 0x00	; 0
     602:	01 15       	cp	r16, r1
     604:	11 05       	cpc	r17, r1
     606:	79 f7       	brne	.-34     	; 0x5e6 <vfprintf+0x1ac>
     608:	ea c0       	rjmp	.+468    	; 0x7de <vfprintf+0x3a4>
     60a:	94 36       	cpi	r25, 0x64	; 100
     60c:	11 f0       	breq	.+4      	; 0x612 <vfprintf+0x1d8>
     60e:	99 36       	cpi	r25, 0x69	; 105
     610:	69 f5       	brne	.+90     	; 0x66c <vfprintf+0x232>
     612:	f7 fe       	sbrs	r15, 7
     614:	08 c0       	rjmp	.+16     	; 0x626 <vfprintf+0x1ec>
     616:	f5 01       	movw	r30, r10
     618:	20 81       	ld	r18, Z
     61a:	31 81       	ldd	r19, Z+1	; 0x01
     61c:	42 81       	ldd	r20, Z+2	; 0x02
     61e:	53 81       	ldd	r21, Z+3	; 0x03
     620:	84 e0       	ldi	r24, 0x04	; 4
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0a c0       	rjmp	.+20     	; 0x63a <vfprintf+0x200>
     626:	f5 01       	movw	r30, r10
     628:	80 81       	ld	r24, Z
     62a:	91 81       	ldd	r25, Z+1	; 0x01
     62c:	9c 01       	movw	r18, r24
     62e:	44 27       	eor	r20, r20
     630:	37 fd       	sbrc	r19, 7
     632:	40 95       	com	r20
     634:	54 2f       	mov	r21, r20
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	a8 0e       	add	r10, r24
     63c:	b9 1e       	adc	r11, r25
     63e:	9f e6       	ldi	r25, 0x6F	; 111
     640:	f9 22       	and	r15, r25
     642:	57 ff       	sbrs	r21, 7
     644:	09 c0       	rjmp	.+18     	; 0x658 <vfprintf+0x21e>
     646:	50 95       	com	r21
     648:	40 95       	com	r20
     64a:	30 95       	com	r19
     64c:	21 95       	neg	r18
     64e:	3f 4f       	sbci	r19, 0xFF	; 255
     650:	4f 4f       	sbci	r20, 0xFF	; 255
     652:	5f 4f       	sbci	r21, 0xFF	; 255
     654:	e0 e8       	ldi	r30, 0x80	; 128
     656:	fe 2a       	or	r15, r30
     658:	ca 01       	movw	r24, r20
     65a:	b9 01       	movw	r22, r18
     65c:	a1 01       	movw	r20, r2
     65e:	2a e0       	ldi	r18, 0x0A	; 10
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	0e 94 3c 04 	call	0x878	; 0x878 <__ultoa_invert>
     666:	d8 2e       	mov	r13, r24
     668:	d2 18       	sub	r13, r2
     66a:	40 c0       	rjmp	.+128    	; 0x6ec <vfprintf+0x2b2>
     66c:	95 37       	cpi	r25, 0x75	; 117
     66e:	29 f4       	brne	.+10     	; 0x67a <vfprintf+0x240>
     670:	1f 2d       	mov	r17, r15
     672:	1f 7e       	andi	r17, 0xEF	; 239
     674:	2a e0       	ldi	r18, 0x0A	; 10
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	1d c0       	rjmp	.+58     	; 0x6b4 <vfprintf+0x27a>
     67a:	1f 2d       	mov	r17, r15
     67c:	19 7f       	andi	r17, 0xF9	; 249
     67e:	9f 36       	cpi	r25, 0x6F	; 111
     680:	61 f0       	breq	.+24     	; 0x69a <vfprintf+0x260>
     682:	90 37       	cpi	r25, 0x70	; 112
     684:	20 f4       	brcc	.+8      	; 0x68e <vfprintf+0x254>
     686:	98 35       	cpi	r25, 0x58	; 88
     688:	09 f0       	breq	.+2      	; 0x68c <vfprintf+0x252>
     68a:	ac c0       	rjmp	.+344    	; 0x7e4 <vfprintf+0x3aa>
     68c:	0f c0       	rjmp	.+30     	; 0x6ac <vfprintf+0x272>
     68e:	90 37       	cpi	r25, 0x70	; 112
     690:	39 f0       	breq	.+14     	; 0x6a0 <vfprintf+0x266>
     692:	98 37       	cpi	r25, 0x78	; 120
     694:	09 f0       	breq	.+2      	; 0x698 <vfprintf+0x25e>
     696:	a6 c0       	rjmp	.+332    	; 0x7e4 <vfprintf+0x3aa>
     698:	04 c0       	rjmp	.+8      	; 0x6a2 <vfprintf+0x268>
     69a:	28 e0       	ldi	r18, 0x08	; 8
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	0a c0       	rjmp	.+20     	; 0x6b4 <vfprintf+0x27a>
     6a0:	10 61       	ori	r17, 0x10	; 16
     6a2:	14 fd       	sbrc	r17, 4
     6a4:	14 60       	ori	r17, 0x04	; 4
     6a6:	20 e1       	ldi	r18, 0x10	; 16
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <vfprintf+0x27a>
     6ac:	14 fd       	sbrc	r17, 4
     6ae:	16 60       	ori	r17, 0x06	; 6
     6b0:	20 e1       	ldi	r18, 0x10	; 16
     6b2:	32 e0       	ldi	r19, 0x02	; 2
     6b4:	17 ff       	sbrs	r17, 7
     6b6:	08 c0       	rjmp	.+16     	; 0x6c8 <vfprintf+0x28e>
     6b8:	f5 01       	movw	r30, r10
     6ba:	60 81       	ld	r22, Z
     6bc:	71 81       	ldd	r23, Z+1	; 0x01
     6be:	82 81       	ldd	r24, Z+2	; 0x02
     6c0:	93 81       	ldd	r25, Z+3	; 0x03
     6c2:	44 e0       	ldi	r20, 0x04	; 4
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	08 c0       	rjmp	.+16     	; 0x6d8 <vfprintf+0x29e>
     6c8:	f5 01       	movw	r30, r10
     6ca:	80 81       	ld	r24, Z
     6cc:	91 81       	ldd	r25, Z+1	; 0x01
     6ce:	bc 01       	movw	r22, r24
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	42 e0       	ldi	r20, 0x02	; 2
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	a4 0e       	add	r10, r20
     6da:	b5 1e       	adc	r11, r21
     6dc:	a1 01       	movw	r20, r2
     6de:	0e 94 3c 04 	call	0x878	; 0x878 <__ultoa_invert>
     6e2:	d8 2e       	mov	r13, r24
     6e4:	d2 18       	sub	r13, r2
     6e6:	8f e7       	ldi	r24, 0x7F	; 127
     6e8:	f8 2e       	mov	r15, r24
     6ea:	f1 22       	and	r15, r17
     6ec:	f6 fe       	sbrs	r15, 6
     6ee:	0b c0       	rjmp	.+22     	; 0x706 <vfprintf+0x2cc>
     6f0:	5e ef       	ldi	r21, 0xFE	; 254
     6f2:	f5 22       	and	r15, r21
     6f4:	d9 14       	cp	r13, r9
     6f6:	38 f4       	brcc	.+14     	; 0x706 <vfprintf+0x2cc>
     6f8:	f4 fe       	sbrs	r15, 4
     6fa:	07 c0       	rjmp	.+14     	; 0x70a <vfprintf+0x2d0>
     6fc:	f2 fc       	sbrc	r15, 2
     6fe:	05 c0       	rjmp	.+10     	; 0x70a <vfprintf+0x2d0>
     700:	8f ee       	ldi	r24, 0xEF	; 239
     702:	f8 22       	and	r15, r24
     704:	02 c0       	rjmp	.+4      	; 0x70a <vfprintf+0x2d0>
     706:	1d 2d       	mov	r17, r13
     708:	01 c0       	rjmp	.+2      	; 0x70c <vfprintf+0x2d2>
     70a:	19 2d       	mov	r17, r9
     70c:	f4 fe       	sbrs	r15, 4
     70e:	0d c0       	rjmp	.+26     	; 0x72a <vfprintf+0x2f0>
     710:	fe 01       	movw	r30, r28
     712:	ed 0d       	add	r30, r13
     714:	f1 1d       	adc	r31, r1
     716:	80 81       	ld	r24, Z
     718:	80 33       	cpi	r24, 0x30	; 48
     71a:	19 f4       	brne	.+6      	; 0x722 <vfprintf+0x2e8>
     71c:	99 ee       	ldi	r25, 0xE9	; 233
     71e:	f9 22       	and	r15, r25
     720:	08 c0       	rjmp	.+16     	; 0x732 <vfprintf+0x2f8>
     722:	1f 5f       	subi	r17, 0xFF	; 255
     724:	f2 fe       	sbrs	r15, 2
     726:	05 c0       	rjmp	.+10     	; 0x732 <vfprintf+0x2f8>
     728:	03 c0       	rjmp	.+6      	; 0x730 <vfprintf+0x2f6>
     72a:	8f 2d       	mov	r24, r15
     72c:	86 78       	andi	r24, 0x86	; 134
     72e:	09 f0       	breq	.+2      	; 0x732 <vfprintf+0x2f8>
     730:	1f 5f       	subi	r17, 0xFF	; 255
     732:	0f 2d       	mov	r16, r15
     734:	f3 fc       	sbrc	r15, 3
     736:	14 c0       	rjmp	.+40     	; 0x760 <vfprintf+0x326>
     738:	f0 fe       	sbrs	r15, 0
     73a:	0f c0       	rjmp	.+30     	; 0x75a <vfprintf+0x320>
     73c:	1e 15       	cp	r17, r14
     73e:	10 f0       	brcs	.+4      	; 0x744 <vfprintf+0x30a>
     740:	9d 2c       	mov	r9, r13
     742:	0b c0       	rjmp	.+22     	; 0x75a <vfprintf+0x320>
     744:	9d 2c       	mov	r9, r13
     746:	9e 0c       	add	r9, r14
     748:	91 1a       	sub	r9, r17
     74a:	1e 2d       	mov	r17, r14
     74c:	06 c0       	rjmp	.+12     	; 0x75a <vfprintf+0x320>
     74e:	80 e2       	ldi	r24, 0x20	; 32
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	b3 01       	movw	r22, r6
     754:	0e 94 10 04 	call	0x820	; 0x820 <fputc>
     758:	1f 5f       	subi	r17, 0xFF	; 255
     75a:	1e 15       	cp	r17, r14
     75c:	c0 f3       	brcs	.-16     	; 0x74e <vfprintf+0x314>
     75e:	04 c0       	rjmp	.+8      	; 0x768 <vfprintf+0x32e>
     760:	1e 15       	cp	r17, r14
     762:	10 f4       	brcc	.+4      	; 0x768 <vfprintf+0x32e>
     764:	e1 1a       	sub	r14, r17
     766:	01 c0       	rjmp	.+2      	; 0x76a <vfprintf+0x330>
     768:	ee 24       	eor	r14, r14
     76a:	04 ff       	sbrs	r16, 4
     76c:	0f c0       	rjmp	.+30     	; 0x78c <vfprintf+0x352>
     76e:	80 e3       	ldi	r24, 0x30	; 48
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	b3 01       	movw	r22, r6
     774:	0e 94 10 04 	call	0x820	; 0x820 <fputc>
     778:	02 ff       	sbrs	r16, 2
     77a:	1d c0       	rjmp	.+58     	; 0x7b6 <vfprintf+0x37c>
     77c:	01 fd       	sbrc	r16, 1
     77e:	03 c0       	rjmp	.+6      	; 0x786 <vfprintf+0x34c>
     780:	88 e7       	ldi	r24, 0x78	; 120
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e c0       	rjmp	.+28     	; 0x7a2 <vfprintf+0x368>
     786:	88 e5       	ldi	r24, 0x58	; 88
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	0b c0       	rjmp	.+22     	; 0x7a2 <vfprintf+0x368>
     78c:	80 2f       	mov	r24, r16
     78e:	86 78       	andi	r24, 0x86	; 134
     790:	91 f0       	breq	.+36     	; 0x7b6 <vfprintf+0x37c>
     792:	01 ff       	sbrs	r16, 1
     794:	02 c0       	rjmp	.+4      	; 0x79a <vfprintf+0x360>
     796:	8b e2       	ldi	r24, 0x2B	; 43
     798:	01 c0       	rjmp	.+2      	; 0x79c <vfprintf+0x362>
     79a:	80 e2       	ldi	r24, 0x20	; 32
     79c:	f7 fc       	sbrc	r15, 7
     79e:	8d e2       	ldi	r24, 0x2D	; 45
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	b3 01       	movw	r22, r6
     7a4:	0e 94 10 04 	call	0x820	; 0x820 <fputc>
     7a8:	06 c0       	rjmp	.+12     	; 0x7b6 <vfprintf+0x37c>
     7aa:	80 e3       	ldi	r24, 0x30	; 48
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	b3 01       	movw	r22, r6
     7b0:	0e 94 10 04 	call	0x820	; 0x820 <fputc>
     7b4:	9a 94       	dec	r9
     7b6:	d9 14       	cp	r13, r9
     7b8:	c0 f3       	brcs	.-16     	; 0x7aa <vfprintf+0x370>
     7ba:	da 94       	dec	r13
     7bc:	f1 01       	movw	r30, r2
     7be:	ed 0d       	add	r30, r13
     7c0:	f1 1d       	adc	r31, r1
     7c2:	80 81       	ld	r24, Z
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	b3 01       	movw	r22, r6
     7c8:	0e 94 10 04 	call	0x820	; 0x820 <fputc>
     7cc:	dd 20       	and	r13, r13
     7ce:	a9 f7       	brne	.-22     	; 0x7ba <vfprintf+0x380>
     7d0:	06 c0       	rjmp	.+12     	; 0x7de <vfprintf+0x3a4>
     7d2:	80 e2       	ldi	r24, 0x20	; 32
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	b3 01       	movw	r22, r6
     7d8:	0e 94 10 04 	call	0x820	; 0x820 <fputc>
     7dc:	ea 94       	dec	r14
     7de:	ee 20       	and	r14, r14
     7e0:	c1 f7       	brne	.-16     	; 0x7d2 <vfprintf+0x398>
     7e2:	43 ce       	rjmp	.-890    	; 0x46a <vfprintf+0x30>
     7e4:	f3 01       	movw	r30, r6
     7e6:	66 81       	ldd	r22, Z+6	; 0x06
     7e8:	77 81       	ldd	r23, Z+7	; 0x07
     7ea:	cb 01       	movw	r24, r22
     7ec:	2b 96       	adiw	r28, 0x0b	; 11
     7ee:	e2 e1       	ldi	r30, 0x12	; 18
     7f0:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__epilogue_restores__>

000007f4 <strnlen_P>:
     7f4:	fc 01       	movw	r30, r24
     7f6:	05 90       	lpm	r0, Z+
     7f8:	61 50       	subi	r22, 0x01	; 1
     7fa:	70 40       	sbci	r23, 0x00	; 0
     7fc:	01 10       	cpse	r0, r1
     7fe:	d8 f7       	brcc	.-10     	; 0x7f6 <strnlen_P+0x2>
     800:	80 95       	com	r24
     802:	90 95       	com	r25
     804:	8e 0f       	add	r24, r30
     806:	9f 1f       	adc	r25, r31
     808:	08 95       	ret

0000080a <strnlen>:
     80a:	fc 01       	movw	r30, r24
     80c:	61 50       	subi	r22, 0x01	; 1
     80e:	70 40       	sbci	r23, 0x00	; 0
     810:	01 90       	ld	r0, Z+
     812:	01 10       	cpse	r0, r1
     814:	d8 f7       	brcc	.-10     	; 0x80c <strnlen+0x2>
     816:	80 95       	com	r24
     818:	90 95       	com	r25
     81a:	8e 0f       	add	r24, r30
     81c:	9f 1f       	adc	r25, r31
     81e:	08 95       	ret

00000820 <fputc>:
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	8c 01       	movw	r16, r24
     82a:	eb 01       	movw	r28, r22
     82c:	8b 81       	ldd	r24, Y+3	; 0x03
     82e:	81 ff       	sbrs	r24, 1
     830:	1b c0       	rjmp	.+54     	; 0x868 <__stack+0x9>
     832:	82 ff       	sbrs	r24, 2
     834:	0d c0       	rjmp	.+26     	; 0x850 <fputc+0x30>
     836:	2e 81       	ldd	r18, Y+6	; 0x06
     838:	3f 81       	ldd	r19, Y+7	; 0x07
     83a:	8c 81       	ldd	r24, Y+4	; 0x04
     83c:	9d 81       	ldd	r25, Y+5	; 0x05
     83e:	28 17       	cp	r18, r24
     840:	39 07       	cpc	r19, r25
     842:	64 f4       	brge	.+24     	; 0x85c <fputc+0x3c>
     844:	e8 81       	ld	r30, Y
     846:	f9 81       	ldd	r31, Y+1	; 0x01
     848:	01 93       	st	Z+, r16
     84a:	f9 83       	std	Y+1, r31	; 0x01
     84c:	e8 83       	st	Y, r30
     84e:	06 c0       	rjmp	.+12     	; 0x85c <fputc+0x3c>
     850:	e8 85       	ldd	r30, Y+8	; 0x08
     852:	f9 85       	ldd	r31, Y+9	; 0x09
     854:	80 2f       	mov	r24, r16
     856:	09 95       	icall
     858:	89 2b       	or	r24, r25
     85a:	31 f4       	brne	.+12     	; 0x868 <__stack+0x9>
     85c:	8e 81       	ldd	r24, Y+6	; 0x06
     85e:	9f 81       	ldd	r25, Y+7	; 0x07
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	9f 83       	std	Y+7, r25	; 0x07
     864:	8e 83       	std	Y+6, r24	; 0x06
     866:	02 c0       	rjmp	.+4      	; 0x86c <__stack+0xd>
     868:	0f ef       	ldi	r16, 0xFF	; 255
     86a:	1f ef       	ldi	r17, 0xFF	; 255
     86c:	c8 01       	movw	r24, r16
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	08 95       	ret

00000878 <__ultoa_invert>:
     878:	fa 01       	movw	r30, r20
     87a:	aa 27       	eor	r26, r26
     87c:	28 30       	cpi	r18, 0x08	; 8
     87e:	51 f1       	breq	.+84     	; 0x8d4 <__ultoa_invert+0x5c>
     880:	20 31       	cpi	r18, 0x10	; 16
     882:	81 f1       	breq	.+96     	; 0x8e4 <__ultoa_invert+0x6c>
     884:	e8 94       	clt
     886:	6f 93       	push	r22
     888:	6e 7f       	andi	r22, 0xFE	; 254
     88a:	6e 5f       	subi	r22, 0xFE	; 254
     88c:	7f 4f       	sbci	r23, 0xFF	; 255
     88e:	8f 4f       	sbci	r24, 0xFF	; 255
     890:	9f 4f       	sbci	r25, 0xFF	; 255
     892:	af 4f       	sbci	r26, 0xFF	; 255
     894:	b1 e0       	ldi	r27, 0x01	; 1
     896:	3e d0       	rcall	.+124    	; 0x914 <__ultoa_invert+0x9c>
     898:	b4 e0       	ldi	r27, 0x04	; 4
     89a:	3c d0       	rcall	.+120    	; 0x914 <__ultoa_invert+0x9c>
     89c:	67 0f       	add	r22, r23
     89e:	78 1f       	adc	r23, r24
     8a0:	89 1f       	adc	r24, r25
     8a2:	9a 1f       	adc	r25, r26
     8a4:	a1 1d       	adc	r26, r1
     8a6:	68 0f       	add	r22, r24
     8a8:	79 1f       	adc	r23, r25
     8aa:	8a 1f       	adc	r24, r26
     8ac:	91 1d       	adc	r25, r1
     8ae:	a1 1d       	adc	r26, r1
     8b0:	6a 0f       	add	r22, r26
     8b2:	71 1d       	adc	r23, r1
     8b4:	81 1d       	adc	r24, r1
     8b6:	91 1d       	adc	r25, r1
     8b8:	a1 1d       	adc	r26, r1
     8ba:	20 d0       	rcall	.+64     	; 0x8fc <__ultoa_invert+0x84>
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <__ultoa_invert+0x48>
     8be:	68 94       	set
     8c0:	3f 91       	pop	r19
     8c2:	2a e0       	ldi	r18, 0x0A	; 10
     8c4:	26 9f       	mul	r18, r22
     8c6:	11 24       	eor	r1, r1
     8c8:	30 19       	sub	r19, r0
     8ca:	30 5d       	subi	r19, 0xD0	; 208
     8cc:	31 93       	st	Z+, r19
     8ce:	de f6       	brtc	.-74     	; 0x886 <__ultoa_invert+0xe>
     8d0:	cf 01       	movw	r24, r30
     8d2:	08 95       	ret
     8d4:	46 2f       	mov	r20, r22
     8d6:	47 70       	andi	r20, 0x07	; 7
     8d8:	40 5d       	subi	r20, 0xD0	; 208
     8da:	41 93       	st	Z+, r20
     8dc:	b3 e0       	ldi	r27, 0x03	; 3
     8de:	0f d0       	rcall	.+30     	; 0x8fe <__ultoa_invert+0x86>
     8e0:	c9 f7       	brne	.-14     	; 0x8d4 <__ultoa_invert+0x5c>
     8e2:	f6 cf       	rjmp	.-20     	; 0x8d0 <__ultoa_invert+0x58>
     8e4:	46 2f       	mov	r20, r22
     8e6:	4f 70       	andi	r20, 0x0F	; 15
     8e8:	40 5d       	subi	r20, 0xD0	; 208
     8ea:	4a 33       	cpi	r20, 0x3A	; 58
     8ec:	18 f0       	brcs	.+6      	; 0x8f4 <__ultoa_invert+0x7c>
     8ee:	49 5d       	subi	r20, 0xD9	; 217
     8f0:	31 fd       	sbrc	r19, 1
     8f2:	40 52       	subi	r20, 0x20	; 32
     8f4:	41 93       	st	Z+, r20
     8f6:	02 d0       	rcall	.+4      	; 0x8fc <__ultoa_invert+0x84>
     8f8:	a9 f7       	brne	.-22     	; 0x8e4 <__ultoa_invert+0x6c>
     8fa:	ea cf       	rjmp	.-44     	; 0x8d0 <__ultoa_invert+0x58>
     8fc:	b4 e0       	ldi	r27, 0x04	; 4
     8fe:	a6 95       	lsr	r26
     900:	97 95       	ror	r25
     902:	87 95       	ror	r24
     904:	77 95       	ror	r23
     906:	67 95       	ror	r22
     908:	ba 95       	dec	r27
     90a:	c9 f7       	brne	.-14     	; 0x8fe <__ultoa_invert+0x86>
     90c:	00 97       	sbiw	r24, 0x00	; 0
     90e:	61 05       	cpc	r22, r1
     910:	71 05       	cpc	r23, r1
     912:	08 95       	ret
     914:	9b 01       	movw	r18, r22
     916:	ac 01       	movw	r20, r24
     918:	0a 2e       	mov	r0, r26
     91a:	06 94       	lsr	r0
     91c:	57 95       	ror	r21
     91e:	47 95       	ror	r20
     920:	37 95       	ror	r19
     922:	27 95       	ror	r18
     924:	ba 95       	dec	r27
     926:	c9 f7       	brne	.-14     	; 0x91a <__ultoa_invert+0xa2>
     928:	62 0f       	add	r22, r18
     92a:	73 1f       	adc	r23, r19
     92c:	84 1f       	adc	r24, r20
     92e:	95 1f       	adc	r25, r21
     930:	a0 1d       	adc	r26, r0
     932:	08 95       	ret

00000934 <delay_ms>:
uchar cmd_buf[100];

/**
 * Some basic delay function
 */
void delay_ms(unsigned short ms) {
     934:	df 93       	push	r29
     936:	cf 93       	push	r28
     938:	00 d0       	rcall	.+0      	; 0x93a <delay_ms+0x6>
     93a:	00 d0       	rcall	.+0      	; 0x93c <delay_ms+0x8>
     93c:	00 d0       	rcall	.+0      	; 0x93e <delay_ms+0xa>
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	9e 83       	std	Y+6, r25	; 0x06
     944:	8d 83       	std	Y+5, r24	; 0x05
	unsigned short outer1, outer2;
	outer1 = 200 * 12;
     946:	80 e6       	ldi	r24, 0x60	; 96
     948:	99 e0       	ldi	r25, 0x09	; 9
     94a:	9c 83       	std	Y+4, r25	; 0x04
     94c:	8b 83       	std	Y+3, r24	; 0x03
     94e:	1c c0       	rjmp	.+56     	; 0x988 <delay_ms+0x54>

	while (outer1) {
		outer2 = 100;
     950:	84 e6       	ldi	r24, 0x64	; 100
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	9a 83       	std	Y+2, r25	; 0x02
     956:	89 83       	std	Y+1, r24	; 0x01
     958:	0e c0       	rjmp	.+28     	; 0x976 <delay_ms+0x42>
		while (outer2) {
			while (ms)
				ms--;
     95a:	8d 81       	ldd	r24, Y+5	; 0x05
     95c:	9e 81       	ldd	r25, Y+6	; 0x06
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	9e 83       	std	Y+6, r25	; 0x06
     962:	8d 83       	std	Y+5, r24	; 0x05
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
			while (ms)
     964:	8d 81       	ldd	r24, Y+5	; 0x05
     966:	9e 81       	ldd	r25, Y+6	; 0x06
     968:	00 97       	sbiw	r24, 0x00	; 0
     96a:	b9 f7       	brne	.-18     	; 0x95a <delay_ms+0x26>
				ms--;
			outer2--;
     96c:	89 81       	ldd	r24, Y+1	; 0x01
     96e:	9a 81       	ldd	r25, Y+2	; 0x02
     970:	01 97       	sbiw	r24, 0x01	; 1
     972:	9a 83       	std	Y+2, r25	; 0x02
     974:	89 83       	std	Y+1, r24	; 0x01
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	9a 81       	ldd	r25, Y+2	; 0x02
     97a:	00 97       	sbiw	r24, 0x00	; 0
     97c:	99 f7       	brne	.-26     	; 0x964 <delay_ms+0x30>
			while (ms)
				ms--;
			outer2--;
		}
		outer1--;
     97e:	8b 81       	ldd	r24, Y+3	; 0x03
     980:	9c 81       	ldd	r25, Y+4	; 0x04
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	9c 83       	std	Y+4, r25	; 0x04
     986:	8b 83       	std	Y+3, r24	; 0x03
 */
void delay_ms(unsigned short ms) {
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
     988:	8b 81       	ldd	r24, Y+3	; 0x03
     98a:	9c 81       	ldd	r25, Y+4	; 0x04
     98c:	00 97       	sbiw	r24, 0x00	; 0
     98e:	01 f7       	brne	.-64     	; 0x950 <delay_ms+0x1c>
				ms--;
			outer2--;
		}
		outer1--;
	}
}
     990:	26 96       	adiw	r28, 0x06	; 6
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	f8 94       	cli
     996:	de bf       	out	0x3e, r29	; 62
     998:	0f be       	out	0x3f, r0	; 63
     99a:	cd bf       	out	0x3d, r28	; 61
     99c:	cf 91       	pop	r28
     99e:	df 91       	pop	r29
     9a0:	08 95       	ret

000009a2 <gpib_init>:
 * Init GPIB pins and variables.
 * \brief All signal lines not related to the controller part
 * 		are initialized with useful values.
 *		(The controller part initialization is done on gpib_controller_assert())
 */
void gpib_init(void) {
     9a2:	df 93       	push	r29
     9a4:	cf 93       	push	r28
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
	// data lines - complete port A as input
	DDRA = 0x00;
     9aa:	ea e3       	ldi	r30, 0x3A	; 58
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	10 82       	st	Z, r1

	// handshake lines - on port D , everything as input
	DDRD &= ~_BV(G_DAV); // DAV 
     9b0:	a1 e3       	ldi	r26, 0x31	; 49
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	e1 e3       	ldi	r30, 0x31	; 49
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	80 81       	ld	r24, Z
     9ba:	8b 7f       	andi	r24, 0xFB	; 251
     9bc:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_EOI); // EOI 
     9be:	a1 e3       	ldi	r26, 0x31	; 49
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	e1 e3       	ldi	r30, 0x31	; 49
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	80 81       	ld	r24, Z
     9c8:	8f 7e       	andi	r24, 0xEF	; 239
     9ca:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_SRQ); // SRQ 
     9cc:	a1 e3       	ldi	r26, 0x31	; 49
     9ce:	b0 e0       	ldi	r27, 0x00	; 0
     9d0:	e1 e3       	ldi	r30, 0x31	; 49
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	80 81       	ld	r24, Z
     9d6:	8f 7b       	andi	r24, 0xBF	; 191
     9d8:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_ATN); // ATN  
     9da:	a1 e3       	ldi	r26, 0x31	; 49
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	e1 e3       	ldi	r30, 0x31	; 49
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	8f 77       	andi	r24, 0x7F	; 127
     9e6:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_REN); // REN  
     9e8:	a7 e3       	ldi	r26, 0x37	; 55
     9ea:	b0 e0       	ldi	r27, 0x00	; 0
     9ec:	e7 e3       	ldi	r30, 0x37	; 55
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	80 81       	ld	r24, Z
     9f2:	8d 7f       	andi	r24, 0xFD	; 253
     9f4:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_IFC); // IFC  
     9f6:	a7 e3       	ldi	r26, 0x37	; 55
     9f8:	b0 e0       	ldi	r27, 0x00	; 0
     9fa:	e7 e3       	ldi	r30, 0x37	; 55
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	80 81       	ld	r24, Z
     a00:	8e 7f       	andi	r24, 0xFE	; 254
     a02:	8c 93       	st	X, r24

	// init handshake lines
	assign_bit(DDRD, PORTD, G_NRFD);
     a04:	a2 e3       	ldi	r26, 0x32	; 50
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	e2 e3       	ldi	r30, 0x32	; 50
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 81       	ld	r24, Z
     a0e:	87 7f       	andi	r24, 0xF7	; 247
     a10:	8c 93       	st	X, r24
     a12:	a1 e3       	ldi	r26, 0x31	; 49
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	e1 e3       	ldi	r30, 0x31	; 49
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	80 81       	ld	r24, Z
     a1c:	88 60       	ori	r24, 0x08	; 8
     a1e:	8c 93       	st	X, r24
     a20:	a2 e3       	ldi	r26, 0x32	; 50
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	e2 e3       	ldi	r30, 0x32	; 50
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	87 7f       	andi	r24, 0xF7	; 247
     a2c:	8c 93       	st	X, r24
	// not ready for data now
	release_bit(DDRD, PORTD, G_NDAC);
     a2e:	a1 e3       	ldi	r26, 0x31	; 49
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	e1 e3       	ldi	r30, 0x31	; 49
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 81       	ld	r24, Z
     a38:	8f 7d       	andi	r24, 0xDF	; 223
     a3a:	8c 93       	st	X, r24
     a3c:	a2 e3       	ldi	r26, 0x32	; 50
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	e2 e3       	ldi	r30, 0x32	; 50
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	80 81       	ld	r24, Z
     a46:	80 62       	ori	r24, 0x20	; 32
     a48:	8c 93       	st	X, r24
	// initially: ok so far
}
     a4a:	cf 91       	pop	r28
     a4c:	df 91       	pop	r29
     a4e:	08 95       	ret

00000a50 <gpib_receive>:
 *  \returns		On any error, 0xff is returned. in this case, the value of parameter *_byte is undefined.
 * 		Otherwise the value of the EOI signal line during read is returned. If EOI was assigned, a 0x01 is
 * 		returned. If EOI was not assigned, a 0x00 is returned. Assignment of EOI means that the talker
 * 		is sending the last character for this transmission.
 */
uchar gpib_receive(uchar* _byte) {
     a50:	df 93       	push	r29
     a52:	cf 93       	push	r28
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	27 97       	sbiw	r28, 0x07	; 7
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	9e 83       	std	Y+6, r25	; 0x06
     a66:	8d 83       	std	Y+5, r24	; 0x05
	int timeout;
	uchar byte, eoi;

	//uart_puts("\n\rgpib_receive()\n\r");

	if (controller.talks == 1) {
     a68:	80 91 a7 03 	lds	r24, 0x03A7
     a6c:	81 30       	cpi	r24, 0x01	; 1
     a6e:	39 f4       	brne	.+14     	; 0xa7e <gpib_receive+0x2e>
		*_byte = 0xff;
     a70:	ed 81       	ldd	r30, Y+5	; 0x05
     a72:	fe 81       	ldd	r31, Y+6	; 0x06
     a74:	8f ef       	ldi	r24, 0xFF	; 255
     a76:	80 83       	st	Z, r24
		return 0xff;
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	8f 83       	std	Y+7, r24	; 0x07
     a7c:	c6 c0       	rjmp	.+396    	; 0xc0a <gpib_receive+0x1ba>
	}

	// handshake: set nrfd, means i am ready to receive some data
	release_bit(DDRD, PORTD, G_NRFD);
     a7e:	a1 e3       	ldi	r26, 0x31	; 49
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	e1 e3       	ldi	r30, 0x31	; 49
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	80 81       	ld	r24, Z
     a88:	87 7f       	andi	r24, 0xF7	; 247
     a8a:	8c 93       	st	X, r24
     a8c:	a2 e3       	ldi	r26, 0x32	; 50
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e2 e3       	ldi	r30, 0x32	; 50
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	80 81       	ld	r24, Z
     a96:	88 60       	ori	r24, 0x08	; 8
     a98:	8c 93       	st	X, r24
	assign_bit(DDRD, PORTD, G_NDAC);
     a9a:	a2 e3       	ldi	r26, 0x32	; 50
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e2 e3       	ldi	r30, 0x32	; 50
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	80 81       	ld	r24, Z
     aa4:	8f 7d       	andi	r24, 0xDF	; 223
     aa6:	8c 93       	st	X, r24
     aa8:	a1 e3       	ldi	r26, 0x31	; 49
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	e1 e3       	ldi	r30, 0x31	; 49
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	80 62       	ori	r24, 0x20	; 32
     ab4:	8c 93       	st	X, r24
     ab6:	a2 e3       	ldi	r26, 0x32	; 50
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	e2 e3       	ldi	r30, 0x32	; 50
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	80 81       	ld	r24, Z
     ac0:	8f 7d       	andi	r24, 0xDF	; 223
     ac2:	8c 93       	st	X, r24

	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     ac4:	80 91 13 05 	lds	r24, 0x0513
     ac8:	88 2f       	mov	r24, r24
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	05 96       	adiw	r24, 0x05	; 5
     ace:	9c 83       	std	Y+4, r25	; 0x04
     ad0:	8b 83       	std	Y+3, r24	; 0x03
     ad2:	10 c0       	rjmp	.+32     	; 0xaf4 <gpib_receive+0xa4>
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     ad4:	80 91 13 05 	lds	r24, 0x0513
     ad8:	28 2f       	mov	r18, r24
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	8b 81       	ldd	r24, Y+3	; 0x03
     ade:	9c 81       	ldd	r25, Y+4	; 0x04
     ae0:	28 17       	cp	r18, r24
     ae2:	39 07       	cpc	r19, r25
     ae4:	39 f4       	brne	.+14     	; 0xaf4 <gpib_receive+0xa4>
			uart_puts("\n\rError: DAV timeout (1)\n\r");
     ae6:	80 e6       	ldi	r24, 0x60	; 96
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>
			return 0xff;
     aee:	8f ef       	ldi	r24, 0xFF	; 255
     af0:	8f 83       	std	Y+7, r24	; 0x07
     af2:	8b c0       	rjmp	.+278    	; 0xc0a <gpib_receive+0x1ba>
	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
     af4:	e0 e3       	ldi	r30, 0x30	; 48
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	80 81       	ld	r24, Z
     afa:	88 2f       	mov	r24, r24
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	84 70       	andi	r24, 0x04	; 4
     b00:	90 70       	andi	r25, 0x00	; 0
     b02:	00 97       	sbiw	r24, 0x00	; 0
     b04:	49 f0       	breq	.+18     	; 0xb18 <gpib_receive+0xc8>
     b06:	80 91 13 05 	lds	r24, 0x0513
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	8b 81       	ldd	r24, Y+3	; 0x03
     b10:	9c 81       	ldd	r25, Y+4	; 0x04
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	f4 f6       	brge	.-68     	; 0xad4 <gpib_receive+0x84>
#else
	loop_until_bit_is_clear(PIND,G_DAV);
#endif

	// handshake: clear NRFD, means i am busy now to read data
	assign_bit(DDRD, PORTD, G_NRFD);
     b18:	a2 e3       	ldi	r26, 0x32	; 50
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
     b1c:	e2 e3       	ldi	r30, 0x32	; 50
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	80 81       	ld	r24, Z
     b22:	87 7f       	andi	r24, 0xF7	; 247
     b24:	8c 93       	st	X, r24
     b26:	a1 e3       	ldi	r26, 0x31	; 49
     b28:	b0 e0       	ldi	r27, 0x00	; 0
     b2a:	e1 e3       	ldi	r30, 0x31	; 49
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	80 81       	ld	r24, Z
     b30:	88 60       	ori	r24, 0x08	; 8
     b32:	8c 93       	st	X, r24
     b34:	a2 e3       	ldi	r26, 0x32	; 50
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	e2 e3       	ldi	r30, 0x32	; 50
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	80 81       	ld	r24, Z
     b3e:	87 7f       	andi	r24, 0xF7	; 247
     b40:	8c 93       	st	X, r24
	// read data
	byte = PINA ^ 0xff;
     b42:	e9 e3       	ldi	r30, 0x39	; 57
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	80 95       	com	r24
     b4a:	8a 83       	std	Y+2, r24	; 0x02

	// handshake: set ndac, means i have completed/accepted the read
	release_bit(DDRD, PORTD, G_NDAC);
     b4c:	a1 e3       	ldi	r26, 0x31	; 49
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	e1 e3       	ldi	r30, 0x31	; 49
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	8f 7d       	andi	r24, 0xDF	; 223
     b58:	8c 93       	st	X, r24
     b5a:	a2 e3       	ldi	r26, 0x32	; 50
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e2 e3       	ldi	r30, 0x32	; 50
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 62       	ori	r24, 0x20	; 32
     b66:	8c 93       	st	X, r24

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     b68:	80 91 13 05 	lds	r24, 0x0513
     b6c:	88 2f       	mov	r24, r24
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	05 96       	adiw	r24, 0x05	; 5
     b72:	9c 83       	std	Y+4, r25	; 0x04
     b74:	8b 83       	std	Y+3, r24	; 0x03
     b76:	10 c0       	rjmp	.+32     	; 0xb98 <gpib_receive+0x148>
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     b78:	80 91 13 05 	lds	r24, 0x0513
     b7c:	28 2f       	mov	r18, r24
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	8b 81       	ldd	r24, Y+3	; 0x03
     b82:	9c 81       	ldd	r25, Y+4	; 0x04
     b84:	28 17       	cp	r18, r24
     b86:	39 07       	cpc	r19, r25
     b88:	39 f4       	brne	.+14     	; 0xb98 <gpib_receive+0x148>
			uart_puts("\n\rError: DAV timeout (2)\n\r");
     b8a:	8b e7       	ldi	r24, 0x7B	; 123
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>
			return 0xff;
     b92:	8f ef       	ldi	r24, 0xFF	; 255
     b94:	8f 83       	std	Y+7, r24	; 0x07
     b96:	39 c0       	rjmp	.+114    	; 0xc0a <gpib_receive+0x1ba>
	release_bit(DDRD, PORTD, G_NDAC);

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
     b98:	e0 e3       	ldi	r30, 0x30	; 48
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	84 70       	andi	r24, 0x04	; 4
     ba4:	90 70       	andi	r25, 0x00	; 0
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	49 f4       	brne	.+18     	; 0xbbc <gpib_receive+0x16c>
     baa:	80 91 13 05 	lds	r24, 0x0513
     bae:	28 2f       	mov	r18, r24
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	9c 81       	ldd	r25, Y+4	; 0x04
     bb6:	82 17       	cp	r24, r18
     bb8:	93 07       	cpc	r25, r19
     bba:	f4 f6       	brge	.-68     	; 0xb78 <gpib_receive+0x128>
	}
#else
	loop_until_bit_is_set(PIND,G_DAV);
#endif
	// handshake: clear ndac (this is a prerequisite for receive next byte)
	assign_bit(DDRD, PORTD, G_NDAC);
     bbc:	a2 e3       	ldi	r26, 0x32	; 50
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e2 e3       	ldi	r30, 0x32	; 50
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	8f 7d       	andi	r24, 0xDF	; 223
     bc8:	8c 93       	st	X, r24
     bca:	a1 e3       	ldi	r26, 0x31	; 49
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e1 e3       	ldi	r30, 0x31	; 49
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	80 62       	ori	r24, 0x20	; 32
     bd6:	8c 93       	st	X, r24
     bd8:	a2 e3       	ldi	r26, 0x32	; 50
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e2 e3       	ldi	r30, 0x32	; 50
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	8f 7d       	andi	r24, 0xDF	; 223
     be4:	8c 93       	st	X, r24

	// check if last byte of transmission
	eoi = bit_is_clear(PIND, G_EOI);
     be6:	e0 e3       	ldi	r30, 0x30	; 48
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	88 2f       	mov	r24, r24
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	80 71       	andi	r24, 0x10	; 16
     bf2:	90 70       	andi	r25, 0x00	; 0
     bf4:	19 82       	std	Y+1, r1	; 0x01
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	11 f4       	brne	.+4      	; 0xbfe <gpib_receive+0x1ae>
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	89 83       	std	Y+1, r24	; 0x01

	*_byte = byte;
     bfe:	ed 81       	ldd	r30, Y+5	; 0x05
     c00:	fe 81       	ldd	r31, Y+6	; 0x06
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	80 83       	st	Z, r24

	return eoi;
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	8f 83       	std	Y+7, r24	; 0x07
     c0a:	8f 81       	ldd	r24, Y+7	; 0x07
}
     c0c:	27 96       	adiw	r28, 0x07	; 7
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	cf 91       	pop	r28
     c1a:	df 91       	pop	r29
     c1c:	08 95       	ret

00000c1e <gpib_controller_assign>:
 * You have to change the initialization of the partner array according to your environment.
 * The partners-array is used by gpib_serial_poll() for looping over all existing devices.
 * 
 * \param address the address to be used by the controller. Usually 0x00.
 */
void gpib_controller_assign(uchar address) {
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	0f 92       	push	r0
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	89 83       	std	Y+1, r24	; 0x01
	controller.myaddress = address;
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	80 93 a4 03 	sts	0x03A4, r24
	controller.talks = 0;
     c30:	10 92 a7 03 	sts	0x03A7, r1
	controller.partner.primary = ADDRESS_NOT_SET; // init default active partner
     c34:	8f ef       	ldi	r24, 0xFF	; 255
     c36:	80 93 a5 03 	sts	0x03A5, r24
	controller.partner.secondary = ADDRESS_NOT_SET;
     c3a:	8f ef       	ldi	r24, 0xFF	; 255
     c3c:	80 93 a6 03 	sts	0x03A6, r24
	controller.flavour = FLAVOUR_NONE;
     c40:	10 92 a8 03 	sts	0x03A8, r1
	/** clear list of partners */
	gpib_clear_partners();
     c44:	0e 94 75 0c 	call	0x18ea	; 0x18ea <gpib_clear_partners>
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     c48:	a8 e3       	ldi	r26, 0x38	; 56
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e8 e3       	ldi	r30, 0x38	; 56
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	8e 7f       	andi	r24, 0xFE	; 254
     c54:	8c 93       	st	X, r24
     c56:	a7 e3       	ldi	r26, 0x37	; 55
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e7 e3       	ldi	r30, 0x37	; 55
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	81 60       	ori	r24, 0x01	; 1
     c62:	8c 93       	st	X, r24
     c64:	a8 e3       	ldi	r26, 0x38	; 56
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e8 e3       	ldi	r30, 0x38	; 56
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	8e 7f       	andi	r24, 0xFE	; 254
     c70:	8c 93       	st	X, r24
	delay_ms(200);
     c72:	88 ec       	ldi	r24, 0xC8	; 200
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 9a 04 	call	0x934	; 0x934 <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     c7a:	a7 e3       	ldi	r26, 0x37	; 55
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e7 e3       	ldi	r30, 0x37	; 55
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	8e 7f       	andi	r24, 0xFE	; 254
     c86:	8c 93       	st	X, r24
     c88:	a8 e3       	ldi	r26, 0x38	; 56
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e8 e3       	ldi	r30, 0x38	; 56
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	81 60       	ori	r24, 0x01	; 1
     c94:	8c 93       	st	X, r24
	// set up all devices for remote control
	assign_bit(DDRB, PORTB, G_REN);
     c96:	a8 e3       	ldi	r26, 0x38	; 56
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e8 e3       	ldi	r30, 0x38	; 56
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	8d 7f       	andi	r24, 0xFD	; 253
     ca2:	8c 93       	st	X, r24
     ca4:	a7 e3       	ldi	r26, 0x37	; 55
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e7 e3       	ldi	r30, 0x37	; 55
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	82 60       	ori	r24, 0x02	; 2
     cb0:	8c 93       	st	X, r24
     cb2:	a8 e3       	ldi	r26, 0x38	; 56
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e8 e3       	ldi	r30, 0x38	; 56
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8d 7f       	andi	r24, 0xFD	; 253
     cbe:	8c 93       	st	X, r24

	// DCL - device clear for all devices on bus
	cmd_buf[0] = G_CMD_DCL;
     cc0:	84 e1       	ldi	r24, 0x14	; 20
     cc2:	80 93 5e 04 	sts	0x045E, r24
	gpib_cmd(cmd_buf, 1);
     cc6:	8e e5       	ldi	r24, 0x5E	; 94
     cc8:	94 e0       	ldi	r25, 0x04	; 4
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
}
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <gpib_controller_release>:

/**
 * Release bus 
 */
void gpib_controller_release(void) {
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     ce2:	a8 e3       	ldi	r26, 0x38	; 56
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e8 e3       	ldi	r30, 0x38	; 56
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8e 7f       	andi	r24, 0xFE	; 254
     cee:	8c 93       	st	X, r24
     cf0:	a7 e3       	ldi	r26, 0x37	; 55
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e7 e3       	ldi	r30, 0x37	; 55
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	81 60       	ori	r24, 0x01	; 1
     cfc:	8c 93       	st	X, r24
     cfe:	a8 e3       	ldi	r26, 0x38	; 56
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e8 e3       	ldi	r30, 0x38	; 56
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8e 7f       	andi	r24, 0xFE	; 254
     d0a:	8c 93       	st	X, r24
	delay_ms(200);
     d0c:	88 ec       	ldi	r24, 0xC8	; 200
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 9a 04 	call	0x934	; 0x934 <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     d14:	a7 e3       	ldi	r26, 0x37	; 55
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e7 e3       	ldi	r30, 0x37	; 55
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	8e 7f       	andi	r24, 0xFE	; 254
     d20:	8c 93       	st	X, r24
     d22:	a8 e3       	ldi	r26, 0x38	; 56
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e8 e3       	ldi	r30, 0x38	; 56
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	81 60       	ori	r24, 0x01	; 1
     d2e:	8c 93       	st	X, r24
	// set up all devices for local control
	release_bit(DDRB, PORTB, G_REN);
     d30:	a7 e3       	ldi	r26, 0x37	; 55
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e7 e3       	ldi	r30, 0x37	; 55
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	8d 7f       	andi	r24, 0xFD	; 253
     d3c:	8c 93       	st	X, r24
     d3e:	a8 e3       	ldi	r26, 0x38	; 56
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e8 e3       	ldi	r30, 0x38	; 56
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	82 60       	ori	r24, 0x02	; 2
     d4a:	8c 93       	st	X, r24
}
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <gpib_write>:

/**
 * Write GPIB string to bus
 * \brief See _gpib_write() for further information.
 */
uchar gpib_write(uchar *bytes, int length) {
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	00 d0       	rcall	.+0      	; 0xd58 <gpib_write+0x6>
     d58:	00 d0       	rcall	.+0      	; 0xd5a <gpib_write+0x8>
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	9a 83       	std	Y+2, r25	; 0x02
     d60:	89 83       	std	Y+1, r24	; 0x01
     d62:	7c 83       	std	Y+4, r23	; 0x04
     d64:	6b 83       	std	Y+3, r22	; 0x03
	// set attention arg false for ordinary strings
	return _gpib_write(bytes, length, (uchar) 0);
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	9a 81       	ldd	r25, Y+2	; 0x02
     d6a:	2b 81       	ldd	r18, Y+3	; 0x03
     d6c:	3c 81       	ldd	r19, Y+4	; 0x04
     d6e:	b9 01       	movw	r22, r18
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_gpib_write>
}
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <gpib_cmd>:

/**
 * Write GPIB command to bus
 * \brief See _gpib_write() for further information.
 */
uchar gpib_cmd(uchar *bytes, int length) {
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	00 d0       	rcall	.+0      	; 0xd8a <gpib_cmd+0x6>
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <gpib_cmd+0x8>
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	7c 83       	std	Y+4, r23	; 0x04
     d96:	6b 83       	std	Y+3, r22	; 0x03
	// set attention arg true for commands
	return _gpib_write(bytes, length, (uchar) 1);
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	9a 81       	ldd	r25, Y+2	; 0x02
     d9c:	2b 81       	ldd	r18, Y+3	; 0x03
     d9e:	3c 81       	ldd	r19, Y+4	; 0x04
     da0:	b9 01       	movw	r22, r18
     da2:	41 e0       	ldi	r20, 0x01	; 1
     da4:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_gpib_write>
}
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <_gpib_write>:
 * \param length length of valid bytes in byte array or zero.
 * for binary data, lenght must be defined. For strings, length can be set to zero. Then the length of
 * the string is calculated internally.
 * \param attention attention tur means assign ATN signal line during write.
 */
static uchar _gpib_write(uchar *bytes, int length, uchar attention) {
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	2b 97       	sbiw	r28, 0x0b	; 11
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	9f 83       	std	Y+7, r25	; 0x07
     dcc:	8e 83       	std	Y+6, r24	; 0x06
     dce:	79 87       	std	Y+9, r23	; 0x09
     dd0:	68 87       	std	Y+8, r22	; 0x08
     dd2:	4a 87       	std	Y+10, r20	; 0x0a
	int i;
	int timeout;

	// set talks state. This is used by ISR to recognize own talk
	// (controller must not talk to itself and must not take part in listener handshake when talking)
	controller.talks = 1;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	80 93 a7 03 	sts	0x03A7, r24

	if (attention) {
     dda:	8a 85       	ldd	r24, Y+10	; 0x0a
     ddc:	88 23       	and	r24, r24
     dde:	a9 f0       	breq	.+42     	; 0xe0a <_gpib_write+0x54>
		//uart_puts("\n\rgpib_controller_write()\n\r");
		// assign ATN for commands
		assign_bit(DDRD, PORTD, G_ATN);
     de0:	a2 e3       	ldi	r26, 0x32	; 50
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e2 e3       	ldi	r30, 0x32	; 50
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	8f 77       	andi	r24, 0x7F	; 127
     dec:	8c 93       	st	X, r24
     dee:	a1 e3       	ldi	r26, 0x31	; 49
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e1 e3       	ldi	r30, 0x31	; 49
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	80 68       	ori	r24, 0x80	; 128
     dfa:	8c 93       	st	X, r24
     dfc:	a2 e3       	ldi	r26, 0x32	; 50
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e2 e3       	ldi	r30, 0x32	; 50
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	8f 77       	andi	r24, 0x7F	; 127
     e08:	8c 93       	st	X, r24
	}

	if (length == 0) {
     e0a:	88 85       	ldd	r24, Y+8	; 0x08
     e0c:	99 85       	ldd	r25, Y+9	; 0x09
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	31 f4       	brne	.+12     	; 0xe1e <_gpib_write+0x68>
		// length==0 means this is a common C string, null-terminated.
		// then, length can be easily calculated
		length = strlen((char*) bytes);
     e12:	8e 81       	ldd	r24, Y+6	; 0x06
     e14:	9f 81       	ldd	r25, Y+7	; 0x07
     e16:	0e 94 b6 01 	call	0x36c	; 0x36c <strlen>
     e1a:	99 87       	std	Y+9, r25	; 0x09
     e1c:	88 87       	std	Y+8, r24	; 0x08
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif
	// release EOI during transmission
	release_bit(DDRD, PORTD, G_EOI);
     e1e:	a1 e3       	ldi	r26, 0x31	; 49
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e1 e3       	ldi	r30, 0x31	; 49
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	8f 7e       	andi	r24, 0xEF	; 239
     e2a:	8c 93       	st	X, r24
     e2c:	a2 e3       	ldi	r26, 0x32	; 50
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e2 e3       	ldi	r30, 0x32	; 50
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	80 61       	ori	r24, 0x10	; 16
     e38:	8c 93       	st	X, r24
	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
     e3a:	a1 e3       	ldi	r26, 0x31	; 49
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e1 e3       	ldi	r30, 0x31	; 49
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8b 7f       	andi	r24, 0xFB	; 251
     e46:	8c 93       	st	X, r24
     e48:	a2 e3       	ldi	r26, 0x32	; 50
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e2 e3       	ldi	r30, 0x32	; 50
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	84 60       	ori	r24, 0x04	; 4
     e54:	8c 93       	st	X, r24
	// release NRFD (just to be sure)
	release_bit(DDRD, PORTD, G_NRFD);
     e56:	a1 e3       	ldi	r26, 0x31	; 49
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e1 e3       	ldi	r30, 0x31	; 49
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	87 7f       	andi	r24, 0xF7	; 247
     e62:	8c 93       	st	X, r24
     e64:	a2 e3       	ldi	r26, 0x32	; 50
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e2 e3       	ldi	r30, 0x32	; 50
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	88 60       	ori	r24, 0x08	; 8
     e70:	8c 93       	st	X, r24

	// bytes[0] = 'a'
	// bytes[1] = 'b'
	// length = 2
	for (i = 0; i < length; i++) {
     e72:	1c 82       	std	Y+4, r1	; 0x04
     e74:	1b 82       	std	Y+3, r1	; 0x03
     e76:	34 c2       	rjmp	.+1128   	; 0x12e0 <_gpib_write+0x52a>

		// put data on bus
		c = bytes[i];
     e78:	2b 81       	ldd	r18, Y+3	; 0x03
     e7a:	3c 81       	ldd	r19, Y+4	; 0x04
     e7c:	8e 81       	ldd	r24, Y+6	; 0x06
     e7e:	9f 81       	ldd	r25, Y+7	; 0x07
     e80:	fc 01       	movw	r30, r24
     e82:	e2 0f       	add	r30, r18
     e84:	f3 1f       	adc	r31, r19
     e86:	80 81       	ld	r24, Z
     e88:	8d 83       	std	Y+5, r24	; 0x05
		//sprintf( buf, "char: %c\n\r", c );
		//uart_puts(buf);		

		release_bit(DDRD, PORTD, G_NDAC);
     e8a:	a1 e3       	ldi	r26, 0x31	; 49
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e1 e3       	ldi	r30, 0x31	; 49
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8f 7d       	andi	r24, 0xDF	; 223
     e96:	8c 93       	st	X, r24
     e98:	a2 e3       	ldi	r26, 0x32	; 50
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e2 e3       	ldi	r30, 0x32	; 50
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 62       	ori	r24, 0x20	; 32
     ea4:	8c 93       	st	X, r24
		//uart_puts("0");
		// wait for NDAC assign from all listeners
#ifdef WITH_TIMEOUT
		timeout = s + 5;
     ea6:	80 91 13 05 	lds	r24, 0x0513
     eaa:	88 2f       	mov	r24, r24
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	05 96       	adiw	r24, 0x05	; 5
     eb0:	9a 83       	std	Y+2, r25	; 0x02
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	10 c0       	rjmp	.+32     	; 0xed6 <_gpib_write+0x120>
		//gpib_info();
		while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
			if (s == timeout) {
     eb6:	80 91 13 05 	lds	r24, 0x0513
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	9a 81       	ldd	r25, Y+2	; 0x02
     ec2:	28 17       	cp	r18, r24
     ec4:	39 07       	cpc	r19, r25
     ec6:	39 f4       	brne	.+14     	; 0xed6 <_gpib_write+0x120>
				uart_puts("\n\rError: NDAC timeout\n\r");
     ec8:	86 e9       	ldi	r24, 0x96	; 150
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>
				return 0xff;
     ed0:	8f ef       	ldi	r24, 0xFF	; 255
     ed2:	8b 87       	std	Y+11, r24	; 0x0b
     ed4:	21 c2       	rjmp	.+1090   	; 0x1318 <_gpib_write+0x562>
		//uart_puts("0");
		// wait for NDAC assign from all listeners
#ifdef WITH_TIMEOUT
		timeout = s + 5;
		//gpib_info();
		while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
     ed6:	e0 e3       	ldi	r30, 0x30	; 48
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	88 2f       	mov	r24, r24
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	80 72       	andi	r24, 0x20	; 32
     ee2:	90 70       	andi	r25, 0x00	; 0
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	49 f0       	breq	.+18     	; 0xefa <_gpib_write+0x144>
     ee8:	80 91 13 05 	lds	r24, 0x0513
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
     ef4:	82 17       	cp	r24, r18
     ef6:	93 07       	cpc	r25, r19
     ef8:	f4 f6       	brge	.-68     	; 0xeb6 <_gpib_write+0x100>
		}
#else
		loop_until_bit_is_clear(PIND,G_NDAC);
#endif

		DDRA = 0x00;
     efa:	ea e3       	ldi	r30, 0x3A	; 58
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	10 82       	st	Z, r1
		if (c & 0x01) {
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	88 2f       	mov	r24, r24
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	81 70       	andi	r24, 0x01	; 1
     f08:	90 70       	andi	r25, 0x00	; 0
     f0a:	88 23       	and	r24, r24
     f0c:	b1 f0       	breq	.+44     	; 0xf3a <_gpib_write+0x184>
			assign_bit(DDRA, PORTA, PA0);
     f0e:	ab e3       	ldi	r26, 0x3B	; 59
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	eb e3       	ldi	r30, 0x3B	; 59
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8e 7f       	andi	r24, 0xFE	; 254
     f1a:	8c 93       	st	X, r24
     f1c:	aa e3       	ldi	r26, 0x3A	; 58
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	ea e3       	ldi	r30, 0x3A	; 58
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	81 60       	ori	r24, 0x01	; 1
     f28:	8c 93       	st	X, r24
     f2a:	ab e3       	ldi	r26, 0x3B	; 59
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	eb e3       	ldi	r30, 0x3B	; 59
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8e 7f       	andi	r24, 0xFE	; 254
     f36:	8c 93       	st	X, r24
     f38:	0e c0       	rjmp	.+28     	; 0xf56 <_gpib_write+0x1a0>
		} else {
			release_bit(DDRA, PORTA, PA0)
     f3a:	aa e3       	ldi	r26, 0x3A	; 58
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	ea e3       	ldi	r30, 0x3A	; 58
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	8e 7f       	andi	r24, 0xFE	; 254
     f46:	8c 93       	st	X, r24
     f48:	ab e3       	ldi	r26, 0x3B	; 59
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	eb e3       	ldi	r30, 0x3B	; 59
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	81 60       	ori	r24, 0x01	; 1
     f54:	8c 93       	st	X, r24
		}

		if (c & 0x02) {
     f56:	8d 81       	ldd	r24, Y+5	; 0x05
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	82 70       	andi	r24, 0x02	; 2
     f5e:	90 70       	andi	r25, 0x00	; 0
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	b1 f0       	breq	.+44     	; 0xf90 <_gpib_write+0x1da>
			assign_bit(DDRA, PORTA, PA1)
     f64:	ab e3       	ldi	r26, 0x3B	; 59
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	eb e3       	ldi	r30, 0x3B	; 59
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	8d 7f       	andi	r24, 0xFD	; 253
     f70:	8c 93       	st	X, r24
     f72:	aa e3       	ldi	r26, 0x3A	; 58
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	ea e3       	ldi	r30, 0x3A	; 58
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	82 60       	ori	r24, 0x02	; 2
     f7e:	8c 93       	st	X, r24
     f80:	ab e3       	ldi	r26, 0x3B	; 59
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	eb e3       	ldi	r30, 0x3B	; 59
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	8d 7f       	andi	r24, 0xFD	; 253
     f8c:	8c 93       	st	X, r24
     f8e:	0e c0       	rjmp	.+28     	; 0xfac <_gpib_write+0x1f6>
		} else {
			release_bit(DDRA, PORTA, PA1);
     f90:	aa e3       	ldi	r26, 0x3A	; 58
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	ea e3       	ldi	r30, 0x3A	; 58
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	8d 7f       	andi	r24, 0xFD	; 253
     f9c:	8c 93       	st	X, r24
     f9e:	ab e3       	ldi	r26, 0x3B	; 59
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	eb e3       	ldi	r30, 0x3B	; 59
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	82 60       	ori	r24, 0x02	; 2
     faa:	8c 93       	st	X, r24
		}

		if (c & 0x04) {
     fac:	8d 81       	ldd	r24, Y+5	; 0x05
     fae:	88 2f       	mov	r24, r24
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	84 70       	andi	r24, 0x04	; 4
     fb4:	90 70       	andi	r25, 0x00	; 0
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	b1 f0       	breq	.+44     	; 0xfe6 <_gpib_write+0x230>
			assign_bit(DDRA, PORTA, PA2);
     fba:	ab e3       	ldi	r26, 0x3B	; 59
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	eb e3       	ldi	r30, 0x3B	; 59
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8b 7f       	andi	r24, 0xFB	; 251
     fc6:	8c 93       	st	X, r24
     fc8:	aa e3       	ldi	r26, 0x3A	; 58
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	ea e3       	ldi	r30, 0x3A	; 58
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	84 60       	ori	r24, 0x04	; 4
     fd4:	8c 93       	st	X, r24
     fd6:	ab e3       	ldi	r26, 0x3B	; 59
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	eb e3       	ldi	r30, 0x3B	; 59
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	8b 7f       	andi	r24, 0xFB	; 251
     fe2:	8c 93       	st	X, r24
     fe4:	0e c0       	rjmp	.+28     	; 0x1002 <_gpib_write+0x24c>
		} else {
			release_bit(DDRA, PORTA, PA2);
     fe6:	aa e3       	ldi	r26, 0x3A	; 58
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	ea e3       	ldi	r30, 0x3A	; 58
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	8b 7f       	andi	r24, 0xFB	; 251
     ff2:	8c 93       	st	X, r24
     ff4:	ab e3       	ldi	r26, 0x3B	; 59
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	eb e3       	ldi	r30, 0x3B	; 59
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	84 60       	ori	r24, 0x04	; 4
    1000:	8c 93       	st	X, r24
		}

		if (c & 0x08) {
    1002:	8d 81       	ldd	r24, Y+5	; 0x05
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	88 70       	andi	r24, 0x08	; 8
    100a:	90 70       	andi	r25, 0x00	; 0
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	b1 f0       	breq	.+44     	; 0x103c <_gpib_write+0x286>
			assign_bit(DDRA, PORTA, PA3);
    1010:	ab e3       	ldi	r26, 0x3B	; 59
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	eb e3       	ldi	r30, 0x3B	; 59
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	87 7f       	andi	r24, 0xF7	; 247
    101c:	8c 93       	st	X, r24
    101e:	aa e3       	ldi	r26, 0x3A	; 58
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	ea e3       	ldi	r30, 0x3A	; 58
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	88 60       	ori	r24, 0x08	; 8
    102a:	8c 93       	st	X, r24
    102c:	ab e3       	ldi	r26, 0x3B	; 59
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	eb e3       	ldi	r30, 0x3B	; 59
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	87 7f       	andi	r24, 0xF7	; 247
    1038:	8c 93       	st	X, r24
    103a:	0e c0       	rjmp	.+28     	; 0x1058 <_gpib_write+0x2a2>
		} else {
			release_bit(DDRA, PORTA, PA3);
    103c:	aa e3       	ldi	r26, 0x3A	; 58
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	ea e3       	ldi	r30, 0x3A	; 58
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	87 7f       	andi	r24, 0xF7	; 247
    1048:	8c 93       	st	X, r24
    104a:	ab e3       	ldi	r26, 0x3B	; 59
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	eb e3       	ldi	r30, 0x3B	; 59
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	88 60       	ori	r24, 0x08	; 8
    1056:	8c 93       	st	X, r24
		}

		if (c & 0x10) {
    1058:	8d 81       	ldd	r24, Y+5	; 0x05
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	80 71       	andi	r24, 0x10	; 16
    1060:	90 70       	andi	r25, 0x00	; 0
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	b1 f0       	breq	.+44     	; 0x1092 <_gpib_write+0x2dc>
			assign_bit(DDRA, PORTA, PA4);
    1066:	ab e3       	ldi	r26, 0x3B	; 59
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	eb e3       	ldi	r30, 0x3B	; 59
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8f 7e       	andi	r24, 0xEF	; 239
    1072:	8c 93       	st	X, r24
    1074:	aa e3       	ldi	r26, 0x3A	; 58
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	ea e3       	ldi	r30, 0x3A	; 58
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	80 61       	ori	r24, 0x10	; 16
    1080:	8c 93       	st	X, r24
    1082:	ab e3       	ldi	r26, 0x3B	; 59
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	eb e3       	ldi	r30, 0x3B	; 59
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	8f 7e       	andi	r24, 0xEF	; 239
    108e:	8c 93       	st	X, r24
    1090:	0e c0       	rjmp	.+28     	; 0x10ae <_gpib_write+0x2f8>
		} else {
			release_bit(DDRA, PORTA, PA4);
    1092:	aa e3       	ldi	r26, 0x3A	; 58
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	ea e3       	ldi	r30, 0x3A	; 58
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8f 7e       	andi	r24, 0xEF	; 239
    109e:	8c 93       	st	X, r24
    10a0:	ab e3       	ldi	r26, 0x3B	; 59
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	eb e3       	ldi	r30, 0x3B	; 59
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	80 61       	ori	r24, 0x10	; 16
    10ac:	8c 93       	st	X, r24
		}

		if (c & 0x20) {
    10ae:	8d 81       	ldd	r24, Y+5	; 0x05
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	80 72       	andi	r24, 0x20	; 32
    10b6:	90 70       	andi	r25, 0x00	; 0
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	b1 f0       	breq	.+44     	; 0x10e8 <_gpib_write+0x332>
			assign_bit(DDRA, PORTA, PA5);
    10bc:	ab e3       	ldi	r26, 0x3B	; 59
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	eb e3       	ldi	r30, 0x3B	; 59
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	8f 7d       	andi	r24, 0xDF	; 223
    10c8:	8c 93       	st	X, r24
    10ca:	aa e3       	ldi	r26, 0x3A	; 58
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ea e3       	ldi	r30, 0x3A	; 58
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	80 62       	ori	r24, 0x20	; 32
    10d6:	8c 93       	st	X, r24
    10d8:	ab e3       	ldi	r26, 0x3B	; 59
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	eb e3       	ldi	r30, 0x3B	; 59
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	8f 7d       	andi	r24, 0xDF	; 223
    10e4:	8c 93       	st	X, r24
    10e6:	0e c0       	rjmp	.+28     	; 0x1104 <_gpib_write+0x34e>
		} else {
			release_bit(DDRA, PORTA, PA5);
    10e8:	aa e3       	ldi	r26, 0x3A	; 58
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	ea e3       	ldi	r30, 0x3A	; 58
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	8f 7d       	andi	r24, 0xDF	; 223
    10f4:	8c 93       	st	X, r24
    10f6:	ab e3       	ldi	r26, 0x3B	; 59
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	eb e3       	ldi	r30, 0x3B	; 59
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	80 62       	ori	r24, 0x20	; 32
    1102:	8c 93       	st	X, r24
		}

		if (c & 0x40) {
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	88 2f       	mov	r24, r24
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	80 74       	andi	r24, 0x40	; 64
    110c:	90 70       	andi	r25, 0x00	; 0
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	b1 f0       	breq	.+44     	; 0x113e <_gpib_write+0x388>
			assign_bit(DDRA, PORTA, PA6);
    1112:	ab e3       	ldi	r26, 0x3B	; 59
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	eb e3       	ldi	r30, 0x3B	; 59
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	8f 7b       	andi	r24, 0xBF	; 191
    111e:	8c 93       	st	X, r24
    1120:	aa e3       	ldi	r26, 0x3A	; 58
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	ea e3       	ldi	r30, 0x3A	; 58
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	80 64       	ori	r24, 0x40	; 64
    112c:	8c 93       	st	X, r24
    112e:	ab e3       	ldi	r26, 0x3B	; 59
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	eb e3       	ldi	r30, 0x3B	; 59
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	8f 7b       	andi	r24, 0xBF	; 191
    113a:	8c 93       	st	X, r24
    113c:	0e c0       	rjmp	.+28     	; 0x115a <_gpib_write+0x3a4>
		} else {
			release_bit(DDRA, PORTA, PA6);
    113e:	aa e3       	ldi	r26, 0x3A	; 58
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	ea e3       	ldi	r30, 0x3A	; 58
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	8f 7b       	andi	r24, 0xBF	; 191
    114a:	8c 93       	st	X, r24
    114c:	ab e3       	ldi	r26, 0x3B	; 59
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	eb e3       	ldi	r30, 0x3B	; 59
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	80 64       	ori	r24, 0x40	; 64
    1158:	8c 93       	st	X, r24
		}

		if (c & 0x80) {
    115a:	8d 81       	ldd	r24, Y+5	; 0x05
    115c:	88 23       	and	r24, r24
    115e:	b4 f4       	brge	.+44     	; 0x118c <_gpib_write+0x3d6>
			assign_bit(DDRA, PORTA, PA7);
    1160:	ab e3       	ldi	r26, 0x3B	; 59
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	eb e3       	ldi	r30, 0x3B	; 59
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	8f 77       	andi	r24, 0x7F	; 127
    116c:	8c 93       	st	X, r24
    116e:	aa e3       	ldi	r26, 0x3A	; 58
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	ea e3       	ldi	r30, 0x3A	; 58
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	80 68       	ori	r24, 0x80	; 128
    117a:	8c 93       	st	X, r24
    117c:	ab e3       	ldi	r26, 0x3B	; 59
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	eb e3       	ldi	r30, 0x3B	; 59
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	8f 77       	andi	r24, 0x7F	; 127
    1188:	8c 93       	st	X, r24
    118a:	0e c0       	rjmp	.+28     	; 0x11a8 <_gpib_write+0x3f2>
		} else {
			release_bit(DDRA, PORTA, PA7);
    118c:	aa e3       	ldi	r26, 0x3A	; 58
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	ea e3       	ldi	r30, 0x3A	; 58
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	8f 77       	andi	r24, 0x7F	; 127
    1198:	8c 93       	st	X, r24
    119a:	ab e3       	ldi	r26, 0x3B	; 59
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	eb e3       	ldi	r30, 0x3B	; 59
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	80 68       	ori	r24, 0x80	; 128
    11a6:	8c 93       	st	X, r24
		}

		// wait until listeners release NRFD
		//uart_puts("1");
		release_bit(DDRD, PORTD, G_NRFD);
    11a8:	a1 e3       	ldi	r26, 0x31	; 49
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e1 e3       	ldi	r30, 0x31	; 49
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	87 7f       	andi	r24, 0xF7	; 247
    11b4:	8c 93       	st	X, r24
    11b6:	a2 e3       	ldi	r26, 0x32	; 50
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e2 e3       	ldi	r30, 0x32	; 50
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	88 60       	ori	r24, 0x08	; 8
    11c2:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
		//gpib_info();
		timeout = s + 5;
    11c4:	80 91 13 05 	lds	r24, 0x0513
    11c8:	88 2f       	mov	r24, r24
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	05 96       	adiw	r24, 0x05	; 5
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	10 c0       	rjmp	.+32     	; 0x11f4 <_gpib_write+0x43e>
		while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
			if (s == timeout) {
    11d4:	80 91 13 05 	lds	r24, 0x0513
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	9a 81       	ldd	r25, Y+2	; 0x02
    11e0:	28 17       	cp	r18, r24
    11e2:	39 07       	cpc	r19, r25
    11e4:	39 f4       	brne	.+14     	; 0x11f4 <_gpib_write+0x43e>
				uart_puts("\n\rError: NRFD timeout\n\r");
    11e6:	8e ea       	ldi	r24, 0xAE	; 174
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>
				return 0xff;
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	8b 87       	std	Y+11, r24	; 0x0b
    11f2:	92 c0       	rjmp	.+292    	; 0x1318 <_gpib_write+0x562>
		//uart_puts("1");
		release_bit(DDRD, PORTD, G_NRFD);
#ifdef WITH_TIMEOUT
		//gpib_info();
		timeout = s + 5;
		while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
    11f4:	e0 e3       	ldi	r30, 0x30	; 48
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	88 2f       	mov	r24, r24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	88 70       	andi	r24, 0x08	; 8
    1200:	90 70       	andi	r25, 0x00	; 0
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	49 f4       	brne	.+18     	; 0x1218 <_gpib_write+0x462>
    1206:	80 91 13 05 	lds	r24, 0x0513
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	9a 81       	ldd	r25, Y+2	; 0x02
    1212:	82 17       	cp	r24, r18
    1214:	93 07       	cpc	r25, r19
    1216:	f4 f6       	brge	.-68     	; 0x11d4 <_gpib_write+0x41e>
#else
		loop_until_bit_is_set(PIND,G_NRFD);
#endif

		// assign EOI during transmission of only last byte
		if ((i == length - 1) && !attention) {
    1218:	88 85       	ldd	r24, Y+8	; 0x08
    121a:	99 85       	ldd	r25, Y+9	; 0x09
    121c:	9c 01       	movw	r18, r24
    121e:	21 50       	subi	r18, 0x01	; 1
    1220:	30 40       	sbci	r19, 0x00	; 0
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	28 17       	cp	r18, r24
    1228:	39 07       	cpc	r19, r25
    122a:	c1 f4       	brne	.+48     	; 0x125c <_gpib_write+0x4a6>
    122c:	8a 85       	ldd	r24, Y+10	; 0x0a
    122e:	88 23       	and	r24, r24
    1230:	a9 f4       	brne	.+42     	; 0x125c <_gpib_write+0x4a6>
			//uart_puts("\n\rE\n\r");
			assign_bit(DDRD, PORTD, G_EOI);
    1232:	a2 e3       	ldi	r26, 0x32	; 50
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e2 e3       	ldi	r30, 0x32	; 50
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	8f 7e       	andi	r24, 0xEF	; 239
    123e:	8c 93       	st	X, r24
    1240:	a1 e3       	ldi	r26, 0x31	; 49
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e1 e3       	ldi	r30, 0x31	; 49
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	80 61       	ori	r24, 0x10	; 16
    124c:	8c 93       	st	X, r24
    124e:	a2 e3       	ldi	r26, 0x32	; 50
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e2 e3       	ldi	r30, 0x32	; 50
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	8f 7e       	andi	r24, 0xEF	; 239
    125a:	8c 93       	st	X, r24
		}

		// assign DAV, data valid for listeners
		assign_bit(DDRD, PORTD, G_DAV);
    125c:	a2 e3       	ldi	r26, 0x32	; 50
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e2 e3       	ldi	r30, 0x32	; 50
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	8b 7f       	andi	r24, 0xFB	; 251
    1268:	8c 93       	st	X, r24
    126a:	a1 e3       	ldi	r26, 0x31	; 49
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e1 e3       	ldi	r30, 0x31	; 49
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	84 60       	ori	r24, 0x04	; 4
    1276:	8c 93       	st	X, r24
    1278:	a2 e3       	ldi	r26, 0x32	; 50
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e2 e3       	ldi	r30, 0x32	; 50
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	8b 7f       	andi	r24, 0xFB	; 251
    1284:	8c 93       	st	X, r24

		// wait for NDAC release
		//uart_puts("2");
		release_bit(DDRD, PORTD, G_NDAC);
    1286:	a1 e3       	ldi	r26, 0x31	; 49
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e1 e3       	ldi	r30, 0x31	; 49
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8f 7d       	andi	r24, 0xDF	; 223
    1292:	8c 93       	st	X, r24
    1294:	a2 e3       	ldi	r26, 0x32	; 50
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e2 e3       	ldi	r30, 0x32	; 50
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	80 62       	ori	r24, 0x20	; 32
    12a0:	8c 93       	st	X, r24
		loop_until_bit_is_set(PIND, G_NDAC);
    12a2:	e0 e3       	ldi	r30, 0x30	; 48
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	88 2f       	mov	r24, r24
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	80 72       	andi	r24, 0x20	; 32
    12ae:	90 70       	andi	r25, 0x00	; 0
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	b9 f3       	breq	.-18     	; 0x12a2 <_gpib_write+0x4ec>

		// release DAV, data not valid anymore
		release_bit(DDRD, PORTD, G_DAV);
    12b4:	a1 e3       	ldi	r26, 0x31	; 49
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e1 e3       	ldi	r30, 0x31	; 49
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8b 7f       	andi	r24, 0xFB	; 251
    12c0:	8c 93       	st	X, r24
    12c2:	a2 e3       	ldi	r26, 0x32	; 50
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e2 e3       	ldi	r30, 0x32	; 50
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	84 60       	ori	r24, 0x04	; 4
    12ce:	8c 93       	st	X, r24

		// reset Port to all input
		DDRA = 0x00;
    12d0:	ea e3       	ldi	r30, 0x3A	; 58
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	10 82       	st	Z, r1
	release_bit(DDRD, PORTD, G_NRFD);

	// bytes[0] = 'a'
	// bytes[1] = 'b'
	// length = 2
	for (i = 0; i < length; i++) {
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	01 96       	adiw	r24, 0x01	; 1
    12dc:	9c 83       	std	Y+4, r25	; 0x04
    12de:	8b 83       	std	Y+3, r24	; 0x03
    12e0:	2b 81       	ldd	r18, Y+3	; 0x03
    12e2:	3c 81       	ldd	r19, Y+4	; 0x04
    12e4:	88 85       	ldd	r24, Y+8	; 0x08
    12e6:	99 85       	ldd	r25, Y+9	; 0x09
    12e8:	28 17       	cp	r18, r24
    12ea:	39 07       	cpc	r19, r25
    12ec:	0c f4       	brge	.+2      	; 0x12f0 <_gpib_write+0x53a>
    12ee:	c4 cd       	rjmp	.-1144   	; 0xe78 <_gpib_write+0xc2>
		DDRA = 0x00;

		//uart_puts("3\r\n");
	}

	if (attention) {
    12f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12f2:	88 23       	and	r24, r24
    12f4:	71 f0       	breq	.+28     	; 0x1312 <_gpib_write+0x55c>
		// assign ATN for commands
		release_bit(DDRD, PORTD, G_ATN);
    12f6:	a1 e3       	ldi	r26, 0x31	; 49
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e1 e3       	ldi	r30, 0x31	; 49
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	8f 77       	andi	r24, 0x7F	; 127
    1302:	8c 93       	st	X, r24
    1304:	a2 e3       	ldi	r26, 0x32	; 50
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e2 e3       	ldi	r30, 0x32	; 50
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	80 68       	ori	r24, 0x80	; 128
    1310:	8c 93       	st	X, r24
	}

	// clear talk state.Controller does not talk anymore.
	controller.talks = 0;
    1312:	10 92 a7 03 	sts	0x03A7, r1

	return 0x00;
    1316:	1b 86       	std	Y+11, r1	; 0x0b
    1318:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    131a:	2b 96       	adiw	r28, 0x0b	; 11
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	de bf       	out	0x3e, r29	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <gpib_info>:

/**
 * print some useful info about bus state (for example value of handshake pins)
 */
void gpib_info(void) {
    132c:	af 92       	push	r10
    132e:	bf 92       	push	r11
    1330:	cf 92       	push	r12
    1332:	df 92       	push	r13
    1334:	ef 92       	push	r14
    1336:	ff 92       	push	r15
    1338:	0f 93       	push	r16
    133a:	1f 93       	push	r17
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	2a 97       	sbiw	r28, 0x0a	; 10
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
	uchar dav, nrfd, ndac, eoi, atn, srq, ifc, ren;
	extern uchar buf[80];

	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    1350:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpib_get_partner_pad>
    1354:	08 2f       	mov	r16, r24
    1356:	10 e0       	ldi	r17, 0x00	; 0
    1358:	0e 94 4d 0c 	call	0x189a	; 0x189a <gpib_get_partner_sad>
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	8d b7       	in	r24, 0x3d	; 61
    1362:	9e b7       	in	r25, 0x3e	; 62
    1364:	08 97       	sbiw	r24, 0x08	; 8
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	9e bf       	out	0x3e, r25	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	8d bf       	out	0x3d, r24	; 61
    1370:	ed b7       	in	r30, 0x3d	; 61
    1372:	fe b7       	in	r31, 0x3e	; 62
    1374:	31 96       	adiw	r30, 0x01	; 1
    1376:	82 ec       	ldi	r24, 0xC2	; 194
    1378:	94 e0       	ldi	r25, 0x04	; 4
    137a:	91 83       	std	Z+1, r25	; 0x01
    137c:	80 83       	st	Z, r24
    137e:	86 ec       	ldi	r24, 0xC6	; 198
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	93 83       	std	Z+3, r25	; 0x03
    1384:	82 83       	std	Z+2, r24	; 0x02
    1386:	15 83       	std	Z+5, r17	; 0x05
    1388:	04 83       	std	Z+4, r16	; 0x04
    138a:	37 83       	std	Z+7, r19	; 0x07
    138c:	26 83       	std	Z+6, r18	; 0x06
    138e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    1392:	8d b7       	in	r24, 0x3d	; 61
    1394:	9e b7       	in	r25, 0x3e	; 62
    1396:	08 96       	adiw	r24, 0x08	; 8
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	9e bf       	out	0x3e, r25	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	8d bf       	out	0x3d, r24	; 61
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);
    13a2:	82 ec       	ldi	r24, 0xC2	; 194
    13a4:	94 e0       	ldi	r25, 0x04	; 4
    13a6:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>

	uart_puts("Partner list\n\r");
    13aa:	84 ef       	ldi	r24, 0xF4	; 244
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>
	for (int i = 0; i < MAX_PARTNER; i++) {
    13b2:	1a 82       	std	Y+2, r1	; 0x02
    13b4:	19 82       	std	Y+1, r1	; 0x01
    13b6:	49 c0       	rjmp	.+146    	; 0x144a <gpib_info+0x11e>
		if (controller.partners[i].primary != ADDRESS_NOT_SET) {
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	9a 81       	ldd	r25, Y+2	; 0x02
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	fc 01       	movw	r30, r24
    13c2:	e7 55       	subi	r30, 0x57	; 87
    13c4:	fc 4f       	sbci	r31, 0xFC	; 252
    13c6:	80 81       	ld	r24, Z
    13c8:	8f 3f       	cpi	r24, 0xFF	; 255
    13ca:	d1 f1       	breq	.+116    	; 0x1440 <gpib_info+0x114>
			sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	9a 81       	ldd	r25, Y+2	; 0x02
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	fc 01       	movw	r30, r24
    13d6:	e7 55       	subi	r30, 0x57	; 87
    13d8:	fc 4f       	sbci	r31, 0xFC	; 252
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	50 e0       	ldi	r21, 0x00	; 0
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	9a 81       	ldd	r25, Y+2	; 0x02
    13e4:	03 96       	adiw	r24, 0x03	; 3
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	fc 01       	movw	r30, r24
    13ec:	ec 55       	subi	r30, 0x5C	; 92
    13ee:	fc 4f       	sbci	r31, 0xFC	; 252
    13f0:	80 81       	ld	r24, Z
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	8d b7       	in	r24, 0x3d	; 61
    13f8:	9e b7       	in	r25, 0x3e	; 62
    13fa:	08 97       	sbiw	r24, 0x08	; 8
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	9e bf       	out	0x3e, r25	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	8d bf       	out	0x3d, r24	; 61
    1406:	ed b7       	in	r30, 0x3d	; 61
    1408:	fe b7       	in	r31, 0x3e	; 62
    140a:	31 96       	adiw	r30, 0x01	; 1
    140c:	82 ec       	ldi	r24, 0xC2	; 194
    140e:	94 e0       	ldi	r25, 0x04	; 4
    1410:	91 83       	std	Z+1, r25	; 0x01
    1412:	80 83       	st	Z, r24
    1414:	86 ec       	ldi	r24, 0xC6	; 198
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	93 83       	std	Z+3, r25	; 0x03
    141a:	82 83       	std	Z+2, r24	; 0x02
    141c:	55 83       	std	Z+5, r21	; 0x05
    141e:	44 83       	std	Z+4, r20	; 0x04
    1420:	37 83       	std	Z+7, r19	; 0x07
    1422:	26 83       	std	Z+6, r18	; 0x06
    1424:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    1428:	8d b7       	in	r24, 0x3d	; 61
    142a:	9e b7       	in	r25, 0x3e	; 62
    142c:	08 96       	adiw	r24, 0x08	; 8
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	9e bf       	out	0x3e, r25	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	8d bf       	out	0x3d, r24	; 61
					controller.partners[i].primary,
					controller.partners[i].secondary);
			uart_puts(buf);
    1438:	82 ec       	ldi	r24, 0xC2	; 194
    143a:	94 e0       	ldi	r25, 0x04	; 4
    143c:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>
	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);

	uart_puts("Partner list\n\r");
	for (int i = 0; i < MAX_PARTNER; i++) {
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	01 96       	adiw	r24, 0x01	; 1
    1446:	9a 83       	std	Y+2, r25	; 0x02
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	9a 81       	ldd	r25, Y+2	; 0x02
    144e:	85 30       	cpi	r24, 0x05	; 5
    1450:	91 05       	cpc	r25, r1
    1452:	0c f4       	brge	.+2      	; 0x1456 <gpib_info+0x12a>
    1454:	b1 cf       	rjmp	.-158    	; 0x13b8 <gpib_info+0x8c>
					controller.partners[i].secondary);
			uart_puts(buf);
		}
	}

	dav = bit_is_set(PIND, G_DAV);
    1456:	e0 e3       	ldi	r30, 0x30	; 48
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	84 70       	andi	r24, 0x04	; 4
    145e:	8a 87       	std	Y+10, r24	; 0x0a
	nrfd = bit_is_set(PIND, G_NRFD);
    1460:	e0 e3       	ldi	r30, 0x30	; 48
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	88 70       	andi	r24, 0x08	; 8
    1468:	89 87       	std	Y+9, r24	; 0x09
	ndac = bit_is_set(PIND, G_NDAC);
    146a:	e0 e3       	ldi	r30, 0x30	; 48
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	80 72       	andi	r24, 0x20	; 32
    1472:	88 87       	std	Y+8, r24	; 0x08
	eoi = bit_is_set(PIND, G_EOI);
    1474:	e0 e3       	ldi	r30, 0x30	; 48
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	80 71       	andi	r24, 0x10	; 16
    147c:	8f 83       	std	Y+7, r24	; 0x07
	atn = bit_is_set(PIND, G_ATN);
    147e:	e0 e3       	ldi	r30, 0x30	; 48
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	80 78       	andi	r24, 0x80	; 128
    1486:	8e 83       	std	Y+6, r24	; 0x06
	srq = bit_is_set(PIND, G_SRQ);
    1488:	e0 e3       	ldi	r30, 0x30	; 48
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	80 74       	andi	r24, 0x40	; 64
    1490:	8d 83       	std	Y+5, r24	; 0x05
	ifc = bit_is_set(PINB, G_IFC);
    1492:	e6 e3       	ldi	r30, 0x36	; 54
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	81 70       	andi	r24, 0x01	; 1
    149a:	8c 83       	std	Y+4, r24	; 0x04
	ren = bit_is_set(PINB, G_REN);
    149c:	e6 e3       	ldi	r30, 0x36	; 54
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	82 70       	andi	r24, 0x02	; 2
    14a4:	8b 83       	std	Y+3, r24	; 0x03
	//d = PINA;
	//di = d ^ 0xff;
	if (dav == 0x00)
    14a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    14a8:	88 23       	and	r24, r24
    14aa:	19 f4       	brne	.+6      	; 0x14b2 <gpib_info+0x186>
		dav = '0';
    14ac:	80 e3       	ldi	r24, 0x30	; 48
    14ae:	8a 87       	std	Y+10, r24	; 0x0a
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <gpib_info+0x18a>
	else
		dav = '1';
    14b2:	81 e3       	ldi	r24, 0x31	; 49
    14b4:	8a 87       	std	Y+10, r24	; 0x0a
	if (nrfd == 0x00)
    14b6:	89 85       	ldd	r24, Y+9	; 0x09
    14b8:	88 23       	and	r24, r24
    14ba:	19 f4       	brne	.+6      	; 0x14c2 <gpib_info+0x196>
		nrfd = '0';
    14bc:	80 e3       	ldi	r24, 0x30	; 48
    14be:	89 87       	std	Y+9, r24	; 0x09
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <gpib_info+0x19a>
	else
		nrfd = '1';
    14c2:	81 e3       	ldi	r24, 0x31	; 49
    14c4:	89 87       	std	Y+9, r24	; 0x09
	if (ndac == 0x00)
    14c6:	88 85       	ldd	r24, Y+8	; 0x08
    14c8:	88 23       	and	r24, r24
    14ca:	19 f4       	brne	.+6      	; 0x14d2 <gpib_info+0x1a6>
		ndac = '0';
    14cc:	80 e3       	ldi	r24, 0x30	; 48
    14ce:	88 87       	std	Y+8, r24	; 0x08
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <gpib_info+0x1aa>
	else
		ndac = '1';
    14d2:	81 e3       	ldi	r24, 0x31	; 49
    14d4:	88 87       	std	Y+8, r24	; 0x08
	if (eoi == 0x00)
    14d6:	8f 81       	ldd	r24, Y+7	; 0x07
    14d8:	88 23       	and	r24, r24
    14da:	19 f4       	brne	.+6      	; 0x14e2 <gpib_info+0x1b6>
		eoi = '0';
    14dc:	80 e3       	ldi	r24, 0x30	; 48
    14de:	8f 83       	std	Y+7, r24	; 0x07
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <gpib_info+0x1ba>
	else
		eoi = '1';
    14e2:	81 e3       	ldi	r24, 0x31	; 49
    14e4:	8f 83       	std	Y+7, r24	; 0x07
	if (atn == 0x00)
    14e6:	8e 81       	ldd	r24, Y+6	; 0x06
    14e8:	88 23       	and	r24, r24
    14ea:	19 f4       	brne	.+6      	; 0x14f2 <gpib_info+0x1c6>
		atn = '0';
    14ec:	80 e3       	ldi	r24, 0x30	; 48
    14ee:	8e 83       	std	Y+6, r24	; 0x06
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <gpib_info+0x1ca>
	else
		atn = '1';
    14f2:	81 e3       	ldi	r24, 0x31	; 49
    14f4:	8e 83       	std	Y+6, r24	; 0x06
	if (srq == 0x00)
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	88 23       	and	r24, r24
    14fa:	19 f4       	brne	.+6      	; 0x1502 <gpib_info+0x1d6>
		srq = '0';
    14fc:	80 e3       	ldi	r24, 0x30	; 48
    14fe:	8d 83       	std	Y+5, r24	; 0x05
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <gpib_info+0x1da>
	else
		srq = '1';
    1502:	81 e3       	ldi	r24, 0x31	; 49
    1504:	8d 83       	std	Y+5, r24	; 0x05
	if (ifc == 0x00)
    1506:	8c 81       	ldd	r24, Y+4	; 0x04
    1508:	88 23       	and	r24, r24
    150a:	19 f4       	brne	.+6      	; 0x1512 <gpib_info+0x1e6>
		ifc = '0';
    150c:	80 e3       	ldi	r24, 0x30	; 48
    150e:	8c 83       	std	Y+4, r24	; 0x04
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <gpib_info+0x1ea>
	else
		ifc = '1';
    1512:	81 e3       	ldi	r24, 0x31	; 49
    1514:	8c 83       	std	Y+4, r24	; 0x04
	if (ren == 0x00)
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	88 23       	and	r24, r24
    151a:	19 f4       	brne	.+6      	; 0x1522 <gpib_info+0x1f6>
		ren = '0';
    151c:	80 e3       	ldi	r24, 0x30	; 48
    151e:	8b 83       	std	Y+3, r24	; 0x03
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <gpib_info+0x1fa>
	else
		ren = '1';
    1522:	81 e3       	ldi	r24, 0x31	; 49
    1524:	8b 83       	std	Y+3, r24	; 0x03

	sprintf(buf,
    1526:	8a 85       	ldd	r24, Y+10	; 0x0a
    1528:	a8 2e       	mov	r10, r24
    152a:	bb 24       	eor	r11, r11
    152c:	89 85       	ldd	r24, Y+9	; 0x09
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	88 85       	ldd	r24, Y+8	; 0x08
    1534:	48 2f       	mov	r20, r24
    1536:	50 e0       	ldi	r21, 0x00	; 0
    1538:	8f 81       	ldd	r24, Y+7	; 0x07
    153a:	68 2f       	mov	r22, r24
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	a8 2f       	mov	r26, r24
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	08 2f       	mov	r16, r24
    1548:	10 e0       	ldi	r17, 0x00	; 0
    154a:	8e 81       	ldd	r24, Y+6	; 0x06
    154c:	e8 2e       	mov	r14, r24
    154e:	ff 24       	eor	r15, r15
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	c8 2e       	mov	r12, r24
    1554:	dd 24       	eor	r13, r13
    1556:	8d b7       	in	r24, 0x3d	; 61
    1558:	9e b7       	in	r25, 0x3e	; 62
    155a:	44 97       	sbiw	r24, 0x14	; 20
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	9e bf       	out	0x3e, r25	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	8d bf       	out	0x3d, r24	; 61
    1566:	ed b7       	in	r30, 0x3d	; 61
    1568:	fe b7       	in	r31, 0x3e	; 62
    156a:	31 96       	adiw	r30, 0x01	; 1
    156c:	82 ec       	ldi	r24, 0xC2	; 194
    156e:	94 e0       	ldi	r25, 0x04	; 4
    1570:	91 83       	std	Z+1, r25	; 0x01
    1572:	80 83       	st	Z, r24
    1574:	83 e0       	ldi	r24, 0x03	; 3
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	93 83       	std	Z+3, r25	; 0x03
    157a:	82 83       	std	Z+2, r24	; 0x02
    157c:	b5 82       	std	Z+5, r11	; 0x05
    157e:	a4 82       	std	Z+4, r10	; 0x04
    1580:	37 83       	std	Z+7, r19	; 0x07
    1582:	26 83       	std	Z+6, r18	; 0x06
    1584:	51 87       	std	Z+9, r21	; 0x09
    1586:	40 87       	std	Z+8, r20	; 0x08
    1588:	73 87       	std	Z+11, r23	; 0x0b
    158a:	62 87       	std	Z+10, r22	; 0x0a
    158c:	b5 87       	std	Z+13, r27	; 0x0d
    158e:	a4 87       	std	Z+12, r26	; 0x0c
    1590:	17 87       	std	Z+15, r17	; 0x0f
    1592:	06 87       	std	Z+14, r16	; 0x0e
    1594:	f1 8a       	std	Z+17, r15	; 0x11
    1596:	e0 8a       	std	Z+16, r14	; 0x10
    1598:	d3 8a       	std	Z+19, r13	; 0x13
    159a:	c2 8a       	std	Z+18, r12	; 0x12
    159c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    15a0:	8d b7       	in	r24, 0x3d	; 61
    15a2:	9e b7       	in	r25, 0x3e	; 62
    15a4:	44 96       	adiw	r24, 0x14	; 20
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	9e bf       	out	0x3e, r25	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	8d bf       	out	0x3d, r24	; 61
			"dav=%c,nrfd=%c,ndac=%c, eoi=%c, ifc=%c,ren=%c,atn=%c,srq=%c\n\r",
			dav, nrfd, ndac, eoi, ifc, ren, atn, srq);
	uart_puts(buf);
    15b0:	82 ec       	ldi	r24, 0xC2	; 194
    15b2:	94 e0       	ldi	r25, 0x04	; 4
    15b4:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>
}
    15b8:	2a 96       	adiw	r28, 0x0a	; 10
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	1f 91       	pop	r17
    15ca:	0f 91       	pop	r16
    15cc:	ff 90       	pop	r15
    15ce:	ef 90       	pop	r14
    15d0:	df 90       	pop	r13
    15d2:	cf 90       	pop	r12
    15d4:	bf 90       	pop	r11
    15d6:	af 90       	pop	r10
    15d8:	08 95       	ret

000015da <gpib_serial_poll>:
 * I haven't looked how a device with two byte address behaves.
 *
 * Secondary/primary is returned in inout parameters
 * If any emitter is found, return value is != 0.
 */
uchar gpib_serial_poll(uint8_t *primary_v, uint8_t* secondary_v) {
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	2c 97       	sbiw	r28, 0x0c	; 12
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	9a 87       	std	Y+10, r25	; 0x0a
    15f0:	89 87       	std	Y+9, r24	; 0x09
    15f2:	7c 87       	std	Y+12, r23	; 0x0c
    15f4:	6b 87       	std	Y+11, r22	; 0x0b
	uchar b, e;
	uchar primary = 0, secondary = 0, found = 0, foundPhysical =
    15f6:	1e 82       	std	Y+6, r1	; 0x06
    15f8:	1d 82       	std	Y+5, r1	; 0x05
    15fa:	1c 82       	std	Y+4, r1	; 0x04
	ADDRESS_NOT_SET;
    15fc:	8f ef       	ldi	r24, 0xFF	; 255
    15fe:	8b 83       	std	Y+3, r24	; 0x03
	int i;

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	cmd_buf[0] = G_CMD_UNT;
    1600:	8f e5       	ldi	r24, 0x5F	; 95
    1602:	80 93 5e 04 	sts	0x045E, r24
	gpib_cmd(cmd_buf, 1);
    1606:	8e e5       	ldi	r24, 0x5E	; 94
    1608:	94 e0       	ldi	r25, 0x04	; 4
    160a:	61 e0       	ldi	r22, 0x01	; 1
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	cmd_buf[0] = G_CMD_UNL;
    1612:	8f e3       	ldi	r24, 0x3F	; 63
    1614:	80 93 5e 04 	sts	0x045E, r24
	gpib_cmd(cmd_buf, 1);
    1618:	8e e5       	ldi	r24, 0x5E	; 94
    161a:	94 e0       	ldi	r25, 0x04	; 4
    161c:	61 e0       	ldi	r22, 0x01	; 1
    161e:	70 e0       	ldi	r23, 0x00	; 0
    1620:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>

	// serial poll enable
	// effect: all devices will send status byte instead of normal data when addressed
	// as talker
	//uart_puts("before SPE\r\n");
	cmd_buf[0] = G_CMD_SPE;
    1624:	88 e1       	ldi	r24, 0x18	; 24
    1626:	80 93 5e 04 	sts	0x045E, r24
	gpib_cmd(cmd_buf, 1);
    162a:	8e e5       	ldi	r24, 0x5E	; 94
    162c:	94 e0       	ldi	r25, 0x04	; 4
    162e:	61 e0       	ldi	r22, 0x01	; 1
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    1636:	1a 82       	std	Y+2, r1	; 0x02
    1638:	19 82       	std	Y+1, r1	; 0x01
    163a:	de c0       	rjmp	.+444    	; 0x17f8 <gpib_serial_poll+0x21e>
			i++) {

		// set partner to talker mode
		primary = address2TalkerAddress(controller.partners[i].primary);
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	9a 81       	ldd	r25, Y+2	; 0x02
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	fc 01       	movw	r30, r24
    1646:	e7 55       	subi	r30, 0x57	; 87
    1648:	fc 4f       	sbci	r31, 0xFC	; 252
    164a:	80 81       	ld	r24, Z
    164c:	80 5c       	subi	r24, 0xC0	; 192
    164e:	8e 83       	std	Y+6, r24	; 0x06
		secondary = secondaryAdressToAdressByte(
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	9a 81       	ldd	r25, Y+2	; 0x02
    1654:	03 96       	adiw	r24, 0x03	; 3
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	fc 01       	movw	r30, r24
    165c:	ec 55       	subi	r30, 0x5C	; 92
    165e:	fc 4f       	sbci	r31, 0xFC	; 252
    1660:	80 81       	ld	r24, Z
    1662:	80 66       	ori	r24, 0x60	; 96
    1664:	8d 83       	std	Y+5, r24	; 0x05
				controller.partners[i].secondary);

		cmd_buf[0] = primary;
    1666:	8e 81       	ldd	r24, Y+6	; 0x06
    1668:	80 93 5e 04 	sts	0x045E, r24
		//uart_puts("before talker address write\r\n");
		gpib_cmd(cmd_buf, 1);
    166c:	8e e5       	ldi	r24, 0x5E	; 94
    166e:	94 e0       	ldi	r25, 0x04	; 4
    1670:	61 e0       	ldi	r22, 0x01	; 1
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
		//uart_puts("after talker address write\r\n");
		// handle secondary address if required
		if (secondary != ADDRESS_NOT_SET) {
    1678:	8d 81       	ldd	r24, Y+5	; 0x05
    167a:	8f 3f       	cpi	r24, 0xFF	; 255
    167c:	49 f0       	breq	.+18     	; 0x1690 <gpib_serial_poll+0xb6>
			cmd_buf[0] = secondary;
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	80 93 5e 04 	sts	0x045E, r24
			//uart_puts("before talker address write\r\n");
			gpib_cmd(cmd_buf, 1);
    1684:	8e e5       	ldi	r24, 0x5E	; 94
    1686:	94 e0       	ldi	r25, 0x04	; 4
    1688:	61 e0       	ldi	r22, 0x01	; 1
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
		}

		// now receive data
		//uart_puts("before status byte receive\r\n");
		e = gpib_receive(&b);
    1690:	ce 01       	movw	r24, r28
    1692:	08 96       	adiw	r24, 0x08	; 8
    1694:	0e 94 28 05 	call	0xa50	; 0xa50 <gpib_receive>
    1698:	8f 83       	std	Y+7, r24	; 0x07
		//uart_puts("after status byte receive\r\n");
		// status byte is now in b

		if (secondary != ADDRESS_NOT_SET) {
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	8f 3f       	cpi	r24, 0xFF	; 255
    169e:	81 f1       	breq	.+96     	; 0x1700 <gpib_serial_poll+0x126>
			sprintf((char*) cmd_buf,
    16a0:	8e 81       	ldd	r24, Y+6	; 0x06
    16a2:	88 2f       	mov	r24, r24
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	bc 01       	movw	r22, r24
    16a8:	60 54       	subi	r22, 0x40	; 64
    16aa:	70 40       	sbci	r23, 0x00	; 0
    16ac:	8d 81       	ldd	r24, Y+5	; 0x05
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	88 85       	ldd	r24, Y+8	; 0x08
    16b4:	48 2f       	mov	r20, r24
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	8d b7       	in	r24, 0x3d	; 61
    16ba:	9e b7       	in	r25, 0x3e	; 62
    16bc:	0a 97       	sbiw	r24, 0x0a	; 10
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	9e bf       	out	0x3e, r25	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	8d bf       	out	0x3d, r24	; 61
    16c8:	ed b7       	in	r30, 0x3d	; 61
    16ca:	fe b7       	in	r31, 0x3e	; 62
    16cc:	31 96       	adiw	r30, 0x01	; 1
    16ce:	8e e5       	ldi	r24, 0x5E	; 94
    16d0:	94 e0       	ldi	r25, 0x04	; 4
    16d2:	91 83       	std	Z+1, r25	; 0x01
    16d4:	80 83       	st	Z, r24
    16d6:	81 e4       	ldi	r24, 0x41	; 65
    16d8:	91 e0       	ldi	r25, 0x01	; 1
    16da:	93 83       	std	Z+3, r25	; 0x03
    16dc:	82 83       	std	Z+2, r24	; 0x02
    16de:	75 83       	std	Z+5, r23	; 0x05
    16e0:	64 83       	std	Z+4, r22	; 0x04
    16e2:	37 83       	std	Z+7, r19	; 0x07
    16e4:	26 83       	std	Z+6, r18	; 0x06
    16e6:	51 87       	std	Z+9, r21	; 0x09
    16e8:	40 87       	std	Z+8, r20	; 0x08
    16ea:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    16ee:	8d b7       	in	r24, 0x3d	; 61
    16f0:	9e b7       	in	r25, 0x3e	; 62
    16f2:	0a 96       	adiw	r24, 0x0a	; 10
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	9e bf       	out	0x3e, r25	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	8d bf       	out	0x3d, r24	; 61
    16fe:	2a c0       	rjmp	.+84     	; 0x1754 <gpib_serial_poll+0x17a>
					"Status byte from device primary=0x%02x,secondary=0x%02x (physical) = 0x%02x\n\r",
					TalkerAddress2Address(primary), secondary, b);
		} else {
			sprintf((char*) cmd_buf,
    1700:	8e 81       	ldd	r24, Y+6	; 0x06
    1702:	88 2f       	mov	r24, r24
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	9c 01       	movw	r18, r24
    1708:	20 54       	subi	r18, 0x40	; 64
    170a:	30 40       	sbci	r19, 0x00	; 0
    170c:	88 85       	ldd	r24, Y+8	; 0x08
    170e:	48 2f       	mov	r20, r24
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	8d b7       	in	r24, 0x3d	; 61
    1714:	9e b7       	in	r25, 0x3e	; 62
    1716:	08 97       	sbiw	r24, 0x08	; 8
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	9e bf       	out	0x3e, r25	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	8d bf       	out	0x3d, r24	; 61
    1722:	ed b7       	in	r30, 0x3d	; 61
    1724:	fe b7       	in	r31, 0x3e	; 62
    1726:	31 96       	adiw	r30, 0x01	; 1
    1728:	8e e5       	ldi	r24, 0x5E	; 94
    172a:	94 e0       	ldi	r25, 0x04	; 4
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	80 83       	st	Z, r24
    1730:	8f e8       	ldi	r24, 0x8F	; 143
    1732:	91 e0       	ldi	r25, 0x01	; 1
    1734:	93 83       	std	Z+3, r25	; 0x03
    1736:	82 83       	std	Z+2, r24	; 0x02
    1738:	35 83       	std	Z+5, r19	; 0x05
    173a:	24 83       	std	Z+4, r18	; 0x04
    173c:	57 83       	std	Z+7, r21	; 0x07
    173e:	46 83       	std	Z+6, r20	; 0x06
    1740:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    1744:	8d b7       	in	r24, 0x3d	; 61
    1746:	9e b7       	in	r25, 0x3e	; 62
    1748:	08 96       	adiw	r24, 0x08	; 8
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	9e bf       	out	0x3e, r25	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	8d bf       	out	0x3d, r24	; 61
					"Status byte from device primary=0x%02x (physical) = 0x%02x\n\r",
					TalkerAddress2Address(primary), b);
		}
		uart_puts((char*) cmd_buf);
    1754:	8e e5       	ldi	r24, 0x5E	; 94
    1756:	94 e0       	ldi	r25, 0x04	; 4
    1758:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>

		// send UNT and UNL commands (unlisten and untalk)
		// effect: all talker stop talking and all listeners stop listening
		cmd_buf[0] = G_CMD_UNT;
    175c:	8f e5       	ldi	r24, 0x5F	; 95
    175e:	80 93 5e 04 	sts	0x045E, r24
		gpib_cmd(cmd_buf, 1);
    1762:	8e e5       	ldi	r24, 0x5E	; 94
    1764:	94 e0       	ldi	r25, 0x04	; 4
    1766:	61 e0       	ldi	r22, 0x01	; 1
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
		cmd_buf[0] = G_CMD_UNL;
    176e:	8f e3       	ldi	r24, 0x3F	; 63
    1770:	80 93 5e 04 	sts	0x045E, r24
		gpib_cmd(cmd_buf, 1);
    1774:	8e e5       	ldi	r24, 0x5E	; 94
    1776:	94 e0       	ldi	r25, 0x04	; 4
    1778:	61 e0       	ldi	r22, 0x01	; 1
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>

		if (b & (1 << 6)) {
    1780:	88 85       	ldd	r24, Y+8	; 0x08
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	80 74       	andi	r24, 0x40	; 64
    1788:	90 70       	andi	r25, 0x00	; 0
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	81 f1       	breq	.+96     	; 0x17ee <gpib_serial_poll+0x214>
			found = primary;
    178e:	8e 81       	ldd	r24, Y+6	; 0x06
    1790:	8c 83       	std	Y+4, r24	; 0x04
			foundPhysical = TalkerAddress2Address(found);
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	80 54       	subi	r24, 0x40	; 64
    1796:	8b 83       	std	Y+3, r24	; 0x03
			// bit 6 of status byte of SRQ emitter is 1
			// when reading status byte from emitter, he releases SRQ line (may also be tested here)
			sprintf((char*) cmd_buf,
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	8d 81       	ldd	r24, Y+5	; 0x05
    17a0:	48 2f       	mov	r20, r24
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	8d b7       	in	r24, 0x3d	; 61
    17a6:	9e b7       	in	r25, 0x3e	; 62
    17a8:	08 97       	sbiw	r24, 0x08	; 8
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	9e bf       	out	0x3e, r25	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	8d bf       	out	0x3d, r24	; 61
    17b4:	ed b7       	in	r30, 0x3d	; 61
    17b6:	fe b7       	in	r31, 0x3e	; 62
    17b8:	31 96       	adiw	r30, 0x01	; 1
    17ba:	8e e5       	ldi	r24, 0x5E	; 94
    17bc:	94 e0       	ldi	r25, 0x04	; 4
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	80 83       	st	Z, r24
    17c2:	8c ec       	ldi	r24, 0xCC	; 204
    17c4:	91 e0       	ldi	r25, 0x01	; 1
    17c6:	93 83       	std	Z+3, r25	; 0x03
    17c8:	82 83       	std	Z+2, r24	; 0x02
    17ca:	35 83       	std	Z+5, r19	; 0x05
    17cc:	24 83       	std	Z+4, r18	; 0x04
    17ce:	57 83       	std	Z+7, r21	; 0x07
    17d0:	46 83       	std	Z+6, r20	; 0x06
    17d2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    17d6:	8d b7       	in	r24, 0x3d	; 61
    17d8:	9e b7       	in	r25, 0x3e	; 62
    17da:	08 96       	adiw	r24, 0x08	; 8
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	9e bf       	out	0x3e, r25	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	8d bf       	out	0x3d, r24	; 61
					"SRQ emitter is device = 0x%02x (physical address), secondary = 0x%02x\n\r",
					foundPhysical, secondary);
			uart_puts((char*) cmd_buf);
    17e6:	8e e5       	ldi	r24, 0x5E	; 94
    17e8:	94 e0       	ldi	r25, 0x04	; 4
    17ea:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>
	gpib_cmd(cmd_buf, 1);
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
			i++) {
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	9a 81       	ldd	r25, Y+2	; 0x02
    17f2:	01 96       	adiw	r24, 0x01	; 1
    17f4:	9a 83       	std	Y+2, r25	; 0x02
    17f6:	89 83       	std	Y+1, r24	; 0x01
	cmd_buf[0] = G_CMD_SPE;
	gpib_cmd(cmd_buf, 1);
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	9a 81       	ldd	r25, Y+2	; 0x02
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	fc 01       	movw	r30, r24
    1802:	e7 55       	subi	r30, 0x57	; 87
    1804:	fc 4f       	sbci	r31, 0xFC	; 252
    1806:	80 81       	ld	r24, Z
    1808:	8f 3f       	cpi	r24, 0xFF	; 255
    180a:	21 f0       	breq	.+8      	; 0x1814 <gpib_serial_poll+0x23a>
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	88 23       	and	r24, r24
    1810:	09 f4       	brne	.+2      	; 0x1814 <gpib_serial_poll+0x23a>
    1812:	14 cf       	rjmp	.-472    	; 0x163c <gpib_serial_poll+0x62>
		}
	}

	// serial poll disable
	// effect: all devices will return to normal behaviour as talker
	cmd_buf[0] = G_CMD_SPD;
    1814:	89 e1       	ldi	r24, 0x19	; 25
    1816:	80 93 5e 04 	sts	0x045E, r24
	//uart_puts("before SPD\r\n");
	gpib_cmd(cmd_buf, 1);
    181a:	8e e5       	ldi	r24, 0x5E	; 94
    181c:	94 e0       	ldi	r25, 0x04	; 4
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	//uart_puts("after SPD\r\n");

	// "return" values determined
	*primary_v = primary;
    1826:	e9 85       	ldd	r30, Y+9	; 0x09
    1828:	fa 85       	ldd	r31, Y+10	; 0x0a
    182a:	8e 81       	ldd	r24, Y+6	; 0x06
    182c:	80 83       	st	Z, r24
	*secondary_v = secondary;
    182e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1830:	fc 85       	ldd	r31, Y+12	; 0x0c
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	80 83       	st	Z, r24

	return found;
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1838:	2c 96       	adiw	r28, 0x0c	; 12
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <gpib_set_partner_address>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_address(uchar primary, uchar secondary) {
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	00 d0       	rcall	.+0      	; 0x1850 <gpib_set_partner_address+0x6>
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	6a 83       	std	Y+2, r22	; 0x02
	controller.partner.primary = primary;
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	80 93 a5 03 	sts	0x03A5, r24
	controller.partner.secondary = secondary;
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	80 93 a6 03 	sts	0x03A6, r24
}
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <gpib_set_partner_secondary>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_secondary(uchar secondary) {
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	0f 92       	push	r0
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	89 83       	std	Y+1, r24	; 0x01
	controller.partner.secondary = secondary;
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	80 93 a6 03 	sts	0x03A6, r24
}
    1880:	0f 90       	pop	r0
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	08 95       	ret

00001888 <gpib_get_partner_pad>:

/**
 * Get primary address of device currently controlled.
 * \returns primary address Address of device.
 */
uchar gpib_get_partner_pad(void) {
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.primary;
    1890:	80 91 a5 03 	lds	r24, 0x03A5
}
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <gpib_get_partner_sad>:

/**
 * Get secondary address of device currently controlled.
 * \returns secondary address Address of device.
 */
uchar gpib_get_partner_sad(void) {
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.secondary;
    18a2:	80 91 a6 03 	lds	r24, 0x03A6
}
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <gpib_get_address>:

/**
 * Get controller address.
 * \returns address of controller.
 */
uchar gpib_get_address(void) {
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
	return controller.myaddress;
    18b4:	80 91 a4 03 	lds	r24, 0x03A4
}
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <gpib_set_flavour>:

void gpib_set_flavour(uchar flavour) {
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	0f 92       	push	r0
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	89 83       	std	Y+1, r24	; 0x01
	controller.flavour = flavour;
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	80 93 a8 03 	sts	0x03A8, r24
}
    18d0:	0f 90       	pop	r0
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	08 95       	ret

000018d8 <gpib_get_flavour>:

uchar gpib_get_flavour(void) {
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
	return controller.flavour;
    18e0:	80 91 a8 03 	lds	r24, 0x03A8
}
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <gpib_clear_partners>:

/**
 * Clear partners list
 */
void gpib_clear_partners() {
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <gpib_clear_partners+0x6>
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < MAX_PARTNER; i++) {
    18f4:	1a 82       	std	Y+2, r1	; 0x02
    18f6:	19 82       	std	Y+1, r1	; 0x01
    18f8:	0e c0       	rjmp	.+28     	; 0x1916 <gpib_clear_partners+0x2c>
		controller.partners[i].primary = ADDRESS_NOT_SET;
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	9a 81       	ldd	r25, Y+2	; 0x02
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	fc 01       	movw	r30, r24
    1904:	e7 55       	subi	r30, 0x57	; 87
    1906:	fc 4f       	sbci	r31, 0xFC	; 252
    1908:	8f ef       	ldi	r24, 0xFF	; 255
    190a:	80 83       	st	Z, r24

/**
 * Clear partners list
 */
void gpib_clear_partners() {
	for (int i = 0; i < MAX_PARTNER; i++) {
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	9a 81       	ldd	r25, Y+2	; 0x02
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	9a 83       	std	Y+2, r25	; 0x02
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	9a 81       	ldd	r25, Y+2	; 0x02
    191a:	85 30       	cpi	r24, 0x05	; 5
    191c:	91 05       	cpc	r25, r1
    191e:	6c f3       	brlt	.-38     	; 0x18fa <gpib_clear_partners+0x10>
		controller.partners[i].primary = ADDRESS_NOT_SET;
	}
}
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	08 95       	ret

0000192a <gpib_add_partner_address>:

/**
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	00 d0       	rcall	.+0      	; 0x1930 <gpib_add_partner_address+0x6>
    1930:	00 d0       	rcall	.+0      	; 0x1932 <gpib_add_partner_address+0x8>
    1932:	0f 92       	push	r0
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	8b 83       	std	Y+3, r24	; 0x03
    193a:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    193c:	1a 82       	std	Y+2, r1	; 0x02
    193e:	19 82       	std	Y+1, r1	; 0x01
    1940:	05 c0       	rjmp	.+10     	; 0x194c <gpib_add_partner_address+0x22>
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
			i++) {
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	9a 81       	ldd	r25, Y+2	; 0x02
    1946:	01 96       	adiw	r24, 0x01	; 1
    1948:	9a 83       	std	Y+2, r25	; 0x02
    194a:	89 83       	std	Y+1, r24	; 0x01
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	9a 81       	ldd	r25, Y+2	; 0x02
    1950:	85 30       	cpi	r24, 0x05	; 5
    1952:	91 05       	cpc	r25, r1
    1954:	54 f4       	brge	.+20     	; 0x196a <gpib_add_partner_address+0x40>
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	9a 81       	ldd	r25, Y+2	; 0x02
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	fc 01       	movw	r30, r24
    1960:	e7 55       	subi	r30, 0x57	; 87
    1962:	fc 4f       	sbci	r31, 0xFC	; 252
    1964:	80 81       	ld	r24, Z
    1966:	8f 3f       	cpi	r24, 0xFF	; 255
    1968:	61 f7       	brne	.-40     	; 0x1942 <gpib_add_partner_address+0x18>
			i++) {
	}
	if (i == MAX_PARTNER) {
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	85 30       	cpi	r24, 0x05	; 5
    1970:	91 05       	cpc	r25, r1
    1972:	39 f4       	brne	.+14     	; 0x1982 <gpib_add_partner_address+0x58>
		uart_puts("Too much partners.\n\r");
    1974:	84 e1       	ldi	r24, 0x14	; 20
    1976:	92 e0       	ldi	r25, 0x02	; 2
    1978:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>
		return 1;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	8d 83       	std	Y+5, r24	; 0x05
    1980:	14 c0       	rjmp	.+40     	; 0x19aa <gpib_add_partner_address+0x80>
	}
	controller.partners[i].primary = primary;
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	9a 81       	ldd	r25, Y+2	; 0x02
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	fc 01       	movw	r30, r24
    198c:	e7 55       	subi	r30, 0x57	; 87
    198e:	fc 4f       	sbci	r31, 0xFC	; 252
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	80 83       	st	Z, r24
	controller.partners[i].secondary = secondary;
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	9a 81       	ldd	r25, Y+2	; 0x02
    1998:	03 96       	adiw	r24, 0x03	; 3
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	fc 01       	movw	r30, r24
    19a0:	ec 55       	subi	r30, 0x5C	; 92
    19a2:	fc 4f       	sbci	r31, 0xFC	; 252
    19a4:	8c 81       	ldd	r24, Y+4	; 0x04
    19a6:	80 83       	st	Z, r24
	return 0;
    19a8:	1d 82       	std	Y+5, r1	; 0x05
    19aa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <gpib_remove_partner_address>:

/**
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <gpib_remove_partner_address+0x6>
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <gpib_remove_partner_address+0x8>
    19c4:	0f 92       	push	r0
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	8b 83       	std	Y+3, r24	; 0x03
    19cc:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    19ce:	1a 82       	std	Y+2, r1	; 0x02
    19d0:	19 82       	std	Y+1, r1	; 0x01
    19d2:	05 c0       	rjmp	.+10     	; 0x19de <gpib_remove_partner_address+0x22>
			i < MAX_PARTNER
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	9a 81       	ldd	r25, Y+2	; 0x02
    19d8:	01 96       	adiw	r24, 0x01	; 1
    19da:	9a 83       	std	Y+2, r25	; 0x02
    19dc:	89 83       	std	Y+1, r24	; 0x01
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	9a 81       	ldd	r25, Y+2	; 0x02
    19e2:	85 30       	cpi	r24, 0x05	; 5
    19e4:	91 05       	cpc	r25, r1
    19e6:	bc f4       	brge	.+46     	; 0x1a16 <gpib_remove_partner_address+0x5a>
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	9a 81       	ldd	r25, Y+2	; 0x02
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	fc 01       	movw	r30, r24
    19f2:	e7 55       	subi	r30, 0x57	; 87
    19f4:	fc 4f       	sbci	r31, 0xFC	; 252
    19f6:	90 81       	ld	r25, Z
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	98 17       	cp	r25, r24
    19fc:	59 f7       	brne	.-42     	; 0x19d4 <gpib_remove_partner_address+0x18>
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	03 96       	adiw	r24, 0x03	; 3
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	fc 01       	movw	r30, r24
    1a0a:	ec 55       	subi	r30, 0x5C	; 92
    1a0c:	fc 4f       	sbci	r31, 0xFC	; 252
    1a0e:	90 81       	ld	r25, Z
    1a10:	8c 81       	ldd	r24, Y+4	; 0x04
    1a12:	98 17       	cp	r25, r24
    1a14:	f9 f6       	brne	.-66     	; 0x19d4 <gpib_remove_partner_address+0x18>
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
	}
	if (i == MAX_PARTNER) {
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1a:	85 30       	cpi	r24, 0x05	; 5
    1a1c:	91 05       	cpc	r25, r1
    1a1e:	39 f4       	brne	.+14     	; 0x1a2e <gpib_remove_partner_address+0x72>
		uart_puts("Partner unknown.\n\r");
    1a20:	89 e2       	ldi	r24, 0x29	; 41
    1a22:	92 e0       	ldi	r25, 0x02	; 2
    1a24:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>
		return 1;
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
    1a2c:	14 c0       	rjmp	.+40     	; 0x1a56 <gpib_remove_partner_address+0x9a>
	}
	controller.partners[i].primary = ADDRESS_NOT_SET;
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	9a 81       	ldd	r25, Y+2	; 0x02
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	fc 01       	movw	r30, r24
    1a38:	e7 55       	subi	r30, 0x57	; 87
    1a3a:	fc 4f       	sbci	r31, 0xFC	; 252
    1a3c:	8f ef       	ldi	r24, 0xFF	; 255
    1a3e:	80 83       	st	Z, r24
	controller.partners[i].secondary = ADDRESS_NOT_SET;
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	9a 81       	ldd	r25, Y+2	; 0x02
    1a44:	03 96       	adiw	r24, 0x03	; 3
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	ec 55       	subi	r30, 0x5C	; 92
    1a4e:	fc 4f       	sbci	r31, 0xFC	; 252
    1a50:	8f ef       	ldi	r24, 0xFF	; 255
    1a52:	80 83       	st	Z, r24
	return 0;
    1a54:	1d 82       	std	Y+5, r1	; 0x05
    1a56:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <stringToTwoUchars>:

/**
 * Read two integers from string like "45 56" or one integer. In latter case
 * the second integer is initialized with a special value.
 */
static void stringToTwoUchars(char *string, uchar *a, uchar *b) {
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	28 97       	sbiw	r28, 0x08	; 8
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	9c 83       	std	Y+4, r25	; 0x04
    1a7e:	8b 83       	std	Y+3, r24	; 0x03
    1a80:	7e 83       	std	Y+6, r23	; 0x06
    1a82:	6d 83       	std	Y+5, r22	; 0x05
    1a84:	58 87       	std	Y+8, r21	; 0x08
    1a86:	4f 83       	std	Y+7, r20	; 0x07
	char *token = strtok(string, " ");
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	2c e3       	ldi	r18, 0x3C	; 60
    1a8e:	32 e0       	ldi	r19, 0x02	; 2
    1a90:	b9 01       	movw	r22, r18
    1a92:	0e 94 a6 01 	call	0x34c	; 0x34c <strtok>
    1a96:	9a 83       	std	Y+2, r25	; 0x02
    1a98:	89 83       	std	Y+1, r24	; 0x01
	*a = atoi((char*) token);
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9e:	0e 94 88 01 	call	0x310	; 0x310 <atoi>
    1aa2:	ed 81       	ldd	r30, Y+5	; 0x05
    1aa4:	fe 81       	ldd	r31, Y+6	; 0x06
    1aa6:	80 83       	st	Z, r24
	token = strtok(NULL, " ");
    1aa8:	2c e3       	ldi	r18, 0x3C	; 60
    1aaa:	32 e0       	ldi	r19, 0x02	; 2
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	b9 01       	movw	r22, r18
    1ab2:	0e 94 a6 01 	call	0x34c	; 0x34c <strtok>
    1ab6:	9a 83       	std	Y+2, r25	; 0x02
    1ab8:	89 83       	std	Y+1, r24	; 0x01
	if (token != NULL) {
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	9a 81       	ldd	r25, Y+2	; 0x02
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	41 f0       	breq	.+16     	; 0x1ad2 <stringToTwoUchars+0x6a>
		*b = atoi((char*) token);
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac6:	0e 94 88 01 	call	0x310	; 0x310 <atoi>
    1aca:	ef 81       	ldd	r30, Y+7	; 0x07
    1acc:	f8 85       	ldd	r31, Y+8	; 0x08
    1ace:	80 83       	st	Z, r24
    1ad0:	04 c0       	rjmp	.+8      	; 0x1ada <stringToTwoUchars+0x72>
	} else {
		*b = ADDRESS_NOT_SET;
    1ad2:	ef 81       	ldd	r30, Y+7	; 0x07
    1ad4:	f8 85       	ldd	r31, Y+8	; 0x08
    1ad6:	8f ef       	ldi	r24, 0xFF	; 255
    1ad8:	80 83       	st	Z, r24
	}
}
    1ada:	28 96       	adiw	r28, 0x08	; 8
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <check_errors>:
 *
 * Reads error queue first entry.
 * TODO: read complete queue in while loop.
 *
 */
void check_errors() {
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <check_errors+0x6>
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
	char *error_cmd = "SYST:ERR?";
    1af6:	8e e3       	ldi	r24, 0x3E	; 62
    1af8:	92 e0       	ldi	r25, 0x02	; 2
    1afa:	9a 83       	std	Y+2, r25	; 0x02
    1afc:	89 83       	std	Y+1, r24	; 0x01
	send_command(error_cmd, SEND_FULL_CMD);
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	9a 81       	ldd	r25, Y+2	; 0x02
    1b02:	62 e0       	ldi	r22, 0x02	; 2
    1b04:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <send_command>
	receiveAnswer();
    1b08:	0e 94 4f 10 	call	0x209e	; 0x209e <receiveAnswer>
}
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <input_char>:

/**
 * Reads in character into parameter c. Checks for errors and prints them out.
 * Returns 0 if there is no char to read, 1 if there was a char read in.
 */
uchar input_char(uchar *ch) {
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <input_char+0x6>
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <input_char+0x8>
    1b1e:	0f 92       	push	r0
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	9c 83       	std	Y+4, r25	; 0x04
    1b26:	8b 83       	std	Y+3, r24	; 0x03
	 * uart_getc() returns in the lower byte the received character and
	 * in the higher byte (bitmask) the last receive error
	 * UART_NO_DATA is returned when no data is available.
	 *
	 */
	c = uart_getc();
    1b28:	0e 94 97 13 	call	0x272e	; 0x272e <uart_getc>
    1b2c:	9a 83       	std	Y+2, r25	; 0x02
    1b2e:	89 83       	std	Y+1, r24	; 0x01
	if (c & UART_NO_DATA) {
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	80 70       	andi	r24, 0x00	; 0
    1b36:	91 70       	andi	r25, 0x01	; 1
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	11 f0       	breq	.+4      	; 0x1b40 <input_char+0x2a>
		// no data available from UART
		return 0;
    1b3c:	1d 82       	std	Y+5, r1	; 0x05
    1b3e:	24 c0       	rjmp	.+72     	; 0x1b88 <input_char+0x72>
	}
	// make uchar from character in int value
	*ch = (uchar) c;
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	eb 81       	ldd	r30, Y+3	; 0x03
    1b44:	fc 81       	ldd	r31, Y+4	; 0x04
    1b46:	80 83       	st	Z, r24

	/*
	 * new data available from UART
	 * check for Frame or Overrun error
	 */
	if (c & UART_FRAME_ERROR) {
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4c:	80 70       	andi	r24, 0x00	; 0
    1b4e:	98 70       	andi	r25, 0x08	; 8
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	21 f0       	breq	.+8      	; 0x1b5c <input_char+0x46>
		/* Framing Error detected, i.e no stop bit detected */
		uart_puts_P("UART Frame Error: ");
    1b54:	81 e8       	ldi	r24, 0x81	; 129
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
	}
	if (c & UART_OVERRUN_ERROR) {
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b60:	80 70       	andi	r24, 0x00	; 0
    1b62:	94 70       	andi	r25, 0x04	; 4
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	21 f0       	breq	.+8      	; 0x1b70 <input_char+0x5a>
		/*
		 * Overrun, a character already present in the UART UDR register was
		 * not read by the interrupt handler before the next character arrived,
		 * one or more received characters have been dropped
		 */
		uart_puts_P("UART Overrun Error: ");
    1b68:	8c e6       	ldi	r24, 0x6C	; 108
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
	}
	if (c & UART_BUFFER_OVERFLOW) {
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	80 70       	andi	r24, 0x00	; 0
    1b76:	92 70       	andi	r25, 0x02	; 2
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	21 f0       	breq	.+8      	; 0x1b84 <input_char+0x6e>
		/*
		 * We are not reading the receive buffer fast enough,
		 * one or more received character have been dropped
		 */
		uart_puts_P("Buffer overflow error: ");
    1b7c:	84 e5       	ldi	r24, 0x54	; 84
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
	}
	return 1;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	8d 83       	std	Y+5, r24	; 0x05
    1b88:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <process_char>:
 * a) xon/xoff mode forward buffer to GPIB
 * b) no flow control: prints error message that input buffer is full.
 *
 * Returns 1 if command end is detected, 0 otherwise.
 */
uchar process_char(uchar ch) {
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <process_char+0x6>
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	8a 83       	std	Y+2, r24	; 0x02
	uchar ret = 0;
    1ba6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * send received character back depending on global flag
	 */
	if (rs232_remote_echo) {
    1ba8:	80 91 9d 03 	lds	r24, 0x039D
    1bac:	88 23       	and	r24, r24
    1bae:	19 f0       	breq	.+6      	; 0x1bb6 <process_char+0x1c>
		uart_putc((unsigned char) ch);
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	0e 94 ed 13 	call	0x27da	; 0x27da <uart_putc>
	}

	// if input buffer is not full, add char
	if (buf_ptr < COMMAND_INPUT_BUFFER_SIZE - 1) {
    1bb6:	80 91 b3 03 	lds	r24, 0x03B3
    1bba:	90 91 b4 03 	lds	r25, 0x03B4
    1bbe:	8f 34       	cpi	r24, 0x4F	; 79
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	bc f4       	brge	.+46     	; 0x1bf2 <process_char+0x58>
		buf[buf_ptr++] = ch;
    1bc4:	20 91 b3 03 	lds	r18, 0x03B3
    1bc8:	30 91 b4 03 	lds	r19, 0x03B4
    1bcc:	f9 01       	movw	r30, r18
    1bce:	ee 53       	subi	r30, 0x3E	; 62
    1bd0:	fb 4f       	sbci	r31, 0xFB	; 251
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	80 83       	st	Z, r24
    1bd6:	c9 01       	movw	r24, r18
    1bd8:	01 96       	adiw	r24, 0x01	; 1
    1bda:	90 93 b4 03 	sts	0x03B4, r25
    1bde:	80 93 b3 03 	sts	0x03B3, r24
		buf[buf_ptr] = '\0';
    1be2:	80 91 b3 03 	lds	r24, 0x03B3
    1be6:	90 91 b4 03 	lds	r25, 0x03B4
    1bea:	fc 01       	movw	r30, r24
    1bec:	ee 53       	subi	r30, 0x3E	; 62
    1bee:	fb 4f       	sbci	r31, 0xFB	; 251
    1bf0:	10 82       	st	Z, r1
	}

	// if command ends or buffer is full ...
	if (ch == ASCII_CODE_CR || buf_ptr >= COMMAND_INPUT_BUFFER_SIZE - 1) {
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	8d 30       	cpi	r24, 0x0D	; 13
    1bf6:	39 f0       	breq	.+14     	; 0x1c06 <process_char+0x6c>
    1bf8:	80 91 b3 03 	lds	r24, 0x03B3
    1bfc:	90 91 b4 03 	lds	r25, 0x03B4
    1c00:	8f 34       	cpi	r24, 0x4F	; 79
    1c02:	91 05       	cpc	r25, r1
    1c04:	6c f1       	brlt	.+90     	; 0x1c60 <process_char+0xc6>

		if (ch == ASCII_CODE_CR) {
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	8d 30       	cpi	r24, 0x0D	; 13
    1c0a:	a1 f4       	brne	.+40     	; 0x1c34 <process_char+0x9a>
			// adjust string terminator
			buf[--buf_ptr] = '\0';
    1c0c:	80 91 b3 03 	lds	r24, 0x03B3
    1c10:	90 91 b4 03 	lds	r25, 0x03B4
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	90 93 b4 03 	sts	0x03B4, r25
    1c1a:	80 93 b3 03 	sts	0x03B3, r24
    1c1e:	80 91 b3 03 	lds	r24, 0x03B3
    1c22:	90 91 b4 03 	lds	r25, 0x03B4
    1c26:	fc 01       	movw	r30, r24
    1c28:	ee 53       	subi	r30, 0x3E	; 62
    1c2a:	fb 4f       	sbci	r31, 0xFB	; 251
    1c2c:	10 82       	st	Z, r1
			// let calling function send last command part (or command itself)
			ret = 1;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	89 83       	std	Y+1, r24	; 0x01
    1c32:	16 c0       	rjmp	.+44     	; 0x1c60 <process_char+0xc6>
		} else {
			if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
    1c34:	0e 94 91 12 	call	0x2522	; 0x2522 <uart_get_flow_control>
    1c38:	81 30       	cpi	r24, 0x01	; 1
    1c3a:	51 f4       	brne	.+20     	; 0x1c50 <process_char+0xb6>
				// send intermediate part of command.
				send_command(buf, SEND_PART);
    1c3c:	82 ec       	ldi	r24, 0xC2	; 194
    1c3e:	94 e0       	ldi	r25, 0x04	; 4
    1c40:	61 e0       	ldi	r22, 0x01	; 1
    1c42:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <send_command>
				buf_ptr = 0;
    1c46:	10 92 b4 03 	sts	0x03B4, r1
    1c4a:	10 92 b3 03 	sts	0x03B3, r1
    1c4e:	08 c0       	rjmp	.+16     	; 0x1c60 <process_char+0xc6>
			} else {
				// send intermediate part of command.
				uart_puts_P("Command overflow.");
    1c50:	84 e9       	ldi	r24, 0x94	; 148
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
				buf_ptr = 0;
    1c58:	10 92 b4 03 	sts	0x03B4, r1
    1c5c:	10 92 b3 03 	sts	0x03B3, r1
			}
		}
	}
	return ret;
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <input_process>:
 * This approach handles small single line commands (needing no flow control) and large
 * multi-line commands if flow control is xon/xoff.
 *
 * \returns The character read in
 */
uchar input_process(void) {
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <input_process+0x6>
    1c72:	0f 92       	push	r0
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
	uchar ch, ret = 0;
    1c78:	19 82       	std	Y+1, r1	; 0x01

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
    1c7a:	0e 94 91 12 	call	0x2522	; 0x2522 <uart_get_flow_control>
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	89 f4       	brne	.+34     	; 0x1ca4 <input_process+0x38>
    1c82:	0c c0       	rjmp	.+24     	; 0x1c9c <input_process+0x30>
		while (!ret) {
			// if nothing can be read in, return
			if (!input_char(&ch)) {
    1c84:	ce 01       	movw	r24, r28
    1c86:	02 96       	adiw	r24, 0x02	; 2
    1c88:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <input_char>
    1c8c:	88 23       	and	r24, r24
    1c8e:	11 f4       	brne	.+4      	; 0x1c94 <input_process+0x28>
				return 0;
    1c90:	1b 82       	std	Y+3, r1	; 0x03
    1c92:	16 c0       	rjmp	.+44     	; 0x1cc0 <input_process+0x54>
			}
			ret = process_char(ch);
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <process_char>
    1c9a:	89 83       	std	Y+1, r24	; 0x01
 */
uchar input_process(void) {
	uchar ch, ret = 0;

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
		while (!ret) {
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	88 23       	and	r24, r24
    1ca0:	89 f3       	breq	.-30     	; 0x1c84 <input_process+0x18>
    1ca2:	0c c0       	rjmp	.+24     	; 0x1cbc <input_process+0x50>
			}
			ret = process_char(ch);
		}
	} else {
		// if nothing can be read in, return
		if (!input_char(&ch)) {
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	02 96       	adiw	r24, 0x02	; 2
    1ca8:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <input_char>
    1cac:	88 23       	and	r24, r24
    1cae:	11 f4       	brne	.+4      	; 0x1cb4 <input_process+0x48>
			return 0;
    1cb0:	1b 82       	std	Y+3, r1	; 0x03
    1cb2:	06 c0       	rjmp	.+12     	; 0x1cc0 <input_process+0x54>
		}
		ret = process_char(ch);
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <process_char>
    1cba:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	8b 83       	std	Y+3, r24	; 0x03
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <handle_internal_commands>:


/**
 * Handles builtin commands.
 */
void handle_internal_commands(uchar *commandString) {
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <handle_internal_commands+0x6>
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <handle_internal_commands+0x8>
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <handle_internal_commands+0xa>
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	9c 83       	std	Y+4, r25	; 0x04
    1cde:	8b 83       	std	Y+3, r24	; 0x03
	uchar val, val1;

	switch (buf[1]) {
    1ce0:	80 91 c3 04 	lds	r24, 0x04C3
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	3e 83       	std	Y+6, r19	; 0x06
    1cea:	2d 83       	std	Y+5, r18	; 0x05
    1cec:	8d 81       	ldd	r24, Y+5	; 0x05
    1cee:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf0:	88 36       	cpi	r24, 0x68	; 104
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <handle_internal_commands+0x2a>
    1cf6:	30 c1       	rjmp	.+608    	; 0x1f58 <handle_internal_commands+0x28a>
    1cf8:	2d 81       	ldd	r18, Y+5	; 0x05
    1cfa:	3e 81       	ldd	r19, Y+6	; 0x06
    1cfc:	29 36       	cpi	r18, 0x69	; 105
    1cfe:	31 05       	cpc	r19, r1
    1d00:	f4 f4       	brge	.+60     	; 0x1d3e <handle_internal_commands+0x70>
    1d02:	8d 81       	ldd	r24, Y+5	; 0x05
    1d04:	9e 81       	ldd	r25, Y+6	; 0x06
    1d06:	81 36       	cpi	r24, 0x61	; 97
    1d08:	91 05       	cpc	r25, r1
    1d0a:	61 f1       	breq	.+88     	; 0x1d64 <handle_internal_commands+0x96>
    1d0c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d0e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d10:	22 36       	cpi	r18, 0x62	; 98
    1d12:	31 05       	cpc	r19, r1
    1d14:	6c f4       	brge	.+26     	; 0x1d30 <handle_internal_commands+0x62>
    1d16:	8d 81       	ldd	r24, Y+5	; 0x05
    1d18:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1a:	8b 32       	cpi	r24, 0x2B	; 43
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <handle_internal_commands+0x54>
    1d20:	88 c0       	rjmp	.+272    	; 0x1e32 <handle_internal_commands+0x164>
    1d22:	2d 81       	ldd	r18, Y+5	; 0x05
    1d24:	3e 81       	ldd	r19, Y+6	; 0x06
    1d26:	2d 32       	cpi	r18, 0x2D	; 45
    1d28:	31 05       	cpc	r19, r1
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <handle_internal_commands+0x60>
    1d2c:	bf c0       	rjmp	.+382    	; 0x1eac <handle_internal_commands+0x1de>
    1d2e:	43 c1       	rjmp	.+646    	; 0x1fb6 <handle_internal_commands+0x2e8>
    1d30:	8d 81       	ldd	r24, Y+5	; 0x05
    1d32:	9e 81       	ldd	r25, Y+6	; 0x06
    1d34:	85 36       	cpi	r24, 0x65	; 101
    1d36:	91 05       	cpc	r25, r1
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <handle_internal_commands+0x6e>
    1d3a:	36 c1       	rjmp	.+620    	; 0x1fa8 <handle_internal_commands+0x2da>
    1d3c:	3c c1       	rjmp	.+632    	; 0x1fb6 <handle_internal_commands+0x2e8>
    1d3e:	2d 81       	ldd	r18, Y+5	; 0x05
    1d40:	3e 81       	ldd	r19, Y+6	; 0x06
    1d42:	23 37       	cpi	r18, 0x73	; 115
    1d44:	31 05       	cpc	r19, r1
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <handle_internal_commands+0x7c>
    1d48:	4a c0       	rjmp	.+148    	; 0x1dde <handle_internal_commands+0x110>
    1d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4e:	88 37       	cpi	r24, 0x78	; 120
    1d50:	91 05       	cpc	r25, r1
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <handle_internal_commands+0x88>
    1d54:	e8 c0       	rjmp	.+464    	; 0x1f26 <handle_internal_commands+0x258>
    1d56:	2d 81       	ldd	r18, Y+5	; 0x05
    1d58:	3e 81       	ldd	r19, Y+6	; 0x06
    1d5a:	29 36       	cpi	r18, 0x69	; 105
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <handle_internal_commands+0x94>
    1d60:	fe c0       	rjmp	.+508    	; 0x1f5e <handle_internal_commands+0x290>
    1d62:	29 c1       	rjmp	.+594    	; 0x1fb6 <handle_internal_commands+0x2e8>
	case 'a':
		/* set partner primary+secondary address */
		stringToTwoUchars((char*) (&(buf[2])), &val, &val1);
    1d64:	84 ec       	ldi	r24, 0xC4	; 196
    1d66:	94 e0       	ldi	r25, 0x04	; 4
    1d68:	ae 01       	movw	r20, r28
    1d6a:	4e 5f       	subi	r20, 0xFE	; 254
    1d6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d6e:	9e 01       	movw	r18, r28
    1d70:	2f 5f       	subi	r18, 0xFF	; 255
    1d72:	3f 4f       	sbci	r19, 0xFF	; 255
    1d74:	b9 01       	movw	r22, r18
    1d76:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <stringToTwoUchars>
		sprintf(buf, "Set partner address, primary: %u , secondary: %u\n\r",
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	48 2f       	mov	r20, r24
    1d84:	50 e0       	ldi	r21, 0x00	; 0
    1d86:	8d b7       	in	r24, 0x3d	; 61
    1d88:	9e b7       	in	r25, 0x3e	; 62
    1d8a:	08 97       	sbiw	r24, 0x08	; 8
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	9e bf       	out	0x3e, r25	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	8d bf       	out	0x3d, r24	; 61
    1d96:	ed b7       	in	r30, 0x3d	; 61
    1d98:	fe b7       	in	r31, 0x3e	; 62
    1d9a:	31 96       	adiw	r30, 0x01	; 1
    1d9c:	82 ec       	ldi	r24, 0xC2	; 194
    1d9e:	94 e0       	ldi	r25, 0x04	; 4
    1da0:	91 83       	std	Z+1, r25	; 0x01
    1da2:	80 83       	st	Z, r24
    1da4:	88 e4       	ldi	r24, 0x48	; 72
    1da6:	92 e0       	ldi	r25, 0x02	; 2
    1da8:	93 83       	std	Z+3, r25	; 0x03
    1daa:	82 83       	std	Z+2, r24	; 0x02
    1dac:	35 83       	std	Z+5, r19	; 0x05
    1dae:	24 83       	std	Z+4, r18	; 0x04
    1db0:	57 83       	std	Z+7, r21	; 0x07
    1db2:	46 83       	std	Z+6, r20	; 0x06
    1db4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    1db8:	2d b7       	in	r18, 0x3d	; 61
    1dba:	3e b7       	in	r19, 0x3e	; 62
    1dbc:	28 5f       	subi	r18, 0xF8	; 248
    1dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	3e bf       	out	0x3e, r19	; 62
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	2d bf       	out	0x3d, r18	; 61
				val, val1);
		uart_puts(buf);
    1dca:	82 ec       	ldi	r24, 0xC2	; 194
    1dcc:	94 e0       	ldi	r25, 0x04	; 4
    1dce:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>
		gpib_set_partner_address(val, val1);
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd6:	69 2f       	mov	r22, r25
    1dd8:	0e 94 25 0c 	call	0x184a	; 0x184a <gpib_set_partner_address>
    1ddc:	f2 c0       	rjmp	.+484    	; 0x1fc2 <handle_internal_commands+0x2f4>
		break;
	case 's':
		/* set partner secondary address */
		val = atoi((char*) (&(buf[2])));
    1dde:	84 ec       	ldi	r24, 0xC4	; 196
    1de0:	94 e0       	ldi	r25, 0x04	; 4
    1de2:	0e 94 88 01 	call	0x310	; 0x310 <atoi>
    1de6:	89 83       	std	Y+1, r24	; 0x01
		sprintf(buf, "Set partner secondary address to %u\n\r", val);
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <handle_internal_commands+0x122>
    1df0:	00 d0       	rcall	.+0      	; 0x1df2 <handle_internal_commands+0x124>
    1df2:	00 d0       	rcall	.+0      	; 0x1df4 <handle_internal_commands+0x126>
    1df4:	ed b7       	in	r30, 0x3d	; 61
    1df6:	fe b7       	in	r31, 0x3e	; 62
    1df8:	31 96       	adiw	r30, 0x01	; 1
    1dfa:	82 ec       	ldi	r24, 0xC2	; 194
    1dfc:	94 e0       	ldi	r25, 0x04	; 4
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	80 83       	st	Z, r24
    1e02:	8b e7       	ldi	r24, 0x7B	; 123
    1e04:	92 e0       	ldi	r25, 0x02	; 2
    1e06:	93 83       	std	Z+3, r25	; 0x03
    1e08:	82 83       	std	Z+2, r24	; 0x02
    1e0a:	35 83       	std	Z+5, r19	; 0x05
    1e0c:	24 83       	std	Z+4, r18	; 0x04
    1e0e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    1e12:	8d b7       	in	r24, 0x3d	; 61
    1e14:	9e b7       	in	r25, 0x3e	; 62
    1e16:	06 96       	adiw	r24, 0x06	; 6
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	9e bf       	out	0x3e, r25	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	8d bf       	out	0x3d, r24	; 61
		uart_puts(buf);
    1e22:	82 ec       	ldi	r24, 0xC2	; 194
    1e24:	94 e0       	ldi	r25, 0x04	; 4
    1e26:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>
		gpib_set_partner_secondary(val);
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	0e 94 37 0c 	call	0x186e	; 0x186e <gpib_set_partner_secondary>
    1e30:	c8 c0       	rjmp	.+400    	; 0x1fc2 <handle_internal_commands+0x2f4>
		break;
	case '+':
		/* add device */
		stringToTwoUchars((char*) (&(buf[2])), &val, &val1);
    1e32:	84 ec       	ldi	r24, 0xC4	; 196
    1e34:	94 e0       	ldi	r25, 0x04	; 4
    1e36:	ae 01       	movw	r20, r28
    1e38:	4e 5f       	subi	r20, 0xFE	; 254
    1e3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e3c:	9e 01       	movw	r18, r28
    1e3e:	2f 5f       	subi	r18, 0xFF	; 255
    1e40:	3f 4f       	sbci	r19, 0xFF	; 255
    1e42:	b9 01       	movw	r22, r18
    1e44:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <stringToTwoUchars>
		sprintf(buf, "Add device, primary: %u , secondary: %u\n\r", val, val1);
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	48 2f       	mov	r20, r24
    1e52:	50 e0       	ldi	r21, 0x00	; 0
    1e54:	8d b7       	in	r24, 0x3d	; 61
    1e56:	9e b7       	in	r25, 0x3e	; 62
    1e58:	08 97       	sbiw	r24, 0x08	; 8
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	9e bf       	out	0x3e, r25	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	8d bf       	out	0x3d, r24	; 61
    1e64:	ed b7       	in	r30, 0x3d	; 61
    1e66:	fe b7       	in	r31, 0x3e	; 62
    1e68:	31 96       	adiw	r30, 0x01	; 1
    1e6a:	82 ec       	ldi	r24, 0xC2	; 194
    1e6c:	94 e0       	ldi	r25, 0x04	; 4
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	80 83       	st	Z, r24
    1e72:	81 ea       	ldi	r24, 0xA1	; 161
    1e74:	92 e0       	ldi	r25, 0x02	; 2
    1e76:	93 83       	std	Z+3, r25	; 0x03
    1e78:	82 83       	std	Z+2, r24	; 0x02
    1e7a:	35 83       	std	Z+5, r19	; 0x05
    1e7c:	24 83       	std	Z+4, r18	; 0x04
    1e7e:	57 83       	std	Z+7, r21	; 0x07
    1e80:	46 83       	std	Z+6, r20	; 0x06
    1e82:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    1e86:	2d b7       	in	r18, 0x3d	; 61
    1e88:	3e b7       	in	r19, 0x3e	; 62
    1e8a:	28 5f       	subi	r18, 0xF8	; 248
    1e8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	3e bf       	out	0x3e, r19	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	2d bf       	out	0x3d, r18	; 61
		uart_puts(buf);
    1e98:	82 ec       	ldi	r24, 0xC2	; 194
    1e9a:	94 e0       	ldi	r25, 0x04	; 4
    1e9c:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>
		gpib_add_partner_address(val, val1);
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea4:	69 2f       	mov	r22, r25
    1ea6:	0e 94 95 0c 	call	0x192a	; 0x192a <gpib_add_partner_address>
    1eaa:	8b c0       	rjmp	.+278    	; 0x1fc2 <handle_internal_commands+0x2f4>
		break;
	case '-':
		/* add device */
		stringToTwoUchars((char*) (&(buf[2])), &val, &val1);
    1eac:	84 ec       	ldi	r24, 0xC4	; 196
    1eae:	94 e0       	ldi	r25, 0x04	; 4
    1eb0:	ae 01       	movw	r20, r28
    1eb2:	4e 5f       	subi	r20, 0xFE	; 254
    1eb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb6:	9e 01       	movw	r18, r28
    1eb8:	2f 5f       	subi	r18, 0xFF	; 255
    1eba:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebc:	b9 01       	movw	r22, r18
    1ebe:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <stringToTwoUchars>
		sprintf(buf, "Remove device, primary: %u , secondary: %u\n\r", val,
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	48 2f       	mov	r20, r24
    1ecc:	50 e0       	ldi	r21, 0x00	; 0
    1ece:	8d b7       	in	r24, 0x3d	; 61
    1ed0:	9e b7       	in	r25, 0x3e	; 62
    1ed2:	08 97       	sbiw	r24, 0x08	; 8
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	9e bf       	out	0x3e, r25	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	8d bf       	out	0x3d, r24	; 61
    1ede:	ed b7       	in	r30, 0x3d	; 61
    1ee0:	fe b7       	in	r31, 0x3e	; 62
    1ee2:	31 96       	adiw	r30, 0x01	; 1
    1ee4:	82 ec       	ldi	r24, 0xC2	; 194
    1ee6:	94 e0       	ldi	r25, 0x04	; 4
    1ee8:	91 83       	std	Z+1, r25	; 0x01
    1eea:	80 83       	st	Z, r24
    1eec:	8b ec       	ldi	r24, 0xCB	; 203
    1eee:	92 e0       	ldi	r25, 0x02	; 2
    1ef0:	93 83       	std	Z+3, r25	; 0x03
    1ef2:	82 83       	std	Z+2, r24	; 0x02
    1ef4:	35 83       	std	Z+5, r19	; 0x05
    1ef6:	24 83       	std	Z+4, r18	; 0x04
    1ef8:	57 83       	std	Z+7, r21	; 0x07
    1efa:	46 83       	std	Z+6, r20	; 0x06
    1efc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    1f00:	2d b7       	in	r18, 0x3d	; 61
    1f02:	3e b7       	in	r19, 0x3e	; 62
    1f04:	28 5f       	subi	r18, 0xF8	; 248
    1f06:	3f 4f       	sbci	r19, 0xFF	; 255
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	3e bf       	out	0x3e, r19	; 62
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	2d bf       	out	0x3d, r18	; 61
				val1);
		uart_puts(buf);
    1f12:	82 ec       	ldi	r24, 0xC2	; 194
    1f14:	94 e0       	ldi	r25, 0x04	; 4
    1f16:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>
		gpib_remove_partner_address(val, val1);
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1e:	69 2f       	mov	r22, r25
    1f20:	0e 94 de 0c 	call	0x19bc	; 0x19bc <gpib_remove_partner_address>
    1f24:	4e c0       	rjmp	.+156    	; 0x1fc2 <handle_internal_commands+0x2f4>
		break;
	case 'x':
		/* Xon/Xoff flow control */
		if (!xonXoffMode) {
    1f26:	80 91 9e 03 	lds	r24, 0x039E
    1f2a:	88 23       	and	r24, r24
    1f2c:	59 f4       	brne	.+22     	; 0x1f44 <handle_internal_commands+0x276>
			xonXoffMode = 1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	80 93 9e 03 	sts	0x039E, r24
			uart_set_flow_control(FLOWCONTROL_XONXOFF);
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	0e 94 84 12 	call	0x2508	; 0x2508 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol on\n\r");
    1f3a:	82 ee       	ldi	r24, 0xE2	; 226
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
    1f42:	3f c0       	rjmp	.+126    	; 0x1fc2 <handle_internal_commands+0x2f4>
		} else {
			xonXoffMode = 0;
    1f44:	10 92 9e 03 	sts	0x039E, r1
			uart_set_flow_control(FLOWCONTROL_NONE);
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	0e 94 84 12 	call	0x2508	; 0x2508 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol off\n\r");
    1f4e:	87 ec       	ldi	r24, 0xC7	; 199
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
    1f56:	35 c0       	rjmp	.+106    	; 0x1fc2 <handle_internal_commands+0x2f4>
		}
		break;
	case 'h':
		/* print some usage infos */
		printHelp();
    1f58:	0e 94 6e 11 	call	0x22dc	; 0x22dc <printHelp>
    1f5c:	32 c0       	rjmp	.+100    	; 0x1fc2 <handle_internal_commands+0x2f4>
		break;
	case 'i':
		gpib_info();
    1f5e:	0e 94 96 09 	call	0x132c	; 0x132c <gpib_info>
		sprintf(buf, "Xon/Xoff flow control: %u\n\r", xonXoffMode);
    1f62:	80 91 9e 03 	lds	r24, 0x039E
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <handle_internal_commands+0x29e>
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <handle_internal_commands+0x2a0>
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <handle_internal_commands+0x2a2>
    1f70:	ed b7       	in	r30, 0x3d	; 61
    1f72:	fe b7       	in	r31, 0x3e	; 62
    1f74:	31 96       	adiw	r30, 0x01	; 1
    1f76:	82 ec       	ldi	r24, 0xC2	; 194
    1f78:	94 e0       	ldi	r25, 0x04	; 4
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	80 83       	st	Z, r24
    1f7e:	88 ef       	ldi	r24, 0xF8	; 248
    1f80:	92 e0       	ldi	r25, 0x02	; 2
    1f82:	93 83       	std	Z+3, r25	; 0x03
    1f84:	82 83       	std	Z+2, r24	; 0x02
    1f86:	35 83       	std	Z+5, r19	; 0x05
    1f88:	24 83       	std	Z+4, r18	; 0x04
    1f8a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    1f8e:	8d b7       	in	r24, 0x3d	; 61
    1f90:	9e b7       	in	r25, 0x3e	; 62
    1f92:	06 96       	adiw	r24, 0x06	; 6
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	f8 94       	cli
    1f98:	9e bf       	out	0x3e, r25	; 62
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	8d bf       	out	0x3d, r24	; 61
		uart_puts(buf);
    1f9e:	82 ec       	ldi	r24, 0xC2	; 194
    1fa0:	94 e0       	ldi	r25, 0x04	; 4
    1fa2:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>
    1fa6:	0d c0       	rjmp	.+26     	; 0x1fc2 <handle_internal_commands+0x2f4>
		break;
	case 'e':
		uart_puts_P("Check errors\n\r");
    1fa8:	88 eb       	ldi	r24, 0xB8	; 184
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
		check_errors();
    1fb0:	0e 94 76 0d 	call	0x1aec	; 0x1aec <check_errors>
    1fb4:	06 c0       	rjmp	.+12     	; 0x1fc2 <handle_internal_commands+0x2f4>
		arb_ramp();
		uart_puts("arb done\n\r");
		break;
#endif
	default:
		uart_puts_P("unknown command\n\r");
    1fb6:	86 ea       	ldi	r24, 0xA6	; 166
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
		printHelp();
    1fbe:	0e 94 6e 11 	call	0x22dc	; 0x22dc <printHelp>
		break;
	}
}
    1fc2:	26 96       	adiw	r28, 0x06	; 6
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <send_command>:
 * Sends a command.
 * Mode is SEND_FULL_CMD or SEND_PART
 *
 * Returns 1 if command is a query, 0 otherwise.
 */
uchar send_command(uchar *commandString, uchar mode) {
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	2c 97       	sbiw	r28, 0x0c	; 12
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	de bf       	out	0x3e, r29	; 62
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	cd bf       	out	0x3d, r28	; 61
    1fe8:	9b 87       	std	Y+11, r25	; 0x0b
    1fea:	8a 87       	std	Y+10, r24	; 0x0a
    1fec:	6c 87       	std	Y+12, r22	; 0x0c
	uchar controlString[8];
	uchar is_query;

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
    1fee:	8f e5       	ldi	r24, 0x5F	; 95
    1ff0:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1ff2:	ce 01       	movw	r24, r28
    1ff4:	02 96       	adiw	r24, 0x02	; 2
    1ff6:	61 e0       	ldi	r22, 0x01	; 1
    1ff8:	70 e0       	ldi	r23, 0x00	; 0
    1ffa:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    1ffe:	8f e3       	ldi	r24, 0x3F	; 63
    2000:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    2002:	ce 01       	movw	r24, r28
    2004:	02 96       	adiw	r24, 0x02	; 2
    2006:	61 e0       	ldi	r22, 0x01	; 1
    2008:	70 e0       	ldi	r23, 0x00	; 0
    200a:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>

	// set device to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_partner_pad());
    200e:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpib_get_partner_pad>
    2012:	80 5e       	subi	r24, 0xE0	; 224
    2014:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    2016:	ce 01       	movw	r24, r28
    2018:	02 96       	adiw	r24, 0x02	; 2
    201a:	61 e0       	ldi	r22, 0x01	; 1
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	// send secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
    2022:	0e 94 4d 0c 	call	0x189a	; 0x189a <gpib_get_partner_sad>
    2026:	8f 3f       	cpi	r24, 0xFF	; 255
    2028:	51 f0       	breq	.+20     	; 0x203e <send_command+0x6a>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
    202a:	0e 94 4d 0c 	call	0x189a	; 0x189a <gpib_get_partner_sad>
    202e:	80 66       	ori	r24, 0x60	; 96
    2030:	8a 83       	std	Y+2, r24	; 0x02
		gpib_cmd(controlString, 1);
    2032:	ce 01       	movw	r24, r28
    2034:	02 96       	adiw	r24, 0x02	; 2
    2036:	61 e0       	ldi	r22, 0x01	; 1
    2038:	70 e0       	ldi	r23, 0x00	; 0
    203a:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	}

	// set myself (controller) to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_address());
    203e:	0e 94 56 0c 	call	0x18ac	; 0x18ac <gpib_get_address>
    2042:	80 5c       	subi	r24, 0xC0	; 192
    2044:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    2046:	ce 01       	movw	r24, r28
    2048:	02 96       	adiw	r24, 0x02	; 2
    204a:	61 e0       	ldi	r22, 0x01	; 1
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	//uart_puts("\n\rcommand: ");
	//uart_puts((char*) commandString);
	//uart_puts("\n\r");
	// gpib bus write
	// put out command to listeners
	if (mode==SEND_FULL_CMD) {
    2052:	8c 85       	ldd	r24, Y+12	; 0x0c
    2054:	82 30       	cpi	r24, 0x02	; 2
    2056:	39 f4       	brne	.+14     	; 0x2066 <send_command+0x92>
		// full cmd , we have C string where length can be calculated by gpib_write()
		gpib_write(commandString, 0);
    2058:	8a 85       	ldd	r24, Y+10	; 0x0a
    205a:	9b 85       	ldd	r25, Y+11	; 0x0b
    205c:	60 e0       	ldi	r22, 0x00	; 0
    205e:	70 e0       	ldi	r23, 0x00	; 0
    2060:	0e 94 a9 06 	call	0xd52	; 0xd52 <gpib_write>
    2064:	06 c0       	rjmp	.+12     	; 0x2072 <send_command+0x9e>
	} else {
		// partial command, we must give length value; buffer is full.
		gpib_write(commandString, COMMAND_INPUT_BUFFER_SIZE-1);
    2066:	8a 85       	ldd	r24, Y+10	; 0x0a
    2068:	9b 85       	ldd	r25, Y+11	; 0x0b
    206a:	6f e4       	ldi	r22, 0x4F	; 79
    206c:	70 e0       	ldi	r23, 0x00	; 0
    206e:	0e 94 a9 06 	call	0xd52	; 0xd52 <gpib_write>
	}

	// check if query or command only
	if (strchr((char*) commandString, '?') != NULL) {
    2072:	8a 85       	ldd	r24, Y+10	; 0x0a
    2074:	9b 85       	ldd	r25, Y+11	; 0x0b
    2076:	6f e3       	ldi	r22, 0x3F	; 63
    2078:	70 e0       	ldi	r23, 0x00	; 0
    207a:	0e 94 ab 01 	call	0x356	; 0x356 <strchr>
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	19 f0       	breq	.+6      	; 0x2088 <send_command+0xb4>
		//uart_puts("Query. Will check for answer.\n\r");
		is_query = 1;
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	89 83       	std	Y+1, r24	; 0x01
    2086:	01 c0       	rjmp	.+2      	; 0x208a <send_command+0xb6>
	} else {
		//uart_puts("Command only.\n\r");
		is_query = 0;
    2088:	19 82       	std	Y+1, r1	; 0x01
	}
	return is_query;
    208a:	89 81       	ldd	r24, Y+1	; 0x01
}
    208c:	2c 96       	adiw	r28, 0x0c	; 12
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	cd bf       	out	0x3d, r28	; 61
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	08 95       	ret

0000209e <receiveAnswer>:

/**
 * Receives answer after command was sent.
 */
void receiveAnswer() {
    209e:	df 93       	push	r29
    20a0:	cf 93       	push	r28
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	2c 97       	sbiw	r28, 0x0c	; 12
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	uchar b, e;
	uchar colptr=0;
    20b2:	19 82       	std	Y+1, r1	; 0x01

	// UNT and UNL
	controlString[0] = G_CMD_UNT;
    20b4:	8f e5       	ldi	r24, 0x5F	; 95
    20b6:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
    20b8:	ce 01       	movw	r24, r28
    20ba:	03 96       	adiw	r24, 0x03	; 3
    20bc:	61 e0       	ldi	r22, 0x01	; 1
    20be:	70 e0       	ldi	r23, 0x00	; 0
    20c0:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    20c4:	8f e3       	ldi	r24, 0x3F	; 63
    20c6:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
    20c8:	ce 01       	movw	r24, r28
    20ca:	03 96       	adiw	r24, 0x03	; 3
    20cc:	61 e0       	ldi	r22, 0x01	; 1
    20ce:	70 e0       	ldi	r23, 0x00	; 0
    20d0:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>

	// set myself (controller) to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_address());
    20d4:	0e 94 56 0c 	call	0x18ac	; 0x18ac <gpib_get_address>
    20d8:	80 5e       	subi	r24, 0xE0	; 224
    20da:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
    20dc:	ce 01       	movw	r24, r28
    20de:	03 96       	adiw	r24, 0x03	; 3
    20e0:	61 e0       	ldi	r22, 0x01	; 1
    20e2:	70 e0       	ldi	r23, 0x00	; 0
    20e4:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>

	// set device to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_partner_pad());
    20e8:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpib_get_partner_pad>
    20ec:	80 5c       	subi	r24, 0xC0	; 192
    20ee:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
    20f0:	ce 01       	movw	r24, r28
    20f2:	03 96       	adiw	r24, 0x03	; 3
    20f4:	61 e0       	ldi	r22, 0x01	; 1
    20f6:	70 e0       	ldi	r23, 0x00	; 0
    20f8:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	// secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
    20fc:	0e 94 4d 0c 	call	0x189a	; 0x189a <gpib_get_partner_sad>
    2100:	8f 3f       	cpi	r24, 0xFF	; 255
    2102:	51 f0       	breq	.+20     	; 0x2118 <receiveAnswer+0x7a>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
    2104:	0e 94 4d 0c 	call	0x189a	; 0x189a <gpib_get_partner_sad>
    2108:	80 66       	ori	r24, 0x60	; 96
    210a:	8b 83       	std	Y+3, r24	; 0x03
		gpib_cmd(controlString, 1);
    210c:	ce 01       	movw	r24, r28
    210e:	03 96       	adiw	r24, 0x03	; 3
    2110:	61 e0       	ldi	r22, 0x01	; 1
    2112:	70 e0       	ldi	r23, 0x00	; 0
    2114:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	}

	// read the answer until EOI is detected (then e becomes true)
	do {
		// gpib bus receive
		e = gpib_receive(&b);
    2118:	ce 01       	movw	r24, r28
    211a:	0b 96       	adiw	r24, 0x0b	; 11
    211c:	0e 94 28 05 	call	0xa50	; 0xa50 <gpib_receive>
    2120:	8a 83       	std	Y+2, r24	; 0x02
		// write out character
		uart_putc(b);
    2122:	8b 85       	ldd	r24, Y+11	; 0x0b
    2124:	0e 94 ed 13 	call	0x27da	; 0x27da <uart_putc>
		if (linebreak && (colptr++==linebreak)) {
    2128:	80 91 a0 03 	lds	r24, 0x03A0
    212c:	88 23       	and	r24, r24
    212e:	99 f0       	breq	.+38     	; 0x2156 <receiveAnswer+0xb8>
    2130:	90 91 a0 03 	lds	r25, 0x03A0
    2134:	1c 86       	std	Y+12, r1	; 0x0c
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	89 17       	cp	r24, r25
    213a:	11 f4       	brne	.+4      	; 0x2140 <receiveAnswer+0xa2>
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	8c 87       	std	Y+12, r24	; 0x0c
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	8f 5f       	subi	r24, 0xFF	; 255
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	8c 85       	ldd	r24, Y+12	; 0x0c
    2148:	88 23       	and	r24, r24
    214a:	29 f0       	breq	.+10     	; 0x2156 <receiveAnswer+0xb8>
			uart_puts_P("\n\r");
    214c:	8c ef       	ldi	r24, 0xFC	; 252
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
			colptr=0;
    2154:	19 82       	std	Y+1, r1	; 0x01
		}
		//sprintf((char*)buf,"%02x - %c\n\r", b, b);
		//uart_puts((char*)buf);
	} while (!e);
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	88 23       	and	r24, r24
    215a:	f1 f2       	breq	.-68     	; 0x2118 <receiveAnswer+0x7a>

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
    215c:	8f e5       	ldi	r24, 0x5F	; 95
    215e:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
    2160:	ce 01       	movw	r24, r28
    2162:	03 96       	adiw	r24, 0x03	; 3
    2164:	61 e0       	ldi	r22, 0x01	; 1
    2166:	70 e0       	ldi	r23, 0x00	; 0
    2168:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    216c:	8f e3       	ldi	r24, 0x3F	; 63
    216e:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
    2170:	ce 01       	movw	r24, r28
    2172:	03 96       	adiw	r24, 0x03	; 3
    2174:	61 e0       	ldi	r22, 0x01	; 1
    2176:	70 e0       	ldi	r23, 0x00	; 0
    2178:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
}
    217c:	2c 96       	adiw	r28, 0x0c	; 12
    217e:	0f b6       	in	r0, 0x3f	; 63
    2180:	f8 94       	cli
    2182:	de bf       	out	0x3e, r29	; 62
    2184:	0f be       	out	0x3f, r0	; 63
    2186:	cd bf       	out	0x3d, r28	; 61
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <srq_occured>:

/**
 * Check if a SRQ occured
 */
uchar srq_occured(int* old_time) {
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	00 d0       	rcall	.+0      	; 0x2194 <srq_occured+0x6>
    2194:	0f 92       	push	r0
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	9b 83       	std	Y+3, r25	; 0x03
    219c:	8a 83       	std	Y+2, r24	; 0x02
	uchar srq = 0;
    219e:	19 82       	std	Y+1, r1	; 0x01
	if (*old_time == 0) {
    21a0:	ea 81       	ldd	r30, Y+2	; 0x02
    21a2:	fb 81       	ldd	r31, Y+3	; 0x03
    21a4:	80 81       	ld	r24, Z
    21a6:	91 81       	ldd	r25, Z+1	; 0x01
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	49 f4       	brne	.+18     	; 0x21be <srq_occured+0x30>
		// old_time value initialization on first call with value s
		*old_time = s;
    21ac:	80 91 13 05 	lds	r24, 0x0513
    21b0:	88 2f       	mov	r24, r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	ea 81       	ldd	r30, Y+2	; 0x02
    21b6:	fb 81       	ldd	r31, Y+3	; 0x03
    21b8:	91 83       	std	Z+1, r25	; 0x01
    21ba:	80 83       	st	Z, r24
    21bc:	1e c0       	rjmp	.+60     	; 0x21fa <srq_occured+0x6c>
	} else {
		if (s > *old_time) {
    21be:	80 91 13 05 	lds	r24, 0x0513
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	ea 81       	ldd	r30, Y+2	; 0x02
    21c8:	fb 81       	ldd	r31, Y+3	; 0x03
    21ca:	80 81       	ld	r24, Z
    21cc:	91 81       	ldd	r25, Z+1	; 0x01
    21ce:	82 17       	cp	r24, r18
    21d0:	93 07       	cpc	r25, r19
    21d2:	9c f4       	brge	.+38     	; 0x21fa <srq_occured+0x6c>
			// some time has passed - check if srq was set
			srq = bit_is_clear(PIND, G_SRQ);
    21d4:	e0 e3       	ldi	r30, 0x30	; 48
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	88 2f       	mov	r24, r24
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	80 74       	andi	r24, 0x40	; 64
    21e0:	90 70       	andi	r25, 0x00	; 0
    21e2:	19 82       	std	Y+1, r1	; 0x01
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	11 f4       	brne	.+4      	; 0x21ec <srq_occured+0x5e>
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	89 83       	std	Y+1, r24	; 0x01
			if (srq)
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	88 23       	and	r24, r24
    21f0:	21 f0       	breq	.+8      	; 0x21fa <srq_occured+0x6c>
				uart_puts_P("\n\rSRQ detected.\n\r");
    21f2:	8f ef       	ldi	r24, 0xFF	; 255
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
		}
	}
	return srq;
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	cf 91       	pop	r28
    2204:	df 91       	pop	r29
    2206:	08 95       	ret

00002208 <handle_srq>:

/**
 * Handles SRQs by doing serial poll
 *
 */
uchar handle_srq(uchar *buf, int *buf_ptr) {
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	28 97       	sbiw	r28, 0x08	; 8
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	9d 83       	std	Y+5, r25	; 0x05
    221e:	8c 83       	std	Y+4, r24	; 0x04
    2220:	7f 83       	std	Y+7, r23	; 0x07
    2222:	6e 83       	std	Y+6, r22	; 0x06
	uchar command_ready = 0;
    2224:	19 82       	std	Y+1, r1	; 0x01
	uint8_t primary, secondary;

	if (!gpib_serial_poll(&primary, &secondary)) {
    2226:	ce 01       	movw	r24, r28
    2228:	02 96       	adiw	r24, 0x02	; 2
    222a:	9e 01       	movw	r18, r28
    222c:	2d 5f       	subi	r18, 0xFD	; 253
    222e:	3f 4f       	sbci	r19, 0xFF	; 255
    2230:	b9 01       	movw	r22, r18
    2232:	0e 94 ed 0a 	call	0x15da	; 0x15da <gpib_serial_poll>
    2236:	88 23       	and	r24, r24
    2238:	69 f4       	brne	.+26     	; 0x2254 <handle_srq+0x4c>
		uart_puts_P(
    223a:	8c e2       	ldi	r24, 0x2C	; 44
    223c:	91 e0       	ldi	r25, 0x01	; 1
    223e:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
				"\n\rSRQ emitter is not in list of known devices. SRQ Ignored.\n\r");
		uart_puts_P("\n\rSRQs are disabled now.\n\r");
    2242:	81 e1       	ldi	r24, 0x11	; 17
    2244:	91 e0       	ldi	r25, 0x01	; 1
    2246:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
		srq_enabled = 0;
    224a:	10 92 9f 03 	sts	0x039F, r1
		return command_ready;
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	88 87       	std	Y+8, r24	; 0x08
    2252:	3a c0       	rjmp	.+116    	; 0x22c8 <handle_srq+0xc0>
	}
	gpib_set_partner_address(primary, secondary);
    2254:	8a 81       	ldd	r24, Y+2	; 0x02
    2256:	9b 81       	ldd	r25, Y+3	; 0x03
    2258:	69 2f       	mov	r22, r25
    225a:	0e 94 25 0c 	call	0x184a	; 0x184a <gpib_set_partner_address>

	if (gpib_get_flavour() == FLAVOUR_TEK) {
    225e:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <gpib_get_flavour>
    2262:	81 30       	cpi	r24, 0x01	; 1
    2264:	79 f5       	brne	.+94     	; 0x22c4 <handle_srq+0xbc>
		// Tek: check status for reason
		buf[0] = 'E';
    2266:	ec 81       	ldd	r30, Y+4	; 0x04
    2268:	fd 81       	ldd	r31, Y+5	; 0x05
    226a:	85 e4       	ldi	r24, 0x45	; 69
    226c:	80 83       	st	Z, r24
		buf[1] = 'V';
    226e:	8c 81       	ldd	r24, Y+4	; 0x04
    2270:	9d 81       	ldd	r25, Y+5	; 0x05
    2272:	fc 01       	movw	r30, r24
    2274:	31 96       	adiw	r30, 0x01	; 1
    2276:	86 e5       	ldi	r24, 0x56	; 86
    2278:	80 83       	st	Z, r24
		buf[2] = 'E';
    227a:	8c 81       	ldd	r24, Y+4	; 0x04
    227c:	9d 81       	ldd	r25, Y+5	; 0x05
    227e:	fc 01       	movw	r30, r24
    2280:	32 96       	adiw	r30, 0x02	; 2
    2282:	85 e4       	ldi	r24, 0x45	; 69
    2284:	80 83       	st	Z, r24
		buf[3] = 'N';
    2286:	8c 81       	ldd	r24, Y+4	; 0x04
    2288:	9d 81       	ldd	r25, Y+5	; 0x05
    228a:	fc 01       	movw	r30, r24
    228c:	33 96       	adiw	r30, 0x03	; 3
    228e:	8e e4       	ldi	r24, 0x4E	; 78
    2290:	80 83       	st	Z, r24
		buf[4] = 'T';
    2292:	8c 81       	ldd	r24, Y+4	; 0x04
    2294:	9d 81       	ldd	r25, Y+5	; 0x05
    2296:	fc 01       	movw	r30, r24
    2298:	34 96       	adiw	r30, 0x04	; 4
    229a:	84 e5       	ldi	r24, 0x54	; 84
    229c:	80 83       	st	Z, r24
		buf[5] = '?';
    229e:	8c 81       	ldd	r24, Y+4	; 0x04
    22a0:	9d 81       	ldd	r25, Y+5	; 0x05
    22a2:	fc 01       	movw	r30, r24
    22a4:	35 96       	adiw	r30, 0x05	; 5
    22a6:	8f e3       	ldi	r24, 0x3F	; 63
    22a8:	80 83       	st	Z, r24
		buf[6] = '\0';
    22aa:	8c 81       	ldd	r24, Y+4	; 0x04
    22ac:	9d 81       	ldd	r25, Y+5	; 0x05
    22ae:	fc 01       	movw	r30, r24
    22b0:	36 96       	adiw	r30, 0x06	; 6
    22b2:	10 82       	st	Z, r1
		*buf_ptr = 6;
    22b4:	ee 81       	ldd	r30, Y+6	; 0x06
    22b6:	ff 81       	ldd	r31, Y+7	; 0x07
    22b8:	86 e0       	ldi	r24, 0x06	; 6
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	91 83       	std	Z+1, r25	; 0x01
    22be:	80 83       	st	Z, r24
		command_ready = 1;
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	89 83       	std	Y+1, r24	; 0x01
	}
	return command_ready;
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	88 87       	std	Y+8, r24	; 0x08
    22c8:	88 85       	ldd	r24, Y+8	; 0x08
}
    22ca:	28 96       	adiw	r28, 0x08	; 8
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	08 95       	ret

000022dc <printHelp>:

void printHelp() {
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
#ifdef WRITE
	sprintf(buf,
    22e4:	00 d0       	rcall	.+0      	; 0x22e6 <printHelp+0xa>
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <printHelp+0xc>
    22e8:	00 d0       	rcall	.+0      	; 0x22ea <printHelp+0xe>
    22ea:	ed b7       	in	r30, 0x3d	; 61
    22ec:	fe b7       	in	r31, 0x3e	; 62
    22ee:	31 96       	adiw	r30, 0x01	; 1
    22f0:	82 ec       	ldi	r24, 0xC2	; 194
    22f2:	94 e0       	ldi	r25, 0x04	; 4
    22f4:	91 83       	std	Z+1, r25	; 0x01
    22f6:	80 83       	st	Z, r24
    22f8:	84 e1       	ldi	r24, 0x14	; 20
    22fa:	93 e0       	ldi	r25, 0x03	; 3
    22fc:	93 83       	std	Z+3, r25	; 0x03
    22fe:	82 83       	std	Z+2, r24	; 0x02
    2300:	8c e4       	ldi	r24, 0x4C	; 76
    2302:	93 e0       	ldi	r25, 0x03	; 3
    2304:	95 83       	std	Z+5, r25	; 0x05
    2306:	84 83       	std	Z+4, r24	; 0x04
    2308:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    230c:	8d b7       	in	r24, 0x3d	; 61
    230e:	9e b7       	in	r25, 0x3e	; 62
    2310:	06 96       	adiw	r24, 0x06	; 6
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	9e bf       	out	0x3e, r25	; 62
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	8d bf       	out	0x3d, r24	; 61
			"\n\rGPIB Controller (Rev.%s) (c) spurtikus.de 2008-2015\n\r",
			REVISION);
	uart_puts(buf);
    231c:	82 ec       	ldi	r24, 0xC2	; 194
    231e:	94 e0       	ldi	r25, 0x04	; 4
    2320:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>
#else
	uart_puts("\n\rGPIB Listener Only (Rev.%s) (c) spurtikus.de 2008-2015\n\r", REVISION);
	uart_puts(buf);
#endif
	uart_puts_P("Internal commands:\n\r");
    2324:	84 e8       	ldi	r24, 0x84	; 132
    2326:	92 e0       	ldi	r25, 0x02	; 2
    2328:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
	uart_puts(
    232c:	80 e5       	ldi	r24, 0x50	; 80
    232e:	93 e0       	ldi	r25, 0x03	; 3
    2330:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>
			".a <primary> [<secondary>] - set prim./second. address of remote device\n\r");
	uart_puts_P(".s <secondary> - set secondary address of remote device\n\r");
    2334:	8a e4       	ldi	r24, 0x4A	; 74
    2336:	92 e0       	ldi	r25, 0x02	; 2
    2338:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
	uart_puts_P(
    233c:	8a e0       	ldi	r24, 0x0A	; 10
    233e:	92 e0       	ldi	r25, 0x02	; 2
    2340:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
			".+ <n> - add partner device address to list of known devices.\n\r");
	uart_puts_P(
    2344:	85 ec       	ldi	r24, 0xC5	; 197
    2346:	91 e0       	ldi	r25, 0x01	; 1
    2348:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
			".- <n> - remove partner device address from list of known devices.\n\r");
	uart_puts_P(".x - toggle Xon/Xoff flow control.\n\r");
    234c:	80 ea       	ldi	r24, 0xA0	; 160
    234e:	91 e0       	ldi	r25, 0x01	; 1
    2350:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
	uart_puts_P(".h - print help.\n\r");
    2354:	8d e8       	ldi	r24, 0x8D	; 141
    2356:	91 e0       	ldi	r25, 0x01	; 1
    2358:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
	uart_puts_P(".i - dump info about GPIB lines.\n\r");
    235c:	8a e6       	ldi	r24, 0x6A	; 106
    235e:	91 e0       	ldi	r25, 0x01	; 1
    2360:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
}
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <main>:
 * \brief Implementation of GPIB controller. Reads a command from RS232, sends it via bus.
 * If The command contains a '?', an answer from the device is expected and read in. The
 * answer then is printed out. If an SRQ occured, a serial poll is initiated.
 * 
 */
int main(void) {
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	00 d0       	rcall	.+0      	; 0x2370 <main+0x6>
    2370:	00 d0       	rcall	.+0      	; 0x2372 <main+0x8>
    2372:	0f 92       	push	r0
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
	int old_time = 0;
    2378:	1d 82       	std	Y+5, r1	; 0x05
    237a:	1c 82       	std	Y+4, r1	; 0x04
	uchar is_query = 0;
    237c:	1b 82       	std	Y+3, r1	; 0x03
	uchar command_ready = 0;
    237e:	1a 82       	std	Y+2, r1	; 0x02
	uchar do_prompt = 1;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	89 83       	std	Y+1, r24	; 0x01

	/*
	 *  Initialize UART library, pass baudrate and avr cpu clock 
	 *  with the macro UART_BAUD_SELECT()
	 */DI();
    2384:	8c e0       	ldi	r24, 0x0C	; 12
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	0e 94 63 13 	call	0x26c6	; 0x26c6 <uart_init>

	/*
	 * now enable interrupt, since UART and TIMER library is interrupt controlled
	 */sei();
    238c:	78 94       	sei

	/** print some usage infos */
	printHelp();
    238e:	0e 94 6e 11 	call	0x22dc	; 0x22dc <printHelp>
	/*
	 * WRITE: Controller talks and listens
	 */

	// init timer for timeout detection
	timer16_init();
    2392:	0e 94 64 12 	call	0x24c8	; 0x24c8 <timer16_init>

	// init gpib lines
	gpib_init();
    2396:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <gpib_init>
	// init controller part - assign bus 
	gpib_controller_assign(0x00);
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	0e 94 0f 06 	call	0xc1e	; 0xc1e <gpib_controller_assign>

	if (xonXoffMode) {
    23a0:	80 91 9e 03 	lds	r24, 0x039E
    23a4:	88 23       	and	r24, r24
    23a6:	19 f0       	breq	.+6      	; 0x23ae <main+0x44>
		uart_set_flow_control(FLOWCONTROL_XONXOFF);
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	0e 94 84 12 	call	0x2508	; 0x2508 <uart_set_flow_control>
	 * 3. if command was a query, read the answer from device (become listener and set device to talker)
	 * 	4. check if SRQ occured and handle that
	 */
	for (;;) {

		if (do_prompt) {
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	88 23       	and	r24, r24
    23b2:	29 f0       	breq	.+10     	; 0x23be <main+0x54>
			uart_puts("> ");
    23b4:	8a e9       	ldi	r24, 0x9A	; 154
    23b6:	93 e0       	ldi	r25, 0x03	; 3
    23b8:	0e 94 14 14 	call	0x2828	; 0x2828 <uart_puts>
			do_prompt = 0;
    23bc:	19 82       	std	Y+1, r1	; 0x01
		}
		// input processing via rs232
		// command_ready may already been set by SRQ that occurred before
		if (!command_ready)
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	88 23       	and	r24, r24
    23c2:	19 f4       	brne	.+6      	; 0x23ca <main+0x60>
			command_ready = input_process();
    23c4:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <input_process>
    23c8:	8a 83       	std	Y+2, r24	; 0x02

		if (command_ready) {
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	88 23       	and	r24, r24
    23ce:	21 f0       	breq	.+8      	; 0x23d8 <main+0x6e>
			uart_puts_P("\n\r");
    23d0:	8f ec       	ldi	r24, 0xCF	; 207
    23d2:	92 e0       	ldi	r25, 0x02	; 2
    23d4:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
		}

		// check for internal commands
		if (command_ready && buf[0] == '.') {
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	88 23       	and	r24, r24
    23dc:	81 f0       	breq	.+32     	; 0x23fe <main+0x94>
    23de:	80 91 c2 04 	lds	r24, 0x04C2
    23e2:	8e 32       	cpi	r24, 0x2E	; 46
    23e4:	61 f4       	brne	.+24     	; 0x23fe <main+0x94>
			// all internal cmds start with a '.'
			//uart_puts("\n\rInternal command: ");
			//uart_puts((char*) buf);
			//uart_puts("\n\r");
			handle_internal_commands(buf);
    23e6:	82 ec       	ldi	r24, 0xC2	; 194
    23e8:	94 e0       	ldi	r25, 0x04	; 4
    23ea:	0e 94 67 0e 	call	0x1cce	; 0x1cce <handle_internal_commands>
			// reset local vars for command string reading
			buf_ptr = 0;
    23ee:	10 92 b4 03 	sts	0x03B4, r1
    23f2:	10 92 b3 03 	sts	0x03B3, r1
			command_ready = 0;
    23f6:	1a 82       	std	Y+2, r1	; 0x02
			do_prompt = 1;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	89 83       	std	Y+1, r24	; 0x01
			is_query = 0;
    23fc:	1b 82       	std	Y+3, r1	; 0x03
		}

		// GPIB command. Check if a partner was defined.
		if (command_ready && (gpib_get_partner_pad() == ADDRESS_NOT_SET)) {
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	88 23       	and	r24, r24
    2402:	79 f0       	breq	.+30     	; 0x2422 <main+0xb8>
    2404:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpib_get_partner_pad>
    2408:	8f 3f       	cpi	r24, 0xFF	; 255
    240a:	59 f4       	brne	.+22     	; 0x2422 <main+0xb8>
			uart_puts_P("Device address is not set. Can not send command.\n\r");
    240c:	8c e9       	ldi	r24, 0x9C	; 156
    240e:	92 e0       	ldi	r25, 0x02	; 2
    2410:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
			// reset local vars for command string reading
			command_ready = 0;
    2414:	1a 82       	std	Y+2, r1	; 0x02
			buf_ptr = 0;
    2416:	10 92 b4 03 	sts	0x03B4, r1
    241a:	10 92 b3 03 	sts	0x03B3, r1
			do_prompt = 1;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	89 83       	std	Y+1, r24	; 0x01
		}

		// GPIB command and valid partner. Send the command.
		if (command_ready) {
    2422:	8a 81       	ldd	r24, Y+2	; 0x02
    2424:	88 23       	and	r24, r24
    2426:	69 f0       	breq	.+26     	; 0x2442 <main+0xd8>
			//uart_puts("\n\rGPIB command: ");
			//uart_puts((char*) buf);
			//uart_puts("\n\r");
			is_query = send_command(buf, SEND_FULL_CMD);
    2428:	82 ec       	ldi	r24, 0xC2	; 194
    242a:	94 e0       	ldi	r25, 0x04	; 4
    242c:	62 e0       	ldi	r22, 0x02	; 2
    242e:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <send_command>
    2432:	8b 83       	std	Y+3, r24	; 0x03
			// reset local vars for command string reading
			command_ready = 0;
    2434:	1a 82       	std	Y+2, r1	; 0x02
			buf_ptr = 0;
    2436:	10 92 b4 03 	sts	0x03B4, r1
    243a:	10 92 b3 03 	sts	0x03B3, r1
			do_prompt = 1;
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	89 83       	std	Y+1, r24	; 0x01
		}

		// if we sent a query, read the answer
		if (is_query) {
    2442:	8b 81       	ldd	r24, Y+3	; 0x03
    2444:	88 23       	and	r24, r24
    2446:	49 f0       	breq	.+18     	; 0x245a <main+0xf0>
			receiveAnswer();
    2448:	0e 94 4f 10 	call	0x209e	; 0x209e <receiveAnswer>
			// reset for next command
			is_query = 0;
    244c:	1b 82       	std	Y+3, r1	; 0x03
			// some devices do not send cr,lf at command end, so create it always itself
			uart_puts_P("\n\r");
    244e:	89 e9       	ldi	r24, 0x99	; 153
    2450:	92 e0       	ldi	r25, 0x02	; 2
    2452:	0e 94 31 14 	call	0x2862	; 0x2862 <uart_puts_p>
			do_prompt = 1;
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	89 83       	std	Y+1, r24	; 0x01
		}

		// SRQ detection - do this every time when time value s has changed
		// s is incremented every second. So we check once a second.
		if (srq_enabled && srq_occured(&old_time)) {
    245a:	80 91 9f 03 	lds	r24, 0x039F
    245e:	88 23       	and	r24, r24
    2460:	09 f4       	brne	.+2      	; 0x2464 <main+0xfa>
    2462:	a5 cf       	rjmp	.-182    	; 0x23ae <main+0x44>
    2464:	ce 01       	movw	r24, r28
    2466:	04 96       	adiw	r24, 0x04	; 4
    2468:	0e 94 c7 10 	call	0x218e	; 0x218e <srq_occured>
    246c:	88 23       	and	r24, r24
    246e:	09 f4       	brne	.+2      	; 0x2472 <main+0x108>
    2470:	9e cf       	rjmp	.-196    	; 0x23ae <main+0x44>
			command_ready = handle_srq(buf, &buf_ptr);
    2472:	82 ec       	ldi	r24, 0xC2	; 194
    2474:	94 e0       	ldi	r25, 0x04	; 4
    2476:	23 eb       	ldi	r18, 0xB3	; 179
    2478:	33 e0       	ldi	r19, 0x03	; 3
    247a:	b9 01       	movw	r22, r18
    247c:	0e 94 04 11 	call	0x2208	; 0x2208 <handle_srq>
    2480:	8a 83       	std	Y+2, r24	; 0x02
    2482:	95 cf       	rjmp	.-214    	; 0x23ae <main+0x44>

00002484 <__vector_7>:

/**
 * Interrupt Service Routine - do not call directly
 *  This routine is called when the Timer Value TCNT1 reaches the Output Compare Register Value OCR1A
 */ 
ISR(TIMER1_COMPA_vect) {
    2484:	1f 92       	push	r1
    2486:	0f 92       	push	r0
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	0f 92       	push	r0
    248c:	11 24       	eor	r1, r1
    248e:	8f 93       	push	r24
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
#if XTAL_CPU % DEBOUNCE
	OCR1A = XTAL_CPU / DEBOUNCE - 1;
#endif
	if (--timer==0) {
    2498:	80 91 12 05 	lds	r24, 0x0512
    249c:	81 50       	subi	r24, 0x01	; 1
    249e:	80 93 12 05 	sts	0x0512, r24
    24a2:	80 91 12 05 	lds	r24, 0x0512
    24a6:	88 23       	and	r24, r24
    24a8:	39 f4       	brne	.+14     	; 0x24b8 <__vector_7+0x34>
		timer=(uint8_t) DEBOUNCE;
    24aa:	10 92 12 05 	sts	0x0512, r1
		s++;
    24ae:	80 91 13 05 	lds	r24, 0x0513
    24b2:	8f 5f       	subi	r24, 0xFF	; 255
    24b4:	80 93 13 05 	sts	0x0513, r24
#if XTAL_CPU % DEBOUNCE
		OCR1A = XTAL_CPU / DEBOUNCE + XTAL_CPU % DEBOUNCE - 1;
#endif
	}
}
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	8f 91       	pop	r24
    24be:	0f 90       	pop	r0
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	0f 90       	pop	r0
    24c4:	1f 90       	pop	r1
    24c6:	18 95       	reti

000024c8 <timer16_init>:
/**
 * Timer initialisation.
 *  \brief initializes all registers ands sets second value 's' to zero. Timer is immediately
 * started.
 */ 
void timer16_init( void ) {
    24c8:	df 93       	push	r29
    24ca:	cf 93       	push	r28
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62

	// OCR1A=XTAL/DEBOUNCE-1 -> Bei Erreichen dieses Wertes (31249) wird die ISR besucht
	// die ISR wird also alle 1/256s aufgerufen. Wenn man dort also bis 256 hochzählt, ist genau
	// 1 Sekunde um! 256 ist der Wert der Variable timer und wird über das define DEBOUNCE festgelegt

	TCCR1B = (1<<CS10) ^ (1<<WGM12);	// Prescaler of 1 | CTC mode
    24d0:	ee e4       	ldi	r30, 0x4E	; 78
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	89 e0       	ldi	r24, 0x09	; 9
    24d6:	80 83       	st	Z, r24
	OCR1A  = F_CPU/DEBOUNCE-1;		// Output compare register value 
    24d8:	ea e4       	ldi	r30, 0x4A	; 74
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	81 e1       	ldi	r24, 0x11	; 17
    24de:	9a e7       	ldi	r25, 0x7A	; 122
    24e0:	91 83       	std	Z+1, r25	; 0x01
    24e2:	80 83       	st	Z, r24
	TCNT1 = 0; // Start value for timer register
    24e4:	ec e4       	ldi	r30, 0x4C	; 76
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	11 82       	std	Z+1, r1	; 0x01
    24ea:	10 82       	st	Z, r1
	s=0; // Initialize second value (s) to zero
    24ec:	10 92 13 05 	sts	0x0513, r1
	timer = (uint8_t)DEBOUNCE; 
    24f0:	10 92 12 05 	sts	0x0512, r1
	TIMSK |= (1<<OCIE1A);		// activate timer interrupts which starts timer run
    24f4:	a9 e5       	ldi	r26, 0x59	; 89
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	e9 e5       	ldi	r30, 0x59	; 89
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	80 61       	ori	r24, 0x10	; 16
    2500:	8c 93       	st	X, r24
}
    2502:	cf 91       	pop	r28
    2504:	df 91       	pop	r29
    2506:	08 95       	ret

00002508 <uart_set_flow_control>:
/** number of chars in rx buffer */
static volatile unsigned char chars_in_rx_buffer = 0;

void SendOutOfBand(unsigned char c);

void uart_set_flow_control(unsigned char _flowControl) {
    2508:	df 93       	push	r29
    250a:	cf 93       	push	r28
    250c:	0f 92       	push	r0
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
    2512:	89 83       	std	Y+1, r24	; 0x01
	flowControl = _flowControl;
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	80 93 b5 03 	sts	0x03B5, r24
}
    251a:	0f 90       	pop	r0
    251c:	cf 91       	pop	r28
    251e:	df 91       	pop	r29
    2520:	08 95       	ret

00002522 <uart_get_flow_control>:

unsigned char uart_get_flow_control() {
    2522:	df 93       	push	r29
    2524:	cf 93       	push	r28
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
	return flowControl;
    252a:	80 91 b5 03 	lds	r24, 0x03B5
}
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
 Function: UART Receive Complete interrupt
 Purpose:  called when the UART has received a character
 **************************************************************************/
{
    2534:	1f 92       	push	r1
    2536:	0f 92       	push	r0
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	0f 92       	push	r0
    253c:	11 24       	eor	r1, r1
    253e:	2f 93       	push	r18
    2540:	3f 93       	push	r19
    2542:	4f 93       	push	r20
    2544:	5f 93       	push	r21
    2546:	6f 93       	push	r22
    2548:	7f 93       	push	r23
    254a:	8f 93       	push	r24
    254c:	9f 93       	push	r25
    254e:	af 93       	push	r26
    2550:	bf 93       	push	r27
    2552:	ef 93       	push	r30
    2554:	ff 93       	push	r31
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	00 d0       	rcall	.+0      	; 0x255c <__vector_13+0x28>
    255c:	00 d0       	rcall	.+0      	; 0x255e <__vector_13+0x2a>
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	unsigned char usr;
	unsigned char lastRxError;

	/* read UART status register and UART data register */
	usr = UART0_STATUS;
    2562:	eb e2       	ldi	r30, 0x2B	; 43
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	8a 83       	std	Y+2, r24	; 0x02
	data = UART0_DATA;
    256a:	ec e2       	ldi	r30, 0x2C	; 44
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	8b 83       	std	Y+3, r24	; 0x03

	/* */
#if defined( AT90_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	88 71       	andi	r24, 0x18	; 24
    2576:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif

	/* calculate buffer index */
	tmphead = (UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    2578:	80 91 5b 04 	lds	r24, 0x045B
    257c:	8f 5f       	subi	r24, 0xFF	; 255
    257e:	8f 77       	andi	r24, 0x7F	; 127
    2580:	8c 83       	std	Y+4, r24	; 0x04

	if (tmphead == UART_RxTail) {
    2582:	90 91 5c 04 	lds	r25, 0x045C
    2586:	8c 81       	ldd	r24, Y+4	; 0x04
    2588:	89 17       	cp	r24, r25
    258a:	19 f4       	brne	.+6      	; 0x2592 <__vector_13+0x5e>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    258c:	82 e0       	ldi	r24, 0x02	; 2
    258e:	89 83       	std	Y+1, r24	; 0x01
    2590:	10 c0       	rjmp	.+32     	; 0x25b2 <__vector_13+0x7e>
	} else {
		/* store new index */
		UART_RxHead = tmphead;
    2592:	8c 81       	ldd	r24, Y+4	; 0x04
    2594:	80 93 5b 04 	sts	0x045B, r24
		/* store received data in buffer */
		UART_RxBuf[tmphead] = data;
    2598:	8c 81       	ldd	r24, Y+4	; 0x04
    259a:	88 2f       	mov	r24, r24
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	fc 01       	movw	r30, r24
    25a0:	e7 52       	subi	r30, 0x27	; 39
    25a2:	fc 4f       	sbci	r31, 0xFC	; 252
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	80 83       	st	Z, r24
		chars_in_rx_buffer++;
    25a8:	80 91 b8 03 	lds	r24, 0x03B8
    25ac:	8f 5f       	subi	r24, 0xFF	; 255
    25ae:	80 93 b8 03 	sts	0x03B8, r24
	}

	if (flowControl == FLOWCONTROL_XONXOFF
    25b2:	80 91 b5 03 	lds	r24, 0x03B5
    25b6:	81 30       	cpi	r24, 0x01	; 1
    25b8:	99 f4       	brne	.+38     	; 0x25e0 <__vector_13+0xac>
    25ba:	80 91 b8 03 	lds	r24, 0x03B8
    25be:	81 36       	cpi	r24, 0x61	; 97
    25c0:	78 f0       	brcs	.+30     	; 0x25e0 <__vector_13+0xac>
			&& chars_in_rx_buffer > UART_RX_BUFFER_MAX_MARK) {
		/* immediately send XOFF */
		oob_event = 1;
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	80 93 b6 03 	sts	0x03B6, r24
		if (!after_xoff_sent) {
    25c8:	80 91 b7 03 	lds	r24, 0x03B7
    25cc:	88 23       	and	r24, r24
    25ce:	31 f4       	brne	.+12     	; 0x25dc <__vector_13+0xa8>
			SendOutOfBand(XOFF);
    25d0:	83 e1       	ldi	r24, 0x13	; 19
    25d2:	0e 94 0a 13 	call	0x2614	; 0x2614 <SendOutOfBand>
			after_xoff_sent = 1;
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	80 93 b7 03 	sts	0x03B7, r24
		}
		oob_event = 0;
    25dc:	10 92 b6 03 	sts	0x03B6, r1
	}

	UART_LastRxError = lastRxError;
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	80 93 5d 04 	sts	0x045D, r24
}
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	ff 91       	pop	r31
    25f4:	ef 91       	pop	r30
    25f6:	bf 91       	pop	r27
    25f8:	af 91       	pop	r26
    25fa:	9f 91       	pop	r25
    25fc:	8f 91       	pop	r24
    25fe:	7f 91       	pop	r23
    2600:	6f 91       	pop	r22
    2602:	5f 91       	pop	r21
    2604:	4f 91       	pop	r20
    2606:	3f 91       	pop	r19
    2608:	2f 91       	pop	r18
    260a:	0f 90       	pop	r0
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	0f 90       	pop	r0
    2610:	1f 90       	pop	r1
    2612:	18 95       	reti

00002614 <SendOutOfBand>:

void SendOutOfBand(unsigned char c) {
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	0f 92       	push	r0
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
    261e:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << UDRE)))
    2620:	eb e2       	ldi	r30, 0x2B	; 43
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	88 2f       	mov	r24, r24
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	80 72       	andi	r24, 0x20	; 32
    262c:	90 70       	andi	r25, 0x00	; 0
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	b9 f3       	breq	.-18     	; 0x2620 <SendOutOfBand+0xc>
		;
	UDR = c;
    2632:	ec e2       	ldi	r30, 0x2C	; 44
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	80 83       	st	Z, r24
}
    263a:	0f 90       	pop	r0
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
 Function: UART Data Register Empty interrupt
 Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
    2642:	1f 92       	push	r1
    2644:	0f 92       	push	r0
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	0f 92       	push	r0
    264a:	11 24       	eor	r1, r1
    264c:	8f 93       	push	r24
    264e:	9f 93       	push	r25
    2650:	af 93       	push	r26
    2652:	bf 93       	push	r27
    2654:	ef 93       	push	r30
    2656:	ff 93       	push	r31
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	0f 92       	push	r0
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;

	if (oob_event) {
    2662:	80 91 b6 03 	lds	r24, 0x03B6
    2666:	88 23       	and	r24, r24
    2668:	01 f5       	brne	.+64     	; 0x26aa <__vector_14+0x68>
		/* suppress transmitting during oob handling */
		return;
	}
	if (UART_TxHead != UART_TxTail) {
    266a:	90 91 59 04 	lds	r25, 0x0459
    266e:	80 91 5a 04 	lds	r24, 0x045A
    2672:	98 17       	cp	r25, r24
    2674:	99 f0       	breq	.+38     	; 0x269c <__vector_14+0x5a>
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    2676:	80 91 5a 04 	lds	r24, 0x045A
    267a:	8f 5f       	subi	r24, 0xFF	; 255
    267c:	8f 71       	andi	r24, 0x1F	; 31
    267e:	89 83       	std	Y+1, r24	; 0x01
		UART_TxTail = tmptail;
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	80 93 5a 04 	sts	0x045A, r24
		/* get one byte from buffer and write it to UART */
		UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
    2686:	ac e2       	ldi	r26, 0x2C	; 44
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	88 2f       	mov	r24, r24
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	fc 01       	movw	r30, r24
    2692:	e7 54       	subi	r30, 0x47	; 71
    2694:	fc 4f       	sbci	r31, 0xFC	; 252
    2696:	80 81       	ld	r24, Z
    2698:	8c 93       	st	X, r24
    269a:	07 c0       	rjmp	.+14     	; 0x26aa <__vector_14+0x68>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
    269c:	aa e2       	ldi	r26, 0x2A	; 42
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	ea e2       	ldi	r30, 0x2A	; 42
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	8f 7d       	andi	r24, 0xDF	; 223
    26a8:	8c 93       	st	X, r24
	}
}
    26aa:	0f 90       	pop	r0
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	ff 91       	pop	r31
    26b2:	ef 91       	pop	r30
    26b4:	bf 91       	pop	r27
    26b6:	af 91       	pop	r26
    26b8:	9f 91       	pop	r25
    26ba:	8f 91       	pop	r24
    26bc:	0f 90       	pop	r0
    26be:	0f be       	out	0x3f, r0	; 63
    26c0:	0f 90       	pop	r0
    26c2:	1f 90       	pop	r1
    26c4:	18 95       	reti

000026c6 <uart_init>:
 Function: uart_init()
 Purpose:  initialize UART and set baudrate
 Input:    baudrate using macro UART_BAUD_SELECT()
 Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate) {
    26c6:	df 93       	push	r29
    26c8:	cf 93       	push	r28
    26ca:	00 d0       	rcall	.+0      	; 0x26cc <uart_init+0x6>
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	9a 83       	std	Y+2, r25	; 0x02
    26d2:	89 83       	std	Y+1, r24	; 0x01
	UART_TxHead = 0;
    26d4:	10 92 59 04 	sts	0x0459, r1
	UART_TxTail = 0;
    26d8:	10 92 5a 04 	sts	0x045A, r1
	UART_RxHead = 0;
    26dc:	10 92 5b 04 	sts	0x045B, r1
	UART_RxTail = 0;
    26e0:	10 92 5c 04 	sts	0x045C, r1
	/* enable UART receiver and transmmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if (baudrate & 0x8000) {
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	9a 81       	ldd	r25, Y+2	; 0x02
    26e8:	99 23       	and	r25, r25
    26ea:	4c f4       	brge	.+18     	; 0x26fe <uart_init+0x38>
		UART0_STATUS = (1 << U2X);  //Enable 2x speed
    26ec:	eb e2       	ldi	r30, 0x2B	; 43
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	82 e0       	ldi	r24, 0x02	; 2
    26f2:	80 83       	st	Z, r24
		baudrate &= ~0x8000;
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	9a 81       	ldd	r25, Y+2	; 0x02
    26f8:	9f 77       	andi	r25, 0x7F	; 127
    26fa:	9a 83       	std	Y+2, r25	; 0x02
    26fc:	89 83       	std	Y+1, r24	; 0x01
	}
	UBRRH = (unsigned char) (baudrate >> 8);
    26fe:	e0 e4       	ldi	r30, 0x40	; 64
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	9a 81       	ldd	r25, Y+2	; 0x02
    2706:	89 2f       	mov	r24, r25
    2708:	99 27       	eor	r25, r25
    270a:	80 83       	st	Z, r24
	UBRRL = (unsigned char) baudrate;
    270c:	e9 e2       	ldi	r30, 0x29	; 41
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	80 83       	st	Z, r24

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | (1 << RXEN) | (1 << TXEN);
    2714:	ea e2       	ldi	r30, 0x2A	; 42
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	88 e9       	ldi	r24, 0x98	; 152
    271a:	80 83       	st	Z, r24

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
    271c:	e0 e4       	ldi	r30, 0x40	; 64
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	86 e8       	ldi	r24, 0x86	; 134
    2722:	80 83       	st	Z, r24
	/* Enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <uart_getc>:
 Function: uart_getc()
 Purpose:  return byte from ringbuffer
 Returns:  lower byte:  received byte from ringbuffer
 higher byte: last receive error
 **************************************************************************/
unsigned int uart_getc(void) {
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	00 d0       	rcall	.+0      	; 0x2734 <uart_getc+0x6>
    2734:	00 d0       	rcall	.+0      	; 0x2736 <uart_getc+0x8>
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;
	unsigned char data;

	if (UART_RxHead == UART_RxTail) {
    273a:	90 91 5b 04 	lds	r25, 0x045B
    273e:	80 91 5c 04 	lds	r24, 0x045C
    2742:	98 17       	cp	r25, r24
    2744:	29 f4       	brne	.+10     	; 0x2750 <uart_getc+0x22>
		return UART_NO_DATA; /* no data available */
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	91 e0       	ldi	r25, 0x01	; 1
    274a:	9c 83       	std	Y+4, r25	; 0x04
    274c:	8b 83       	std	Y+3, r24	; 0x03
    274e:	3c c0       	rjmp	.+120    	; 0x27c8 <uart_getc+0x9a>
	}

	/* calculate /store buffer index */
	tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    2750:	80 91 5c 04 	lds	r24, 0x045C
    2754:	8f 5f       	subi	r24, 0xFF	; 255
    2756:	8f 77       	andi	r24, 0x7F	; 127
    2758:	8a 83       	std	Y+2, r24	; 0x02
	UART_RxTail = tmptail;
    275a:	8a 81       	ldd	r24, Y+2	; 0x02
    275c:	80 93 5c 04 	sts	0x045C, r24

	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];
    2760:	8a 81       	ldd	r24, Y+2	; 0x02
    2762:	88 2f       	mov	r24, r24
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	fc 01       	movw	r30, r24
    2768:	e7 52       	subi	r30, 0x27	; 39
    276a:	fc 4f       	sbci	r31, 0xFC	; 252
    276c:	80 81       	ld	r24, Z
    276e:	89 83       	std	Y+1, r24	; 0x01
	if (chars_in_rx_buffer > 0) {
    2770:	80 91 b8 03 	lds	r24, 0x03B8
    2774:	88 23       	and	r24, r24
    2776:	29 f0       	breq	.+10     	; 0x2782 <uart_getc+0x54>
		chars_in_rx_buffer--;
    2778:	80 91 b8 03 	lds	r24, 0x03B8
    277c:	81 50       	subi	r24, 0x01	; 1
    277e:	80 93 b8 03 	sts	0x03B8, r24
	}
	if ((flowControl == FLOWCONTROL_XONXOFF) && after_xoff_sent) {
    2782:	80 91 b5 03 	lds	r24, 0x03B5
    2786:	81 30       	cpi	r24, 0x01	; 1
    2788:	91 f4       	brne	.+36     	; 0x27ae <uart_getc+0x80>
    278a:	80 91 b7 03 	lds	r24, 0x03B7
    278e:	88 23       	and	r24, r24
    2790:	71 f0       	breq	.+28     	; 0x27ae <uart_getc+0x80>
		if (chars_in_rx_buffer <= UART_RX_BUFFER_MIN_MARK) {
    2792:	80 91 b8 03 	lds	r24, 0x03B8
    2796:	81 31       	cpi	r24, 0x11	; 17
    2798:	50 f4       	brcc	.+20     	; 0x27ae <uart_getc+0x80>
			/* immediately send XON */
			oob_event = 1;
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	80 93 b6 03 	sts	0x03B6, r24
			SendOutOfBand(XON);
    27a0:	81 e1       	ldi	r24, 0x11	; 17
    27a2:	0e 94 0a 13 	call	0x2614	; 0x2614 <SendOutOfBand>
			after_xoff_sent = 0;
    27a6:	10 92 b7 03 	sts	0x03B7, r1
			oob_event = 0;
    27aa:	10 92 b6 03 	sts	0x03B6, r1
		}
	}

	return (UART_LastRxError << 8) + data;
    27ae:	80 91 5d 04 	lds	r24, 0x045D
    27b2:	88 2f       	mov	r24, r24
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	38 2f       	mov	r19, r24
    27b8:	22 27       	eor	r18, r18
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	88 2f       	mov	r24, r24
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	82 0f       	add	r24, r18
    27c2:	93 1f       	adc	r25, r19
    27c4:	9c 83       	std	Y+4, r25	; 0x04
    27c6:	8b 83       	std	Y+3, r24	; 0x03
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	08 95       	ret

000027da <uart_putc>:
 Function: uart_putc()
 Purpose:  write byte to ringbuffer for transmitting via UART
 Input:    byte to be transmitted
 Returns:  none
 **************************************************************************/
void uart_putc(unsigned char data) {
    27da:	df 93       	push	r29
    27dc:	cf 93       	push	r28
    27de:	00 d0       	rcall	.+0      	; 0x27e0 <uart_putc+0x6>
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char tmphead;

	tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    27e6:	80 91 59 04 	lds	r24, 0x0459
    27ea:	8f 5f       	subi	r24, 0xFF	; 255
    27ec:	8f 71       	andi	r24, 0x1F	; 31
    27ee:	89 83       	std	Y+1, r24	; 0x01

	while (tmphead == UART_TxTail) {
    27f0:	90 91 5a 04 	lds	r25, 0x045A
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	89 17       	cp	r24, r25
    27f8:	d9 f3       	breq	.-10     	; 0x27f0 <uart_putc+0x16>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	88 2f       	mov	r24, r24
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	fc 01       	movw	r30, r24
    2802:	e7 54       	subi	r30, 0x47	; 71
    2804:	fc 4f       	sbci	r31, 0xFC	; 252
    2806:	8a 81       	ldd	r24, Y+2	; 0x02
    2808:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	80 93 59 04 	sts	0x0459, r24

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    2810:	aa e2       	ldi	r26, 0x2A	; 42
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	ea e2       	ldi	r30, 0x2A	; 42
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	80 62       	ori	r24, 0x20	; 32
    281c:	8c 93       	st	X, r24

}/* uart_putc */
    281e:	0f 90       	pop	r0
    2820:	0f 90       	pop	r0
    2822:	cf 91       	pop	r28
    2824:	df 91       	pop	r29
    2826:	08 95       	ret

00002828 <uart_puts>:
 Function: uart_puts()
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
    2828:	df 93       	push	r29
    282a:	cf 93       	push	r28
    282c:	00 d0       	rcall	.+0      	; 0x282e <uart_puts+0x6>
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
    2832:	9a 83       	std	Y+2, r25	; 0x02
    2834:	89 83       	std	Y+1, r24	; 0x01
    2836:	0b c0       	rjmp	.+22     	; 0x284e <uart_puts+0x26>
	while (*s)
		uart_putc(*s++);
    2838:	e9 81       	ldd	r30, Y+1	; 0x01
    283a:	fa 81       	ldd	r31, Y+2	; 0x02
    283c:	20 81       	ld	r18, Z
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	9a 81       	ldd	r25, Y+2	; 0x02
    2842:	01 96       	adiw	r24, 0x01	; 1
    2844:	9a 83       	std	Y+2, r25	; 0x02
    2846:	89 83       	std	Y+1, r24	; 0x01
    2848:	82 2f       	mov	r24, r18
    284a:	0e 94 ed 13 	call	0x27da	; 0x27da <uart_putc>
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
	while (*s)
    284e:	e9 81       	ldd	r30, Y+1	; 0x01
    2850:	fa 81       	ldd	r31, Y+2	; 0x02
    2852:	80 81       	ld	r24, Z
    2854:	88 23       	and	r24, r24
    2856:	81 f7       	brne	.-32     	; 0x2838 <uart_puts+0x10>
		uart_putc(*s++);

}/* uart_puts */
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <uart_puts_p>:
 Function: uart_puts_p()
 Purpose:  transmit string from program memory to UART
 Input:    program memory string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	00 d0       	rcall	.+0      	; 0x2868 <uart_puts_p+0x6>
    2868:	00 d0       	rcall	.+0      	; 0x286a <uart_puts_p+0x8>
    286a:	00 d0       	rcall	.+0      	; 0x286c <uart_puts_p+0xa>
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
    2870:	9d 83       	std	Y+5, r25	; 0x05
    2872:	8c 83       	std	Y+4, r24	; 0x04
    2874:	03 c0       	rjmp	.+6      	; 0x287c <uart_puts_p+0x1a>
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
		uart_putc(c);
    2876:	8e 81       	ldd	r24, Y+6	; 0x06
    2878:	0e 94 ed 13 	call	0x27da	; 0x27da <uart_putc>
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
    287c:	8c 81       	ldd	r24, Y+4	; 0x04
    287e:	9d 81       	ldd	r25, Y+5	; 0x05
    2880:	9b 83       	std	Y+3, r25	; 0x03
    2882:	8a 83       	std	Y+2, r24	; 0x02
    2884:	8c 81       	ldd	r24, Y+4	; 0x04
    2886:	9d 81       	ldd	r25, Y+5	; 0x05
    2888:	01 96       	adiw	r24, 0x01	; 1
    288a:	9d 83       	std	Y+5, r25	; 0x05
    288c:	8c 83       	std	Y+4, r24	; 0x04
    288e:	ea 81       	ldd	r30, Y+2	; 0x02
    2890:	fb 81       	ldd	r31, Y+3	; 0x03
    2892:	84 91       	lpm	r24, Z+
    2894:	89 83       	std	Y+1, r24	; 0x01
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	8e 83       	std	Y+6, r24	; 0x06
    289a:	8e 81       	ldd	r24, Y+6	; 0x06
    289c:	88 23       	and	r24, r24
    289e:	59 f7       	brne	.-42     	; 0x2876 <uart_puts_p+0x14>
		uart_putc(c);

}/* uart_puts_p */
    28a0:	26 96       	adiw	r28, 0x06	; 6
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	f8 94       	cli
    28a6:	de bf       	out	0x3e, r29	; 62
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	cd bf       	out	0x3d, r28	; 61
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	08 95       	ret

000028b2 <__prologue_saves__>:
    28b2:	2f 92       	push	r2
    28b4:	3f 92       	push	r3
    28b6:	4f 92       	push	r4
    28b8:	5f 92       	push	r5
    28ba:	6f 92       	push	r6
    28bc:	7f 92       	push	r7
    28be:	8f 92       	push	r8
    28c0:	9f 92       	push	r9
    28c2:	af 92       	push	r10
    28c4:	bf 92       	push	r11
    28c6:	cf 92       	push	r12
    28c8:	df 92       	push	r13
    28ca:	ef 92       	push	r14
    28cc:	ff 92       	push	r15
    28ce:	0f 93       	push	r16
    28d0:	1f 93       	push	r17
    28d2:	cf 93       	push	r28
    28d4:	df 93       	push	r29
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
    28da:	ca 1b       	sub	r28, r26
    28dc:	db 0b       	sbc	r29, r27
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	09 94       	ijmp

000028ea <__epilogue_restores__>:
    28ea:	2a 88       	ldd	r2, Y+18	; 0x12
    28ec:	39 88       	ldd	r3, Y+17	; 0x11
    28ee:	48 88       	ldd	r4, Y+16	; 0x10
    28f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    28f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    28f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    28f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    28f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    28fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    28fc:	b9 84       	ldd	r11, Y+9	; 0x09
    28fe:	c8 84       	ldd	r12, Y+8	; 0x08
    2900:	df 80       	ldd	r13, Y+7	; 0x07
    2902:	ee 80       	ldd	r14, Y+6	; 0x06
    2904:	fd 80       	ldd	r15, Y+5	; 0x05
    2906:	0c 81       	ldd	r16, Y+4	; 0x04
    2908:	1b 81       	ldd	r17, Y+3	; 0x03
    290a:	aa 81       	ldd	r26, Y+2	; 0x02
    290c:	b9 81       	ldd	r27, Y+1	; 0x01
    290e:	ce 0f       	add	r28, r30
    2910:	d1 1d       	adc	r29, r1
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	f8 94       	cli
    2916:	de bf       	out	0x3e, r29	; 62
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	cd bf       	out	0x3d, r28	; 61
    291c:	ed 01       	movw	r28, r26
    291e:	08 95       	ret

00002920 <_exit>:
    2920:	f8 94       	cli

00002922 <__stop_program>:
    2922:	ff cf       	rjmp	.-2      	; 0x2922 <__stop_program>


gpib_004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fc2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000041a  00800060  00002fc2  00003036  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000170  0080047a  000033dc  00003450  2**0
                  ALLOC
  3 .stab         00005dfc  00000000  00000000  00003450  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002b29  00000000  00000000  0000924c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a2 01 	jmp	0x344	; 0x344 <__ctors_end>
       4:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
       8:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
       c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      10:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      14:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      18:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      1c:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__vector_7>
      20:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      24:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      28:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      2c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      30:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      34:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__vector_13>
      38:	0c 94 70 16 	jmp	0x2ce0	; 0x2ce0 <__vector_14>
      3c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      40:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      44:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      48:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      4c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>
      50:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__bad_interrupt>

00000054 <__c.1876>:
      54:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
      64:	65 72 72 6f 72 3a 20 00                             error: .

0000006c <__c.1874>:
      6c:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
      7c:	6f 72 3a 20 00                                      or: .

00000081 <__c.1872>:
      81:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
      91:	3a 20 00                                            : .

00000094 <__c.1900>:
      94:	43 6f 6d 6d 61 6e 64 20 6f 76 65 72 66 6c 6f 77     Command overflow
      a4:	2e 00                                               ..

000000a6 <__c.1982>:
      a6:	75 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 0a     unknown command.
      b6:	0d 00                                               ..

000000b8 <__c.1979>:
      b8:	43 68 65 63 6b 20 65 72 72 6f 72 73 0a 0d 00        Check errors...

000000c7 <__c.1974>:
      c7:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      d7:	74 72 6f 6c 20 6f 66 66 0a 0d 00                    trol off...

000000e2 <__c.1972>:
      e2:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      f2:	74 72 6f 6c 20 6f 6e 0a 0d 00                       trol on...

000000fc <__c.1966>:
      fc:	53 52 51 73 20 64 69 73 61 62 6c 65 64 0a 0d 00     SRQs disabled...

0000010c <__c.1964>:
     10c:	53 52 51 73 20 65 6e 61 62 6c 65 64 0a 0d 00        SRQs enabled...

0000011b <__c.2038>:
     11b:	0a 0d 00                                            ...

0000011e <__c.2055>:
     11e:	0a 0d 53 52 51 20 64 65 74 65 63 74 65 64 2e 0a     ..SRQ detected..
     12e:	0d 00                                               ..

00000130 <__c.2085>:
     130:	0a 0d 53 52 51 73 20 61 72 65 20 64 69 73 61 62     ..SRQs are disab
     140:	6c 65 64 20 6e 6f 77 2e 0a 0d 00                    led now....

0000014b <__c.2083>:
     14b:	0a 0d 53 52 51 20 65 6d 69 74 74 65 72 20 69 73     ..SRQ emitter is
     15b:	20 6e 6f 74 20 69 6e 20 6c 69 73 74 20 6f 66 20      not in list of 
     16b:	6b 6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 20 53     known devices. S
     17b:	52 51 20 49 67 6e 6f 72 65 64 2e 0a 0d 00           RQ Ignored....

00000189 <__c.2124>:
     189:	2e 69 20 2d 20 64 75 6d 70 20 69 6e 66 6f 20 61     .i - dump info a
     199:	62 6f 75 74 20 63 6f 6e 74 72 6f 6c 6c 65 72 20     bout controller 
     1a9:	73 74 61 74 65 2e 0a 0d 00                          state....

000001b2 <__c.2122>:
     1b2:	2e 66 20 2d 20 66 69 6e 64 20 70 61 72 74 6e 65     .f - find partne
     1c2:	72 73 2e 0a 0d 00                                   rs....

000001c8 <__c.2120>:
     1c8:	2e 65 20 2d 20 64 75 6d 70 20 65 72 72 6f 72 20     .e - dump error 
     1d8:	71 75 65 75 65 2e 0a 0d 00                          queue....

000001e1 <__c.2118>:
     1e1:	2e 68 20 2d 20 70 72 69 6e 74 20 68 65 6c 70 2e     .h - print help.
     1f1:	0a 0d 00                                            ...

000001f4 <__c.2116>:
     1f4:	2e 78 20 2d 20 74 6f 67 67 6c 65 20 58 6f 6e 2f     .x - toggle Xon/
     204:	58 6f 66 66 20 66 6c 6f 77 20 63 6f 6e 74 72 6f     Xoff flow contro
     214:	6c 2e 0a 0d 00                                      l....

00000219 <__c.2114>:
     219:	2e 2d 20 3c 6e 3e 20 2d 20 72 65 6d 6f 76 65 20     .- <n> - remove 
     229:	70 61 72 74 6e 65 72 20 64 65 76 69 63 65 20 61     partner device a
     239:	64 64 72 65 73 73 20 66 72 6f 6d 20 6c 69 73 74     ddress from list
     249:	20 6f 66 20 6b 6e 6f 77 6e 20 64 65 76 69 63 65      of known device
     259:	73 2e 0a 0d 00                                      s....

0000025e <__c.2112>:
     25e:	2e 2b 20 3c 6e 3e 20 2d 20 61 64 64 20 70 61 72     .+ <n> - add par
     26e:	74 6e 65 72 20 64 65 76 69 63 65 20 61 64 64 72     tner device addr
     27e:	65 73 73 20 74 6f 20 6c 69 73 74 20 6f 66 20 6b     ess to list of k
     28e:	6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 0a 0d 00     nown devices....

0000029e <__c.2110>:
     29e:	2e 73 20 3c 73 65 63 6f 6e 64 61 72 79 3e 20 2d     .s <secondary> -
     2ae:	20 73 65 74 20 73 65 63 6f 6e 64 61 72 79 20 61      set secondary a
     2be:	64 64 72 65 73 73 20 6f 66 20 72 65 6d 6f 74 65     ddress of remote
     2ce:	20 64 65 76 69 63 65 0a 0d 00                        device...

000002d8 <__c.2108>:
     2d8:	2e 72 20 74 6f 67 67 6c 65 20 53 52 51 20 65 6e     .r toggle SRQ en
     2e8:	61 62 6c 65 6d 65 6e 74 0a 0d 00                    ablement...

000002f3 <__c.2106>:
     2f3:	49 6e 74 65 72 6e 61 6c 20 63 6f 6d 6d 61 6e 64     Internal command
     303:	73 3a 0a 0d 00                                      s:...

00000308 <__c.2146>:
     308:	0a 0d 00                                            ...

0000030b <__c.2144>:
     30b:	0a 0d 00                                            ...

0000030e <__c.2141>:
     30e:	44 65 76 69 63 65 20 61 64 64 72 65 73 73 20 69     Device address i
     31e:	73 20 6e 6f 74 20 73 65 74 2e 20 43 61 6e 20 6e     s not set. Can n
     32e:	6f 74 20 73 65 6e 64 20 63 6f 6d 6d 61 6e 64 2e     ot send command.
     33e:	0a 0d 00                                            ...

00000341 <__c.2139>:
     341:	0a 0d 00                                            ...

00000344 <__ctors_end>:
     344:	11 24       	eor	r1, r1
     346:	1f be       	out	0x3f, r1	; 63
     348:	cf e5       	ldi	r28, 0x5F	; 95
     34a:	d8 e0       	ldi	r29, 0x08	; 8
     34c:	de bf       	out	0x3e, r29	; 62
     34e:	cd bf       	out	0x3d, r28	; 61

00000350 <__do_copy_data>:
     350:	14 e0       	ldi	r17, 0x04	; 4
     352:	a0 e6       	ldi	r26, 0x60	; 96
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	e2 ec       	ldi	r30, 0xC2	; 194
     358:	ff e2       	ldi	r31, 0x2F	; 47
     35a:	02 c0       	rjmp	.+4      	; 0x360 <.do_copy_data_start>

0000035c <.do_copy_data_loop>:
     35c:	05 90       	lpm	r0, Z+
     35e:	0d 92       	st	X+, r0

00000360 <.do_copy_data_start>:
     360:	aa 37       	cpi	r26, 0x7A	; 122
     362:	b1 07       	cpc	r27, r17
     364:	d9 f7       	brne	.-10     	; 0x35c <.do_copy_data_loop>

00000366 <__do_clear_bss>:
     366:	15 e0       	ldi	r17, 0x05	; 5
     368:	aa e7       	ldi	r26, 0x7A	; 122
     36a:	b4 e0       	ldi	r27, 0x04	; 4
     36c:	01 c0       	rjmp	.+2      	; 0x370 <.do_clear_bss_start>

0000036e <.do_clear_bss_loop>:
     36e:	1d 92       	st	X+, r1

00000370 <.do_clear_bss_start>:
     370:	aa 3e       	cpi	r26, 0xEA	; 234
     372:	b1 07       	cpc	r27, r17
     374:	e1 f7       	brne	.-8      	; 0x36e <.do_clear_bss_loop>
     376:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <main>
     37a:	0c 94 df 17 	jmp	0x2fbe	; 0x2fbe <_exit>

0000037e <__bad_interrupt>:
     37e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000382 <atoi>:
     382:	fc 01       	movw	r30, r24
     384:	88 27       	eor	r24, r24
     386:	99 27       	eor	r25, r25
     388:	e8 94       	clt
     38a:	21 91       	ld	r18, Z+
     38c:	20 32       	cpi	r18, 0x20	; 32
     38e:	e9 f3       	breq	.-6      	; 0x38a <atoi+0x8>
     390:	29 30       	cpi	r18, 0x09	; 9
     392:	10 f0       	brcs	.+4      	; 0x398 <atoi+0x16>
     394:	2e 30       	cpi	r18, 0x0E	; 14
     396:	c8 f3       	brcs	.-14     	; 0x38a <atoi+0x8>
     398:	2b 32       	cpi	r18, 0x2B	; 43
     39a:	41 f0       	breq	.+16     	; 0x3ac <atoi+0x2a>
     39c:	2d 32       	cpi	r18, 0x2D	; 45
     39e:	39 f4       	brne	.+14     	; 0x3ae <atoi+0x2c>
     3a0:	68 94       	set
     3a2:	04 c0       	rjmp	.+8      	; 0x3ac <atoi+0x2a>
     3a4:	0e 94 2d 02 	call	0x45a	; 0x45a <__mulhi_const_10>
     3a8:	82 0f       	add	r24, r18
     3aa:	91 1d       	adc	r25, r1
     3ac:	21 91       	ld	r18, Z+
     3ae:	20 53       	subi	r18, 0x30	; 48
     3b0:	2a 30       	cpi	r18, 0x0A	; 10
     3b2:	c0 f3       	brcs	.-16     	; 0x3a4 <atoi+0x22>
     3b4:	1e f4       	brtc	.+6      	; 0x3bc <atoi+0x3a>
     3b6:	90 95       	com	r25
     3b8:	81 95       	neg	r24
     3ba:	9f 4f       	sbci	r25, 0xFF	; 255
     3bc:	08 95       	ret

000003be <strtok>:
     3be:	4a e7       	ldi	r20, 0x7A	; 122
     3c0:	54 e0       	ldi	r21, 0x04	; 4
     3c2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <strtok_r>
     3c6:	08 95       	ret

000003c8 <strlen>:
     3c8:	fc 01       	movw	r30, r24
     3ca:	01 90       	ld	r0, Z+
     3cc:	00 20       	and	r0, r0
     3ce:	e9 f7       	brne	.-6      	; 0x3ca <strlen+0x2>
     3d0:	80 95       	com	r24
     3d2:	90 95       	com	r25
     3d4:	8e 0f       	add	r24, r30
     3d6:	9f 1f       	adc	r25, r31
     3d8:	08 95       	ret

000003da <strncmp>:
     3da:	fb 01       	movw	r30, r22
     3dc:	dc 01       	movw	r26, r24
     3de:	41 50       	subi	r20, 0x01	; 1
     3e0:	50 40       	sbci	r21, 0x00	; 0
     3e2:	30 f0       	brcs	.+12     	; 0x3f0 <strncmp+0x16>
     3e4:	8d 91       	ld	r24, X+
     3e6:	01 90       	ld	r0, Z+
     3e8:	80 19       	sub	r24, r0
     3ea:	19 f4       	brne	.+6      	; 0x3f2 <strncmp+0x18>
     3ec:	00 20       	and	r0, r0
     3ee:	b9 f7       	brne	.-18     	; 0x3de <strncmp+0x4>
     3f0:	88 1b       	sub	r24, r24
     3f2:	99 0b       	sbc	r25, r25
     3f4:	08 95       	ret

000003f6 <strtok_r>:
     3f6:	00 97       	sbiw	r24, 0x00	; 0
     3f8:	31 f4       	brne	.+12     	; 0x406 <strtok_r+0x10>
     3fa:	da 01       	movw	r26, r20
     3fc:	8d 91       	ld	r24, X+
     3fe:	9c 91       	ld	r25, X
     400:	00 97       	sbiw	r24, 0x00	; 0
     402:	09 f4       	brne	.+2      	; 0x406 <strtok_r+0x10>
     404:	0e c0       	rjmp	.+28     	; 0x422 <strtok_r+0x2c>
     406:	dc 01       	movw	r26, r24
     408:	fb 01       	movw	r30, r22
     40a:	3d 91       	ld	r19, X+
     40c:	21 91       	ld	r18, Z+
     40e:	22 23       	and	r18, r18
     410:	19 f0       	breq	.+6      	; 0x418 <strtok_r+0x22>
     412:	32 17       	cp	r19, r18
     414:	c9 f3       	breq	.-14     	; 0x408 <strtok_r+0x12>
     416:	fa cf       	rjmp	.-12     	; 0x40c <strtok_r+0x16>
     418:	33 23       	and	r19, r19
     41a:	31 f4       	brne	.+12     	; 0x428 <strtok_r+0x32>
     41c:	da 01       	movw	r26, r20
     41e:	1d 92       	st	X+, r1
     420:	1c 92       	st	X, r1
     422:	88 27       	eor	r24, r24
     424:	99 27       	eor	r25, r25
     426:	08 95       	ret
     428:	11 97       	sbiw	r26, 0x01	; 1
     42a:	af 93       	push	r26
     42c:	bf 93       	push	r27
     42e:	fb 01       	movw	r30, r22
     430:	3d 91       	ld	r19, X+
     432:	21 91       	ld	r18, Z+
     434:	32 17       	cp	r19, r18
     436:	71 f4       	brne	.+28     	; 0x454 <strtok_r+0x5e>
     438:	33 23       	and	r19, r19
     43a:	21 f4       	brne	.+8      	; 0x444 <strtok_r+0x4e>
     43c:	88 27       	eor	r24, r24
     43e:	99 27       	eor	r25, r25
     440:	11 97       	sbiw	r26, 0x01	; 1
     442:	02 c0       	rjmp	.+4      	; 0x448 <strtok_r+0x52>
     444:	1e 92       	st	-X, r1
     446:	11 96       	adiw	r26, 0x01	; 1
     448:	fa 01       	movw	r30, r20
     44a:	a1 93       	st	Z+, r26
     44c:	b0 83       	st	Z, r27
     44e:	9f 91       	pop	r25
     450:	8f 91       	pop	r24
     452:	08 95       	ret
     454:	22 23       	and	r18, r18
     456:	69 f7       	brne	.-38     	; 0x432 <strtok_r+0x3c>
     458:	ea cf       	rjmp	.-44     	; 0x42e <strtok_r+0x38>

0000045a <__mulhi_const_10>:
     45a:	7a e0       	ldi	r23, 0x0A	; 10
     45c:	97 9f       	mul	r25, r23
     45e:	90 2d       	mov	r25, r0
     460:	87 9f       	mul	r24, r23
     462:	80 2d       	mov	r24, r0
     464:	91 0d       	add	r25, r1
     466:	11 24       	eor	r1, r1
     468:	08 95       	ret

0000046a <sprintf>:
     46a:	ae e0       	ldi	r26, 0x0E	; 14
     46c:	b0 e0       	ldi	r27, 0x00	; 0
     46e:	eb e3       	ldi	r30, 0x3B	; 59
     470:	f2 e0       	ldi	r31, 0x02	; 2
     472:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <__prologue_saves__+0x1c>
     476:	0d 89       	ldd	r16, Y+21	; 0x15
     478:	1e 89       	ldd	r17, Y+22	; 0x16
     47a:	86 e0       	ldi	r24, 0x06	; 6
     47c:	8c 83       	std	Y+4, r24	; 0x04
     47e:	1a 83       	std	Y+2, r17	; 0x02
     480:	09 83       	std	Y+1, r16	; 0x01
     482:	8f ef       	ldi	r24, 0xFF	; 255
     484:	9f e7       	ldi	r25, 0x7F	; 127
     486:	9e 83       	std	Y+6, r25	; 0x06
     488:	8d 83       	std	Y+5, r24	; 0x05
     48a:	9e 01       	movw	r18, r28
     48c:	27 5e       	subi	r18, 0xE7	; 231
     48e:	3f 4f       	sbci	r19, 0xFF	; 255
     490:	ce 01       	movw	r24, r28
     492:	01 96       	adiw	r24, 0x01	; 1
     494:	6f 89       	ldd	r22, Y+23	; 0x17
     496:	78 8d       	ldd	r23, Y+24	; 0x18
     498:	a9 01       	movw	r20, r18
     49a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <vfprintf>
     49e:	2f 81       	ldd	r18, Y+7	; 0x07
     4a0:	38 85       	ldd	r19, Y+8	; 0x08
     4a2:	02 0f       	add	r16, r18
     4a4:	13 1f       	adc	r17, r19
     4a6:	f8 01       	movw	r30, r16
     4a8:	10 82       	st	Z, r1
     4aa:	2e 96       	adiw	r28, 0x0e	; 14
     4ac:	e4 e0       	ldi	r30, 0x04	; 4
     4ae:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__epilogue_restores__+0x1c>

000004b2 <vfprintf>:
     4b2:	ab e0       	ldi	r26, 0x0B	; 11
     4b4:	b0 e0       	ldi	r27, 0x00	; 0
     4b6:	ef e5       	ldi	r30, 0x5F	; 95
     4b8:	f2 e0       	ldi	r31, 0x02	; 2
     4ba:	0c 94 a8 17 	jmp	0x2f50	; 0x2f50 <__prologue_saves__>
     4be:	3c 01       	movw	r6, r24
     4c0:	2b 01       	movw	r4, r22
     4c2:	5a 01       	movw	r10, r20
     4c4:	fc 01       	movw	r30, r24
     4c6:	17 82       	std	Z+7, r1	; 0x07
     4c8:	16 82       	std	Z+6, r1	; 0x06
     4ca:	83 81       	ldd	r24, Z+3	; 0x03
     4cc:	81 fd       	sbrc	r24, 1
     4ce:	03 c0       	rjmp	.+6      	; 0x4d6 <vfprintf+0x24>
     4d0:	6f ef       	ldi	r22, 0xFF	; 255
     4d2:	7f ef       	ldi	r23, 0xFF	; 255
     4d4:	c6 c1       	rjmp	.+908    	; 0x862 <__stack+0x3>
     4d6:	9a e0       	ldi	r25, 0x0A	; 10
     4d8:	89 2e       	mov	r8, r25
     4da:	1e 01       	movw	r2, r28
     4dc:	08 94       	sec
     4de:	21 1c       	adc	r2, r1
     4e0:	31 1c       	adc	r3, r1
     4e2:	f3 01       	movw	r30, r6
     4e4:	23 81       	ldd	r18, Z+3	; 0x03
     4e6:	f2 01       	movw	r30, r4
     4e8:	23 fd       	sbrc	r18, 3
     4ea:	85 91       	lpm	r24, Z+
     4ec:	23 ff       	sbrs	r18, 3
     4ee:	81 91       	ld	r24, Z+
     4f0:	2f 01       	movw	r4, r30
     4f2:	88 23       	and	r24, r24
     4f4:	09 f4       	brne	.+2      	; 0x4f8 <vfprintf+0x46>
     4f6:	b2 c1       	rjmp	.+868    	; 0x85c <vfprintf+0x3aa>
     4f8:	85 32       	cpi	r24, 0x25	; 37
     4fa:	39 f4       	brne	.+14     	; 0x50a <vfprintf+0x58>
     4fc:	23 fd       	sbrc	r18, 3
     4fe:	85 91       	lpm	r24, Z+
     500:	23 ff       	sbrs	r18, 3
     502:	81 91       	ld	r24, Z+
     504:	2f 01       	movw	r4, r30
     506:	85 32       	cpi	r24, 0x25	; 37
     508:	29 f4       	brne	.+10     	; 0x514 <vfprintf+0x62>
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	b3 01       	movw	r22, r6
     50e:	0e 94 4c 04 	call	0x898	; 0x898 <fputc>
     512:	e7 cf       	rjmp	.-50     	; 0x4e2 <vfprintf+0x30>
     514:	98 2f       	mov	r25, r24
     516:	ff 24       	eor	r15, r15
     518:	ee 24       	eor	r14, r14
     51a:	99 24       	eor	r9, r9
     51c:	ff e1       	ldi	r31, 0x1F	; 31
     51e:	ff 15       	cp	r31, r15
     520:	d0 f0       	brcs	.+52     	; 0x556 <vfprintf+0xa4>
     522:	9b 32       	cpi	r25, 0x2B	; 43
     524:	69 f0       	breq	.+26     	; 0x540 <vfprintf+0x8e>
     526:	9c 32       	cpi	r25, 0x2C	; 44
     528:	28 f4       	brcc	.+10     	; 0x534 <vfprintf+0x82>
     52a:	90 32       	cpi	r25, 0x20	; 32
     52c:	59 f0       	breq	.+22     	; 0x544 <vfprintf+0x92>
     52e:	93 32       	cpi	r25, 0x23	; 35
     530:	91 f4       	brne	.+36     	; 0x556 <vfprintf+0xa4>
     532:	0e c0       	rjmp	.+28     	; 0x550 <vfprintf+0x9e>
     534:	9d 32       	cpi	r25, 0x2D	; 45
     536:	49 f0       	breq	.+18     	; 0x54a <vfprintf+0x98>
     538:	90 33       	cpi	r25, 0x30	; 48
     53a:	69 f4       	brne	.+26     	; 0x556 <vfprintf+0xa4>
     53c:	41 e0       	ldi	r20, 0x01	; 1
     53e:	24 c0       	rjmp	.+72     	; 0x588 <vfprintf+0xd6>
     540:	52 e0       	ldi	r21, 0x02	; 2
     542:	f5 2a       	or	r15, r21
     544:	84 e0       	ldi	r24, 0x04	; 4
     546:	f8 2a       	or	r15, r24
     548:	28 c0       	rjmp	.+80     	; 0x59a <vfprintf+0xe8>
     54a:	98 e0       	ldi	r25, 0x08	; 8
     54c:	f9 2a       	or	r15, r25
     54e:	25 c0       	rjmp	.+74     	; 0x59a <vfprintf+0xe8>
     550:	e0 e1       	ldi	r30, 0x10	; 16
     552:	fe 2a       	or	r15, r30
     554:	22 c0       	rjmp	.+68     	; 0x59a <vfprintf+0xe8>
     556:	f7 fc       	sbrc	r15, 7
     558:	29 c0       	rjmp	.+82     	; 0x5ac <vfprintf+0xfa>
     55a:	89 2f       	mov	r24, r25
     55c:	80 53       	subi	r24, 0x30	; 48
     55e:	8a 30       	cpi	r24, 0x0A	; 10
     560:	70 f4       	brcc	.+28     	; 0x57e <vfprintf+0xcc>
     562:	f6 fe       	sbrs	r15, 6
     564:	05 c0       	rjmp	.+10     	; 0x570 <vfprintf+0xbe>
     566:	98 9c       	mul	r9, r8
     568:	90 2c       	mov	r9, r0
     56a:	11 24       	eor	r1, r1
     56c:	98 0e       	add	r9, r24
     56e:	15 c0       	rjmp	.+42     	; 0x59a <vfprintf+0xe8>
     570:	e8 9c       	mul	r14, r8
     572:	e0 2c       	mov	r14, r0
     574:	11 24       	eor	r1, r1
     576:	e8 0e       	add	r14, r24
     578:	f0 e2       	ldi	r31, 0x20	; 32
     57a:	ff 2a       	or	r15, r31
     57c:	0e c0       	rjmp	.+28     	; 0x59a <vfprintf+0xe8>
     57e:	9e 32       	cpi	r25, 0x2E	; 46
     580:	29 f4       	brne	.+10     	; 0x58c <vfprintf+0xda>
     582:	f6 fc       	sbrc	r15, 6
     584:	6b c1       	rjmp	.+726    	; 0x85c <vfprintf+0x3aa>
     586:	40 e4       	ldi	r20, 0x40	; 64
     588:	f4 2a       	or	r15, r20
     58a:	07 c0       	rjmp	.+14     	; 0x59a <vfprintf+0xe8>
     58c:	9c 36       	cpi	r25, 0x6C	; 108
     58e:	19 f4       	brne	.+6      	; 0x596 <vfprintf+0xe4>
     590:	50 e8       	ldi	r21, 0x80	; 128
     592:	f5 2a       	or	r15, r21
     594:	02 c0       	rjmp	.+4      	; 0x59a <vfprintf+0xe8>
     596:	98 36       	cpi	r25, 0x68	; 104
     598:	49 f4       	brne	.+18     	; 0x5ac <vfprintf+0xfa>
     59a:	f2 01       	movw	r30, r4
     59c:	23 fd       	sbrc	r18, 3
     59e:	95 91       	lpm	r25, Z+
     5a0:	23 ff       	sbrs	r18, 3
     5a2:	91 91       	ld	r25, Z+
     5a4:	2f 01       	movw	r4, r30
     5a6:	99 23       	and	r25, r25
     5a8:	09 f0       	breq	.+2      	; 0x5ac <vfprintf+0xfa>
     5aa:	b8 cf       	rjmp	.-144    	; 0x51c <vfprintf+0x6a>
     5ac:	89 2f       	mov	r24, r25
     5ae:	85 54       	subi	r24, 0x45	; 69
     5b0:	83 30       	cpi	r24, 0x03	; 3
     5b2:	18 f0       	brcs	.+6      	; 0x5ba <vfprintf+0x108>
     5b4:	80 52       	subi	r24, 0x20	; 32
     5b6:	83 30       	cpi	r24, 0x03	; 3
     5b8:	38 f4       	brcc	.+14     	; 0x5c8 <vfprintf+0x116>
     5ba:	44 e0       	ldi	r20, 0x04	; 4
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	a4 0e       	add	r10, r20
     5c0:	b5 1e       	adc	r11, r21
     5c2:	5f e3       	ldi	r21, 0x3F	; 63
     5c4:	59 83       	std	Y+1, r21	; 0x01
     5c6:	0f c0       	rjmp	.+30     	; 0x5e6 <vfprintf+0x134>
     5c8:	93 36       	cpi	r25, 0x63	; 99
     5ca:	31 f0       	breq	.+12     	; 0x5d8 <vfprintf+0x126>
     5cc:	93 37       	cpi	r25, 0x73	; 115
     5ce:	79 f0       	breq	.+30     	; 0x5ee <vfprintf+0x13c>
     5d0:	93 35       	cpi	r25, 0x53	; 83
     5d2:	09 f0       	breq	.+2      	; 0x5d6 <vfprintf+0x124>
     5d4:	56 c0       	rjmp	.+172    	; 0x682 <vfprintf+0x1d0>
     5d6:	20 c0       	rjmp	.+64     	; 0x618 <vfprintf+0x166>
     5d8:	f5 01       	movw	r30, r10
     5da:	80 81       	ld	r24, Z
     5dc:	89 83       	std	Y+1, r24	; 0x01
     5de:	42 e0       	ldi	r20, 0x02	; 2
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	a4 0e       	add	r10, r20
     5e4:	b5 1e       	adc	r11, r21
     5e6:	61 01       	movw	r12, r2
     5e8:	01 e0       	ldi	r16, 0x01	; 1
     5ea:	10 e0       	ldi	r17, 0x00	; 0
     5ec:	12 c0       	rjmp	.+36     	; 0x612 <vfprintf+0x160>
     5ee:	f5 01       	movw	r30, r10
     5f0:	c0 80       	ld	r12, Z
     5f2:	d1 80       	ldd	r13, Z+1	; 0x01
     5f4:	f6 fc       	sbrc	r15, 6
     5f6:	03 c0       	rjmp	.+6      	; 0x5fe <vfprintf+0x14c>
     5f8:	6f ef       	ldi	r22, 0xFF	; 255
     5fa:	7f ef       	ldi	r23, 0xFF	; 255
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <vfprintf+0x150>
     5fe:	69 2d       	mov	r22, r9
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	42 e0       	ldi	r20, 0x02	; 2
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	a4 0e       	add	r10, r20
     608:	b5 1e       	adc	r11, r21
     60a:	c6 01       	movw	r24, r12
     60c:	0e 94 41 04 	call	0x882	; 0x882 <strnlen>
     610:	8c 01       	movw	r16, r24
     612:	5f e7       	ldi	r21, 0x7F	; 127
     614:	f5 22       	and	r15, r21
     616:	14 c0       	rjmp	.+40     	; 0x640 <vfprintf+0x18e>
     618:	f5 01       	movw	r30, r10
     61a:	c0 80       	ld	r12, Z
     61c:	d1 80       	ldd	r13, Z+1	; 0x01
     61e:	f6 fc       	sbrc	r15, 6
     620:	03 c0       	rjmp	.+6      	; 0x628 <vfprintf+0x176>
     622:	6f ef       	ldi	r22, 0xFF	; 255
     624:	7f ef       	ldi	r23, 0xFF	; 255
     626:	02 c0       	rjmp	.+4      	; 0x62c <vfprintf+0x17a>
     628:	69 2d       	mov	r22, r9
     62a:	70 e0       	ldi	r23, 0x00	; 0
     62c:	42 e0       	ldi	r20, 0x02	; 2
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	a4 0e       	add	r10, r20
     632:	b5 1e       	adc	r11, r21
     634:	c6 01       	movw	r24, r12
     636:	0e 94 36 04 	call	0x86c	; 0x86c <strnlen_P>
     63a:	8c 01       	movw	r16, r24
     63c:	50 e8       	ldi	r21, 0x80	; 128
     63e:	f5 2a       	or	r15, r21
     640:	f3 fe       	sbrs	r15, 3
     642:	07 c0       	rjmp	.+14     	; 0x652 <vfprintf+0x1a0>
     644:	1a c0       	rjmp	.+52     	; 0x67a <vfprintf+0x1c8>
     646:	80 e2       	ldi	r24, 0x20	; 32
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	b3 01       	movw	r22, r6
     64c:	0e 94 4c 04 	call	0x898	; 0x898 <fputc>
     650:	ea 94       	dec	r14
     652:	8e 2d       	mov	r24, r14
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	08 17       	cp	r16, r24
     658:	19 07       	cpc	r17, r25
     65a:	a8 f3       	brcs	.-22     	; 0x646 <vfprintf+0x194>
     65c:	0e c0       	rjmp	.+28     	; 0x67a <vfprintf+0x1c8>
     65e:	f6 01       	movw	r30, r12
     660:	f7 fc       	sbrc	r15, 7
     662:	85 91       	lpm	r24, Z+
     664:	f7 fe       	sbrs	r15, 7
     666:	81 91       	ld	r24, Z+
     668:	6f 01       	movw	r12, r30
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	b3 01       	movw	r22, r6
     66e:	0e 94 4c 04 	call	0x898	; 0x898 <fputc>
     672:	e1 10       	cpse	r14, r1
     674:	ea 94       	dec	r14
     676:	01 50       	subi	r16, 0x01	; 1
     678:	10 40       	sbci	r17, 0x00	; 0
     67a:	01 15       	cp	r16, r1
     67c:	11 05       	cpc	r17, r1
     67e:	79 f7       	brne	.-34     	; 0x65e <vfprintf+0x1ac>
     680:	ea c0       	rjmp	.+468    	; 0x856 <vfprintf+0x3a4>
     682:	94 36       	cpi	r25, 0x64	; 100
     684:	11 f0       	breq	.+4      	; 0x68a <vfprintf+0x1d8>
     686:	99 36       	cpi	r25, 0x69	; 105
     688:	69 f5       	brne	.+90     	; 0x6e4 <vfprintf+0x232>
     68a:	f7 fe       	sbrs	r15, 7
     68c:	08 c0       	rjmp	.+16     	; 0x69e <vfprintf+0x1ec>
     68e:	f5 01       	movw	r30, r10
     690:	20 81       	ld	r18, Z
     692:	31 81       	ldd	r19, Z+1	; 0x01
     694:	42 81       	ldd	r20, Z+2	; 0x02
     696:	53 81       	ldd	r21, Z+3	; 0x03
     698:	84 e0       	ldi	r24, 0x04	; 4
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0a c0       	rjmp	.+20     	; 0x6b2 <vfprintf+0x200>
     69e:	f5 01       	movw	r30, r10
     6a0:	80 81       	ld	r24, Z
     6a2:	91 81       	ldd	r25, Z+1	; 0x01
     6a4:	9c 01       	movw	r18, r24
     6a6:	44 27       	eor	r20, r20
     6a8:	37 fd       	sbrc	r19, 7
     6aa:	40 95       	com	r20
     6ac:	54 2f       	mov	r21, r20
     6ae:	82 e0       	ldi	r24, 0x02	; 2
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	a8 0e       	add	r10, r24
     6b4:	b9 1e       	adc	r11, r25
     6b6:	9f e6       	ldi	r25, 0x6F	; 111
     6b8:	f9 22       	and	r15, r25
     6ba:	57 ff       	sbrs	r21, 7
     6bc:	09 c0       	rjmp	.+18     	; 0x6d0 <vfprintf+0x21e>
     6be:	50 95       	com	r21
     6c0:	40 95       	com	r20
     6c2:	30 95       	com	r19
     6c4:	21 95       	neg	r18
     6c6:	3f 4f       	sbci	r19, 0xFF	; 255
     6c8:	4f 4f       	sbci	r20, 0xFF	; 255
     6ca:	5f 4f       	sbci	r21, 0xFF	; 255
     6cc:	e0 e8       	ldi	r30, 0x80	; 128
     6ce:	fe 2a       	or	r15, r30
     6d0:	ca 01       	movw	r24, r20
     6d2:	b9 01       	movw	r22, r18
     6d4:	a1 01       	movw	r20, r2
     6d6:	2a e0       	ldi	r18, 0x0A	; 10
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__ultoa_invert>
     6de:	d8 2e       	mov	r13, r24
     6e0:	d2 18       	sub	r13, r2
     6e2:	40 c0       	rjmp	.+128    	; 0x764 <vfprintf+0x2b2>
     6e4:	95 37       	cpi	r25, 0x75	; 117
     6e6:	29 f4       	brne	.+10     	; 0x6f2 <vfprintf+0x240>
     6e8:	1f 2d       	mov	r17, r15
     6ea:	1f 7e       	andi	r17, 0xEF	; 239
     6ec:	2a e0       	ldi	r18, 0x0A	; 10
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	1d c0       	rjmp	.+58     	; 0x72c <vfprintf+0x27a>
     6f2:	1f 2d       	mov	r17, r15
     6f4:	19 7f       	andi	r17, 0xF9	; 249
     6f6:	9f 36       	cpi	r25, 0x6F	; 111
     6f8:	61 f0       	breq	.+24     	; 0x712 <vfprintf+0x260>
     6fa:	90 37       	cpi	r25, 0x70	; 112
     6fc:	20 f4       	brcc	.+8      	; 0x706 <vfprintf+0x254>
     6fe:	98 35       	cpi	r25, 0x58	; 88
     700:	09 f0       	breq	.+2      	; 0x704 <vfprintf+0x252>
     702:	ac c0       	rjmp	.+344    	; 0x85c <vfprintf+0x3aa>
     704:	0f c0       	rjmp	.+30     	; 0x724 <vfprintf+0x272>
     706:	90 37       	cpi	r25, 0x70	; 112
     708:	39 f0       	breq	.+14     	; 0x718 <vfprintf+0x266>
     70a:	98 37       	cpi	r25, 0x78	; 120
     70c:	09 f0       	breq	.+2      	; 0x710 <vfprintf+0x25e>
     70e:	a6 c0       	rjmp	.+332    	; 0x85c <vfprintf+0x3aa>
     710:	04 c0       	rjmp	.+8      	; 0x71a <vfprintf+0x268>
     712:	28 e0       	ldi	r18, 0x08	; 8
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	0a c0       	rjmp	.+20     	; 0x72c <vfprintf+0x27a>
     718:	10 61       	ori	r17, 0x10	; 16
     71a:	14 fd       	sbrc	r17, 4
     71c:	14 60       	ori	r17, 0x04	; 4
     71e:	20 e1       	ldi	r18, 0x10	; 16
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	04 c0       	rjmp	.+8      	; 0x72c <vfprintf+0x27a>
     724:	14 fd       	sbrc	r17, 4
     726:	16 60       	ori	r17, 0x06	; 6
     728:	20 e1       	ldi	r18, 0x10	; 16
     72a:	32 e0       	ldi	r19, 0x02	; 2
     72c:	17 ff       	sbrs	r17, 7
     72e:	08 c0       	rjmp	.+16     	; 0x740 <vfprintf+0x28e>
     730:	f5 01       	movw	r30, r10
     732:	60 81       	ld	r22, Z
     734:	71 81       	ldd	r23, Z+1	; 0x01
     736:	82 81       	ldd	r24, Z+2	; 0x02
     738:	93 81       	ldd	r25, Z+3	; 0x03
     73a:	44 e0       	ldi	r20, 0x04	; 4
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	08 c0       	rjmp	.+16     	; 0x750 <vfprintf+0x29e>
     740:	f5 01       	movw	r30, r10
     742:	80 81       	ld	r24, Z
     744:	91 81       	ldd	r25, Z+1	; 0x01
     746:	bc 01       	movw	r22, r24
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	42 e0       	ldi	r20, 0x02	; 2
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	a4 0e       	add	r10, r20
     752:	b5 1e       	adc	r11, r21
     754:	a1 01       	movw	r20, r2
     756:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__ultoa_invert>
     75a:	d8 2e       	mov	r13, r24
     75c:	d2 18       	sub	r13, r2
     75e:	8f e7       	ldi	r24, 0x7F	; 127
     760:	f8 2e       	mov	r15, r24
     762:	f1 22       	and	r15, r17
     764:	f6 fe       	sbrs	r15, 6
     766:	0b c0       	rjmp	.+22     	; 0x77e <vfprintf+0x2cc>
     768:	5e ef       	ldi	r21, 0xFE	; 254
     76a:	f5 22       	and	r15, r21
     76c:	d9 14       	cp	r13, r9
     76e:	38 f4       	brcc	.+14     	; 0x77e <vfprintf+0x2cc>
     770:	f4 fe       	sbrs	r15, 4
     772:	07 c0       	rjmp	.+14     	; 0x782 <vfprintf+0x2d0>
     774:	f2 fc       	sbrc	r15, 2
     776:	05 c0       	rjmp	.+10     	; 0x782 <vfprintf+0x2d0>
     778:	8f ee       	ldi	r24, 0xEF	; 239
     77a:	f8 22       	and	r15, r24
     77c:	02 c0       	rjmp	.+4      	; 0x782 <vfprintf+0x2d0>
     77e:	1d 2d       	mov	r17, r13
     780:	01 c0       	rjmp	.+2      	; 0x784 <vfprintf+0x2d2>
     782:	19 2d       	mov	r17, r9
     784:	f4 fe       	sbrs	r15, 4
     786:	0d c0       	rjmp	.+26     	; 0x7a2 <vfprintf+0x2f0>
     788:	fe 01       	movw	r30, r28
     78a:	ed 0d       	add	r30, r13
     78c:	f1 1d       	adc	r31, r1
     78e:	80 81       	ld	r24, Z
     790:	80 33       	cpi	r24, 0x30	; 48
     792:	19 f4       	brne	.+6      	; 0x79a <vfprintf+0x2e8>
     794:	99 ee       	ldi	r25, 0xE9	; 233
     796:	f9 22       	and	r15, r25
     798:	08 c0       	rjmp	.+16     	; 0x7aa <vfprintf+0x2f8>
     79a:	1f 5f       	subi	r17, 0xFF	; 255
     79c:	f2 fe       	sbrs	r15, 2
     79e:	05 c0       	rjmp	.+10     	; 0x7aa <vfprintf+0x2f8>
     7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <vfprintf+0x2f6>
     7a2:	8f 2d       	mov	r24, r15
     7a4:	86 78       	andi	r24, 0x86	; 134
     7a6:	09 f0       	breq	.+2      	; 0x7aa <vfprintf+0x2f8>
     7a8:	1f 5f       	subi	r17, 0xFF	; 255
     7aa:	0f 2d       	mov	r16, r15
     7ac:	f3 fc       	sbrc	r15, 3
     7ae:	14 c0       	rjmp	.+40     	; 0x7d8 <vfprintf+0x326>
     7b0:	f0 fe       	sbrs	r15, 0
     7b2:	0f c0       	rjmp	.+30     	; 0x7d2 <vfprintf+0x320>
     7b4:	1e 15       	cp	r17, r14
     7b6:	10 f0       	brcs	.+4      	; 0x7bc <vfprintf+0x30a>
     7b8:	9d 2c       	mov	r9, r13
     7ba:	0b c0       	rjmp	.+22     	; 0x7d2 <vfprintf+0x320>
     7bc:	9d 2c       	mov	r9, r13
     7be:	9e 0c       	add	r9, r14
     7c0:	91 1a       	sub	r9, r17
     7c2:	1e 2d       	mov	r17, r14
     7c4:	06 c0       	rjmp	.+12     	; 0x7d2 <vfprintf+0x320>
     7c6:	80 e2       	ldi	r24, 0x20	; 32
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	b3 01       	movw	r22, r6
     7cc:	0e 94 4c 04 	call	0x898	; 0x898 <fputc>
     7d0:	1f 5f       	subi	r17, 0xFF	; 255
     7d2:	1e 15       	cp	r17, r14
     7d4:	c0 f3       	brcs	.-16     	; 0x7c6 <vfprintf+0x314>
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <vfprintf+0x32e>
     7d8:	1e 15       	cp	r17, r14
     7da:	10 f4       	brcc	.+4      	; 0x7e0 <vfprintf+0x32e>
     7dc:	e1 1a       	sub	r14, r17
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <vfprintf+0x330>
     7e0:	ee 24       	eor	r14, r14
     7e2:	04 ff       	sbrs	r16, 4
     7e4:	0f c0       	rjmp	.+30     	; 0x804 <vfprintf+0x352>
     7e6:	80 e3       	ldi	r24, 0x30	; 48
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	b3 01       	movw	r22, r6
     7ec:	0e 94 4c 04 	call	0x898	; 0x898 <fputc>
     7f0:	02 ff       	sbrs	r16, 2
     7f2:	1d c0       	rjmp	.+58     	; 0x82e <vfprintf+0x37c>
     7f4:	01 fd       	sbrc	r16, 1
     7f6:	03 c0       	rjmp	.+6      	; 0x7fe <vfprintf+0x34c>
     7f8:	88 e7       	ldi	r24, 0x78	; 120
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e c0       	rjmp	.+28     	; 0x81a <vfprintf+0x368>
     7fe:	88 e5       	ldi	r24, 0x58	; 88
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0b c0       	rjmp	.+22     	; 0x81a <vfprintf+0x368>
     804:	80 2f       	mov	r24, r16
     806:	86 78       	andi	r24, 0x86	; 134
     808:	91 f0       	breq	.+36     	; 0x82e <vfprintf+0x37c>
     80a:	01 ff       	sbrs	r16, 1
     80c:	02 c0       	rjmp	.+4      	; 0x812 <vfprintf+0x360>
     80e:	8b e2       	ldi	r24, 0x2B	; 43
     810:	01 c0       	rjmp	.+2      	; 0x814 <vfprintf+0x362>
     812:	80 e2       	ldi	r24, 0x20	; 32
     814:	f7 fc       	sbrc	r15, 7
     816:	8d e2       	ldi	r24, 0x2D	; 45
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	b3 01       	movw	r22, r6
     81c:	0e 94 4c 04 	call	0x898	; 0x898 <fputc>
     820:	06 c0       	rjmp	.+12     	; 0x82e <vfprintf+0x37c>
     822:	80 e3       	ldi	r24, 0x30	; 48
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	b3 01       	movw	r22, r6
     828:	0e 94 4c 04 	call	0x898	; 0x898 <fputc>
     82c:	9a 94       	dec	r9
     82e:	d9 14       	cp	r13, r9
     830:	c0 f3       	brcs	.-16     	; 0x822 <vfprintf+0x370>
     832:	da 94       	dec	r13
     834:	f1 01       	movw	r30, r2
     836:	ed 0d       	add	r30, r13
     838:	f1 1d       	adc	r31, r1
     83a:	80 81       	ld	r24, Z
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	b3 01       	movw	r22, r6
     840:	0e 94 4c 04 	call	0x898	; 0x898 <fputc>
     844:	dd 20       	and	r13, r13
     846:	a9 f7       	brne	.-22     	; 0x832 <vfprintf+0x380>
     848:	06 c0       	rjmp	.+12     	; 0x856 <vfprintf+0x3a4>
     84a:	80 e2       	ldi	r24, 0x20	; 32
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	b3 01       	movw	r22, r6
     850:	0e 94 4c 04 	call	0x898	; 0x898 <fputc>
     854:	ea 94       	dec	r14
     856:	ee 20       	and	r14, r14
     858:	c1 f7       	brne	.-16     	; 0x84a <vfprintf+0x398>
     85a:	43 ce       	rjmp	.-890    	; 0x4e2 <vfprintf+0x30>
     85c:	f3 01       	movw	r30, r6
     85e:	66 81       	ldd	r22, Z+6	; 0x06
     860:	77 81       	ldd	r23, Z+7	; 0x07
     862:	cb 01       	movw	r24, r22
     864:	2b 96       	adiw	r28, 0x0b	; 11
     866:	e2 e1       	ldi	r30, 0x12	; 18
     868:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <__epilogue_restores__>

0000086c <strnlen_P>:
     86c:	fc 01       	movw	r30, r24
     86e:	05 90       	lpm	r0, Z+
     870:	61 50       	subi	r22, 0x01	; 1
     872:	70 40       	sbci	r23, 0x00	; 0
     874:	01 10       	cpse	r0, r1
     876:	d8 f7       	brcc	.-10     	; 0x86e <strnlen_P+0x2>
     878:	80 95       	com	r24
     87a:	90 95       	com	r25
     87c:	8e 0f       	add	r24, r30
     87e:	9f 1f       	adc	r25, r31
     880:	08 95       	ret

00000882 <strnlen>:
     882:	fc 01       	movw	r30, r24
     884:	61 50       	subi	r22, 0x01	; 1
     886:	70 40       	sbci	r23, 0x00	; 0
     888:	01 90       	ld	r0, Z+
     88a:	01 10       	cpse	r0, r1
     88c:	d8 f7       	brcc	.-10     	; 0x884 <strnlen+0x2>
     88e:	80 95       	com	r24
     890:	90 95       	com	r25
     892:	8e 0f       	add	r24, r30
     894:	9f 1f       	adc	r25, r31
     896:	08 95       	ret

00000898 <fputc>:
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	8c 01       	movw	r16, r24
     8a2:	eb 01       	movw	r28, r22
     8a4:	8b 81       	ldd	r24, Y+3	; 0x03
     8a6:	81 ff       	sbrs	r24, 1
     8a8:	1b c0       	rjmp	.+54     	; 0x8e0 <fputc+0x48>
     8aa:	82 ff       	sbrs	r24, 2
     8ac:	0d c0       	rjmp	.+26     	; 0x8c8 <fputc+0x30>
     8ae:	2e 81       	ldd	r18, Y+6	; 0x06
     8b0:	3f 81       	ldd	r19, Y+7	; 0x07
     8b2:	8c 81       	ldd	r24, Y+4	; 0x04
     8b4:	9d 81       	ldd	r25, Y+5	; 0x05
     8b6:	28 17       	cp	r18, r24
     8b8:	39 07       	cpc	r19, r25
     8ba:	64 f4       	brge	.+24     	; 0x8d4 <fputc+0x3c>
     8bc:	e8 81       	ld	r30, Y
     8be:	f9 81       	ldd	r31, Y+1	; 0x01
     8c0:	01 93       	st	Z+, r16
     8c2:	f9 83       	std	Y+1, r31	; 0x01
     8c4:	e8 83       	st	Y, r30
     8c6:	06 c0       	rjmp	.+12     	; 0x8d4 <fputc+0x3c>
     8c8:	e8 85       	ldd	r30, Y+8	; 0x08
     8ca:	f9 85       	ldd	r31, Y+9	; 0x09
     8cc:	80 2f       	mov	r24, r16
     8ce:	09 95       	icall
     8d0:	89 2b       	or	r24, r25
     8d2:	31 f4       	brne	.+12     	; 0x8e0 <fputc+0x48>
     8d4:	8e 81       	ldd	r24, Y+6	; 0x06
     8d6:	9f 81       	ldd	r25, Y+7	; 0x07
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	9f 83       	std	Y+7, r25	; 0x07
     8dc:	8e 83       	std	Y+6, r24	; 0x06
     8de:	02 c0       	rjmp	.+4      	; 0x8e4 <fputc+0x4c>
     8e0:	0f ef       	ldi	r16, 0xFF	; 255
     8e2:	1f ef       	ldi	r17, 0xFF	; 255
     8e4:	c8 01       	movw	r24, r16
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	08 95       	ret

000008f0 <__ultoa_invert>:
     8f0:	fa 01       	movw	r30, r20
     8f2:	aa 27       	eor	r26, r26
     8f4:	28 30       	cpi	r18, 0x08	; 8
     8f6:	51 f1       	breq	.+84     	; 0x94c <__ultoa_invert+0x5c>
     8f8:	20 31       	cpi	r18, 0x10	; 16
     8fa:	81 f1       	breq	.+96     	; 0x95c <__ultoa_invert+0x6c>
     8fc:	e8 94       	clt
     8fe:	6f 93       	push	r22
     900:	6e 7f       	andi	r22, 0xFE	; 254
     902:	6e 5f       	subi	r22, 0xFE	; 254
     904:	7f 4f       	sbci	r23, 0xFF	; 255
     906:	8f 4f       	sbci	r24, 0xFF	; 255
     908:	9f 4f       	sbci	r25, 0xFF	; 255
     90a:	af 4f       	sbci	r26, 0xFF	; 255
     90c:	b1 e0       	ldi	r27, 0x01	; 1
     90e:	3e d0       	rcall	.+124    	; 0x98c <__ultoa_invert+0x9c>
     910:	b4 e0       	ldi	r27, 0x04	; 4
     912:	3c d0       	rcall	.+120    	; 0x98c <__ultoa_invert+0x9c>
     914:	67 0f       	add	r22, r23
     916:	78 1f       	adc	r23, r24
     918:	89 1f       	adc	r24, r25
     91a:	9a 1f       	adc	r25, r26
     91c:	a1 1d       	adc	r26, r1
     91e:	68 0f       	add	r22, r24
     920:	79 1f       	adc	r23, r25
     922:	8a 1f       	adc	r24, r26
     924:	91 1d       	adc	r25, r1
     926:	a1 1d       	adc	r26, r1
     928:	6a 0f       	add	r22, r26
     92a:	71 1d       	adc	r23, r1
     92c:	81 1d       	adc	r24, r1
     92e:	91 1d       	adc	r25, r1
     930:	a1 1d       	adc	r26, r1
     932:	20 d0       	rcall	.+64     	; 0x974 <__ultoa_invert+0x84>
     934:	09 f4       	brne	.+2      	; 0x938 <__ultoa_invert+0x48>
     936:	68 94       	set
     938:	3f 91       	pop	r19
     93a:	2a e0       	ldi	r18, 0x0A	; 10
     93c:	26 9f       	mul	r18, r22
     93e:	11 24       	eor	r1, r1
     940:	30 19       	sub	r19, r0
     942:	30 5d       	subi	r19, 0xD0	; 208
     944:	31 93       	st	Z+, r19
     946:	de f6       	brtc	.-74     	; 0x8fe <__ultoa_invert+0xe>
     948:	cf 01       	movw	r24, r30
     94a:	08 95       	ret
     94c:	46 2f       	mov	r20, r22
     94e:	47 70       	andi	r20, 0x07	; 7
     950:	40 5d       	subi	r20, 0xD0	; 208
     952:	41 93       	st	Z+, r20
     954:	b3 e0       	ldi	r27, 0x03	; 3
     956:	0f d0       	rcall	.+30     	; 0x976 <__ultoa_invert+0x86>
     958:	c9 f7       	brne	.-14     	; 0x94c <__ultoa_invert+0x5c>
     95a:	f6 cf       	rjmp	.-20     	; 0x948 <__ultoa_invert+0x58>
     95c:	46 2f       	mov	r20, r22
     95e:	4f 70       	andi	r20, 0x0F	; 15
     960:	40 5d       	subi	r20, 0xD0	; 208
     962:	4a 33       	cpi	r20, 0x3A	; 58
     964:	18 f0       	brcs	.+6      	; 0x96c <__ultoa_invert+0x7c>
     966:	49 5d       	subi	r20, 0xD9	; 217
     968:	31 fd       	sbrc	r19, 1
     96a:	40 52       	subi	r20, 0x20	; 32
     96c:	41 93       	st	Z+, r20
     96e:	02 d0       	rcall	.+4      	; 0x974 <__ultoa_invert+0x84>
     970:	a9 f7       	brne	.-22     	; 0x95c <__ultoa_invert+0x6c>
     972:	ea cf       	rjmp	.-44     	; 0x948 <__ultoa_invert+0x58>
     974:	b4 e0       	ldi	r27, 0x04	; 4
     976:	a6 95       	lsr	r26
     978:	97 95       	ror	r25
     97a:	87 95       	ror	r24
     97c:	77 95       	ror	r23
     97e:	67 95       	ror	r22
     980:	ba 95       	dec	r27
     982:	c9 f7       	brne	.-14     	; 0x976 <__ultoa_invert+0x86>
     984:	00 97       	sbiw	r24, 0x00	; 0
     986:	61 05       	cpc	r22, r1
     988:	71 05       	cpc	r23, r1
     98a:	08 95       	ret
     98c:	9b 01       	movw	r18, r22
     98e:	ac 01       	movw	r20, r24
     990:	0a 2e       	mov	r0, r26
     992:	06 94       	lsr	r0
     994:	57 95       	ror	r21
     996:	47 95       	ror	r20
     998:	37 95       	ror	r19
     99a:	27 95       	ror	r18
     99c:	ba 95       	dec	r27
     99e:	c9 f7       	brne	.-14     	; 0x992 <__ultoa_invert+0xa2>
     9a0:	62 0f       	add	r22, r18
     9a2:	73 1f       	adc	r23, r19
     9a4:	84 1f       	adc	r24, r20
     9a6:	95 1f       	adc	r25, r21
     9a8:	a0 1d       	adc	r26, r0
     9aa:	08 95       	ret

000009ac <delay_ms>:
uchar buf[80];

/**
 * Some basic delay function
 */
void delay_ms(unsigned short ms) {
     9ac:	df 93       	push	r29
     9ae:	cf 93       	push	r28
     9b0:	00 d0       	rcall	.+0      	; 0x9b2 <delay_ms+0x6>
     9b2:	00 d0       	rcall	.+0      	; 0x9b4 <delay_ms+0x8>
     9b4:	00 d0       	rcall	.+0      	; 0x9b6 <delay_ms+0xa>
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
     9ba:	9e 83       	std	Y+6, r25	; 0x06
     9bc:	8d 83       	std	Y+5, r24	; 0x05
	unsigned short outer1, outer2;
	outer1 = 200 * 12;
     9be:	80 e6       	ldi	r24, 0x60	; 96
     9c0:	99 e0       	ldi	r25, 0x09	; 9
     9c2:	9c 83       	std	Y+4, r25	; 0x04
     9c4:	8b 83       	std	Y+3, r24	; 0x03
     9c6:	1c c0       	rjmp	.+56     	; 0xa00 <delay_ms+0x54>

	while (outer1) {
		outer2 = 100;
     9c8:	84 e6       	ldi	r24, 0x64	; 100
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	9a 83       	std	Y+2, r25	; 0x02
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	0e c0       	rjmp	.+28     	; 0x9ee <delay_ms+0x42>
		while (outer2) {
			while (ms)
				ms--;
     9d2:	8d 81       	ldd	r24, Y+5	; 0x05
     9d4:	9e 81       	ldd	r25, Y+6	; 0x06
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	9e 83       	std	Y+6, r25	; 0x06
     9da:	8d 83       	std	Y+5, r24	; 0x05
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
			while (ms)
     9dc:	8d 81       	ldd	r24, Y+5	; 0x05
     9de:	9e 81       	ldd	r25, Y+6	; 0x06
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	b9 f7       	brne	.-18     	; 0x9d2 <delay_ms+0x26>
				ms--;
			outer2--;
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	9a 81       	ldd	r25, Y+2	; 0x02
     9e8:	01 97       	sbiw	r24, 0x01	; 1
     9ea:	9a 83       	std	Y+2, r25	; 0x02
     9ec:	89 83       	std	Y+1, r24	; 0x01
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
     9ee:	89 81       	ldd	r24, Y+1	; 0x01
     9f0:	9a 81       	ldd	r25, Y+2	; 0x02
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	99 f7       	brne	.-26     	; 0x9dc <delay_ms+0x30>
			while (ms)
				ms--;
			outer2--;
		}
		outer1--;
     9f6:	8b 81       	ldd	r24, Y+3	; 0x03
     9f8:	9c 81       	ldd	r25, Y+4	; 0x04
     9fa:	01 97       	sbiw	r24, 0x01	; 1
     9fc:	9c 83       	std	Y+4, r25	; 0x04
     9fe:	8b 83       	std	Y+3, r24	; 0x03
 */
void delay_ms(unsigned short ms) {
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
     a00:	8b 81       	ldd	r24, Y+3	; 0x03
     a02:	9c 81       	ldd	r25, Y+4	; 0x04
     a04:	00 97       	sbiw	r24, 0x00	; 0
     a06:	01 f7       	brne	.-64     	; 0x9c8 <delay_ms+0x1c>
				ms--;
			outer2--;
		}
		outer1--;
	}
}
     a08:	26 96       	adiw	r28, 0x06	; 6
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	de bf       	out	0x3e, r29	; 62
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	cd bf       	out	0x3d, r28	; 61
     a14:	cf 91       	pop	r28
     a16:	df 91       	pop	r29
     a18:	08 95       	ret

00000a1a <gpib_init>:
 * Init GPIB pins and variables.
 * \brief All signal lines not related to the controller part
 * 		are initialized with useful values.
 *		(The controller part initialization is done on gpib_controller_assert())
 */
void gpib_init(void) {
     a1a:	df 93       	push	r29
     a1c:	cf 93       	push	r28
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
	// data lines - complete port A as input
	DDRA = 0x00;
     a22:	ea e3       	ldi	r30, 0x3A	; 58
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	10 82       	st	Z, r1

	// handshake lines - on port D , everything as input
	DDRD &= ~_BV(G_DAV); // DAV 
     a28:	a1 e3       	ldi	r26, 0x31	; 49
     a2a:	b0 e0       	ldi	r27, 0x00	; 0
     a2c:	e1 e3       	ldi	r30, 0x31	; 49
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	80 81       	ld	r24, Z
     a32:	8b 7f       	andi	r24, 0xFB	; 251
     a34:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_EOI); // EOI 
     a36:	a1 e3       	ldi	r26, 0x31	; 49
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	e1 e3       	ldi	r30, 0x31	; 49
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	80 81       	ld	r24, Z
     a40:	8f 7e       	andi	r24, 0xEF	; 239
     a42:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_SRQ); // SRQ 
     a44:	a1 e3       	ldi	r26, 0x31	; 49
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	e1 e3       	ldi	r30, 0x31	; 49
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	80 81       	ld	r24, Z
     a4e:	8f 7b       	andi	r24, 0xBF	; 191
     a50:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_ATN); // ATN  
     a52:	a1 e3       	ldi	r26, 0x31	; 49
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	e1 e3       	ldi	r30, 0x31	; 49
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	80 81       	ld	r24, Z
     a5c:	8f 77       	andi	r24, 0x7F	; 127
     a5e:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_REN); // REN  
     a60:	a7 e3       	ldi	r26, 0x37	; 55
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e7 e3       	ldi	r30, 0x37	; 55
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	8d 7f       	andi	r24, 0xFD	; 253
     a6c:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_IFC); // IFC  
     a6e:	a7 e3       	ldi	r26, 0x37	; 55
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	e7 e3       	ldi	r30, 0x37	; 55
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	8e 7f       	andi	r24, 0xFE	; 254
     a7a:	8c 93       	st	X, r24

	// init handshake lines
	assign_bit(DDRD, PORTD, G_NRFD);
     a7c:	a2 e3       	ldi	r26, 0x32	; 50
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	e2 e3       	ldi	r30, 0x32	; 50
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	87 7f       	andi	r24, 0xF7	; 247
     a88:	8c 93       	st	X, r24
     a8a:	a1 e3       	ldi	r26, 0x31	; 49
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e1 e3       	ldi	r30, 0x31	; 49
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	80 81       	ld	r24, Z
     a94:	88 60       	ori	r24, 0x08	; 8
     a96:	8c 93       	st	X, r24
     a98:	a2 e3       	ldi	r26, 0x32	; 50
     a9a:	b0 e0       	ldi	r27, 0x00	; 0
     a9c:	e2 e3       	ldi	r30, 0x32	; 50
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	80 81       	ld	r24, Z
     aa2:	87 7f       	andi	r24, 0xF7	; 247
     aa4:	8c 93       	st	X, r24
	// not ready for data now
	release_bit(DDRD, PORTD, G_NDAC);
     aa6:	a1 e3       	ldi	r26, 0x31	; 49
     aa8:	b0 e0       	ldi	r27, 0x00	; 0
     aaa:	e1 e3       	ldi	r30, 0x31	; 49
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	80 81       	ld	r24, Z
     ab0:	8f 7d       	andi	r24, 0xDF	; 223
     ab2:	8c 93       	st	X, r24
     ab4:	a2 e3       	ldi	r26, 0x32	; 50
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	e2 e3       	ldi	r30, 0x32	; 50
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	80 62       	ori	r24, 0x20	; 32
     ac0:	8c 93       	st	X, r24
	// initially: ok so far
}
     ac2:	cf 91       	pop	r28
     ac4:	df 91       	pop	r29
     ac6:	08 95       	ret

00000ac8 <gpib_send_address>:
 * Sends address bytes to address a partner. Caller of this function must decide
 * if talker or listener address is used.
 * \param primary primary address of device
 * \param secondary secondary address of device
 */
void gpib_send_address(uchar primary, uchar secondary) {
     ac8:	df 93       	push	r29
     aca:	cf 93       	push	r28
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
     ad0:	2c 97       	sbiw	r28, 0x0c	; 12
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	de bf       	out	0x3e, r29	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	cd bf       	out	0x3d, r28	; 61
     adc:	8b 87       	std	Y+11, r24	; 0x0b
     ade:	6c 87       	std	Y+12, r22	; 0x0c
	uchar controlString[10];
	controlString[0] = primary;
     ae0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ae2:	89 83       	std	Y+1, r24	; 0x01
	//uart_puts("before talker address p write\r\n");
	gpib_cmd(controlString, 1);
     ae4:	ce 01       	movw	r24, r28
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	61 e0       	ldi	r22, 0x01	; 1
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	0e 94 9e 07 	call	0xf3c	; 0xf3c <gpib_cmd>
	// handle secondary address if required
	if (secondary != ADDRESS_NOT_SET) {
     af0:	8c 85       	ldd	r24, Y+12	; 0x0c
     af2:	8f 3f       	cpi	r24, 0xFF	; 255
     af4:	41 f0       	breq	.+16     	; 0xb06 <gpib_send_address+0x3e>
		controlString[0] = secondary;
     af6:	8c 85       	ldd	r24, Y+12	; 0x0c
     af8:	89 83       	std	Y+1, r24	; 0x01
		//uart_puts("before talker address s write\r\n");
		gpib_cmd(controlString, 1);
     afa:	ce 01       	movw	r24, r28
     afc:	01 96       	adiw	r24, 0x01	; 1
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	0e 94 9e 07 	call	0xf3c	; 0xf3c <gpib_cmd>
	}
	//uart_puts("after talker address write\r\n");
}
     b06:	2c 96       	adiw	r28, 0x0c	; 12
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	de bf       	out	0x3e, r29	; 62
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	cd bf       	out	0x3d, r28	; 61
     b12:	cf 91       	pop	r28
     b14:	df 91       	pop	r29
     b16:	08 95       	ret

00000b18 <gpib_prepare_write>:

/**
 * Prepare partner for writing
 */
void gpib_prepare_write() {
     b18:	df 93       	push	r29
     b1a:	cf 93       	push	r28
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	2b 97       	sbiw	r28, 0x0b	; 11
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	f8 94       	cli
     b26:	de bf       	out	0x3e, r29	; 62
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// send UNT and UNL commands (unlisten and untalk)
	gpib_untalkUnlisten();
     b2c:	0e 94 f6 05 	call	0xbec	; 0xbec <gpib_untalkUnlisten>

	// set device to listener mode
	uchar primary = address2ListenerAddress(gpib_get_partner_pad());
     b30:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <gpib_get_partner_pad>
     b34:	80 5e       	subi	r24, 0xE0	; 224
     b36:	8a 83       	std	Y+2, r24	; 0x02
	uchar secondary =
			(gpib_get_partner_sad() == ADDRESS_NOT_SET) ?
					ADDRESS_NOT_SET :
					secondaryAdressToAdressByte(gpib_get_partner_sad());
     b38:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <gpib_get_partner_sad>
     b3c:	8f 3f       	cpi	r24, 0xFF	; 255
     b3e:	31 f0       	breq	.+12     	; 0xb4c <gpib_prepare_write+0x34>
     b40:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <gpib_get_partner_sad>
     b44:	98 2f       	mov	r25, r24
     b46:	90 66       	ori	r25, 0x60	; 96
     b48:	9b 87       	std	Y+11, r25	; 0x0b
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <gpib_prepare_write+0x38>
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	8b 87       	std	Y+11, r24	; 0x0b
     b50:	9b 85       	ldd	r25, Y+11	; 0x0b
     b52:	99 83       	std	Y+1, r25	; 0x01
	gpib_send_address(primary, secondary);
     b54:	8a 81       	ldd	r24, Y+2	; 0x02
     b56:	69 81       	ldd	r22, Y+1	; 0x01
     b58:	0e 94 64 05 	call	0xac8	; 0xac8 <gpib_send_address>

	// set myself (controller) to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_address());
     b5c:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <gpib_get_address>
     b60:	80 5c       	subi	r24, 0xC0	; 192
     b62:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
     b64:	ce 01       	movw	r24, r28
     b66:	03 96       	adiw	r24, 0x03	; 3
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <gpib_cmd>
}
     b70:	2b 96       	adiw	r28, 0x0b	; 11
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	cd bf       	out	0x3d, r28	; 61
     b7c:	cf 91       	pop	r28
     b7e:	df 91       	pop	r29
     b80:	08 95       	ret

00000b82 <gpib_prepare_read>:

/**
 * Prepare partner for writing
 */
void gpib_prepare_read() {
     b82:	df 93       	push	r29
     b84:	cf 93       	push	r28
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	2b 97       	sbiw	r28, 0x0b	; 11
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// untalk/unlisten all partners
	gpib_untalkUnlisten();
     b96:	0e 94 f6 05 	call	0xbec	; 0xbec <gpib_untalkUnlisten>

	// set myself (controller) to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_address());
     b9a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <gpib_get_address>
     b9e:	80 5e       	subi	r24, 0xE0	; 224
     ba0:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
     ba2:	ce 01       	movw	r24, r28
     ba4:	03 96       	adiw	r24, 0x03	; 3
     ba6:	61 e0       	ldi	r22, 0x01	; 1
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	0e 94 9e 07 	call	0xf3c	; 0xf3c <gpib_cmd>

	// set device to talker mode
	uchar primary = address2TalkerAddress(gpib_get_partner_pad());
     bae:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <gpib_get_partner_pad>
     bb2:	80 5c       	subi	r24, 0xC0	; 192
     bb4:	8a 83       	std	Y+2, r24	; 0x02
	uchar secondary =
			(gpib_get_partner_sad() == ADDRESS_NOT_SET) ?
					ADDRESS_NOT_SET :
					secondaryAdressToAdressByte(gpib_get_partner_sad());
     bb6:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <gpib_get_partner_sad>
     bba:	8f 3f       	cpi	r24, 0xFF	; 255
     bbc:	31 f0       	breq	.+12     	; 0xbca <gpib_prepare_read+0x48>
     bbe:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <gpib_get_partner_sad>
     bc2:	98 2f       	mov	r25, r24
     bc4:	90 66       	ori	r25, 0x60	; 96
     bc6:	9b 87       	std	Y+11, r25	; 0x0b
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <gpib_prepare_read+0x4c>
     bca:	8f ef       	ldi	r24, 0xFF	; 255
     bcc:	8b 87       	std	Y+11, r24	; 0x0b
     bce:	9b 85       	ldd	r25, Y+11	; 0x0b
     bd0:	99 83       	std	Y+1, r25	; 0x01
	gpib_send_address(primary, secondary);
     bd2:	8a 81       	ldd	r24, Y+2	; 0x02
     bd4:	69 81       	ldd	r22, Y+1	; 0x01
     bd6:	0e 94 64 05 	call	0xac8	; 0xac8 <gpib_send_address>
}
     bda:	2b 96       	adiw	r28, 0x0b	; 11
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <gpib_untalkUnlisten>:

/**
 * Untalk / unlisten all partners on bus.
 */
void gpib_untalkUnlisten() {
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	28 97       	sbiw	r28, 0x08	; 8
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
     c00:	8f e5       	ldi	r24, 0x5F	; 95
     c02:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     c04:	ce 01       	movw	r24, r28
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <gpib_cmd>
	controlString[0] = G_CMD_UNL;
     c10:	8f e3       	ldi	r24, 0x3F	; 63
     c12:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     c14:	ce 01       	movw	r24, r28
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	61 e0       	ldi	r22, 0x01	; 1
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <gpib_cmd>
}
     c20:	28 96       	adiw	r28, 0x08	; 8
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
     c2c:	cf 91       	pop	r28
     c2e:	df 91       	pop	r29
     c30:	08 95       	ret

00000c32 <gpib_receive>:
 *  \returns		On any error, 0xff is returned. in this case, the value of parameter *_byte is undefined.
 * 		Otherwise the value of the EOI signal line during read is returned. If EOI was assigned, a 0x01 is
 * 		returned. If EOI was not assigned, a 0x00 is returned. Assignment of EOI means that the talker
 * 		is sending the last character for this transmission.
 */
uchar gpib_receive(uchar* _byte) {
     c32:	df 93       	push	r29
     c34:	cf 93       	push	r28
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	27 97       	sbiw	r28, 0x07	; 7
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	9e 83       	std	Y+6, r25	; 0x06
     c48:	8d 83       	std	Y+5, r24	; 0x05
	int timeout;
	uchar byte, eoi;

	//uart_puts("\n\rgpib_receive()\n\r");

	if (controller.talks == 1) {
     c4a:	80 91 7f 04 	lds	r24, 0x047F
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	59 f4       	brne	.+22     	; 0xc68 <gpib_receive+0x36>
		uart_puts("\n\rError: You shall not talk to yourself.\n\r");
     c52:	80 e6       	ldi	r24, 0x60	; 96
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
		*_byte = 0xff;
     c5a:	ed 81       	ldd	r30, Y+5	; 0x05
     c5c:	fe 81       	ldd	r31, Y+6	; 0x06
     c5e:	8f ef       	ldi	r24, 0xFF	; 255
     c60:	80 83       	st	Z, r24
		return 0xff;
     c62:	8f ef       	ldi	r24, 0xFF	; 255
     c64:	8f 83       	std	Y+7, r24	; 0x07
     c66:	c6 c0       	rjmp	.+396    	; 0xdf4 <gpib_receive+0x1c2>
	}

	// handshake: set nrfd, means i am ready to receive some data
	release_bit(DDRD, PORTD, G_NRFD);
     c68:	a1 e3       	ldi	r26, 0x31	; 49
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e1 e3       	ldi	r30, 0x31	; 49
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	87 7f       	andi	r24, 0xF7	; 247
     c74:	8c 93       	st	X, r24
     c76:	a2 e3       	ldi	r26, 0x32	; 50
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e2 e3       	ldi	r30, 0x32	; 50
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	88 60       	ori	r24, 0x08	; 8
     c82:	8c 93       	st	X, r24
	assign_bit(DDRD, PORTD, G_NDAC);
     c84:	a2 e3       	ldi	r26, 0x32	; 50
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e2 e3       	ldi	r30, 0x32	; 50
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	8f 7d       	andi	r24, 0xDF	; 223
     c90:	8c 93       	st	X, r24
     c92:	a1 e3       	ldi	r26, 0x31	; 49
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e1 e3       	ldi	r30, 0x31	; 49
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	80 62       	ori	r24, 0x20	; 32
     c9e:	8c 93       	st	X, r24
     ca0:	a2 e3       	ldi	r26, 0x32	; 50
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e2 e3       	ldi	r30, 0x32	; 50
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	8f 7d       	andi	r24, 0xDF	; 223
     cac:	8c 93       	st	X, r24

	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     cae:	80 91 e9 05 	lds	r24, 0x05E9
     cb2:	88 2f       	mov	r24, r24
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	05 96       	adiw	r24, 0x05	; 5
     cb8:	9c 83       	std	Y+4, r25	; 0x04
     cba:	8b 83       	std	Y+3, r24	; 0x03
     cbc:	10 c0       	rjmp	.+32     	; 0xcde <gpib_receive+0xac>
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     cbe:	80 91 e9 05 	lds	r24, 0x05E9
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	9c 81       	ldd	r25, Y+4	; 0x04
     cca:	28 17       	cp	r18, r24
     ccc:	39 07       	cpc	r19, r25
     cce:	39 f4       	brne	.+14     	; 0xcde <gpib_receive+0xac>
			uart_puts("\n\rError: DAV timeout (1)\n\r");
     cd0:	8b e8       	ldi	r24, 0x8B	; 139
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
			return 0xff;
     cd8:	8f ef       	ldi	r24, 0xFF	; 255
     cda:	8f 83       	std	Y+7, r24	; 0x07
     cdc:	8b c0       	rjmp	.+278    	; 0xdf4 <gpib_receive+0x1c2>
	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
     cde:	e0 e3       	ldi	r30, 0x30	; 48
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	84 70       	andi	r24, 0x04	; 4
     cea:	90 70       	andi	r25, 0x00	; 0
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	49 f0       	breq	.+18     	; 0xd02 <gpib_receive+0xd0>
     cf0:	80 91 e9 05 	lds	r24, 0x05E9
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	9c 81       	ldd	r25, Y+4	; 0x04
     cfc:	82 17       	cp	r24, r18
     cfe:	93 07       	cpc	r25, r19
     d00:	f4 f6       	brge	.-68     	; 0xcbe <gpib_receive+0x8c>
#else
	loop_until_bit_is_clear(PIND,G_DAV);
#endif

	// handshake: clear NRFD, means i am busy now to read data
	assign_bit(DDRD, PORTD, G_NRFD);
     d02:	a2 e3       	ldi	r26, 0x32	; 50
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e2 e3       	ldi	r30, 0x32	; 50
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	87 7f       	andi	r24, 0xF7	; 247
     d0e:	8c 93       	st	X, r24
     d10:	a1 e3       	ldi	r26, 0x31	; 49
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e1 e3       	ldi	r30, 0x31	; 49
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	88 60       	ori	r24, 0x08	; 8
     d1c:	8c 93       	st	X, r24
     d1e:	a2 e3       	ldi	r26, 0x32	; 50
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e2 e3       	ldi	r30, 0x32	; 50
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	87 7f       	andi	r24, 0xF7	; 247
     d2a:	8c 93       	st	X, r24
	// read data
	byte = PINA ^ 0xff;
     d2c:	e9 e3       	ldi	r30, 0x39	; 57
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 95       	com	r24
     d34:	8a 83       	std	Y+2, r24	; 0x02

	// handshake: set ndac, means i have completed/accepted the read
	release_bit(DDRD, PORTD, G_NDAC);
     d36:	a1 e3       	ldi	r26, 0x31	; 49
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e1 e3       	ldi	r30, 0x31	; 49
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8f 7d       	andi	r24, 0xDF	; 223
     d42:	8c 93       	st	X, r24
     d44:	a2 e3       	ldi	r26, 0x32	; 50
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e2 e3       	ldi	r30, 0x32	; 50
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	80 62       	ori	r24, 0x20	; 32
     d50:	8c 93       	st	X, r24

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     d52:	80 91 e9 05 	lds	r24, 0x05E9
     d56:	88 2f       	mov	r24, r24
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	05 96       	adiw	r24, 0x05	; 5
     d5c:	9c 83       	std	Y+4, r25	; 0x04
     d5e:	8b 83       	std	Y+3, r24	; 0x03
     d60:	10 c0       	rjmp	.+32     	; 0xd82 <gpib_receive+0x150>
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     d62:	80 91 e9 05 	lds	r24, 0x05E9
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	9c 81       	ldd	r25, Y+4	; 0x04
     d6e:	28 17       	cp	r18, r24
     d70:	39 07       	cpc	r19, r25
     d72:	39 f4       	brne	.+14     	; 0xd82 <gpib_receive+0x150>
			uart_puts("\n\rError: DAV timeout (2)\n\r");
     d74:	86 ea       	ldi	r24, 0xA6	; 166
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
			return 0xff;
     d7c:	8f ef       	ldi	r24, 0xFF	; 255
     d7e:	8f 83       	std	Y+7, r24	; 0x07
     d80:	39 c0       	rjmp	.+114    	; 0xdf4 <gpib_receive+0x1c2>
	release_bit(DDRD, PORTD, G_NDAC);

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
     d82:	e0 e3       	ldi	r30, 0x30	; 48
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	88 2f       	mov	r24, r24
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	84 70       	andi	r24, 0x04	; 4
     d8e:	90 70       	andi	r25, 0x00	; 0
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	49 f4       	brne	.+18     	; 0xda6 <gpib_receive+0x174>
     d94:	80 91 e9 05 	lds	r24, 0x05E9
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	9c 81       	ldd	r25, Y+4	; 0x04
     da0:	82 17       	cp	r24, r18
     da2:	93 07       	cpc	r25, r19
     da4:	f4 f6       	brge	.-68     	; 0xd62 <gpib_receive+0x130>
	}
#else
	loop_until_bit_is_set(PIND,G_DAV);
#endif
	// handshake: clear ndac (this is a prerequisite for receive next byte)
	assign_bit(DDRD, PORTD, G_NDAC);
     da6:	a2 e3       	ldi	r26, 0x32	; 50
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e2 e3       	ldi	r30, 0x32	; 50
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8f 7d       	andi	r24, 0xDF	; 223
     db2:	8c 93       	st	X, r24
     db4:	a1 e3       	ldi	r26, 0x31	; 49
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e1 e3       	ldi	r30, 0x31	; 49
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	80 62       	ori	r24, 0x20	; 32
     dc0:	8c 93       	st	X, r24
     dc2:	a2 e3       	ldi	r26, 0x32	; 50
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e2 e3       	ldi	r30, 0x32	; 50
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	8f 7d       	andi	r24, 0xDF	; 223
     dce:	8c 93       	st	X, r24

	// check if last byte of transmission
	eoi = bit_is_clear(PIND, G_EOI);
     dd0:	e0 e3       	ldi	r30, 0x30	; 48
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	88 2f       	mov	r24, r24
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	80 71       	andi	r24, 0x10	; 16
     ddc:	90 70       	andi	r25, 0x00	; 0
     dde:	19 82       	std	Y+1, r1	; 0x01
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	11 f4       	brne	.+4      	; 0xde8 <gpib_receive+0x1b6>
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	89 83       	std	Y+1, r24	; 0x01

	*_byte = byte;
     de8:	ed 81       	ldd	r30, Y+5	; 0x05
     dea:	fe 81       	ldd	r31, Y+6	; 0x06
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	80 83       	st	Z, r24

	return eoi;
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	8f 83       	std	Y+7, r24	; 0x07
     df4:	8f 81       	ldd	r24, Y+7	; 0x07
}
     df6:	27 96       	adiw	r28, 0x07	; 7
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <gpib_controller_assign>:
 * You have to change the initialization of the partner array according to your environment.
 * The partners-array is used by gpib_serial_poll() for looping over all existing devices.
 * 
 * \param address the address to be used by the controller. Usually 0x00.
 */
void gpib_controller_assign(uchar address) {
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	0f 92       	push	r0
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	89 83       	std	Y+1, r24	; 0x01
	controller.myaddress = address;
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	80 93 7c 04 	sts	0x047C, r24
	controller.talks = 0;
     e1a:	10 92 7f 04 	sts	0x047F, r1
	controller.partner.primary = ADDRESS_NOT_SET; // init default active partner
     e1e:	8f ef       	ldi	r24, 0xFF	; 255
     e20:	80 93 7d 04 	sts	0x047D, r24
	controller.partner.secondary = ADDRESS_NOT_SET;
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	80 93 7e 04 	sts	0x047E, r24
	controller.flavour = FLAVOUR_NONE;
     e2a:	10 92 80 04 	sts	0x0480, r1
	/** clear list of partners */
	gpib_clear_partners();
     e2e:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <gpib_clear_partners>
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     e32:	a8 e3       	ldi	r26, 0x38	; 56
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e8 e3       	ldi	r30, 0x38	; 56
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	8e 7f       	andi	r24, 0xFE	; 254
     e3e:	8c 93       	st	X, r24
     e40:	a7 e3       	ldi	r26, 0x37	; 55
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e7 e3       	ldi	r30, 0x37	; 55
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	81 60       	ori	r24, 0x01	; 1
     e4c:	8c 93       	st	X, r24
     e4e:	a8 e3       	ldi	r26, 0x38	; 56
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e8 e3       	ldi	r30, 0x38	; 56
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	8e 7f       	andi	r24, 0xFE	; 254
     e5a:	8c 93       	st	X, r24
	delay_ms(200);
     e5c:	88 ec       	ldi	r24, 0xC8	; 200
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 d6 04 	call	0x9ac	; 0x9ac <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     e64:	a7 e3       	ldi	r26, 0x37	; 55
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e7 e3       	ldi	r30, 0x37	; 55
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	8e 7f       	andi	r24, 0xFE	; 254
     e70:	8c 93       	st	X, r24
     e72:	a8 e3       	ldi	r26, 0x38	; 56
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e8 e3       	ldi	r30, 0x38	; 56
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	81 60       	ori	r24, 0x01	; 1
     e7e:	8c 93       	st	X, r24
	// set up all devices for remote control
	assign_bit(DDRB, PORTB, G_REN);
     e80:	a8 e3       	ldi	r26, 0x38	; 56
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e8 e3       	ldi	r30, 0x38	; 56
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	8d 7f       	andi	r24, 0xFD	; 253
     e8c:	8c 93       	st	X, r24
     e8e:	a7 e3       	ldi	r26, 0x37	; 55
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e7 e3       	ldi	r30, 0x37	; 55
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	82 60       	ori	r24, 0x02	; 2
     e9a:	8c 93       	st	X, r24
     e9c:	a8 e3       	ldi	r26, 0x38	; 56
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e8 e3       	ldi	r30, 0x38	; 56
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8d 7f       	andi	r24, 0xFD	; 253
     ea8:	8c 93       	st	X, r24

	// DCL - device clear for all devices on bus
	cmd_buf[0] = G_CMD_DCL;
     eaa:	84 e1       	ldi	r24, 0x14	; 20
     eac:	80 93 34 05 	sts	0x0534, r24
	gpib_cmd(cmd_buf, 1);
     eb0:	84 e3       	ldi	r24, 0x34	; 52
     eb2:	95 e0       	ldi	r25, 0x05	; 5
     eb4:	61 e0       	ldi	r22, 0x01	; 1
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <gpib_cmd>
}
     ebc:	0f 90       	pop	r0
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <gpib_controller_release>:

/**
 * Release bus 
 */
void gpib_controller_release(void) {
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     ecc:	a8 e3       	ldi	r26, 0x38	; 56
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e8 e3       	ldi	r30, 0x38	; 56
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	8e 7f       	andi	r24, 0xFE	; 254
     ed8:	8c 93       	st	X, r24
     eda:	a7 e3       	ldi	r26, 0x37	; 55
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e7 e3       	ldi	r30, 0x37	; 55
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	81 60       	ori	r24, 0x01	; 1
     ee6:	8c 93       	st	X, r24
     ee8:	a8 e3       	ldi	r26, 0x38	; 56
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e8 e3       	ldi	r30, 0x38	; 56
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	8e 7f       	andi	r24, 0xFE	; 254
     ef4:	8c 93       	st	X, r24
	delay_ms(200);
     ef6:	88 ec       	ldi	r24, 0xC8	; 200
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 d6 04 	call	0x9ac	; 0x9ac <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     efe:	a7 e3       	ldi	r26, 0x37	; 55
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e7 e3       	ldi	r30, 0x37	; 55
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8e 7f       	andi	r24, 0xFE	; 254
     f0a:	8c 93       	st	X, r24
     f0c:	a8 e3       	ldi	r26, 0x38	; 56
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e8 e3       	ldi	r30, 0x38	; 56
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	81 60       	ori	r24, 0x01	; 1
     f18:	8c 93       	st	X, r24
	// set up all devices for local control
	release_bit(DDRB, PORTB, G_REN);
     f1a:	a7 e3       	ldi	r26, 0x37	; 55
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e7 e3       	ldi	r30, 0x37	; 55
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	8d 7f       	andi	r24, 0xFD	; 253
     f26:	8c 93       	st	X, r24
     f28:	a8 e3       	ldi	r26, 0x38	; 56
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e8 e3       	ldi	r30, 0x38	; 56
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	82 60       	ori	r24, 0x02	; 2
     f34:	8c 93       	st	X, r24
}
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <gpib_cmd>:
 * \param bytes byte array containing bytes to be send
 * \param length length of valid bytes in byte array or zero.
 * for binary data, lenght must be defined. For strings, length can be set to zero. Then the length of
 * the string is calculated internally.
 */
uchar gpib_cmd(uchar *bytes, int length) {
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	2b 97       	sbiw	r28, 0x0b	; 11
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	9f 83       	std	Y+7, r25	; 0x07
     f52:	8e 83       	std	Y+6, r24	; 0x06
     f54:	79 87       	std	Y+9, r23	; 0x09
     f56:	68 87       	std	Y+8, r22	; 0x08
	uchar c;
	int i;
	// set attention arg true for commands
	uchar attention = 1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	8a 83       	std	Y+2, r24	; 0x02

	gpib_write_prologue(attention);
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	0e 94 fa 07 	call	0xff4	; 0xff4 <gpib_write_prologue>

	if (length == 0) {
     f62:	88 85       	ldd	r24, Y+8	; 0x08
     f64:	99 85       	ldd	r25, Y+9	; 0x09
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	31 f4       	brne	.+12     	; 0xf76 <gpib_cmd+0x3a>
		// length==0 means this is a common C string, null-terminated.
		// then, length can be easily calculated
		length = strlen((char*) bytes);
     f6a:	8e 81       	ldd	r24, Y+6	; 0x06
     f6c:	9f 81       	ldd	r25, Y+7	; 0x07
     f6e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <strlen>
     f72:	99 87       	std	Y+9, r25	; 0x09
     f74:	88 87       	std	Y+8, r24	; 0x08
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif

	for (i = 0; i < length; i++) {
     f76:	1c 82       	std	Y+4, r1	; 0x04
     f78:	1b 82       	std	Y+3, r1	; 0x03
     f7a:	28 c0       	rjmp	.+80     	; 0xfcc <gpib_cmd+0x90>
		// put data on bus
		c = bytes[i];
     f7c:	2b 81       	ldd	r18, Y+3	; 0x03
     f7e:	3c 81       	ldd	r19, Y+4	; 0x04
     f80:	8e 81       	ldd	r24, Y+6	; 0x06
     f82:	9f 81       	ldd	r25, Y+7	; 0x07
     f84:	fc 01       	movw	r30, r24
     f86:	e2 0f       	add	r30, r18
     f88:	f3 1f       	adc	r31, r19
     f8a:	80 81       	ld	r24, Z
     f8c:	8d 83       	std	Y+5, r24	; 0x05
		//sprintf( buf, "char: %c\n\r", c );
		//uart_puts(buf);

		uchar isLastByte = (i == length - 1) && !attention;
     f8e:	88 85       	ldd	r24, Y+8	; 0x08
     f90:	99 85       	ldd	r25, Y+9	; 0x09
     f92:	9c 01       	movw	r18, r24
     f94:	21 50       	subi	r18, 0x01	; 1
     f96:	30 40       	sbci	r19, 0x00	; 0
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	9c 81       	ldd	r25, Y+4	; 0x04
     f9c:	28 17       	cp	r18, r24
     f9e:	39 07       	cpc	r19, r25
     fa0:	41 f4       	brne	.+16     	; 0xfb2 <gpib_cmd+0x76>
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	88 23       	and	r24, r24
     fa6:	29 f4       	brne	.+10     	; 0xfb2 <gpib_cmd+0x76>
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	9b 87       	std	Y+11, r25	; 0x0b
     fae:	8a 87       	std	Y+10, r24	; 0x0a
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <gpib_cmd+0x7a>
     fb2:	1b 86       	std	Y+11, r1	; 0x0b
     fb4:	1a 86       	std	Y+10, r1	; 0x0a
     fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb8:	99 83       	std	Y+1, r25	; 0x01
		gpib_write_byte(c, isLastByte);
     fba:	8d 81       	ldd	r24, Y+5	; 0x05
     fbc:	69 81       	ldd	r22, Y+1	; 0x01
     fbe:	0e 94 b3 08 	call	0x1166	; 0x1166 <gpib_write_byte>
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif

	for (i = 0; i < length; i++) {
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	9c 81       	ldd	r25, Y+4	; 0x04
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	9c 83       	std	Y+4, r25	; 0x04
     fca:	8b 83       	std	Y+3, r24	; 0x03
     fcc:	2b 81       	ldd	r18, Y+3	; 0x03
     fce:	3c 81       	ldd	r19, Y+4	; 0x04
     fd0:	88 85       	ldd	r24, Y+8	; 0x08
     fd2:	99 85       	ldd	r25, Y+9	; 0x09
     fd4:	28 17       	cp	r18, r24
     fd6:	39 07       	cpc	r19, r25
     fd8:	8c f2       	brlt	.-94     	; 0xf7c <gpib_cmd+0x40>

		uchar isLastByte = (i == length - 1) && !attention;
		gpib_write_byte(c, isLastByte);
	}

	gpib_write_epilogue(attention);
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	0e 94 49 08 	call	0x1092	; 0x1092 <gpib_write_epilogue>

	return 0x00;
     fe0:	80 e0       	ldi	r24, 0x00	; 0
}
     fe2:	2b 96       	adiw	r28, 0x0b	; 11
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <gpib_write_prologue>:

/**
 * Emits prologue before writing to a listener.
 *
 */
void gpib_write_prologue(uchar attention) {
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	0f 92       	push	r0
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	89 83       	std	Y+1, r24	; 0x01
	// set talks state. This is used by ISR to recognize own talk
	// (controller must not talk to itself and must not take part in listener handshake when talking)
	controller.talks = 1;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	80 93 7f 04 	sts	0x047F, r24
	if (attention) {
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	88 23       	and	r24, r24
    100a:	a9 f0       	breq	.+42     	; 0x1036 <gpib_write_prologue+0x42>
		//uart_puts("\n\rgpib_controller_write()\n\r");
		// assign ATN for commands
		assign_bit(DDRD, PORTD, G_ATN);
    100c:	a2 e3       	ldi	r26, 0x32	; 50
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e2 e3       	ldi	r30, 0x32	; 50
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	8f 77       	andi	r24, 0x7F	; 127
    1018:	8c 93       	st	X, r24
    101a:	a1 e3       	ldi	r26, 0x31	; 49
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e1 e3       	ldi	r30, 0x31	; 49
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	80 68       	ori	r24, 0x80	; 128
    1026:	8c 93       	st	X, r24
    1028:	a2 e3       	ldi	r26, 0x32	; 50
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e2 e3       	ldi	r30, 0x32	; 50
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8f 77       	andi	r24, 0x7F	; 127
    1034:	8c 93       	st	X, r24
	}
	// release EOI during transmission
	release_bit(DDRD, PORTD, G_EOI);
    1036:	a1 e3       	ldi	r26, 0x31	; 49
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e1 e3       	ldi	r30, 0x31	; 49
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	8f 7e       	andi	r24, 0xEF	; 239
    1042:	8c 93       	st	X, r24
    1044:	a2 e3       	ldi	r26, 0x32	; 50
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e2 e3       	ldi	r30, 0x32	; 50
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	80 61       	ori	r24, 0x10	; 16
    1050:	8c 93       	st	X, r24
	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
    1052:	a1 e3       	ldi	r26, 0x31	; 49
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e1 e3       	ldi	r30, 0x31	; 49
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	8b 7f       	andi	r24, 0xFB	; 251
    105e:	8c 93       	st	X, r24
    1060:	a2 e3       	ldi	r26, 0x32	; 50
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e2 e3       	ldi	r30, 0x32	; 50
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	84 60       	ori	r24, 0x04	; 4
    106c:	8c 93       	st	X, r24
	// release NRFD (just to be sure)
	release_bit(DDRD, PORTD, G_NRFD);
    106e:	a1 e3       	ldi	r26, 0x31	; 49
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e1 e3       	ldi	r30, 0x31	; 49
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	87 7f       	andi	r24, 0xF7	; 247
    107a:	8c 93       	st	X, r24
    107c:	a2 e3       	ldi	r26, 0x32	; 50
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e2 e3       	ldi	r30, 0x32	; 50
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	88 60       	ori	r24, 0x08	; 8
    1088:	8c 93       	st	X, r24
}
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <gpib_write_epilogue>:

/**
 * Emits epilogue after writing to a listener.
 *
 */
void gpib_write_epilogue(uchar attention) {
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	0f 92       	push	r0
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	89 83       	std	Y+1, r24	; 0x01
	if (attention) {
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	88 23       	and	r24, r24
    10a2:	71 f0       	breq	.+28     	; 0x10c0 <gpib_write_epilogue+0x2e>
		// assign ATN for commands
		release_bit(DDRD, PORTD, G_ATN);
    10a4:	a1 e3       	ldi	r26, 0x31	; 49
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e1 e3       	ldi	r30, 0x31	; 49
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	8f 77       	andi	r24, 0x7F	; 127
    10b0:	8c 93       	st	X, r24
    10b2:	a2 e3       	ldi	r26, 0x32	; 50
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e2 e3       	ldi	r30, 0x32	; 50
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	80 68       	ori	r24, 0x80	; 128
    10be:	8c 93       	st	X, r24
	}
	// clear talk state.Controller does not talk anymore.
	controller.talks = 0;
    10c0:	10 92 7f 04 	sts	0x047F, r1
}
    10c4:	0f 90       	pop	r0
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <gpib_write_command>:
 * - prefix with GPIB write prologue
 * - the string
 * - postfix with GPIB epilogue
 * - postfix that untalks/unlistens all partners
 */
void gpib_write_command(uchar *s) {
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <gpib_write_command+0x6>
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	9a 83       	std	Y+2, r25	; 0x02
    10d8:	89 83       	std	Y+1, r24	; 0x01
	gpib_prepare_write();
    10da:	0e 94 8c 05 	call	0xb18	; 0xb18 <gpib_prepare_write>
	gpib_write_prologue(0);
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	0e 94 fa 07 	call	0xff4	; 0xff4 <gpib_write_prologue>
	gpib_write_string(s);
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	9a 81       	ldd	r25, Y+2	; 0x02
    10e8:	0e 94 84 08 	call	0x1108	; 0x1108 <gpib_write_string>
	gpib_write_byte(ASCII_CODE_CR, 1);
    10ec:	8d e0       	ldi	r24, 0x0D	; 13
    10ee:	61 e0       	ldi	r22, 0x01	; 1
    10f0:	0e 94 b3 08 	call	0x1166	; 0x1166 <gpib_write_byte>
	gpib_write_epilogue(0);
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	0e 94 49 08 	call	0x1092	; 0x1092 <gpib_write_epilogue>
	gpib_untalkUnlisten();
    10fa:	0e 94 f6 05 	call	0xbec	; 0xbec <gpib_untalkUnlisten>
}
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <gpib_write_string>:

/**
 * Write string. Only the raw string is written, no prefix and no postfix.
 */
void gpib_write_string(uchar *s) {
    1108:	0f 93       	push	r16
    110a:	1f 93       	push	r17
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	00 d0       	rcall	.+0      	; 0x1112 <gpib_write_string+0xa>
    1112:	00 d0       	rcall	.+0      	; 0x1114 <gpib_write_string+0xc>
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	9c 83       	std	Y+4, r25	; 0x04
    111a:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < strlen(s); i++) {
    111c:	1a 82       	std	Y+2, r1	; 0x02
    111e:	19 82       	std	Y+1, r1	; 0x01
    1120:	10 c0       	rjmp	.+32     	; 0x1142 <gpib_write_string+0x3a>
		gpib_write_byte(s[i], 0);
    1122:	29 81       	ldd	r18, Y+1	; 0x01
    1124:	3a 81       	ldd	r19, Y+2	; 0x02
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	fc 01       	movw	r30, r24
    112c:	e2 0f       	add	r30, r18
    112e:	f3 1f       	adc	r31, r19
    1130:	80 81       	ld	r24, Z
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	0e 94 b3 08 	call	0x1166	; 0x1166 <gpib_write_byte>

/**
 * Write string. Only the raw string is written, no prefix and no postfix.
 */
void gpib_write_string(uchar *s) {
	for (int i = 0; i < strlen(s); i++) {
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	9a 81       	ldd	r25, Y+2	; 0x02
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	9a 83       	std	Y+2, r25	; 0x02
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	09 81       	ldd	r16, Y+1	; 0x01
    1144:	1a 81       	ldd	r17, Y+2	; 0x02
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <strlen>
    114e:	08 17       	cp	r16, r24
    1150:	19 07       	cpc	r17, r25
    1152:	38 f3       	brcs	.-50     	; 0x1122 <gpib_write_string+0x1a>
		gpib_write_byte(s[i], 0);
	}
}
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	08 95       	ret

00001166 <gpib_write_byte>:

/**
 * Emits single byte to GPIB port pins.
 */
uchar gpib_write_byte(uchar c, uchar isLastByte) {
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	00 d0       	rcall	.+0      	; 0x116c <gpib_write_byte+0x6>
    116c:	00 d0       	rcall	.+0      	; 0x116e <gpib_write_byte+0x8>
    116e:	0f 92       	push	r0
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	8b 83       	std	Y+3, r24	; 0x03
    1176:	6c 83       	std	Y+4, r22	; 0x04
	int timeout;

	// wait for NDAC assign from all listeners
	release_bit(DDRD, PORTD, G_NDAC);
    1178:	a1 e3       	ldi	r26, 0x31	; 49
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e1 e3       	ldi	r30, 0x31	; 49
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	8f 7d       	andi	r24, 0xDF	; 223
    1184:	8c 93       	st	X, r24
    1186:	a2 e3       	ldi	r26, 0x32	; 50
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e2 e3       	ldi	r30, 0x32	; 50
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	80 62       	ori	r24, 0x20	; 32
    1192:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
	timeout = s + 5;
    1194:	80 91 e9 05 	lds	r24, 0x05E9
    1198:	88 2f       	mov	r24, r24
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	05 96       	adiw	r24, 0x05	; 5
    119e:	9a 83       	std	Y+2, r25	; 0x02
    11a0:	89 83       	std	Y+1, r24	; 0x01
    11a2:	10 c0       	rjmp	.+32     	; 0x11c4 <gpib_write_byte+0x5e>
	//gpib_info();
	while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
		if (s == timeout) {
    11a4:	80 91 e9 05 	lds	r24, 0x05E9
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
    11b0:	28 17       	cp	r18, r24
    11b2:	39 07       	cpc	r19, r25
    11b4:	39 f4       	brne	.+14     	; 0x11c4 <gpib_write_byte+0x5e>
			uart_puts("\n\rError: NDAC timeout\n\r");
    11b6:	81 ec       	ldi	r24, 0xC1	; 193
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
			return 0xff;
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	8d 83       	std	Y+5, r24	; 0x05
    11c2:	f7 c1       	rjmp	.+1006   	; 0x15b2 <gpib_write_byte+0x44c>
	// wait for NDAC assign from all listeners
	release_bit(DDRD, PORTD, G_NDAC);
#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
    11c4:	e0 e3       	ldi	r30, 0x30	; 48
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	88 2f       	mov	r24, r24
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	80 72       	andi	r24, 0x20	; 32
    11d0:	90 70       	andi	r25, 0x00	; 0
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	49 f0       	breq	.+18     	; 0x11e8 <gpib_write_byte+0x82>
    11d6:	80 91 e9 05 	lds	r24, 0x05E9
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	82 17       	cp	r24, r18
    11e4:	93 07       	cpc	r25, r19
    11e6:	f4 f6       	brge	.-68     	; 0x11a4 <gpib_write_byte+0x3e>
	}
#else
	loop_until_bit_is_clear(PIND,G_NDAC);
#endif

	DDRA = 0x00;
    11e8:	ea e3       	ldi	r30, 0x3A	; 58
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	10 82       	st	Z, r1
	if (c & 0x01) {
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	88 2f       	mov	r24, r24
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	81 70       	andi	r24, 0x01	; 1
    11f6:	90 70       	andi	r25, 0x00	; 0
    11f8:	88 23       	and	r24, r24
    11fa:	b1 f0       	breq	.+44     	; 0x1228 <gpib_write_byte+0xc2>
		assign_bit(DDRA, PORTA, PA0);
    11fc:	ab e3       	ldi	r26, 0x3B	; 59
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	eb e3       	ldi	r30, 0x3B	; 59
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	8e 7f       	andi	r24, 0xFE	; 254
    1208:	8c 93       	st	X, r24
    120a:	aa e3       	ldi	r26, 0x3A	; 58
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	ea e3       	ldi	r30, 0x3A	; 58
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	81 60       	ori	r24, 0x01	; 1
    1216:	8c 93       	st	X, r24
    1218:	ab e3       	ldi	r26, 0x3B	; 59
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	eb e3       	ldi	r30, 0x3B	; 59
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	8e 7f       	andi	r24, 0xFE	; 254
    1224:	8c 93       	st	X, r24
    1226:	0e c0       	rjmp	.+28     	; 0x1244 <gpib_write_byte+0xde>
	} else {
		release_bit(DDRA, PORTA, PA0)
    1228:	aa e3       	ldi	r26, 0x3A	; 58
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ea e3       	ldi	r30, 0x3A	; 58
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	8e 7f       	andi	r24, 0xFE	; 254
    1234:	8c 93       	st	X, r24
    1236:	ab e3       	ldi	r26, 0x3B	; 59
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	eb e3       	ldi	r30, 0x3B	; 59
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	81 60       	ori	r24, 0x01	; 1
    1242:	8c 93       	st	X, r24
	}
	if (c & 0x02) {
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	88 2f       	mov	r24, r24
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	82 70       	andi	r24, 0x02	; 2
    124c:	90 70       	andi	r25, 0x00	; 0
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	b1 f0       	breq	.+44     	; 0x127e <gpib_write_byte+0x118>
		assign_bit(DDRA, PORTA, PA1)
    1252:	ab e3       	ldi	r26, 0x3B	; 59
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	eb e3       	ldi	r30, 0x3B	; 59
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8d 7f       	andi	r24, 0xFD	; 253
    125e:	8c 93       	st	X, r24
    1260:	aa e3       	ldi	r26, 0x3A	; 58
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	ea e3       	ldi	r30, 0x3A	; 58
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	82 60       	ori	r24, 0x02	; 2
    126c:	8c 93       	st	X, r24
    126e:	ab e3       	ldi	r26, 0x3B	; 59
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	eb e3       	ldi	r30, 0x3B	; 59
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	8d 7f       	andi	r24, 0xFD	; 253
    127a:	8c 93       	st	X, r24
    127c:	0e c0       	rjmp	.+28     	; 0x129a <gpib_write_byte+0x134>
	} else {
		release_bit(DDRA, PORTA, PA1);
    127e:	aa e3       	ldi	r26, 0x3A	; 58
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	ea e3       	ldi	r30, 0x3A	; 58
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	8d 7f       	andi	r24, 0xFD	; 253
    128a:	8c 93       	st	X, r24
    128c:	ab e3       	ldi	r26, 0x3B	; 59
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	eb e3       	ldi	r30, 0x3B	; 59
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	82 60       	ori	r24, 0x02	; 2
    1298:	8c 93       	st	X, r24
	}
	if (c & 0x04) {
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	84 70       	andi	r24, 0x04	; 4
    12a2:	90 70       	andi	r25, 0x00	; 0
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	b1 f0       	breq	.+44     	; 0x12d4 <gpib_write_byte+0x16e>
		assign_bit(DDRA, PORTA, PA2);
    12a8:	ab e3       	ldi	r26, 0x3B	; 59
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	eb e3       	ldi	r30, 0x3B	; 59
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	8b 7f       	andi	r24, 0xFB	; 251
    12b4:	8c 93       	st	X, r24
    12b6:	aa e3       	ldi	r26, 0x3A	; 58
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	ea e3       	ldi	r30, 0x3A	; 58
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	84 60       	ori	r24, 0x04	; 4
    12c2:	8c 93       	st	X, r24
    12c4:	ab e3       	ldi	r26, 0x3B	; 59
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	eb e3       	ldi	r30, 0x3B	; 59
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	8b 7f       	andi	r24, 0xFB	; 251
    12d0:	8c 93       	st	X, r24
    12d2:	0e c0       	rjmp	.+28     	; 0x12f0 <gpib_write_byte+0x18a>
	} else {
		release_bit(DDRA, PORTA, PA2);
    12d4:	aa e3       	ldi	r26, 0x3A	; 58
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	ea e3       	ldi	r30, 0x3A	; 58
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	8b 7f       	andi	r24, 0xFB	; 251
    12e0:	8c 93       	st	X, r24
    12e2:	ab e3       	ldi	r26, 0x3B	; 59
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	eb e3       	ldi	r30, 0x3B	; 59
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	84 60       	ori	r24, 0x04	; 4
    12ee:	8c 93       	st	X, r24
	}
	if (c & 0x08) {
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	88 2f       	mov	r24, r24
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	88 70       	andi	r24, 0x08	; 8
    12f8:	90 70       	andi	r25, 0x00	; 0
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	b1 f0       	breq	.+44     	; 0x132a <gpib_write_byte+0x1c4>
		assign_bit(DDRA, PORTA, PA3);
    12fe:	ab e3       	ldi	r26, 0x3B	; 59
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	eb e3       	ldi	r30, 0x3B	; 59
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	87 7f       	andi	r24, 0xF7	; 247
    130a:	8c 93       	st	X, r24
    130c:	aa e3       	ldi	r26, 0x3A	; 58
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	ea e3       	ldi	r30, 0x3A	; 58
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	88 60       	ori	r24, 0x08	; 8
    1318:	8c 93       	st	X, r24
    131a:	ab e3       	ldi	r26, 0x3B	; 59
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	eb e3       	ldi	r30, 0x3B	; 59
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	87 7f       	andi	r24, 0xF7	; 247
    1326:	8c 93       	st	X, r24
    1328:	0e c0       	rjmp	.+28     	; 0x1346 <gpib_write_byte+0x1e0>
	} else {
		release_bit(DDRA, PORTA, PA3);
    132a:	aa e3       	ldi	r26, 0x3A	; 58
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	ea e3       	ldi	r30, 0x3A	; 58
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	87 7f       	andi	r24, 0xF7	; 247
    1336:	8c 93       	st	X, r24
    1338:	ab e3       	ldi	r26, 0x3B	; 59
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	eb e3       	ldi	r30, 0x3B	; 59
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	88 60       	ori	r24, 0x08	; 8
    1344:	8c 93       	st	X, r24
	}
	if (c & 0x10) {
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	88 2f       	mov	r24, r24
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	80 71       	andi	r24, 0x10	; 16
    134e:	90 70       	andi	r25, 0x00	; 0
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	b1 f0       	breq	.+44     	; 0x1380 <gpib_write_byte+0x21a>
		assign_bit(DDRA, PORTA, PA4);
    1354:	ab e3       	ldi	r26, 0x3B	; 59
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	eb e3       	ldi	r30, 0x3B	; 59
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	8f 7e       	andi	r24, 0xEF	; 239
    1360:	8c 93       	st	X, r24
    1362:	aa e3       	ldi	r26, 0x3A	; 58
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	ea e3       	ldi	r30, 0x3A	; 58
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	80 61       	ori	r24, 0x10	; 16
    136e:	8c 93       	st	X, r24
    1370:	ab e3       	ldi	r26, 0x3B	; 59
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	eb e3       	ldi	r30, 0x3B	; 59
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	8f 7e       	andi	r24, 0xEF	; 239
    137c:	8c 93       	st	X, r24
    137e:	0e c0       	rjmp	.+28     	; 0x139c <gpib_write_byte+0x236>
	} else {
		release_bit(DDRA, PORTA, PA4);
    1380:	aa e3       	ldi	r26, 0x3A	; 58
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	ea e3       	ldi	r30, 0x3A	; 58
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	8f 7e       	andi	r24, 0xEF	; 239
    138c:	8c 93       	st	X, r24
    138e:	ab e3       	ldi	r26, 0x3B	; 59
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	eb e3       	ldi	r30, 0x3B	; 59
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	80 61       	ori	r24, 0x10	; 16
    139a:	8c 93       	st	X, r24
	}
	if (c & 0x20) {
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	88 2f       	mov	r24, r24
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	80 72       	andi	r24, 0x20	; 32
    13a4:	90 70       	andi	r25, 0x00	; 0
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	b1 f0       	breq	.+44     	; 0x13d6 <gpib_write_byte+0x270>
		assign_bit(DDRA, PORTA, PA5);
    13aa:	ab e3       	ldi	r26, 0x3B	; 59
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	eb e3       	ldi	r30, 0x3B	; 59
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	8f 7d       	andi	r24, 0xDF	; 223
    13b6:	8c 93       	st	X, r24
    13b8:	aa e3       	ldi	r26, 0x3A	; 58
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	ea e3       	ldi	r30, 0x3A	; 58
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	80 62       	ori	r24, 0x20	; 32
    13c4:	8c 93       	st	X, r24
    13c6:	ab e3       	ldi	r26, 0x3B	; 59
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	eb e3       	ldi	r30, 0x3B	; 59
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	8f 7d       	andi	r24, 0xDF	; 223
    13d2:	8c 93       	st	X, r24
    13d4:	0e c0       	rjmp	.+28     	; 0x13f2 <gpib_write_byte+0x28c>
	} else {
		release_bit(DDRA, PORTA, PA5);
    13d6:	aa e3       	ldi	r26, 0x3A	; 58
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	ea e3       	ldi	r30, 0x3A	; 58
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	8f 7d       	andi	r24, 0xDF	; 223
    13e2:	8c 93       	st	X, r24
    13e4:	ab e3       	ldi	r26, 0x3B	; 59
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	eb e3       	ldi	r30, 0x3B	; 59
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	80 62       	ori	r24, 0x20	; 32
    13f0:	8c 93       	st	X, r24
	}
	if (c & 0x40) {
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	80 74       	andi	r24, 0x40	; 64
    13fa:	90 70       	andi	r25, 0x00	; 0
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	b1 f0       	breq	.+44     	; 0x142c <gpib_write_byte+0x2c6>
		assign_bit(DDRA, PORTA, PA6);
    1400:	ab e3       	ldi	r26, 0x3B	; 59
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	eb e3       	ldi	r30, 0x3B	; 59
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	8f 7b       	andi	r24, 0xBF	; 191
    140c:	8c 93       	st	X, r24
    140e:	aa e3       	ldi	r26, 0x3A	; 58
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	ea e3       	ldi	r30, 0x3A	; 58
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	80 64       	ori	r24, 0x40	; 64
    141a:	8c 93       	st	X, r24
    141c:	ab e3       	ldi	r26, 0x3B	; 59
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	eb e3       	ldi	r30, 0x3B	; 59
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	8f 7b       	andi	r24, 0xBF	; 191
    1428:	8c 93       	st	X, r24
    142a:	0e c0       	rjmp	.+28     	; 0x1448 <gpib_write_byte+0x2e2>
	} else {
		release_bit(DDRA, PORTA, PA6);
    142c:	aa e3       	ldi	r26, 0x3A	; 58
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	ea e3       	ldi	r30, 0x3A	; 58
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8f 7b       	andi	r24, 0xBF	; 191
    1438:	8c 93       	st	X, r24
    143a:	ab e3       	ldi	r26, 0x3B	; 59
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	eb e3       	ldi	r30, 0x3B	; 59
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	80 64       	ori	r24, 0x40	; 64
    1446:	8c 93       	st	X, r24
	}
	if (c & 0x80) {
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	88 23       	and	r24, r24
    144c:	b4 f4       	brge	.+44     	; 0x147a <gpib_write_byte+0x314>
		assign_bit(DDRA, PORTA, PA7);
    144e:	ab e3       	ldi	r26, 0x3B	; 59
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	eb e3       	ldi	r30, 0x3B	; 59
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	8f 77       	andi	r24, 0x7F	; 127
    145a:	8c 93       	st	X, r24
    145c:	aa e3       	ldi	r26, 0x3A	; 58
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	ea e3       	ldi	r30, 0x3A	; 58
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	80 68       	ori	r24, 0x80	; 128
    1468:	8c 93       	st	X, r24
    146a:	ab e3       	ldi	r26, 0x3B	; 59
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	eb e3       	ldi	r30, 0x3B	; 59
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	8f 77       	andi	r24, 0x7F	; 127
    1476:	8c 93       	st	X, r24
    1478:	0e c0       	rjmp	.+28     	; 0x1496 <gpib_write_byte+0x330>
	} else {
		release_bit(DDRA, PORTA, PA7);
    147a:	aa e3       	ldi	r26, 0x3A	; 58
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	ea e3       	ldi	r30, 0x3A	; 58
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8f 77       	andi	r24, 0x7F	; 127
    1486:	8c 93       	st	X, r24
    1488:	ab e3       	ldi	r26, 0x3B	; 59
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	eb e3       	ldi	r30, 0x3B	; 59
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	80 68       	ori	r24, 0x80	; 128
    1494:	8c 93       	st	X, r24
	}

	// wait until listeners release NRFD
	//uart_puts("1");
	release_bit(DDRD, PORTD, G_NRFD);
    1496:	a1 e3       	ldi	r26, 0x31	; 49
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e1 e3       	ldi	r30, 0x31	; 49
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	87 7f       	andi	r24, 0xF7	; 247
    14a2:	8c 93       	st	X, r24
    14a4:	a2 e3       	ldi	r26, 0x32	; 50
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e2 e3       	ldi	r30, 0x32	; 50
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	88 60       	ori	r24, 0x08	; 8
    14b0:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
	//gpib_info();
	timeout = s + 5;
    14b2:	80 91 e9 05 	lds	r24, 0x05E9
    14b6:	88 2f       	mov	r24, r24
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	05 96       	adiw	r24, 0x05	; 5
    14bc:	9a 83       	std	Y+2, r25	; 0x02
    14be:	89 83       	std	Y+1, r24	; 0x01
    14c0:	10 c0       	rjmp	.+32     	; 0x14e2 <gpib_write_byte+0x37c>
	while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
		if (s == timeout) {
    14c2:	80 91 e9 05 	lds	r24, 0x05E9
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	9a 81       	ldd	r25, Y+2	; 0x02
    14ce:	28 17       	cp	r18, r24
    14d0:	39 07       	cpc	r19, r25
    14d2:	39 f4       	brne	.+14     	; 0x14e2 <gpib_write_byte+0x37c>
			uart_puts("\n\rError: NRFD timeout\n\r");
    14d4:	89 ed       	ldi	r24, 0xD9	; 217
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
			return 0xff;
    14dc:	8f ef       	ldi	r24, 0xFF	; 255
    14de:	8d 83       	std	Y+5, r24	; 0x05
    14e0:	68 c0       	rjmp	.+208    	; 0x15b2 <gpib_write_byte+0x44c>
	//uart_puts("1");
	release_bit(DDRD, PORTD, G_NRFD);
#ifdef WITH_TIMEOUT
	//gpib_info();
	timeout = s + 5;
	while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
    14e2:	e0 e3       	ldi	r30, 0x30	; 48
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	88 2f       	mov	r24, r24
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	88 70       	andi	r24, 0x08	; 8
    14ee:	90 70       	andi	r25, 0x00	; 0
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	49 f4       	brne	.+18     	; 0x1506 <gpib_write_byte+0x3a0>
    14f4:	80 91 e9 05 	lds	r24, 0x05E9
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	82 17       	cp	r24, r18
    1502:	93 07       	cpc	r25, r19
    1504:	f4 f6       	brge	.-68     	; 0x14c2 <gpib_write_byte+0x35c>
#else
	loop_until_bit_is_set(PIND,G_NRFD);
#endif

	// assign EOI during transmission of only last byte
	if (isLastByte) {
    1506:	8c 81       	ldd	r24, Y+4	; 0x04
    1508:	88 23       	and	r24, r24
    150a:	a9 f0       	breq	.+42     	; 0x1536 <gpib_write_byte+0x3d0>
		//uart_puts("\n\rE\n\r");
		assign_bit(DDRD, PORTD, G_EOI);
    150c:	a2 e3       	ldi	r26, 0x32	; 50
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e2 e3       	ldi	r30, 0x32	; 50
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	8f 7e       	andi	r24, 0xEF	; 239
    1518:	8c 93       	st	X, r24
    151a:	a1 e3       	ldi	r26, 0x31	; 49
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e1 e3       	ldi	r30, 0x31	; 49
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	80 61       	ori	r24, 0x10	; 16
    1526:	8c 93       	st	X, r24
    1528:	a2 e3       	ldi	r26, 0x32	; 50
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e2 e3       	ldi	r30, 0x32	; 50
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	8f 7e       	andi	r24, 0xEF	; 239
    1534:	8c 93       	st	X, r24
	}

	// assign DAV, data valid for listeners
	assign_bit(DDRD, PORTD, G_DAV);
    1536:	a2 e3       	ldi	r26, 0x32	; 50
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e2 e3       	ldi	r30, 0x32	; 50
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	8b 7f       	andi	r24, 0xFB	; 251
    1542:	8c 93       	st	X, r24
    1544:	a1 e3       	ldi	r26, 0x31	; 49
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e1 e3       	ldi	r30, 0x31	; 49
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	84 60       	ori	r24, 0x04	; 4
    1550:	8c 93       	st	X, r24
    1552:	a2 e3       	ldi	r26, 0x32	; 50
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e2 e3       	ldi	r30, 0x32	; 50
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8b 7f       	andi	r24, 0xFB	; 251
    155e:	8c 93       	st	X, r24

	// wait for NDAC release
	//uart_puts("2");
	release_bit(DDRD, PORTD, G_NDAC);
    1560:	a1 e3       	ldi	r26, 0x31	; 49
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e1 e3       	ldi	r30, 0x31	; 49
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	8f 7d       	andi	r24, 0xDF	; 223
    156c:	8c 93       	st	X, r24
    156e:	a2 e3       	ldi	r26, 0x32	; 50
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e2 e3       	ldi	r30, 0x32	; 50
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	80 62       	ori	r24, 0x20	; 32
    157a:	8c 93       	st	X, r24
	loop_until_bit_is_set(PIND, G_NDAC);
    157c:	e0 e3       	ldi	r30, 0x30	; 48
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	88 2f       	mov	r24, r24
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	80 72       	andi	r24, 0x20	; 32
    1588:	90 70       	andi	r25, 0x00	; 0
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	b9 f3       	breq	.-18     	; 0x157c <gpib_write_byte+0x416>

	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
    158e:	a1 e3       	ldi	r26, 0x31	; 49
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e1 e3       	ldi	r30, 0x31	; 49
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	8b 7f       	andi	r24, 0xFB	; 251
    159a:	8c 93       	st	X, r24
    159c:	a2 e3       	ldi	r26, 0x32	; 50
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e2 e3       	ldi	r30, 0x32	; 50
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	84 60       	ori	r24, 0x04	; 4
    15a8:	8c 93       	st	X, r24

	// reset Port to all input
	DDRA = 0x00;
    15aa:	ea e3       	ldi	r30, 0x3A	; 58
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	10 82       	st	Z, r1

	//uart_puts("3\r\n");

	return 0;
    15b0:	1d 82       	std	Y+5, r1	; 0x05
    15b2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <gpib_info>:

/**
 * print some useful info about bus state (for example value of handshake pins)
 */
void gpib_info(void) {
    15c4:	af 92       	push	r10
    15c6:	bf 92       	push	r11
    15c8:	cf 92       	push	r12
    15ca:	df 92       	push	r13
    15cc:	ef 92       	push	r14
    15ce:	ff 92       	push	r15
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	2a 97       	sbiw	r28, 0x0a	; 10
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	cd bf       	out	0x3d, r28	; 61
	uchar dav, nrfd, ndac, eoi, atn, srq, ifc, ren;
	extern uchar buf[80];

	sprintf(buf, "Partner address(primary,secondary): (%u,%u)\n\r",
    15e8:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <gpib_get_partner_pad>
    15ec:	08 2f       	mov	r16, r24
    15ee:	10 e0       	ldi	r17, 0x00	; 0
    15f0:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <gpib_get_partner_sad>
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	8d b7       	in	r24, 0x3d	; 61
    15fa:	9e b7       	in	r25, 0x3e	; 62
    15fc:	08 97       	sbiw	r24, 0x08	; 8
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	9e bf       	out	0x3e, r25	; 62
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	8d bf       	out	0x3d, r24	; 61
    1608:	ed b7       	in	r30, 0x3d	; 61
    160a:	fe b7       	in	r31, 0x3e	; 62
    160c:	31 96       	adiw	r30, 0x01	; 1
    160e:	88 e9       	ldi	r24, 0x98	; 152
    1610:	95 e0       	ldi	r25, 0x05	; 5
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	80 83       	st	Z, r24
    1616:	81 ef       	ldi	r24, 0xF1	; 241
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	93 83       	std	Z+3, r25	; 0x03
    161c:	82 83       	std	Z+2, r24	; 0x02
    161e:	15 83       	std	Z+5, r17	; 0x05
    1620:	04 83       	std	Z+4, r16	; 0x04
    1622:	37 83       	std	Z+7, r19	; 0x07
    1624:	26 83       	std	Z+6, r18	; 0x06
    1626:	0e 94 35 02 	call	0x46a	; 0x46a <sprintf>
    162a:	8d b7       	in	r24, 0x3d	; 61
    162c:	9e b7       	in	r25, 0x3e	; 62
    162e:	08 96       	adiw	r24, 0x08	; 8
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	9e bf       	out	0x3e, r25	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	8d bf       	out	0x3d, r24	; 61
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);
    163a:	88 e9       	ldi	r24, 0x98	; 152
    163c:	95 e0       	ldi	r25, 0x05	; 5
    163e:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>

	uart_puts("Partner list\n\r");
    1642:	8f e1       	ldi	r24, 0x1F	; 31
    1644:	91 e0       	ldi	r25, 0x01	; 1
    1646:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
	for (int i = 0; i < MAX_PARTNER; i++) {
    164a:	1a 82       	std	Y+2, r1	; 0x02
    164c:	19 82       	std	Y+1, r1	; 0x01
    164e:	49 c0       	rjmp	.+146    	; 0x16e2 <gpib_info+0x11e>
		if (controller.partners[i].primary != ADDRESS_NOT_SET) {
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	9a 81       	ldd	r25, Y+2	; 0x02
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	fc 01       	movw	r30, r24
    165a:	ef 57       	subi	r30, 0x7F	; 127
    165c:	fb 4f       	sbci	r31, 0xFB	; 251
    165e:	80 81       	ld	r24, Z
    1660:	8f 3f       	cpi	r24, 0xFF	; 255
    1662:	d1 f1       	breq	.+116    	; 0x16d8 <gpib_info+0x114>
			sprintf(buf, "Partner(primary,secondary) : (%u,%u)\n\r",
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	9a 81       	ldd	r25, Y+2	; 0x02
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	fc 01       	movw	r30, r24
    166e:	ef 57       	subi	r30, 0x7F	; 127
    1670:	fb 4f       	sbci	r31, 0xFB	; 251
    1672:	80 81       	ld	r24, Z
    1674:	48 2f       	mov	r20, r24
    1676:	50 e0       	ldi	r21, 0x00	; 0
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	9a 81       	ldd	r25, Y+2	; 0x02
    167c:	03 96       	adiw	r24, 0x03	; 3
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	fc 01       	movw	r30, r24
    1684:	e4 58       	subi	r30, 0x84	; 132
    1686:	fb 4f       	sbci	r31, 0xFB	; 251
    1688:	80 81       	ld	r24, Z
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	8d b7       	in	r24, 0x3d	; 61
    1690:	9e b7       	in	r25, 0x3e	; 62
    1692:	08 97       	sbiw	r24, 0x08	; 8
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	9e bf       	out	0x3e, r25	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	8d bf       	out	0x3d, r24	; 61
    169e:	ed b7       	in	r30, 0x3d	; 61
    16a0:	fe b7       	in	r31, 0x3e	; 62
    16a2:	31 96       	adiw	r30, 0x01	; 1
    16a4:	88 e9       	ldi	r24, 0x98	; 152
    16a6:	95 e0       	ldi	r25, 0x05	; 5
    16a8:	91 83       	std	Z+1, r25	; 0x01
    16aa:	80 83       	st	Z, r24
    16ac:	8e e2       	ldi	r24, 0x2E	; 46
    16ae:	91 e0       	ldi	r25, 0x01	; 1
    16b0:	93 83       	std	Z+3, r25	; 0x03
    16b2:	82 83       	std	Z+2, r24	; 0x02
    16b4:	55 83       	std	Z+5, r21	; 0x05
    16b6:	44 83       	std	Z+4, r20	; 0x04
    16b8:	37 83       	std	Z+7, r19	; 0x07
    16ba:	26 83       	std	Z+6, r18	; 0x06
    16bc:	0e 94 35 02 	call	0x46a	; 0x46a <sprintf>
    16c0:	8d b7       	in	r24, 0x3d	; 61
    16c2:	9e b7       	in	r25, 0x3e	; 62
    16c4:	08 96       	adiw	r24, 0x08	; 8
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	9e bf       	out	0x3e, r25	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	8d bf       	out	0x3d, r24	; 61
					controller.partners[i].primary,
					controller.partners[i].secondary);
			uart_puts(buf);
    16d0:	88 e9       	ldi	r24, 0x98	; 152
    16d2:	95 e0       	ldi	r25, 0x05	; 5
    16d4:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
	sprintf(buf, "Partner address(primary,secondary): (%u,%u)\n\r",
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);

	uart_puts("Partner list\n\r");
	for (int i = 0; i < MAX_PARTNER; i++) {
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	01 96       	adiw	r24, 0x01	; 1
    16de:	9a 83       	std	Y+2, r25	; 0x02
    16e0:	89 83       	std	Y+1, r24	; 0x01
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	9a 81       	ldd	r25, Y+2	; 0x02
    16e6:	85 30       	cpi	r24, 0x05	; 5
    16e8:	91 05       	cpc	r25, r1
    16ea:	0c f4       	brge	.+2      	; 0x16ee <gpib_info+0x12a>
    16ec:	b1 cf       	rjmp	.-158    	; 0x1650 <gpib_info+0x8c>
					controller.partners[i].secondary);
			uart_puts(buf);
		}
	}

	dav = bit_is_set(PIND, G_DAV);
    16ee:	e0 e3       	ldi	r30, 0x30	; 48
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	84 70       	andi	r24, 0x04	; 4
    16f6:	8a 87       	std	Y+10, r24	; 0x0a
	nrfd = bit_is_set(PIND, G_NRFD);
    16f8:	e0 e3       	ldi	r30, 0x30	; 48
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	88 70       	andi	r24, 0x08	; 8
    1700:	89 87       	std	Y+9, r24	; 0x09
	ndac = bit_is_set(PIND, G_NDAC);
    1702:	e0 e3       	ldi	r30, 0x30	; 48
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	80 72       	andi	r24, 0x20	; 32
    170a:	88 87       	std	Y+8, r24	; 0x08
	eoi = bit_is_set(PIND, G_EOI);
    170c:	e0 e3       	ldi	r30, 0x30	; 48
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	80 71       	andi	r24, 0x10	; 16
    1714:	8f 83       	std	Y+7, r24	; 0x07
	atn = bit_is_set(PIND, G_ATN);
    1716:	e0 e3       	ldi	r30, 0x30	; 48
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	80 78       	andi	r24, 0x80	; 128
    171e:	8e 83       	std	Y+6, r24	; 0x06
	srq = bit_is_set(PIND, G_SRQ);
    1720:	e0 e3       	ldi	r30, 0x30	; 48
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	80 74       	andi	r24, 0x40	; 64
    1728:	8d 83       	std	Y+5, r24	; 0x05
	ifc = bit_is_set(PINB, G_IFC);
    172a:	e6 e3       	ldi	r30, 0x36	; 54
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	81 70       	andi	r24, 0x01	; 1
    1732:	8c 83       	std	Y+4, r24	; 0x04
	ren = bit_is_set(PINB, G_REN);
    1734:	e6 e3       	ldi	r30, 0x36	; 54
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	82 70       	andi	r24, 0x02	; 2
    173c:	8b 83       	std	Y+3, r24	; 0x03
	//d = PINA;
	//di = d ^ 0xff;
	if (dav == 0x00)
    173e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1740:	88 23       	and	r24, r24
    1742:	19 f4       	brne	.+6      	; 0x174a <gpib_info+0x186>
		dav = '0';
    1744:	80 e3       	ldi	r24, 0x30	; 48
    1746:	8a 87       	std	Y+10, r24	; 0x0a
    1748:	02 c0       	rjmp	.+4      	; 0x174e <gpib_info+0x18a>
	else
		dav = '1';
    174a:	81 e3       	ldi	r24, 0x31	; 49
    174c:	8a 87       	std	Y+10, r24	; 0x0a
	if (nrfd == 0x00)
    174e:	89 85       	ldd	r24, Y+9	; 0x09
    1750:	88 23       	and	r24, r24
    1752:	19 f4       	brne	.+6      	; 0x175a <gpib_info+0x196>
		nrfd = '0';
    1754:	80 e3       	ldi	r24, 0x30	; 48
    1756:	89 87       	std	Y+9, r24	; 0x09
    1758:	02 c0       	rjmp	.+4      	; 0x175e <gpib_info+0x19a>
	else
		nrfd = '1';
    175a:	81 e3       	ldi	r24, 0x31	; 49
    175c:	89 87       	std	Y+9, r24	; 0x09
	if (ndac == 0x00)
    175e:	88 85       	ldd	r24, Y+8	; 0x08
    1760:	88 23       	and	r24, r24
    1762:	19 f4       	brne	.+6      	; 0x176a <gpib_info+0x1a6>
		ndac = '0';
    1764:	80 e3       	ldi	r24, 0x30	; 48
    1766:	88 87       	std	Y+8, r24	; 0x08
    1768:	02 c0       	rjmp	.+4      	; 0x176e <gpib_info+0x1aa>
	else
		ndac = '1';
    176a:	81 e3       	ldi	r24, 0x31	; 49
    176c:	88 87       	std	Y+8, r24	; 0x08
	if (eoi == 0x00)
    176e:	8f 81       	ldd	r24, Y+7	; 0x07
    1770:	88 23       	and	r24, r24
    1772:	19 f4       	brne	.+6      	; 0x177a <gpib_info+0x1b6>
		eoi = '0';
    1774:	80 e3       	ldi	r24, 0x30	; 48
    1776:	8f 83       	std	Y+7, r24	; 0x07
    1778:	02 c0       	rjmp	.+4      	; 0x177e <gpib_info+0x1ba>
	else
		eoi = '1';
    177a:	81 e3       	ldi	r24, 0x31	; 49
    177c:	8f 83       	std	Y+7, r24	; 0x07
	if (atn == 0x00)
    177e:	8e 81       	ldd	r24, Y+6	; 0x06
    1780:	88 23       	and	r24, r24
    1782:	19 f4       	brne	.+6      	; 0x178a <gpib_info+0x1c6>
		atn = '0';
    1784:	80 e3       	ldi	r24, 0x30	; 48
    1786:	8e 83       	std	Y+6, r24	; 0x06
    1788:	02 c0       	rjmp	.+4      	; 0x178e <gpib_info+0x1ca>
	else
		atn = '1';
    178a:	81 e3       	ldi	r24, 0x31	; 49
    178c:	8e 83       	std	Y+6, r24	; 0x06
	if (srq == 0x00)
    178e:	8d 81       	ldd	r24, Y+5	; 0x05
    1790:	88 23       	and	r24, r24
    1792:	19 f4       	brne	.+6      	; 0x179a <gpib_info+0x1d6>
		srq = '0';
    1794:	80 e3       	ldi	r24, 0x30	; 48
    1796:	8d 83       	std	Y+5, r24	; 0x05
    1798:	02 c0       	rjmp	.+4      	; 0x179e <gpib_info+0x1da>
	else
		srq = '1';
    179a:	81 e3       	ldi	r24, 0x31	; 49
    179c:	8d 83       	std	Y+5, r24	; 0x05
	if (ifc == 0x00)
    179e:	8c 81       	ldd	r24, Y+4	; 0x04
    17a0:	88 23       	and	r24, r24
    17a2:	19 f4       	brne	.+6      	; 0x17aa <gpib_info+0x1e6>
		ifc = '0';
    17a4:	80 e3       	ldi	r24, 0x30	; 48
    17a6:	8c 83       	std	Y+4, r24	; 0x04
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <gpib_info+0x1ea>
	else
		ifc = '1';
    17aa:	81 e3       	ldi	r24, 0x31	; 49
    17ac:	8c 83       	std	Y+4, r24	; 0x04
	if (ren == 0x00)
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	88 23       	and	r24, r24
    17b2:	19 f4       	brne	.+6      	; 0x17ba <gpib_info+0x1f6>
		ren = '0';
    17b4:	80 e3       	ldi	r24, 0x30	; 48
    17b6:	8b 83       	std	Y+3, r24	; 0x03
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <gpib_info+0x1fa>
	else
		ren = '1';
    17ba:	81 e3       	ldi	r24, 0x31	; 49
    17bc:	8b 83       	std	Y+3, r24	; 0x03

	sprintf(buf,
    17be:	8a 85       	ldd	r24, Y+10	; 0x0a
    17c0:	a8 2e       	mov	r10, r24
    17c2:	bb 24       	eor	r11, r11
    17c4:	89 85       	ldd	r24, Y+9	; 0x09
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	88 85       	ldd	r24, Y+8	; 0x08
    17cc:	48 2f       	mov	r20, r24
    17ce:	50 e0       	ldi	r21, 0x00	; 0
    17d0:	8f 81       	ldd	r24, Y+7	; 0x07
    17d2:	68 2f       	mov	r22, r24
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	a8 2f       	mov	r26, r24
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	08 2f       	mov	r16, r24
    17e0:	10 e0       	ldi	r17, 0x00	; 0
    17e2:	8e 81       	ldd	r24, Y+6	; 0x06
    17e4:	e8 2e       	mov	r14, r24
    17e6:	ff 24       	eor	r15, r15
    17e8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ea:	c8 2e       	mov	r12, r24
    17ec:	dd 24       	eor	r13, r13
    17ee:	8d b7       	in	r24, 0x3d	; 61
    17f0:	9e b7       	in	r25, 0x3e	; 62
    17f2:	44 97       	sbiw	r24, 0x14	; 20
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	9e bf       	out	0x3e, r25	; 62
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	8d bf       	out	0x3d, r24	; 61
    17fe:	ed b7       	in	r30, 0x3d	; 61
    1800:	fe b7       	in	r31, 0x3e	; 62
    1802:	31 96       	adiw	r30, 0x01	; 1
    1804:	88 e9       	ldi	r24, 0x98	; 152
    1806:	95 e0       	ldi	r25, 0x05	; 5
    1808:	91 83       	std	Z+1, r25	; 0x01
    180a:	80 83       	st	Z, r24
    180c:	85 e5       	ldi	r24, 0x55	; 85
    180e:	91 e0       	ldi	r25, 0x01	; 1
    1810:	93 83       	std	Z+3, r25	; 0x03
    1812:	82 83       	std	Z+2, r24	; 0x02
    1814:	b5 82       	std	Z+5, r11	; 0x05
    1816:	a4 82       	std	Z+4, r10	; 0x04
    1818:	37 83       	std	Z+7, r19	; 0x07
    181a:	26 83       	std	Z+6, r18	; 0x06
    181c:	51 87       	std	Z+9, r21	; 0x09
    181e:	40 87       	std	Z+8, r20	; 0x08
    1820:	73 87       	std	Z+11, r23	; 0x0b
    1822:	62 87       	std	Z+10, r22	; 0x0a
    1824:	b5 87       	std	Z+13, r27	; 0x0d
    1826:	a4 87       	std	Z+12, r26	; 0x0c
    1828:	17 87       	std	Z+15, r17	; 0x0f
    182a:	06 87       	std	Z+14, r16	; 0x0e
    182c:	f1 8a       	std	Z+17, r15	; 0x11
    182e:	e0 8a       	std	Z+16, r14	; 0x10
    1830:	d3 8a       	std	Z+19, r13	; 0x13
    1832:	c2 8a       	std	Z+18, r12	; 0x12
    1834:	0e 94 35 02 	call	0x46a	; 0x46a <sprintf>
    1838:	8d b7       	in	r24, 0x3d	; 61
    183a:	9e b7       	in	r25, 0x3e	; 62
    183c:	44 96       	adiw	r24, 0x14	; 20
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	9e bf       	out	0x3e, r25	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	8d bf       	out	0x3d, r24	; 61
			"dav=%c,nrfd=%c,ndac=%c, eoi=%c, ifc=%c,ren=%c,atn=%c,srq=%c\n\r",
			dav, nrfd, ndac, eoi, ifc, ren, atn, srq);
	uart_puts(buf);
    1848:	88 e9       	ldi	r24, 0x98	; 152
    184a:	95 e0       	ldi	r25, 0x05	; 5
    184c:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
}
    1850:	2a 96       	adiw	r28, 0x0a	; 10
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	ff 90       	pop	r15
    1866:	ef 90       	pop	r14
    1868:	df 90       	pop	r13
    186a:	cf 90       	pop	r12
    186c:	bf 90       	pop	r11
    186e:	af 90       	pop	r10
    1870:	08 95       	ret

00001872 <gpib_spoll_start>:

/**
 * Enable serial poll.
 * Effect: all devices will send status byte instead of normal data when addressed as talker
 */
void gpib_spoll_start() {
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	00 d0       	rcall	.+0      	; 0x1878 <gpib_spoll_start+0x6>
    1878:	00 d0       	rcall	.+0      	; 0x187a <gpib_spoll_start+0x8>
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
	uchar controlString[4];
	//uart_puts("before SPE\r\n");
	controlString[0] = G_CMD_SPE;
    187e:	88 e1       	ldi	r24, 0x18	; 24
    1880:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
    1882:	ce 01       	movw	r24, r28
    1884:	01 96       	adiw	r24, 0x01	; 1
    1886:	61 e0       	ldi	r22, 0x01	; 1
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <gpib_cmd>
	//uart_puts("after SPE\r\n");
}
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <gpib_spoll_end>:

/**
 * Disable (end) serial poll.All devices will return to normal behaviour as talker
 */
void gpib_spoll_end() {
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <gpib_spoll_end+0x6>
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <gpib_spoll_end+0x8>
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
	uchar controlString[4];
	controlString[0] = G_CMD_SPD;
    18a8:	89 e1       	ldi	r24, 0x19	; 25
    18aa:	89 83       	std	Y+1, r24	; 0x01
	//uart_puts("before SPD\r\n");
	gpib_cmd(controlString, 1);
    18ac:	ce 01       	movw	r24, r28
    18ae:	01 96       	adiw	r24, 0x01	; 1
    18b0:	61 e0       	ldi	r22, 0x01	; 1
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <gpib_cmd>
}
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <gpib_spoll_single>:
 * \param primary primary talker address of device
 * \param secondary secondary talker address of device
 * \param status byte
 * \returns 0xff on failure.
 */
uchar gpib_spoll_single(uchar primary, uchar secondary, uchar *b) {
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	c9 56       	subi	r28, 0x69	; 105
    18d0:	d0 40       	sbci	r29, 0x00	; 0
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	cd bf       	out	0x3d, r28	; 61
    18dc:	fe 01       	movw	r30, r28
    18de:	ea 59       	subi	r30, 0x9A	; 154
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	80 83       	st	Z, r24
    18e4:	fe 01       	movw	r30, r28
    18e6:	e9 59       	subi	r30, 0x99	; 153
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	60 83       	st	Z, r22
    18ec:	fe 01       	movw	r30, r28
    18ee:	e8 59       	subi	r30, 0x98	; 152
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	51 83       	std	Z+1, r21	; 0x01
    18f4:	40 83       	st	Z, r20
	uchar controlString[100];
	uchar e;

	// address device
	gpib_send_address(primary, secondary);
    18f6:	fe 01       	movw	r30, r28
    18f8:	ea 59       	subi	r30, 0x9A	; 154
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	de 01       	movw	r26, r28
    18fe:	a9 59       	subi	r26, 0x99	; 153
    1900:	bf 4f       	sbci	r27, 0xFF	; 255
    1902:	80 81       	ld	r24, Z
    1904:	6c 91       	ld	r22, X
    1906:	0e 94 64 05 	call	0xac8	; 0xac8 <gpib_send_address>

	// now receive data
	//uart_puts("before status byte receive\r\n");
	e = gpib_receive(b);
    190a:	fe 01       	movw	r30, r28
    190c:	e8 59       	subi	r30, 0x98	; 152
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	80 81       	ld	r24, Z
    1912:	91 81       	ldd	r25, Z+1	; 0x01
    1914:	0e 94 19 06 	call	0xc32	; 0xc32 <gpib_receive>
    1918:	89 83       	std	Y+1, r24	; 0x01
	//uart_puts("after status byte receive\r\n");
	// status byte is now in b
	if (secondary != ADDRESS_NOT_SET) {
    191a:	fe 01       	movw	r30, r28
    191c:	e9 59       	subi	r30, 0x99	; 153
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	80 81       	ld	r24, Z
    1922:	8f 3f       	cpi	r24, 0xFF	; 255
    1924:	09 f4       	brne	.+2      	; 0x1928 <gpib_spoll_single+0x62>
    1926:	3f c0       	rjmp	.+126    	; 0x19a6 <gpib_spoll_single+0xe0>
		sprintf((char*) controlString,
    1928:	fe 01       	movw	r30, r28
    192a:	e8 59       	subi	r30, 0x98	; 152
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	01 90       	ld	r0, Z+
    1930:	f0 81       	ld	r31, Z
    1932:	e0 2d       	mov	r30, r0
    1934:	80 81       	ld	r24, Z
    1936:	48 2f       	mov	r20, r24
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	fe 01       	movw	r30, r28
    193c:	ea 59       	subi	r30, 0x9A	; 154
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	80 81       	ld	r24, Z
    1942:	88 2f       	mov	r24, r24
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	bc 01       	movw	r22, r24
    1948:	60 54       	subi	r22, 0x40	; 64
    194a:	70 40       	sbci	r23, 0x00	; 0
    194c:	fe 01       	movw	r30, r28
    194e:	e9 59       	subi	r30, 0x99	; 153
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	80 81       	ld	r24, Z
    1954:	88 2f       	mov	r24, r24
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9c 01       	movw	r18, r24
    195a:	2f 79       	andi	r18, 0x9F	; 159
    195c:	30 70       	andi	r19, 0x00	; 0
    195e:	8d b7       	in	r24, 0x3d	; 61
    1960:	9e b7       	in	r25, 0x3e	; 62
    1962:	0a 97       	sbiw	r24, 0x0a	; 10
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	9e bf       	out	0x3e, r25	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	8d bf       	out	0x3d, r24	; 61
    196e:	ed b7       	in	r30, 0x3d	; 61
    1970:	fe b7       	in	r31, 0x3e	; 62
    1972:	31 96       	adiw	r30, 0x01	; 1
    1974:	ce 01       	movw	r24, r28
    1976:	02 96       	adiw	r24, 0x02	; 2
    1978:	91 83       	std	Z+1, r25	; 0x01
    197a:	80 83       	st	Z, r24
    197c:	83 e9       	ldi	r24, 0x93	; 147
    197e:	91 e0       	ldi	r25, 0x01	; 1
    1980:	93 83       	std	Z+3, r25	; 0x03
    1982:	82 83       	std	Z+2, r24	; 0x02
    1984:	55 83       	std	Z+5, r21	; 0x05
    1986:	44 83       	std	Z+4, r20	; 0x04
    1988:	77 83       	std	Z+7, r23	; 0x07
    198a:	66 83       	std	Z+6, r22	; 0x06
    198c:	31 87       	std	Z+9, r19	; 0x09
    198e:	20 87       	std	Z+8, r18	; 0x08
    1990:	0e 94 35 02 	call	0x46a	; 0x46a <sprintf>
    1994:	8d b7       	in	r24, 0x3d	; 61
    1996:	9e b7       	in	r25, 0x3e	; 62
    1998:	0a 96       	adiw	r24, 0x0a	; 10
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	9e bf       	out	0x3e, r25	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	8d bf       	out	0x3d, r24	; 61
    19a4:	33 c0       	rjmp	.+102    	; 0x1a0c <gpib_spoll_single+0x146>
				"Status byte 0x%02x from device(primary,secondary) = (0x%02x,0x%02x)\n\r",
				*b, TalkerAddress2Address(primary),
				secondaryAdressByteToAdress(secondary));
	} else {
		sprintf((char*) controlString,
    19a6:	fe 01       	movw	r30, r28
    19a8:	e8 59       	subi	r30, 0x98	; 152
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	01 90       	ld	r0, Z+
    19ae:	f0 81       	ld	r31, Z
    19b0:	e0 2d       	mov	r30, r0
    19b2:	80 81       	ld	r24, Z
    19b4:	48 2f       	mov	r20, r24
    19b6:	50 e0       	ldi	r21, 0x00	; 0
    19b8:	fe 01       	movw	r30, r28
    19ba:	ea 59       	subi	r30, 0x9A	; 154
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	80 81       	ld	r24, Z
    19c0:	88 2f       	mov	r24, r24
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	9c 01       	movw	r18, r24
    19c6:	20 54       	subi	r18, 0x40	; 64
    19c8:	30 40       	sbci	r19, 0x00	; 0
    19ca:	8d b7       	in	r24, 0x3d	; 61
    19cc:	9e b7       	in	r25, 0x3e	; 62
    19ce:	08 97       	sbiw	r24, 0x08	; 8
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	9e bf       	out	0x3e, r25	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	8d bf       	out	0x3d, r24	; 61
    19da:	ed b7       	in	r30, 0x3d	; 61
    19dc:	fe b7       	in	r31, 0x3e	; 62
    19de:	31 96       	adiw	r30, 0x01	; 1
    19e0:	ce 01       	movw	r24, r28
    19e2:	02 96       	adiw	r24, 0x02	; 2
    19e4:	91 83       	std	Z+1, r25	; 0x01
    19e6:	80 83       	st	Z, r24
    19e8:	89 ed       	ldi	r24, 0xD9	; 217
    19ea:	91 e0       	ldi	r25, 0x01	; 1
    19ec:	93 83       	std	Z+3, r25	; 0x03
    19ee:	82 83       	std	Z+2, r24	; 0x02
    19f0:	55 83       	std	Z+5, r21	; 0x05
    19f2:	44 83       	std	Z+4, r20	; 0x04
    19f4:	37 83       	std	Z+7, r19	; 0x07
    19f6:	26 83       	std	Z+6, r18	; 0x06
    19f8:	0e 94 35 02 	call	0x46a	; 0x46a <sprintf>
    19fc:	8d b7       	in	r24, 0x3d	; 61
    19fe:	9e b7       	in	r25, 0x3e	; 62
    1a00:	08 96       	adiw	r24, 0x08	; 8
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	9e bf       	out	0x3e, r25	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	8d bf       	out	0x3d, r24	; 61
				"Status byte 0x%02x from device(primary) = 0x%02x\n\r", *b,
				TalkerAddress2Address(primary));
	}
	uart_puts((char*) controlString);
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	02 96       	adiw	r24, 0x02	; 2
    1a10:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	gpib_untalkUnlisten();
    1a14:	0e 94 f6 05 	call	0xbec	; 0xbec <gpib_untalkUnlisten>
	return e;
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a1a:	c7 59       	subi	r28, 0x97	; 151
    1a1c:	df 4f       	sbci	r29, 0xFF	; 255
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <gpib_serial_poll>:
 * I haven't looked how a device with two byte address behaves.
 *
 * Secondary/primary is returned in inout parameters
 * If any emitter is found, return value is != 0.
 */
uchar gpib_serial_poll(uint8_t *primary_v, uint8_t* secondary_v) {
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	2d 97       	sbiw	r28, 0x0d	; 13
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	9b 87       	std	Y+11, r25	; 0x0b
    1a44:	8a 87       	std	Y+10, r24	; 0x0a
    1a46:	7d 87       	std	Y+13, r23	; 0x0d
    1a48:	6c 87       	std	Y+12, r22	; 0x0c
	uchar b, e;
	uchar primary = 0, secondary, found = 0, foundPrimary = ADDRESS_NOT_SET,
    1a4a:	1f 82       	std	Y+7, r1	; 0x07
    1a4c:	1d 82       	std	Y+5, r1	; 0x05
    1a4e:	8f ef       	ldi	r24, 0xFF	; 255
    1a50:	8c 83       	std	Y+4, r24	; 0x04
			foundSecondary = ADDRESS_NOT_SET;
    1a52:	8f ef       	ldi	r24, 0xFF	; 255
    1a54:	8b 83       	std	Y+3, r24	; 0x03
	int i;

	// send unlisten and untalk to all
	gpib_untalkUnlisten();
    1a56:	0e 94 f6 05 	call	0xbec	; 0xbec <gpib_untalkUnlisten>

	// serial poll sequence start
	gpib_spoll_start();
    1a5a:	0e 94 39 0c 	call	0x1872	; 0x1872 <gpib_spoll_start>

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    1a5e:	1a 82       	std	Y+2, r1	; 0x02
    1a60:	19 82       	std	Y+1, r1	; 0x01
    1a62:	a2 c0       	rjmp	.+324    	; 0x1ba8 <gpib_serial_poll+0x17a>
			i++) {

		// set partner to talker mode
		primary = address2TalkerAddress(controller.partners[i].primary);
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	9a 81       	ldd	r25, Y+2	; 0x02
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	ef 57       	subi	r30, 0x7F	; 127
    1a70:	fb 4f       	sbci	r31, 0xFB	; 251
    1a72:	80 81       	ld	r24, Z
    1a74:	80 5c       	subi	r24, 0xC0	; 192
    1a76:	8f 83       	std	Y+7, r24	; 0x07
		if (controller.partners[i].secondary != ADDRESS_NOT_SET) {
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7c:	03 96       	adiw	r24, 0x03	; 3
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	fc 01       	movw	r30, r24
    1a84:	e4 58       	subi	r30, 0x84	; 132
    1a86:	fb 4f       	sbci	r31, 0xFB	; 251
    1a88:	80 81       	ld	r24, Z
    1a8a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a8c:	61 f0       	breq	.+24     	; 0x1aa6 <gpib_serial_poll+0x78>
			secondary = secondaryAdressToAdressByte(
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	9a 81       	ldd	r25, Y+2	; 0x02
    1a92:	03 96       	adiw	r24, 0x03	; 3
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	fc 01       	movw	r30, r24
    1a9a:	e4 58       	subi	r30, 0x84	; 132
    1a9c:	fb 4f       	sbci	r31, 0xFB	; 251
    1a9e:	80 81       	ld	r24, Z
    1aa0:	80 66       	ori	r24, 0x60	; 96
    1aa2:	8e 83       	std	Y+6, r24	; 0x06
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <gpib_serial_poll+0x7c>
					controller.partners[i].secondary);
		} else {
			secondary = ADDRESS_NOT_SET;
    1aa6:	8f ef       	ldi	r24, 0xFF	; 255
    1aa8:	8e 83       	std	Y+6, r24	; 0x06
		}
		// query status byte from device
		e = gpib_spoll_single(primary, secondary, &b);
    1aaa:	9e 01       	movw	r18, r28
    1aac:	27 5f       	subi	r18, 0xF7	; 247
    1aae:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab2:	6e 81       	ldd	r22, Y+6	; 0x06
    1ab4:	a9 01       	movw	r20, r18
    1ab6:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <gpib_spoll_single>
    1aba:	88 87       	std	Y+8, r24	; 0x08

		// bit 6 of status byte of SRQ emitter is 1; check this
		// when reading status byte from emitter, he releases SRQ line (may also be tested here)
		if (b & (1 << 6)) {
    1abc:	89 85       	ldd	r24, Y+9	; 0x09
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	80 74       	andi	r24, 0x40	; 64
    1ac4:	90 70       	andi	r25, 0x00	; 0
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <gpib_serial_poll+0x9e>
    1aca:	69 c0       	rjmp	.+210    	; 0x1b9e <gpib_serial_poll+0x170>
			found = 1;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	8d 83       	std	Y+5, r24	; 0x05
			foundPrimary = controller.partners[i].primary;
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	fc 01       	movw	r30, r24
    1ada:	ef 57       	subi	r30, 0x7F	; 127
    1adc:	fb 4f       	sbci	r31, 0xFB	; 251
    1ade:	80 81       	ld	r24, Z
    1ae0:	8c 83       	std	Y+4, r24	; 0x04
			foundSecondary = controller.partners[i].secondary;
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae6:	03 96       	adiw	r24, 0x03	; 3
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	fc 01       	movw	r30, r24
    1aee:	e4 58       	subi	r30, 0x84	; 132
    1af0:	fb 4f       	sbci	r31, 0xFB	; 251
    1af2:	80 81       	ld	r24, Z
    1af4:	8b 83       	std	Y+3, r24	; 0x03
			if (controller.partners[i].secondary != ADDRESS_NOT_SET) {
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	9a 81       	ldd	r25, Y+2	; 0x02
    1afa:	03 96       	adiw	r24, 0x03	; 3
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	fc 01       	movw	r30, r24
    1b02:	e4 58       	subi	r30, 0x84	; 132
    1b04:	fb 4f       	sbci	r31, 0xFB	; 251
    1b06:	80 81       	ld	r24, Z
    1b08:	8f 3f       	cpi	r24, 0xFF	; 255
    1b0a:	41 f1       	breq	.+80     	; 0x1b5c <gpib_serial_poll+0x12e>
				sprintf((char*) cmd_buf,
    1b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	48 2f       	mov	r20, r24
    1b16:	50 e0       	ldi	r21, 0x00	; 0
    1b18:	8d b7       	in	r24, 0x3d	; 61
    1b1a:	9e b7       	in	r25, 0x3e	; 62
    1b1c:	08 97       	sbiw	r24, 0x08	; 8
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	9e bf       	out	0x3e, r25	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	8d bf       	out	0x3d, r24	; 61
    1b28:	ed b7       	in	r30, 0x3d	; 61
    1b2a:	fe b7       	in	r31, 0x3e	; 62
    1b2c:	31 96       	adiw	r30, 0x01	; 1
    1b2e:	84 e3       	ldi	r24, 0x34	; 52
    1b30:	95 e0       	ldi	r25, 0x05	; 5
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
    1b36:	8c e0       	ldi	r24, 0x0C	; 12
    1b38:	92 e0       	ldi	r25, 0x02	; 2
    1b3a:	93 83       	std	Z+3, r25	; 0x03
    1b3c:	82 83       	std	Z+2, r24	; 0x02
    1b3e:	35 83       	std	Z+5, r19	; 0x05
    1b40:	24 83       	std	Z+4, r18	; 0x04
    1b42:	57 83       	std	Z+7, r21	; 0x07
    1b44:	46 83       	std	Z+6, r20	; 0x06
    1b46:	0e 94 35 02 	call	0x46a	; 0x46a <sprintf>
    1b4a:	8d b7       	in	r24, 0x3d	; 61
    1b4c:	9e b7       	in	r25, 0x3e	; 62
    1b4e:	08 96       	adiw	r24, 0x08	; 8
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	9e bf       	out	0x3e, r25	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	8d bf       	out	0x3d, r24	; 61
    1b5a:	1d c0       	rjmp	.+58     	; 0x1b96 <gpib_serial_poll+0x168>
						"SRQ emitter is device(primary,secondary) = (0x%02x,0x%02x)\n\r",
						foundPrimary, foundSecondary);
			} else {
				sprintf((char*) cmd_buf,
    1b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <gpib_serial_poll+0x136>
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <gpib_serial_poll+0x138>
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <gpib_serial_poll+0x13a>
    1b68:	ed b7       	in	r30, 0x3d	; 61
    1b6a:	fe b7       	in	r31, 0x3e	; 62
    1b6c:	31 96       	adiw	r30, 0x01	; 1
    1b6e:	84 e3       	ldi	r24, 0x34	; 52
    1b70:	95 e0       	ldi	r25, 0x05	; 5
    1b72:	91 83       	std	Z+1, r25	; 0x01
    1b74:	80 83       	st	Z, r24
    1b76:	89 e4       	ldi	r24, 0x49	; 73
    1b78:	92 e0       	ldi	r25, 0x02	; 2
    1b7a:	93 83       	std	Z+3, r25	; 0x03
    1b7c:	82 83       	std	Z+2, r24	; 0x02
    1b7e:	35 83       	std	Z+5, r19	; 0x05
    1b80:	24 83       	std	Z+4, r18	; 0x04
    1b82:	0e 94 35 02 	call	0x46a	; 0x46a <sprintf>
    1b86:	8d b7       	in	r24, 0x3d	; 61
    1b88:	9e b7       	in	r25, 0x3e	; 62
    1b8a:	06 96       	adiw	r24, 0x06	; 6
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	9e bf       	out	0x3e, r25	; 62
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	8d bf       	out	0x3d, r24	; 61
						"SRQ emitter is device(primary) = 0x%02x\n\r",
						foundPrimary);
			}
			uart_puts((char*) cmd_buf);
    1b96:	84 e3       	ldi	r24, 0x34	; 52
    1b98:	95 e0       	ldi	r25, 0x05	; 5
    1b9a:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
	// serial poll sequence start
	gpib_spoll_start();

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
			i++) {
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01

	// serial poll sequence start
	gpib_spoll_start();

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	ef 57       	subi	r30, 0x7F	; 127
    1bb4:	fb 4f       	sbci	r31, 0xFB	; 251
    1bb6:	80 81       	ld	r24, Z
    1bb8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bba:	21 f0       	breq	.+8      	; 0x1bc4 <gpib_serial_poll+0x196>
    1bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbe:	88 23       	and	r24, r24
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <gpib_serial_poll+0x196>
    1bc2:	50 cf       	rjmp	.-352    	; 0x1a64 <gpib_serial_poll+0x36>
			uart_puts((char*) cmd_buf);
		}
	}

	// serial poll sequence end
	gpib_spoll_end(cmd_buf);
    1bc4:	84 e3       	ldi	r24, 0x34	; 52
    1bc6:	95 e0       	ldi	r25, 0x05	; 5
    1bc8:	0e 94 4e 0c 	call	0x189c	; 0x189c <gpib_spoll_end>

	// "return" values determined
	*primary_v = foundPrimary;
    1bcc:	ea 85       	ldd	r30, Y+10	; 0x0a
    1bce:	fb 85       	ldd	r31, Y+11	; 0x0b
    1bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd2:	80 83       	st	Z, r24
	*secondary_v = foundSecondary;
    1bd4:	ec 85       	ldd	r30, Y+12	; 0x0c
    1bd6:	fd 85       	ldd	r31, Y+13	; 0x0d
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	80 83       	st	Z, r24

	return found;
    1bdc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1bde:	2d 96       	adiw	r28, 0x0d	; 13
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <gpib_set_partner_address>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_address(uchar primary, uchar secondary) {
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <gpib_set_partner_address+0x6>
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	6a 83       	std	Y+2, r22	; 0x02
	controller.partner.primary = primary;
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	80 93 7d 04 	sts	0x047D, r24
	controller.partner.secondary = secondary;
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	80 93 7e 04 	sts	0x047E, r24
}
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <gpib_set_partner_secondary>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_secondary(uchar secondary) {
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	0f 92       	push	r0
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	89 83       	std	Y+1, r24	; 0x01
	controller.partner.secondary = secondary;
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	80 93 7e 04 	sts	0x047E, r24
}
    1c26:	0f 90       	pop	r0
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <gpib_get_partner_pad>:

/**
 * Get primary address of device currently controlled.
 * \returns primary address Address of device.
 */
uchar gpib_get_partner_pad(void) {
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.primary;
    1c36:	80 91 7d 04 	lds	r24, 0x047D
}
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <gpib_get_partner_sad>:

/**
 * Get secondary address of device currently controlled.
 * \returns secondary address Address of device.
 */
uchar gpib_get_partner_sad(void) {
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.secondary;
    1c48:	80 91 7e 04 	lds	r24, 0x047E
}
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <gpib_get_address>:

/**
 * Get controller address.
 * \returns address of controller.
 */
uchar gpib_get_address(void) {
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
	return controller.myaddress;
    1c5a:	80 91 7c 04 	lds	r24, 0x047C
}
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	08 95       	ret

00001c64 <gpib_set_flavour>:

void gpib_set_flavour(uchar flavour) {
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	0f 92       	push	r0
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	89 83       	std	Y+1, r24	; 0x01
	controller.flavour = flavour;
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	80 93 80 04 	sts	0x0480, r24
}
    1c76:	0f 90       	pop	r0
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <gpib_get_flavour>:

uchar gpib_get_flavour(void) {
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
	return controller.flavour;
    1c86:	80 91 80 04 	lds	r24, 0x0480
}
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	08 95       	ret

00001c90 <gpib_clear_partners>:

/**
 * Clear partners list
 */
void gpib_clear_partners() {
    1c90:	df 93       	push	r29
    1c92:	cf 93       	push	r28
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <gpib_clear_partners+0x6>
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < MAX_PARTNER; i++) {
    1c9a:	1a 82       	std	Y+2, r1	; 0x02
    1c9c:	19 82       	std	Y+1, r1	; 0x01
    1c9e:	0e c0       	rjmp	.+28     	; 0x1cbc <gpib_clear_partners+0x2c>
		controller.partners[i].primary = ADDRESS_NOT_SET;
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	fc 01       	movw	r30, r24
    1caa:	ef 57       	subi	r30, 0x7F	; 127
    1cac:	fb 4f       	sbci	r31, 0xFB	; 251
    1cae:	8f ef       	ldi	r24, 0xFF	; 255
    1cb0:	80 83       	st	Z, r24

/**
 * Clear partners list
 */
void gpib_clear_partners() {
	for (int i = 0; i < MAX_PARTNER; i++) {
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb6:	01 96       	adiw	r24, 0x01	; 1
    1cb8:	9a 83       	std	Y+2, r25	; 0x02
    1cba:	89 83       	std	Y+1, r24	; 0x01
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc0:	85 30       	cpi	r24, 0x05	; 5
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	6c f3       	brlt	.-38     	; 0x1ca0 <gpib_clear_partners+0x10>
		controller.partners[i].primary = ADDRESS_NOT_SET;
	}
}
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <gpib_add_partner_address>:

/**
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <gpib_add_partner_address+0x6>
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <gpib_add_partner_address+0x8>
    1cd8:	0f 92       	push	r0
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	8b 83       	std	Y+3, r24	; 0x03
    1ce0:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1ce2:	1a 82       	std	Y+2, r1	; 0x02
    1ce4:	19 82       	std	Y+1, r1	; 0x01
    1ce6:	05 c0       	rjmp	.+10     	; 0x1cf2 <gpib_add_partner_address+0x22>
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
			i++) {
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	01 96       	adiw	r24, 0x01	; 1
    1cee:	9a 83       	std	Y+2, r25	; 0x02
    1cf0:	89 83       	std	Y+1, r24	; 0x01
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf6:	85 30       	cpi	r24, 0x05	; 5
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	54 f4       	brge	.+20     	; 0x1d10 <gpib_add_partner_address+0x40>
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	fc 01       	movw	r30, r24
    1d06:	ef 57       	subi	r30, 0x7F	; 127
    1d08:	fb 4f       	sbci	r31, 0xFB	; 251
    1d0a:	80 81       	ld	r24, Z
    1d0c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d0e:	61 f7       	brne	.-40     	; 0x1ce8 <gpib_add_partner_address+0x18>
			i++) {
	}
	if (i == MAX_PARTNER) {
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	9a 81       	ldd	r25, Y+2	; 0x02
    1d14:	85 30       	cpi	r24, 0x05	; 5
    1d16:	91 05       	cpc	r25, r1
    1d18:	39 f4       	brne	.+14     	; 0x1d28 <gpib_add_partner_address+0x58>
		uart_puts("Too much partners.\n\r");
    1d1a:	83 e7       	ldi	r24, 0x73	; 115
    1d1c:	92 e0       	ldi	r25, 0x02	; 2
    1d1e:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
		return 1;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	8d 83       	std	Y+5, r24	; 0x05
    1d26:	14 c0       	rjmp	.+40     	; 0x1d50 <gpib_add_partner_address+0x80>
	}
	controller.partners[i].primary = primary;
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2c:	88 0f       	add	r24, r24
    1d2e:	99 1f       	adc	r25, r25
    1d30:	fc 01       	movw	r30, r24
    1d32:	ef 57       	subi	r30, 0x7F	; 127
    1d34:	fb 4f       	sbci	r31, 0xFB	; 251
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	80 83       	st	Z, r24
	controller.partners[i].secondary = secondary;
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3e:	03 96       	adiw	r24, 0x03	; 3
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	fc 01       	movw	r30, r24
    1d46:	e4 58       	subi	r30, 0x84	; 132
    1d48:	fb 4f       	sbci	r31, 0xFB	; 251
    1d4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4c:	80 83       	st	Z, r24
	return 0;
    1d4e:	1d 82       	std	Y+5, r1	; 0x05
    1d50:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <gpib_remove_partner_address>:

/**
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <gpib_remove_partner_address+0x6>
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <gpib_remove_partner_address+0x8>
    1d6a:	0f 92       	push	r0
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	8b 83       	std	Y+3, r24	; 0x03
    1d72:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1d74:	1a 82       	std	Y+2, r1	; 0x02
    1d76:	19 82       	std	Y+1, r1	; 0x01
    1d78:	05 c0       	rjmp	.+10     	; 0x1d84 <gpib_remove_partner_address+0x22>
			i < MAX_PARTNER
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7e:	01 96       	adiw	r24, 0x01	; 1
    1d80:	9a 83       	std	Y+2, r25	; 0x02
    1d82:	89 83       	std	Y+1, r24	; 0x01
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	9a 81       	ldd	r25, Y+2	; 0x02
    1d88:	85 30       	cpi	r24, 0x05	; 5
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	bc f4       	brge	.+46     	; 0x1dbc <gpib_remove_partner_address+0x5a>
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	9a 81       	ldd	r25, Y+2	; 0x02
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	fc 01       	movw	r30, r24
    1d98:	ef 57       	subi	r30, 0x7F	; 127
    1d9a:	fb 4f       	sbci	r31, 0xFB	; 251
    1d9c:	90 81       	ld	r25, Z
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	98 17       	cp	r25, r24
    1da2:	59 f7       	brne	.-42     	; 0x1d7a <gpib_remove_partner_address+0x18>
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	9a 81       	ldd	r25, Y+2	; 0x02
    1da8:	03 96       	adiw	r24, 0x03	; 3
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	fc 01       	movw	r30, r24
    1db0:	e4 58       	subi	r30, 0x84	; 132
    1db2:	fb 4f       	sbci	r31, 0xFB	; 251
    1db4:	90 81       	ld	r25, Z
    1db6:	8c 81       	ldd	r24, Y+4	; 0x04
    1db8:	98 17       	cp	r25, r24
    1dba:	f9 f6       	brne	.-66     	; 0x1d7a <gpib_remove_partner_address+0x18>
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
	}
	if (i == MAX_PARTNER) {
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc0:	85 30       	cpi	r24, 0x05	; 5
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	39 f4       	brne	.+14     	; 0x1dd4 <gpib_remove_partner_address+0x72>
		uart_puts("Partner unknown.\n\r");
    1dc6:	88 e8       	ldi	r24, 0x88	; 136
    1dc8:	92 e0       	ldi	r25, 0x02	; 2
    1dca:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
		return 1;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
    1dd2:	14 c0       	rjmp	.+40     	; 0x1dfc <gpib_remove_partner_address+0x9a>
	}
	controller.partners[i].primary = ADDRESS_NOT_SET;
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	fc 01       	movw	r30, r24
    1dde:	ef 57       	subi	r30, 0x7F	; 127
    1de0:	fb 4f       	sbci	r31, 0xFB	; 251
    1de2:	8f ef       	ldi	r24, 0xFF	; 255
    1de4:	80 83       	st	Z, r24
	controller.partners[i].secondary = ADDRESS_NOT_SET;
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dea:	03 96       	adiw	r24, 0x03	; 3
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	fc 01       	movw	r30, r24
    1df2:	e4 58       	subi	r30, 0x84	; 132
    1df4:	fb 4f       	sbci	r31, 0xFB	; 251
    1df6:	8f ef       	ldi	r24, 0xFF	; 255
    1df8:	80 83       	st	Z, r24
	return 0;
    1dfa:	1d 82       	std	Y+5, r1	; 0x05
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <gpib_device_exists>:
/**
 * Returns true if device exists.
 *
 * Existence is checked by reading in the status byte of the device in a serial poll sequence.
 */
uchar gpib_device_exists(uchar primary, uchar secondary) {
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	27 97       	sbiw	r28, 0x07	; 7
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	8d 83       	std	Y+5, r24	; 0x05
    1e24:	6e 83       	std	Y+6, r22	; 0x06
	uchar b, e;
	uchar found = 0, foundPhysical = ADDRESS_NOT_SET;
    1e26:	1a 82       	std	Y+2, r1	; 0x02
    1e28:	8f ef       	ldi	r24, 0xFF	; 255
    1e2a:	89 83       	std	Y+1, r24	; 0x01

	// send unlisten and untalk to all
	gpib_untalkUnlisten();
    1e2c:	0e 94 f6 05 	call	0xbec	; 0xbec <gpib_untalkUnlisten>

	// serial poll sequence start
	gpib_spoll_start();
    1e30:	0e 94 39 0c 	call	0x1872	; 0x1872 <gpib_spoll_start>

	// TODO: do next line with a timeout!!!
	// query status byte from device
	e = gpib_spoll_single(primary, secondary, &b);
    1e34:	9e 01       	movw	r18, r28
    1e36:	2c 5f       	subi	r18, 0xFC	; 252
    1e38:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3c:	6e 81       	ldd	r22, Y+6	; 0x06
    1e3e:	a9 01       	movw	r20, r18
    1e40:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <gpib_spoll_single>
    1e44:	8b 83       	std	Y+3, r24	; 0x03

	// serial poll sequence end
	gpib_spoll_end(cmd_buf);
    1e46:	84 e3       	ldi	r24, 0x34	; 52
    1e48:	95 e0       	ldi	r25, 0x05	; 5
    1e4a:	0e 94 4e 0c 	call	0x189c	; 0x189c <gpib_spoll_end>

	return e != 0xff;
    1e4e:	1f 82       	std	Y+7, r1	; 0x07
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	8f 3f       	cpi	r24, 0xFF	; 255
    1e54:	11 f0       	breq	.+4      	; 0x1e5a <gpib_device_exists+0x4c>
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	8f 83       	std	Y+7, r24	; 0x07
    1e5a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1e5c:	27 96       	adiw	r28, 0x07	; 7
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	de bf       	out	0x3e, r29	; 62
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	cd bf       	out	0x3d, r28	; 61
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <gpib_find_devices>:

void gpib_find_devices(uchar maxAddress) {
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    1e76:	e5 97       	sbiw	r28, 0x35	; 53
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	de bf       	out	0x3e, r29	; 62
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	cd bf       	out	0x3d, r28	; 61
    1e82:	8d ab       	std	Y+53, r24	; 0x35
	char txt[50];
	for (int i = 1; i < maxAddress; i++) {
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	9a 83       	std	Y+2, r25	; 0x02
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	39 c0       	rjmp	.+114    	; 0x1f00 <gpib_find_devices+0x92>
		if (gpib_device_exists(address2TalkerAddress(i), ADDRESS_NOT_SET)) {
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	80 5c       	subi	r24, 0xC0	; 192
    1e92:	6f ef       	ldi	r22, 0xFF	; 255
    1e94:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <gpib_device_exists>
    1e98:	88 23       	and	r24, r24
    1e9a:	99 f0       	breq	.+38     	; 0x1ec2 <gpib_find_devices+0x54>
			sprintf("Device found at address: %d", i);
    1e9c:	29 81       	ldd	r18, Y+1	; 0x01
    1e9e:	3a 81       	ldd	r19, Y+2	; 0x02
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <gpib_find_devices+0x34>
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <gpib_find_devices+0x36>
    1ea4:	ed b7       	in	r30, 0x3d	; 61
    1ea6:	fe b7       	in	r31, 0x3e	; 62
    1ea8:	31 96       	adiw	r30, 0x01	; 1
    1eaa:	8b e9       	ldi	r24, 0x9B	; 155
    1eac:	92 e0       	ldi	r25, 0x02	; 2
    1eae:	91 83       	std	Z+1, r25	; 0x01
    1eb0:	80 83       	st	Z, r24
    1eb2:	33 83       	std	Z+3, r19	; 0x03
    1eb4:	22 83       	std	Z+2, r18	; 0x02
    1eb6:	0e 94 35 02 	call	0x46a	; 0x46a <sprintf>
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
		}
		if (gpib_device_exists(address2TalkerAddress(i), 0)) {
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	80 5c       	subi	r24, 0xC0	; 192
    1ec6:	60 e0       	ldi	r22, 0x00	; 0
    1ec8:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <gpib_device_exists>
    1ecc:	88 23       	and	r24, r24
    1ece:	99 f0       	breq	.+38     	; 0x1ef6 <gpib_find_devices+0x88>
			sprintf("Device found at address: (%d,0)", i);
    1ed0:	29 81       	ldd	r18, Y+1	; 0x01
    1ed2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <gpib_find_devices+0x68>
    1ed6:	00 d0       	rcall	.+0      	; 0x1ed8 <gpib_find_devices+0x6a>
    1ed8:	ed b7       	in	r30, 0x3d	; 61
    1eda:	fe b7       	in	r31, 0x3e	; 62
    1edc:	31 96       	adiw	r30, 0x01	; 1
    1ede:	87 eb       	ldi	r24, 0xB7	; 183
    1ee0:	92 e0       	ldi	r25, 0x02	; 2
    1ee2:	91 83       	std	Z+1, r25	; 0x01
    1ee4:	80 83       	st	Z, r24
    1ee6:	33 83       	std	Z+3, r19	; 0x03
    1ee8:	22 83       	std	Z+2, r18	; 0x02
    1eea:	0e 94 35 02 	call	0x46a	; 0x46a <sprintf>
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
	return e != 0xff;
}

void gpib_find_devices(uchar maxAddress) {
	char txt[50];
	for (int i = 1; i < maxAddress; i++) {
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    1efa:	01 96       	adiw	r24, 0x01	; 1
    1efc:	9a 83       	std	Y+2, r25	; 0x02
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	8d a9       	ldd	r24, Y+53	; 0x35
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	82 17       	cp	r24, r18
    1f0c:	93 07       	cpc	r25, r19
    1f0e:	0c f4       	brge	.+2      	; 0x1f12 <gpib_find_devices+0xa4>
    1f10:	be cf       	rjmp	.-132    	; 0x1e8e <gpib_find_devices+0x20>
		}
		if (gpib_device_exists(address2TalkerAddress(i), 0)) {
			sprintf("Device found at address: (%d,0)", i);
		}
	}
}
    1f12:	e5 96       	adiw	r28, 0x35	; 53
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <stringToTwoUchars>:

/**
 * Read two integers from string like "45 56" or one integer. In latter case
 * the second integer is initialized with a special value.
 */
static void stringToTwoUchars(char *string, uchar *a, uchar *b) {
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	28 97       	sbiw	r28, 0x08	; 8
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	9c 83       	std	Y+4, r25	; 0x04
    1f3a:	8b 83       	std	Y+3, r24	; 0x03
    1f3c:	7e 83       	std	Y+6, r23	; 0x06
    1f3e:	6d 83       	std	Y+5, r22	; 0x05
    1f40:	58 87       	std	Y+8, r21	; 0x08
    1f42:	4f 83       	std	Y+7, r20	; 0x07
	char *token = strtok(string, " ");
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	27 ed       	ldi	r18, 0xD7	; 215
    1f4a:	32 e0       	ldi	r19, 0x02	; 2
    1f4c:	b9 01       	movw	r22, r18
    1f4e:	0e 94 df 01 	call	0x3be	; 0x3be <strtok>
    1f52:	9a 83       	std	Y+2, r25	; 0x02
    1f54:	89 83       	std	Y+1, r24	; 0x01
	*a = atoi((char*) token);
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5a:	0e 94 c1 01 	call	0x382	; 0x382 <atoi>
    1f5e:	ed 81       	ldd	r30, Y+5	; 0x05
    1f60:	fe 81       	ldd	r31, Y+6	; 0x06
    1f62:	80 83       	st	Z, r24
	token = strtok(NULL, " ");
    1f64:	27 ed       	ldi	r18, 0xD7	; 215
    1f66:	32 e0       	ldi	r19, 0x02	; 2
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	b9 01       	movw	r22, r18
    1f6e:	0e 94 df 01 	call	0x3be	; 0x3be <strtok>
    1f72:	9a 83       	std	Y+2, r25	; 0x02
    1f74:	89 83       	std	Y+1, r24	; 0x01
	if (token != NULL) {
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7a:	00 97       	sbiw	r24, 0x00	; 0
    1f7c:	41 f0       	breq	.+16     	; 0x1f8e <stringToTwoUchars+0x6a>
		*b = atoi((char*) token);
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	0e 94 c1 01 	call	0x382	; 0x382 <atoi>
    1f86:	ef 81       	ldd	r30, Y+7	; 0x07
    1f88:	f8 85       	ldd	r31, Y+8	; 0x08
    1f8a:	80 83       	st	Z, r24
    1f8c:	04 c0       	rjmp	.+8      	; 0x1f96 <stringToTwoUchars+0x72>
	} else {
		*b = ADDRESS_NOT_SET;
    1f8e:	ef 81       	ldd	r30, Y+7	; 0x07
    1f90:	f8 85       	ldd	r31, Y+8	; 0x08
    1f92:	8f ef       	ldi	r24, 0xFF	; 255
    1f94:	80 83       	st	Z, r24
	}
}
    1f96:	28 96       	adiw	r28, 0x08	; 8
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <check_errors>:
 * Checks for errors.
 *
 * Reads error queue. output is one error per line.
 *
 */
void check_errors() {
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	c7 55       	subi	r28, 0x57	; 87
    1fb2:	d0 40       	sbci	r29, 0x00	; 0
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
	char *error_cmd = "SYST:ERR?";
    1fbe:	89 ed       	ldi	r24, 0xD9	; 217
    1fc0:	92 e0       	ldi	r25, 0x02	; 2
    1fc2:	9e 83       	std	Y+6, r25	; 0x06
    1fc4:	8d 83       	std	Y+5, r24	; 0x05
	uchar msg[80];
	uchar b, e;
	uchar colptr = 0;
    1fc6:	1b 82       	std	Y+3, r1	; 0x03
	uchar allErrorsRead = 0;
    1fc8:	1a 82       	std	Y+2, r1	; 0x02
    1fca:	48 c0       	rjmp	.+144    	; 0x205c <check_errors+0xb4>

	while (!allErrorsRead) {
		gpib_write_command(error_cmd);
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd0:	0e 94 66 08 	call	0x10cc	; 0x10cc <gpib_write_command>
		gpib_prepare_read();
    1fd4:	0e 94 c1 05 	call	0xb82	; 0xb82 <gpib_prepare_read>
		// read the answer until EOI is detected (then e becomes true)
		uchar i = 0;
    1fd8:	19 82       	std	Y+1, r1	; 0x01
		do {
			// gpib bus receive
			e = gpib_receive(&b);
    1fda:	ce 01       	movw	r24, r28
    1fdc:	89 5a       	subi	r24, 0xA9	; 169
    1fde:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe0:	0e 94 19 06 	call	0xc32	; 0xc32 <gpib_receive>
    1fe4:	8c 83       	std	Y+4, r24	; 0x04
			msg[i++] = b;
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	fe 01       	movw	r30, r28
    1fee:	e9 5a       	subi	r30, 0xA9	; 169
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	40 81       	ld	r20, Z
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	07 96       	adiw	r24, 0x07	; 7
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	e2 0f       	add	r30, r18
    1ffc:	f3 1f       	adc	r31, r19
    1ffe:	40 83       	st	Z, r20
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	8f 5f       	subi	r24, 0xFF	; 255
    2004:	89 83       	std	Y+1, r24	; 0x01
		} while (!e);
    2006:	8c 81       	ldd	r24, Y+4	; 0x04
    2008:	88 23       	and	r24, r24
    200a:	39 f3       	breq	.-50     	; 0x1fda <check_errors+0x32>
		// terminate string
		//msg[i++] = '\n';
		msg[i++] = '\r';
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	ce 01       	movw	r24, r28
    2014:	07 96       	adiw	r24, 0x07	; 7
    2016:	fc 01       	movw	r30, r24
    2018:	e2 0f       	add	r30, r18
    201a:	f3 1f       	adc	r31, r19
    201c:	8d e0       	ldi	r24, 0x0D	; 13
    201e:	80 83       	st	Z, r24
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	8f 5f       	subi	r24, 0xFF	; 255
    2024:	89 83       	std	Y+1, r24	; 0x01
		msg[i] = 0x00;
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	ce 01       	movw	r24, r28
    202e:	07 96       	adiw	r24, 0x07	; 7
    2030:	fc 01       	movw	r30, r24
    2032:	e2 0f       	add	r30, r18
    2034:	f3 1f       	adc	r31, r19
    2036:	10 82       	st	Z, r1
		// check if all errors have been read
		if (strncmp(msg,"+0,",3)==0) {
    2038:	ce 01       	movw	r24, r28
    203a:	07 96       	adiw	r24, 0x07	; 7
    203c:	23 ee       	ldi	r18, 0xE3	; 227
    203e:	32 e0       	ldi	r19, 0x02	; 2
    2040:	b9 01       	movw	r22, r18
    2042:	43 e0       	ldi	r20, 0x03	; 3
    2044:	50 e0       	ldi	r21, 0x00	; 0
    2046:	0e 94 ed 01 	call	0x3da	; 0x3da <strncmp>
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	19 f4       	brne	.+6      	; 0x2054 <check_errors+0xac>
			allErrorsRead=1;
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	8a 83       	std	Y+2, r24	; 0x02
    2052:	04 c0       	rjmp	.+8      	; 0x205c <check_errors+0xb4>
		} else {
			uart_puts((char*) msg);
    2054:	ce 01       	movw	r24, r28
    2056:	07 96       	adiw	r24, 0x07	; 7
    2058:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
	uchar msg[80];
	uchar b, e;
	uchar colptr = 0;
	uchar allErrorsRead = 0;

	while (!allErrorsRead) {
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	88 23       	and	r24, r24
    2060:	09 f4       	brne	.+2      	; 0x2064 <check_errors+0xbc>
    2062:	b4 cf       	rjmp	.-152    	; 0x1fcc <check_errors+0x24>
			allErrorsRead=1;
		} else {
			uart_puts((char*) msg);
		}
	}
}
    2064:	c9 5a       	subi	r28, 0xA9	; 169
    2066:	df 4f       	sbci	r29, 0xFF	; 255
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <input_char>:

/**
 * Reads in character into parameter c. Checks for errors and prints them out.
 * Returns 0 if there is no char to read, 1 if there was a char read in.
 */
uchar input_char(uchar *ch) {
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	00 d0       	rcall	.+0      	; 0x207e <input_char+0x6>
    207e:	00 d0       	rcall	.+0      	; 0x2080 <input_char+0x8>
    2080:	0f 92       	push	r0
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	9c 83       	std	Y+4, r25	; 0x04
    2088:	8b 83       	std	Y+3, r24	; 0x03
	 * uart_getc() returns in the lower byte the received character and
	 * in the higher byte (bitmask) the last receive error
	 * UART_NO_DATA is returned when no data is available.
	 *
	 */
	c = uart_getc();
    208a:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <uart_getc>
    208e:	9a 83       	std	Y+2, r25	; 0x02
    2090:	89 83       	std	Y+1, r24	; 0x01
	if (c & UART_NO_DATA) {
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	9a 81       	ldd	r25, Y+2	; 0x02
    2096:	80 70       	andi	r24, 0x00	; 0
    2098:	91 70       	andi	r25, 0x01	; 1
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	11 f0       	breq	.+4      	; 0x20a2 <input_char+0x2a>
		// no data available from UART
		return 0;
    209e:	1d 82       	std	Y+5, r1	; 0x05
    20a0:	24 c0       	rjmp	.+72     	; 0x20ea <input_char+0x72>
	}
	// make uchar from character in int value
	*ch = (uchar) c;
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	eb 81       	ldd	r30, Y+3	; 0x03
    20a6:	fc 81       	ldd	r31, Y+4	; 0x04
    20a8:	80 83       	st	Z, r24

	/*
	 * new data available from UART
	 * check for Frame or Overrun error
	 */
	if (c & UART_FRAME_ERROR) {
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	9a 81       	ldd	r25, Y+2	; 0x02
    20ae:	80 70       	andi	r24, 0x00	; 0
    20b0:	98 70       	andi	r25, 0x08	; 8
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	21 f0       	breq	.+8      	; 0x20be <input_char+0x46>
		/* Framing Error detected, i.e no stop bit detected */
		uart_puts_P("UART Frame Error: ");
    20b6:	81 e8       	ldi	r24, 0x81	; 129
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
	}
	if (c & UART_OVERRUN_ERROR) {
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	9a 81       	ldd	r25, Y+2	; 0x02
    20c2:	80 70       	andi	r24, 0x00	; 0
    20c4:	94 70       	andi	r25, 0x04	; 4
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	21 f0       	breq	.+8      	; 0x20d2 <input_char+0x5a>
		/*
		 * Overrun, a character already present in the UART UDR register was
		 * not read by the interrupt handler before the next character arrived,
		 * one or more received characters have been dropped
		 */
		uart_puts_P("UART Overrun Error: ");
    20ca:	8c e6       	ldi	r24, 0x6C	; 108
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
	}
	if (c & UART_BUFFER_OVERFLOW) {
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	9a 81       	ldd	r25, Y+2	; 0x02
    20d6:	80 70       	andi	r24, 0x00	; 0
    20d8:	92 70       	andi	r25, 0x02	; 2
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	21 f0       	breq	.+8      	; 0x20e6 <input_char+0x6e>
		/*
		 * We are not reading the receive buffer fast enough,
		 * one or more received character have been dropped
		 */
		uart_puts_P("Buffer overflow error: ");
    20de:	84 e5       	ldi	r24, 0x54	; 84
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
	}
	return 1;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	8d 83       	std	Y+5, r24	; 0x05
    20ea:	8d 81       	ldd	r24, Y+5	; 0x05
}
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <process_char>:
 * a) xon/xoff mode forward buffer to GPIB
 * b) no flow control: prints error message that input buffer is full.
 *
 * Returns 1 if command end is detected, 0 otherwise.
 */
uchar process_char(uchar *buf, uchar ch, int *ptr) {
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	00 d0       	rcall	.+0      	; 0x2102 <process_char+0x6>
    2102:	00 d0       	rcall	.+0      	; 0x2104 <process_char+0x8>
    2104:	00 d0       	rcall	.+0      	; 0x2106 <process_char+0xa>
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
    210a:	9b 83       	std	Y+3, r25	; 0x03
    210c:	8a 83       	std	Y+2, r24	; 0x02
    210e:	6c 83       	std	Y+4, r22	; 0x04
    2110:	5e 83       	std	Y+6, r21	; 0x06
    2112:	4d 83       	std	Y+5, r20	; 0x05
	uchar ret = 0;
    2114:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * send received character back depending on global flag
	 */
	if (rs232_remote_echo) {
    2116:	80 91 76 04 	lds	r24, 0x0476
    211a:	88 23       	and	r24, r24
    211c:	19 f0       	breq	.+6      	; 0x2124 <process_char+0x28>
		uart_putc((unsigned char) ch);
    211e:	8c 81       	ldd	r24, Y+4	; 0x04
    2120:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <uart_putc>
	}

	// if input buffer is not full, add char
	if (*ptr < COMMAND_INPUT_BUFFER_SIZE - 1) {
    2124:	ed 81       	ldd	r30, Y+5	; 0x05
    2126:	fe 81       	ldd	r31, Y+6	; 0x06
    2128:	80 81       	ld	r24, Z
    212a:	91 81       	ldd	r25, Z+1	; 0x01
    212c:	8f 34       	cpi	r24, 0x4F	; 79
    212e:	91 05       	cpc	r25, r1
    2130:	ec f4       	brge	.+58     	; 0x216c <process_char+0x70>
		buf[(*ptr)++] = ch;
    2132:	ed 81       	ldd	r30, Y+5	; 0x05
    2134:	fe 81       	ldd	r31, Y+6	; 0x06
    2136:	40 81       	ld	r20, Z
    2138:	51 81       	ldd	r21, Z+1	; 0x01
    213a:	9a 01       	movw	r18, r20
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	9b 81       	ldd	r25, Y+3	; 0x03
    2140:	fc 01       	movw	r30, r24
    2142:	e2 0f       	add	r30, r18
    2144:	f3 1f       	adc	r31, r19
    2146:	8c 81       	ldd	r24, Y+4	; 0x04
    2148:	80 83       	st	Z, r24
    214a:	ca 01       	movw	r24, r20
    214c:	01 96       	adiw	r24, 0x01	; 1
    214e:	ed 81       	ldd	r30, Y+5	; 0x05
    2150:	fe 81       	ldd	r31, Y+6	; 0x06
    2152:	91 83       	std	Z+1, r25	; 0x01
    2154:	80 83       	st	Z, r24
		buf[*ptr] = '\0';
    2156:	ed 81       	ldd	r30, Y+5	; 0x05
    2158:	fe 81       	ldd	r31, Y+6	; 0x06
    215a:	80 81       	ld	r24, Z
    215c:	91 81       	ldd	r25, Z+1	; 0x01
    215e:	9c 01       	movw	r18, r24
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	9b 81       	ldd	r25, Y+3	; 0x03
    2164:	fc 01       	movw	r30, r24
    2166:	e2 0f       	add	r30, r18
    2168:	f3 1f       	adc	r31, r19
    216a:	10 82       	st	Z, r1
	}

	// if command ends or buffer is full ...
	if (ch == ASCII_CODE_CR || *ptr >= COMMAND_INPUT_BUFFER_SIZE - 1) {
    216c:	8c 81       	ldd	r24, Y+4	; 0x04
    216e:	8d 30       	cpi	r24, 0x0D	; 13
    2170:	39 f0       	breq	.+14     	; 0x2180 <process_char+0x84>
    2172:	ed 81       	ldd	r30, Y+5	; 0x05
    2174:	fe 81       	ldd	r31, Y+6	; 0x06
    2176:	80 81       	ld	r24, Z
    2178:	91 81       	ldd	r25, Z+1	; 0x01
    217a:	8f 34       	cpi	r24, 0x4F	; 79
    217c:	91 05       	cpc	r25, r1
    217e:	14 f1       	brlt	.+68     	; 0x21c4 <process_char+0xc8>
		if (ch == ASCII_CODE_CR) {
    2180:	8c 81       	ldd	r24, Y+4	; 0x04
    2182:	8d 30       	cpi	r24, 0x0D	; 13
    2184:	b9 f4       	brne	.+46     	; 0x21b4 <process_char+0xb8>
			// adjust string terminator
			buf[--(*ptr)] = '\0';
    2186:	ed 81       	ldd	r30, Y+5	; 0x05
    2188:	fe 81       	ldd	r31, Y+6	; 0x06
    218a:	80 81       	ld	r24, Z
    218c:	91 81       	ldd	r25, Z+1	; 0x01
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	ed 81       	ldd	r30, Y+5	; 0x05
    2192:	fe 81       	ldd	r31, Y+6	; 0x06
    2194:	91 83       	std	Z+1, r25	; 0x01
    2196:	80 83       	st	Z, r24
    2198:	ed 81       	ldd	r30, Y+5	; 0x05
    219a:	fe 81       	ldd	r31, Y+6	; 0x06
    219c:	80 81       	ld	r24, Z
    219e:	91 81       	ldd	r25, Z+1	; 0x01
    21a0:	9c 01       	movw	r18, r24
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	9b 81       	ldd	r25, Y+3	; 0x03
    21a6:	fc 01       	movw	r30, r24
    21a8:	e2 0f       	add	r30, r18
    21aa:	f3 1f       	adc	r31, r19
    21ac:	10 82       	st	Z, r1
			// let calling function send last command part (or command itself)
			ret = 1;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	08 c0       	rjmp	.+16     	; 0x21c4 <process_char+0xc8>
		} else {
			// send intermediate part of command.
			uart_puts_P("Command overflow.");
    21b4:	84 e9       	ldi	r24, 0x94	; 148
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
			*ptr = 0;
    21bc:	ed 81       	ldd	r30, Y+5	; 0x05
    21be:	fe 81       	ldd	r31, Y+6	; 0x06
    21c0:	11 82       	std	Z+1, r1	; 0x01
    21c2:	10 82       	st	Z, r1
		}
	}
	return ret;
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    21c6:	26 96       	adiw	r28, 0x06	; 6
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	cd bf       	out	0x3d, r28	; 61
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <input_process>:
 * This approach handles small single line commands (needing no flow control) and large
 * multi-line commands if flow control is xon/xoff.
 *
 * \returns The character read in
 */
uchar input_process(uchar *buf, int *ptr) {
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	27 97       	sbiw	r28, 0x07	; 7
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	de bf       	out	0x3e, r29	; 62
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	cd bf       	out	0x3d, r28	; 61
    21ec:	9c 83       	std	Y+4, r25	; 0x04
    21ee:	8b 83       	std	Y+3, r24	; 0x03
    21f0:	7e 83       	std	Y+6, r23	; 0x06
    21f2:	6d 83       	std	Y+5, r22	; 0x05
	uchar ch, ret = 0;
    21f4:	19 82       	std	Y+1, r1	; 0x01

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
    21f6:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <uart_get_flow_control>
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	b9 f4       	brne	.+46     	; 0x222c <input_process+0x54>
    21fe:	12 c0       	rjmp	.+36     	; 0x2224 <input_process+0x4c>
		while (!ret) {
			// if nothing can be read in, return
			if (!input_char(&ch)) {
    2200:	ce 01       	movw	r24, r28
    2202:	02 96       	adiw	r24, 0x02	; 2
    2204:	0e 94 3c 10 	call	0x2078	; 0x2078 <input_char>
    2208:	88 23       	and	r24, r24
    220a:	11 f4       	brne	.+4      	; 0x2210 <input_process+0x38>
				return 0;
    220c:	1f 82       	std	Y+7, r1	; 0x07
    220e:	22 c0       	rjmp	.+68     	; 0x2254 <input_process+0x7c>
			}
			ret = process_char(buf, ch, ptr);
    2210:	4a 81       	ldd	r20, Y+2	; 0x02
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
    2214:	9c 81       	ldd	r25, Y+4	; 0x04
    2216:	2d 81       	ldd	r18, Y+5	; 0x05
    2218:	3e 81       	ldd	r19, Y+6	; 0x06
    221a:	64 2f       	mov	r22, r20
    221c:	a9 01       	movw	r20, r18
    221e:	0e 94 7e 10 	call	0x20fc	; 0x20fc <process_char>
    2222:	89 83       	std	Y+1, r24	; 0x01
 */
uchar input_process(uchar *buf, int *ptr) {
	uchar ch, ret = 0;

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
		while (!ret) {
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	88 23       	and	r24, r24
    2228:	59 f3       	breq	.-42     	; 0x2200 <input_process+0x28>
    222a:	12 c0       	rjmp	.+36     	; 0x2250 <input_process+0x78>
			}
			ret = process_char(buf, ch, ptr);
		}
	} else {
		// if nothing can be read in, return
		if (!input_char(&ch)) {
    222c:	ce 01       	movw	r24, r28
    222e:	02 96       	adiw	r24, 0x02	; 2
    2230:	0e 94 3c 10 	call	0x2078	; 0x2078 <input_char>
    2234:	88 23       	and	r24, r24
    2236:	11 f4       	brne	.+4      	; 0x223c <input_process+0x64>
			return 0;
    2238:	1f 82       	std	Y+7, r1	; 0x07
    223a:	0c c0       	rjmp	.+24     	; 0x2254 <input_process+0x7c>
		}
		ret = process_char(buf, ch, ptr);
    223c:	4a 81       	ldd	r20, Y+2	; 0x02
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	9c 81       	ldd	r25, Y+4	; 0x04
    2242:	2d 81       	ldd	r18, Y+5	; 0x05
    2244:	3e 81       	ldd	r19, Y+6	; 0x06
    2246:	64 2f       	mov	r22, r20
    2248:	a9 01       	movw	r20, r18
    224a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <process_char>
    224e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	8f 83       	std	Y+7, r24	; 0x07
    2254:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2256:	27 96       	adiw	r28, 0x07	; 7
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	de bf       	out	0x3e, r29	; 62
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	08 95       	ret

00002268 <handle_internal_commands>:

/**
 * Handles builtin commands.
 */
void handle_internal_commands(uchar *cmd) {
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	00 d0       	rcall	.+0      	; 0x226e <handle_internal_commands+0x6>
    226e:	00 d0       	rcall	.+0      	; 0x2270 <handle_internal_commands+0x8>
    2270:	00 d0       	rcall	.+0      	; 0x2272 <handle_internal_commands+0xa>
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	9c 83       	std	Y+4, r25	; 0x04
    2278:	8b 83       	std	Y+3, r24	; 0x03
	uchar val, val1;

	switch (cmd[1]) {
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	9c 81       	ldd	r25, Y+4	; 0x04
    227e:	fc 01       	movw	r30, r24
    2280:	31 96       	adiw	r30, 0x01	; 1
    2282:	80 81       	ld	r24, Z
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	3e 83       	std	Y+6, r19	; 0x06
    228a:	2d 83       	std	Y+5, r18	; 0x05
    228c:	8d 81       	ldd	r24, Y+5	; 0x05
    228e:	9e 81       	ldd	r25, Y+6	; 0x06
    2290:	88 36       	cpi	r24, 0x68	; 104
    2292:	91 05       	cpc	r25, r1
    2294:	09 f4       	brne	.+2      	; 0x2298 <handle_internal_commands+0x30>
    2296:	5f c1       	rjmp	.+702    	; 0x2556 <handle_internal_commands+0x2ee>
    2298:	2d 81       	ldd	r18, Y+5	; 0x05
    229a:	3e 81       	ldd	r19, Y+6	; 0x06
    229c:	29 36       	cpi	r18, 0x69	; 105
    229e:	31 05       	cpc	r19, r1
    22a0:	2c f5       	brge	.+74     	; 0x22ec <handle_internal_commands+0x84>
    22a2:	8d 81       	ldd	r24, Y+5	; 0x05
    22a4:	9e 81       	ldd	r25, Y+6	; 0x06
    22a6:	81 36       	cpi	r24, 0x61	; 97
    22a8:	91 05       	cpc	r25, r1
    22aa:	09 f4       	brne	.+2      	; 0x22ae <handle_internal_commands+0x46>
    22ac:	3e c0       	rjmp	.+124    	; 0x232a <handle_internal_commands+0xc2>
    22ae:	2d 81       	ldd	r18, Y+5	; 0x05
    22b0:	3e 81       	ldd	r19, Y+6	; 0x06
    22b2:	22 36       	cpi	r18, 0x62	; 98
    22b4:	31 05       	cpc	r19, r1
    22b6:	6c f4       	brge	.+26     	; 0x22d2 <handle_internal_commands+0x6a>
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	8b 32       	cpi	r24, 0x2B	; 43
    22be:	91 05       	cpc	r25, r1
    22c0:	09 f4       	brne	.+2      	; 0x22c4 <handle_internal_commands+0x5c>
    22c2:	b4 c0       	rjmp	.+360    	; 0x242c <handle_internal_commands+0x1c4>
    22c4:	2d 81       	ldd	r18, Y+5	; 0x05
    22c6:	3e 81       	ldd	r19, Y+6	; 0x06
    22c8:	2d 32       	cpi	r18, 0x2D	; 45
    22ca:	31 05       	cpc	r19, r1
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <handle_internal_commands+0x68>
    22ce:	ec c0       	rjmp	.+472    	; 0x24a8 <handle_internal_commands+0x240>
    22d0:	d9 c1       	rjmp	.+946    	; 0x2684 <handle_internal_commands+0x41c>
    22d2:	8d 81       	ldd	r24, Y+5	; 0x05
    22d4:	9e 81       	ldd	r25, Y+6	; 0x06
    22d6:	85 36       	cpi	r24, 0x65	; 101
    22d8:	91 05       	cpc	r25, r1
    22da:	09 f4       	brne	.+2      	; 0x22de <handle_internal_commands+0x76>
    22dc:	cc c1       	rjmp	.+920    	; 0x2676 <handle_internal_commands+0x40e>
    22de:	2d 81       	ldd	r18, Y+5	; 0x05
    22e0:	3e 81       	ldd	r19, Y+6	; 0x06
    22e2:	26 36       	cpi	r18, 0x66	; 102
    22e4:	31 05       	cpc	r19, r1
    22e6:	09 f4       	brne	.+2      	; 0x22ea <handle_internal_commands+0x82>
    22e8:	5e c0       	rjmp	.+188    	; 0x23a6 <handle_internal_commands+0x13e>
    22ea:	cc c1       	rjmp	.+920    	; 0x2684 <handle_internal_commands+0x41c>
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05
    22ee:	9e 81       	ldd	r25, Y+6	; 0x06
    22f0:	82 37       	cpi	r24, 0x72	; 114
    22f2:	91 05       	cpc	r25, r1
    22f4:	09 f4       	brne	.+2      	; 0x22f8 <handle_internal_commands+0x90>
    22f6:	5c c0       	rjmp	.+184    	; 0x23b0 <handle_internal_commands+0x148>
    22f8:	2d 81       	ldd	r18, Y+5	; 0x05
    22fa:	3e 81       	ldd	r19, Y+6	; 0x06
    22fc:	23 37       	cpi	r18, 0x73	; 115
    22fe:	31 05       	cpc	r19, r1
    2300:	3c f4       	brge	.+14     	; 0x2310 <handle_internal_commands+0xa8>
    2302:	8d 81       	ldd	r24, Y+5	; 0x05
    2304:	9e 81       	ldd	r25, Y+6	; 0x06
    2306:	89 36       	cpi	r24, 0x69	; 105
    2308:	91 05       	cpc	r25, r1
    230a:	09 f4       	brne	.+2      	; 0x230e <handle_internal_commands+0xa6>
    230c:	27 c1       	rjmp	.+590    	; 0x255c <handle_internal_commands+0x2f4>
    230e:	ba c1       	rjmp	.+884    	; 0x2684 <handle_internal_commands+0x41c>
    2310:	2d 81       	ldd	r18, Y+5	; 0x05
    2312:	3e 81       	ldd	r19, Y+6	; 0x06
    2314:	23 37       	cpi	r18, 0x73	; 115
    2316:	31 05       	cpc	r19, r1
    2318:	09 f4       	brne	.+2      	; 0x231c <handle_internal_commands+0xb4>
    231a:	5d c0       	rjmp	.+186    	; 0x23d6 <handle_internal_commands+0x16e>
    231c:	8d 81       	ldd	r24, Y+5	; 0x05
    231e:	9e 81       	ldd	r25, Y+6	; 0x06
    2320:	88 37       	cpi	r24, 0x78	; 120
    2322:	91 05       	cpc	r25, r1
    2324:	09 f4       	brne	.+2      	; 0x2328 <handle_internal_commands+0xc0>
    2326:	fe c0       	rjmp	.+508    	; 0x2524 <handle_internal_commands+0x2bc>
    2328:	ad c1       	rjmp	.+858    	; 0x2684 <handle_internal_commands+0x41c>
	case 'a':
		/* set partner primary+secondary address */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	9c 81       	ldd	r25, Y+4	; 0x04
    232e:	02 96       	adiw	r24, 0x02	; 2
    2330:	ae 01       	movw	r20, r28
    2332:	4e 5f       	subi	r20, 0xFE	; 254
    2334:	5f 4f       	sbci	r21, 0xFF	; 255
    2336:	9e 01       	movw	r18, r28
    2338:	2f 5f       	subi	r18, 0xFF	; 255
    233a:	3f 4f       	sbci	r19, 0xFF	; 255
    233c:	b9 01       	movw	r22, r18
    233e:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <stringToTwoUchars>
		sprintf(cmd, "Set partner address, primary: %u , secondary: %u\n\r",
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	48 2f       	mov	r20, r24
    234c:	50 e0       	ldi	r21, 0x00	; 0
    234e:	8d b7       	in	r24, 0x3d	; 61
    2350:	9e b7       	in	r25, 0x3e	; 62
    2352:	08 97       	sbiw	r24, 0x08	; 8
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	9e bf       	out	0x3e, r25	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	8d bf       	out	0x3d, r24	; 61
    235e:	ed b7       	in	r30, 0x3d	; 61
    2360:	fe b7       	in	r31, 0x3e	; 62
    2362:	31 96       	adiw	r30, 0x01	; 1
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	9c 81       	ldd	r25, Y+4	; 0x04
    2368:	91 83       	std	Z+1, r25	; 0x01
    236a:	80 83       	st	Z, r24
    236c:	87 ee       	ldi	r24, 0xE7	; 231
    236e:	92 e0       	ldi	r25, 0x02	; 2
    2370:	93 83       	std	Z+3, r25	; 0x03
    2372:	82 83       	std	Z+2, r24	; 0x02
    2374:	35 83       	std	Z+5, r19	; 0x05
    2376:	24 83       	std	Z+4, r18	; 0x04
    2378:	57 83       	std	Z+7, r21	; 0x07
    237a:	46 83       	std	Z+6, r20	; 0x06
    237c:	0e 94 35 02 	call	0x46a	; 0x46a <sprintf>
    2380:	2d b7       	in	r18, 0x3d	; 61
    2382:	3e b7       	in	r19, 0x3e	; 62
    2384:	28 5f       	subi	r18, 0xF8	; 248
    2386:	3f 4f       	sbci	r19, 0xFF	; 255
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	3e bf       	out	0x3e, r19	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	2d bf       	out	0x3d, r18	; 61
				val, val1);
		uart_puts(cmd);
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
		gpib_set_partner_address(val, val1);
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	9a 81       	ldd	r25, Y+2	; 0x02
    239e:	69 2f       	mov	r22, r25
    23a0:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <gpib_set_partner_address>
    23a4:	75 c1       	rjmp	.+746    	; 0x2690 <handle_internal_commands+0x428>
		break;
	case 'f':
		/* find devices */
		gpib_find_devices(10);
    23a6:	8a e0       	ldi	r24, 0x0A	; 10
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <gpib_find_devices>
    23ae:	70 c1       	rjmp	.+736    	; 0x2690 <handle_internal_commands+0x428>
		break;
	case 'r':
		/* SRQ enablement */
		if (!srq_enabled) {
    23b0:	80 91 78 04 	lds	r24, 0x0478
    23b4:	88 23       	and	r24, r24
    23b6:	41 f4       	brne	.+16     	; 0x23c8 <handle_internal_commands+0x160>
			srq_enabled = 1;
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	80 93 78 04 	sts	0x0478, r24
			uart_puts_P("SRQs enabled\n\r");
    23be:	8c e0       	ldi	r24, 0x0C	; 12
    23c0:	91 e0       	ldi	r25, 0x01	; 1
    23c2:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
    23c6:	64 c1       	rjmp	.+712    	; 0x2690 <handle_internal_commands+0x428>
		} else {
			srq_enabled = 0;
    23c8:	10 92 78 04 	sts	0x0478, r1
			uart_puts_P("SRQs disabled\n\r");
    23cc:	8c ef       	ldi	r24, 0xFC	; 252
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
    23d4:	5d c1       	rjmp	.+698    	; 0x2690 <handle_internal_commands+0x428>
		}
		break;
	case 's':
		/* set partner secondary address */
		val = atoi((char*) (&(cmd[2])));
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	9c 81       	ldd	r25, Y+4	; 0x04
    23da:	02 96       	adiw	r24, 0x02	; 2
    23dc:	0e 94 c1 01 	call	0x382	; 0x382 <atoi>
    23e0:	89 83       	std	Y+1, r24	; 0x01
		sprintf(cmd, "Set partner secondary address to %u\n\r", val);
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	28 2f       	mov	r18, r24
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	00 d0       	rcall	.+0      	; 0x23ea <handle_internal_commands+0x182>
    23ea:	00 d0       	rcall	.+0      	; 0x23ec <handle_internal_commands+0x184>
    23ec:	00 d0       	rcall	.+0      	; 0x23ee <handle_internal_commands+0x186>
    23ee:	ed b7       	in	r30, 0x3d	; 61
    23f0:	fe b7       	in	r31, 0x3e	; 62
    23f2:	31 96       	adiw	r30, 0x01	; 1
    23f4:	8b 81       	ldd	r24, Y+3	; 0x03
    23f6:	9c 81       	ldd	r25, Y+4	; 0x04
    23f8:	91 83       	std	Z+1, r25	; 0x01
    23fa:	80 83       	st	Z, r24
    23fc:	8a e1       	ldi	r24, 0x1A	; 26
    23fe:	93 e0       	ldi	r25, 0x03	; 3
    2400:	93 83       	std	Z+3, r25	; 0x03
    2402:	82 83       	std	Z+2, r24	; 0x02
    2404:	35 83       	std	Z+5, r19	; 0x05
    2406:	24 83       	std	Z+4, r18	; 0x04
    2408:	0e 94 35 02 	call	0x46a	; 0x46a <sprintf>
    240c:	8d b7       	in	r24, 0x3d	; 61
    240e:	9e b7       	in	r25, 0x3e	; 62
    2410:	06 96       	adiw	r24, 0x06	; 6
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	9e bf       	out	0x3e, r25	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	8d bf       	out	0x3d, r24	; 61
		uart_puts(cmd);
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	9c 81       	ldd	r25, Y+4	; 0x04
    2420:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
		gpib_set_partner_secondary(val);
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <gpib_set_partner_secondary>
    242a:	32 c1       	rjmp	.+612    	; 0x2690 <handle_internal_commands+0x428>
		break;
	case '+':
		/* add device */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    242c:	8b 81       	ldd	r24, Y+3	; 0x03
    242e:	9c 81       	ldd	r25, Y+4	; 0x04
    2430:	02 96       	adiw	r24, 0x02	; 2
    2432:	ae 01       	movw	r20, r28
    2434:	4e 5f       	subi	r20, 0xFE	; 254
    2436:	5f 4f       	sbci	r21, 0xFF	; 255
    2438:	9e 01       	movw	r18, r28
    243a:	2f 5f       	subi	r18, 0xFF	; 255
    243c:	3f 4f       	sbci	r19, 0xFF	; 255
    243e:	b9 01       	movw	r22, r18
    2440:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <stringToTwoUchars>
		sprintf(cmd, "Add device, primary: %u , secondary: %u\n\r", val, val1);
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	48 2f       	mov	r20, r24
    244e:	50 e0       	ldi	r21, 0x00	; 0
    2450:	8d b7       	in	r24, 0x3d	; 61
    2452:	9e b7       	in	r25, 0x3e	; 62
    2454:	08 97       	sbiw	r24, 0x08	; 8
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	9e bf       	out	0x3e, r25	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	8d bf       	out	0x3d, r24	; 61
    2460:	ed b7       	in	r30, 0x3d	; 61
    2462:	fe b7       	in	r31, 0x3e	; 62
    2464:	31 96       	adiw	r30, 0x01	; 1
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	9c 81       	ldd	r25, Y+4	; 0x04
    246a:	91 83       	std	Z+1, r25	; 0x01
    246c:	80 83       	st	Z, r24
    246e:	80 e4       	ldi	r24, 0x40	; 64
    2470:	93 e0       	ldi	r25, 0x03	; 3
    2472:	93 83       	std	Z+3, r25	; 0x03
    2474:	82 83       	std	Z+2, r24	; 0x02
    2476:	35 83       	std	Z+5, r19	; 0x05
    2478:	24 83       	std	Z+4, r18	; 0x04
    247a:	57 83       	std	Z+7, r21	; 0x07
    247c:	46 83       	std	Z+6, r20	; 0x06
    247e:	0e 94 35 02 	call	0x46a	; 0x46a <sprintf>
    2482:	2d b7       	in	r18, 0x3d	; 61
    2484:	3e b7       	in	r19, 0x3e	; 62
    2486:	28 5f       	subi	r18, 0xF8	; 248
    2488:	3f 4f       	sbci	r19, 0xFF	; 255
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	3e bf       	out	0x3e, r19	; 62
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	2d bf       	out	0x3d, r18	; 61
		uart_puts(cmd);
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	9c 81       	ldd	r25, Y+4	; 0x04
    2498:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
		gpib_add_partner_address(val, val1);
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	9a 81       	ldd	r25, Y+2	; 0x02
    24a0:	69 2f       	mov	r22, r25
    24a2:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <gpib_add_partner_address>
    24a6:	f4 c0       	rjmp	.+488    	; 0x2690 <handle_internal_commands+0x428>
		break;
	case '-':
		/* add device */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    24a8:	8b 81       	ldd	r24, Y+3	; 0x03
    24aa:	9c 81       	ldd	r25, Y+4	; 0x04
    24ac:	02 96       	adiw	r24, 0x02	; 2
    24ae:	ae 01       	movw	r20, r28
    24b0:	4e 5f       	subi	r20, 0xFE	; 254
    24b2:	5f 4f       	sbci	r21, 0xFF	; 255
    24b4:	9e 01       	movw	r18, r28
    24b6:	2f 5f       	subi	r18, 0xFF	; 255
    24b8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ba:	b9 01       	movw	r22, r18
    24bc:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <stringToTwoUchars>
		sprintf(cmd, "Remove device, primary: %u , secondary: %u\n\r", val,
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	28 2f       	mov	r18, r24
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	48 2f       	mov	r20, r24
    24ca:	50 e0       	ldi	r21, 0x00	; 0
    24cc:	8d b7       	in	r24, 0x3d	; 61
    24ce:	9e b7       	in	r25, 0x3e	; 62
    24d0:	08 97       	sbiw	r24, 0x08	; 8
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	9e bf       	out	0x3e, r25	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	8d bf       	out	0x3d, r24	; 61
    24dc:	ed b7       	in	r30, 0x3d	; 61
    24de:	fe b7       	in	r31, 0x3e	; 62
    24e0:	31 96       	adiw	r30, 0x01	; 1
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	9c 81       	ldd	r25, Y+4	; 0x04
    24e6:	91 83       	std	Z+1, r25	; 0x01
    24e8:	80 83       	st	Z, r24
    24ea:	8a e6       	ldi	r24, 0x6A	; 106
    24ec:	93 e0       	ldi	r25, 0x03	; 3
    24ee:	93 83       	std	Z+3, r25	; 0x03
    24f0:	82 83       	std	Z+2, r24	; 0x02
    24f2:	35 83       	std	Z+5, r19	; 0x05
    24f4:	24 83       	std	Z+4, r18	; 0x04
    24f6:	57 83       	std	Z+7, r21	; 0x07
    24f8:	46 83       	std	Z+6, r20	; 0x06
    24fa:	0e 94 35 02 	call	0x46a	; 0x46a <sprintf>
    24fe:	2d b7       	in	r18, 0x3d	; 61
    2500:	3e b7       	in	r19, 0x3e	; 62
    2502:	28 5f       	subi	r18, 0xF8	; 248
    2504:	3f 4f       	sbci	r19, 0xFF	; 255
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	3e bf       	out	0x3e, r19	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	2d bf       	out	0x3d, r18	; 61
				val1);
		uart_puts(cmd);
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	9c 81       	ldd	r25, Y+4	; 0x04
    2514:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
		gpib_remove_partner_address(val, val1);
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	9a 81       	ldd	r25, Y+2	; 0x02
    251c:	69 2f       	mov	r22, r25
    251e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <gpib_remove_partner_address>
    2522:	b6 c0       	rjmp	.+364    	; 0x2690 <handle_internal_commands+0x428>
		break;
	case 'x':
		/* Xon/Xoff flow control */
		if (!xonXoffMode) {
    2524:	80 91 77 04 	lds	r24, 0x0477
    2528:	88 23       	and	r24, r24
    252a:	59 f4       	brne	.+22     	; 0x2542 <handle_internal_commands+0x2da>
			xonXoffMode = 1;
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	80 93 77 04 	sts	0x0477, r24
			uart_set_flow_control(FLOWCONTROL_XONXOFF);
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol on\n\r");
    2538:	82 ee       	ldi	r24, 0xE2	; 226
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
    2540:	a7 c0       	rjmp	.+334    	; 0x2690 <handle_internal_commands+0x428>
		} else {
			xonXoffMode = 0;
    2542:	10 92 77 04 	sts	0x0477, r1
			uart_set_flow_control(FLOWCONTROL_NONE);
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol off\n\r");
    254c:	87 ec       	ldi	r24, 0xC7	; 199
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
    2554:	9d c0       	rjmp	.+314    	; 0x2690 <handle_internal_commands+0x428>
		}
		break;
	case 'h':
		/* print some usage infos */
		printHelp();
    2556:	0e 94 2a 14 	call	0x2854	; 0x2854 <printHelp>
    255a:	9a c0       	rjmp	.+308    	; 0x2690 <handle_internal_commands+0x428>
		break;
	case 'i':
		gpib_info();
    255c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <gpib_info>
		sprintf(cmd, "Xon/Xoff flow control: %u\n\r", xonXoffMode);
    2560:	80 91 77 04 	lds	r24, 0x0477
    2564:	28 2f       	mov	r18, r24
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	00 d0       	rcall	.+0      	; 0x256a <handle_internal_commands+0x302>
    256a:	00 d0       	rcall	.+0      	; 0x256c <handle_internal_commands+0x304>
    256c:	00 d0       	rcall	.+0      	; 0x256e <handle_internal_commands+0x306>
    256e:	ed b7       	in	r30, 0x3d	; 61
    2570:	fe b7       	in	r31, 0x3e	; 62
    2572:	31 96       	adiw	r30, 0x01	; 1
    2574:	8b 81       	ldd	r24, Y+3	; 0x03
    2576:	9c 81       	ldd	r25, Y+4	; 0x04
    2578:	91 83       	std	Z+1, r25	; 0x01
    257a:	80 83       	st	Z, r24
    257c:	87 e9       	ldi	r24, 0x97	; 151
    257e:	93 e0       	ldi	r25, 0x03	; 3
    2580:	93 83       	std	Z+3, r25	; 0x03
    2582:	82 83       	std	Z+2, r24	; 0x02
    2584:	35 83       	std	Z+5, r19	; 0x05
    2586:	24 83       	std	Z+4, r18	; 0x04
    2588:	0e 94 35 02 	call	0x46a	; 0x46a <sprintf>
    258c:	8d b7       	in	r24, 0x3d	; 61
    258e:	9e b7       	in	r25, 0x3e	; 62
    2590:	06 96       	adiw	r24, 0x06	; 6
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	9e bf       	out	0x3e, r25	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	8d bf       	out	0x3d, r24	; 61
		uart_puts(cmd);
    259c:	8b 81       	ldd	r24, Y+3	; 0x03
    259e:	9c 81       	ldd	r25, Y+4	; 0x04
    25a0:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
		sprintf(cmd, "RS232 echo: %u\n\r", rs232_remote_echo);
    25a4:	80 91 76 04 	lds	r24, 0x0476
    25a8:	28 2f       	mov	r18, r24
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <handle_internal_commands+0x346>
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <handle_internal_commands+0x348>
    25b0:	00 d0       	rcall	.+0      	; 0x25b2 <handle_internal_commands+0x34a>
    25b2:	ed b7       	in	r30, 0x3d	; 61
    25b4:	fe b7       	in	r31, 0x3e	; 62
    25b6:	31 96       	adiw	r30, 0x01	; 1
    25b8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ba:	9c 81       	ldd	r25, Y+4	; 0x04
    25bc:	91 83       	std	Z+1, r25	; 0x01
    25be:	80 83       	st	Z, r24
    25c0:	83 eb       	ldi	r24, 0xB3	; 179
    25c2:	93 e0       	ldi	r25, 0x03	; 3
    25c4:	93 83       	std	Z+3, r25	; 0x03
    25c6:	82 83       	std	Z+2, r24	; 0x02
    25c8:	35 83       	std	Z+5, r19	; 0x05
    25ca:	24 83       	std	Z+4, r18	; 0x04
    25cc:	0e 94 35 02 	call	0x46a	; 0x46a <sprintf>
    25d0:	2d b7       	in	r18, 0x3d	; 61
    25d2:	3e b7       	in	r19, 0x3e	; 62
    25d4:	2a 5f       	subi	r18, 0xFA	; 250
    25d6:	3f 4f       	sbci	r19, 0xFF	; 255
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	3e bf       	out	0x3e, r19	; 62
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	2d bf       	out	0x3d, r18	; 61
		uart_puts(cmd);
    25e2:	8b 81       	ldd	r24, Y+3	; 0x03
    25e4:	9c 81       	ldd	r25, Y+4	; 0x04
    25e6:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
		sprintf(cmd, "SRQs enabled: %u\n\r", srq_enabled);
    25ea:	80 91 78 04 	lds	r24, 0x0478
    25ee:	28 2f       	mov	r18, r24
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <handle_internal_commands+0x38c>
    25f4:	00 d0       	rcall	.+0      	; 0x25f6 <handle_internal_commands+0x38e>
    25f6:	00 d0       	rcall	.+0      	; 0x25f8 <handle_internal_commands+0x390>
    25f8:	ed b7       	in	r30, 0x3d	; 61
    25fa:	fe b7       	in	r31, 0x3e	; 62
    25fc:	31 96       	adiw	r30, 0x01	; 1
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	9c 81       	ldd	r25, Y+4	; 0x04
    2602:	91 83       	std	Z+1, r25	; 0x01
    2604:	80 83       	st	Z, r24
    2606:	84 ec       	ldi	r24, 0xC4	; 196
    2608:	93 e0       	ldi	r25, 0x03	; 3
    260a:	93 83       	std	Z+3, r25	; 0x03
    260c:	82 83       	std	Z+2, r24	; 0x02
    260e:	35 83       	std	Z+5, r19	; 0x05
    2610:	24 83       	std	Z+4, r18	; 0x04
    2612:	0e 94 35 02 	call	0x46a	; 0x46a <sprintf>
    2616:	8d b7       	in	r24, 0x3d	; 61
    2618:	9e b7       	in	r25, 0x3e	; 62
    261a:	06 96       	adiw	r24, 0x06	; 6
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	9e bf       	out	0x3e, r25	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	8d bf       	out	0x3d, r24	; 61
		uart_puts(cmd);
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	9c 81       	ldd	r25, Y+4	; 0x04
    262a:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
		sprintf(cmd, "Linebreak value: %u\n\r", linebreak);
    262e:	80 91 79 04 	lds	r24, 0x0479
    2632:	28 2f       	mov	r18, r24
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	00 d0       	rcall	.+0      	; 0x2638 <handle_internal_commands+0x3d0>
    2638:	00 d0       	rcall	.+0      	; 0x263a <handle_internal_commands+0x3d2>
    263a:	00 d0       	rcall	.+0      	; 0x263c <handle_internal_commands+0x3d4>
    263c:	ed b7       	in	r30, 0x3d	; 61
    263e:	fe b7       	in	r31, 0x3e	; 62
    2640:	31 96       	adiw	r30, 0x01	; 1
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	9c 81       	ldd	r25, Y+4	; 0x04
    2646:	91 83       	std	Z+1, r25	; 0x01
    2648:	80 83       	st	Z, r24
    264a:	87 ed       	ldi	r24, 0xD7	; 215
    264c:	93 e0       	ldi	r25, 0x03	; 3
    264e:	93 83       	std	Z+3, r25	; 0x03
    2650:	82 83       	std	Z+2, r24	; 0x02
    2652:	35 83       	std	Z+5, r19	; 0x05
    2654:	24 83       	std	Z+4, r18	; 0x04
    2656:	0e 94 35 02 	call	0x46a	; 0x46a <sprintf>
    265a:	2d b7       	in	r18, 0x3d	; 61
    265c:	3e b7       	in	r19, 0x3e	; 62
    265e:	2a 5f       	subi	r18, 0xFA	; 250
    2660:	3f 4f       	sbci	r19, 0xFF	; 255
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	f8 94       	cli
    2666:	3e bf       	out	0x3e, r19	; 62
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	2d bf       	out	0x3d, r18	; 61
		uart_puts(cmd);
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	9c 81       	ldd	r25, Y+4	; 0x04
    2670:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
    2674:	0d c0       	rjmp	.+26     	; 0x2690 <handle_internal_commands+0x428>
		break;
	case 'e':
		uart_puts_P("Check errors\n\r");
    2676:	88 eb       	ldi	r24, 0xB8	; 184
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
		check_errors();
    267e:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <check_errors>
    2682:	06 c0       	rjmp	.+12     	; 0x2690 <handle_internal_commands+0x428>
		arb();
		uart_puts("arb done\n\r");
		break;
#endif
	default:
		uart_puts_P("unknown command\n\r");
    2684:	86 ea       	ldi	r24, 0xA6	; 166
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
		printHelp();
    268c:	0e 94 2a 14 	call	0x2854	; 0x2854 <printHelp>
		break;
	}
}
    2690:	26 96       	adiw	r28, 0x06	; 6
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <receiveAnswer>:

/**
 * Receives answer after command was sent.
 */
void receiveAnswer() {
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	00 d0       	rcall	.+0      	; 0x26a8 <receiveAnswer+0x6>
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <receiveAnswer+0x8>
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
	uchar b, e;
	uchar colptr = 0;
    26ae:	19 82       	std	Y+1, r1	; 0x01

	gpib_prepare_read();
    26b0:	0e 94 c1 05 	call	0xb82	; 0xb82 <gpib_prepare_read>
	// read the answer until EOI is detected (then e becomes true)
	do {
		// gpib bus receive
		e = gpib_receive(&b);
    26b4:	ce 01       	movw	r24, r28
    26b6:	03 96       	adiw	r24, 0x03	; 3
    26b8:	0e 94 19 06 	call	0xc32	; 0xc32 <gpib_receive>
    26bc:	8a 83       	std	Y+2, r24	; 0x02
		// write out character
		uart_putc(b);
    26be:	8b 81       	ldd	r24, Y+3	; 0x03
    26c0:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <uart_putc>
		if (linebreak && (colptr++ == linebreak)) {
    26c4:	80 91 79 04 	lds	r24, 0x0479
    26c8:	88 23       	and	r24, r24
    26ca:	99 f0       	breq	.+38     	; 0x26f2 <receiveAnswer+0x50>
    26cc:	90 91 79 04 	lds	r25, 0x0479
    26d0:	1c 82       	std	Y+4, r1	; 0x04
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	89 17       	cp	r24, r25
    26d6:	11 f4       	brne	.+4      	; 0x26dc <receiveAnswer+0x3a>
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	8c 83       	std	Y+4, r24	; 0x04
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	8f 5f       	subi	r24, 0xFF	; 255
    26e0:	89 83       	std	Y+1, r24	; 0x01
    26e2:	8c 81       	ldd	r24, Y+4	; 0x04
    26e4:	88 23       	and	r24, r24
    26e6:	29 f0       	breq	.+10     	; 0x26f2 <receiveAnswer+0x50>
			uart_puts_P("\n\r");
    26e8:	8b e1       	ldi	r24, 0x1B	; 27
    26ea:	91 e0       	ldi	r25, 0x01	; 1
    26ec:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
			colptr = 0;
    26f0:	19 82       	std	Y+1, r1	; 0x01
		}
		//sprintf((char*)buf,"%02x - %c\n\r", b, b);
		//uart_puts((char*)buf);
	} while (!e);
    26f2:	8a 81       	ldd	r24, Y+2	; 0x02
    26f4:	88 23       	and	r24, r24
    26f6:	f1 f2       	breq	.-68     	; 0x26b4 <receiveAnswer+0x12>
}
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <srq_occured>:

/**
 * Check if a SRQ occured
 */
uchar srq_occured(int* old_time) {
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	00 d0       	rcall	.+0      	; 0x270c <srq_occured+0x6>
    270c:	0f 92       	push	r0
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	9b 83       	std	Y+3, r25	; 0x03
    2714:	8a 83       	std	Y+2, r24	; 0x02
	uchar srq = 0;
    2716:	19 82       	std	Y+1, r1	; 0x01
	if (*old_time == 0) {
    2718:	ea 81       	ldd	r30, Y+2	; 0x02
    271a:	fb 81       	ldd	r31, Y+3	; 0x03
    271c:	80 81       	ld	r24, Z
    271e:	91 81       	ldd	r25, Z+1	; 0x01
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	49 f4       	brne	.+18     	; 0x2736 <srq_occured+0x30>
		// old_time value initialization on first call with value s
		*old_time = s;
    2724:	80 91 e9 05 	lds	r24, 0x05E9
    2728:	88 2f       	mov	r24, r24
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	ea 81       	ldd	r30, Y+2	; 0x02
    272e:	fb 81       	ldd	r31, Y+3	; 0x03
    2730:	91 83       	std	Z+1, r25	; 0x01
    2732:	80 83       	st	Z, r24
    2734:	1e c0       	rjmp	.+60     	; 0x2772 <srq_occured+0x6c>
	} else {
		if (s > *old_time) {
    2736:	80 91 e9 05 	lds	r24, 0x05E9
    273a:	28 2f       	mov	r18, r24
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	ea 81       	ldd	r30, Y+2	; 0x02
    2740:	fb 81       	ldd	r31, Y+3	; 0x03
    2742:	80 81       	ld	r24, Z
    2744:	91 81       	ldd	r25, Z+1	; 0x01
    2746:	82 17       	cp	r24, r18
    2748:	93 07       	cpc	r25, r19
    274a:	9c f4       	brge	.+38     	; 0x2772 <srq_occured+0x6c>
			// some time has passed - check if srq was set
			srq = bit_is_clear(PIND, G_SRQ);
    274c:	e0 e3       	ldi	r30, 0x30	; 48
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	88 2f       	mov	r24, r24
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	80 74       	andi	r24, 0x40	; 64
    2758:	90 70       	andi	r25, 0x00	; 0
    275a:	19 82       	std	Y+1, r1	; 0x01
    275c:	00 97       	sbiw	r24, 0x00	; 0
    275e:	11 f4       	brne	.+4      	; 0x2764 <srq_occured+0x5e>
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	89 83       	std	Y+1, r24	; 0x01
			if (srq)
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	88 23       	and	r24, r24
    2768:	21 f0       	breq	.+8      	; 0x2772 <srq_occured+0x6c>
				uart_puts_P("\n\rSRQ detected.\n\r");
    276a:	8e e1       	ldi	r24, 0x1E	; 30
    276c:	91 e0       	ldi	r25, 0x01	; 1
    276e:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
		}
	}
	return srq;
    2772:	89 81       	ldd	r24, Y+1	; 0x01
}
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	08 95       	ret

00002780 <srq_handle>:

/**
 * Handles SRQs by doing serial poll
 *
 */
uchar srq_handle(uchar *buf, int *buf_ptr) {
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    2788:	28 97       	sbiw	r28, 0x08	; 8
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	9d 83       	std	Y+5, r25	; 0x05
    2796:	8c 83       	std	Y+4, r24	; 0x04
    2798:	7f 83       	std	Y+7, r23	; 0x07
    279a:	6e 83       	std	Y+6, r22	; 0x06
	uchar command_ready = 0;
    279c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t primary, secondary;

	if (!gpib_serial_poll(&primary, &secondary)) {
    279e:	ce 01       	movw	r24, r28
    27a0:	02 96       	adiw	r24, 0x02	; 2
    27a2:	9e 01       	movw	r18, r28
    27a4:	2d 5f       	subi	r18, 0xFD	; 253
    27a6:	3f 4f       	sbci	r19, 0xFF	; 255
    27a8:	b9 01       	movw	r22, r18
    27aa:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <gpib_serial_poll>
    27ae:	88 23       	and	r24, r24
    27b0:	69 f4       	brne	.+26     	; 0x27cc <srq_handle+0x4c>
		uart_puts_P(
    27b2:	8b e4       	ldi	r24, 0x4B	; 75
    27b4:	91 e0       	ldi	r25, 0x01	; 1
    27b6:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
				"\n\rSRQ emitter is not in list of known devices. SRQ Ignored.\n\r");
		uart_puts_P("\n\rSRQs are disabled now.\n\r");
    27ba:	80 e3       	ldi	r24, 0x30	; 48
    27bc:	91 e0       	ldi	r25, 0x01	; 1
    27be:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
		srq_enabled = 0;
    27c2:	10 92 78 04 	sts	0x0478, r1
		return command_ready;
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	88 87       	std	Y+8, r24	; 0x08
    27ca:	3a c0       	rjmp	.+116    	; 0x2840 <srq_handle+0xc0>
	}

	if (gpib_get_flavour() == FLAVOUR_TEK) {
    27cc:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <gpib_get_flavour>
    27d0:	81 30       	cpi	r24, 0x01	; 1
    27d2:	a1 f5       	brne	.+104    	; 0x283c <srq_handle+0xbc>
		gpib_set_partner_address(primary, secondary);
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	9b 81       	ldd	r25, Y+3	; 0x03
    27d8:	69 2f       	mov	r22, r25
    27da:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <gpib_set_partner_address>
		// Tek: check status for reason
		buf[0] = 'E';
    27de:	ec 81       	ldd	r30, Y+4	; 0x04
    27e0:	fd 81       	ldd	r31, Y+5	; 0x05
    27e2:	85 e4       	ldi	r24, 0x45	; 69
    27e4:	80 83       	st	Z, r24
		buf[1] = 'V';
    27e6:	8c 81       	ldd	r24, Y+4	; 0x04
    27e8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ea:	fc 01       	movw	r30, r24
    27ec:	31 96       	adiw	r30, 0x01	; 1
    27ee:	86 e5       	ldi	r24, 0x56	; 86
    27f0:	80 83       	st	Z, r24
		buf[2] = 'E';
    27f2:	8c 81       	ldd	r24, Y+4	; 0x04
    27f4:	9d 81       	ldd	r25, Y+5	; 0x05
    27f6:	fc 01       	movw	r30, r24
    27f8:	32 96       	adiw	r30, 0x02	; 2
    27fa:	85 e4       	ldi	r24, 0x45	; 69
    27fc:	80 83       	st	Z, r24
		buf[3] = 'N';
    27fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2800:	9d 81       	ldd	r25, Y+5	; 0x05
    2802:	fc 01       	movw	r30, r24
    2804:	33 96       	adiw	r30, 0x03	; 3
    2806:	8e e4       	ldi	r24, 0x4E	; 78
    2808:	80 83       	st	Z, r24
		buf[4] = 'T';
    280a:	8c 81       	ldd	r24, Y+4	; 0x04
    280c:	9d 81       	ldd	r25, Y+5	; 0x05
    280e:	fc 01       	movw	r30, r24
    2810:	34 96       	adiw	r30, 0x04	; 4
    2812:	84 e5       	ldi	r24, 0x54	; 84
    2814:	80 83       	st	Z, r24
		buf[5] = '?';
    2816:	8c 81       	ldd	r24, Y+4	; 0x04
    2818:	9d 81       	ldd	r25, Y+5	; 0x05
    281a:	fc 01       	movw	r30, r24
    281c:	35 96       	adiw	r30, 0x05	; 5
    281e:	8f e3       	ldi	r24, 0x3F	; 63
    2820:	80 83       	st	Z, r24
		buf[6] = '\0';
    2822:	8c 81       	ldd	r24, Y+4	; 0x04
    2824:	9d 81       	ldd	r25, Y+5	; 0x05
    2826:	fc 01       	movw	r30, r24
    2828:	36 96       	adiw	r30, 0x06	; 6
    282a:	10 82       	st	Z, r1
		*buf_ptr = 6;
    282c:	ee 81       	ldd	r30, Y+6	; 0x06
    282e:	ff 81       	ldd	r31, Y+7	; 0x07
    2830:	86 e0       	ldi	r24, 0x06	; 6
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	91 83       	std	Z+1, r25	; 0x01
    2836:	80 83       	st	Z, r24
		command_ready = 1;
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	89 83       	std	Y+1, r24	; 0x01
	}
	return command_ready;
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	88 87       	std	Y+8, r24	; 0x08
    2840:	88 85       	ldd	r24, Y+8	; 0x08
}
    2842:	28 96       	adiw	r28, 0x08	; 8
    2844:	0f b6       	in	r0, 0x3f	; 63
    2846:	f8 94       	cli
    2848:	de bf       	out	0x3e, r29	; 62
    284a:	0f be       	out	0x3f, r0	; 63
    284c:	cd bf       	out	0x3d, r28	; 61
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	08 95       	ret

00002854 <printHelp>:

void printHelp() {
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	c0 55       	subi	r28, 0x50	; 80
    285e:	d0 40       	sbci	r29, 0x00	; 0
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
	char buf[COMMAND_INPUT_BUFFER_SIZE];
	sprintf(buf, "\n\rGPIB Controller (Rev.%s) (c) spurtikus.de 2008-2015\n\r",
    286a:	00 d0       	rcall	.+0      	; 0x286c <printHelp+0x18>
    286c:	00 d0       	rcall	.+0      	; 0x286e <printHelp+0x1a>
    286e:	00 d0       	rcall	.+0      	; 0x2870 <printHelp+0x1c>
    2870:	ed b7       	in	r30, 0x3d	; 61
    2872:	fe b7       	in	r31, 0x3e	; 62
    2874:	31 96       	adiw	r30, 0x01	; 1
    2876:	ce 01       	movw	r24, r28
    2878:	01 96       	adiw	r24, 0x01	; 1
    287a:	91 83       	std	Z+1, r25	; 0x01
    287c:	80 83       	st	Z, r24
    287e:	8d ee       	ldi	r24, 0xED	; 237
    2880:	93 e0       	ldi	r25, 0x03	; 3
    2882:	93 83       	std	Z+3, r25	; 0x03
    2884:	82 83       	std	Z+2, r24	; 0x02
    2886:	85 e2       	ldi	r24, 0x25	; 37
    2888:	94 e0       	ldi	r25, 0x04	; 4
    288a:	95 83       	std	Z+5, r25	; 0x05
    288c:	84 83       	std	Z+4, r24	; 0x04
    288e:	0e 94 35 02 	call	0x46a	; 0x46a <sprintf>
    2892:	8d b7       	in	r24, 0x3d	; 61
    2894:	9e b7       	in	r25, 0x3e	; 62
    2896:	06 96       	adiw	r24, 0x06	; 6
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	9e bf       	out	0x3e, r25	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	8d bf       	out	0x3d, r24	; 61
	REVISION);
	uart_puts(buf);
    28a2:	ce 01       	movw	r24, r28
    28a4:	01 96       	adiw	r24, 0x01	; 1
    28a6:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
	uart_puts_P("Internal commands:\n\r");
    28aa:	83 ef       	ldi	r24, 0xF3	; 243
    28ac:	92 e0       	ldi	r25, 0x02	; 2
    28ae:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
	uart_puts(
    28b2:	89 e2       	ldi	r24, 0x29	; 41
    28b4:	94 e0       	ldi	r25, 0x04	; 4
    28b6:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
			".a <primary> [<secondary>] - set prim./second. address of remote device\n\r");
	uart_puts_P(".r toggle SRQ enablement\n\r");
    28ba:	88 ed       	ldi	r24, 0xD8	; 216
    28bc:	92 e0       	ldi	r25, 0x02	; 2
    28be:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
	uart_puts_P(".s <secondary> - set secondary address of remote device\n\r");
    28c2:	8e e9       	ldi	r24, 0x9E	; 158
    28c4:	92 e0       	ldi	r25, 0x02	; 2
    28c6:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
	uart_puts_P(
    28ca:	8e e5       	ldi	r24, 0x5E	; 94
    28cc:	92 e0       	ldi	r25, 0x02	; 2
    28ce:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
			".+ <n> - add partner device address to list of known devices.\n\r");
	uart_puts_P(
    28d2:	89 e1       	ldi	r24, 0x19	; 25
    28d4:	92 e0       	ldi	r25, 0x02	; 2
    28d6:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
			".- <n> - remove partner device address from list of known devices.\n\r");
	uart_puts_P(".x - toggle Xon/Xoff flow control.\n\r");
    28da:	84 ef       	ldi	r24, 0xF4	; 244
    28dc:	91 e0       	ldi	r25, 0x01	; 1
    28de:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
	uart_puts_P(".h - print help.\n\r");
    28e2:	81 ee       	ldi	r24, 0xE1	; 225
    28e4:	91 e0       	ldi	r25, 0x01	; 1
    28e6:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
	uart_puts_P(".e - dump error queue.\n\r");
    28ea:	88 ec       	ldi	r24, 0xC8	; 200
    28ec:	91 e0       	ldi	r25, 0x01	; 1
    28ee:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
	uart_puts_P(".f - find partners.\n\r");
    28f2:	82 eb       	ldi	r24, 0xB2	; 178
    28f4:	91 e0       	ldi	r25, 0x01	; 1
    28f6:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
	uart_puts_P(".i - dump info about controller state.\n\r");
    28fa:	89 e8       	ldi	r24, 0x89	; 137
    28fc:	91 e0       	ldi	r25, 0x01	; 1
    28fe:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
}
    2902:	c0 5b       	subi	r28, 0xB0	; 176
    2904:	df 4f       	sbci	r29, 0xFF	; 255
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	f8 94       	cli
    290a:	de bf       	out	0x3e, r29	; 62
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	cd bf       	out	0x3d, r28	; 61
    2910:	cf 91       	pop	r28
    2912:	df 91       	pop	r29
    2914:	08 95       	ret

00002916 <state_machine>:
 * 2. send user entered command, if available, to listeners (act as talker, set devices to listeners)
 * 3. if command was a query, read the answer from device (become listener and set device to talker)
 * 4. check if SRQ occured and handle that
 *
 */
void state_machine() {
    2916:	df 93       	push	r29
    2918:	cf 93       	push	r28
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	c9 55       	subi	r28, 0x59	; 89
    2920:	d0 40       	sbci	r29, 0x00	; 0
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
	int old_time = 0;
    292c:	1e 82       	std	Y+6, r1	; 0x06
    292e:	1d 82       	std	Y+5, r1	; 0x05
	uchar is_query = 0;
    2930:	1c 82       	std	Y+4, r1	; 0x04
	uchar do_prompt = 1;
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	8b 83       	std	Y+3, r24	; 0x03
	uchar ch;

	/** buffers used for commands and output strings */
	uchar buf[COMMAND_INPUT_BUFFER_SIZE];
	/** pointer in buffer */
	int buf_ptr = 0;
    2936:	fe 01       	movw	r30, r28
    2938:	e8 5a       	subi	r30, 0xA8	; 168
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	11 82       	std	Z+1, r1	; 0x01
    293e:	10 82       	st	Z, r1

	uchar state = S_INITIAL;
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	8a 83       	std	Y+2, r24	; 0x02
	for (;;) {
		if (state == S_INITIAL) {
    2944:	8a 81       	ldd	r24, Y+2	; 0x02
    2946:	81 30       	cpi	r24, 0x01	; 1
    2948:	49 f4       	brne	.+18     	; 0x295c <state_machine+0x46>
			if (do_prompt) {
    294a:	8b 81       	ldd	r24, Y+3	; 0x03
    294c:	88 23       	and	r24, r24
    294e:	31 f0       	breq	.+12     	; 0x295c <state_machine+0x46>
				uart_puts("> ");
    2950:	83 e7       	ldi	r24, 0x73	; 115
    2952:	94 e0       	ldi	r25, 0x04	; 4
    2954:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <uart_puts>
				do_prompt = 0;
    2958:	1b 82       	std	Y+3, r1	; 0x03
				is_query = 0;
    295a:	1c 82       	std	Y+4, r1	; 0x04
			}
		}

		if (!input_char(&ch))
    295c:	ce 01       	movw	r24, r28
    295e:	07 96       	adiw	r24, 0x07	; 7
    2960:	0e 94 3c 10 	call	0x2078	; 0x2078 <input_char>
    2964:	88 23       	and	r24, r24
    2966:	71 f3       	breq	.-36     	; 0x2944 <state_machine+0x2e>
			continue;

		// byte received. Decide with state what to do.

		if (state == S_INITIAL) {
    2968:	8a 81       	ldd	r24, Y+2	; 0x02
    296a:	81 30       	cpi	r24, 0x01	; 1
    296c:	41 f4       	brne	.+16     	; 0x297e <state_machine+0x68>
			// internal or external command?
			if (ch == '.') {
    296e:	8f 81       	ldd	r24, Y+7	; 0x07
    2970:	8e 32       	cpi	r24, 0x2E	; 46
    2972:	19 f4       	brne	.+6      	; 0x297a <state_machine+0x64>
				// internal command
				state = S_FIRST_BYTE_INT;
    2974:	82 e0       	ldi	r24, 0x02	; 2
    2976:	8a 83       	std	Y+2, r24	; 0x02
    2978:	02 c0       	rjmp	.+4      	; 0x297e <state_machine+0x68>
			} else {
				// gpib command
				state = S_FIRST_BYTE_GPIB;
    297a:	83 e0       	ldi	r24, 0x03	; 3
    297c:	8a 83       	std	Y+2, r24	; 0x02

			}
		}

		if (state == S_FIRST_BYTE_INT) {
    297e:	8a 81       	ldd	r24, Y+2	; 0x02
    2980:	82 30       	cpi	r24, 0x02	; 2
    2982:	59 f5       	brne	.+86     	; 0x29da <state_machine+0xc4>
			buf[0] = ch;
    2984:	8f 81       	ldd	r24, Y+7	; 0x07
    2986:	88 87       	std	Y+8, r24	; 0x08
			buf_ptr = 1;
    2988:	fe 01       	movw	r30, r28
    298a:	e8 5a       	subi	r30, 0xA8	; 168
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	91 83       	std	Z+1, r25	; 0x01
    2994:	80 83       	st	Z, r24
			// send received character back depending on global flag
			if (rs232_remote_echo) {
    2996:	80 91 76 04 	lds	r24, 0x0476
    299a:	88 23       	and	r24, r24
    299c:	19 f0       	breq	.+6      	; 0x29a4 <state_machine+0x8e>
				uart_putc((unsigned char) ch);
    299e:	8f 81       	ldd	r24, Y+7	; 0x07
    29a0:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <uart_putc>
			}
			// collect line until CR
			while (!input_process(buf, &buf_ptr))
    29a4:	ce 01       	movw	r24, r28
    29a6:	08 96       	adiw	r24, 0x08	; 8
    29a8:	9e 01       	movw	r18, r28
    29aa:	28 5a       	subi	r18, 0xA8	; 168
    29ac:	3f 4f       	sbci	r19, 0xFF	; 255
    29ae:	b9 01       	movw	r22, r18
    29b0:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <input_process>
    29b4:	88 23       	and	r24, r24
    29b6:	b1 f3       	breq	.-20     	; 0x29a4 <state_machine+0x8e>
				;
			uart_puts_P("\n\r");
    29b8:	81 e4       	ldi	r24, 0x41	; 65
    29ba:	93 e0       	ldi	r25, 0x03	; 3
    29bc:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
			// execute internal command
			handle_internal_commands(buf);
    29c0:	ce 01       	movw	r24, r28
    29c2:	08 96       	adiw	r24, 0x08	; 8
    29c4:	0e 94 34 11 	call	0x2268	; 0x2268 <handle_internal_commands>
			// reset local vars
			state = S_INITIAL;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	8a 83       	std	Y+2, r24	; 0x02
			buf_ptr = 0;
    29cc:	fe 01       	movw	r30, r28
    29ce:	e8 5a       	subi	r30, 0xA8	; 168
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	11 82       	std	Z+1, r1	; 0x01
    29d4:	10 82       	st	Z, r1
			do_prompt = 1;
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	8b 83       	std	Y+3, r24	; 0x03
		}

		if (state == S_FIRST_BYTE_GPIB) {
    29da:	8a 81       	ldd	r24, Y+2	; 0x02
    29dc:	83 30       	cpi	r24, 0x03	; 3
    29de:	d1 f4       	brne	.+52     	; 0x2a14 <state_machine+0xfe>
			// GPIB command. Check if a partner was defined.
			if (gpib_get_partner_pad() == ADDRESS_NOT_SET) {
    29e0:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <gpib_get_partner_pad>
    29e4:	8f 3f       	cpi	r24, 0xFF	; 255
    29e6:	79 f4       	brne	.+30     	; 0x2a06 <state_machine+0xf0>
				uart_puts_P(
    29e8:	8e e0       	ldi	r24, 0x0E	; 14
    29ea:	93 e0       	ldi	r25, 0x03	; 3
    29ec:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
						"Device address is not set. Can not send command.\n\r");
				// reset local vars
				state = S_INITIAL;
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	8a 83       	std	Y+2, r24	; 0x02
				buf_ptr = 0;
    29f4:	fe 01       	movw	r30, r28
    29f6:	e8 5a       	subi	r30, 0xA8	; 168
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	11 82       	std	Z+1, r1	; 0x01
    29fc:	10 82       	st	Z, r1
				do_prompt = 1;
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	8b 83       	std	Y+3, r24	; 0x03
				is_query = 0;
    2a02:	1c 82       	std	Y+4, r1	; 0x04
    2a04:	07 c0       	rjmp	.+14     	; 0x2a14 <state_machine+0xfe>
			} else {
				// write prologue
				state = S_SEND_BYTES;
    2a06:	84 e0       	ldi	r24, 0x04	; 4
    2a08:	8a 83       	std	Y+2, r24	; 0x02
				gpib_prepare_write();
    2a0a:	0e 94 8c 05 	call	0xb18	; 0xb18 <gpib_prepare_write>
				gpib_write_prologue(0);
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	0e 94 fa 07 	call	0xff4	; 0xff4 <gpib_write_prologue>
			}
		}

		if (state == S_SEND_BYTES) {
    2a14:	8a 81       	ldd	r24, Y+2	; 0x02
    2a16:	84 30       	cpi	r24, 0x04	; 4
    2a18:	29 f5       	brne	.+74     	; 0x2a64 <state_machine+0x14e>
			// send received character back depending on global flag
			if (rs232_remote_echo) {
    2a1a:	80 91 76 04 	lds	r24, 0x0476
    2a1e:	88 23       	and	r24, r24
    2a20:	19 f0       	breq	.+6      	; 0x2a28 <state_machine+0x112>
				uart_putc((unsigned char) ch);
    2a22:	8f 81       	ldd	r24, Y+7	; 0x07
    2a24:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <uart_putc>
			}
			uchar isLastByte = (ch == ASCII_CODE_CR);
    2a28:	8f 81       	ldd	r24, Y+7	; 0x07
    2a2a:	19 82       	std	Y+1, r1	; 0x01
    2a2c:	8d 30       	cpi	r24, 0x0D	; 13
    2a2e:	11 f4       	brne	.+4      	; 0x2a34 <state_machine+0x11e>
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	89 83       	std	Y+1, r24	; 0x01
			gpib_write_byte(ch, isLastByte);
    2a34:	8f 81       	ldd	r24, Y+7	; 0x07
    2a36:	69 81       	ldd	r22, Y+1	; 0x01
    2a38:	0e 94 b3 08 	call	0x1166	; 0x1166 <gpib_write_byte>

			if (ch == '?') {
    2a3c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a3e:	8f 33       	cpi	r24, 0x3F	; 63
    2a40:	11 f4       	brne	.+4      	; 0x2a46 <state_machine+0x130>
				is_query = 1;
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	8c 83       	std	Y+4, r24	; 0x04
			}

			if (isLastByte) {
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	88 23       	and	r24, r24
    2a4a:	61 f0       	breq	.+24     	; 0x2a64 <state_machine+0x14e>
				uart_puts_P("\n\r");
    2a4c:	8b e0       	ldi	r24, 0x0B	; 11
    2a4e:	93 e0       	ldi	r25, 0x03	; 3
    2a50:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
				if (is_query) {
    2a54:	8c 81       	ldd	r24, Y+4	; 0x04
    2a56:	88 23       	and	r24, r24
    2a58:	19 f0       	breq	.+6      	; 0x2a60 <state_machine+0x14a>
					//uart_puts("Query. Will check for answer.\n\r");
					state = S_GPIB_ANSWER;
    2a5a:	85 e0       	ldi	r24, 0x05	; 5
    2a5c:	8a 83       	std	Y+2, r24	; 0x02
    2a5e:	02 c0       	rjmp	.+4      	; 0x2a64 <state_machine+0x14e>
				} else {
					//uart_puts("Command only.\n\r");
					state = S_GPIB_NO_ANSWER;
    2a60:	86 e0       	ldi	r24, 0x06	; 6
    2a62:	8a 83       	std	Y+2, r24	; 0x02
				}
			}
		}

		// write epilogue
		if (state == S_GPIB_ANSWER || state == S_GPIB_NO_ANSWER) {
    2a64:	8a 81       	ldd	r24, Y+2	; 0x02
    2a66:	85 30       	cpi	r24, 0x05	; 5
    2a68:	19 f0       	breq	.+6      	; 0x2a70 <state_machine+0x15a>
    2a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6c:	86 30       	cpi	r24, 0x06	; 6
    2a6e:	41 f4       	brne	.+16     	; 0x2a80 <state_machine+0x16a>
			gpib_write_epilogue(0);
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	0e 94 49 08 	call	0x1092	; 0x1092 <gpib_write_epilogue>
			buf_ptr = 0;
    2a76:	fe 01       	movw	r30, r28
    2a78:	e8 5a       	subi	r30, 0xA8	; 168
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	11 82       	std	Z+1, r1	; 0x01
    2a7e:	10 82       	st	Z, r1
		}

		// if we sent a query, read the answer
		if (state == S_GPIB_ANSWER) {
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
    2a82:	85 30       	cpi	r24, 0x05	; 5
    2a84:	21 f4       	brne	.+8      	; 0x2a8e <state_machine+0x178>
			receiveAnswer();
    2a86:	0e 94 51 13 	call	0x26a2	; 0x26a2 <receiveAnswer>
			state = S_FINAL;
    2a8a:	87 e0       	ldi	r24, 0x07	; 7
    2a8c:	8a 83       	std	Y+2, r24	; 0x02
		}

		// finalize state machine
		if (state == S_GPIB_NO_ANSWER || state == S_FINAL) {
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	86 30       	cpi	r24, 0x06	; 6
    2a92:	19 f0       	breq	.+6      	; 0x2a9a <state_machine+0x184>
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	87 30       	cpi	r24, 0x07	; 7
    2a98:	51 f4       	brne	.+20     	; 0x2aae <state_machine+0x198>
			// untalk/unlisten all partners
			gpib_untalkUnlisten();
    2a9a:	0e 94 f6 05 	call	0xbec	; 0xbec <gpib_untalkUnlisten>
			// some devices do not send cr,lf at command end, so create it always itself
			uart_puts_P("\n\r");
    2a9e:	88 e0       	ldi	r24, 0x08	; 8
    2aa0:	93 e0       	ldi	r25, 0x03	; 3
    2aa2:	0e 94 80 17 	call	0x2f00	; 0x2f00 <uart_puts_p>
			do_prompt = 1;
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	8b 83       	std	Y+3, r24	; 0x03
			state = S_INITIAL;
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	8a 83       	std	Y+2, r24	; 0x02
		}

		// SRQ detection - do this every time when time value s has changed
		// s is incremented every second. So we check once a second.
		if (srq_enabled && srq_occured(&old_time)) {
    2aae:	80 91 78 04 	lds	r24, 0x0478
    2ab2:	88 23       	and	r24, r24
    2ab4:	09 f4       	brne	.+2      	; 0x2ab8 <state_machine+0x1a2>
    2ab6:	46 cf       	rjmp	.-372    	; 0x2944 <state_machine+0x2e>
    2ab8:	ce 01       	movw	r24, r28
    2aba:	05 96       	adiw	r24, 0x05	; 5
    2abc:	0e 94 83 13 	call	0x2706	; 0x2706 <srq_occured>
    2ac0:	88 23       	and	r24, r24
    2ac2:	09 f4       	brne	.+2      	; 0x2ac6 <state_machine+0x1b0>
    2ac4:	3f cf       	rjmp	.-386    	; 0x2944 <state_machine+0x2e>
			// TODO: make handle srq work again
			// the returned command_ready was interpreted to read in an answer
			// but this was turned of for new input loop
			// next two lines replace that but must be tested.
			if (srq_handle(buf, &buf_ptr)) {
    2ac6:	ce 01       	movw	r24, r28
    2ac8:	08 96       	adiw	r24, 0x08	; 8
    2aca:	9e 01       	movw	r18, r28
    2acc:	28 5a       	subi	r18, 0xA8	; 168
    2ace:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad0:	b9 01       	movw	r22, r18
    2ad2:	0e 94 c0 13 	call	0x2780	; 0x2780 <srq_handle>
    2ad6:	88 23       	and	r24, r24
    2ad8:	09 f4       	brne	.+2      	; 0x2adc <state_machine+0x1c6>
    2ada:	34 cf       	rjmp	.-408    	; 0x2944 <state_machine+0x2e>
				state = S_GPIB_ANSWER;
    2adc:	85 e0       	ldi	r24, 0x05	; 5
    2ade:	8a 83       	std	Y+2, r24	; 0x02
    2ae0:	31 cf       	rjmp	.-414    	; 0x2944 <state_machine+0x2e>

00002ae2 <main>:
 * \brief Implementation of GPIB controller. Reads a command from RS232, sends it via bus.
 * If The command contains a '?', an answer from the device is expected and read in. The
 * answer then is printed out. If an SRQ occured, a serial poll is initiated.
 * 
 */
int main(void) {
    2ae2:	df 93       	push	r29
    2ae4:	cf 93       	push	r28
    2ae6:	cd b7       	in	r28, 0x3d	; 61
    2ae8:	de b7       	in	r29, 0x3e	; 62
	/*
	 *  Initialize UART library, pass baudrate and avr cpu clock 
	 *  with the macro UART_BAUD_SELECT()
	 */DI();
    2aea:	8c e0       	ldi	r24, 0x0C	; 12
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <uart_init>

	/*
	 * now enable interrupt, since UART and TIMER library is interrupt controlled
	 */sei();
    2af2:	78 94       	sei

	/** print some usage infos */
	printHelp();
    2af4:	0e 94 2a 14 	call	0x2854	; 0x2854 <printHelp>

	// init timer for timeout detection
	timer16_init();
    2af8:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <timer16_init>

	// init gpib lines
	gpib_init();
    2afc:	0e 94 0d 05 	call	0xa1a	; 0xa1a <gpib_init>
	// init controller part - assign bus 
	gpib_controller_assign(0x00);
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	0e 94 04 07 	call	0xe08	; 0xe08 <gpib_controller_assign>

	if (xonXoffMode) {
    2b06:	80 91 77 04 	lds	r24, 0x0477
    2b0a:	88 23       	and	r24, r24
    2b0c:	19 f0       	breq	.+6      	; 0x2b14 <main+0x32>
		uart_set_flow_control(FLOWCONTROL_XONXOFF);
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <uart_set_flow_control>
	}

	// state machine loops forever
	state_machine();
    2b14:	0e 94 8b 14 	call	0x2916	; 0x2916 <state_machine>
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
}
    2b1c:	cf 91       	pop	r28
    2b1e:	df 91       	pop	r29
    2b20:	08 95       	ret

00002b22 <__vector_7>:

/**
 * Interrupt Service Routine - do not call directly
 *  This routine is called when the Timer Value TCNT1 reaches the Output Compare Register Value OCR1A
 */ 
ISR(TIMER1_COMPA_vect) {
    2b22:	1f 92       	push	r1
    2b24:	0f 92       	push	r0
    2b26:	0f b6       	in	r0, 0x3f	; 63
    2b28:	0f 92       	push	r0
    2b2a:	11 24       	eor	r1, r1
    2b2c:	8f 93       	push	r24
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
#if XTAL_CPU % DEBOUNCE
	OCR1A = XTAL_CPU / DEBOUNCE - 1;
#endif
	if (--timer==0) {
    2b36:	80 91 e8 05 	lds	r24, 0x05E8
    2b3a:	81 50       	subi	r24, 0x01	; 1
    2b3c:	80 93 e8 05 	sts	0x05E8, r24
    2b40:	80 91 e8 05 	lds	r24, 0x05E8
    2b44:	88 23       	and	r24, r24
    2b46:	39 f4       	brne	.+14     	; 0x2b56 <__vector_7+0x34>
		timer=(uint8_t) DEBOUNCE;
    2b48:	10 92 e8 05 	sts	0x05E8, r1
		s++;
    2b4c:	80 91 e9 05 	lds	r24, 0x05E9
    2b50:	8f 5f       	subi	r24, 0xFF	; 255
    2b52:	80 93 e9 05 	sts	0x05E9, r24
#if XTAL_CPU % DEBOUNCE
		OCR1A = XTAL_CPU / DEBOUNCE + XTAL_CPU % DEBOUNCE - 1;
#endif
	}
}
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	8f 91       	pop	r24
    2b5c:	0f 90       	pop	r0
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	0f 90       	pop	r0
    2b62:	1f 90       	pop	r1
    2b64:	18 95       	reti

00002b66 <timer16_init>:
/**
 * Timer initialisation.
 *  \brief initializes all registers ands sets second value 's' to zero. Timer is immediately
 * started.
 */ 
void timer16_init( void ) {
    2b66:	df 93       	push	r29
    2b68:	cf 93       	push	r28
    2b6a:	cd b7       	in	r28, 0x3d	; 61
    2b6c:	de b7       	in	r29, 0x3e	; 62

	// OCR1A=XTAL/DEBOUNCE-1 -> Bei Erreichen dieses Wertes (31249) wird die ISR besucht
	// die ISR wird also alle 1/256s aufgerufen. Wenn man dort also bis 256 hochzählt, ist genau
	// 1 Sekunde um! 256 ist der Wert der Variable timer und wird über das define DEBOUNCE festgelegt

	TCCR1B = (1<<CS10) ^ (1<<WGM12);	// Prescaler of 1 | CTC mode
    2b6e:	ee e4       	ldi	r30, 0x4E	; 78
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	89 e0       	ldi	r24, 0x09	; 9
    2b74:	80 83       	st	Z, r24
	OCR1A  = F_CPU/DEBOUNCE-1;		// Output compare register value 
    2b76:	ea e4       	ldi	r30, 0x4A	; 74
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	81 e1       	ldi	r24, 0x11	; 17
    2b7c:	9a e7       	ldi	r25, 0x7A	; 122
    2b7e:	91 83       	std	Z+1, r25	; 0x01
    2b80:	80 83       	st	Z, r24
	TCNT1 = 0; // Start value for timer register
    2b82:	ec e4       	ldi	r30, 0x4C	; 76
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	11 82       	std	Z+1, r1	; 0x01
    2b88:	10 82       	st	Z, r1
	s=0; // Initialize second value (s) to zero
    2b8a:	10 92 e9 05 	sts	0x05E9, r1
	timer = (uint8_t)DEBOUNCE; 
    2b8e:	10 92 e8 05 	sts	0x05E8, r1
	TIMSK |= (1<<OCIE1A);		// activate timer interrupts which starts timer run
    2b92:	a9 e5       	ldi	r26, 0x59	; 89
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	e9 e5       	ldi	r30, 0x59	; 89
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	80 61       	ori	r24, 0x10	; 16
    2b9e:	8c 93       	st	X, r24
}
    2ba0:	cf 91       	pop	r28
    2ba2:	df 91       	pop	r29
    2ba4:	08 95       	ret

00002ba6 <uart_set_flow_control>:
/** number of chars in rx buffer */
static volatile unsigned char chars_in_rx_buffer = 0;

void SendOutOfBand(unsigned char c);

void uart_set_flow_control(unsigned char _flowControl) {
    2ba6:	df 93       	push	r29
    2ba8:	cf 93       	push	r28
    2baa:	0f 92       	push	r0
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	89 83       	std	Y+1, r24	; 0x01
	flowControl = _flowControl;
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	80 93 8b 04 	sts	0x048B, r24
}
    2bb8:	0f 90       	pop	r0
    2bba:	cf 91       	pop	r28
    2bbc:	df 91       	pop	r29
    2bbe:	08 95       	ret

00002bc0 <uart_get_flow_control>:

unsigned char uart_get_flow_control() {
    2bc0:	df 93       	push	r29
    2bc2:	cf 93       	push	r28
    2bc4:	cd b7       	in	r28, 0x3d	; 61
    2bc6:	de b7       	in	r29, 0x3e	; 62
	return flowControl;
    2bc8:	80 91 8b 04 	lds	r24, 0x048B
}
    2bcc:	cf 91       	pop	r28
    2bce:	df 91       	pop	r29
    2bd0:	08 95       	ret

00002bd2 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
 Function: UART Receive Complete interrupt
 Purpose:  called when the UART has received a character
 **************************************************************************/
{
    2bd2:	1f 92       	push	r1
    2bd4:	0f 92       	push	r0
    2bd6:	0f b6       	in	r0, 0x3f	; 63
    2bd8:	0f 92       	push	r0
    2bda:	11 24       	eor	r1, r1
    2bdc:	2f 93       	push	r18
    2bde:	3f 93       	push	r19
    2be0:	4f 93       	push	r20
    2be2:	5f 93       	push	r21
    2be4:	6f 93       	push	r22
    2be6:	7f 93       	push	r23
    2be8:	8f 93       	push	r24
    2bea:	9f 93       	push	r25
    2bec:	af 93       	push	r26
    2bee:	bf 93       	push	r27
    2bf0:	ef 93       	push	r30
    2bf2:	ff 93       	push	r31
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	00 d0       	rcall	.+0      	; 0x2bfa <__vector_13+0x28>
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <__vector_13+0x2a>
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	unsigned char usr;
	unsigned char lastRxError;

	/* read UART status register and UART data register */
	usr = UART0_STATUS;
    2c00:	eb e2       	ldi	r30, 0x2B	; 43
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	8a 83       	std	Y+2, r24	; 0x02
	data = UART0_DATA;
    2c08:	ec e2       	ldi	r30, 0x2C	; 44
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	8b 83       	std	Y+3, r24	; 0x03

	/* */
#if defined( AT90_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
    2c10:	8a 81       	ldd	r24, Y+2	; 0x02
    2c12:	88 71       	andi	r24, 0x18	; 24
    2c14:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif

	/* calculate buffer index */
	tmphead = (UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    2c16:	80 91 31 05 	lds	r24, 0x0531
    2c1a:	8f 5f       	subi	r24, 0xFF	; 255
    2c1c:	8f 77       	andi	r24, 0x7F	; 127
    2c1e:	8c 83       	std	Y+4, r24	; 0x04

	if (tmphead == UART_RxTail) {
    2c20:	90 91 32 05 	lds	r25, 0x0532
    2c24:	8c 81       	ldd	r24, Y+4	; 0x04
    2c26:	89 17       	cp	r24, r25
    2c28:	19 f4       	brne	.+6      	; 0x2c30 <__vector_13+0x5e>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    2c2a:	82 e0       	ldi	r24, 0x02	; 2
    2c2c:	89 83       	std	Y+1, r24	; 0x01
    2c2e:	10 c0       	rjmp	.+32     	; 0x2c50 <__vector_13+0x7e>
	} else {
		/* store new index */
		UART_RxHead = tmphead;
    2c30:	8c 81       	ldd	r24, Y+4	; 0x04
    2c32:	80 93 31 05 	sts	0x0531, r24
		/* store received data in buffer */
		UART_RxBuf[tmphead] = data;
    2c36:	8c 81       	ldd	r24, Y+4	; 0x04
    2c38:	88 2f       	mov	r24, r24
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	e1 55       	subi	r30, 0x51	; 81
    2c40:	fb 4f       	sbci	r31, 0xFB	; 251
    2c42:	8b 81       	ldd	r24, Y+3	; 0x03
    2c44:	80 83       	st	Z, r24
		chars_in_rx_buffer++;
    2c46:	80 91 8e 04 	lds	r24, 0x048E
    2c4a:	8f 5f       	subi	r24, 0xFF	; 255
    2c4c:	80 93 8e 04 	sts	0x048E, r24
	}

	if (flowControl == FLOWCONTROL_XONXOFF
    2c50:	80 91 8b 04 	lds	r24, 0x048B
    2c54:	81 30       	cpi	r24, 0x01	; 1
    2c56:	99 f4       	brne	.+38     	; 0x2c7e <__vector_13+0xac>
    2c58:	80 91 8e 04 	lds	r24, 0x048E
    2c5c:	81 36       	cpi	r24, 0x61	; 97
    2c5e:	78 f0       	brcs	.+30     	; 0x2c7e <__vector_13+0xac>
			&& chars_in_rx_buffer > UART_RX_BUFFER_MAX_MARK) {
		/* immediately send XOFF */
		oob_event = 1;
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	80 93 8c 04 	sts	0x048C, r24
		if (!after_xoff_sent) {
    2c66:	80 91 8d 04 	lds	r24, 0x048D
    2c6a:	88 23       	and	r24, r24
    2c6c:	31 f4       	brne	.+12     	; 0x2c7a <__vector_13+0xa8>
			SendOutOfBand(XOFF);
    2c6e:	83 e1       	ldi	r24, 0x13	; 19
    2c70:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <SendOutOfBand>
			after_xoff_sent = 1;
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	80 93 8d 04 	sts	0x048D, r24
		}
		oob_event = 0;
    2c7a:	10 92 8c 04 	sts	0x048C, r1
	}

	UART_LastRxError = lastRxError;
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	80 93 33 05 	sts	0x0533, r24
}
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	0f 90       	pop	r0
    2c8c:	cf 91       	pop	r28
    2c8e:	df 91       	pop	r29
    2c90:	ff 91       	pop	r31
    2c92:	ef 91       	pop	r30
    2c94:	bf 91       	pop	r27
    2c96:	af 91       	pop	r26
    2c98:	9f 91       	pop	r25
    2c9a:	8f 91       	pop	r24
    2c9c:	7f 91       	pop	r23
    2c9e:	6f 91       	pop	r22
    2ca0:	5f 91       	pop	r21
    2ca2:	4f 91       	pop	r20
    2ca4:	3f 91       	pop	r19
    2ca6:	2f 91       	pop	r18
    2ca8:	0f 90       	pop	r0
    2caa:	0f be       	out	0x3f, r0	; 63
    2cac:	0f 90       	pop	r0
    2cae:	1f 90       	pop	r1
    2cb0:	18 95       	reti

00002cb2 <SendOutOfBand>:

void SendOutOfBand(unsigned char c) {
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	0f 92       	push	r0
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    2cbc:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << UDRE)))
    2cbe:	eb e2       	ldi	r30, 0x2B	; 43
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	88 2f       	mov	r24, r24
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	80 72       	andi	r24, 0x20	; 32
    2cca:	90 70       	andi	r25, 0x00	; 0
    2ccc:	00 97       	sbiw	r24, 0x00	; 0
    2cce:	b9 f3       	breq	.-18     	; 0x2cbe <SendOutOfBand+0xc>
		;
	UDR = c;
    2cd0:	ec e2       	ldi	r30, 0x2C	; 44
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	89 81       	ldd	r24, Y+1	; 0x01
    2cd6:	80 83       	st	Z, r24
}
    2cd8:	0f 90       	pop	r0
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	08 95       	ret

00002ce0 <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
 Function: UART Data Register Empty interrupt
 Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
    2ce0:	1f 92       	push	r1
    2ce2:	0f 92       	push	r0
    2ce4:	0f b6       	in	r0, 0x3f	; 63
    2ce6:	0f 92       	push	r0
    2ce8:	11 24       	eor	r1, r1
    2cea:	8f 93       	push	r24
    2cec:	9f 93       	push	r25
    2cee:	af 93       	push	r26
    2cf0:	bf 93       	push	r27
    2cf2:	ef 93       	push	r30
    2cf4:	ff 93       	push	r31
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	0f 92       	push	r0
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;

	if (oob_event) {
    2d00:	80 91 8c 04 	lds	r24, 0x048C
    2d04:	88 23       	and	r24, r24
    2d06:	01 f5       	brne	.+64     	; 0x2d48 <__vector_14+0x68>
		/* suppress transmitting during oob handling */
		return;
	}
	if (UART_TxHead != UART_TxTail) {
    2d08:	90 91 2f 05 	lds	r25, 0x052F
    2d0c:	80 91 30 05 	lds	r24, 0x0530
    2d10:	98 17       	cp	r25, r24
    2d12:	99 f0       	breq	.+38     	; 0x2d3a <__vector_14+0x5a>
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    2d14:	80 91 30 05 	lds	r24, 0x0530
    2d18:	8f 5f       	subi	r24, 0xFF	; 255
    2d1a:	8f 71       	andi	r24, 0x1F	; 31
    2d1c:	89 83       	std	Y+1, r24	; 0x01
		UART_TxTail = tmptail;
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	80 93 30 05 	sts	0x0530, r24
		/* get one byte from buffer and write it to UART */
		UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
    2d24:	ac e2       	ldi	r26, 0x2C	; 44
    2d26:	b0 e0       	ldi	r27, 0x00	; 0
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
    2d2a:	88 2f       	mov	r24, r24
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	fc 01       	movw	r30, r24
    2d30:	e1 57       	subi	r30, 0x71	; 113
    2d32:	fb 4f       	sbci	r31, 0xFB	; 251
    2d34:	80 81       	ld	r24, Z
    2d36:	8c 93       	st	X, r24
    2d38:	07 c0       	rjmp	.+14     	; 0x2d48 <__vector_14+0x68>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
    2d3a:	aa e2       	ldi	r26, 0x2A	; 42
    2d3c:	b0 e0       	ldi	r27, 0x00	; 0
    2d3e:	ea e2       	ldi	r30, 0x2A	; 42
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	80 81       	ld	r24, Z
    2d44:	8f 7d       	andi	r24, 0xDF	; 223
    2d46:	8c 93       	st	X, r24
	}
}
    2d48:	0f 90       	pop	r0
    2d4a:	cf 91       	pop	r28
    2d4c:	df 91       	pop	r29
    2d4e:	ff 91       	pop	r31
    2d50:	ef 91       	pop	r30
    2d52:	bf 91       	pop	r27
    2d54:	af 91       	pop	r26
    2d56:	9f 91       	pop	r25
    2d58:	8f 91       	pop	r24
    2d5a:	0f 90       	pop	r0
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	0f 90       	pop	r0
    2d60:	1f 90       	pop	r1
    2d62:	18 95       	reti

00002d64 <uart_init>:
 Function: uart_init()
 Purpose:  initialize UART and set baudrate
 Input:    baudrate using macro UART_BAUD_SELECT()
 Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate) {
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <uart_init+0x6>
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
    2d6e:	9a 83       	std	Y+2, r25	; 0x02
    2d70:	89 83       	std	Y+1, r24	; 0x01
	UART_TxHead = 0;
    2d72:	10 92 2f 05 	sts	0x052F, r1
	UART_TxTail = 0;
    2d76:	10 92 30 05 	sts	0x0530, r1
	UART_RxHead = 0;
    2d7a:	10 92 31 05 	sts	0x0531, r1
	UART_RxTail = 0;
    2d7e:	10 92 32 05 	sts	0x0532, r1
	/* enable UART receiver and transmmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if (baudrate & 0x8000) {
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
    2d86:	99 23       	and	r25, r25
    2d88:	4c f4       	brge	.+18     	; 0x2d9c <uart_init+0x38>
		UART0_STATUS = (1 << U2X);  //Enable 2x speed
    2d8a:	eb e2       	ldi	r30, 0x2B	; 43
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	82 e0       	ldi	r24, 0x02	; 2
    2d90:	80 83       	st	Z, r24
		baudrate &= ~0x8000;
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	9a 81       	ldd	r25, Y+2	; 0x02
    2d96:	9f 77       	andi	r25, 0x7F	; 127
    2d98:	9a 83       	std	Y+2, r25	; 0x02
    2d9a:	89 83       	std	Y+1, r24	; 0x01
	}
	UBRRH = (unsigned char) (baudrate >> 8);
    2d9c:	e0 e4       	ldi	r30, 0x40	; 64
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	9a 81       	ldd	r25, Y+2	; 0x02
    2da4:	89 2f       	mov	r24, r25
    2da6:	99 27       	eor	r25, r25
    2da8:	80 83       	st	Z, r24
	UBRRL = (unsigned char) baudrate;
    2daa:	e9 e2       	ldi	r30, 0x29	; 41
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	80 83       	st	Z, r24

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | (1 << RXEN) | (1 << TXEN);
    2db2:	ea e2       	ldi	r30, 0x2A	; 42
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	88 e9       	ldi	r24, 0x98	; 152
    2db8:	80 83       	st	Z, r24

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
    2dba:	e0 e4       	ldi	r30, 0x40	; 64
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	86 e8       	ldi	r24, 0x86	; 134
    2dc0:	80 83       	st	Z, r24
	/* Enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	cf 91       	pop	r28
    2dc8:	df 91       	pop	r29
    2dca:	08 95       	ret

00002dcc <uart_getc>:
 Function: uart_getc()
 Purpose:  return byte from ringbuffer
 Returns:  lower byte:  received byte from ringbuffer
 higher byte: last receive error
 **************************************************************************/
unsigned int uart_getc(void) {
    2dcc:	df 93       	push	r29
    2dce:	cf 93       	push	r28
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <uart_getc+0x6>
    2dd2:	00 d0       	rcall	.+0      	; 0x2dd4 <uart_getc+0x8>
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;
	unsigned char data;

	if (UART_RxHead == UART_RxTail) {
    2dd8:	90 91 31 05 	lds	r25, 0x0531
    2ddc:	80 91 32 05 	lds	r24, 0x0532
    2de0:	98 17       	cp	r25, r24
    2de2:	29 f4       	brne	.+10     	; 0x2dee <uart_getc+0x22>
		return UART_NO_DATA; /* no data available */
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	91 e0       	ldi	r25, 0x01	; 1
    2de8:	9c 83       	std	Y+4, r25	; 0x04
    2dea:	8b 83       	std	Y+3, r24	; 0x03
    2dec:	3c c0       	rjmp	.+120    	; 0x2e66 <uart_getc+0x9a>
	}

	/* calculate /store buffer index */
	tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    2dee:	80 91 32 05 	lds	r24, 0x0532
    2df2:	8f 5f       	subi	r24, 0xFF	; 255
    2df4:	8f 77       	andi	r24, 0x7F	; 127
    2df6:	8a 83       	std	Y+2, r24	; 0x02
	UART_RxTail = tmptail;
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	80 93 32 05 	sts	0x0532, r24

	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];
    2dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2e00:	88 2f       	mov	r24, r24
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	fc 01       	movw	r30, r24
    2e06:	e1 55       	subi	r30, 0x51	; 81
    2e08:	fb 4f       	sbci	r31, 0xFB	; 251
    2e0a:	80 81       	ld	r24, Z
    2e0c:	89 83       	std	Y+1, r24	; 0x01
	if (chars_in_rx_buffer > 0) {
    2e0e:	80 91 8e 04 	lds	r24, 0x048E
    2e12:	88 23       	and	r24, r24
    2e14:	29 f0       	breq	.+10     	; 0x2e20 <uart_getc+0x54>
		chars_in_rx_buffer--;
    2e16:	80 91 8e 04 	lds	r24, 0x048E
    2e1a:	81 50       	subi	r24, 0x01	; 1
    2e1c:	80 93 8e 04 	sts	0x048E, r24
	}
	if ((flowControl == FLOWCONTROL_XONXOFF) && after_xoff_sent) {
    2e20:	80 91 8b 04 	lds	r24, 0x048B
    2e24:	81 30       	cpi	r24, 0x01	; 1
    2e26:	91 f4       	brne	.+36     	; 0x2e4c <uart_getc+0x80>
    2e28:	80 91 8d 04 	lds	r24, 0x048D
    2e2c:	88 23       	and	r24, r24
    2e2e:	71 f0       	breq	.+28     	; 0x2e4c <uart_getc+0x80>
		if (chars_in_rx_buffer <= UART_RX_BUFFER_MIN_MARK) {
    2e30:	80 91 8e 04 	lds	r24, 0x048E
    2e34:	81 31       	cpi	r24, 0x11	; 17
    2e36:	50 f4       	brcc	.+20     	; 0x2e4c <uart_getc+0x80>
			/* immediately send XON */
			oob_event = 1;
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	80 93 8c 04 	sts	0x048C, r24
			SendOutOfBand(XON);
    2e3e:	81 e1       	ldi	r24, 0x11	; 17
    2e40:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <SendOutOfBand>
			after_xoff_sent = 0;
    2e44:	10 92 8d 04 	sts	0x048D, r1
			oob_event = 0;
    2e48:	10 92 8c 04 	sts	0x048C, r1
		}
	}

	return (UART_LastRxError << 8) + data;
    2e4c:	80 91 33 05 	lds	r24, 0x0533
    2e50:	88 2f       	mov	r24, r24
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	38 2f       	mov	r19, r24
    2e56:	22 27       	eor	r18, r18
    2e58:	89 81       	ldd	r24, Y+1	; 0x01
    2e5a:	88 2f       	mov	r24, r24
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	82 0f       	add	r24, r18
    2e60:	93 1f       	adc	r25, r19
    2e62:	9c 83       	std	Y+4, r25	; 0x04
    2e64:	8b 83       	std	Y+3, r24	; 0x03
    2e66:	8b 81       	ldd	r24, Y+3	; 0x03
    2e68:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    2e6a:	0f 90       	pop	r0
    2e6c:	0f 90       	pop	r0
    2e6e:	0f 90       	pop	r0
    2e70:	0f 90       	pop	r0
    2e72:	cf 91       	pop	r28
    2e74:	df 91       	pop	r29
    2e76:	08 95       	ret

00002e78 <uart_putc>:
 Function: uart_putc()
 Purpose:  write byte to ringbuffer for transmitting via UART
 Input:    byte to be transmitted
 Returns:  none
 **************************************************************************/
void uart_putc(unsigned char data) {
    2e78:	df 93       	push	r29
    2e7a:	cf 93       	push	r28
    2e7c:	00 d0       	rcall	.+0      	; 0x2e7e <uart_putc+0x6>
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
    2e82:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char tmphead;

	tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    2e84:	80 91 2f 05 	lds	r24, 0x052F
    2e88:	8f 5f       	subi	r24, 0xFF	; 255
    2e8a:	8f 71       	andi	r24, 0x1F	; 31
    2e8c:	89 83       	std	Y+1, r24	; 0x01

	while (tmphead == UART_TxTail) {
    2e8e:	90 91 30 05 	lds	r25, 0x0530
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	89 17       	cp	r24, r25
    2e96:	d9 f3       	breq	.-10     	; 0x2e8e <uart_putc+0x16>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	88 2f       	mov	r24, r24
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	e1 57       	subi	r30, 0x71	; 113
    2ea2:	fb 4f       	sbci	r31, 0xFB	; 251
    2ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea6:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
    2eaa:	80 93 2f 05 	sts	0x052F, r24

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    2eae:	aa e2       	ldi	r26, 0x2A	; 42
    2eb0:	b0 e0       	ldi	r27, 0x00	; 0
    2eb2:	ea e2       	ldi	r30, 0x2A	; 42
    2eb4:	f0 e0       	ldi	r31, 0x00	; 0
    2eb6:	80 81       	ld	r24, Z
    2eb8:	80 62       	ori	r24, 0x20	; 32
    2eba:	8c 93       	st	X, r24

}/* uart_putc */
    2ebc:	0f 90       	pop	r0
    2ebe:	0f 90       	pop	r0
    2ec0:	cf 91       	pop	r28
    2ec2:	df 91       	pop	r29
    2ec4:	08 95       	ret

00002ec6 <uart_puts>:
 Function: uart_puts()
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	00 d0       	rcall	.+0      	; 0x2ecc <uart_puts+0x6>
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	9a 83       	std	Y+2, r25	; 0x02
    2ed2:	89 83       	std	Y+1, r24	; 0x01
    2ed4:	0b c0       	rjmp	.+22     	; 0x2eec <uart_puts+0x26>
	while (*s)
		uart_putc(*s++);
    2ed6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ed8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eda:	20 81       	ld	r18, Z
    2edc:	89 81       	ldd	r24, Y+1	; 0x01
    2ede:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee0:	01 96       	adiw	r24, 0x01	; 1
    2ee2:	9a 83       	std	Y+2, r25	; 0x02
    2ee4:	89 83       	std	Y+1, r24	; 0x01
    2ee6:	82 2f       	mov	r24, r18
    2ee8:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <uart_putc>
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
	while (*s)
    2eec:	e9 81       	ldd	r30, Y+1	; 0x01
    2eee:	fa 81       	ldd	r31, Y+2	; 0x02
    2ef0:	80 81       	ld	r24, Z
    2ef2:	88 23       	and	r24, r24
    2ef4:	81 f7       	brne	.-32     	; 0x2ed6 <uart_puts+0x10>
		uart_putc(*s++);

}/* uart_puts */
    2ef6:	0f 90       	pop	r0
    2ef8:	0f 90       	pop	r0
    2efa:	cf 91       	pop	r28
    2efc:	df 91       	pop	r29
    2efe:	08 95       	ret

00002f00 <uart_puts_p>:
 Function: uart_puts_p()
 Purpose:  transmit string from program memory to UART
 Input:    program memory string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
    2f00:	df 93       	push	r29
    2f02:	cf 93       	push	r28
    2f04:	00 d0       	rcall	.+0      	; 0x2f06 <uart_puts_p+0x6>
    2f06:	00 d0       	rcall	.+0      	; 0x2f08 <uart_puts_p+0x8>
    2f08:	00 d0       	rcall	.+0      	; 0x2f0a <uart_puts_p+0xa>
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	9d 83       	std	Y+5, r25	; 0x05
    2f10:	8c 83       	std	Y+4, r24	; 0x04
    2f12:	03 c0       	rjmp	.+6      	; 0x2f1a <uart_puts_p+0x1a>
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
		uart_putc(c);
    2f14:	8e 81       	ldd	r24, Y+6	; 0x06
    2f16:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <uart_putc>
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
    2f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f1c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f1e:	9b 83       	std	Y+3, r25	; 0x03
    2f20:	8a 83       	std	Y+2, r24	; 0x02
    2f22:	8c 81       	ldd	r24, Y+4	; 0x04
    2f24:	9d 81       	ldd	r25, Y+5	; 0x05
    2f26:	01 96       	adiw	r24, 0x01	; 1
    2f28:	9d 83       	std	Y+5, r25	; 0x05
    2f2a:	8c 83       	std	Y+4, r24	; 0x04
    2f2c:	ea 81       	ldd	r30, Y+2	; 0x02
    2f2e:	fb 81       	ldd	r31, Y+3	; 0x03
    2f30:	84 91       	lpm	r24, Z+
    2f32:	89 83       	std	Y+1, r24	; 0x01
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
    2f36:	8e 83       	std	Y+6, r24	; 0x06
    2f38:	8e 81       	ldd	r24, Y+6	; 0x06
    2f3a:	88 23       	and	r24, r24
    2f3c:	59 f7       	brne	.-42     	; 0x2f14 <uart_puts_p+0x14>
		uart_putc(c);

}/* uart_puts_p */
    2f3e:	26 96       	adiw	r28, 0x06	; 6
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	de bf       	out	0x3e, r29	; 62
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	cf 91       	pop	r28
    2f4c:	df 91       	pop	r29
    2f4e:	08 95       	ret

00002f50 <__prologue_saves__>:
    2f50:	2f 92       	push	r2
    2f52:	3f 92       	push	r3
    2f54:	4f 92       	push	r4
    2f56:	5f 92       	push	r5
    2f58:	6f 92       	push	r6
    2f5a:	7f 92       	push	r7
    2f5c:	8f 92       	push	r8
    2f5e:	9f 92       	push	r9
    2f60:	af 92       	push	r10
    2f62:	bf 92       	push	r11
    2f64:	cf 92       	push	r12
    2f66:	df 92       	push	r13
    2f68:	ef 92       	push	r14
    2f6a:	ff 92       	push	r15
    2f6c:	0f 93       	push	r16
    2f6e:	1f 93       	push	r17
    2f70:	cf 93       	push	r28
    2f72:	df 93       	push	r29
    2f74:	cd b7       	in	r28, 0x3d	; 61
    2f76:	de b7       	in	r29, 0x3e	; 62
    2f78:	ca 1b       	sub	r28, r26
    2f7a:	db 0b       	sbc	r29, r27
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	f8 94       	cli
    2f80:	de bf       	out	0x3e, r29	; 62
    2f82:	0f be       	out	0x3f, r0	; 63
    2f84:	cd bf       	out	0x3d, r28	; 61
    2f86:	09 94       	ijmp

00002f88 <__epilogue_restores__>:
    2f88:	2a 88       	ldd	r2, Y+18	; 0x12
    2f8a:	39 88       	ldd	r3, Y+17	; 0x11
    2f8c:	48 88       	ldd	r4, Y+16	; 0x10
    2f8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f90:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f92:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f94:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f96:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f98:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f9a:	b9 84       	ldd	r11, Y+9	; 0x09
    2f9c:	c8 84       	ldd	r12, Y+8	; 0x08
    2f9e:	df 80       	ldd	r13, Y+7	; 0x07
    2fa0:	ee 80       	ldd	r14, Y+6	; 0x06
    2fa2:	fd 80       	ldd	r15, Y+5	; 0x05
    2fa4:	0c 81       	ldd	r16, Y+4	; 0x04
    2fa6:	1b 81       	ldd	r17, Y+3	; 0x03
    2fa8:	aa 81       	ldd	r26, Y+2	; 0x02
    2faa:	b9 81       	ldd	r27, Y+1	; 0x01
    2fac:	ce 0f       	add	r28, r30
    2fae:	d1 1d       	adc	r29, r1
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	de bf       	out	0x3e, r29	; 62
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	cd bf       	out	0x3d, r28	; 61
    2fba:	ed 01       	movw	r28, r26
    2fbc:	08 95       	ret

00002fbe <_exit>:
    2fbe:	f8 94       	cli

00002fc0 <__stop_program>:
    2fc0:	ff cf       	rjmp	.-2      	; 0x2fc0 <__stop_program>

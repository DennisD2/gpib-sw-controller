
gpib_004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002990  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000342  00800060  00002990  00002a04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000172  008003a2  00002cd2  00002d46  2**0
                  ALLOC
  3 .stab         00005484  00000000  00000000  00002d48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000027be  00000000  00000000  000081cc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__ctors_end>
       4:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
       8:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
       c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      10:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      14:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      18:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      1c:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__vector_7>
      20:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      24:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      28:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      2c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      30:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      34:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__vector_13>
      38:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__vector_14>
      3c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      40:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      44:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      48:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      4c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      50:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>

00000054 <__c.1849>:
      54:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
      64:	65 72 72 6f 72 3a 20 00                             error: .

0000006c <__c.1847>:
      6c:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
      7c:	6f 72 3a 20 00                                      or: .

00000081 <__c.1845>:
      81:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
      91:	3a 20 00                                            : .

00000094 <__c.1871>:
      94:	43 6f 6d 6d 61 6e 64 20 6f 76 65 72 66 6c 6f 77     Command overflow
      a4:	2e 00                                               ..

000000a6 <__c.1943>:
      a6:	75 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 0a     unknown command.
      b6:	0d 00                                               ..

000000b8 <__c.1940>:
      b8:	43 68 65 63 6b 20 65 72 72 6f 72 73 0a 0d 00        Check errors...

000000c7 <__c.1935>:
      c7:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      d7:	74 72 6f 6c 20 6f 66 66 0a 0d 00                    trol off...

000000e2 <__c.1933>:
      e2:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      f2:	74 72 6f 6c 20 6f 6e 0a 0d 00                       trol on...

000000fc <__c.2008>:
      fc:	0a 0d 00                                            ...

000000ff <__c.2034>:
      ff:	0a 0d 53 52 51 20 64 65 74 65 63 74 65 64 2e 0a     ..SRQ detected..
     10f:	0d 00                                               ..

00000111 <__c.2064>:
     111:	0a 0d 53 52 51 73 20 61 72 65 20 64 69 73 61 62     ..SRQs are disab
     121:	6c 65 64 20 6e 6f 77 2e 0a 0d 00                    led now....

0000012c <__c.2062>:
     12c:	0a 0d 53 52 51 20 65 6d 69 74 74 65 72 20 69 73     ..SRQ emitter is
     13c:	20 6e 6f 74 20 69 6e 20 6c 69 73 74 20 6f 66 20      not in list of 
     14c:	6b 6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 20 53     known devices. S
     15c:	52 51 20 49 67 6e 6f 72 65 64 2e 0a 0d 00           RQ Ignored....

0000016a <__c.2096>:
     16a:	2e 69 20 2d 20 64 75 6d 70 20 69 6e 66 6f 20 61     .i - dump info a
     17a:	62 6f 75 74 20 47 50 49 42 20 6c 69 6e 65 73 2e     bout GPIB lines.
     18a:	0a 0d 00                                            ...

0000018d <__c.2094>:
     18d:	2e 68 20 2d 20 70 72 69 6e 74 20 68 65 6c 70 2e     .h - print help.
     19d:	0a 0d 00                                            ...

000001a0 <__c.2092>:
     1a0:	2e 78 20 2d 20 74 6f 67 67 6c 65 20 58 6f 6e 2f     .x - toggle Xon/
     1b0:	58 6f 66 66 20 66 6c 6f 77 20 63 6f 6e 74 72 6f     Xoff flow contro
     1c0:	6c 2e 0a 0d 00                                      l....

000001c5 <__c.2090>:
     1c5:	2e 2d 20 3c 6e 3e 20 2d 20 72 65 6d 6f 76 65 20     .- <n> - remove 
     1d5:	70 61 72 74 6e 65 72 20 64 65 76 69 63 65 20 61     partner device a
     1e5:	64 64 72 65 73 73 20 66 72 6f 6d 20 6c 69 73 74     ddress from list
     1f5:	20 6f 66 20 6b 6e 6f 77 6e 20 64 65 76 69 63 65      of known device
     205:	73 2e 0a 0d 00                                      s....

0000020a <__c.2088>:
     20a:	2e 2b 20 3c 6e 3e 20 2d 20 61 64 64 20 70 61 72     .+ <n> - add par
     21a:	74 6e 65 72 20 64 65 76 69 63 65 20 61 64 64 72     tner device addr
     22a:	65 73 73 20 74 6f 20 6c 69 73 74 20 6f 66 20 6b     ess to list of k
     23a:	6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 0a 0d 00     nown devices....

0000024a <__c.2086>:
     24a:	2e 73 20 3c 73 65 63 6f 6e 64 61 72 79 3e 20 2d     .s <secondary> -
     25a:	20 73 65 74 20 73 65 63 6f 6e 64 61 72 79 20 61      set secondary a
     26a:	64 64 72 65 73 73 20 6f 66 20 72 65 6d 6f 74 65     ddress of remote
     27a:	20 64 65 76 69 63 65 0a 0d 00                        device...

00000284 <__c.2084>:
     284:	49 6e 74 65 72 6e 61 6c 20 63 6f 6d 6d 61 6e 64     Internal command
     294:	73 3a 0a 0d 00                                      s:...

00000299 <__c.2109>:
     299:	0a 0d 00                                            ...

0000029c <__c.2107>:
     29c:	44 65 76 69 63 65 20 61 64 64 72 65 73 73 20 69     Device address i
     2ac:	73 20 6e 6f 74 20 73 65 74 2e 20 43 61 6e 20 6e     s not set. Can n
     2bc:	6f 74 20 73 65 6e 64 20 63 6f 6d 6d 61 6e 64 2e     ot send command.
     2cc:	0a 0d 00                                            ...

000002cf <__c.2105>:
     2cf:	0a 0d 00                                            ...

000002d2 <__ctors_end>:
     2d2:	11 24       	eor	r1, r1
     2d4:	1f be       	out	0x3f, r1	; 63
     2d6:	cf e5       	ldi	r28, 0x5F	; 95
     2d8:	d8 e0       	ldi	r29, 0x08	; 8
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	cd bf       	out	0x3d, r28	; 61

000002de <__do_copy_data>:
     2de:	13 e0       	ldi	r17, 0x03	; 3
     2e0:	a0 e6       	ldi	r26, 0x60	; 96
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	e0 e9       	ldi	r30, 0x90	; 144
     2e6:	f9 e2       	ldi	r31, 0x29	; 41
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <.do_copy_data_start>

000002ea <.do_copy_data_loop>:
     2ea:	05 90       	lpm	r0, Z+
     2ec:	0d 92       	st	X+, r0

000002ee <.do_copy_data_start>:
     2ee:	a2 3a       	cpi	r26, 0xA2	; 162
     2f0:	b1 07       	cpc	r27, r17
     2f2:	d9 f7       	brne	.-10     	; 0x2ea <.do_copy_data_loop>

000002f4 <__do_clear_bss>:
     2f4:	15 e0       	ldi	r17, 0x05	; 5
     2f6:	a2 ea       	ldi	r26, 0xA2	; 162
     2f8:	b3 e0       	ldi	r27, 0x03	; 3
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <.do_clear_bss_start>

000002fc <.do_clear_bss_loop>:
     2fc:	1d 92       	st	X+, r1

000002fe <.do_clear_bss_start>:
     2fe:	a4 31       	cpi	r26, 0x14	; 20
     300:	b1 07       	cpc	r27, r17
     302:	e1 f7       	brne	.-8      	; 0x2fc <.do_clear_bss_loop>
     304:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <main>
     308:	0c 94 c6 14 	jmp	0x298c	; 0x298c <_exit>

0000030c <__bad_interrupt>:
     30c:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000310 <atoi>:
     310:	fc 01       	movw	r30, r24
     312:	88 27       	eor	r24, r24
     314:	99 27       	eor	r25, r25
     316:	e8 94       	clt
     318:	21 91       	ld	r18, Z+
     31a:	20 32       	cpi	r18, 0x20	; 32
     31c:	e9 f3       	breq	.-6      	; 0x318 <atoi+0x8>
     31e:	29 30       	cpi	r18, 0x09	; 9
     320:	10 f0       	brcs	.+4      	; 0x326 <atoi+0x16>
     322:	2e 30       	cpi	r18, 0x0E	; 14
     324:	c8 f3       	brcs	.-14     	; 0x318 <atoi+0x8>
     326:	2b 32       	cpi	r18, 0x2B	; 43
     328:	41 f0       	breq	.+16     	; 0x33a <atoi+0x2a>
     32a:	2d 32       	cpi	r18, 0x2D	; 45
     32c:	39 f4       	brne	.+14     	; 0x33c <atoi+0x2c>
     32e:	68 94       	set
     330:	04 c0       	rjmp	.+8      	; 0x33a <atoi+0x2a>
     332:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__mulhi_const_10>
     336:	82 0f       	add	r24, r18
     338:	91 1d       	adc	r25, r1
     33a:	21 91       	ld	r18, Z+
     33c:	20 53       	subi	r18, 0x30	; 48
     33e:	2a 30       	cpi	r18, 0x0A	; 10
     340:	c0 f3       	brcs	.-16     	; 0x332 <atoi+0x22>
     342:	1e f4       	brtc	.+6      	; 0x34a <atoi+0x3a>
     344:	90 95       	com	r25
     346:	81 95       	neg	r24
     348:	9f 4f       	sbci	r25, 0xFF	; 255
     34a:	08 95       	ret

0000034c <strtok>:
     34c:	42 ea       	ldi	r20, 0xA2	; 162
     34e:	53 e0       	ldi	r21, 0x03	; 3
     350:	0e 94 bf 01 	call	0x37e	; 0x37e <strtok_r>
     354:	08 95       	ret

00000356 <strchr>:
     356:	fc 01       	movw	r30, r24
     358:	81 91       	ld	r24, Z+
     35a:	86 17       	cp	r24, r22
     35c:	21 f0       	breq	.+8      	; 0x366 <strchr+0x10>
     35e:	88 23       	and	r24, r24
     360:	d9 f7       	brne	.-10     	; 0x358 <strchr+0x2>
     362:	99 27       	eor	r25, r25
     364:	08 95       	ret
     366:	31 97       	sbiw	r30, 0x01	; 1
     368:	cf 01       	movw	r24, r30
     36a:	08 95       	ret

0000036c <strlen>:
     36c:	fc 01       	movw	r30, r24
     36e:	01 90       	ld	r0, Z+
     370:	00 20       	and	r0, r0
     372:	e9 f7       	brne	.-6      	; 0x36e <strlen+0x2>
     374:	80 95       	com	r24
     376:	90 95       	com	r25
     378:	8e 0f       	add	r24, r30
     37a:	9f 1f       	adc	r25, r31
     37c:	08 95       	ret

0000037e <strtok_r>:
     37e:	00 97       	sbiw	r24, 0x00	; 0
     380:	31 f4       	brne	.+12     	; 0x38e <strtok_r+0x10>
     382:	da 01       	movw	r26, r20
     384:	8d 91       	ld	r24, X+
     386:	9c 91       	ld	r25, X
     388:	00 97       	sbiw	r24, 0x00	; 0
     38a:	09 f4       	brne	.+2      	; 0x38e <strtok_r+0x10>
     38c:	0e c0       	rjmp	.+28     	; 0x3aa <strtok_r+0x2c>
     38e:	dc 01       	movw	r26, r24
     390:	fb 01       	movw	r30, r22
     392:	3d 91       	ld	r19, X+
     394:	21 91       	ld	r18, Z+
     396:	22 23       	and	r18, r18
     398:	19 f0       	breq	.+6      	; 0x3a0 <strtok_r+0x22>
     39a:	32 17       	cp	r19, r18
     39c:	c9 f3       	breq	.-14     	; 0x390 <strtok_r+0x12>
     39e:	fa cf       	rjmp	.-12     	; 0x394 <strtok_r+0x16>
     3a0:	33 23       	and	r19, r19
     3a2:	31 f4       	brne	.+12     	; 0x3b0 <strtok_r+0x32>
     3a4:	da 01       	movw	r26, r20
     3a6:	1d 92       	st	X+, r1
     3a8:	1c 92       	st	X, r1
     3aa:	88 27       	eor	r24, r24
     3ac:	99 27       	eor	r25, r25
     3ae:	08 95       	ret
     3b0:	11 97       	sbiw	r26, 0x01	; 1
     3b2:	af 93       	push	r26
     3b4:	bf 93       	push	r27
     3b6:	fb 01       	movw	r30, r22
     3b8:	3d 91       	ld	r19, X+
     3ba:	21 91       	ld	r18, Z+
     3bc:	32 17       	cp	r19, r18
     3be:	71 f4       	brne	.+28     	; 0x3dc <strtok_r+0x5e>
     3c0:	33 23       	and	r19, r19
     3c2:	21 f4       	brne	.+8      	; 0x3cc <strtok_r+0x4e>
     3c4:	88 27       	eor	r24, r24
     3c6:	99 27       	eor	r25, r25
     3c8:	11 97       	sbiw	r26, 0x01	; 1
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <strtok_r+0x52>
     3cc:	1e 92       	st	-X, r1
     3ce:	11 96       	adiw	r26, 0x01	; 1
     3d0:	fa 01       	movw	r30, r20
     3d2:	a1 93       	st	Z+, r26
     3d4:	b0 83       	st	Z, r27
     3d6:	9f 91       	pop	r25
     3d8:	8f 91       	pop	r24
     3da:	08 95       	ret
     3dc:	22 23       	and	r18, r18
     3de:	69 f7       	brne	.-38     	; 0x3ba <strtok_r+0x3c>
     3e0:	ea cf       	rjmp	.-44     	; 0x3b6 <strtok_r+0x38>

000003e2 <__mulhi_const_10>:
     3e2:	7a e0       	ldi	r23, 0x0A	; 10
     3e4:	97 9f       	mul	r25, r23
     3e6:	90 2d       	mov	r25, r0
     3e8:	87 9f       	mul	r24, r23
     3ea:	80 2d       	mov	r24, r0
     3ec:	91 0d       	add	r25, r1
     3ee:	11 24       	eor	r1, r1
     3f0:	08 95       	ret

000003f2 <sprintf>:
     3f2:	ae e0       	ldi	r26, 0x0E	; 14
     3f4:	b0 e0       	ldi	r27, 0x00	; 0
     3f6:	ef ef       	ldi	r30, 0xFF	; 255
     3f8:	f1 e0       	ldi	r31, 0x01	; 1
     3fa:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__prologue_saves__+0x1c>
     3fe:	0d 89       	ldd	r16, Y+21	; 0x15
     400:	1e 89       	ldd	r17, Y+22	; 0x16
     402:	86 e0       	ldi	r24, 0x06	; 6
     404:	8c 83       	std	Y+4, r24	; 0x04
     406:	1a 83       	std	Y+2, r17	; 0x02
     408:	09 83       	std	Y+1, r16	; 0x01
     40a:	8f ef       	ldi	r24, 0xFF	; 255
     40c:	9f e7       	ldi	r25, 0x7F	; 127
     40e:	9e 83       	std	Y+6, r25	; 0x06
     410:	8d 83       	std	Y+5, r24	; 0x05
     412:	9e 01       	movw	r18, r28
     414:	27 5e       	subi	r18, 0xE7	; 231
     416:	3f 4f       	sbci	r19, 0xFF	; 255
     418:	ce 01       	movw	r24, r28
     41a:	01 96       	adiw	r24, 0x01	; 1
     41c:	6f 89       	ldd	r22, Y+23	; 0x17
     41e:	78 8d       	ldd	r23, Y+24	; 0x18
     420:	a9 01       	movw	r20, r18
     422:	0e 94 1d 02 	call	0x43a	; 0x43a <vfprintf>
     426:	2f 81       	ldd	r18, Y+7	; 0x07
     428:	38 85       	ldd	r19, Y+8	; 0x08
     42a:	02 0f       	add	r16, r18
     42c:	13 1f       	adc	r17, r19
     42e:	f8 01       	movw	r30, r16
     430:	10 82       	st	Z, r1
     432:	2e 96       	adiw	r28, 0x0e	; 14
     434:	e4 e0       	ldi	r30, 0x04	; 4
     436:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__epilogue_restores__+0x1c>

0000043a <vfprintf>:
     43a:	ab e0       	ldi	r26, 0x0B	; 11
     43c:	b0 e0       	ldi	r27, 0x00	; 0
     43e:	e3 e2       	ldi	r30, 0x23	; 35
     440:	f2 e0       	ldi	r31, 0x02	; 2
     442:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__prologue_saves__>
     446:	3c 01       	movw	r6, r24
     448:	2b 01       	movw	r4, r22
     44a:	5a 01       	movw	r10, r20
     44c:	fc 01       	movw	r30, r24
     44e:	17 82       	std	Z+7, r1	; 0x07
     450:	16 82       	std	Z+6, r1	; 0x06
     452:	83 81       	ldd	r24, Z+3	; 0x03
     454:	81 fd       	sbrc	r24, 1
     456:	03 c0       	rjmp	.+6      	; 0x45e <vfprintf+0x24>
     458:	6f ef       	ldi	r22, 0xFF	; 255
     45a:	7f ef       	ldi	r23, 0xFF	; 255
     45c:	c6 c1       	rjmp	.+908    	; 0x7ea <vfprintf+0x3b0>
     45e:	9a e0       	ldi	r25, 0x0A	; 10
     460:	89 2e       	mov	r8, r25
     462:	1e 01       	movw	r2, r28
     464:	08 94       	sec
     466:	21 1c       	adc	r2, r1
     468:	31 1c       	adc	r3, r1
     46a:	f3 01       	movw	r30, r6
     46c:	23 81       	ldd	r18, Z+3	; 0x03
     46e:	f2 01       	movw	r30, r4
     470:	23 fd       	sbrc	r18, 3
     472:	85 91       	lpm	r24, Z+
     474:	23 ff       	sbrs	r18, 3
     476:	81 91       	ld	r24, Z+
     478:	2f 01       	movw	r4, r30
     47a:	88 23       	and	r24, r24
     47c:	09 f4       	brne	.+2      	; 0x480 <vfprintf+0x46>
     47e:	b2 c1       	rjmp	.+868    	; 0x7e4 <vfprintf+0x3aa>
     480:	85 32       	cpi	r24, 0x25	; 37
     482:	39 f4       	brne	.+14     	; 0x492 <vfprintf+0x58>
     484:	23 fd       	sbrc	r18, 3
     486:	85 91       	lpm	r24, Z+
     488:	23 ff       	sbrs	r18, 3
     48a:	81 91       	ld	r24, Z+
     48c:	2f 01       	movw	r4, r30
     48e:	85 32       	cpi	r24, 0x25	; 37
     490:	29 f4       	brne	.+10     	; 0x49c <vfprintf+0x62>
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	b3 01       	movw	r22, r6
     496:	0e 94 10 04 	call	0x820	; 0x820 <fputc>
     49a:	e7 cf       	rjmp	.-50     	; 0x46a <vfprintf+0x30>
     49c:	98 2f       	mov	r25, r24
     49e:	ff 24       	eor	r15, r15
     4a0:	ee 24       	eor	r14, r14
     4a2:	99 24       	eor	r9, r9
     4a4:	ff e1       	ldi	r31, 0x1F	; 31
     4a6:	ff 15       	cp	r31, r15
     4a8:	d0 f0       	brcs	.+52     	; 0x4de <vfprintf+0xa4>
     4aa:	9b 32       	cpi	r25, 0x2B	; 43
     4ac:	69 f0       	breq	.+26     	; 0x4c8 <vfprintf+0x8e>
     4ae:	9c 32       	cpi	r25, 0x2C	; 44
     4b0:	28 f4       	brcc	.+10     	; 0x4bc <vfprintf+0x82>
     4b2:	90 32       	cpi	r25, 0x20	; 32
     4b4:	59 f0       	breq	.+22     	; 0x4cc <vfprintf+0x92>
     4b6:	93 32       	cpi	r25, 0x23	; 35
     4b8:	91 f4       	brne	.+36     	; 0x4de <vfprintf+0xa4>
     4ba:	0e c0       	rjmp	.+28     	; 0x4d8 <vfprintf+0x9e>
     4bc:	9d 32       	cpi	r25, 0x2D	; 45
     4be:	49 f0       	breq	.+18     	; 0x4d2 <vfprintf+0x98>
     4c0:	90 33       	cpi	r25, 0x30	; 48
     4c2:	69 f4       	brne	.+26     	; 0x4de <vfprintf+0xa4>
     4c4:	41 e0       	ldi	r20, 0x01	; 1
     4c6:	24 c0       	rjmp	.+72     	; 0x510 <vfprintf+0xd6>
     4c8:	52 e0       	ldi	r21, 0x02	; 2
     4ca:	f5 2a       	or	r15, r21
     4cc:	84 e0       	ldi	r24, 0x04	; 4
     4ce:	f8 2a       	or	r15, r24
     4d0:	28 c0       	rjmp	.+80     	; 0x522 <vfprintf+0xe8>
     4d2:	98 e0       	ldi	r25, 0x08	; 8
     4d4:	f9 2a       	or	r15, r25
     4d6:	25 c0       	rjmp	.+74     	; 0x522 <vfprintf+0xe8>
     4d8:	e0 e1       	ldi	r30, 0x10	; 16
     4da:	fe 2a       	or	r15, r30
     4dc:	22 c0       	rjmp	.+68     	; 0x522 <vfprintf+0xe8>
     4de:	f7 fc       	sbrc	r15, 7
     4e0:	29 c0       	rjmp	.+82     	; 0x534 <vfprintf+0xfa>
     4e2:	89 2f       	mov	r24, r25
     4e4:	80 53       	subi	r24, 0x30	; 48
     4e6:	8a 30       	cpi	r24, 0x0A	; 10
     4e8:	70 f4       	brcc	.+28     	; 0x506 <vfprintf+0xcc>
     4ea:	f6 fe       	sbrs	r15, 6
     4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <vfprintf+0xbe>
     4ee:	98 9c       	mul	r9, r8
     4f0:	90 2c       	mov	r9, r0
     4f2:	11 24       	eor	r1, r1
     4f4:	98 0e       	add	r9, r24
     4f6:	15 c0       	rjmp	.+42     	; 0x522 <vfprintf+0xe8>
     4f8:	e8 9c       	mul	r14, r8
     4fa:	e0 2c       	mov	r14, r0
     4fc:	11 24       	eor	r1, r1
     4fe:	e8 0e       	add	r14, r24
     500:	f0 e2       	ldi	r31, 0x20	; 32
     502:	ff 2a       	or	r15, r31
     504:	0e c0       	rjmp	.+28     	; 0x522 <vfprintf+0xe8>
     506:	9e 32       	cpi	r25, 0x2E	; 46
     508:	29 f4       	brne	.+10     	; 0x514 <vfprintf+0xda>
     50a:	f6 fc       	sbrc	r15, 6
     50c:	6b c1       	rjmp	.+726    	; 0x7e4 <vfprintf+0x3aa>
     50e:	40 e4       	ldi	r20, 0x40	; 64
     510:	f4 2a       	or	r15, r20
     512:	07 c0       	rjmp	.+14     	; 0x522 <vfprintf+0xe8>
     514:	9c 36       	cpi	r25, 0x6C	; 108
     516:	19 f4       	brne	.+6      	; 0x51e <vfprintf+0xe4>
     518:	50 e8       	ldi	r21, 0x80	; 128
     51a:	f5 2a       	or	r15, r21
     51c:	02 c0       	rjmp	.+4      	; 0x522 <vfprintf+0xe8>
     51e:	98 36       	cpi	r25, 0x68	; 104
     520:	49 f4       	brne	.+18     	; 0x534 <vfprintf+0xfa>
     522:	f2 01       	movw	r30, r4
     524:	23 fd       	sbrc	r18, 3
     526:	95 91       	lpm	r25, Z+
     528:	23 ff       	sbrs	r18, 3
     52a:	91 91       	ld	r25, Z+
     52c:	2f 01       	movw	r4, r30
     52e:	99 23       	and	r25, r25
     530:	09 f0       	breq	.+2      	; 0x534 <vfprintf+0xfa>
     532:	b8 cf       	rjmp	.-144    	; 0x4a4 <vfprintf+0x6a>
     534:	89 2f       	mov	r24, r25
     536:	85 54       	subi	r24, 0x45	; 69
     538:	83 30       	cpi	r24, 0x03	; 3
     53a:	18 f0       	brcs	.+6      	; 0x542 <vfprintf+0x108>
     53c:	80 52       	subi	r24, 0x20	; 32
     53e:	83 30       	cpi	r24, 0x03	; 3
     540:	38 f4       	brcc	.+14     	; 0x550 <vfprintf+0x116>
     542:	44 e0       	ldi	r20, 0x04	; 4
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	a4 0e       	add	r10, r20
     548:	b5 1e       	adc	r11, r21
     54a:	5f e3       	ldi	r21, 0x3F	; 63
     54c:	59 83       	std	Y+1, r21	; 0x01
     54e:	0f c0       	rjmp	.+30     	; 0x56e <vfprintf+0x134>
     550:	93 36       	cpi	r25, 0x63	; 99
     552:	31 f0       	breq	.+12     	; 0x560 <vfprintf+0x126>
     554:	93 37       	cpi	r25, 0x73	; 115
     556:	79 f0       	breq	.+30     	; 0x576 <vfprintf+0x13c>
     558:	93 35       	cpi	r25, 0x53	; 83
     55a:	09 f0       	breq	.+2      	; 0x55e <vfprintf+0x124>
     55c:	56 c0       	rjmp	.+172    	; 0x60a <vfprintf+0x1d0>
     55e:	20 c0       	rjmp	.+64     	; 0x5a0 <vfprintf+0x166>
     560:	f5 01       	movw	r30, r10
     562:	80 81       	ld	r24, Z
     564:	89 83       	std	Y+1, r24	; 0x01
     566:	42 e0       	ldi	r20, 0x02	; 2
     568:	50 e0       	ldi	r21, 0x00	; 0
     56a:	a4 0e       	add	r10, r20
     56c:	b5 1e       	adc	r11, r21
     56e:	61 01       	movw	r12, r2
     570:	01 e0       	ldi	r16, 0x01	; 1
     572:	10 e0       	ldi	r17, 0x00	; 0
     574:	12 c0       	rjmp	.+36     	; 0x59a <vfprintf+0x160>
     576:	f5 01       	movw	r30, r10
     578:	c0 80       	ld	r12, Z
     57a:	d1 80       	ldd	r13, Z+1	; 0x01
     57c:	f6 fc       	sbrc	r15, 6
     57e:	03 c0       	rjmp	.+6      	; 0x586 <vfprintf+0x14c>
     580:	6f ef       	ldi	r22, 0xFF	; 255
     582:	7f ef       	ldi	r23, 0xFF	; 255
     584:	02 c0       	rjmp	.+4      	; 0x58a <vfprintf+0x150>
     586:	69 2d       	mov	r22, r9
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	42 e0       	ldi	r20, 0x02	; 2
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	a4 0e       	add	r10, r20
     590:	b5 1e       	adc	r11, r21
     592:	c6 01       	movw	r24, r12
     594:	0e 94 05 04 	call	0x80a	; 0x80a <strnlen>
     598:	8c 01       	movw	r16, r24
     59a:	5f e7       	ldi	r21, 0x7F	; 127
     59c:	f5 22       	and	r15, r21
     59e:	14 c0       	rjmp	.+40     	; 0x5c8 <vfprintf+0x18e>
     5a0:	f5 01       	movw	r30, r10
     5a2:	c0 80       	ld	r12, Z
     5a4:	d1 80       	ldd	r13, Z+1	; 0x01
     5a6:	f6 fc       	sbrc	r15, 6
     5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <vfprintf+0x176>
     5aa:	6f ef       	ldi	r22, 0xFF	; 255
     5ac:	7f ef       	ldi	r23, 0xFF	; 255
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <vfprintf+0x17a>
     5b0:	69 2d       	mov	r22, r9
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	42 e0       	ldi	r20, 0x02	; 2
     5b6:	50 e0       	ldi	r21, 0x00	; 0
     5b8:	a4 0e       	add	r10, r20
     5ba:	b5 1e       	adc	r11, r21
     5bc:	c6 01       	movw	r24, r12
     5be:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <strnlen_P>
     5c2:	8c 01       	movw	r16, r24
     5c4:	50 e8       	ldi	r21, 0x80	; 128
     5c6:	f5 2a       	or	r15, r21
     5c8:	f3 fe       	sbrs	r15, 3
     5ca:	07 c0       	rjmp	.+14     	; 0x5da <vfprintf+0x1a0>
     5cc:	1a c0       	rjmp	.+52     	; 0x602 <vfprintf+0x1c8>
     5ce:	80 e2       	ldi	r24, 0x20	; 32
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	b3 01       	movw	r22, r6
     5d4:	0e 94 10 04 	call	0x820	; 0x820 <fputc>
     5d8:	ea 94       	dec	r14
     5da:	8e 2d       	mov	r24, r14
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	08 17       	cp	r16, r24
     5e0:	19 07       	cpc	r17, r25
     5e2:	a8 f3       	brcs	.-22     	; 0x5ce <vfprintf+0x194>
     5e4:	0e c0       	rjmp	.+28     	; 0x602 <vfprintf+0x1c8>
     5e6:	f6 01       	movw	r30, r12
     5e8:	f7 fc       	sbrc	r15, 7
     5ea:	85 91       	lpm	r24, Z+
     5ec:	f7 fe       	sbrs	r15, 7
     5ee:	81 91       	ld	r24, Z+
     5f0:	6f 01       	movw	r12, r30
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	b3 01       	movw	r22, r6
     5f6:	0e 94 10 04 	call	0x820	; 0x820 <fputc>
     5fa:	e1 10       	cpse	r14, r1
     5fc:	ea 94       	dec	r14
     5fe:	01 50       	subi	r16, 0x01	; 1
     600:	10 40       	sbci	r17, 0x00	; 0
     602:	01 15       	cp	r16, r1
     604:	11 05       	cpc	r17, r1
     606:	79 f7       	brne	.-34     	; 0x5e6 <vfprintf+0x1ac>
     608:	ea c0       	rjmp	.+468    	; 0x7de <vfprintf+0x3a4>
     60a:	94 36       	cpi	r25, 0x64	; 100
     60c:	11 f0       	breq	.+4      	; 0x612 <vfprintf+0x1d8>
     60e:	99 36       	cpi	r25, 0x69	; 105
     610:	69 f5       	brne	.+90     	; 0x66c <vfprintf+0x232>
     612:	f7 fe       	sbrs	r15, 7
     614:	08 c0       	rjmp	.+16     	; 0x626 <vfprintf+0x1ec>
     616:	f5 01       	movw	r30, r10
     618:	20 81       	ld	r18, Z
     61a:	31 81       	ldd	r19, Z+1	; 0x01
     61c:	42 81       	ldd	r20, Z+2	; 0x02
     61e:	53 81       	ldd	r21, Z+3	; 0x03
     620:	84 e0       	ldi	r24, 0x04	; 4
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0a c0       	rjmp	.+20     	; 0x63a <vfprintf+0x200>
     626:	f5 01       	movw	r30, r10
     628:	80 81       	ld	r24, Z
     62a:	91 81       	ldd	r25, Z+1	; 0x01
     62c:	9c 01       	movw	r18, r24
     62e:	44 27       	eor	r20, r20
     630:	37 fd       	sbrc	r19, 7
     632:	40 95       	com	r20
     634:	54 2f       	mov	r21, r20
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	a8 0e       	add	r10, r24
     63c:	b9 1e       	adc	r11, r25
     63e:	9f e6       	ldi	r25, 0x6F	; 111
     640:	f9 22       	and	r15, r25
     642:	57 ff       	sbrs	r21, 7
     644:	09 c0       	rjmp	.+18     	; 0x658 <vfprintf+0x21e>
     646:	50 95       	com	r21
     648:	40 95       	com	r20
     64a:	30 95       	com	r19
     64c:	21 95       	neg	r18
     64e:	3f 4f       	sbci	r19, 0xFF	; 255
     650:	4f 4f       	sbci	r20, 0xFF	; 255
     652:	5f 4f       	sbci	r21, 0xFF	; 255
     654:	e0 e8       	ldi	r30, 0x80	; 128
     656:	fe 2a       	or	r15, r30
     658:	ca 01       	movw	r24, r20
     65a:	b9 01       	movw	r22, r18
     65c:	a1 01       	movw	r20, r2
     65e:	2a e0       	ldi	r18, 0x0A	; 10
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	0e 94 3c 04 	call	0x878	; 0x878 <__ultoa_invert>
     666:	d8 2e       	mov	r13, r24
     668:	d2 18       	sub	r13, r2
     66a:	40 c0       	rjmp	.+128    	; 0x6ec <vfprintf+0x2b2>
     66c:	95 37       	cpi	r25, 0x75	; 117
     66e:	29 f4       	brne	.+10     	; 0x67a <vfprintf+0x240>
     670:	1f 2d       	mov	r17, r15
     672:	1f 7e       	andi	r17, 0xEF	; 239
     674:	2a e0       	ldi	r18, 0x0A	; 10
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	1d c0       	rjmp	.+58     	; 0x6b4 <vfprintf+0x27a>
     67a:	1f 2d       	mov	r17, r15
     67c:	19 7f       	andi	r17, 0xF9	; 249
     67e:	9f 36       	cpi	r25, 0x6F	; 111
     680:	61 f0       	breq	.+24     	; 0x69a <vfprintf+0x260>
     682:	90 37       	cpi	r25, 0x70	; 112
     684:	20 f4       	brcc	.+8      	; 0x68e <vfprintf+0x254>
     686:	98 35       	cpi	r25, 0x58	; 88
     688:	09 f0       	breq	.+2      	; 0x68c <vfprintf+0x252>
     68a:	ac c0       	rjmp	.+344    	; 0x7e4 <vfprintf+0x3aa>
     68c:	0f c0       	rjmp	.+30     	; 0x6ac <vfprintf+0x272>
     68e:	90 37       	cpi	r25, 0x70	; 112
     690:	39 f0       	breq	.+14     	; 0x6a0 <vfprintf+0x266>
     692:	98 37       	cpi	r25, 0x78	; 120
     694:	09 f0       	breq	.+2      	; 0x698 <vfprintf+0x25e>
     696:	a6 c0       	rjmp	.+332    	; 0x7e4 <vfprintf+0x3aa>
     698:	04 c0       	rjmp	.+8      	; 0x6a2 <vfprintf+0x268>
     69a:	28 e0       	ldi	r18, 0x08	; 8
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	0a c0       	rjmp	.+20     	; 0x6b4 <vfprintf+0x27a>
     6a0:	10 61       	ori	r17, 0x10	; 16
     6a2:	14 fd       	sbrc	r17, 4
     6a4:	14 60       	ori	r17, 0x04	; 4
     6a6:	20 e1       	ldi	r18, 0x10	; 16
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <vfprintf+0x27a>
     6ac:	14 fd       	sbrc	r17, 4
     6ae:	16 60       	ori	r17, 0x06	; 6
     6b0:	20 e1       	ldi	r18, 0x10	; 16
     6b2:	32 e0       	ldi	r19, 0x02	; 2
     6b4:	17 ff       	sbrs	r17, 7
     6b6:	08 c0       	rjmp	.+16     	; 0x6c8 <vfprintf+0x28e>
     6b8:	f5 01       	movw	r30, r10
     6ba:	60 81       	ld	r22, Z
     6bc:	71 81       	ldd	r23, Z+1	; 0x01
     6be:	82 81       	ldd	r24, Z+2	; 0x02
     6c0:	93 81       	ldd	r25, Z+3	; 0x03
     6c2:	44 e0       	ldi	r20, 0x04	; 4
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	08 c0       	rjmp	.+16     	; 0x6d8 <vfprintf+0x29e>
     6c8:	f5 01       	movw	r30, r10
     6ca:	80 81       	ld	r24, Z
     6cc:	91 81       	ldd	r25, Z+1	; 0x01
     6ce:	bc 01       	movw	r22, r24
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	42 e0       	ldi	r20, 0x02	; 2
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	a4 0e       	add	r10, r20
     6da:	b5 1e       	adc	r11, r21
     6dc:	a1 01       	movw	r20, r2
     6de:	0e 94 3c 04 	call	0x878	; 0x878 <__ultoa_invert>
     6e2:	d8 2e       	mov	r13, r24
     6e4:	d2 18       	sub	r13, r2
     6e6:	8f e7       	ldi	r24, 0x7F	; 127
     6e8:	f8 2e       	mov	r15, r24
     6ea:	f1 22       	and	r15, r17
     6ec:	f6 fe       	sbrs	r15, 6
     6ee:	0b c0       	rjmp	.+22     	; 0x706 <vfprintf+0x2cc>
     6f0:	5e ef       	ldi	r21, 0xFE	; 254
     6f2:	f5 22       	and	r15, r21
     6f4:	d9 14       	cp	r13, r9
     6f6:	38 f4       	brcc	.+14     	; 0x706 <vfprintf+0x2cc>
     6f8:	f4 fe       	sbrs	r15, 4
     6fa:	07 c0       	rjmp	.+14     	; 0x70a <vfprintf+0x2d0>
     6fc:	f2 fc       	sbrc	r15, 2
     6fe:	05 c0       	rjmp	.+10     	; 0x70a <vfprintf+0x2d0>
     700:	8f ee       	ldi	r24, 0xEF	; 239
     702:	f8 22       	and	r15, r24
     704:	02 c0       	rjmp	.+4      	; 0x70a <vfprintf+0x2d0>
     706:	1d 2d       	mov	r17, r13
     708:	01 c0       	rjmp	.+2      	; 0x70c <vfprintf+0x2d2>
     70a:	19 2d       	mov	r17, r9
     70c:	f4 fe       	sbrs	r15, 4
     70e:	0d c0       	rjmp	.+26     	; 0x72a <vfprintf+0x2f0>
     710:	fe 01       	movw	r30, r28
     712:	ed 0d       	add	r30, r13
     714:	f1 1d       	adc	r31, r1
     716:	80 81       	ld	r24, Z
     718:	80 33       	cpi	r24, 0x30	; 48
     71a:	19 f4       	brne	.+6      	; 0x722 <vfprintf+0x2e8>
     71c:	99 ee       	ldi	r25, 0xE9	; 233
     71e:	f9 22       	and	r15, r25
     720:	08 c0       	rjmp	.+16     	; 0x732 <vfprintf+0x2f8>
     722:	1f 5f       	subi	r17, 0xFF	; 255
     724:	f2 fe       	sbrs	r15, 2
     726:	05 c0       	rjmp	.+10     	; 0x732 <vfprintf+0x2f8>
     728:	03 c0       	rjmp	.+6      	; 0x730 <vfprintf+0x2f6>
     72a:	8f 2d       	mov	r24, r15
     72c:	86 78       	andi	r24, 0x86	; 134
     72e:	09 f0       	breq	.+2      	; 0x732 <vfprintf+0x2f8>
     730:	1f 5f       	subi	r17, 0xFF	; 255
     732:	0f 2d       	mov	r16, r15
     734:	f3 fc       	sbrc	r15, 3
     736:	14 c0       	rjmp	.+40     	; 0x760 <vfprintf+0x326>
     738:	f0 fe       	sbrs	r15, 0
     73a:	0f c0       	rjmp	.+30     	; 0x75a <vfprintf+0x320>
     73c:	1e 15       	cp	r17, r14
     73e:	10 f0       	brcs	.+4      	; 0x744 <vfprintf+0x30a>
     740:	9d 2c       	mov	r9, r13
     742:	0b c0       	rjmp	.+22     	; 0x75a <vfprintf+0x320>
     744:	9d 2c       	mov	r9, r13
     746:	9e 0c       	add	r9, r14
     748:	91 1a       	sub	r9, r17
     74a:	1e 2d       	mov	r17, r14
     74c:	06 c0       	rjmp	.+12     	; 0x75a <vfprintf+0x320>
     74e:	80 e2       	ldi	r24, 0x20	; 32
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	b3 01       	movw	r22, r6
     754:	0e 94 10 04 	call	0x820	; 0x820 <fputc>
     758:	1f 5f       	subi	r17, 0xFF	; 255
     75a:	1e 15       	cp	r17, r14
     75c:	c0 f3       	brcs	.-16     	; 0x74e <vfprintf+0x314>
     75e:	04 c0       	rjmp	.+8      	; 0x768 <vfprintf+0x32e>
     760:	1e 15       	cp	r17, r14
     762:	10 f4       	brcc	.+4      	; 0x768 <vfprintf+0x32e>
     764:	e1 1a       	sub	r14, r17
     766:	01 c0       	rjmp	.+2      	; 0x76a <vfprintf+0x330>
     768:	ee 24       	eor	r14, r14
     76a:	04 ff       	sbrs	r16, 4
     76c:	0f c0       	rjmp	.+30     	; 0x78c <vfprintf+0x352>
     76e:	80 e3       	ldi	r24, 0x30	; 48
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	b3 01       	movw	r22, r6
     774:	0e 94 10 04 	call	0x820	; 0x820 <fputc>
     778:	02 ff       	sbrs	r16, 2
     77a:	1d c0       	rjmp	.+58     	; 0x7b6 <vfprintf+0x37c>
     77c:	01 fd       	sbrc	r16, 1
     77e:	03 c0       	rjmp	.+6      	; 0x786 <vfprintf+0x34c>
     780:	88 e7       	ldi	r24, 0x78	; 120
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e c0       	rjmp	.+28     	; 0x7a2 <vfprintf+0x368>
     786:	88 e5       	ldi	r24, 0x58	; 88
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	0b c0       	rjmp	.+22     	; 0x7a2 <vfprintf+0x368>
     78c:	80 2f       	mov	r24, r16
     78e:	86 78       	andi	r24, 0x86	; 134
     790:	91 f0       	breq	.+36     	; 0x7b6 <vfprintf+0x37c>
     792:	01 ff       	sbrs	r16, 1
     794:	02 c0       	rjmp	.+4      	; 0x79a <vfprintf+0x360>
     796:	8b e2       	ldi	r24, 0x2B	; 43
     798:	01 c0       	rjmp	.+2      	; 0x79c <vfprintf+0x362>
     79a:	80 e2       	ldi	r24, 0x20	; 32
     79c:	f7 fc       	sbrc	r15, 7
     79e:	8d e2       	ldi	r24, 0x2D	; 45
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	b3 01       	movw	r22, r6
     7a4:	0e 94 10 04 	call	0x820	; 0x820 <fputc>
     7a8:	06 c0       	rjmp	.+12     	; 0x7b6 <vfprintf+0x37c>
     7aa:	80 e3       	ldi	r24, 0x30	; 48
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	b3 01       	movw	r22, r6
     7b0:	0e 94 10 04 	call	0x820	; 0x820 <fputc>
     7b4:	9a 94       	dec	r9
     7b6:	d9 14       	cp	r13, r9
     7b8:	c0 f3       	brcs	.-16     	; 0x7aa <vfprintf+0x370>
     7ba:	da 94       	dec	r13
     7bc:	f1 01       	movw	r30, r2
     7be:	ed 0d       	add	r30, r13
     7c0:	f1 1d       	adc	r31, r1
     7c2:	80 81       	ld	r24, Z
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	b3 01       	movw	r22, r6
     7c8:	0e 94 10 04 	call	0x820	; 0x820 <fputc>
     7cc:	dd 20       	and	r13, r13
     7ce:	a9 f7       	brne	.-22     	; 0x7ba <vfprintf+0x380>
     7d0:	06 c0       	rjmp	.+12     	; 0x7de <vfprintf+0x3a4>
     7d2:	80 e2       	ldi	r24, 0x20	; 32
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	b3 01       	movw	r22, r6
     7d8:	0e 94 10 04 	call	0x820	; 0x820 <fputc>
     7dc:	ea 94       	dec	r14
     7de:	ee 20       	and	r14, r14
     7e0:	c1 f7       	brne	.-16     	; 0x7d2 <vfprintf+0x398>
     7e2:	43 ce       	rjmp	.-890    	; 0x46a <vfprintf+0x30>
     7e4:	f3 01       	movw	r30, r6
     7e6:	66 81       	ldd	r22, Z+6	; 0x06
     7e8:	77 81       	ldd	r23, Z+7	; 0x07
     7ea:	cb 01       	movw	r24, r22
     7ec:	2b 96       	adiw	r28, 0x0b	; 11
     7ee:	e2 e1       	ldi	r30, 0x12	; 18
     7f0:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__epilogue_restores__>

000007f4 <strnlen_P>:
     7f4:	fc 01       	movw	r30, r24
     7f6:	05 90       	lpm	r0, Z+
     7f8:	61 50       	subi	r22, 0x01	; 1
     7fa:	70 40       	sbci	r23, 0x00	; 0
     7fc:	01 10       	cpse	r0, r1
     7fe:	d8 f7       	brcc	.-10     	; 0x7f6 <strnlen_P+0x2>
     800:	80 95       	com	r24
     802:	90 95       	com	r25
     804:	8e 0f       	add	r24, r30
     806:	9f 1f       	adc	r25, r31
     808:	08 95       	ret

0000080a <strnlen>:
     80a:	fc 01       	movw	r30, r24
     80c:	61 50       	subi	r22, 0x01	; 1
     80e:	70 40       	sbci	r23, 0x00	; 0
     810:	01 90       	ld	r0, Z+
     812:	01 10       	cpse	r0, r1
     814:	d8 f7       	brcc	.-10     	; 0x80c <strnlen+0x2>
     816:	80 95       	com	r24
     818:	90 95       	com	r25
     81a:	8e 0f       	add	r24, r30
     81c:	9f 1f       	adc	r25, r31
     81e:	08 95       	ret

00000820 <fputc>:
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	8c 01       	movw	r16, r24
     82a:	eb 01       	movw	r28, r22
     82c:	8b 81       	ldd	r24, Y+3	; 0x03
     82e:	81 ff       	sbrs	r24, 1
     830:	1b c0       	rjmp	.+54     	; 0x868 <__stack+0x9>
     832:	82 ff       	sbrs	r24, 2
     834:	0d c0       	rjmp	.+26     	; 0x850 <fputc+0x30>
     836:	2e 81       	ldd	r18, Y+6	; 0x06
     838:	3f 81       	ldd	r19, Y+7	; 0x07
     83a:	8c 81       	ldd	r24, Y+4	; 0x04
     83c:	9d 81       	ldd	r25, Y+5	; 0x05
     83e:	28 17       	cp	r18, r24
     840:	39 07       	cpc	r19, r25
     842:	64 f4       	brge	.+24     	; 0x85c <fputc+0x3c>
     844:	e8 81       	ld	r30, Y
     846:	f9 81       	ldd	r31, Y+1	; 0x01
     848:	01 93       	st	Z+, r16
     84a:	f9 83       	std	Y+1, r31	; 0x01
     84c:	e8 83       	st	Y, r30
     84e:	06 c0       	rjmp	.+12     	; 0x85c <fputc+0x3c>
     850:	e8 85       	ldd	r30, Y+8	; 0x08
     852:	f9 85       	ldd	r31, Y+9	; 0x09
     854:	80 2f       	mov	r24, r16
     856:	09 95       	icall
     858:	89 2b       	or	r24, r25
     85a:	31 f4       	brne	.+12     	; 0x868 <__stack+0x9>
     85c:	8e 81       	ldd	r24, Y+6	; 0x06
     85e:	9f 81       	ldd	r25, Y+7	; 0x07
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	9f 83       	std	Y+7, r25	; 0x07
     864:	8e 83       	std	Y+6, r24	; 0x06
     866:	02 c0       	rjmp	.+4      	; 0x86c <__stack+0xd>
     868:	0f ef       	ldi	r16, 0xFF	; 255
     86a:	1f ef       	ldi	r17, 0xFF	; 255
     86c:	c8 01       	movw	r24, r16
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	08 95       	ret

00000878 <__ultoa_invert>:
     878:	fa 01       	movw	r30, r20
     87a:	aa 27       	eor	r26, r26
     87c:	28 30       	cpi	r18, 0x08	; 8
     87e:	51 f1       	breq	.+84     	; 0x8d4 <__ultoa_invert+0x5c>
     880:	20 31       	cpi	r18, 0x10	; 16
     882:	81 f1       	breq	.+96     	; 0x8e4 <__ultoa_invert+0x6c>
     884:	e8 94       	clt
     886:	6f 93       	push	r22
     888:	6e 7f       	andi	r22, 0xFE	; 254
     88a:	6e 5f       	subi	r22, 0xFE	; 254
     88c:	7f 4f       	sbci	r23, 0xFF	; 255
     88e:	8f 4f       	sbci	r24, 0xFF	; 255
     890:	9f 4f       	sbci	r25, 0xFF	; 255
     892:	af 4f       	sbci	r26, 0xFF	; 255
     894:	b1 e0       	ldi	r27, 0x01	; 1
     896:	3e d0       	rcall	.+124    	; 0x914 <__ultoa_invert+0x9c>
     898:	b4 e0       	ldi	r27, 0x04	; 4
     89a:	3c d0       	rcall	.+120    	; 0x914 <__ultoa_invert+0x9c>
     89c:	67 0f       	add	r22, r23
     89e:	78 1f       	adc	r23, r24
     8a0:	89 1f       	adc	r24, r25
     8a2:	9a 1f       	adc	r25, r26
     8a4:	a1 1d       	adc	r26, r1
     8a6:	68 0f       	add	r22, r24
     8a8:	79 1f       	adc	r23, r25
     8aa:	8a 1f       	adc	r24, r26
     8ac:	91 1d       	adc	r25, r1
     8ae:	a1 1d       	adc	r26, r1
     8b0:	6a 0f       	add	r22, r26
     8b2:	71 1d       	adc	r23, r1
     8b4:	81 1d       	adc	r24, r1
     8b6:	91 1d       	adc	r25, r1
     8b8:	a1 1d       	adc	r26, r1
     8ba:	20 d0       	rcall	.+64     	; 0x8fc <__ultoa_invert+0x84>
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <__ultoa_invert+0x48>
     8be:	68 94       	set
     8c0:	3f 91       	pop	r19
     8c2:	2a e0       	ldi	r18, 0x0A	; 10
     8c4:	26 9f       	mul	r18, r22
     8c6:	11 24       	eor	r1, r1
     8c8:	30 19       	sub	r19, r0
     8ca:	30 5d       	subi	r19, 0xD0	; 208
     8cc:	31 93       	st	Z+, r19
     8ce:	de f6       	brtc	.-74     	; 0x886 <__ultoa_invert+0xe>
     8d0:	cf 01       	movw	r24, r30
     8d2:	08 95       	ret
     8d4:	46 2f       	mov	r20, r22
     8d6:	47 70       	andi	r20, 0x07	; 7
     8d8:	40 5d       	subi	r20, 0xD0	; 208
     8da:	41 93       	st	Z+, r20
     8dc:	b3 e0       	ldi	r27, 0x03	; 3
     8de:	0f d0       	rcall	.+30     	; 0x8fe <__ultoa_invert+0x86>
     8e0:	c9 f7       	brne	.-14     	; 0x8d4 <__ultoa_invert+0x5c>
     8e2:	f6 cf       	rjmp	.-20     	; 0x8d0 <__ultoa_invert+0x58>
     8e4:	46 2f       	mov	r20, r22
     8e6:	4f 70       	andi	r20, 0x0F	; 15
     8e8:	40 5d       	subi	r20, 0xD0	; 208
     8ea:	4a 33       	cpi	r20, 0x3A	; 58
     8ec:	18 f0       	brcs	.+6      	; 0x8f4 <__ultoa_invert+0x7c>
     8ee:	49 5d       	subi	r20, 0xD9	; 217
     8f0:	31 fd       	sbrc	r19, 1
     8f2:	40 52       	subi	r20, 0x20	; 32
     8f4:	41 93       	st	Z+, r20
     8f6:	02 d0       	rcall	.+4      	; 0x8fc <__ultoa_invert+0x84>
     8f8:	a9 f7       	brne	.-22     	; 0x8e4 <__ultoa_invert+0x6c>
     8fa:	ea cf       	rjmp	.-44     	; 0x8d0 <__ultoa_invert+0x58>
     8fc:	b4 e0       	ldi	r27, 0x04	; 4
     8fe:	a6 95       	lsr	r26
     900:	97 95       	ror	r25
     902:	87 95       	ror	r24
     904:	77 95       	ror	r23
     906:	67 95       	ror	r22
     908:	ba 95       	dec	r27
     90a:	c9 f7       	brne	.-14     	; 0x8fe <__ultoa_invert+0x86>
     90c:	00 97       	sbiw	r24, 0x00	; 0
     90e:	61 05       	cpc	r22, r1
     910:	71 05       	cpc	r23, r1
     912:	08 95       	ret
     914:	9b 01       	movw	r18, r22
     916:	ac 01       	movw	r20, r24
     918:	0a 2e       	mov	r0, r26
     91a:	06 94       	lsr	r0
     91c:	57 95       	ror	r21
     91e:	47 95       	ror	r20
     920:	37 95       	ror	r19
     922:	27 95       	ror	r18
     924:	ba 95       	dec	r27
     926:	c9 f7       	brne	.-14     	; 0x91a <__ultoa_invert+0xa2>
     928:	62 0f       	add	r22, r18
     92a:	73 1f       	adc	r23, r19
     92c:	84 1f       	adc	r24, r20
     92e:	95 1f       	adc	r25, r21
     930:	a0 1d       	adc	r26, r0
     932:	08 95       	ret

00000934 <delay_ms>:
uchar cmd_buf[100];

/**
 * Some basic delay function
 */
void delay_ms(unsigned short ms) {
     934:	df 93       	push	r29
     936:	cf 93       	push	r28
     938:	00 d0       	rcall	.+0      	; 0x93a <delay_ms+0x6>
     93a:	00 d0       	rcall	.+0      	; 0x93c <delay_ms+0x8>
     93c:	00 d0       	rcall	.+0      	; 0x93e <delay_ms+0xa>
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	9e 83       	std	Y+6, r25	; 0x06
     944:	8d 83       	std	Y+5, r24	; 0x05
	unsigned short outer1, outer2;
	outer1 = 200 * 12;
     946:	80 e6       	ldi	r24, 0x60	; 96
     948:	99 e0       	ldi	r25, 0x09	; 9
     94a:	9c 83       	std	Y+4, r25	; 0x04
     94c:	8b 83       	std	Y+3, r24	; 0x03
     94e:	1c c0       	rjmp	.+56     	; 0x988 <delay_ms+0x54>

	while (outer1) {
		outer2 = 100;
     950:	84 e6       	ldi	r24, 0x64	; 100
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	9a 83       	std	Y+2, r25	; 0x02
     956:	89 83       	std	Y+1, r24	; 0x01
     958:	0e c0       	rjmp	.+28     	; 0x976 <delay_ms+0x42>
		while (outer2) {
			while (ms)
				ms--;
     95a:	8d 81       	ldd	r24, Y+5	; 0x05
     95c:	9e 81       	ldd	r25, Y+6	; 0x06
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	9e 83       	std	Y+6, r25	; 0x06
     962:	8d 83       	std	Y+5, r24	; 0x05
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
			while (ms)
     964:	8d 81       	ldd	r24, Y+5	; 0x05
     966:	9e 81       	ldd	r25, Y+6	; 0x06
     968:	00 97       	sbiw	r24, 0x00	; 0
     96a:	b9 f7       	brne	.-18     	; 0x95a <delay_ms+0x26>
				ms--;
			outer2--;
     96c:	89 81       	ldd	r24, Y+1	; 0x01
     96e:	9a 81       	ldd	r25, Y+2	; 0x02
     970:	01 97       	sbiw	r24, 0x01	; 1
     972:	9a 83       	std	Y+2, r25	; 0x02
     974:	89 83       	std	Y+1, r24	; 0x01
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	9a 81       	ldd	r25, Y+2	; 0x02
     97a:	00 97       	sbiw	r24, 0x00	; 0
     97c:	99 f7       	brne	.-26     	; 0x964 <delay_ms+0x30>
			while (ms)
				ms--;
			outer2--;
		}
		outer1--;
     97e:	8b 81       	ldd	r24, Y+3	; 0x03
     980:	9c 81       	ldd	r25, Y+4	; 0x04
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	9c 83       	std	Y+4, r25	; 0x04
     986:	8b 83       	std	Y+3, r24	; 0x03
 */
void delay_ms(unsigned short ms) {
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
     988:	8b 81       	ldd	r24, Y+3	; 0x03
     98a:	9c 81       	ldd	r25, Y+4	; 0x04
     98c:	00 97       	sbiw	r24, 0x00	; 0
     98e:	01 f7       	brne	.-64     	; 0x950 <delay_ms+0x1c>
				ms--;
			outer2--;
		}
		outer1--;
	}
}
     990:	26 96       	adiw	r28, 0x06	; 6
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	f8 94       	cli
     996:	de bf       	out	0x3e, r29	; 62
     998:	0f be       	out	0x3f, r0	; 63
     99a:	cd bf       	out	0x3d, r28	; 61
     99c:	cf 91       	pop	r28
     99e:	df 91       	pop	r29
     9a0:	08 95       	ret

000009a2 <gpib_init>:
 * Init GPIB pins and variables.
 * \brief All signal lines not related to the controller part
 * 		are initialized with useful values.
 *		(The controller part initialization is done on gpib_controller_assert())
 */
void gpib_init(void) {
     9a2:	df 93       	push	r29
     9a4:	cf 93       	push	r28
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
	// data lines - complete port A as input
	DDRA = 0x00;
     9aa:	ea e3       	ldi	r30, 0x3A	; 58
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	10 82       	st	Z, r1

	// handshake lines - on port D , everything as input
	DDRD &= ~_BV(G_DAV); // DAV 
     9b0:	a1 e3       	ldi	r26, 0x31	; 49
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	e1 e3       	ldi	r30, 0x31	; 49
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	80 81       	ld	r24, Z
     9ba:	8b 7f       	andi	r24, 0xFB	; 251
     9bc:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_EOI); // EOI 
     9be:	a1 e3       	ldi	r26, 0x31	; 49
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	e1 e3       	ldi	r30, 0x31	; 49
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	80 81       	ld	r24, Z
     9c8:	8f 7e       	andi	r24, 0xEF	; 239
     9ca:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_SRQ); // SRQ 
     9cc:	a1 e3       	ldi	r26, 0x31	; 49
     9ce:	b0 e0       	ldi	r27, 0x00	; 0
     9d0:	e1 e3       	ldi	r30, 0x31	; 49
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	80 81       	ld	r24, Z
     9d6:	8f 7b       	andi	r24, 0xBF	; 191
     9d8:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_ATN); // ATN  
     9da:	a1 e3       	ldi	r26, 0x31	; 49
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	e1 e3       	ldi	r30, 0x31	; 49
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	8f 77       	andi	r24, 0x7F	; 127
     9e6:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_REN); // REN  
     9e8:	a7 e3       	ldi	r26, 0x37	; 55
     9ea:	b0 e0       	ldi	r27, 0x00	; 0
     9ec:	e7 e3       	ldi	r30, 0x37	; 55
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	80 81       	ld	r24, Z
     9f2:	8d 7f       	andi	r24, 0xFD	; 253
     9f4:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_IFC); // IFC  
     9f6:	a7 e3       	ldi	r26, 0x37	; 55
     9f8:	b0 e0       	ldi	r27, 0x00	; 0
     9fa:	e7 e3       	ldi	r30, 0x37	; 55
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	80 81       	ld	r24, Z
     a00:	8e 7f       	andi	r24, 0xFE	; 254
     a02:	8c 93       	st	X, r24

	// init handshake lines
	assign_bit(DDRD, PORTD, G_NRFD);
     a04:	a2 e3       	ldi	r26, 0x32	; 50
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	e2 e3       	ldi	r30, 0x32	; 50
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 81       	ld	r24, Z
     a0e:	87 7f       	andi	r24, 0xF7	; 247
     a10:	8c 93       	st	X, r24
     a12:	a1 e3       	ldi	r26, 0x31	; 49
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	e1 e3       	ldi	r30, 0x31	; 49
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	80 81       	ld	r24, Z
     a1c:	88 60       	ori	r24, 0x08	; 8
     a1e:	8c 93       	st	X, r24
     a20:	a2 e3       	ldi	r26, 0x32	; 50
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	e2 e3       	ldi	r30, 0x32	; 50
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	87 7f       	andi	r24, 0xF7	; 247
     a2c:	8c 93       	st	X, r24
	// not ready for data now
	release_bit(DDRD, PORTD, G_NDAC);
     a2e:	a1 e3       	ldi	r26, 0x31	; 49
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	e1 e3       	ldi	r30, 0x31	; 49
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 81       	ld	r24, Z
     a38:	8f 7d       	andi	r24, 0xDF	; 223
     a3a:	8c 93       	st	X, r24
     a3c:	a2 e3       	ldi	r26, 0x32	; 50
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	e2 e3       	ldi	r30, 0x32	; 50
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	80 81       	ld	r24, Z
     a46:	80 62       	ori	r24, 0x20	; 32
     a48:	8c 93       	st	X, r24
	// initially: ok so far
}
     a4a:	cf 91       	pop	r28
     a4c:	df 91       	pop	r29
     a4e:	08 95       	ret

00000a50 <gpib_receive>:
 *  \returns		On any error, 0xff is returned. in this case, the value of parameter *_byte is undefined.
 * 		Otherwise the value of the EOI signal line during read is returned. If EOI was assigned, a 0x01 is
 * 		returned. If EOI was not assigned, a 0x00 is returned. Assignment of EOI means that the talker
 * 		is sending the last character for this transmission.
 */
uchar gpib_receive(uchar* _byte) {
     a50:	df 93       	push	r29
     a52:	cf 93       	push	r28
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	27 97       	sbiw	r28, 0x07	; 7
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	9e 83       	std	Y+6, r25	; 0x06
     a66:	8d 83       	std	Y+5, r24	; 0x05
	int timeout;
	uchar byte, eoi;

	//uart_puts("\n\rgpib_receive()\n\r");

	if (controller.talks == 1) {
     a68:	80 91 a7 03 	lds	r24, 0x03A7
     a6c:	81 30       	cpi	r24, 0x01	; 1
     a6e:	39 f4       	brne	.+14     	; 0xa7e <gpib_receive+0x2e>
		*_byte = 0xff;
     a70:	ed 81       	ldd	r30, Y+5	; 0x05
     a72:	fe 81       	ldd	r31, Y+6	; 0x06
     a74:	8f ef       	ldi	r24, 0xFF	; 255
     a76:	80 83       	st	Z, r24
		return 0xff;
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	8f 83       	std	Y+7, r24	; 0x07
     a7c:	c6 c0       	rjmp	.+396    	; 0xc0a <gpib_receive+0x1ba>
	}

	// handshake: set nrfd, means i am ready to receive some data
	release_bit(DDRD, PORTD, G_NRFD);
     a7e:	a1 e3       	ldi	r26, 0x31	; 49
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	e1 e3       	ldi	r30, 0x31	; 49
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	80 81       	ld	r24, Z
     a88:	87 7f       	andi	r24, 0xF7	; 247
     a8a:	8c 93       	st	X, r24
     a8c:	a2 e3       	ldi	r26, 0x32	; 50
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e2 e3       	ldi	r30, 0x32	; 50
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	80 81       	ld	r24, Z
     a96:	88 60       	ori	r24, 0x08	; 8
     a98:	8c 93       	st	X, r24
	assign_bit(DDRD, PORTD, G_NDAC);
     a9a:	a2 e3       	ldi	r26, 0x32	; 50
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e2 e3       	ldi	r30, 0x32	; 50
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	80 81       	ld	r24, Z
     aa4:	8f 7d       	andi	r24, 0xDF	; 223
     aa6:	8c 93       	st	X, r24
     aa8:	a1 e3       	ldi	r26, 0x31	; 49
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	e1 e3       	ldi	r30, 0x31	; 49
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	80 62       	ori	r24, 0x20	; 32
     ab4:	8c 93       	st	X, r24
     ab6:	a2 e3       	ldi	r26, 0x32	; 50
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	e2 e3       	ldi	r30, 0x32	; 50
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	80 81       	ld	r24, Z
     ac0:	8f 7d       	andi	r24, 0xDF	; 223
     ac2:	8c 93       	st	X, r24

	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     ac4:	80 91 13 05 	lds	r24, 0x0513
     ac8:	88 2f       	mov	r24, r24
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	05 96       	adiw	r24, 0x05	; 5
     ace:	9c 83       	std	Y+4, r25	; 0x04
     ad0:	8b 83       	std	Y+3, r24	; 0x03
     ad2:	10 c0       	rjmp	.+32     	; 0xaf4 <gpib_receive+0xa4>
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     ad4:	80 91 13 05 	lds	r24, 0x0513
     ad8:	28 2f       	mov	r18, r24
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	8b 81       	ldd	r24, Y+3	; 0x03
     ade:	9c 81       	ldd	r25, Y+4	; 0x04
     ae0:	28 17       	cp	r18, r24
     ae2:	39 07       	cpc	r19, r25
     ae4:	39 f4       	brne	.+14     	; 0xaf4 <gpib_receive+0xa4>
			uart_puts("\n\rError: DAV timeout (1)\n\r");
     ae6:	80 e6       	ldi	r24, 0x60	; 96
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>
			return 0xff;
     aee:	8f ef       	ldi	r24, 0xFF	; 255
     af0:	8f 83       	std	Y+7, r24	; 0x07
     af2:	8b c0       	rjmp	.+278    	; 0xc0a <gpib_receive+0x1ba>
	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
     af4:	e0 e3       	ldi	r30, 0x30	; 48
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	80 81       	ld	r24, Z
     afa:	88 2f       	mov	r24, r24
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	84 70       	andi	r24, 0x04	; 4
     b00:	90 70       	andi	r25, 0x00	; 0
     b02:	00 97       	sbiw	r24, 0x00	; 0
     b04:	49 f0       	breq	.+18     	; 0xb18 <gpib_receive+0xc8>
     b06:	80 91 13 05 	lds	r24, 0x0513
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	8b 81       	ldd	r24, Y+3	; 0x03
     b10:	9c 81       	ldd	r25, Y+4	; 0x04
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	f4 f6       	brge	.-68     	; 0xad4 <gpib_receive+0x84>
#else
	loop_until_bit_is_clear(PIND,G_DAV);
#endif

	// handshake: clear NRFD, means i am busy now to read data
	assign_bit(DDRD, PORTD, G_NRFD);
     b18:	a2 e3       	ldi	r26, 0x32	; 50
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
     b1c:	e2 e3       	ldi	r30, 0x32	; 50
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	80 81       	ld	r24, Z
     b22:	87 7f       	andi	r24, 0xF7	; 247
     b24:	8c 93       	st	X, r24
     b26:	a1 e3       	ldi	r26, 0x31	; 49
     b28:	b0 e0       	ldi	r27, 0x00	; 0
     b2a:	e1 e3       	ldi	r30, 0x31	; 49
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	80 81       	ld	r24, Z
     b30:	88 60       	ori	r24, 0x08	; 8
     b32:	8c 93       	st	X, r24
     b34:	a2 e3       	ldi	r26, 0x32	; 50
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	e2 e3       	ldi	r30, 0x32	; 50
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	80 81       	ld	r24, Z
     b3e:	87 7f       	andi	r24, 0xF7	; 247
     b40:	8c 93       	st	X, r24
	// read data
	byte = PINA ^ 0xff;
     b42:	e9 e3       	ldi	r30, 0x39	; 57
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	80 95       	com	r24
     b4a:	8a 83       	std	Y+2, r24	; 0x02

	// handshake: set ndac, means i have completed/accepted the read
	release_bit(DDRD, PORTD, G_NDAC);
     b4c:	a1 e3       	ldi	r26, 0x31	; 49
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	e1 e3       	ldi	r30, 0x31	; 49
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	8f 7d       	andi	r24, 0xDF	; 223
     b58:	8c 93       	st	X, r24
     b5a:	a2 e3       	ldi	r26, 0x32	; 50
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e2 e3       	ldi	r30, 0x32	; 50
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 62       	ori	r24, 0x20	; 32
     b66:	8c 93       	st	X, r24

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     b68:	80 91 13 05 	lds	r24, 0x0513
     b6c:	88 2f       	mov	r24, r24
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	05 96       	adiw	r24, 0x05	; 5
     b72:	9c 83       	std	Y+4, r25	; 0x04
     b74:	8b 83       	std	Y+3, r24	; 0x03
     b76:	10 c0       	rjmp	.+32     	; 0xb98 <gpib_receive+0x148>
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     b78:	80 91 13 05 	lds	r24, 0x0513
     b7c:	28 2f       	mov	r18, r24
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	8b 81       	ldd	r24, Y+3	; 0x03
     b82:	9c 81       	ldd	r25, Y+4	; 0x04
     b84:	28 17       	cp	r18, r24
     b86:	39 07       	cpc	r19, r25
     b88:	39 f4       	brne	.+14     	; 0xb98 <gpib_receive+0x148>
			uart_puts("\n\rError: DAV timeout (2)\n\r");
     b8a:	8b e7       	ldi	r24, 0x7B	; 123
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>
			return 0xff;
     b92:	8f ef       	ldi	r24, 0xFF	; 255
     b94:	8f 83       	std	Y+7, r24	; 0x07
     b96:	39 c0       	rjmp	.+114    	; 0xc0a <gpib_receive+0x1ba>
	release_bit(DDRD, PORTD, G_NDAC);

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
     b98:	e0 e3       	ldi	r30, 0x30	; 48
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	84 70       	andi	r24, 0x04	; 4
     ba4:	90 70       	andi	r25, 0x00	; 0
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	49 f4       	brne	.+18     	; 0xbbc <gpib_receive+0x16c>
     baa:	80 91 13 05 	lds	r24, 0x0513
     bae:	28 2f       	mov	r18, r24
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	9c 81       	ldd	r25, Y+4	; 0x04
     bb6:	82 17       	cp	r24, r18
     bb8:	93 07       	cpc	r25, r19
     bba:	f4 f6       	brge	.-68     	; 0xb78 <gpib_receive+0x128>
	}
#else
	loop_until_bit_is_set(PIND,G_DAV);
#endif
	// handshake: clear ndac (this is a prerequisite for receive next byte)
	assign_bit(DDRD, PORTD, G_NDAC);
     bbc:	a2 e3       	ldi	r26, 0x32	; 50
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e2 e3       	ldi	r30, 0x32	; 50
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	8f 7d       	andi	r24, 0xDF	; 223
     bc8:	8c 93       	st	X, r24
     bca:	a1 e3       	ldi	r26, 0x31	; 49
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e1 e3       	ldi	r30, 0x31	; 49
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	80 62       	ori	r24, 0x20	; 32
     bd6:	8c 93       	st	X, r24
     bd8:	a2 e3       	ldi	r26, 0x32	; 50
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e2 e3       	ldi	r30, 0x32	; 50
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	8f 7d       	andi	r24, 0xDF	; 223
     be4:	8c 93       	st	X, r24

	// check if last byte of transmission
	eoi = bit_is_clear(PIND, G_EOI);
     be6:	e0 e3       	ldi	r30, 0x30	; 48
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	88 2f       	mov	r24, r24
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	80 71       	andi	r24, 0x10	; 16
     bf2:	90 70       	andi	r25, 0x00	; 0
     bf4:	19 82       	std	Y+1, r1	; 0x01
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	11 f4       	brne	.+4      	; 0xbfe <gpib_receive+0x1ae>
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	89 83       	std	Y+1, r24	; 0x01

	*_byte = byte;
     bfe:	ed 81       	ldd	r30, Y+5	; 0x05
     c00:	fe 81       	ldd	r31, Y+6	; 0x06
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	80 83       	st	Z, r24

	return eoi;
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	8f 83       	std	Y+7, r24	; 0x07
     c0a:	8f 81       	ldd	r24, Y+7	; 0x07
}
     c0c:	27 96       	adiw	r28, 0x07	; 7
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	cf 91       	pop	r28
     c1a:	df 91       	pop	r29
     c1c:	08 95       	ret

00000c1e <gpib_controller_assign>:
 * You have to change the initialization of the partner array according to your environment.
 * The partners-array is used by gpib_serial_poll() for looping over all existing devices.
 * 
 * \param address the address to be used by the controller. Usually 0x00.
 */
void gpib_controller_assign(uchar address) {
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	0f 92       	push	r0
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	89 83       	std	Y+1, r24	; 0x01
	controller.myaddress = address;
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	80 93 a4 03 	sts	0x03A4, r24
	controller.talks = 0;
     c30:	10 92 a7 03 	sts	0x03A7, r1
	controller.partner.primary = ADDRESS_NOT_SET; // init default active partner
     c34:	8f ef       	ldi	r24, 0xFF	; 255
     c36:	80 93 a5 03 	sts	0x03A5, r24
	controller.partner.secondary = ADDRESS_NOT_SET;
     c3a:	8f ef       	ldi	r24, 0xFF	; 255
     c3c:	80 93 a6 03 	sts	0x03A6, r24
	controller.flavour = FLAVOUR_NONE;
     c40:	10 92 a8 03 	sts	0x03A8, r1
	/** clear list of partners */
	gpib_clear_partners();
     c44:	0e 94 ab 0c 	call	0x1956	; 0x1956 <gpib_clear_partners>
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     c48:	a8 e3       	ldi	r26, 0x38	; 56
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e8 e3       	ldi	r30, 0x38	; 56
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	8e 7f       	andi	r24, 0xFE	; 254
     c54:	8c 93       	st	X, r24
     c56:	a7 e3       	ldi	r26, 0x37	; 55
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e7 e3       	ldi	r30, 0x37	; 55
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	81 60       	ori	r24, 0x01	; 1
     c62:	8c 93       	st	X, r24
     c64:	a8 e3       	ldi	r26, 0x38	; 56
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e8 e3       	ldi	r30, 0x38	; 56
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	8e 7f       	andi	r24, 0xFE	; 254
     c70:	8c 93       	st	X, r24
	delay_ms(200);
     c72:	88 ec       	ldi	r24, 0xC8	; 200
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 9a 04 	call	0x934	; 0x934 <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     c7a:	a7 e3       	ldi	r26, 0x37	; 55
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e7 e3       	ldi	r30, 0x37	; 55
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	8e 7f       	andi	r24, 0xFE	; 254
     c86:	8c 93       	st	X, r24
     c88:	a8 e3       	ldi	r26, 0x38	; 56
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e8 e3       	ldi	r30, 0x38	; 56
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	81 60       	ori	r24, 0x01	; 1
     c94:	8c 93       	st	X, r24
	// set up all devices for remote control
	assign_bit(DDRB, PORTB, G_REN);
     c96:	a8 e3       	ldi	r26, 0x38	; 56
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e8 e3       	ldi	r30, 0x38	; 56
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	8d 7f       	andi	r24, 0xFD	; 253
     ca2:	8c 93       	st	X, r24
     ca4:	a7 e3       	ldi	r26, 0x37	; 55
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e7 e3       	ldi	r30, 0x37	; 55
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	82 60       	ori	r24, 0x02	; 2
     cb0:	8c 93       	st	X, r24
     cb2:	a8 e3       	ldi	r26, 0x38	; 56
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e8 e3       	ldi	r30, 0x38	; 56
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8d 7f       	andi	r24, 0xFD	; 253
     cbe:	8c 93       	st	X, r24

	// DCL - device clear for all devices on bus
	cmd_buf[0] = G_CMD_DCL;
     cc0:	84 e1       	ldi	r24, 0x14	; 20
     cc2:	80 93 5e 04 	sts	0x045E, r24
	gpib_cmd(cmd_buf, 1);
     cc6:	8e e5       	ldi	r24, 0x5E	; 94
     cc8:	94 e0       	ldi	r25, 0x04	; 4
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
}
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <gpib_controller_release>:

/**
 * Release bus 
 */
void gpib_controller_release(void) {
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     ce2:	a8 e3       	ldi	r26, 0x38	; 56
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e8 e3       	ldi	r30, 0x38	; 56
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8e 7f       	andi	r24, 0xFE	; 254
     cee:	8c 93       	st	X, r24
     cf0:	a7 e3       	ldi	r26, 0x37	; 55
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e7 e3       	ldi	r30, 0x37	; 55
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	81 60       	ori	r24, 0x01	; 1
     cfc:	8c 93       	st	X, r24
     cfe:	a8 e3       	ldi	r26, 0x38	; 56
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e8 e3       	ldi	r30, 0x38	; 56
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8e 7f       	andi	r24, 0xFE	; 254
     d0a:	8c 93       	st	X, r24
	delay_ms(200);
     d0c:	88 ec       	ldi	r24, 0xC8	; 200
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 9a 04 	call	0x934	; 0x934 <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     d14:	a7 e3       	ldi	r26, 0x37	; 55
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e7 e3       	ldi	r30, 0x37	; 55
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	8e 7f       	andi	r24, 0xFE	; 254
     d20:	8c 93       	st	X, r24
     d22:	a8 e3       	ldi	r26, 0x38	; 56
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e8 e3       	ldi	r30, 0x38	; 56
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	81 60       	ori	r24, 0x01	; 1
     d2e:	8c 93       	st	X, r24
	// set up all devices for local control
	release_bit(DDRB, PORTB, G_REN);
     d30:	a7 e3       	ldi	r26, 0x37	; 55
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e7 e3       	ldi	r30, 0x37	; 55
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	8d 7f       	andi	r24, 0xFD	; 253
     d3c:	8c 93       	st	X, r24
     d3e:	a8 e3       	ldi	r26, 0x38	; 56
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e8 e3       	ldi	r30, 0x38	; 56
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	82 60       	ori	r24, 0x02	; 2
     d4a:	8c 93       	st	X, r24
}
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <gpib_write>:

/**
 * Write GPIB string to bus
 * \brief See _gpib_write() for further information.
 */
uchar gpib_write(uchar *bytes, int length) {
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	00 d0       	rcall	.+0      	; 0xd58 <gpib_write+0x6>
     d58:	00 d0       	rcall	.+0      	; 0xd5a <gpib_write+0x8>
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	9a 83       	std	Y+2, r25	; 0x02
     d60:	89 83       	std	Y+1, r24	; 0x01
     d62:	7c 83       	std	Y+4, r23	; 0x04
     d64:	6b 83       	std	Y+3, r22	; 0x03
	// set attention arg false for ordinary strings
	return _gpib_write(bytes, length, (uchar) 0);
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	9a 81       	ldd	r25, Y+2	; 0x02
     d6a:	2b 81       	ldd	r18, Y+3	; 0x03
     d6c:	3c 81       	ldd	r19, Y+4	; 0x04
     d6e:	b9 01       	movw	r22, r18
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_gpib_write>
}
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <gpib_cmd>:

/**
 * Write GPIB command to bus
 * \brief See _gpib_write() for further information.
 */
uchar gpib_cmd(uchar *bytes, int length) {
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	00 d0       	rcall	.+0      	; 0xd8a <gpib_cmd+0x6>
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <gpib_cmd+0x8>
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	7c 83       	std	Y+4, r23	; 0x04
     d96:	6b 83       	std	Y+3, r22	; 0x03
	// set attention arg true for commands
	return _gpib_write(bytes, length, (uchar) 1);
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	9a 81       	ldd	r25, Y+2	; 0x02
     d9c:	2b 81       	ldd	r18, Y+3	; 0x03
     d9e:	3c 81       	ldd	r19, Y+4	; 0x04
     da0:	b9 01       	movw	r22, r18
     da2:	41 e0       	ldi	r20, 0x01	; 1
     da4:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_gpib_write>
}
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <_gpib_write>:
 * \param length length of valid bytes in byte array or zero.
 * for binary data, lenght must be defined. For strings, length can be set to zero. Then the length of
 * the string is calculated internally.
 * \param attention attention tur means assign ATN signal line during write.
 */
uchar _gpib_write(uchar *bytes, int length, uchar attention) {
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	cb 58       	subi	r28, 0x8B	; 139
     dc0:	d0 40       	sbci	r29, 0x00	; 0
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	fe 01       	movw	r30, r28
     dce:	ea 57       	subi	r30, 0x7A	; 122
     dd0:	ff 4f       	sbci	r31, 0xFF	; 255
     dd2:	91 83       	std	Z+1, r25	; 0x01
     dd4:	80 83       	st	Z, r24
     dd6:	fe 01       	movw	r30, r28
     dd8:	e8 57       	subi	r30, 0x78	; 120
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	71 83       	std	Z+1, r23	; 0x01
     dde:	60 83       	st	Z, r22
     de0:	fe 01       	movw	r30, r28
     de2:	e6 57       	subi	r30, 0x76	; 118
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	40 83       	st	Z, r20
	int timeout;
	uchar buf[128];

	// set talks state. This is used by ISR to recognize own talk
	// (controller must not talk to itself and must not take part in listener handshake when talking)
	controller.talks = 1;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	80 93 a7 03 	sts	0x03A7, r24

	if (attention) {
     dee:	fe 01       	movw	r30, r28
     df0:	e6 57       	subi	r30, 0x76	; 118
     df2:	ff 4f       	sbci	r31, 0xFF	; 255
     df4:	80 81       	ld	r24, Z
     df6:	88 23       	and	r24, r24
     df8:	a9 f0       	breq	.+42     	; 0xe24 <_gpib_write+0x6e>
		//uart_puts("\n\rgpib_controller_write()\n\r");
		// assign ATN for commands
		assign_bit(DDRD, PORTD, G_ATN);
     dfa:	a2 e3       	ldi	r26, 0x32	; 50
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e2 e3       	ldi	r30, 0x32	; 50
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8f 77       	andi	r24, 0x7F	; 127
     e06:	8c 93       	st	X, r24
     e08:	a1 e3       	ldi	r26, 0x31	; 49
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e1 e3       	ldi	r30, 0x31	; 49
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	80 68       	ori	r24, 0x80	; 128
     e14:	8c 93       	st	X, r24
     e16:	a2 e3       	ldi	r26, 0x32	; 50
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e2 e3       	ldi	r30, 0x32	; 50
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	8f 77       	andi	r24, 0x7F	; 127
     e22:	8c 93       	st	X, r24
	}

	if (length == 0) {
     e24:	fe 01       	movw	r30, r28
     e26:	e8 57       	subi	r30, 0x78	; 120
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	80 81       	ld	r24, Z
     e2c:	91 81       	ldd	r25, Z+1	; 0x01
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	61 f4       	brne	.+24     	; 0xe4a <_gpib_write+0x94>
		// length==0 means this is a common C string, null-terminated.
		// then, length can be easily calculated
		length = strlen((char*) bytes);
     e32:	fe 01       	movw	r30, r28
     e34:	ea 57       	subi	r30, 0x7A	; 122
     e36:	ff 4f       	sbci	r31, 0xFF	; 255
     e38:	80 81       	ld	r24, Z
     e3a:	91 81       	ldd	r25, Z+1	; 0x01
     e3c:	0e 94 b6 01 	call	0x36c	; 0x36c <strlen>
     e40:	fe 01       	movw	r30, r28
     e42:	e8 57       	subi	r30, 0x78	; 120
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	91 83       	std	Z+1, r25	; 0x01
     e48:	80 83       	st	Z, r24
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif
	// release EOI during transmission
	release_bit(DDRD, PORTD, G_EOI);
     e4a:	a1 e3       	ldi	r26, 0x31	; 49
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e1 e3       	ldi	r30, 0x31	; 49
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	8f 7e       	andi	r24, 0xEF	; 239
     e56:	8c 93       	st	X, r24
     e58:	a2 e3       	ldi	r26, 0x32	; 50
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e2 e3       	ldi	r30, 0x32	; 50
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	80 61       	ori	r24, 0x10	; 16
     e64:	8c 93       	st	X, r24
	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
     e66:	a1 e3       	ldi	r26, 0x31	; 49
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e1 e3       	ldi	r30, 0x31	; 49
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8b 7f       	andi	r24, 0xFB	; 251
     e72:	8c 93       	st	X, r24
     e74:	a2 e3       	ldi	r26, 0x32	; 50
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e2 e3       	ldi	r30, 0x32	; 50
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	84 60       	ori	r24, 0x04	; 4
     e80:	8c 93       	st	X, r24
	// release NRFD (just to be sure)
	release_bit(DDRD, PORTD, G_NRFD);
     e82:	a1 e3       	ldi	r26, 0x31	; 49
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e1 e3       	ldi	r30, 0x31	; 49
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	87 7f       	andi	r24, 0xF7	; 247
     e8e:	8c 93       	st	X, r24
     e90:	a2 e3       	ldi	r26, 0x32	; 50
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e2 e3       	ldi	r30, 0x32	; 50
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	88 60       	ori	r24, 0x08	; 8
     e9c:	8c 93       	st	X, r24

	// bytes[0] = 'a'
	// bytes[1] = 'b'
	// length = 2
	for (i = 0; i < length; i++) {
     e9e:	1c 82       	std	Y+4, r1	; 0x04
     ea0:	1b 82       	std	Y+3, r1	; 0x03
     ea2:	45 c2       	rjmp	.+1162   	; 0x132e <_gpib_write+0x578>

		// put data on bus
		c = bytes[i];
     ea4:	2b 81       	ldd	r18, Y+3	; 0x03
     ea6:	3c 81       	ldd	r19, Y+4	; 0x04
     ea8:	fe 01       	movw	r30, r28
     eaa:	ea 57       	subi	r30, 0x7A	; 122
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	80 81       	ld	r24, Z
     eb0:	91 81       	ldd	r25, Z+1	; 0x01
     eb2:	fc 01       	movw	r30, r24
     eb4:	e2 0f       	add	r30, r18
     eb6:	f3 1f       	adc	r31, r19
     eb8:	80 81       	ld	r24, Z
     eba:	8d 83       	std	Y+5, r24	; 0x05
		//sprintf( buf, "char: %c\n\r", c );
		//uart_puts(buf);		

		release_bit(DDRD, PORTD, G_NDAC);
     ebc:	a1 e3       	ldi	r26, 0x31	; 49
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e1 e3       	ldi	r30, 0x31	; 49
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8f 7d       	andi	r24, 0xDF	; 223
     ec8:	8c 93       	st	X, r24
     eca:	a2 e3       	ldi	r26, 0x32	; 50
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e2 e3       	ldi	r30, 0x32	; 50
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	80 62       	ori	r24, 0x20	; 32
     ed6:	8c 93       	st	X, r24
		//uart_puts("0");
		// wait for NDAC assign from all listeners
#ifdef WITH_TIMEOUT
		timeout = s + 5;
     ed8:	80 91 13 05 	lds	r24, 0x0513
     edc:	88 2f       	mov	r24, r24
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	05 96       	adiw	r24, 0x05	; 5
     ee2:	9a 83       	std	Y+2, r25	; 0x02
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	14 c0       	rjmp	.+40     	; 0xf10 <_gpib_write+0x15a>
		//gpib_info();
		while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
			if (s == timeout) {
     ee8:	80 91 13 05 	lds	r24, 0x0513
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
     ef4:	28 17       	cp	r18, r24
     ef6:	39 07       	cpc	r19, r25
     ef8:	59 f4       	brne	.+22     	; 0xf10 <_gpib_write+0x15a>
				uart_puts("\n\rError: NDAC timeout\n\r");
     efa:	86 e9       	ldi	r24, 0x96	; 150
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>
				return 0xff;
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	c5 57       	subi	r28, 0x75	; 117
     f06:	df 4f       	sbci	r29, 0xFF	; 255
     f08:	88 83       	st	Y, r24
     f0a:	cb 58       	subi	r28, 0x8B	; 139
     f0c:	d0 40       	sbci	r29, 0x00	; 0
     f0e:	35 c2       	rjmp	.+1130   	; 0x137a <_gpib_write+0x5c4>
		//uart_puts("0");
		// wait for NDAC assign from all listeners
#ifdef WITH_TIMEOUT
		timeout = s + 5;
		//gpib_info();
		while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
     f10:	e0 e3       	ldi	r30, 0x30	; 48
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	88 2f       	mov	r24, r24
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	80 72       	andi	r24, 0x20	; 32
     f1c:	90 70       	andi	r25, 0x00	; 0
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	49 f0       	breq	.+18     	; 0xf34 <_gpib_write+0x17e>
     f22:	80 91 13 05 	lds	r24, 0x0513
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	82 17       	cp	r24, r18
     f30:	93 07       	cpc	r25, r19
     f32:	d4 f6       	brge	.-76     	; 0xee8 <_gpib_write+0x132>
		}
#else
		loop_until_bit_is_clear(PIND,G_NDAC);
#endif

		DDRA = 0x00;
     f34:	ea e3       	ldi	r30, 0x3A	; 58
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	10 82       	st	Z, r1
		if (c & 0x01) {
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	88 2f       	mov	r24, r24
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	81 70       	andi	r24, 0x01	; 1
     f42:	90 70       	andi	r25, 0x00	; 0
     f44:	88 23       	and	r24, r24
     f46:	b1 f0       	breq	.+44     	; 0xf74 <_gpib_write+0x1be>
			assign_bit(DDRA, PORTA, PA0);
     f48:	ab e3       	ldi	r26, 0x3B	; 59
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	eb e3       	ldi	r30, 0x3B	; 59
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	8e 7f       	andi	r24, 0xFE	; 254
     f54:	8c 93       	st	X, r24
     f56:	aa e3       	ldi	r26, 0x3A	; 58
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	ea e3       	ldi	r30, 0x3A	; 58
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	81 60       	ori	r24, 0x01	; 1
     f62:	8c 93       	st	X, r24
     f64:	ab e3       	ldi	r26, 0x3B	; 59
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	eb e3       	ldi	r30, 0x3B	; 59
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	8e 7f       	andi	r24, 0xFE	; 254
     f70:	8c 93       	st	X, r24
     f72:	0e c0       	rjmp	.+28     	; 0xf90 <_gpib_write+0x1da>
		} else {
			release_bit(DDRA, PORTA, PA0)
     f74:	aa e3       	ldi	r26, 0x3A	; 58
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	ea e3       	ldi	r30, 0x3A	; 58
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	8e 7f       	andi	r24, 0xFE	; 254
     f80:	8c 93       	st	X, r24
     f82:	ab e3       	ldi	r26, 0x3B	; 59
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	eb e3       	ldi	r30, 0x3B	; 59
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	81 60       	ori	r24, 0x01	; 1
     f8e:	8c 93       	st	X, r24
		}

		if (c & 0x02) {
     f90:	8d 81       	ldd	r24, Y+5	; 0x05
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	82 70       	andi	r24, 0x02	; 2
     f98:	90 70       	andi	r25, 0x00	; 0
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	b1 f0       	breq	.+44     	; 0xfca <_gpib_write+0x214>
			assign_bit(DDRA, PORTA, PA1)
     f9e:	ab e3       	ldi	r26, 0x3B	; 59
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	eb e3       	ldi	r30, 0x3B	; 59
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	8d 7f       	andi	r24, 0xFD	; 253
     faa:	8c 93       	st	X, r24
     fac:	aa e3       	ldi	r26, 0x3A	; 58
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	ea e3       	ldi	r30, 0x3A	; 58
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	82 60       	ori	r24, 0x02	; 2
     fb8:	8c 93       	st	X, r24
     fba:	ab e3       	ldi	r26, 0x3B	; 59
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	eb e3       	ldi	r30, 0x3B	; 59
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8d 7f       	andi	r24, 0xFD	; 253
     fc6:	8c 93       	st	X, r24
     fc8:	0e c0       	rjmp	.+28     	; 0xfe6 <_gpib_write+0x230>
		} else {
			release_bit(DDRA, PORTA, PA1);
     fca:	aa e3       	ldi	r26, 0x3A	; 58
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	ea e3       	ldi	r30, 0x3A	; 58
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	8d 7f       	andi	r24, 0xFD	; 253
     fd6:	8c 93       	st	X, r24
     fd8:	ab e3       	ldi	r26, 0x3B	; 59
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	eb e3       	ldi	r30, 0x3B	; 59
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	82 60       	ori	r24, 0x02	; 2
     fe4:	8c 93       	st	X, r24
		}

		if (c & 0x04) {
     fe6:	8d 81       	ldd	r24, Y+5	; 0x05
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	84 70       	andi	r24, 0x04	; 4
     fee:	90 70       	andi	r25, 0x00	; 0
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	b1 f0       	breq	.+44     	; 0x1020 <_gpib_write+0x26a>
			assign_bit(DDRA, PORTA, PA2);
     ff4:	ab e3       	ldi	r26, 0x3B	; 59
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	eb e3       	ldi	r30, 0x3B	; 59
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	8b 7f       	andi	r24, 0xFB	; 251
    1000:	8c 93       	st	X, r24
    1002:	aa e3       	ldi	r26, 0x3A	; 58
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	ea e3       	ldi	r30, 0x3A	; 58
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	84 60       	ori	r24, 0x04	; 4
    100e:	8c 93       	st	X, r24
    1010:	ab e3       	ldi	r26, 0x3B	; 59
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	eb e3       	ldi	r30, 0x3B	; 59
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	8b 7f       	andi	r24, 0xFB	; 251
    101c:	8c 93       	st	X, r24
    101e:	0e c0       	rjmp	.+28     	; 0x103c <_gpib_write+0x286>
		} else {
			release_bit(DDRA, PORTA, PA2);
    1020:	aa e3       	ldi	r26, 0x3A	; 58
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	ea e3       	ldi	r30, 0x3A	; 58
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8b 7f       	andi	r24, 0xFB	; 251
    102c:	8c 93       	st	X, r24
    102e:	ab e3       	ldi	r26, 0x3B	; 59
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	eb e3       	ldi	r30, 0x3B	; 59
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	84 60       	ori	r24, 0x04	; 4
    103a:	8c 93       	st	X, r24
		}

		if (c & 0x08) {
    103c:	8d 81       	ldd	r24, Y+5	; 0x05
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	88 70       	andi	r24, 0x08	; 8
    1044:	90 70       	andi	r25, 0x00	; 0
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	b1 f0       	breq	.+44     	; 0x1076 <_gpib_write+0x2c0>
			assign_bit(DDRA, PORTA, PA3);
    104a:	ab e3       	ldi	r26, 0x3B	; 59
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	eb e3       	ldi	r30, 0x3B	; 59
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	87 7f       	andi	r24, 0xF7	; 247
    1056:	8c 93       	st	X, r24
    1058:	aa e3       	ldi	r26, 0x3A	; 58
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	ea e3       	ldi	r30, 0x3A	; 58
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	88 60       	ori	r24, 0x08	; 8
    1064:	8c 93       	st	X, r24
    1066:	ab e3       	ldi	r26, 0x3B	; 59
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	eb e3       	ldi	r30, 0x3B	; 59
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	87 7f       	andi	r24, 0xF7	; 247
    1072:	8c 93       	st	X, r24
    1074:	0e c0       	rjmp	.+28     	; 0x1092 <_gpib_write+0x2dc>
		} else {
			release_bit(DDRA, PORTA, PA3);
    1076:	aa e3       	ldi	r26, 0x3A	; 58
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	ea e3       	ldi	r30, 0x3A	; 58
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	87 7f       	andi	r24, 0xF7	; 247
    1082:	8c 93       	st	X, r24
    1084:	ab e3       	ldi	r26, 0x3B	; 59
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	eb e3       	ldi	r30, 0x3B	; 59
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	88 60       	ori	r24, 0x08	; 8
    1090:	8c 93       	st	X, r24
		}

		if (c & 0x10) {
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	88 2f       	mov	r24, r24
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	80 71       	andi	r24, 0x10	; 16
    109a:	90 70       	andi	r25, 0x00	; 0
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	b1 f0       	breq	.+44     	; 0x10cc <_gpib_write+0x316>
			assign_bit(DDRA, PORTA, PA4);
    10a0:	ab e3       	ldi	r26, 0x3B	; 59
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	eb e3       	ldi	r30, 0x3B	; 59
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	8f 7e       	andi	r24, 0xEF	; 239
    10ac:	8c 93       	st	X, r24
    10ae:	aa e3       	ldi	r26, 0x3A	; 58
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ea e3       	ldi	r30, 0x3A	; 58
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	80 61       	ori	r24, 0x10	; 16
    10ba:	8c 93       	st	X, r24
    10bc:	ab e3       	ldi	r26, 0x3B	; 59
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	eb e3       	ldi	r30, 0x3B	; 59
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	8f 7e       	andi	r24, 0xEF	; 239
    10c8:	8c 93       	st	X, r24
    10ca:	0e c0       	rjmp	.+28     	; 0x10e8 <_gpib_write+0x332>
		} else {
			release_bit(DDRA, PORTA, PA4);
    10cc:	aa e3       	ldi	r26, 0x3A	; 58
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	ea e3       	ldi	r30, 0x3A	; 58
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	8f 7e       	andi	r24, 0xEF	; 239
    10d8:	8c 93       	st	X, r24
    10da:	ab e3       	ldi	r26, 0x3B	; 59
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	eb e3       	ldi	r30, 0x3B	; 59
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	80 61       	ori	r24, 0x10	; 16
    10e6:	8c 93       	st	X, r24
		}

		if (c & 0x20) {
    10e8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ea:	88 2f       	mov	r24, r24
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	80 72       	andi	r24, 0x20	; 32
    10f0:	90 70       	andi	r25, 0x00	; 0
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	b1 f0       	breq	.+44     	; 0x1122 <_gpib_write+0x36c>
			assign_bit(DDRA, PORTA, PA5);
    10f6:	ab e3       	ldi	r26, 0x3B	; 59
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	eb e3       	ldi	r30, 0x3B	; 59
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	8f 7d       	andi	r24, 0xDF	; 223
    1102:	8c 93       	st	X, r24
    1104:	aa e3       	ldi	r26, 0x3A	; 58
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	ea e3       	ldi	r30, 0x3A	; 58
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	80 62       	ori	r24, 0x20	; 32
    1110:	8c 93       	st	X, r24
    1112:	ab e3       	ldi	r26, 0x3B	; 59
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	eb e3       	ldi	r30, 0x3B	; 59
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	8f 7d       	andi	r24, 0xDF	; 223
    111e:	8c 93       	st	X, r24
    1120:	0e c0       	rjmp	.+28     	; 0x113e <_gpib_write+0x388>
		} else {
			release_bit(DDRA, PORTA, PA5);
    1122:	aa e3       	ldi	r26, 0x3A	; 58
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	ea e3       	ldi	r30, 0x3A	; 58
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8f 7d       	andi	r24, 0xDF	; 223
    112e:	8c 93       	st	X, r24
    1130:	ab e3       	ldi	r26, 0x3B	; 59
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	eb e3       	ldi	r30, 0x3B	; 59
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	80 62       	ori	r24, 0x20	; 32
    113c:	8c 93       	st	X, r24
		}

		if (c & 0x40) {
    113e:	8d 81       	ldd	r24, Y+5	; 0x05
    1140:	88 2f       	mov	r24, r24
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	80 74       	andi	r24, 0x40	; 64
    1146:	90 70       	andi	r25, 0x00	; 0
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	b1 f0       	breq	.+44     	; 0x1178 <_gpib_write+0x3c2>
			assign_bit(DDRA, PORTA, PA6);
    114c:	ab e3       	ldi	r26, 0x3B	; 59
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	eb e3       	ldi	r30, 0x3B	; 59
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	8f 7b       	andi	r24, 0xBF	; 191
    1158:	8c 93       	st	X, r24
    115a:	aa e3       	ldi	r26, 0x3A	; 58
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	ea e3       	ldi	r30, 0x3A	; 58
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	80 64       	ori	r24, 0x40	; 64
    1166:	8c 93       	st	X, r24
    1168:	ab e3       	ldi	r26, 0x3B	; 59
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	eb e3       	ldi	r30, 0x3B	; 59
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	8f 7b       	andi	r24, 0xBF	; 191
    1174:	8c 93       	st	X, r24
    1176:	0e c0       	rjmp	.+28     	; 0x1194 <_gpib_write+0x3de>
		} else {
			release_bit(DDRA, PORTA, PA6);
    1178:	aa e3       	ldi	r26, 0x3A	; 58
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ea e3       	ldi	r30, 0x3A	; 58
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	8f 7b       	andi	r24, 0xBF	; 191
    1184:	8c 93       	st	X, r24
    1186:	ab e3       	ldi	r26, 0x3B	; 59
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	eb e3       	ldi	r30, 0x3B	; 59
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	80 64       	ori	r24, 0x40	; 64
    1192:	8c 93       	st	X, r24
		}

		if (c & 0x80) {
    1194:	8d 81       	ldd	r24, Y+5	; 0x05
    1196:	88 23       	and	r24, r24
    1198:	b4 f4       	brge	.+44     	; 0x11c6 <_gpib_write+0x410>
			assign_bit(DDRA, PORTA, PA7);
    119a:	ab e3       	ldi	r26, 0x3B	; 59
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	eb e3       	ldi	r30, 0x3B	; 59
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	8f 77       	andi	r24, 0x7F	; 127
    11a6:	8c 93       	st	X, r24
    11a8:	aa e3       	ldi	r26, 0x3A	; 58
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	ea e3       	ldi	r30, 0x3A	; 58
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	80 68       	ori	r24, 0x80	; 128
    11b4:	8c 93       	st	X, r24
    11b6:	ab e3       	ldi	r26, 0x3B	; 59
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	eb e3       	ldi	r30, 0x3B	; 59
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	8f 77       	andi	r24, 0x7F	; 127
    11c2:	8c 93       	st	X, r24
    11c4:	0e c0       	rjmp	.+28     	; 0x11e2 <_gpib_write+0x42c>
		} else {
			release_bit(DDRA, PORTA, PA7);
    11c6:	aa e3       	ldi	r26, 0x3A	; 58
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	ea e3       	ldi	r30, 0x3A	; 58
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	8f 77       	andi	r24, 0x7F	; 127
    11d2:	8c 93       	st	X, r24
    11d4:	ab e3       	ldi	r26, 0x3B	; 59
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	eb e3       	ldi	r30, 0x3B	; 59
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	80 68       	ori	r24, 0x80	; 128
    11e0:	8c 93       	st	X, r24
		}

		// wait until listeners release NRFD
		//uart_puts("1");
		release_bit(DDRD, PORTD, G_NRFD);
    11e2:	a1 e3       	ldi	r26, 0x31	; 49
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e1 e3       	ldi	r30, 0x31	; 49
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	87 7f       	andi	r24, 0xF7	; 247
    11ee:	8c 93       	st	X, r24
    11f0:	a2 e3       	ldi	r26, 0x32	; 50
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e2 e3       	ldi	r30, 0x32	; 50
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	88 60       	ori	r24, 0x08	; 8
    11fc:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
		//gpib_info();
		timeout = s + 5;
    11fe:	80 91 13 05 	lds	r24, 0x0513
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	05 96       	adiw	r24, 0x05	; 5
    1208:	9a 83       	std	Y+2, r25	; 0x02
    120a:	89 83       	std	Y+1, r24	; 0x01
    120c:	14 c0       	rjmp	.+40     	; 0x1236 <_gpib_write+0x480>
		while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
			if (s == timeout) {
    120e:	80 91 13 05 	lds	r24, 0x0513
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	9a 81       	ldd	r25, Y+2	; 0x02
    121a:	28 17       	cp	r18, r24
    121c:	39 07       	cpc	r19, r25
    121e:	59 f4       	brne	.+22     	; 0x1236 <_gpib_write+0x480>
				uart_puts("\n\rError: NRFD timeout\n\r");
    1220:	8e ea       	ldi	r24, 0xAE	; 174
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>
				return 0xff;
    1228:	8f ef       	ldi	r24, 0xFF	; 255
    122a:	c5 57       	subi	r28, 0x75	; 117
    122c:	df 4f       	sbci	r29, 0xFF	; 255
    122e:	88 83       	st	Y, r24
    1230:	cb 58       	subi	r28, 0x8B	; 139
    1232:	d0 40       	sbci	r29, 0x00	; 0
    1234:	a2 c0       	rjmp	.+324    	; 0x137a <_gpib_write+0x5c4>
		//uart_puts("1");
		release_bit(DDRD, PORTD, G_NRFD);
#ifdef WITH_TIMEOUT
		//gpib_info();
		timeout = s + 5;
		while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
    1236:	e0 e3       	ldi	r30, 0x30	; 48
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	88 70       	andi	r24, 0x08	; 8
    1242:	90 70       	andi	r25, 0x00	; 0
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	49 f4       	brne	.+18     	; 0x125a <_gpib_write+0x4a4>
    1248:	80 91 13 05 	lds	r24, 0x0513
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	9a 81       	ldd	r25, Y+2	; 0x02
    1254:	82 17       	cp	r24, r18
    1256:	93 07       	cpc	r25, r19
    1258:	d4 f6       	brge	.-76     	; 0x120e <_gpib_write+0x458>
#else
		loop_until_bit_is_set(PIND,G_NRFD);
#endif

		// assign EOI during transmission of only last byte
		if ((i == length - 1) && !attention) {
    125a:	fe 01       	movw	r30, r28
    125c:	e8 57       	subi	r30, 0x78	; 120
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	80 81       	ld	r24, Z
    1262:	91 81       	ldd	r25, Z+1	; 0x01
    1264:	9c 01       	movw	r18, r24
    1266:	21 50       	subi	r18, 0x01	; 1
    1268:	30 40       	sbci	r19, 0x00	; 0
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	9c 81       	ldd	r25, Y+4	; 0x04
    126e:	28 17       	cp	r18, r24
    1270:	39 07       	cpc	r19, r25
    1272:	d9 f4       	brne	.+54     	; 0x12aa <_gpib_write+0x4f4>
    1274:	fe 01       	movw	r30, r28
    1276:	e6 57       	subi	r30, 0x76	; 118
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	80 81       	ld	r24, Z
    127c:	88 23       	and	r24, r24
    127e:	a9 f4       	brne	.+42     	; 0x12aa <_gpib_write+0x4f4>
			//uart_puts("\n\rE\n\r");
			assign_bit(DDRD, PORTD, G_EOI);
    1280:	a2 e3       	ldi	r26, 0x32	; 50
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e2 e3       	ldi	r30, 0x32	; 50
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	8f 7e       	andi	r24, 0xEF	; 239
    128c:	8c 93       	st	X, r24
    128e:	a1 e3       	ldi	r26, 0x31	; 49
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e1 e3       	ldi	r30, 0x31	; 49
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	80 61       	ori	r24, 0x10	; 16
    129a:	8c 93       	st	X, r24
    129c:	a2 e3       	ldi	r26, 0x32	; 50
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e2 e3       	ldi	r30, 0x32	; 50
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	8f 7e       	andi	r24, 0xEF	; 239
    12a8:	8c 93       	st	X, r24
		}

		// assign DAV, data valid for listeners
		assign_bit(DDRD, PORTD, G_DAV);
    12aa:	a2 e3       	ldi	r26, 0x32	; 50
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e2 e3       	ldi	r30, 0x32	; 50
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	8b 7f       	andi	r24, 0xFB	; 251
    12b6:	8c 93       	st	X, r24
    12b8:	a1 e3       	ldi	r26, 0x31	; 49
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e1 e3       	ldi	r30, 0x31	; 49
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	84 60       	ori	r24, 0x04	; 4
    12c4:	8c 93       	st	X, r24
    12c6:	a2 e3       	ldi	r26, 0x32	; 50
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e2 e3       	ldi	r30, 0x32	; 50
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	8b 7f       	andi	r24, 0xFB	; 251
    12d2:	8c 93       	st	X, r24

		// wait for NDAC release
		//uart_puts("2");
		release_bit(DDRD, PORTD, G_NDAC);
    12d4:	a1 e3       	ldi	r26, 0x31	; 49
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e1 e3       	ldi	r30, 0x31	; 49
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	8f 7d       	andi	r24, 0xDF	; 223
    12e0:	8c 93       	st	X, r24
    12e2:	a2 e3       	ldi	r26, 0x32	; 50
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e2 e3       	ldi	r30, 0x32	; 50
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	80 62       	ori	r24, 0x20	; 32
    12ee:	8c 93       	st	X, r24
		loop_until_bit_is_set(PIND, G_NDAC);
    12f0:	e0 e3       	ldi	r30, 0x30	; 48
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	80 72       	andi	r24, 0x20	; 32
    12fc:	90 70       	andi	r25, 0x00	; 0
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	b9 f3       	breq	.-18     	; 0x12f0 <_gpib_write+0x53a>

		// release DAV, data not valid anymore
		release_bit(DDRD, PORTD, G_DAV);
    1302:	a1 e3       	ldi	r26, 0x31	; 49
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e1 e3       	ldi	r30, 0x31	; 49
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	8b 7f       	andi	r24, 0xFB	; 251
    130e:	8c 93       	st	X, r24
    1310:	a2 e3       	ldi	r26, 0x32	; 50
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e2 e3       	ldi	r30, 0x32	; 50
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	84 60       	ori	r24, 0x04	; 4
    131c:	8c 93       	st	X, r24

		// reset Port to all input
		DDRA = 0x00;
    131e:	ea e3       	ldi	r30, 0x3A	; 58
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	10 82       	st	Z, r1
	release_bit(DDRD, PORTD, G_NRFD);

	// bytes[0] = 'a'
	// bytes[1] = 'b'
	// length = 2
	for (i = 0; i < length; i++) {
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	9c 81       	ldd	r25, Y+4	; 0x04
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	9c 83       	std	Y+4, r25	; 0x04
    132c:	8b 83       	std	Y+3, r24	; 0x03
    132e:	fe 01       	movw	r30, r28
    1330:	e8 57       	subi	r30, 0x78	; 120
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	2b 81       	ldd	r18, Y+3	; 0x03
    1336:	3c 81       	ldd	r19, Y+4	; 0x04
    1338:	80 81       	ld	r24, Z
    133a:	91 81       	ldd	r25, Z+1	; 0x01
    133c:	28 17       	cp	r18, r24
    133e:	39 07       	cpc	r19, r25
    1340:	0c f4       	brge	.+2      	; 0x1344 <_gpib_write+0x58e>
    1342:	b0 cd       	rjmp	.-1184   	; 0xea4 <_gpib_write+0xee>
		DDRA = 0x00;

		//uart_puts("3\r\n");
	}

	if (attention) {
    1344:	fe 01       	movw	r30, r28
    1346:	e6 57       	subi	r30, 0x76	; 118
    1348:	ff 4f       	sbci	r31, 0xFF	; 255
    134a:	80 81       	ld	r24, Z
    134c:	88 23       	and	r24, r24
    134e:	71 f0       	breq	.+28     	; 0x136c <_gpib_write+0x5b6>
		// assign ATN for commands
		release_bit(DDRD, PORTD, G_ATN);
    1350:	a1 e3       	ldi	r26, 0x31	; 49
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e1 e3       	ldi	r30, 0x31	; 49
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	8f 77       	andi	r24, 0x7F	; 127
    135c:	8c 93       	st	X, r24
    135e:	a2 e3       	ldi	r26, 0x32	; 50
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e2 e3       	ldi	r30, 0x32	; 50
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	80 68       	ori	r24, 0x80	; 128
    136a:	8c 93       	st	X, r24
	}

	// clear talk state.Controller does not talk anymore.
	controller.talks = 0;
    136c:	10 92 a7 03 	sts	0x03A7, r1

	return 0x00;
    1370:	c5 57       	subi	r28, 0x75	; 117
    1372:	df 4f       	sbci	r29, 0xFF	; 255
    1374:	18 82       	st	Y, r1
    1376:	cb 58       	subi	r28, 0x8B	; 139
    1378:	d0 40       	sbci	r29, 0x00	; 0
    137a:	c5 57       	subi	r28, 0x75	; 117
    137c:	df 4f       	sbci	r29, 0xFF	; 255
    137e:	88 81       	ld	r24, Y
    1380:	cb 58       	subi	r28, 0x8B	; 139
    1382:	d0 40       	sbci	r29, 0x00	; 0
}
    1384:	c5 57       	subi	r28, 0x75	; 117
    1386:	df 4f       	sbci	r29, 0xFF	; 255
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <gpib_info>:

/**
 * print some useful info about bus state (for example value of handshake pins)
 */
void gpib_info(void) {
    1398:	af 92       	push	r10
    139a:	bf 92       	push	r11
    139c:	cf 92       	push	r12
    139e:	df 92       	push	r13
    13a0:	ef 92       	push	r14
    13a2:	ff 92       	push	r15
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	2a 97       	sbiw	r28, 0x0a	; 10
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	de bf       	out	0x3e, r29	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	cd bf       	out	0x3d, r28	; 61
	uchar dav, nrfd, ndac, eoi, atn, srq, ifc, ren;
	extern uchar buf[80];

	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    13bc:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <gpib_get_partner_pad>
    13c0:	08 2f       	mov	r16, r24
    13c2:	10 e0       	ldi	r17, 0x00	; 0
    13c4:	0e 94 83 0c 	call	0x1906	; 0x1906 <gpib_get_partner_sad>
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	8d b7       	in	r24, 0x3d	; 61
    13ce:	9e b7       	in	r25, 0x3e	; 62
    13d0:	08 97       	sbiw	r24, 0x08	; 8
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	9e bf       	out	0x3e, r25	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	8d bf       	out	0x3d, r24	; 61
    13dc:	ed b7       	in	r30, 0x3d	; 61
    13de:	fe b7       	in	r31, 0x3e	; 62
    13e0:	31 96       	adiw	r30, 0x01	; 1
    13e2:	82 ec       	ldi	r24, 0xC2	; 194
    13e4:	94 e0       	ldi	r25, 0x04	; 4
    13e6:	91 83       	std	Z+1, r25	; 0x01
    13e8:	80 83       	st	Z, r24
    13ea:	86 ec       	ldi	r24, 0xC6	; 198
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	93 83       	std	Z+3, r25	; 0x03
    13f0:	82 83       	std	Z+2, r24	; 0x02
    13f2:	15 83       	std	Z+5, r17	; 0x05
    13f4:	04 83       	std	Z+4, r16	; 0x04
    13f6:	37 83       	std	Z+7, r19	; 0x07
    13f8:	26 83       	std	Z+6, r18	; 0x06
    13fa:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    13fe:	8d b7       	in	r24, 0x3d	; 61
    1400:	9e b7       	in	r25, 0x3e	; 62
    1402:	08 96       	adiw	r24, 0x08	; 8
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	9e bf       	out	0x3e, r25	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	8d bf       	out	0x3d, r24	; 61
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);
    140e:	82 ec       	ldi	r24, 0xC2	; 194
    1410:	94 e0       	ldi	r25, 0x04	; 4
    1412:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>

	uart_puts("Partner list\n\r");
    1416:	84 ef       	ldi	r24, 0xF4	; 244
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>
	for (int i = 0; i < MAX_PARTNER; i++) {
    141e:	1a 82       	std	Y+2, r1	; 0x02
    1420:	19 82       	std	Y+1, r1	; 0x01
    1422:	49 c0       	rjmp	.+146    	; 0x14b6 <gpib_info+0x11e>
		if (controller.partners[i].primary != ADDRESS_NOT_SET) {
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	fc 01       	movw	r30, r24
    142e:	e7 55       	subi	r30, 0x57	; 87
    1430:	fc 4f       	sbci	r31, 0xFC	; 252
    1432:	80 81       	ld	r24, Z
    1434:	8f 3f       	cpi	r24, 0xFF	; 255
    1436:	d1 f1       	breq	.+116    	; 0x14ac <gpib_info+0x114>
			sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	9a 81       	ldd	r25, Y+2	; 0x02
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	fc 01       	movw	r30, r24
    1442:	e7 55       	subi	r30, 0x57	; 87
    1444:	fc 4f       	sbci	r31, 0xFC	; 252
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	9a 81       	ldd	r25, Y+2	; 0x02
    1450:	03 96       	adiw	r24, 0x03	; 3
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	fc 01       	movw	r30, r24
    1458:	ec 55       	subi	r30, 0x5C	; 92
    145a:	fc 4f       	sbci	r31, 0xFC	; 252
    145c:	80 81       	ld	r24, Z
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	8d b7       	in	r24, 0x3d	; 61
    1464:	9e b7       	in	r25, 0x3e	; 62
    1466:	08 97       	sbiw	r24, 0x08	; 8
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	9e bf       	out	0x3e, r25	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	8d bf       	out	0x3d, r24	; 61
    1472:	ed b7       	in	r30, 0x3d	; 61
    1474:	fe b7       	in	r31, 0x3e	; 62
    1476:	31 96       	adiw	r30, 0x01	; 1
    1478:	82 ec       	ldi	r24, 0xC2	; 194
    147a:	94 e0       	ldi	r25, 0x04	; 4
    147c:	91 83       	std	Z+1, r25	; 0x01
    147e:	80 83       	st	Z, r24
    1480:	86 ec       	ldi	r24, 0xC6	; 198
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	93 83       	std	Z+3, r25	; 0x03
    1486:	82 83       	std	Z+2, r24	; 0x02
    1488:	55 83       	std	Z+5, r21	; 0x05
    148a:	44 83       	std	Z+4, r20	; 0x04
    148c:	37 83       	std	Z+7, r19	; 0x07
    148e:	26 83       	std	Z+6, r18	; 0x06
    1490:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    1494:	8d b7       	in	r24, 0x3d	; 61
    1496:	9e b7       	in	r25, 0x3e	; 62
    1498:	08 96       	adiw	r24, 0x08	; 8
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	9e bf       	out	0x3e, r25	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	8d bf       	out	0x3d, r24	; 61
					controller.partners[i].primary,
					controller.partners[i].secondary);
			uart_puts(buf);
    14a4:	82 ec       	ldi	r24, 0xC2	; 194
    14a6:	94 e0       	ldi	r25, 0x04	; 4
    14a8:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>
	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);

	uart_puts("Partner list\n\r");
	for (int i = 0; i < MAX_PARTNER; i++) {
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	01 96       	adiw	r24, 0x01	; 1
    14b2:	9a 83       	std	Y+2, r25	; 0x02
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	85 30       	cpi	r24, 0x05	; 5
    14bc:	91 05       	cpc	r25, r1
    14be:	0c f4       	brge	.+2      	; 0x14c2 <gpib_info+0x12a>
    14c0:	b1 cf       	rjmp	.-158    	; 0x1424 <gpib_info+0x8c>
					controller.partners[i].secondary);
			uart_puts(buf);
		}
	}

	dav = bit_is_set(PIND, G_DAV);
    14c2:	e0 e3       	ldi	r30, 0x30	; 48
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	84 70       	andi	r24, 0x04	; 4
    14ca:	8a 87       	std	Y+10, r24	; 0x0a
	nrfd = bit_is_set(PIND, G_NRFD);
    14cc:	e0 e3       	ldi	r30, 0x30	; 48
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	88 70       	andi	r24, 0x08	; 8
    14d4:	89 87       	std	Y+9, r24	; 0x09
	ndac = bit_is_set(PIND, G_NDAC);
    14d6:	e0 e3       	ldi	r30, 0x30	; 48
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	80 72       	andi	r24, 0x20	; 32
    14de:	88 87       	std	Y+8, r24	; 0x08
	eoi = bit_is_set(PIND, G_EOI);
    14e0:	e0 e3       	ldi	r30, 0x30	; 48
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	80 71       	andi	r24, 0x10	; 16
    14e8:	8f 83       	std	Y+7, r24	; 0x07
	atn = bit_is_set(PIND, G_ATN);
    14ea:	e0 e3       	ldi	r30, 0x30	; 48
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	80 78       	andi	r24, 0x80	; 128
    14f2:	8e 83       	std	Y+6, r24	; 0x06
	srq = bit_is_set(PIND, G_SRQ);
    14f4:	e0 e3       	ldi	r30, 0x30	; 48
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	80 74       	andi	r24, 0x40	; 64
    14fc:	8d 83       	std	Y+5, r24	; 0x05
	ifc = bit_is_set(PINB, G_IFC);
    14fe:	e6 e3       	ldi	r30, 0x36	; 54
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	81 70       	andi	r24, 0x01	; 1
    1506:	8c 83       	std	Y+4, r24	; 0x04
	ren = bit_is_set(PINB, G_REN);
    1508:	e6 e3       	ldi	r30, 0x36	; 54
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	82 70       	andi	r24, 0x02	; 2
    1510:	8b 83       	std	Y+3, r24	; 0x03
	//d = PINA;
	//di = d ^ 0xff;
	if (dav == 0x00)
    1512:	8a 85       	ldd	r24, Y+10	; 0x0a
    1514:	88 23       	and	r24, r24
    1516:	19 f4       	brne	.+6      	; 0x151e <gpib_info+0x186>
		dav = '0';
    1518:	80 e3       	ldi	r24, 0x30	; 48
    151a:	8a 87       	std	Y+10, r24	; 0x0a
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <gpib_info+0x18a>
	else
		dav = '1';
    151e:	81 e3       	ldi	r24, 0x31	; 49
    1520:	8a 87       	std	Y+10, r24	; 0x0a
	if (nrfd == 0x00)
    1522:	89 85       	ldd	r24, Y+9	; 0x09
    1524:	88 23       	and	r24, r24
    1526:	19 f4       	brne	.+6      	; 0x152e <gpib_info+0x196>
		nrfd = '0';
    1528:	80 e3       	ldi	r24, 0x30	; 48
    152a:	89 87       	std	Y+9, r24	; 0x09
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <gpib_info+0x19a>
	else
		nrfd = '1';
    152e:	81 e3       	ldi	r24, 0x31	; 49
    1530:	89 87       	std	Y+9, r24	; 0x09
	if (ndac == 0x00)
    1532:	88 85       	ldd	r24, Y+8	; 0x08
    1534:	88 23       	and	r24, r24
    1536:	19 f4       	brne	.+6      	; 0x153e <gpib_info+0x1a6>
		ndac = '0';
    1538:	80 e3       	ldi	r24, 0x30	; 48
    153a:	88 87       	std	Y+8, r24	; 0x08
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <gpib_info+0x1aa>
	else
		ndac = '1';
    153e:	81 e3       	ldi	r24, 0x31	; 49
    1540:	88 87       	std	Y+8, r24	; 0x08
	if (eoi == 0x00)
    1542:	8f 81       	ldd	r24, Y+7	; 0x07
    1544:	88 23       	and	r24, r24
    1546:	19 f4       	brne	.+6      	; 0x154e <gpib_info+0x1b6>
		eoi = '0';
    1548:	80 e3       	ldi	r24, 0x30	; 48
    154a:	8f 83       	std	Y+7, r24	; 0x07
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <gpib_info+0x1ba>
	else
		eoi = '1';
    154e:	81 e3       	ldi	r24, 0x31	; 49
    1550:	8f 83       	std	Y+7, r24	; 0x07
	if (atn == 0x00)
    1552:	8e 81       	ldd	r24, Y+6	; 0x06
    1554:	88 23       	and	r24, r24
    1556:	19 f4       	brne	.+6      	; 0x155e <gpib_info+0x1c6>
		atn = '0';
    1558:	80 e3       	ldi	r24, 0x30	; 48
    155a:	8e 83       	std	Y+6, r24	; 0x06
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <gpib_info+0x1ca>
	else
		atn = '1';
    155e:	81 e3       	ldi	r24, 0x31	; 49
    1560:	8e 83       	std	Y+6, r24	; 0x06
	if (srq == 0x00)
    1562:	8d 81       	ldd	r24, Y+5	; 0x05
    1564:	88 23       	and	r24, r24
    1566:	19 f4       	brne	.+6      	; 0x156e <gpib_info+0x1d6>
		srq = '0';
    1568:	80 e3       	ldi	r24, 0x30	; 48
    156a:	8d 83       	std	Y+5, r24	; 0x05
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <gpib_info+0x1da>
	else
		srq = '1';
    156e:	81 e3       	ldi	r24, 0x31	; 49
    1570:	8d 83       	std	Y+5, r24	; 0x05
	if (ifc == 0x00)
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	88 23       	and	r24, r24
    1576:	19 f4       	brne	.+6      	; 0x157e <gpib_info+0x1e6>
		ifc = '0';
    1578:	80 e3       	ldi	r24, 0x30	; 48
    157a:	8c 83       	std	Y+4, r24	; 0x04
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <gpib_info+0x1ea>
	else
		ifc = '1';
    157e:	81 e3       	ldi	r24, 0x31	; 49
    1580:	8c 83       	std	Y+4, r24	; 0x04
	if (ren == 0x00)
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	88 23       	and	r24, r24
    1586:	19 f4       	brne	.+6      	; 0x158e <gpib_info+0x1f6>
		ren = '0';
    1588:	80 e3       	ldi	r24, 0x30	; 48
    158a:	8b 83       	std	Y+3, r24	; 0x03
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <gpib_info+0x1fa>
	else
		ren = '1';
    158e:	81 e3       	ldi	r24, 0x31	; 49
    1590:	8b 83       	std	Y+3, r24	; 0x03

	sprintf(buf,
    1592:	8a 85       	ldd	r24, Y+10	; 0x0a
    1594:	a8 2e       	mov	r10, r24
    1596:	bb 24       	eor	r11, r11
    1598:	89 85       	ldd	r24, Y+9	; 0x09
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	88 85       	ldd	r24, Y+8	; 0x08
    15a0:	48 2f       	mov	r20, r24
    15a2:	50 e0       	ldi	r21, 0x00	; 0
    15a4:	8f 81       	ldd	r24, Y+7	; 0x07
    15a6:	68 2f       	mov	r22, r24
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	8c 81       	ldd	r24, Y+4	; 0x04
    15ac:	a8 2f       	mov	r26, r24
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	08 2f       	mov	r16, r24
    15b4:	10 e0       	ldi	r17, 0x00	; 0
    15b6:	8e 81       	ldd	r24, Y+6	; 0x06
    15b8:	e8 2e       	mov	r14, r24
    15ba:	ff 24       	eor	r15, r15
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	c8 2e       	mov	r12, r24
    15c0:	dd 24       	eor	r13, r13
    15c2:	8d b7       	in	r24, 0x3d	; 61
    15c4:	9e b7       	in	r25, 0x3e	; 62
    15c6:	44 97       	sbiw	r24, 0x14	; 20
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	9e bf       	out	0x3e, r25	; 62
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	8d bf       	out	0x3d, r24	; 61
    15d2:	ed b7       	in	r30, 0x3d	; 61
    15d4:	fe b7       	in	r31, 0x3e	; 62
    15d6:	31 96       	adiw	r30, 0x01	; 1
    15d8:	82 ec       	ldi	r24, 0xC2	; 194
    15da:	94 e0       	ldi	r25, 0x04	; 4
    15dc:	91 83       	std	Z+1, r25	; 0x01
    15de:	80 83       	st	Z, r24
    15e0:	83 e0       	ldi	r24, 0x03	; 3
    15e2:	91 e0       	ldi	r25, 0x01	; 1
    15e4:	93 83       	std	Z+3, r25	; 0x03
    15e6:	82 83       	std	Z+2, r24	; 0x02
    15e8:	b5 82       	std	Z+5, r11	; 0x05
    15ea:	a4 82       	std	Z+4, r10	; 0x04
    15ec:	37 83       	std	Z+7, r19	; 0x07
    15ee:	26 83       	std	Z+6, r18	; 0x06
    15f0:	51 87       	std	Z+9, r21	; 0x09
    15f2:	40 87       	std	Z+8, r20	; 0x08
    15f4:	73 87       	std	Z+11, r23	; 0x0b
    15f6:	62 87       	std	Z+10, r22	; 0x0a
    15f8:	b5 87       	std	Z+13, r27	; 0x0d
    15fa:	a4 87       	std	Z+12, r26	; 0x0c
    15fc:	17 87       	std	Z+15, r17	; 0x0f
    15fe:	06 87       	std	Z+14, r16	; 0x0e
    1600:	f1 8a       	std	Z+17, r15	; 0x11
    1602:	e0 8a       	std	Z+16, r14	; 0x10
    1604:	d3 8a       	std	Z+19, r13	; 0x13
    1606:	c2 8a       	std	Z+18, r12	; 0x12
    1608:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    160c:	8d b7       	in	r24, 0x3d	; 61
    160e:	9e b7       	in	r25, 0x3e	; 62
    1610:	44 96       	adiw	r24, 0x14	; 20
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	f8 94       	cli
    1616:	9e bf       	out	0x3e, r25	; 62
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	8d bf       	out	0x3d, r24	; 61
			"dav=%c,nrfd=%c,ndac=%c, eoi=%c, ifc=%c,ren=%c,atn=%c,srq=%c\n\r",
			dav, nrfd, ndac, eoi, ifc, ren, atn, srq);
	uart_puts(buf);
    161c:	82 ec       	ldi	r24, 0xC2	; 194
    161e:	94 e0       	ldi	r25, 0x04	; 4
    1620:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>
}
    1624:	2a 96       	adiw	r28, 0x0a	; 10
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	ff 90       	pop	r15
    163a:	ef 90       	pop	r14
    163c:	df 90       	pop	r13
    163e:	cf 90       	pop	r12
    1640:	bf 90       	pop	r11
    1642:	af 90       	pop	r10
    1644:	08 95       	ret

00001646 <gpib_serial_poll>:
 * I haven't looked how a device with two byte address behaves.
 *
 * Secondary/primary is returned in inout parameters
 * If any emitter is found, return value is != 0.
 */
uchar gpib_serial_poll(uint8_t *primary_v, uint8_t* secondary_v) {
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	2c 97       	sbiw	r28, 0x0c	; 12
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	9a 87       	std	Y+10, r25	; 0x0a
    165c:	89 87       	std	Y+9, r24	; 0x09
    165e:	7c 87       	std	Y+12, r23	; 0x0c
    1660:	6b 87       	std	Y+11, r22	; 0x0b
	uchar b, e;
	uchar primary = 0, secondary = 0, found = 0, foundPhysical =
    1662:	1e 82       	std	Y+6, r1	; 0x06
    1664:	1d 82       	std	Y+5, r1	; 0x05
    1666:	1c 82       	std	Y+4, r1	; 0x04
	ADDRESS_NOT_SET;
    1668:	8f ef       	ldi	r24, 0xFF	; 255
    166a:	8b 83       	std	Y+3, r24	; 0x03
	int i;

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	cmd_buf[0] = G_CMD_UNT;
    166c:	8f e5       	ldi	r24, 0x5F	; 95
    166e:	80 93 5e 04 	sts	0x045E, r24
	gpib_cmd(cmd_buf, 1);
    1672:	8e e5       	ldi	r24, 0x5E	; 94
    1674:	94 e0       	ldi	r25, 0x04	; 4
    1676:	61 e0       	ldi	r22, 0x01	; 1
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	cmd_buf[0] = G_CMD_UNL;
    167e:	8f e3       	ldi	r24, 0x3F	; 63
    1680:	80 93 5e 04 	sts	0x045E, r24
	gpib_cmd(cmd_buf, 1);
    1684:	8e e5       	ldi	r24, 0x5E	; 94
    1686:	94 e0       	ldi	r25, 0x04	; 4
    1688:	61 e0       	ldi	r22, 0x01	; 1
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>

	// serial poll enable
	// effect: all devices will send status byte instead of normal data when addressed
	// as talker
	//uart_puts("before SPE\r\n");
	cmd_buf[0] = G_CMD_SPE;
    1690:	88 e1       	ldi	r24, 0x18	; 24
    1692:	80 93 5e 04 	sts	0x045E, r24
	gpib_cmd(cmd_buf, 1);
    1696:	8e e5       	ldi	r24, 0x5E	; 94
    1698:	94 e0       	ldi	r25, 0x04	; 4
    169a:	61 e0       	ldi	r22, 0x01	; 1
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    16a2:	1a 82       	std	Y+2, r1	; 0x02
    16a4:	19 82       	std	Y+1, r1	; 0x01
    16a6:	de c0       	rjmp	.+444    	; 0x1864 <gpib_serial_poll+0x21e>
			i++) {

		// set partner to talker mode
		primary = address2TalkerAddress(controller.partners[i].primary);
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	9a 81       	ldd	r25, Y+2	; 0x02
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	fc 01       	movw	r30, r24
    16b2:	e7 55       	subi	r30, 0x57	; 87
    16b4:	fc 4f       	sbci	r31, 0xFC	; 252
    16b6:	80 81       	ld	r24, Z
    16b8:	80 5c       	subi	r24, 0xC0	; 192
    16ba:	8e 83       	std	Y+6, r24	; 0x06
		secondary = secondaryAdressToAdressByte(
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	9a 81       	ldd	r25, Y+2	; 0x02
    16c0:	03 96       	adiw	r24, 0x03	; 3
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	fc 01       	movw	r30, r24
    16c8:	ec 55       	subi	r30, 0x5C	; 92
    16ca:	fc 4f       	sbci	r31, 0xFC	; 252
    16cc:	80 81       	ld	r24, Z
    16ce:	80 66       	ori	r24, 0x60	; 96
    16d0:	8d 83       	std	Y+5, r24	; 0x05
				controller.partners[i].secondary);

		cmd_buf[0] = primary;
    16d2:	8e 81       	ldd	r24, Y+6	; 0x06
    16d4:	80 93 5e 04 	sts	0x045E, r24
		//uart_puts("before talker address write\r\n");
		gpib_cmd(cmd_buf, 1);
    16d8:	8e e5       	ldi	r24, 0x5E	; 94
    16da:	94 e0       	ldi	r25, 0x04	; 4
    16dc:	61 e0       	ldi	r22, 0x01	; 1
    16de:	70 e0       	ldi	r23, 0x00	; 0
    16e0:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
		//uart_puts("after talker address write\r\n");
		// handle secondary address if required
		if (secondary != ADDRESS_NOT_SET) {
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	8f 3f       	cpi	r24, 0xFF	; 255
    16e8:	49 f0       	breq	.+18     	; 0x16fc <gpib_serial_poll+0xb6>
			cmd_buf[0] = secondary;
    16ea:	8d 81       	ldd	r24, Y+5	; 0x05
    16ec:	80 93 5e 04 	sts	0x045E, r24
			//uart_puts("before talker address write\r\n");
			gpib_cmd(cmd_buf, 1);
    16f0:	8e e5       	ldi	r24, 0x5E	; 94
    16f2:	94 e0       	ldi	r25, 0x04	; 4
    16f4:	61 e0       	ldi	r22, 0x01	; 1
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
		}

		// now receive data
		//uart_puts("before status byte receive\r\n");
		e = gpib_receive(&b);
    16fc:	ce 01       	movw	r24, r28
    16fe:	08 96       	adiw	r24, 0x08	; 8
    1700:	0e 94 28 05 	call	0xa50	; 0xa50 <gpib_receive>
    1704:	8f 83       	std	Y+7, r24	; 0x07
		//uart_puts("after status byte receive\r\n");
		// status byte is now in b

		if (secondary != ADDRESS_NOT_SET) {
    1706:	8d 81       	ldd	r24, Y+5	; 0x05
    1708:	8f 3f       	cpi	r24, 0xFF	; 255
    170a:	81 f1       	breq	.+96     	; 0x176c <gpib_serial_poll+0x126>
			sprintf((char*) cmd_buf,
    170c:	8e 81       	ldd	r24, Y+6	; 0x06
    170e:	88 2f       	mov	r24, r24
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	bc 01       	movw	r22, r24
    1714:	60 54       	subi	r22, 0x40	; 64
    1716:	70 40       	sbci	r23, 0x00	; 0
    1718:	8d 81       	ldd	r24, Y+5	; 0x05
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	88 85       	ldd	r24, Y+8	; 0x08
    1720:	48 2f       	mov	r20, r24
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	8d b7       	in	r24, 0x3d	; 61
    1726:	9e b7       	in	r25, 0x3e	; 62
    1728:	0a 97       	sbiw	r24, 0x0a	; 10
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	9e bf       	out	0x3e, r25	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	8d bf       	out	0x3d, r24	; 61
    1734:	ed b7       	in	r30, 0x3d	; 61
    1736:	fe b7       	in	r31, 0x3e	; 62
    1738:	31 96       	adiw	r30, 0x01	; 1
    173a:	8e e5       	ldi	r24, 0x5E	; 94
    173c:	94 e0       	ldi	r25, 0x04	; 4
    173e:	91 83       	std	Z+1, r25	; 0x01
    1740:	80 83       	st	Z, r24
    1742:	81 e4       	ldi	r24, 0x41	; 65
    1744:	91 e0       	ldi	r25, 0x01	; 1
    1746:	93 83       	std	Z+3, r25	; 0x03
    1748:	82 83       	std	Z+2, r24	; 0x02
    174a:	75 83       	std	Z+5, r23	; 0x05
    174c:	64 83       	std	Z+4, r22	; 0x04
    174e:	37 83       	std	Z+7, r19	; 0x07
    1750:	26 83       	std	Z+6, r18	; 0x06
    1752:	51 87       	std	Z+9, r21	; 0x09
    1754:	40 87       	std	Z+8, r20	; 0x08
    1756:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    175a:	8d b7       	in	r24, 0x3d	; 61
    175c:	9e b7       	in	r25, 0x3e	; 62
    175e:	0a 96       	adiw	r24, 0x0a	; 10
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	9e bf       	out	0x3e, r25	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	8d bf       	out	0x3d, r24	; 61
    176a:	2a c0       	rjmp	.+84     	; 0x17c0 <gpib_serial_poll+0x17a>
					"Status byte from device primary=0x%02x,secondary=0x%02x (physical) = 0x%02x\n\r",
					TalkerAddress2Address(primary), secondary, b);
		} else {
			sprintf((char*) cmd_buf,
    176c:	8e 81       	ldd	r24, Y+6	; 0x06
    176e:	88 2f       	mov	r24, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	9c 01       	movw	r18, r24
    1774:	20 54       	subi	r18, 0x40	; 64
    1776:	30 40       	sbci	r19, 0x00	; 0
    1778:	88 85       	ldd	r24, Y+8	; 0x08
    177a:	48 2f       	mov	r20, r24
    177c:	50 e0       	ldi	r21, 0x00	; 0
    177e:	8d b7       	in	r24, 0x3d	; 61
    1780:	9e b7       	in	r25, 0x3e	; 62
    1782:	08 97       	sbiw	r24, 0x08	; 8
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	9e bf       	out	0x3e, r25	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	8d bf       	out	0x3d, r24	; 61
    178e:	ed b7       	in	r30, 0x3d	; 61
    1790:	fe b7       	in	r31, 0x3e	; 62
    1792:	31 96       	adiw	r30, 0x01	; 1
    1794:	8e e5       	ldi	r24, 0x5E	; 94
    1796:	94 e0       	ldi	r25, 0x04	; 4
    1798:	91 83       	std	Z+1, r25	; 0x01
    179a:	80 83       	st	Z, r24
    179c:	8f e8       	ldi	r24, 0x8F	; 143
    179e:	91 e0       	ldi	r25, 0x01	; 1
    17a0:	93 83       	std	Z+3, r25	; 0x03
    17a2:	82 83       	std	Z+2, r24	; 0x02
    17a4:	35 83       	std	Z+5, r19	; 0x05
    17a6:	24 83       	std	Z+4, r18	; 0x04
    17a8:	57 83       	std	Z+7, r21	; 0x07
    17aa:	46 83       	std	Z+6, r20	; 0x06
    17ac:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    17b0:	8d b7       	in	r24, 0x3d	; 61
    17b2:	9e b7       	in	r25, 0x3e	; 62
    17b4:	08 96       	adiw	r24, 0x08	; 8
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	9e bf       	out	0x3e, r25	; 62
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	8d bf       	out	0x3d, r24	; 61
					"Status byte from device primary=0x%02x (physical) = 0x%02x\n\r",
					TalkerAddress2Address(primary), b);
		}
		uart_puts((char*) cmd_buf);
    17c0:	8e e5       	ldi	r24, 0x5E	; 94
    17c2:	94 e0       	ldi	r25, 0x04	; 4
    17c4:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>

		// send UNT and UNL commands (unlisten and untalk)
		// effect: all talker stop talking and all listeners stop listening
		cmd_buf[0] = G_CMD_UNT;
    17c8:	8f e5       	ldi	r24, 0x5F	; 95
    17ca:	80 93 5e 04 	sts	0x045E, r24
		gpib_cmd(cmd_buf, 1);
    17ce:	8e e5       	ldi	r24, 0x5E	; 94
    17d0:	94 e0       	ldi	r25, 0x04	; 4
    17d2:	61 e0       	ldi	r22, 0x01	; 1
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
		cmd_buf[0] = G_CMD_UNL;
    17da:	8f e3       	ldi	r24, 0x3F	; 63
    17dc:	80 93 5e 04 	sts	0x045E, r24
		gpib_cmd(cmd_buf, 1);
    17e0:	8e e5       	ldi	r24, 0x5E	; 94
    17e2:	94 e0       	ldi	r25, 0x04	; 4
    17e4:	61 e0       	ldi	r22, 0x01	; 1
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>

		if (b & (1 << 6)) {
    17ec:	88 85       	ldd	r24, Y+8	; 0x08
    17ee:	88 2f       	mov	r24, r24
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	80 74       	andi	r24, 0x40	; 64
    17f4:	90 70       	andi	r25, 0x00	; 0
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	81 f1       	breq	.+96     	; 0x185a <gpib_serial_poll+0x214>
			found = primary;
    17fa:	8e 81       	ldd	r24, Y+6	; 0x06
    17fc:	8c 83       	std	Y+4, r24	; 0x04
			foundPhysical = TalkerAddress2Address(found);
    17fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1800:	80 54       	subi	r24, 0x40	; 64
    1802:	8b 83       	std	Y+3, r24	; 0x03
			// bit 6 of status byte of SRQ emitter is 1
			// when reading status byte from emitter, he releases SRQ line (may also be tested here)
			sprintf((char*) cmd_buf,
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	48 2f       	mov	r20, r24
    180e:	50 e0       	ldi	r21, 0x00	; 0
    1810:	8d b7       	in	r24, 0x3d	; 61
    1812:	9e b7       	in	r25, 0x3e	; 62
    1814:	08 97       	sbiw	r24, 0x08	; 8
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	9e bf       	out	0x3e, r25	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	8d bf       	out	0x3d, r24	; 61
    1820:	ed b7       	in	r30, 0x3d	; 61
    1822:	fe b7       	in	r31, 0x3e	; 62
    1824:	31 96       	adiw	r30, 0x01	; 1
    1826:	8e e5       	ldi	r24, 0x5E	; 94
    1828:	94 e0       	ldi	r25, 0x04	; 4
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	80 83       	st	Z, r24
    182e:	8c ec       	ldi	r24, 0xCC	; 204
    1830:	91 e0       	ldi	r25, 0x01	; 1
    1832:	93 83       	std	Z+3, r25	; 0x03
    1834:	82 83       	std	Z+2, r24	; 0x02
    1836:	35 83       	std	Z+5, r19	; 0x05
    1838:	24 83       	std	Z+4, r18	; 0x04
    183a:	57 83       	std	Z+7, r21	; 0x07
    183c:	46 83       	std	Z+6, r20	; 0x06
    183e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    1842:	8d b7       	in	r24, 0x3d	; 61
    1844:	9e b7       	in	r25, 0x3e	; 62
    1846:	08 96       	adiw	r24, 0x08	; 8
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	9e bf       	out	0x3e, r25	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	8d bf       	out	0x3d, r24	; 61
					"SRQ emitter is device = 0x%02x (physical address), secondary = 0x%02x\n\r",
					foundPhysical, secondary);
			uart_puts((char*) cmd_buf);
    1852:	8e e5       	ldi	r24, 0x5E	; 94
    1854:	94 e0       	ldi	r25, 0x04	; 4
    1856:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>
	gpib_cmd(cmd_buf, 1);
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
			i++) {
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	9a 81       	ldd	r25, Y+2	; 0x02
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	9a 83       	std	Y+2, r25	; 0x02
    1862:	89 83       	std	Y+1, r24	; 0x01
	cmd_buf[0] = G_CMD_SPE;
	gpib_cmd(cmd_buf, 1);
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	9a 81       	ldd	r25, Y+2	; 0x02
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	fc 01       	movw	r30, r24
    186e:	e7 55       	subi	r30, 0x57	; 87
    1870:	fc 4f       	sbci	r31, 0xFC	; 252
    1872:	80 81       	ld	r24, Z
    1874:	8f 3f       	cpi	r24, 0xFF	; 255
    1876:	21 f0       	breq	.+8      	; 0x1880 <gpib_serial_poll+0x23a>
    1878:	8c 81       	ldd	r24, Y+4	; 0x04
    187a:	88 23       	and	r24, r24
    187c:	09 f4       	brne	.+2      	; 0x1880 <gpib_serial_poll+0x23a>
    187e:	14 cf       	rjmp	.-472    	; 0x16a8 <gpib_serial_poll+0x62>
		}
	}

	// serial poll disable
	// effect: all devices will return to normal behaviour as talker
	cmd_buf[0] = G_CMD_SPD;
    1880:	89 e1       	ldi	r24, 0x19	; 25
    1882:	80 93 5e 04 	sts	0x045E, r24
	//uart_puts("before SPD\r\n");
	gpib_cmd(cmd_buf, 1);
    1886:	8e e5       	ldi	r24, 0x5E	; 94
    1888:	94 e0       	ldi	r25, 0x04	; 4
    188a:	61 e0       	ldi	r22, 0x01	; 1
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	//uart_puts("after SPD\r\n");

	// "return" values determined
	*primary_v = primary;
    1892:	e9 85       	ldd	r30, Y+9	; 0x09
    1894:	fa 85       	ldd	r31, Y+10	; 0x0a
    1896:	8e 81       	ldd	r24, Y+6	; 0x06
    1898:	80 83       	st	Z, r24
	*secondary_v = secondary;
    189a:	eb 85       	ldd	r30, Y+11	; 0x0b
    189c:	fc 85       	ldd	r31, Y+12	; 0x0c
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	80 83       	st	Z, r24

	return found;
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    18a4:	2c 96       	adiw	r28, 0x0c	; 12
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <gpib_set_partner_address>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_address(uchar primary, uchar secondary) {
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <gpib_set_partner_address+0x6>
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	6a 83       	std	Y+2, r22	; 0x02
	controller.partner.primary = primary;
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	80 93 a5 03 	sts	0x03A5, r24
	controller.partner.secondary = secondary;
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	80 93 a6 03 	sts	0x03A6, r24
}
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <gpib_set_partner_secondary>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_secondary(uchar secondary) {
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	0f 92       	push	r0
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	89 83       	std	Y+1, r24	; 0x01
	controller.partner.secondary = secondary;
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	80 93 a6 03 	sts	0x03A6, r24
}
    18ec:	0f 90       	pop	r0
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <gpib_get_partner_pad>:

/**
 * Get primary address of device currently controlled.
 * \returns primary address Address of device.
 */
uchar gpib_get_partner_pad(void) {
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.primary;
    18fc:	80 91 a5 03 	lds	r24, 0x03A5
}
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <gpib_get_partner_sad>:

/**
 * Get secondary address of device currently controlled.
 * \returns secondary address Address of device.
 */
uchar gpib_get_partner_sad(void) {
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.secondary;
    190e:	80 91 a6 03 	lds	r24, 0x03A6
}
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <gpib_get_address>:

/**
 * Get controller address.
 * \returns address of controller.
 */
uchar gpib_get_address(void) {
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
	return controller.myaddress;
    1920:	80 91 a4 03 	lds	r24, 0x03A4
}
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	08 95       	ret

0000192a <gpib_set_flavour>:

void gpib_set_flavour(uchar flavour) {
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	0f 92       	push	r0
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	89 83       	std	Y+1, r24	; 0x01
	controller.flavour = flavour;
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	80 93 a8 03 	sts	0x03A8, r24
}
    193c:	0f 90       	pop	r0
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <gpib_get_flavour>:

uchar gpib_get_flavour(void) {
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
	return controller.flavour;
    194c:	80 91 a8 03 	lds	r24, 0x03A8
}
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <gpib_clear_partners>:

/**
 * Clear partners list
 */
void gpib_clear_partners() {
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	00 d0       	rcall	.+0      	; 0x195c <gpib_clear_partners+0x6>
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < MAX_PARTNER; i++) {
    1960:	1a 82       	std	Y+2, r1	; 0x02
    1962:	19 82       	std	Y+1, r1	; 0x01
    1964:	0e c0       	rjmp	.+28     	; 0x1982 <gpib_clear_partners+0x2c>
		controller.partners[i].primary = ADDRESS_NOT_SET;
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	9a 81       	ldd	r25, Y+2	; 0x02
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	fc 01       	movw	r30, r24
    1970:	e7 55       	subi	r30, 0x57	; 87
    1972:	fc 4f       	sbci	r31, 0xFC	; 252
    1974:	8f ef       	ldi	r24, 0xFF	; 255
    1976:	80 83       	st	Z, r24

/**
 * Clear partners list
 */
void gpib_clear_partners() {
	for (int i = 0; i < MAX_PARTNER; i++) {
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	9a 81       	ldd	r25, Y+2	; 0x02
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	9a 83       	std	Y+2, r25	; 0x02
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	9a 81       	ldd	r25, Y+2	; 0x02
    1986:	85 30       	cpi	r24, 0x05	; 5
    1988:	91 05       	cpc	r25, r1
    198a:	6c f3       	brlt	.-38     	; 0x1966 <gpib_clear_partners+0x10>
		controller.partners[i].primary = ADDRESS_NOT_SET;
	}
}
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <gpib_add_partner_address>:

/**
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	00 d0       	rcall	.+0      	; 0x199c <gpib_add_partner_address+0x6>
    199c:	00 d0       	rcall	.+0      	; 0x199e <gpib_add_partner_address+0x8>
    199e:	0f 92       	push	r0
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	8b 83       	std	Y+3, r24	; 0x03
    19a6:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    19a8:	1a 82       	std	Y+2, r1	; 0x02
    19aa:	19 82       	std	Y+1, r1	; 0x01
    19ac:	05 c0       	rjmp	.+10     	; 0x19b8 <gpib_add_partner_address+0x22>
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
			i++) {
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	9a 81       	ldd	r25, Y+2	; 0x02
    19b2:	01 96       	adiw	r24, 0x01	; 1
    19b4:	9a 83       	std	Y+2, r25	; 0x02
    19b6:	89 83       	std	Y+1, r24	; 0x01
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	9a 81       	ldd	r25, Y+2	; 0x02
    19bc:	85 30       	cpi	r24, 0x05	; 5
    19be:	91 05       	cpc	r25, r1
    19c0:	54 f4       	brge	.+20     	; 0x19d6 <gpib_add_partner_address+0x40>
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	9a 81       	ldd	r25, Y+2	; 0x02
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	fc 01       	movw	r30, r24
    19cc:	e7 55       	subi	r30, 0x57	; 87
    19ce:	fc 4f       	sbci	r31, 0xFC	; 252
    19d0:	80 81       	ld	r24, Z
    19d2:	8f 3f       	cpi	r24, 0xFF	; 255
    19d4:	61 f7       	brne	.-40     	; 0x19ae <gpib_add_partner_address+0x18>
			i++) {
	}
	if (i == MAX_PARTNER) {
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	9a 81       	ldd	r25, Y+2	; 0x02
    19da:	85 30       	cpi	r24, 0x05	; 5
    19dc:	91 05       	cpc	r25, r1
    19de:	39 f4       	brne	.+14     	; 0x19ee <gpib_add_partner_address+0x58>
		uart_puts("Too much partners.\n\r");
    19e0:	84 e1       	ldi	r24, 0x14	; 20
    19e2:	92 e0       	ldi	r25, 0x02	; 2
    19e4:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>
		return 1;
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	8d 83       	std	Y+5, r24	; 0x05
    19ec:	14 c0       	rjmp	.+40     	; 0x1a16 <gpib_add_partner_address+0x80>
	}
	controller.partners[i].primary = primary;
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	9a 81       	ldd	r25, Y+2	; 0x02
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	fc 01       	movw	r30, r24
    19f8:	e7 55       	subi	r30, 0x57	; 87
    19fa:	fc 4f       	sbci	r31, 0xFC	; 252
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	80 83       	st	Z, r24
	controller.partners[i].secondary = secondary;
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	9a 81       	ldd	r25, Y+2	; 0x02
    1a04:	03 96       	adiw	r24, 0x03	; 3
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	ec 55       	subi	r30, 0x5C	; 92
    1a0e:	fc 4f       	sbci	r31, 0xFC	; 252
    1a10:	8c 81       	ldd	r24, Y+4	; 0x04
    1a12:	80 83       	st	Z, r24
	return 0;
    1a14:	1d 82       	std	Y+5, r1	; 0x05
    1a16:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <gpib_remove_partner_address>:

/**
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <gpib_remove_partner_address+0x6>
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <gpib_remove_partner_address+0x8>
    1a30:	0f 92       	push	r0
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	8b 83       	std	Y+3, r24	; 0x03
    1a38:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1a3a:	1a 82       	std	Y+2, r1	; 0x02
    1a3c:	19 82       	std	Y+1, r1	; 0x01
    1a3e:	05 c0       	rjmp	.+10     	; 0x1a4a <gpib_remove_partner_address+0x22>
			i < MAX_PARTNER
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	9a 81       	ldd	r25, Y+2	; 0x02
    1a44:	01 96       	adiw	r24, 0x01	; 1
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	89 83       	std	Y+1, r24	; 0x01
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4e:	85 30       	cpi	r24, 0x05	; 5
    1a50:	91 05       	cpc	r25, r1
    1a52:	bc f4       	brge	.+46     	; 0x1a82 <gpib_remove_partner_address+0x5a>
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	9a 81       	ldd	r25, Y+2	; 0x02
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	e7 55       	subi	r30, 0x57	; 87
    1a60:	fc 4f       	sbci	r31, 0xFC	; 252
    1a62:	90 81       	ld	r25, Z
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	98 17       	cp	r25, r24
    1a68:	59 f7       	brne	.-42     	; 0x1a40 <gpib_remove_partner_address+0x18>
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6e:	03 96       	adiw	r24, 0x03	; 3
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	fc 01       	movw	r30, r24
    1a76:	ec 55       	subi	r30, 0x5C	; 92
    1a78:	fc 4f       	sbci	r31, 0xFC	; 252
    1a7a:	90 81       	ld	r25, Z
    1a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7e:	98 17       	cp	r25, r24
    1a80:	f9 f6       	brne	.-66     	; 0x1a40 <gpib_remove_partner_address+0x18>
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
	}
	if (i == MAX_PARTNER) {
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	9a 81       	ldd	r25, Y+2	; 0x02
    1a86:	85 30       	cpi	r24, 0x05	; 5
    1a88:	91 05       	cpc	r25, r1
    1a8a:	39 f4       	brne	.+14     	; 0x1a9a <gpib_remove_partner_address+0x72>
		uart_puts("Partner unknown.\n\r");
    1a8c:	89 e2       	ldi	r24, 0x29	; 41
    1a8e:	92 e0       	ldi	r25, 0x02	; 2
    1a90:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>
		return 1;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    1a98:	14 c0       	rjmp	.+40     	; 0x1ac2 <gpib_remove_partner_address+0x9a>
	}
	controller.partners[i].primary = ADDRESS_NOT_SET;
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	e7 55       	subi	r30, 0x57	; 87
    1aa6:	fc 4f       	sbci	r31, 0xFC	; 252
    1aa8:	8f ef       	ldi	r24, 0xFF	; 255
    1aaa:	80 83       	st	Z, r24
	controller.partners[i].secondary = ADDRESS_NOT_SET;
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab0:	03 96       	adiw	r24, 0x03	; 3
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	ec 55       	subi	r30, 0x5C	; 92
    1aba:	fc 4f       	sbci	r31, 0xFC	; 252
    1abc:	8f ef       	ldi	r24, 0xFF	; 255
    1abe:	80 83       	st	Z, r24
	return 0;
    1ac0:	1d 82       	std	Y+5, r1	; 0x05
    1ac2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <stringToTwoUchars>:

/**
 * Read two integers from string like "45 56" or one integer. In latter case
 * the second integer is initialized with a special value.
 */
static void stringToTwoUchars(char *string, uchar *a, uchar *b) {
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	28 97       	sbiw	r28, 0x08	; 8
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	9c 83       	std	Y+4, r25	; 0x04
    1aea:	8b 83       	std	Y+3, r24	; 0x03
    1aec:	7e 83       	std	Y+6, r23	; 0x06
    1aee:	6d 83       	std	Y+5, r22	; 0x05
    1af0:	58 87       	std	Y+8, r21	; 0x08
    1af2:	4f 83       	std	Y+7, r20	; 0x07
	char *token = strtok(string, " ");
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	2c e3       	ldi	r18, 0x3C	; 60
    1afa:	32 e0       	ldi	r19, 0x02	; 2
    1afc:	b9 01       	movw	r22, r18
    1afe:	0e 94 a6 01 	call	0x34c	; 0x34c <strtok>
    1b02:	9a 83       	std	Y+2, r25	; 0x02
    1b04:	89 83       	std	Y+1, r24	; 0x01
	*a = atoi((char*) token);
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0a:	0e 94 88 01 	call	0x310	; 0x310 <atoi>
    1b0e:	ed 81       	ldd	r30, Y+5	; 0x05
    1b10:	fe 81       	ldd	r31, Y+6	; 0x06
    1b12:	80 83       	st	Z, r24
	token = strtok(NULL, " ");
    1b14:	2c e3       	ldi	r18, 0x3C	; 60
    1b16:	32 e0       	ldi	r19, 0x02	; 2
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	b9 01       	movw	r22, r18
    1b1e:	0e 94 a6 01 	call	0x34c	; 0x34c <strtok>
    1b22:	9a 83       	std	Y+2, r25	; 0x02
    1b24:	89 83       	std	Y+1, r24	; 0x01
	if (token != NULL) {
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	41 f0       	breq	.+16     	; 0x1b3e <stringToTwoUchars+0x6a>
		*b = atoi((char*) token);
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	9a 81       	ldd	r25, Y+2	; 0x02
    1b32:	0e 94 88 01 	call	0x310	; 0x310 <atoi>
    1b36:	ef 81       	ldd	r30, Y+7	; 0x07
    1b38:	f8 85       	ldd	r31, Y+8	; 0x08
    1b3a:	80 83       	st	Z, r24
    1b3c:	04 c0       	rjmp	.+8      	; 0x1b46 <stringToTwoUchars+0x72>
	} else {
		*b = ADDRESS_NOT_SET;
    1b3e:	ef 81       	ldd	r30, Y+7	; 0x07
    1b40:	f8 85       	ldd	r31, Y+8	; 0x08
    1b42:	8f ef       	ldi	r24, 0xFF	; 255
    1b44:	80 83       	st	Z, r24
	}
}
    1b46:	28 96       	adiw	r28, 0x08	; 8
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <check_errors>:
 *
 * Reads error queue first entry.
 * TODO: read complete queue in while loop.
 *
 */
void check_errors() {
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <check_errors+0x6>
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
	char *error_cmd = "SYST:ERR?";
    1b62:	8e e3       	ldi	r24, 0x3E	; 62
    1b64:	92 e0       	ldi	r25, 0x02	; 2
    1b66:	9a 83       	std	Y+2, r25	; 0x02
    1b68:	89 83       	std	Y+1, r24	; 0x01
	send_command(error_cmd, SEND_FULL_CMD);
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6e:	62 e0       	ldi	r22, 0x02	; 2
    1b70:	0e 94 20 10 	call	0x2040	; 0x2040 <send_command>
	receiveAnswer();
    1b74:	0e 94 85 10 	call	0x210a	; 0x210a <receiveAnswer>
}
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <input_char>:

/**
 * Reads in character into parameter c. Checks for errors and prints them out.
 * Returns 0 if there is no char to read, 1 if there was a char read in.
 */
uchar input_char(uchar *ch) {
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <input_char+0x6>
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <input_char+0x8>
    1b8a:	0f 92       	push	r0
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	9c 83       	std	Y+4, r25	; 0x04
    1b92:	8b 83       	std	Y+3, r24	; 0x03
	 * uart_getc() returns in the lower byte the received character and
	 * in the higher byte (bitmask) the last receive error
	 * UART_NO_DATA is returned when no data is available.
	 *
	 */
	c = uart_getc();
    1b94:	0e 94 cd 13 	call	0x279a	; 0x279a <uart_getc>
    1b98:	9a 83       	std	Y+2, r25	; 0x02
    1b9a:	89 83       	std	Y+1, r24	; 0x01
	if (c & UART_NO_DATA) {
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba0:	80 70       	andi	r24, 0x00	; 0
    1ba2:	91 70       	andi	r25, 0x01	; 1
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	11 f0       	breq	.+4      	; 0x1bac <input_char+0x2a>
		// no data available from UART
		return 0;
    1ba8:	1d 82       	std	Y+5, r1	; 0x05
    1baa:	24 c0       	rjmp	.+72     	; 0x1bf4 <input_char+0x72>
	}
	// make uchar from character in int value
	*ch = (uchar) c;
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	eb 81       	ldd	r30, Y+3	; 0x03
    1bb0:	fc 81       	ldd	r31, Y+4	; 0x04
    1bb2:	80 83       	st	Z, r24

	/*
	 * new data available from UART
	 * check for Frame or Overrun error
	 */
	if (c & UART_FRAME_ERROR) {
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb8:	80 70       	andi	r24, 0x00	; 0
    1bba:	98 70       	andi	r25, 0x08	; 8
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	21 f0       	breq	.+8      	; 0x1bc8 <input_char+0x46>
		/* Framing Error detected, i.e no stop bit detected */
		uart_puts_P("UART Frame Error: ");
    1bc0:	81 e8       	ldi	r24, 0x81	; 129
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
	}
	if (c & UART_OVERRUN_ERROR) {
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	9a 81       	ldd	r25, Y+2	; 0x02
    1bcc:	80 70       	andi	r24, 0x00	; 0
    1bce:	94 70       	andi	r25, 0x04	; 4
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	21 f0       	breq	.+8      	; 0x1bdc <input_char+0x5a>
		/*
		 * Overrun, a character already present in the UART UDR register was
		 * not read by the interrupt handler before the next character arrived,
		 * one or more received characters have been dropped
		 */
		uart_puts_P("UART Overrun Error: ");
    1bd4:	8c e6       	ldi	r24, 0x6C	; 108
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
	}
	if (c & UART_BUFFER_OVERFLOW) {
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	80 70       	andi	r24, 0x00	; 0
    1be2:	92 70       	andi	r25, 0x02	; 2
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	21 f0       	breq	.+8      	; 0x1bf0 <input_char+0x6e>
		/*
		 * We are not reading the receive buffer fast enough,
		 * one or more received character have been dropped
		 */
		uart_puts_P("Buffer overflow error: ");
    1be8:	84 e5       	ldi	r24, 0x54	; 84
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
	}
	return 1;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
    1bf4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <process_char>:
 * a) xon/xoff mode forward buffer to GPIB
 * b) no flow control: prints error message that input buffer is full.
 *
 * Returns 1 if command end is detected, 0 otherwise.
 */
uchar process_char(uchar ch) {
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <process_char+0x6>
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	8a 83       	std	Y+2, r24	; 0x02
	uchar ret = 0;
    1c12:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * send received character back depending on global flag
	 */
	if (rs232_remote_echo) {
    1c14:	80 91 9d 03 	lds	r24, 0x039D
    1c18:	88 23       	and	r24, r24
    1c1a:	19 f0       	breq	.+6      	; 0x1c22 <process_char+0x1c>
		uart_putc((unsigned char) ch);
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	0e 94 23 14 	call	0x2846	; 0x2846 <uart_putc>
	}

	// if input buffer is not full, add char
	if (buf_ptr < COMMAND_INPUT_BUFFER_SIZE - 1) {
    1c22:	80 91 b3 03 	lds	r24, 0x03B3
    1c26:	90 91 b4 03 	lds	r25, 0x03B4
    1c2a:	8f 34       	cpi	r24, 0x4F	; 79
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	bc f4       	brge	.+46     	; 0x1c5e <process_char+0x58>
		buf[buf_ptr++] = ch;
    1c30:	20 91 b3 03 	lds	r18, 0x03B3
    1c34:	30 91 b4 03 	lds	r19, 0x03B4
    1c38:	f9 01       	movw	r30, r18
    1c3a:	ee 53       	subi	r30, 0x3E	; 62
    1c3c:	fb 4f       	sbci	r31, 0xFB	; 251
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	80 83       	st	Z, r24
    1c42:	c9 01       	movw	r24, r18
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	90 93 b4 03 	sts	0x03B4, r25
    1c4a:	80 93 b3 03 	sts	0x03B3, r24
		buf[buf_ptr] = '\0';
    1c4e:	80 91 b3 03 	lds	r24, 0x03B3
    1c52:	90 91 b4 03 	lds	r25, 0x03B4
    1c56:	fc 01       	movw	r30, r24
    1c58:	ee 53       	subi	r30, 0x3E	; 62
    1c5a:	fb 4f       	sbci	r31, 0xFB	; 251
    1c5c:	10 82       	st	Z, r1
	}

	// if command ends or buffer is full ...
	if (ch == ASCII_CODE_CR || buf_ptr >= COMMAND_INPUT_BUFFER_SIZE - 1) {
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	8d 30       	cpi	r24, 0x0D	; 13
    1c62:	39 f0       	breq	.+14     	; 0x1c72 <process_char+0x6c>
    1c64:	80 91 b3 03 	lds	r24, 0x03B3
    1c68:	90 91 b4 03 	lds	r25, 0x03B4
    1c6c:	8f 34       	cpi	r24, 0x4F	; 79
    1c6e:	91 05       	cpc	r25, r1
    1c70:	6c f1       	brlt	.+90     	; 0x1ccc <process_char+0xc6>

		if (ch == ASCII_CODE_CR) {
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	8d 30       	cpi	r24, 0x0D	; 13
    1c76:	a1 f4       	brne	.+40     	; 0x1ca0 <process_char+0x9a>
			// adjust string terminator
			buf[--buf_ptr] = '\0';
    1c78:	80 91 b3 03 	lds	r24, 0x03B3
    1c7c:	90 91 b4 03 	lds	r25, 0x03B4
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	90 93 b4 03 	sts	0x03B4, r25
    1c86:	80 93 b3 03 	sts	0x03B3, r24
    1c8a:	80 91 b3 03 	lds	r24, 0x03B3
    1c8e:	90 91 b4 03 	lds	r25, 0x03B4
    1c92:	fc 01       	movw	r30, r24
    1c94:	ee 53       	subi	r30, 0x3E	; 62
    1c96:	fb 4f       	sbci	r31, 0xFB	; 251
    1c98:	10 82       	st	Z, r1
			// let calling function send last command part (or command itself)
			ret = 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	16 c0       	rjmp	.+44     	; 0x1ccc <process_char+0xc6>
		} else {
			if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
    1ca0:	0e 94 c7 12 	call	0x258e	; 0x258e <uart_get_flow_control>
    1ca4:	81 30       	cpi	r24, 0x01	; 1
    1ca6:	51 f4       	brne	.+20     	; 0x1cbc <process_char+0xb6>
				// send intermediate part of command.
				send_command(buf, SEND_PART);
    1ca8:	82 ec       	ldi	r24, 0xC2	; 194
    1caa:	94 e0       	ldi	r25, 0x04	; 4
    1cac:	61 e0       	ldi	r22, 0x01	; 1
    1cae:	0e 94 20 10 	call	0x2040	; 0x2040 <send_command>
				buf_ptr = 0;
    1cb2:	10 92 b4 03 	sts	0x03B4, r1
    1cb6:	10 92 b3 03 	sts	0x03B3, r1
    1cba:	08 c0       	rjmp	.+16     	; 0x1ccc <process_char+0xc6>
			} else {
				// send intermediate part of command.
				uart_puts_P("Command overflow.");
    1cbc:	84 e9       	ldi	r24, 0x94	; 148
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
				buf_ptr = 0;
    1cc4:	10 92 b4 03 	sts	0x03B4, r1
    1cc8:	10 92 b3 03 	sts	0x03B3, r1
			}
		}
	}
	return ret;
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	08 95       	ret

00001cd8 <input_process>:
 * This approach handles small single line commands (needing no flow control) and large
 * multi-line commands if flow control is xon/xoff.
 *
 * \returns The character read in
 */
uchar input_process(void) {
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	00 d0       	rcall	.+0      	; 0x1cde <input_process+0x6>
    1cde:	0f 92       	push	r0
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
	uchar ch, ret = 0;
    1ce4:	19 82       	std	Y+1, r1	; 0x01

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
    1ce6:	0e 94 c7 12 	call	0x258e	; 0x258e <uart_get_flow_control>
    1cea:	81 30       	cpi	r24, 0x01	; 1
    1cec:	89 f4       	brne	.+34     	; 0x1d10 <input_process+0x38>
    1cee:	0c c0       	rjmp	.+24     	; 0x1d08 <input_process+0x30>
		while (!ret) {
			// if nothing can be read in, return
			if (!input_char(&ch)) {
    1cf0:	ce 01       	movw	r24, r28
    1cf2:	02 96       	adiw	r24, 0x02	; 2
    1cf4:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <input_char>
    1cf8:	88 23       	and	r24, r24
    1cfa:	11 f4       	brne	.+4      	; 0x1d00 <input_process+0x28>
				return 0;
    1cfc:	1b 82       	std	Y+3, r1	; 0x03
    1cfe:	16 c0       	rjmp	.+44     	; 0x1d2c <input_process+0x54>
			}
			ret = process_char(ch);
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <process_char>
    1d06:	89 83       	std	Y+1, r24	; 0x01
 */
uchar input_process(void) {
	uchar ch, ret = 0;

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
		while (!ret) {
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	88 23       	and	r24, r24
    1d0c:	89 f3       	breq	.-30     	; 0x1cf0 <input_process+0x18>
    1d0e:	0c c0       	rjmp	.+24     	; 0x1d28 <input_process+0x50>
			}
			ret = process_char(ch);
		}
	} else {
		// if nothing can be read in, return
		if (!input_char(&ch)) {
    1d10:	ce 01       	movw	r24, r28
    1d12:	02 96       	adiw	r24, 0x02	; 2
    1d14:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <input_char>
    1d18:	88 23       	and	r24, r24
    1d1a:	11 f4       	brne	.+4      	; 0x1d20 <input_process+0x48>
			return 0;
    1d1c:	1b 82       	std	Y+3, r1	; 0x03
    1d1e:	06 c0       	rjmp	.+12     	; 0x1d2c <input_process+0x54>
		}
		ret = process_char(ch);
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <process_char>
    1d26:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	8b 83       	std	Y+3, r24	; 0x03
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <handle_internal_commands>:


/**
 * Handles builtin commands.
 */
void handle_internal_commands(uchar *commandString) {
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <handle_internal_commands+0x6>
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <handle_internal_commands+0x8>
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <handle_internal_commands+0xa>
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	9c 83       	std	Y+4, r25	; 0x04
    1d4a:	8b 83       	std	Y+3, r24	; 0x03
	uchar val, val1;

	switch (buf[1]) {
    1d4c:	80 91 c3 04 	lds	r24, 0x04C3
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	3e 83       	std	Y+6, r19	; 0x06
    1d56:	2d 83       	std	Y+5, r18	; 0x05
    1d58:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5c:	88 36       	cpi	r24, 0x68	; 104
    1d5e:	91 05       	cpc	r25, r1
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <handle_internal_commands+0x2a>
    1d62:	30 c1       	rjmp	.+608    	; 0x1fc4 <handle_internal_commands+0x28a>
    1d64:	2d 81       	ldd	r18, Y+5	; 0x05
    1d66:	3e 81       	ldd	r19, Y+6	; 0x06
    1d68:	29 36       	cpi	r18, 0x69	; 105
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	f4 f4       	brge	.+60     	; 0x1daa <handle_internal_commands+0x70>
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	81 36       	cpi	r24, 0x61	; 97
    1d74:	91 05       	cpc	r25, r1
    1d76:	61 f1       	breq	.+88     	; 0x1dd0 <handle_internal_commands+0x96>
    1d78:	2d 81       	ldd	r18, Y+5	; 0x05
    1d7a:	3e 81       	ldd	r19, Y+6	; 0x06
    1d7c:	22 36       	cpi	r18, 0x62	; 98
    1d7e:	31 05       	cpc	r19, r1
    1d80:	6c f4       	brge	.+26     	; 0x1d9c <handle_internal_commands+0x62>
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	9e 81       	ldd	r25, Y+6	; 0x06
    1d86:	8b 32       	cpi	r24, 0x2B	; 43
    1d88:	91 05       	cpc	r25, r1
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <handle_internal_commands+0x54>
    1d8c:	88 c0       	rjmp	.+272    	; 0x1e9e <handle_internal_commands+0x164>
    1d8e:	2d 81       	ldd	r18, Y+5	; 0x05
    1d90:	3e 81       	ldd	r19, Y+6	; 0x06
    1d92:	2d 32       	cpi	r18, 0x2D	; 45
    1d94:	31 05       	cpc	r19, r1
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <handle_internal_commands+0x60>
    1d98:	bf c0       	rjmp	.+382    	; 0x1f18 <handle_internal_commands+0x1de>
    1d9a:	43 c1       	rjmp	.+646    	; 0x2022 <handle_internal_commands+0x2e8>
    1d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1da0:	85 36       	cpi	r24, 0x65	; 101
    1da2:	91 05       	cpc	r25, r1
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <handle_internal_commands+0x6e>
    1da6:	36 c1       	rjmp	.+620    	; 0x2014 <handle_internal_commands+0x2da>
    1da8:	3c c1       	rjmp	.+632    	; 0x2022 <handle_internal_commands+0x2e8>
    1daa:	2d 81       	ldd	r18, Y+5	; 0x05
    1dac:	3e 81       	ldd	r19, Y+6	; 0x06
    1dae:	23 37       	cpi	r18, 0x73	; 115
    1db0:	31 05       	cpc	r19, r1
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <handle_internal_commands+0x7c>
    1db4:	4a c0       	rjmp	.+148    	; 0x1e4a <handle_internal_commands+0x110>
    1db6:	8d 81       	ldd	r24, Y+5	; 0x05
    1db8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dba:	88 37       	cpi	r24, 0x78	; 120
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <handle_internal_commands+0x88>
    1dc0:	e8 c0       	rjmp	.+464    	; 0x1f92 <handle_internal_commands+0x258>
    1dc2:	2d 81       	ldd	r18, Y+5	; 0x05
    1dc4:	3e 81       	ldd	r19, Y+6	; 0x06
    1dc6:	29 36       	cpi	r18, 0x69	; 105
    1dc8:	31 05       	cpc	r19, r1
    1dca:	09 f4       	brne	.+2      	; 0x1dce <handle_internal_commands+0x94>
    1dcc:	fe c0       	rjmp	.+508    	; 0x1fca <handle_internal_commands+0x290>
    1dce:	29 c1       	rjmp	.+594    	; 0x2022 <handle_internal_commands+0x2e8>
	case 'a':
		/* set partner primary+secondary address */
		stringToTwoUchars((char*) (&(buf[2])), &val, &val1);
    1dd0:	84 ec       	ldi	r24, 0xC4	; 196
    1dd2:	94 e0       	ldi	r25, 0x04	; 4
    1dd4:	ae 01       	movw	r20, r28
    1dd6:	4e 5f       	subi	r20, 0xFE	; 254
    1dd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dda:	9e 01       	movw	r18, r28
    1ddc:	2f 5f       	subi	r18, 0xFF	; 255
    1dde:	3f 4f       	sbci	r19, 0xFF	; 255
    1de0:	b9 01       	movw	r22, r18
    1de2:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <stringToTwoUchars>
		sprintf(buf, "Set partner address, primary: %u , secondary: %u\n\r",
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	48 2f       	mov	r20, r24
    1df0:	50 e0       	ldi	r21, 0x00	; 0
    1df2:	8d b7       	in	r24, 0x3d	; 61
    1df4:	9e b7       	in	r25, 0x3e	; 62
    1df6:	08 97       	sbiw	r24, 0x08	; 8
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	f8 94       	cli
    1dfc:	9e bf       	out	0x3e, r25	; 62
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	8d bf       	out	0x3d, r24	; 61
    1e02:	ed b7       	in	r30, 0x3d	; 61
    1e04:	fe b7       	in	r31, 0x3e	; 62
    1e06:	31 96       	adiw	r30, 0x01	; 1
    1e08:	82 ec       	ldi	r24, 0xC2	; 194
    1e0a:	94 e0       	ldi	r25, 0x04	; 4
    1e0c:	91 83       	std	Z+1, r25	; 0x01
    1e0e:	80 83       	st	Z, r24
    1e10:	88 e4       	ldi	r24, 0x48	; 72
    1e12:	92 e0       	ldi	r25, 0x02	; 2
    1e14:	93 83       	std	Z+3, r25	; 0x03
    1e16:	82 83       	std	Z+2, r24	; 0x02
    1e18:	35 83       	std	Z+5, r19	; 0x05
    1e1a:	24 83       	std	Z+4, r18	; 0x04
    1e1c:	57 83       	std	Z+7, r21	; 0x07
    1e1e:	46 83       	std	Z+6, r20	; 0x06
    1e20:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    1e24:	2d b7       	in	r18, 0x3d	; 61
    1e26:	3e b7       	in	r19, 0x3e	; 62
    1e28:	28 5f       	subi	r18, 0xF8	; 248
    1e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	3e bf       	out	0x3e, r19	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	2d bf       	out	0x3d, r18	; 61
				val, val1);
		uart_puts(buf);
    1e36:	82 ec       	ldi	r24, 0xC2	; 194
    1e38:	94 e0       	ldi	r25, 0x04	; 4
    1e3a:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>
		gpib_set_partner_address(val, val1);
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	9a 81       	ldd	r25, Y+2	; 0x02
    1e42:	69 2f       	mov	r22, r25
    1e44:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <gpib_set_partner_address>
    1e48:	f2 c0       	rjmp	.+484    	; 0x202e <handle_internal_commands+0x2f4>
		break;
	case 's':
		/* set partner secondary address */
		val = atoi((char*) (&(buf[2])));
    1e4a:	84 ec       	ldi	r24, 0xC4	; 196
    1e4c:	94 e0       	ldi	r25, 0x04	; 4
    1e4e:	0e 94 88 01 	call	0x310	; 0x310 <atoi>
    1e52:	89 83       	std	Y+1, r24	; 0x01
		sprintf(buf, "Set partner secondary address to %u\n\r", val);
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <handle_internal_commands+0x122>
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <handle_internal_commands+0x124>
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <handle_internal_commands+0x126>
    1e60:	ed b7       	in	r30, 0x3d	; 61
    1e62:	fe b7       	in	r31, 0x3e	; 62
    1e64:	31 96       	adiw	r30, 0x01	; 1
    1e66:	82 ec       	ldi	r24, 0xC2	; 194
    1e68:	94 e0       	ldi	r25, 0x04	; 4
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	80 83       	st	Z, r24
    1e6e:	8b e7       	ldi	r24, 0x7B	; 123
    1e70:	92 e0       	ldi	r25, 0x02	; 2
    1e72:	93 83       	std	Z+3, r25	; 0x03
    1e74:	82 83       	std	Z+2, r24	; 0x02
    1e76:	35 83       	std	Z+5, r19	; 0x05
    1e78:	24 83       	std	Z+4, r18	; 0x04
    1e7a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    1e7e:	8d b7       	in	r24, 0x3d	; 61
    1e80:	9e b7       	in	r25, 0x3e	; 62
    1e82:	06 96       	adiw	r24, 0x06	; 6
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	f8 94       	cli
    1e88:	9e bf       	out	0x3e, r25	; 62
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	8d bf       	out	0x3d, r24	; 61
		uart_puts(buf);
    1e8e:	82 ec       	ldi	r24, 0xC2	; 194
    1e90:	94 e0       	ldi	r25, 0x04	; 4
    1e92:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>
		gpib_set_partner_secondary(val);
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	0e 94 6d 0c 	call	0x18da	; 0x18da <gpib_set_partner_secondary>
    1e9c:	c8 c0       	rjmp	.+400    	; 0x202e <handle_internal_commands+0x2f4>
		break;
	case '+':
		/* add device */
		stringToTwoUchars((char*) (&(buf[2])), &val, &val1);
    1e9e:	84 ec       	ldi	r24, 0xC4	; 196
    1ea0:	94 e0       	ldi	r25, 0x04	; 4
    1ea2:	ae 01       	movw	r20, r28
    1ea4:	4e 5f       	subi	r20, 0xFE	; 254
    1ea6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea8:	9e 01       	movw	r18, r28
    1eaa:	2f 5f       	subi	r18, 0xFF	; 255
    1eac:	3f 4f       	sbci	r19, 0xFF	; 255
    1eae:	b9 01       	movw	r22, r18
    1eb0:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <stringToTwoUchars>
		sprintf(buf, "Add device, primary: %u , secondary: %u\n\r", val, val1);
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	48 2f       	mov	r20, r24
    1ebe:	50 e0       	ldi	r21, 0x00	; 0
    1ec0:	8d b7       	in	r24, 0x3d	; 61
    1ec2:	9e b7       	in	r25, 0x3e	; 62
    1ec4:	08 97       	sbiw	r24, 0x08	; 8
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	f8 94       	cli
    1eca:	9e bf       	out	0x3e, r25	; 62
    1ecc:	0f be       	out	0x3f, r0	; 63
    1ece:	8d bf       	out	0x3d, r24	; 61
    1ed0:	ed b7       	in	r30, 0x3d	; 61
    1ed2:	fe b7       	in	r31, 0x3e	; 62
    1ed4:	31 96       	adiw	r30, 0x01	; 1
    1ed6:	82 ec       	ldi	r24, 0xC2	; 194
    1ed8:	94 e0       	ldi	r25, 0x04	; 4
    1eda:	91 83       	std	Z+1, r25	; 0x01
    1edc:	80 83       	st	Z, r24
    1ede:	81 ea       	ldi	r24, 0xA1	; 161
    1ee0:	92 e0       	ldi	r25, 0x02	; 2
    1ee2:	93 83       	std	Z+3, r25	; 0x03
    1ee4:	82 83       	std	Z+2, r24	; 0x02
    1ee6:	35 83       	std	Z+5, r19	; 0x05
    1ee8:	24 83       	std	Z+4, r18	; 0x04
    1eea:	57 83       	std	Z+7, r21	; 0x07
    1eec:	46 83       	std	Z+6, r20	; 0x06
    1eee:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    1ef2:	2d b7       	in	r18, 0x3d	; 61
    1ef4:	3e b7       	in	r19, 0x3e	; 62
    1ef6:	28 5f       	subi	r18, 0xF8	; 248
    1ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	3e bf       	out	0x3e, r19	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	2d bf       	out	0x3d, r18	; 61
		uart_puts(buf);
    1f04:	82 ec       	ldi	r24, 0xC2	; 194
    1f06:	94 e0       	ldi	r25, 0x04	; 4
    1f08:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>
		gpib_add_partner_address(val, val1);
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f10:	69 2f       	mov	r22, r25
    1f12:	0e 94 cb 0c 	call	0x1996	; 0x1996 <gpib_add_partner_address>
    1f16:	8b c0       	rjmp	.+278    	; 0x202e <handle_internal_commands+0x2f4>
		break;
	case '-':
		/* add device */
		stringToTwoUchars((char*) (&(buf[2])), &val, &val1);
    1f18:	84 ec       	ldi	r24, 0xC4	; 196
    1f1a:	94 e0       	ldi	r25, 0x04	; 4
    1f1c:	ae 01       	movw	r20, r28
    1f1e:	4e 5f       	subi	r20, 0xFE	; 254
    1f20:	5f 4f       	sbci	r21, 0xFF	; 255
    1f22:	9e 01       	movw	r18, r28
    1f24:	2f 5f       	subi	r18, 0xFF	; 255
    1f26:	3f 4f       	sbci	r19, 0xFF	; 255
    1f28:	b9 01       	movw	r22, r18
    1f2a:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <stringToTwoUchars>
		sprintf(buf, "Remove device, primary: %u , secondary: %u\n\r", val,
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	48 2f       	mov	r20, r24
    1f38:	50 e0       	ldi	r21, 0x00	; 0
    1f3a:	8d b7       	in	r24, 0x3d	; 61
    1f3c:	9e b7       	in	r25, 0x3e	; 62
    1f3e:	08 97       	sbiw	r24, 0x08	; 8
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	9e bf       	out	0x3e, r25	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	8d bf       	out	0x3d, r24	; 61
    1f4a:	ed b7       	in	r30, 0x3d	; 61
    1f4c:	fe b7       	in	r31, 0x3e	; 62
    1f4e:	31 96       	adiw	r30, 0x01	; 1
    1f50:	82 ec       	ldi	r24, 0xC2	; 194
    1f52:	94 e0       	ldi	r25, 0x04	; 4
    1f54:	91 83       	std	Z+1, r25	; 0x01
    1f56:	80 83       	st	Z, r24
    1f58:	8b ec       	ldi	r24, 0xCB	; 203
    1f5a:	92 e0       	ldi	r25, 0x02	; 2
    1f5c:	93 83       	std	Z+3, r25	; 0x03
    1f5e:	82 83       	std	Z+2, r24	; 0x02
    1f60:	35 83       	std	Z+5, r19	; 0x05
    1f62:	24 83       	std	Z+4, r18	; 0x04
    1f64:	57 83       	std	Z+7, r21	; 0x07
    1f66:	46 83       	std	Z+6, r20	; 0x06
    1f68:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    1f6c:	2d b7       	in	r18, 0x3d	; 61
    1f6e:	3e b7       	in	r19, 0x3e	; 62
    1f70:	28 5f       	subi	r18, 0xF8	; 248
    1f72:	3f 4f       	sbci	r19, 0xFF	; 255
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	3e bf       	out	0x3e, r19	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	2d bf       	out	0x3d, r18	; 61
				val1);
		uart_puts(buf);
    1f7e:	82 ec       	ldi	r24, 0xC2	; 194
    1f80:	94 e0       	ldi	r25, 0x04	; 4
    1f82:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>
		gpib_remove_partner_address(val, val1);
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8a:	69 2f       	mov	r22, r25
    1f8c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <gpib_remove_partner_address>
    1f90:	4e c0       	rjmp	.+156    	; 0x202e <handle_internal_commands+0x2f4>
		break;
	case 'x':
		/* Xon/Xoff flow control */
		if (!xonXoffMode) {
    1f92:	80 91 9e 03 	lds	r24, 0x039E
    1f96:	88 23       	and	r24, r24
    1f98:	59 f4       	brne	.+22     	; 0x1fb0 <handle_internal_commands+0x276>
			xonXoffMode = 1;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	80 93 9e 03 	sts	0x039E, r24
			uart_set_flow_control(FLOWCONTROL_XONXOFF);
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	0e 94 ba 12 	call	0x2574	; 0x2574 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol on\n\r");
    1fa6:	82 ee       	ldi	r24, 0xE2	; 226
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
    1fae:	3f c0       	rjmp	.+126    	; 0x202e <handle_internal_commands+0x2f4>
		} else {
			xonXoffMode = 0;
    1fb0:	10 92 9e 03 	sts	0x039E, r1
			uart_set_flow_control(FLOWCONTROL_NONE);
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	0e 94 ba 12 	call	0x2574	; 0x2574 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol off\n\r");
    1fba:	87 ec       	ldi	r24, 0xC7	; 199
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
    1fc2:	35 c0       	rjmp	.+106    	; 0x202e <handle_internal_commands+0x2f4>
		}
		break;
	case 'h':
		/* print some usage infos */
		printHelp();
    1fc4:	0e 94 a4 11 	call	0x2348	; 0x2348 <printHelp>
    1fc8:	32 c0       	rjmp	.+100    	; 0x202e <handle_internal_commands+0x2f4>
		break;
	case 'i':
		gpib_info();
    1fca:	0e 94 cc 09 	call	0x1398	; 0x1398 <gpib_info>
		sprintf(buf, "Xon/Xoff flow control: %u\n\r", xonXoffMode);
    1fce:	80 91 9e 03 	lds	r24, 0x039E
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	00 d0       	rcall	.+0      	; 0x1fd8 <handle_internal_commands+0x29e>
    1fd8:	00 d0       	rcall	.+0      	; 0x1fda <handle_internal_commands+0x2a0>
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <handle_internal_commands+0x2a2>
    1fdc:	ed b7       	in	r30, 0x3d	; 61
    1fde:	fe b7       	in	r31, 0x3e	; 62
    1fe0:	31 96       	adiw	r30, 0x01	; 1
    1fe2:	82 ec       	ldi	r24, 0xC2	; 194
    1fe4:	94 e0       	ldi	r25, 0x04	; 4
    1fe6:	91 83       	std	Z+1, r25	; 0x01
    1fe8:	80 83       	st	Z, r24
    1fea:	88 ef       	ldi	r24, 0xF8	; 248
    1fec:	92 e0       	ldi	r25, 0x02	; 2
    1fee:	93 83       	std	Z+3, r25	; 0x03
    1ff0:	82 83       	std	Z+2, r24	; 0x02
    1ff2:	35 83       	std	Z+5, r19	; 0x05
    1ff4:	24 83       	std	Z+4, r18	; 0x04
    1ff6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    1ffa:	8d b7       	in	r24, 0x3d	; 61
    1ffc:	9e b7       	in	r25, 0x3e	; 62
    1ffe:	06 96       	adiw	r24, 0x06	; 6
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	9e bf       	out	0x3e, r25	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	8d bf       	out	0x3d, r24	; 61
		uart_puts(buf);
    200a:	82 ec       	ldi	r24, 0xC2	; 194
    200c:	94 e0       	ldi	r25, 0x04	; 4
    200e:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>
    2012:	0d c0       	rjmp	.+26     	; 0x202e <handle_internal_commands+0x2f4>
		break;
	case 'e':
		uart_puts_P("Check errors\n\r");
    2014:	88 eb       	ldi	r24, 0xB8	; 184
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
		check_errors();
    201c:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <check_errors>
    2020:	06 c0       	rjmp	.+12     	; 0x202e <handle_internal_commands+0x2f4>
		arb_ramp();
		uart_puts("arb done\n\r");
		break;
#endif
	default:
		uart_puts_P("unknown command\n\r");
    2022:	86 ea       	ldi	r24, 0xA6	; 166
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
		printHelp();
    202a:	0e 94 a4 11 	call	0x2348	; 0x2348 <printHelp>
		break;
	}
}
    202e:	26 96       	adiw	r28, 0x06	; 6
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	de bf       	out	0x3e, r29	; 62
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	cd bf       	out	0x3d, r28	; 61
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <send_command>:
 * Sends a command.
 * Mode is SEND_FULL_CMD or SEND_PART
 *
 * Returns 1 if command is a query, 0 otherwise.
 */
uchar send_command(uchar *commandString, uchar mode) {
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	2c 97       	sbiw	r28, 0x0c	; 12
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	9b 87       	std	Y+11, r25	; 0x0b
    2056:	8a 87       	std	Y+10, r24	; 0x0a
    2058:	6c 87       	std	Y+12, r22	; 0x0c
	uchar controlString[8];
	uchar is_query;

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
    205a:	8f e5       	ldi	r24, 0x5F	; 95
    205c:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    205e:	ce 01       	movw	r24, r28
    2060:	02 96       	adiw	r24, 0x02	; 2
    2062:	61 e0       	ldi	r22, 0x01	; 1
    2064:	70 e0       	ldi	r23, 0x00	; 0
    2066:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    206a:	8f e3       	ldi	r24, 0x3F	; 63
    206c:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    206e:	ce 01       	movw	r24, r28
    2070:	02 96       	adiw	r24, 0x02	; 2
    2072:	61 e0       	ldi	r22, 0x01	; 1
    2074:	70 e0       	ldi	r23, 0x00	; 0
    2076:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>

	// set device to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_partner_pad());
    207a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <gpib_get_partner_pad>
    207e:	80 5e       	subi	r24, 0xE0	; 224
    2080:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    2082:	ce 01       	movw	r24, r28
    2084:	02 96       	adiw	r24, 0x02	; 2
    2086:	61 e0       	ldi	r22, 0x01	; 1
    2088:	70 e0       	ldi	r23, 0x00	; 0
    208a:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	// send secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
    208e:	0e 94 83 0c 	call	0x1906	; 0x1906 <gpib_get_partner_sad>
    2092:	8f 3f       	cpi	r24, 0xFF	; 255
    2094:	51 f0       	breq	.+20     	; 0x20aa <send_command+0x6a>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
    2096:	0e 94 83 0c 	call	0x1906	; 0x1906 <gpib_get_partner_sad>
    209a:	80 66       	ori	r24, 0x60	; 96
    209c:	8a 83       	std	Y+2, r24	; 0x02
		gpib_cmd(controlString, 1);
    209e:	ce 01       	movw	r24, r28
    20a0:	02 96       	adiw	r24, 0x02	; 2
    20a2:	61 e0       	ldi	r22, 0x01	; 1
    20a4:	70 e0       	ldi	r23, 0x00	; 0
    20a6:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	}

	// set myself (controller) to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_address());
    20aa:	0e 94 8c 0c 	call	0x1918	; 0x1918 <gpib_get_address>
    20ae:	80 5c       	subi	r24, 0xC0	; 192
    20b0:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    20b2:	ce 01       	movw	r24, r28
    20b4:	02 96       	adiw	r24, 0x02	; 2
    20b6:	61 e0       	ldi	r22, 0x01	; 1
    20b8:	70 e0       	ldi	r23, 0x00	; 0
    20ba:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	//uart_puts("\n\rcommand: ");
	//uart_puts((char*) commandString);
	//uart_puts("\n\r");
	// gpib bus write
	// put out command to listeners
	if (mode==SEND_FULL_CMD) {
    20be:	8c 85       	ldd	r24, Y+12	; 0x0c
    20c0:	82 30       	cpi	r24, 0x02	; 2
    20c2:	39 f4       	brne	.+14     	; 0x20d2 <send_command+0x92>
		// full cmd , we have C string where length can be calculated by gpib_write()
		gpib_write(commandString, 0);
    20c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c8:	60 e0       	ldi	r22, 0x00	; 0
    20ca:	70 e0       	ldi	r23, 0x00	; 0
    20cc:	0e 94 a9 06 	call	0xd52	; 0xd52 <gpib_write>
    20d0:	06 c0       	rjmp	.+12     	; 0x20de <send_command+0x9e>
	} else {
		// partial command, we must give length value; buffer is full.
		gpib_write(commandString, COMMAND_INPUT_BUFFER_SIZE-1);
    20d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d6:	6f e4       	ldi	r22, 0x4F	; 79
    20d8:	70 e0       	ldi	r23, 0x00	; 0
    20da:	0e 94 a9 06 	call	0xd52	; 0xd52 <gpib_write>
	}

	// check if query or command only
	if (strchr((char*) commandString, '?') != NULL) {
    20de:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    20e2:	6f e3       	ldi	r22, 0x3F	; 63
    20e4:	70 e0       	ldi	r23, 0x00	; 0
    20e6:	0e 94 ab 01 	call	0x356	; 0x356 <strchr>
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	19 f0       	breq	.+6      	; 0x20f4 <send_command+0xb4>
		//uart_puts("Query. Will check for answer.\n\r");
		is_query = 1;
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	01 c0       	rjmp	.+2      	; 0x20f6 <send_command+0xb6>
	} else {
		//uart_puts("Command only.\n\r");
		is_query = 0;
    20f4:	19 82       	std	Y+1, r1	; 0x01
	}
	return is_query;
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20f8:	2c 96       	adiw	r28, 0x0c	; 12
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	cd bf       	out	0x3d, r28	; 61
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <receiveAnswer>:

/**
 * Receives answer after command was sent.
 */
void receiveAnswer() {
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	2c 97       	sbiw	r28, 0x0c	; 12
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	uchar b, e;
	uchar colptr=0;
    211e:	19 82       	std	Y+1, r1	; 0x01

	// UNT and UNL
	controlString[0] = G_CMD_UNT;
    2120:	8f e5       	ldi	r24, 0x5F	; 95
    2122:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
    2124:	ce 01       	movw	r24, r28
    2126:	03 96       	adiw	r24, 0x03	; 3
    2128:	61 e0       	ldi	r22, 0x01	; 1
    212a:	70 e0       	ldi	r23, 0x00	; 0
    212c:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    2130:	8f e3       	ldi	r24, 0x3F	; 63
    2132:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
    2134:	ce 01       	movw	r24, r28
    2136:	03 96       	adiw	r24, 0x03	; 3
    2138:	61 e0       	ldi	r22, 0x01	; 1
    213a:	70 e0       	ldi	r23, 0x00	; 0
    213c:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>

	// set myself (controller) to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_address());
    2140:	0e 94 8c 0c 	call	0x1918	; 0x1918 <gpib_get_address>
    2144:	80 5e       	subi	r24, 0xE0	; 224
    2146:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
    2148:	ce 01       	movw	r24, r28
    214a:	03 96       	adiw	r24, 0x03	; 3
    214c:	61 e0       	ldi	r22, 0x01	; 1
    214e:	70 e0       	ldi	r23, 0x00	; 0
    2150:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>

	// set device to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_partner_pad());
    2154:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <gpib_get_partner_pad>
    2158:	80 5c       	subi	r24, 0xC0	; 192
    215a:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
    215c:	ce 01       	movw	r24, r28
    215e:	03 96       	adiw	r24, 0x03	; 3
    2160:	61 e0       	ldi	r22, 0x01	; 1
    2162:	70 e0       	ldi	r23, 0x00	; 0
    2164:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	// secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
    2168:	0e 94 83 0c 	call	0x1906	; 0x1906 <gpib_get_partner_sad>
    216c:	8f 3f       	cpi	r24, 0xFF	; 255
    216e:	51 f0       	breq	.+20     	; 0x2184 <receiveAnswer+0x7a>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
    2170:	0e 94 83 0c 	call	0x1906	; 0x1906 <gpib_get_partner_sad>
    2174:	80 66       	ori	r24, 0x60	; 96
    2176:	8b 83       	std	Y+3, r24	; 0x03
		gpib_cmd(controlString, 1);
    2178:	ce 01       	movw	r24, r28
    217a:	03 96       	adiw	r24, 0x03	; 3
    217c:	61 e0       	ldi	r22, 0x01	; 1
    217e:	70 e0       	ldi	r23, 0x00	; 0
    2180:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	}

	// read the answer until EOI is detected (then e becomes true)
	do {
		// gpib bus receive
		e = gpib_receive(&b);
    2184:	ce 01       	movw	r24, r28
    2186:	0b 96       	adiw	r24, 0x0b	; 11
    2188:	0e 94 28 05 	call	0xa50	; 0xa50 <gpib_receive>
    218c:	8a 83       	std	Y+2, r24	; 0x02
		// write out character
		uart_putc(b);
    218e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2190:	0e 94 23 14 	call	0x2846	; 0x2846 <uart_putc>
		if (linebreak && (colptr++==linebreak)) {
    2194:	80 91 a0 03 	lds	r24, 0x03A0
    2198:	88 23       	and	r24, r24
    219a:	99 f0       	breq	.+38     	; 0x21c2 <receiveAnswer+0xb8>
    219c:	90 91 a0 03 	lds	r25, 0x03A0
    21a0:	1c 86       	std	Y+12, r1	; 0x0c
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	89 17       	cp	r24, r25
    21a6:	11 f4       	brne	.+4      	; 0x21ac <receiveAnswer+0xa2>
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	8c 87       	std	Y+12, r24	; 0x0c
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	8f 5f       	subi	r24, 0xFF	; 255
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    21b4:	88 23       	and	r24, r24
    21b6:	29 f0       	breq	.+10     	; 0x21c2 <receiveAnswer+0xb8>
			uart_puts_P("\n\r");
    21b8:	8c ef       	ldi	r24, 0xFC	; 252
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
			colptr=0;
    21c0:	19 82       	std	Y+1, r1	; 0x01
		}
		//sprintf((char*)buf,"%02x - %c\n\r", b, b);
		//uart_puts((char*)buf);
	} while (!e);
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	88 23       	and	r24, r24
    21c6:	f1 f2       	breq	.-68     	; 0x2184 <receiveAnswer+0x7a>

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
    21c8:	8f e5       	ldi	r24, 0x5F	; 95
    21ca:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
    21cc:	ce 01       	movw	r24, r28
    21ce:	03 96       	adiw	r24, 0x03	; 3
    21d0:	61 e0       	ldi	r22, 0x01	; 1
    21d2:	70 e0       	ldi	r23, 0x00	; 0
    21d4:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    21d8:	8f e3       	ldi	r24, 0x3F	; 63
    21da:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
    21dc:	ce 01       	movw	r24, r28
    21de:	03 96       	adiw	r24, 0x03	; 3
    21e0:	61 e0       	ldi	r22, 0x01	; 1
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	0e 94 c2 06 	call	0xd84	; 0xd84 <gpib_cmd>
}
    21e8:	2c 96       	adiw	r28, 0x0c	; 12
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	f8 94       	cli
    21ee:	de bf       	out	0x3e, r29	; 62
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	cd bf       	out	0x3d, r28	; 61
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <srq_occured>:

/**
 * Check if a SRQ occured
 */
uchar srq_occured(int* old_time) {
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <srq_occured+0x6>
    2200:	0f 92       	push	r0
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	9b 83       	std	Y+3, r25	; 0x03
    2208:	8a 83       	std	Y+2, r24	; 0x02
	uchar srq = 0;
    220a:	19 82       	std	Y+1, r1	; 0x01
	if (*old_time == 0) {
    220c:	ea 81       	ldd	r30, Y+2	; 0x02
    220e:	fb 81       	ldd	r31, Y+3	; 0x03
    2210:	80 81       	ld	r24, Z
    2212:	91 81       	ldd	r25, Z+1	; 0x01
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	49 f4       	brne	.+18     	; 0x222a <srq_occured+0x30>
		// old_time value initialization on first call with value s
		*old_time = s;
    2218:	80 91 13 05 	lds	r24, 0x0513
    221c:	88 2f       	mov	r24, r24
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	ea 81       	ldd	r30, Y+2	; 0x02
    2222:	fb 81       	ldd	r31, Y+3	; 0x03
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	80 83       	st	Z, r24
    2228:	1e c0       	rjmp	.+60     	; 0x2266 <srq_occured+0x6c>
	} else {
		if (s > *old_time) {
    222a:	80 91 13 05 	lds	r24, 0x0513
    222e:	28 2f       	mov	r18, r24
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	ea 81       	ldd	r30, Y+2	; 0x02
    2234:	fb 81       	ldd	r31, Y+3	; 0x03
    2236:	80 81       	ld	r24, Z
    2238:	91 81       	ldd	r25, Z+1	; 0x01
    223a:	82 17       	cp	r24, r18
    223c:	93 07       	cpc	r25, r19
    223e:	9c f4       	brge	.+38     	; 0x2266 <srq_occured+0x6c>
			// some time has passed - check if srq was set
			srq = bit_is_clear(PIND, G_SRQ);
    2240:	e0 e3       	ldi	r30, 0x30	; 48
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	88 2f       	mov	r24, r24
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	80 74       	andi	r24, 0x40	; 64
    224c:	90 70       	andi	r25, 0x00	; 0
    224e:	19 82       	std	Y+1, r1	; 0x01
    2250:	00 97       	sbiw	r24, 0x00	; 0
    2252:	11 f4       	brne	.+4      	; 0x2258 <srq_occured+0x5e>
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	89 83       	std	Y+1, r24	; 0x01
			if (srq)
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	88 23       	and	r24, r24
    225c:	21 f0       	breq	.+8      	; 0x2266 <srq_occured+0x6c>
				uart_puts_P("\n\rSRQ detected.\n\r");
    225e:	8f ef       	ldi	r24, 0xFF	; 255
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
		}
	}
	return srq;
    2266:	89 81       	ldd	r24, Y+1	; 0x01
}
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <handle_srq>:

/**
 * Handles SRQs by doing serial poll
 *
 */
uchar handle_srq(uchar *buf, int *buf_ptr) {
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	28 97       	sbiw	r28, 0x08	; 8
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	9d 83       	std	Y+5, r25	; 0x05
    228a:	8c 83       	std	Y+4, r24	; 0x04
    228c:	7f 83       	std	Y+7, r23	; 0x07
    228e:	6e 83       	std	Y+6, r22	; 0x06
	uchar command_ready = 0;
    2290:	19 82       	std	Y+1, r1	; 0x01
	uint8_t primary, secondary;

	if (!gpib_serial_poll(&primary, &secondary)) {
    2292:	ce 01       	movw	r24, r28
    2294:	02 96       	adiw	r24, 0x02	; 2
    2296:	9e 01       	movw	r18, r28
    2298:	2d 5f       	subi	r18, 0xFD	; 253
    229a:	3f 4f       	sbci	r19, 0xFF	; 255
    229c:	b9 01       	movw	r22, r18
    229e:	0e 94 23 0b 	call	0x1646	; 0x1646 <gpib_serial_poll>
    22a2:	88 23       	and	r24, r24
    22a4:	69 f4       	brne	.+26     	; 0x22c0 <handle_srq+0x4c>
		uart_puts_P(
    22a6:	8c e2       	ldi	r24, 0x2C	; 44
    22a8:	91 e0       	ldi	r25, 0x01	; 1
    22aa:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
				"\n\rSRQ emitter is not in list of known devices. SRQ Ignored.\n\r");
		uart_puts_P("\n\rSRQs are disabled now.\n\r");
    22ae:	81 e1       	ldi	r24, 0x11	; 17
    22b0:	91 e0       	ldi	r25, 0x01	; 1
    22b2:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
		srq_enabled = 0;
    22b6:	10 92 9f 03 	sts	0x039F, r1
		return command_ready;
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	88 87       	std	Y+8, r24	; 0x08
    22be:	3a c0       	rjmp	.+116    	; 0x2334 <handle_srq+0xc0>
	}
	gpib_set_partner_address(primary, secondary);
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	9b 81       	ldd	r25, Y+3	; 0x03
    22c4:	69 2f       	mov	r22, r25
    22c6:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <gpib_set_partner_address>

	if (gpib_get_flavour() == FLAVOUR_TEK) {
    22ca:	0e 94 a2 0c 	call	0x1944	; 0x1944 <gpib_get_flavour>
    22ce:	81 30       	cpi	r24, 0x01	; 1
    22d0:	79 f5       	brne	.+94     	; 0x2330 <handle_srq+0xbc>
		// Tek: check status for reason
		buf[0] = 'E';
    22d2:	ec 81       	ldd	r30, Y+4	; 0x04
    22d4:	fd 81       	ldd	r31, Y+5	; 0x05
    22d6:	85 e4       	ldi	r24, 0x45	; 69
    22d8:	80 83       	st	Z, r24
		buf[1] = 'V';
    22da:	8c 81       	ldd	r24, Y+4	; 0x04
    22dc:	9d 81       	ldd	r25, Y+5	; 0x05
    22de:	fc 01       	movw	r30, r24
    22e0:	31 96       	adiw	r30, 0x01	; 1
    22e2:	86 e5       	ldi	r24, 0x56	; 86
    22e4:	80 83       	st	Z, r24
		buf[2] = 'E';
    22e6:	8c 81       	ldd	r24, Y+4	; 0x04
    22e8:	9d 81       	ldd	r25, Y+5	; 0x05
    22ea:	fc 01       	movw	r30, r24
    22ec:	32 96       	adiw	r30, 0x02	; 2
    22ee:	85 e4       	ldi	r24, 0x45	; 69
    22f0:	80 83       	st	Z, r24
		buf[3] = 'N';
    22f2:	8c 81       	ldd	r24, Y+4	; 0x04
    22f4:	9d 81       	ldd	r25, Y+5	; 0x05
    22f6:	fc 01       	movw	r30, r24
    22f8:	33 96       	adiw	r30, 0x03	; 3
    22fa:	8e e4       	ldi	r24, 0x4E	; 78
    22fc:	80 83       	st	Z, r24
		buf[4] = 'T';
    22fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2300:	9d 81       	ldd	r25, Y+5	; 0x05
    2302:	fc 01       	movw	r30, r24
    2304:	34 96       	adiw	r30, 0x04	; 4
    2306:	84 e5       	ldi	r24, 0x54	; 84
    2308:	80 83       	st	Z, r24
		buf[5] = '?';
    230a:	8c 81       	ldd	r24, Y+4	; 0x04
    230c:	9d 81       	ldd	r25, Y+5	; 0x05
    230e:	fc 01       	movw	r30, r24
    2310:	35 96       	adiw	r30, 0x05	; 5
    2312:	8f e3       	ldi	r24, 0x3F	; 63
    2314:	80 83       	st	Z, r24
		buf[6] = '\0';
    2316:	8c 81       	ldd	r24, Y+4	; 0x04
    2318:	9d 81       	ldd	r25, Y+5	; 0x05
    231a:	fc 01       	movw	r30, r24
    231c:	36 96       	adiw	r30, 0x06	; 6
    231e:	10 82       	st	Z, r1
		*buf_ptr = 6;
    2320:	ee 81       	ldd	r30, Y+6	; 0x06
    2322:	ff 81       	ldd	r31, Y+7	; 0x07
    2324:	86 e0       	ldi	r24, 0x06	; 6
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	91 83       	std	Z+1, r25	; 0x01
    232a:	80 83       	st	Z, r24
		command_ready = 1;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	89 83       	std	Y+1, r24	; 0x01
	}
	return command_ready;
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	88 87       	std	Y+8, r24	; 0x08
    2334:	88 85       	ldd	r24, Y+8	; 0x08
}
    2336:	28 96       	adiw	r28, 0x08	; 8
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <printHelp>:

void printHelp() {
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
#ifdef WRITE
	sprintf(buf,
    2350:	00 d0       	rcall	.+0      	; 0x2352 <printHelp+0xa>
    2352:	00 d0       	rcall	.+0      	; 0x2354 <printHelp+0xc>
    2354:	00 d0       	rcall	.+0      	; 0x2356 <printHelp+0xe>
    2356:	ed b7       	in	r30, 0x3d	; 61
    2358:	fe b7       	in	r31, 0x3e	; 62
    235a:	31 96       	adiw	r30, 0x01	; 1
    235c:	82 ec       	ldi	r24, 0xC2	; 194
    235e:	94 e0       	ldi	r25, 0x04	; 4
    2360:	91 83       	std	Z+1, r25	; 0x01
    2362:	80 83       	st	Z, r24
    2364:	84 e1       	ldi	r24, 0x14	; 20
    2366:	93 e0       	ldi	r25, 0x03	; 3
    2368:	93 83       	std	Z+3, r25	; 0x03
    236a:	82 83       	std	Z+2, r24	; 0x02
    236c:	8c e4       	ldi	r24, 0x4C	; 76
    236e:	93 e0       	ldi	r25, 0x03	; 3
    2370:	95 83       	std	Z+5, r25	; 0x05
    2372:	84 83       	std	Z+4, r24	; 0x04
    2374:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sprintf>
    2378:	8d b7       	in	r24, 0x3d	; 61
    237a:	9e b7       	in	r25, 0x3e	; 62
    237c:	06 96       	adiw	r24, 0x06	; 6
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	9e bf       	out	0x3e, r25	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	8d bf       	out	0x3d, r24	; 61
			"\n\rGPIB Controller (Rev.%s) (c) spurtikus.de 2008-2015\n\r",
			REVISION);
	uart_puts(buf);
    2388:	82 ec       	ldi	r24, 0xC2	; 194
    238a:	94 e0       	ldi	r25, 0x04	; 4
    238c:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>
#else
	uart_puts("\n\rGPIB Listener Only (Rev.%s) (c) spurtikus.de 2008-2015\n\r", REVISION);
	uart_puts(buf);
#endif
	uart_puts_P("Internal commands:\n\r");
    2390:	84 e8       	ldi	r24, 0x84	; 132
    2392:	92 e0       	ldi	r25, 0x02	; 2
    2394:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
	uart_puts(
    2398:	80 e5       	ldi	r24, 0x50	; 80
    239a:	93 e0       	ldi	r25, 0x03	; 3
    239c:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>
			".a <primary> [<secondary>] - set prim./second. address of remote device\n\r");
	uart_puts_P(".s <secondary> - set secondary address of remote device\n\r");
    23a0:	8a e4       	ldi	r24, 0x4A	; 74
    23a2:	92 e0       	ldi	r25, 0x02	; 2
    23a4:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
	uart_puts_P(
    23a8:	8a e0       	ldi	r24, 0x0A	; 10
    23aa:	92 e0       	ldi	r25, 0x02	; 2
    23ac:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
			".+ <n> - add partner device address to list of known devices.\n\r");
	uart_puts_P(
    23b0:	85 ec       	ldi	r24, 0xC5	; 197
    23b2:	91 e0       	ldi	r25, 0x01	; 1
    23b4:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
			".- <n> - remove partner device address from list of known devices.\n\r");
	uart_puts_P(".x - toggle Xon/Xoff flow control.\n\r");
    23b8:	80 ea       	ldi	r24, 0xA0	; 160
    23ba:	91 e0       	ldi	r25, 0x01	; 1
    23bc:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
	uart_puts_P(".h - print help.\n\r");
    23c0:	8d e8       	ldi	r24, 0x8D	; 141
    23c2:	91 e0       	ldi	r25, 0x01	; 1
    23c4:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
	uart_puts_P(".i - dump info about GPIB lines.\n\r");
    23c8:	8a e6       	ldi	r24, 0x6A	; 106
    23ca:	91 e0       	ldi	r25, 0x01	; 1
    23cc:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
}
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <main>:
 * \brief Implementation of GPIB controller. Reads a command from RS232, sends it via bus.
 * If The command contains a '?', an answer from the device is expected and read in. The
 * answer then is printed out. If an SRQ occured, a serial poll is initiated.
 * 
 */
int main(void) {
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	00 d0       	rcall	.+0      	; 0x23dc <main+0x6>
    23dc:	00 d0       	rcall	.+0      	; 0x23de <main+0x8>
    23de:	0f 92       	push	r0
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
	int old_time = 0;
    23e4:	1d 82       	std	Y+5, r1	; 0x05
    23e6:	1c 82       	std	Y+4, r1	; 0x04
	uchar is_query = 0;
    23e8:	1b 82       	std	Y+3, r1	; 0x03
	uchar command_ready = 0;
    23ea:	1a 82       	std	Y+2, r1	; 0x02
	uchar do_prompt = 1;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	89 83       	std	Y+1, r24	; 0x01

	/*
	 *  Initialize UART library, pass baudrate and avr cpu clock 
	 *  with the macro UART_BAUD_SELECT()
	 */DI();
    23f0:	8c e0       	ldi	r24, 0x0C	; 12
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	0e 94 99 13 	call	0x2732	; 0x2732 <uart_init>

	/*
	 * now enable interrupt, since UART and TIMER library is interrupt controlled
	 */sei();
    23f8:	78 94       	sei

	/** print some usage infos */
	printHelp();
    23fa:	0e 94 a4 11 	call	0x2348	; 0x2348 <printHelp>
	/*
	 * WRITE: Controller talks and listens
	 */

	// init timer for timeout detection
	timer16_init();
    23fe:	0e 94 9a 12 	call	0x2534	; 0x2534 <timer16_init>

	// init gpib lines
	gpib_init();
    2402:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <gpib_init>
	// init controller part - assign bus 
	gpib_controller_assign(0x00);
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	0e 94 0f 06 	call	0xc1e	; 0xc1e <gpib_controller_assign>

	if (xonXoffMode) {
    240c:	80 91 9e 03 	lds	r24, 0x039E
    2410:	88 23       	and	r24, r24
    2412:	19 f0       	breq	.+6      	; 0x241a <main+0x44>
		uart_set_flow_control(FLOWCONTROL_XONXOFF);
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	0e 94 ba 12 	call	0x2574	; 0x2574 <uart_set_flow_control>
	 * 3. if command was a query, read the answer from device (become listener and set device to talker)
	 * 	4. check if SRQ occured and handle that
	 */
	for (;;) {

		if (do_prompt) {
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	88 23       	and	r24, r24
    241e:	29 f0       	breq	.+10     	; 0x242a <main+0x54>
			uart_puts("> ");
    2420:	8a e9       	ldi	r24, 0x9A	; 154
    2422:	93 e0       	ldi	r25, 0x03	; 3
    2424:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_puts>
			do_prompt = 0;
    2428:	19 82       	std	Y+1, r1	; 0x01
		}
		// input processing via rs232
		// command_ready may already been set by SRQ that occurred before
		if (!command_ready)
    242a:	8a 81       	ldd	r24, Y+2	; 0x02
    242c:	88 23       	and	r24, r24
    242e:	19 f4       	brne	.+6      	; 0x2436 <main+0x60>
			command_ready = input_process();
    2430:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <input_process>
    2434:	8a 83       	std	Y+2, r24	; 0x02

		if (command_ready) {
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	88 23       	and	r24, r24
    243a:	21 f0       	breq	.+8      	; 0x2444 <main+0x6e>
			uart_puts_P("\n\r");
    243c:	8f ec       	ldi	r24, 0xCF	; 207
    243e:	92 e0       	ldi	r25, 0x02	; 2
    2440:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
		}

		// check for internal commands
		if (command_ready && buf[0] == '.') {
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	88 23       	and	r24, r24
    2448:	81 f0       	breq	.+32     	; 0x246a <main+0x94>
    244a:	80 91 c2 04 	lds	r24, 0x04C2
    244e:	8e 32       	cpi	r24, 0x2E	; 46
    2450:	61 f4       	brne	.+24     	; 0x246a <main+0x94>
			// all internal cmds start with a '.'
			//uart_puts("\n\rInternal command: ");
			//uart_puts((char*) buf);
			//uart_puts("\n\r");
			handle_internal_commands(buf);
    2452:	82 ec       	ldi	r24, 0xC2	; 194
    2454:	94 e0       	ldi	r25, 0x04	; 4
    2456:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <handle_internal_commands>
			// reset local vars for command string reading
			buf_ptr = 0;
    245a:	10 92 b4 03 	sts	0x03B4, r1
    245e:	10 92 b3 03 	sts	0x03B3, r1
			command_ready = 0;
    2462:	1a 82       	std	Y+2, r1	; 0x02
			do_prompt = 1;
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	89 83       	std	Y+1, r24	; 0x01
			is_query = 0;
    2468:	1b 82       	std	Y+3, r1	; 0x03
		}

		// GPIB command. Check if a partner was defined.
		if (command_ready && (gpib_get_partner_pad() == ADDRESS_NOT_SET)) {
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	88 23       	and	r24, r24
    246e:	79 f0       	breq	.+30     	; 0x248e <main+0xb8>
    2470:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <gpib_get_partner_pad>
    2474:	8f 3f       	cpi	r24, 0xFF	; 255
    2476:	59 f4       	brne	.+22     	; 0x248e <main+0xb8>
			uart_puts_P("Device address is not set. Can not send command.\n\r");
    2478:	8c e9       	ldi	r24, 0x9C	; 156
    247a:	92 e0       	ldi	r25, 0x02	; 2
    247c:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
			// reset local vars for command string reading
			command_ready = 0;
    2480:	1a 82       	std	Y+2, r1	; 0x02
			buf_ptr = 0;
    2482:	10 92 b4 03 	sts	0x03B4, r1
    2486:	10 92 b3 03 	sts	0x03B3, r1
			do_prompt = 1;
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	89 83       	std	Y+1, r24	; 0x01
		}

		// GPIB command and valid partner. Send the command.
		if (command_ready) {
    248e:	8a 81       	ldd	r24, Y+2	; 0x02
    2490:	88 23       	and	r24, r24
    2492:	69 f0       	breq	.+26     	; 0x24ae <main+0xd8>
			//uart_puts("\n\rGPIB command: ");
			//uart_puts((char*) buf);
			//uart_puts("\n\r");
			is_query = send_command(buf, SEND_FULL_CMD);
    2494:	82 ec       	ldi	r24, 0xC2	; 194
    2496:	94 e0       	ldi	r25, 0x04	; 4
    2498:	62 e0       	ldi	r22, 0x02	; 2
    249a:	0e 94 20 10 	call	0x2040	; 0x2040 <send_command>
    249e:	8b 83       	std	Y+3, r24	; 0x03
			// reset local vars for command string reading
			command_ready = 0;
    24a0:	1a 82       	std	Y+2, r1	; 0x02
			buf_ptr = 0;
    24a2:	10 92 b4 03 	sts	0x03B4, r1
    24a6:	10 92 b3 03 	sts	0x03B3, r1
			do_prompt = 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	89 83       	std	Y+1, r24	; 0x01
		}

		// if we sent a query, read the answer
		if (is_query) {
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	88 23       	and	r24, r24
    24b2:	49 f0       	breq	.+18     	; 0x24c6 <main+0xf0>
			receiveAnswer();
    24b4:	0e 94 85 10 	call	0x210a	; 0x210a <receiveAnswer>
			// reset for next command
			is_query = 0;
    24b8:	1b 82       	std	Y+3, r1	; 0x03
			// some devices do not send cr,lf at command end, so create it always itself
			uart_puts_P("\n\r");
    24ba:	89 e9       	ldi	r24, 0x99	; 153
    24bc:	92 e0       	ldi	r25, 0x02	; 2
    24be:	0e 94 67 14 	call	0x28ce	; 0x28ce <uart_puts_p>
			do_prompt = 1;
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	89 83       	std	Y+1, r24	; 0x01
		}

		// SRQ detection - do this every time when time value s has changed
		// s is incremented every second. So we check once a second.
		if (srq_enabled && srq_occured(&old_time)) {
    24c6:	80 91 9f 03 	lds	r24, 0x039F
    24ca:	88 23       	and	r24, r24
    24cc:	09 f4       	brne	.+2      	; 0x24d0 <main+0xfa>
    24ce:	a5 cf       	rjmp	.-182    	; 0x241a <main+0x44>
    24d0:	ce 01       	movw	r24, r28
    24d2:	04 96       	adiw	r24, 0x04	; 4
    24d4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <srq_occured>
    24d8:	88 23       	and	r24, r24
    24da:	09 f4       	brne	.+2      	; 0x24de <main+0x108>
    24dc:	9e cf       	rjmp	.-196    	; 0x241a <main+0x44>
			command_ready = handle_srq(buf, &buf_ptr);
    24de:	82 ec       	ldi	r24, 0xC2	; 194
    24e0:	94 e0       	ldi	r25, 0x04	; 4
    24e2:	23 eb       	ldi	r18, 0xB3	; 179
    24e4:	33 e0       	ldi	r19, 0x03	; 3
    24e6:	b9 01       	movw	r22, r18
    24e8:	0e 94 3a 11 	call	0x2274	; 0x2274 <handle_srq>
    24ec:	8a 83       	std	Y+2, r24	; 0x02
    24ee:	95 cf       	rjmp	.-214    	; 0x241a <main+0x44>

000024f0 <__vector_7>:

/**
 * Interrupt Service Routine - do not call directly
 *  This routine is called when the Timer Value TCNT1 reaches the Output Compare Register Value OCR1A
 */ 
ISR(TIMER1_COMPA_vect) {
    24f0:	1f 92       	push	r1
    24f2:	0f 92       	push	r0
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	0f 92       	push	r0
    24f8:	11 24       	eor	r1, r1
    24fa:	8f 93       	push	r24
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
#if XTAL_CPU % DEBOUNCE
	OCR1A = XTAL_CPU / DEBOUNCE - 1;
#endif
	if (--timer==0) {
    2504:	80 91 12 05 	lds	r24, 0x0512
    2508:	81 50       	subi	r24, 0x01	; 1
    250a:	80 93 12 05 	sts	0x0512, r24
    250e:	80 91 12 05 	lds	r24, 0x0512
    2512:	88 23       	and	r24, r24
    2514:	39 f4       	brne	.+14     	; 0x2524 <__vector_7+0x34>
		timer=(uint8_t) DEBOUNCE;
    2516:	10 92 12 05 	sts	0x0512, r1
		s++;
    251a:	80 91 13 05 	lds	r24, 0x0513
    251e:	8f 5f       	subi	r24, 0xFF	; 255
    2520:	80 93 13 05 	sts	0x0513, r24
#if XTAL_CPU % DEBOUNCE
		OCR1A = XTAL_CPU / DEBOUNCE + XTAL_CPU % DEBOUNCE - 1;
#endif
	}
}
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	8f 91       	pop	r24
    252a:	0f 90       	pop	r0
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	0f 90       	pop	r0
    2530:	1f 90       	pop	r1
    2532:	18 95       	reti

00002534 <timer16_init>:
/**
 * Timer initialisation.
 *  \brief initializes all registers ands sets second value 's' to zero. Timer is immediately
 * started.
 */ 
void timer16_init( void ) {
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62

	// OCR1A=XTAL/DEBOUNCE-1 -> Bei Erreichen dieses Wertes (31249) wird die ISR besucht
	// die ISR wird also alle 1/256s aufgerufen. Wenn man dort also bis 256 hochzählt, ist genau
	// 1 Sekunde um! 256 ist der Wert der Variable timer und wird über das define DEBOUNCE festgelegt

	TCCR1B = (1<<CS10) ^ (1<<WGM12);	// Prescaler of 1 | CTC mode
    253c:	ee e4       	ldi	r30, 0x4E	; 78
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	89 e0       	ldi	r24, 0x09	; 9
    2542:	80 83       	st	Z, r24
	OCR1A  = F_CPU/DEBOUNCE-1;		// Output compare register value 
    2544:	ea e4       	ldi	r30, 0x4A	; 74
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	81 e1       	ldi	r24, 0x11	; 17
    254a:	9a e7       	ldi	r25, 0x7A	; 122
    254c:	91 83       	std	Z+1, r25	; 0x01
    254e:	80 83       	st	Z, r24
	TCNT1 = 0; // Start value for timer register
    2550:	ec e4       	ldi	r30, 0x4C	; 76
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	11 82       	std	Z+1, r1	; 0x01
    2556:	10 82       	st	Z, r1
	s=0; // Initialize second value (s) to zero
    2558:	10 92 13 05 	sts	0x0513, r1
	timer = (uint8_t)DEBOUNCE; 
    255c:	10 92 12 05 	sts	0x0512, r1
	TIMSK |= (1<<OCIE1A);		// activate timer interrupts which starts timer run
    2560:	a9 e5       	ldi	r26, 0x59	; 89
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	e9 e5       	ldi	r30, 0x59	; 89
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	80 61       	ori	r24, 0x10	; 16
    256c:	8c 93       	st	X, r24
}
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	08 95       	ret

00002574 <uart_set_flow_control>:
/** number of chars in rx buffer */
static volatile unsigned char chars_in_rx_buffer = 0;

void SendOutOfBand(unsigned char c);

void uart_set_flow_control(unsigned char _flowControl) {
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	0f 92       	push	r0
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	89 83       	std	Y+1, r24	; 0x01
	flowControl = _flowControl;
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	80 93 b5 03 	sts	0x03B5, r24
}
    2586:	0f 90       	pop	r0
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <uart_get_flow_control>:

unsigned char uart_get_flow_control() {
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
	return flowControl;
    2596:	80 91 b5 03 	lds	r24, 0x03B5
}
    259a:	cf 91       	pop	r28
    259c:	df 91       	pop	r29
    259e:	08 95       	ret

000025a0 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
 Function: UART Receive Complete interrupt
 Purpose:  called when the UART has received a character
 **************************************************************************/
{
    25a0:	1f 92       	push	r1
    25a2:	0f 92       	push	r0
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	0f 92       	push	r0
    25a8:	11 24       	eor	r1, r1
    25aa:	2f 93       	push	r18
    25ac:	3f 93       	push	r19
    25ae:	4f 93       	push	r20
    25b0:	5f 93       	push	r21
    25b2:	6f 93       	push	r22
    25b4:	7f 93       	push	r23
    25b6:	8f 93       	push	r24
    25b8:	9f 93       	push	r25
    25ba:	af 93       	push	r26
    25bc:	bf 93       	push	r27
    25be:	ef 93       	push	r30
    25c0:	ff 93       	push	r31
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	00 d0       	rcall	.+0      	; 0x25c8 <__vector_13+0x28>
    25c8:	00 d0       	rcall	.+0      	; 0x25ca <__vector_13+0x2a>
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	unsigned char usr;
	unsigned char lastRxError;

	/* read UART status register and UART data register */
	usr = UART0_STATUS;
    25ce:	eb e2       	ldi	r30, 0x2B	; 43
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	8a 83       	std	Y+2, r24	; 0x02
	data = UART0_DATA;
    25d6:	ec e2       	ldi	r30, 0x2C	; 44
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	8b 83       	std	Y+3, r24	; 0x03

	/* */
#if defined( AT90_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	88 71       	andi	r24, 0x18	; 24
    25e2:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif

	/* calculate buffer index */
	tmphead = (UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    25e4:	80 91 5b 04 	lds	r24, 0x045B
    25e8:	8f 5f       	subi	r24, 0xFF	; 255
    25ea:	8f 77       	andi	r24, 0x7F	; 127
    25ec:	8c 83       	std	Y+4, r24	; 0x04

	if (tmphead == UART_RxTail) {
    25ee:	90 91 5c 04 	lds	r25, 0x045C
    25f2:	8c 81       	ldd	r24, Y+4	; 0x04
    25f4:	89 17       	cp	r24, r25
    25f6:	19 f4       	brne	.+6      	; 0x25fe <__vector_13+0x5e>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    25f8:	82 e0       	ldi	r24, 0x02	; 2
    25fa:	89 83       	std	Y+1, r24	; 0x01
    25fc:	10 c0       	rjmp	.+32     	; 0x261e <__vector_13+0x7e>
	} else {
		/* store new index */
		UART_RxHead = tmphead;
    25fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2600:	80 93 5b 04 	sts	0x045B, r24
		/* store received data in buffer */
		UART_RxBuf[tmphead] = data;
    2604:	8c 81       	ldd	r24, Y+4	; 0x04
    2606:	88 2f       	mov	r24, r24
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	fc 01       	movw	r30, r24
    260c:	e7 52       	subi	r30, 0x27	; 39
    260e:	fc 4f       	sbci	r31, 0xFC	; 252
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	80 83       	st	Z, r24
		chars_in_rx_buffer++;
    2614:	80 91 b8 03 	lds	r24, 0x03B8
    2618:	8f 5f       	subi	r24, 0xFF	; 255
    261a:	80 93 b8 03 	sts	0x03B8, r24
	}

	if (flowControl == FLOWCONTROL_XONXOFF
    261e:	80 91 b5 03 	lds	r24, 0x03B5
    2622:	81 30       	cpi	r24, 0x01	; 1
    2624:	99 f4       	brne	.+38     	; 0x264c <__vector_13+0xac>
    2626:	80 91 b8 03 	lds	r24, 0x03B8
    262a:	81 36       	cpi	r24, 0x61	; 97
    262c:	78 f0       	brcs	.+30     	; 0x264c <__vector_13+0xac>
			&& chars_in_rx_buffer > UART_RX_BUFFER_MAX_MARK) {
		/* immediately send XOFF */
		oob_event = 1;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	80 93 b6 03 	sts	0x03B6, r24
		if (!after_xoff_sent) {
    2634:	80 91 b7 03 	lds	r24, 0x03B7
    2638:	88 23       	and	r24, r24
    263a:	31 f4       	brne	.+12     	; 0x2648 <__vector_13+0xa8>
			SendOutOfBand(XOFF);
    263c:	83 e1       	ldi	r24, 0x13	; 19
    263e:	0e 94 40 13 	call	0x2680	; 0x2680 <SendOutOfBand>
			after_xoff_sent = 1;
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	80 93 b7 03 	sts	0x03B7, r24
		}
		oob_event = 0;
    2648:	10 92 b6 03 	sts	0x03B6, r1
	}

	UART_LastRxError = lastRxError;
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	80 93 5d 04 	sts	0x045D, r24
}
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	ff 91       	pop	r31
    2660:	ef 91       	pop	r30
    2662:	bf 91       	pop	r27
    2664:	af 91       	pop	r26
    2666:	9f 91       	pop	r25
    2668:	8f 91       	pop	r24
    266a:	7f 91       	pop	r23
    266c:	6f 91       	pop	r22
    266e:	5f 91       	pop	r21
    2670:	4f 91       	pop	r20
    2672:	3f 91       	pop	r19
    2674:	2f 91       	pop	r18
    2676:	0f 90       	pop	r0
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	0f 90       	pop	r0
    267c:	1f 90       	pop	r1
    267e:	18 95       	reti

00002680 <SendOutOfBand>:

void SendOutOfBand(unsigned char c) {
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	0f 92       	push	r0
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << UDRE)))
    268c:	eb e2       	ldi	r30, 0x2B	; 43
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	88 2f       	mov	r24, r24
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	80 72       	andi	r24, 0x20	; 32
    2698:	90 70       	andi	r25, 0x00	; 0
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	b9 f3       	breq	.-18     	; 0x268c <SendOutOfBand+0xc>
		;
	UDR = c;
    269e:	ec e2       	ldi	r30, 0x2C	; 44
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	80 83       	st	Z, r24
}
    26a6:	0f 90       	pop	r0
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	08 95       	ret

000026ae <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
 Function: UART Data Register Empty interrupt
 Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
    26ae:	1f 92       	push	r1
    26b0:	0f 92       	push	r0
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	0f 92       	push	r0
    26b6:	11 24       	eor	r1, r1
    26b8:	8f 93       	push	r24
    26ba:	9f 93       	push	r25
    26bc:	af 93       	push	r26
    26be:	bf 93       	push	r27
    26c0:	ef 93       	push	r30
    26c2:	ff 93       	push	r31
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	0f 92       	push	r0
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;

	if (oob_event) {
    26ce:	80 91 b6 03 	lds	r24, 0x03B6
    26d2:	88 23       	and	r24, r24
    26d4:	01 f5       	brne	.+64     	; 0x2716 <__vector_14+0x68>
		/* suppress transmitting during oob handling */
		return;
	}
	if (UART_TxHead != UART_TxTail) {
    26d6:	90 91 59 04 	lds	r25, 0x0459
    26da:	80 91 5a 04 	lds	r24, 0x045A
    26de:	98 17       	cp	r25, r24
    26e0:	99 f0       	breq	.+38     	; 0x2708 <__vector_14+0x5a>
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    26e2:	80 91 5a 04 	lds	r24, 0x045A
    26e6:	8f 5f       	subi	r24, 0xFF	; 255
    26e8:	8f 71       	andi	r24, 0x1F	; 31
    26ea:	89 83       	std	Y+1, r24	; 0x01
		UART_TxTail = tmptail;
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	80 93 5a 04 	sts	0x045A, r24
		/* get one byte from buffer and write it to UART */
		UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
    26f2:	ac e2       	ldi	r26, 0x2C	; 44
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	88 2f       	mov	r24, r24
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	fc 01       	movw	r30, r24
    26fe:	e7 54       	subi	r30, 0x47	; 71
    2700:	fc 4f       	sbci	r31, 0xFC	; 252
    2702:	80 81       	ld	r24, Z
    2704:	8c 93       	st	X, r24
    2706:	07 c0       	rjmp	.+14     	; 0x2716 <__vector_14+0x68>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
    2708:	aa e2       	ldi	r26, 0x2A	; 42
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	ea e2       	ldi	r30, 0x2A	; 42
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	8f 7d       	andi	r24, 0xDF	; 223
    2714:	8c 93       	st	X, r24
	}
}
    2716:	0f 90       	pop	r0
    2718:	cf 91       	pop	r28
    271a:	df 91       	pop	r29
    271c:	ff 91       	pop	r31
    271e:	ef 91       	pop	r30
    2720:	bf 91       	pop	r27
    2722:	af 91       	pop	r26
    2724:	9f 91       	pop	r25
    2726:	8f 91       	pop	r24
    2728:	0f 90       	pop	r0
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	0f 90       	pop	r0
    272e:	1f 90       	pop	r1
    2730:	18 95       	reti

00002732 <uart_init>:
 Function: uart_init()
 Purpose:  initialize UART and set baudrate
 Input:    baudrate using macro UART_BAUD_SELECT()
 Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate) {
    2732:	df 93       	push	r29
    2734:	cf 93       	push	r28
    2736:	00 d0       	rcall	.+0      	; 0x2738 <uart_init+0x6>
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	9a 83       	std	Y+2, r25	; 0x02
    273e:	89 83       	std	Y+1, r24	; 0x01
	UART_TxHead = 0;
    2740:	10 92 59 04 	sts	0x0459, r1
	UART_TxTail = 0;
    2744:	10 92 5a 04 	sts	0x045A, r1
	UART_RxHead = 0;
    2748:	10 92 5b 04 	sts	0x045B, r1
	UART_RxTail = 0;
    274c:	10 92 5c 04 	sts	0x045C, r1
	/* enable UART receiver and transmmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if (baudrate & 0x8000) {
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	9a 81       	ldd	r25, Y+2	; 0x02
    2754:	99 23       	and	r25, r25
    2756:	4c f4       	brge	.+18     	; 0x276a <uart_init+0x38>
		UART0_STATUS = (1 << U2X);  //Enable 2x speed
    2758:	eb e2       	ldi	r30, 0x2B	; 43
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	82 e0       	ldi	r24, 0x02	; 2
    275e:	80 83       	st	Z, r24
		baudrate &= ~0x8000;
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	9a 81       	ldd	r25, Y+2	; 0x02
    2764:	9f 77       	andi	r25, 0x7F	; 127
    2766:	9a 83       	std	Y+2, r25	; 0x02
    2768:	89 83       	std	Y+1, r24	; 0x01
	}
	UBRRH = (unsigned char) (baudrate >> 8);
    276a:	e0 e4       	ldi	r30, 0x40	; 64
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	9a 81       	ldd	r25, Y+2	; 0x02
    2772:	89 2f       	mov	r24, r25
    2774:	99 27       	eor	r25, r25
    2776:	80 83       	st	Z, r24
	UBRRL = (unsigned char) baudrate;
    2778:	e9 e2       	ldi	r30, 0x29	; 41
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	80 83       	st	Z, r24

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | (1 << RXEN) | (1 << TXEN);
    2780:	ea e2       	ldi	r30, 0x2A	; 42
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	88 e9       	ldi	r24, 0x98	; 152
    2786:	80 83       	st	Z, r24

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
    2788:	e0 e4       	ldi	r30, 0x40	; 64
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	86 e8       	ldi	r24, 0x86	; 134
    278e:	80 83       	st	Z, r24
	/* Enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <uart_getc>:
 Function: uart_getc()
 Purpose:  return byte from ringbuffer
 Returns:  lower byte:  received byte from ringbuffer
 higher byte: last receive error
 **************************************************************************/
unsigned int uart_getc(void) {
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	00 d0       	rcall	.+0      	; 0x27a0 <uart_getc+0x6>
    27a0:	00 d0       	rcall	.+0      	; 0x27a2 <uart_getc+0x8>
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;
	unsigned char data;

	if (UART_RxHead == UART_RxTail) {
    27a6:	90 91 5b 04 	lds	r25, 0x045B
    27aa:	80 91 5c 04 	lds	r24, 0x045C
    27ae:	98 17       	cp	r25, r24
    27b0:	29 f4       	brne	.+10     	; 0x27bc <uart_getc+0x22>
		return UART_NO_DATA; /* no data available */
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	91 e0       	ldi	r25, 0x01	; 1
    27b6:	9c 83       	std	Y+4, r25	; 0x04
    27b8:	8b 83       	std	Y+3, r24	; 0x03
    27ba:	3c c0       	rjmp	.+120    	; 0x2834 <uart_getc+0x9a>
	}

	/* calculate /store buffer index */
	tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    27bc:	80 91 5c 04 	lds	r24, 0x045C
    27c0:	8f 5f       	subi	r24, 0xFF	; 255
    27c2:	8f 77       	andi	r24, 0x7F	; 127
    27c4:	8a 83       	std	Y+2, r24	; 0x02
	UART_RxTail = tmptail;
    27c6:	8a 81       	ldd	r24, Y+2	; 0x02
    27c8:	80 93 5c 04 	sts	0x045C, r24

	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];
    27cc:	8a 81       	ldd	r24, Y+2	; 0x02
    27ce:	88 2f       	mov	r24, r24
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	fc 01       	movw	r30, r24
    27d4:	e7 52       	subi	r30, 0x27	; 39
    27d6:	fc 4f       	sbci	r31, 0xFC	; 252
    27d8:	80 81       	ld	r24, Z
    27da:	89 83       	std	Y+1, r24	; 0x01
	if (chars_in_rx_buffer > 0) {
    27dc:	80 91 b8 03 	lds	r24, 0x03B8
    27e0:	88 23       	and	r24, r24
    27e2:	29 f0       	breq	.+10     	; 0x27ee <uart_getc+0x54>
		chars_in_rx_buffer--;
    27e4:	80 91 b8 03 	lds	r24, 0x03B8
    27e8:	81 50       	subi	r24, 0x01	; 1
    27ea:	80 93 b8 03 	sts	0x03B8, r24
	}
	if ((flowControl == FLOWCONTROL_XONXOFF) && after_xoff_sent) {
    27ee:	80 91 b5 03 	lds	r24, 0x03B5
    27f2:	81 30       	cpi	r24, 0x01	; 1
    27f4:	91 f4       	brne	.+36     	; 0x281a <uart_getc+0x80>
    27f6:	80 91 b7 03 	lds	r24, 0x03B7
    27fa:	88 23       	and	r24, r24
    27fc:	71 f0       	breq	.+28     	; 0x281a <uart_getc+0x80>
		if (chars_in_rx_buffer <= UART_RX_BUFFER_MIN_MARK) {
    27fe:	80 91 b8 03 	lds	r24, 0x03B8
    2802:	81 31       	cpi	r24, 0x11	; 17
    2804:	50 f4       	brcc	.+20     	; 0x281a <uart_getc+0x80>
			/* immediately send XON */
			oob_event = 1;
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	80 93 b6 03 	sts	0x03B6, r24
			SendOutOfBand(XON);
    280c:	81 e1       	ldi	r24, 0x11	; 17
    280e:	0e 94 40 13 	call	0x2680	; 0x2680 <SendOutOfBand>
			after_xoff_sent = 0;
    2812:	10 92 b7 03 	sts	0x03B7, r1
			oob_event = 0;
    2816:	10 92 b6 03 	sts	0x03B6, r1
		}
	}

	return (UART_LastRxError << 8) + data;
    281a:	80 91 5d 04 	lds	r24, 0x045D
    281e:	88 2f       	mov	r24, r24
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	38 2f       	mov	r19, r24
    2824:	22 27       	eor	r18, r18
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	88 2f       	mov	r24, r24
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	82 0f       	add	r24, r18
    282e:	93 1f       	adc	r25, r19
    2830:	9c 83       	std	Y+4, r25	; 0x04
    2832:	8b 83       	std	Y+3, r24	; 0x03
    2834:	8b 81       	ldd	r24, Y+3	; 0x03
    2836:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	0f 90       	pop	r0
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	08 95       	ret

00002846 <uart_putc>:
 Function: uart_putc()
 Purpose:  write byte to ringbuffer for transmitting via UART
 Input:    byte to be transmitted
 Returns:  none
 **************************************************************************/
void uart_putc(unsigned char data) {
    2846:	df 93       	push	r29
    2848:	cf 93       	push	r28
    284a:	00 d0       	rcall	.+0      	; 0x284c <uart_putc+0x6>
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char tmphead;

	tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    2852:	80 91 59 04 	lds	r24, 0x0459
    2856:	8f 5f       	subi	r24, 0xFF	; 255
    2858:	8f 71       	andi	r24, 0x1F	; 31
    285a:	89 83       	std	Y+1, r24	; 0x01

	while (tmphead == UART_TxTail) {
    285c:	90 91 5a 04 	lds	r25, 0x045A
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	89 17       	cp	r24, r25
    2864:	d9 f3       	breq	.-10     	; 0x285c <uart_putc+0x16>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	88 2f       	mov	r24, r24
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	fc 01       	movw	r30, r24
    286e:	e7 54       	subi	r30, 0x47	; 71
    2870:	fc 4f       	sbci	r31, 0xFC	; 252
    2872:	8a 81       	ldd	r24, Y+2	; 0x02
    2874:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	80 93 59 04 	sts	0x0459, r24

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    287c:	aa e2       	ldi	r26, 0x2A	; 42
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	ea e2       	ldi	r30, 0x2A	; 42
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	80 62       	ori	r24, 0x20	; 32
    2888:	8c 93       	st	X, r24

}/* uart_putc */
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	08 95       	ret

00002894 <uart_puts>:
 Function: uart_puts()
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	00 d0       	rcall	.+0      	; 0x289a <uart_puts+0x6>
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	9a 83       	std	Y+2, r25	; 0x02
    28a0:	89 83       	std	Y+1, r24	; 0x01
    28a2:	0b c0       	rjmp	.+22     	; 0x28ba <uart_puts+0x26>
	while (*s)
		uart_putc(*s++);
    28a4:	e9 81       	ldd	r30, Y+1	; 0x01
    28a6:	fa 81       	ldd	r31, Y+2	; 0x02
    28a8:	20 81       	ld	r18, Z
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	9a 81       	ldd	r25, Y+2	; 0x02
    28ae:	01 96       	adiw	r24, 0x01	; 1
    28b0:	9a 83       	std	Y+2, r25	; 0x02
    28b2:	89 83       	std	Y+1, r24	; 0x01
    28b4:	82 2f       	mov	r24, r18
    28b6:	0e 94 23 14 	call	0x2846	; 0x2846 <uart_putc>
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
	while (*s)
    28ba:	e9 81       	ldd	r30, Y+1	; 0x01
    28bc:	fa 81       	ldd	r31, Y+2	; 0x02
    28be:	80 81       	ld	r24, Z
    28c0:	88 23       	and	r24, r24
    28c2:	81 f7       	brne	.-32     	; 0x28a4 <uart_puts+0x10>
		uart_putc(*s++);

}/* uart_puts */
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	cf 91       	pop	r28
    28ca:	df 91       	pop	r29
    28cc:	08 95       	ret

000028ce <uart_puts_p>:
 Function: uart_puts_p()
 Purpose:  transmit string from program memory to UART
 Input:    program memory string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
    28ce:	df 93       	push	r29
    28d0:	cf 93       	push	r28
    28d2:	00 d0       	rcall	.+0      	; 0x28d4 <uart_puts_p+0x6>
    28d4:	00 d0       	rcall	.+0      	; 0x28d6 <uart_puts_p+0x8>
    28d6:	00 d0       	rcall	.+0      	; 0x28d8 <uart_puts_p+0xa>
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	9d 83       	std	Y+5, r25	; 0x05
    28de:	8c 83       	std	Y+4, r24	; 0x04
    28e0:	03 c0       	rjmp	.+6      	; 0x28e8 <uart_puts_p+0x1a>
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
		uart_putc(c);
    28e2:	8e 81       	ldd	r24, Y+6	; 0x06
    28e4:	0e 94 23 14 	call	0x2846	; 0x2846 <uart_putc>
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
    28e8:	8c 81       	ldd	r24, Y+4	; 0x04
    28ea:	9d 81       	ldd	r25, Y+5	; 0x05
    28ec:	9b 83       	std	Y+3, r25	; 0x03
    28ee:	8a 83       	std	Y+2, r24	; 0x02
    28f0:	8c 81       	ldd	r24, Y+4	; 0x04
    28f2:	9d 81       	ldd	r25, Y+5	; 0x05
    28f4:	01 96       	adiw	r24, 0x01	; 1
    28f6:	9d 83       	std	Y+5, r25	; 0x05
    28f8:	8c 83       	std	Y+4, r24	; 0x04
    28fa:	ea 81       	ldd	r30, Y+2	; 0x02
    28fc:	fb 81       	ldd	r31, Y+3	; 0x03
    28fe:	84 91       	lpm	r24, Z+
    2900:	89 83       	std	Y+1, r24	; 0x01
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	8e 83       	std	Y+6, r24	; 0x06
    2906:	8e 81       	ldd	r24, Y+6	; 0x06
    2908:	88 23       	and	r24, r24
    290a:	59 f7       	brne	.-42     	; 0x28e2 <uart_puts_p+0x14>
		uart_putc(c);

}/* uart_puts_p */
    290c:	26 96       	adiw	r28, 0x06	; 6
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	08 95       	ret

0000291e <__prologue_saves__>:
    291e:	2f 92       	push	r2
    2920:	3f 92       	push	r3
    2922:	4f 92       	push	r4
    2924:	5f 92       	push	r5
    2926:	6f 92       	push	r6
    2928:	7f 92       	push	r7
    292a:	8f 92       	push	r8
    292c:	9f 92       	push	r9
    292e:	af 92       	push	r10
    2930:	bf 92       	push	r11
    2932:	cf 92       	push	r12
    2934:	df 92       	push	r13
    2936:	ef 92       	push	r14
    2938:	ff 92       	push	r15
    293a:	0f 93       	push	r16
    293c:	1f 93       	push	r17
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
    2946:	ca 1b       	sub	r28, r26
    2948:	db 0b       	sbc	r29, r27
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	de bf       	out	0x3e, r29	; 62
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	cd bf       	out	0x3d, r28	; 61
    2954:	09 94       	ijmp

00002956 <__epilogue_restores__>:
    2956:	2a 88       	ldd	r2, Y+18	; 0x12
    2958:	39 88       	ldd	r3, Y+17	; 0x11
    295a:	48 88       	ldd	r4, Y+16	; 0x10
    295c:	5f 84       	ldd	r5, Y+15	; 0x0f
    295e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2960:	7d 84       	ldd	r7, Y+13	; 0x0d
    2962:	8c 84       	ldd	r8, Y+12	; 0x0c
    2964:	9b 84       	ldd	r9, Y+11	; 0x0b
    2966:	aa 84       	ldd	r10, Y+10	; 0x0a
    2968:	b9 84       	ldd	r11, Y+9	; 0x09
    296a:	c8 84       	ldd	r12, Y+8	; 0x08
    296c:	df 80       	ldd	r13, Y+7	; 0x07
    296e:	ee 80       	ldd	r14, Y+6	; 0x06
    2970:	fd 80       	ldd	r15, Y+5	; 0x05
    2972:	0c 81       	ldd	r16, Y+4	; 0x04
    2974:	1b 81       	ldd	r17, Y+3	; 0x03
    2976:	aa 81       	ldd	r26, Y+2	; 0x02
    2978:	b9 81       	ldd	r27, Y+1	; 0x01
    297a:	ce 0f       	add	r28, r30
    297c:	d1 1d       	adc	r29, r1
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	ed 01       	movw	r28, r26
    298a:	08 95       	ret

0000298c <_exit>:
    298c:	f8 94       	cli

0000298e <__stop_program>:
    298e:	ff cf       	rjmp	.-2      	; 0x298e <__stop_program>

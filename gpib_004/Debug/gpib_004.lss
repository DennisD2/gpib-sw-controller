
gpib_004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d3e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003fc  00800060  00002d3e  00002db2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000170  0080045c  0000313a  000031ae  2**0
                  ALLOC
  3 .stab         00005afc  00000000  00000000  000031b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000296c  00000000  00000000  00008cac  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__ctors_end>
       4:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
       8:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
       c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      10:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      14:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      18:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      1c:	0c 94 28 14 	jmp	0x2850	; 0x2850 <__vector_7>
      20:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      24:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      28:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      2c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      30:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      34:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__vector_13>
      38:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__vector_14>
      3c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      40:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      44:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      48:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      4c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      50:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>

00000054 <__c.1890>:
      54:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
      64:	65 72 72 6f 72 3a 20 00                             error: .

0000006c <__c.1888>:
      6c:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
      7c:	6f 72 3a 20 00                                      or: .

00000081 <__c.1886>:
      81:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
      91:	3a 20 00                                            : .

00000094 <__c.1914>:
      94:	43 6f 6d 6d 61 6e 64 20 6f 76 65 72 66 6c 6f 77     Command overflow
      a4:	2e 00                                               ..

000000a6 <__c.1990>:
      a6:	75 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 0a     unknown command.
      b6:	0d 00                                               ..

000000b8 <__c.1986>:
      b8:	43 68 65 63 6b 20 65 72 72 6f 72 73 0a 0d 00        Check errors...

000000c7 <__c.1981>:
      c7:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      d7:	74 72 6f 6c 20 6f 66 66 0a 0d 00                    trol off...

000000e2 <__c.1979>:
      e2:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      f2:	74 72 6f 6c 20 6f 6e 0a 0d 00                       trol on...

000000fc <__c.2036>:
      fc:	0a 0d 00                                            ...

000000ff <__c.2053>:
      ff:	0a 0d 53 52 51 20 64 65 74 65 63 74 65 64 2e 0a     ..SRQ detected..
     10f:	0d 00                                               ..

00000111 <__c.2083>:
     111:	0a 0d 53 52 51 73 20 61 72 65 20 64 69 73 61 62     ..SRQs are disab
     121:	6c 65 64 20 6e 6f 77 2e 0a 0d 00                    led now....

0000012c <__c.2081>:
     12c:	0a 0d 53 52 51 20 65 6d 69 74 74 65 72 20 69 73     ..SRQ emitter is
     13c:	20 6e 6f 74 20 69 6e 20 6c 69 73 74 20 6f 66 20      not in list of 
     14c:	6b 6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 20 53     known devices. S
     15c:	52 51 20 49 67 6e 6f 72 65 64 2e 0a 0d 00           RQ Ignored....

0000016a <__c.2116>:
     16a:	2e 69 20 2d 20 64 75 6d 70 20 69 6e 66 6f 20 61     .i - dump info a
     17a:	62 6f 75 74 20 47 50 49 42 20 6c 69 6e 65 73 2e     bout GPIB lines.
     18a:	0a 0d 00                                            ...

0000018d <__c.2114>:
     18d:	2e 68 20 2d 20 70 72 69 6e 74 20 68 65 6c 70 2e     .h - print help.
     19d:	0a 0d 00                                            ...

000001a0 <__c.2112>:
     1a0:	2e 78 20 2d 20 74 6f 67 67 6c 65 20 58 6f 6e 2f     .x - toggle Xon/
     1b0:	58 6f 66 66 20 66 6c 6f 77 20 63 6f 6e 74 72 6f     Xoff flow contro
     1c0:	6c 2e 0a 0d 00                                      l....

000001c5 <__c.2110>:
     1c5:	2e 2d 20 3c 6e 3e 20 2d 20 72 65 6d 6f 76 65 20     .- <n> - remove 
     1d5:	70 61 72 74 6e 65 72 20 64 65 76 69 63 65 20 61     partner device a
     1e5:	64 64 72 65 73 73 20 66 72 6f 6d 20 6c 69 73 74     ddress from list
     1f5:	20 6f 66 20 6b 6e 6f 77 6e 20 64 65 76 69 63 65      of known device
     205:	73 2e 0a 0d 00                                      s....

0000020a <__c.2108>:
     20a:	2e 2b 20 3c 6e 3e 20 2d 20 61 64 64 20 70 61 72     .+ <n> - add par
     21a:	74 6e 65 72 20 64 65 76 69 63 65 20 61 64 64 72     tner device addr
     22a:	65 73 73 20 74 6f 20 6c 69 73 74 20 6f 66 20 6b     ess to list of k
     23a:	6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 0a 0d 00     nown devices....

0000024a <__c.2106>:
     24a:	2e 73 20 3c 73 65 63 6f 6e 64 61 72 79 3e 20 2d     .s <secondary> -
     25a:	20 73 65 74 20 73 65 63 6f 6e 64 61 72 79 20 61      set secondary a
     26a:	64 64 72 65 73 73 20 6f 66 20 72 65 6d 6f 74 65     ddress of remote
     27a:	20 64 65 76 69 63 65 0a 0d 00                        device...

00000284 <__c.2104>:
     284:	49 6e 74 65 72 6e 61 6c 20 63 6f 6d 6d 61 6e 64     Internal command
     294:	73 3a 0a 0d 00                                      s:...

00000299 <__c.2138>:
     299:	0a 0d 00                                            ...

0000029c <__c.2136>:
     29c:	0a 0d 00                                            ...

0000029f <__c.2133>:
     29f:	44 65 76 69 63 65 20 61 64 64 72 65 73 73 20 69     Device address i
     2af:	73 20 6e 6f 74 20 73 65 74 2e 20 43 61 6e 20 6e     s not set. Can n
     2bf:	6f 74 20 73 65 6e 64 20 63 6f 6d 6d 61 6e 64 2e     ot send command.
     2cf:	0a 0d 00                                            ...

000002d2 <__c.2131>:
     2d2:	0a 0d 00 00                                         ....

000002d6 <__ctors_end>:
     2d6:	11 24       	eor	r1, r1
     2d8:	1f be       	out	0x3f, r1	; 63
     2da:	cf e5       	ldi	r28, 0x5F	; 95
     2dc:	d8 e0       	ldi	r29, 0x08	; 8
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	cd bf       	out	0x3d, r28	; 61

000002e2 <__do_copy_data>:
     2e2:	14 e0       	ldi	r17, 0x04	; 4
     2e4:	a0 e6       	ldi	r26, 0x60	; 96
     2e6:	b0 e0       	ldi	r27, 0x00	; 0
     2e8:	ee e3       	ldi	r30, 0x3E	; 62
     2ea:	fd e2       	ldi	r31, 0x2D	; 45
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <.do_copy_data_start>

000002ee <.do_copy_data_loop>:
     2ee:	05 90       	lpm	r0, Z+
     2f0:	0d 92       	st	X+, r0

000002f2 <.do_copy_data_start>:
     2f2:	ac 35       	cpi	r26, 0x5C	; 92
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <.do_copy_data_loop>

000002f8 <__do_clear_bss>:
     2f8:	15 e0       	ldi	r17, 0x05	; 5
     2fa:	ac e5       	ldi	r26, 0x5C	; 92
     2fc:	b4 e0       	ldi	r27, 0x04	; 4
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	ac 3c       	cpi	r26, 0xCC	; 204
     304:	b1 07       	cpc	r27, r17
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 08 14 	call	0x2810	; 0x2810 <main>
     30c:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <_exit>

00000310 <__bad_interrupt>:
     310:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000314 <atoi>:
     314:	fc 01       	movw	r30, r24
     316:	88 27       	eor	r24, r24
     318:	99 27       	eor	r25, r25
     31a:	e8 94       	clt
     31c:	21 91       	ld	r18, Z+
     31e:	20 32       	cpi	r18, 0x20	; 32
     320:	e9 f3       	breq	.-6      	; 0x31c <atoi+0x8>
     322:	29 30       	cpi	r18, 0x09	; 9
     324:	10 f0       	brcs	.+4      	; 0x32a <atoi+0x16>
     326:	2e 30       	cpi	r18, 0x0E	; 14
     328:	c8 f3       	brcs	.-14     	; 0x31c <atoi+0x8>
     32a:	2b 32       	cpi	r18, 0x2B	; 43
     32c:	41 f0       	breq	.+16     	; 0x33e <atoi+0x2a>
     32e:	2d 32       	cpi	r18, 0x2D	; 45
     330:	39 f4       	brne	.+14     	; 0x340 <atoi+0x2c>
     332:	68 94       	set
     334:	04 c0       	rjmp	.+8      	; 0x33e <atoi+0x2a>
     336:	0e 94 f6 01 	call	0x3ec	; 0x3ec <__mulhi_const_10>
     33a:	82 0f       	add	r24, r18
     33c:	91 1d       	adc	r25, r1
     33e:	21 91       	ld	r18, Z+
     340:	20 53       	subi	r18, 0x30	; 48
     342:	2a 30       	cpi	r18, 0x0A	; 10
     344:	c0 f3       	brcs	.-16     	; 0x336 <atoi+0x22>
     346:	1e f4       	brtc	.+6      	; 0x34e <atoi+0x3a>
     348:	90 95       	com	r25
     34a:	81 95       	neg	r24
     34c:	9f 4f       	sbci	r25, 0xFF	; 255
     34e:	08 95       	ret

00000350 <strtok>:
     350:	4c e5       	ldi	r20, 0x5C	; 92
     352:	54 e0       	ldi	r21, 0x04	; 4
     354:	0e 94 c4 01 	call	0x388	; 0x388 <strtok_r>
     358:	08 95       	ret

0000035a <strlen>:
     35a:	fc 01       	movw	r30, r24
     35c:	01 90       	ld	r0, Z+
     35e:	00 20       	and	r0, r0
     360:	e9 f7       	brne	.-6      	; 0x35c <strlen+0x2>
     362:	80 95       	com	r24
     364:	90 95       	com	r25
     366:	8e 0f       	add	r24, r30
     368:	9f 1f       	adc	r25, r31
     36a:	08 95       	ret

0000036c <strncmp>:
     36c:	fb 01       	movw	r30, r22
     36e:	dc 01       	movw	r26, r24
     370:	41 50       	subi	r20, 0x01	; 1
     372:	50 40       	sbci	r21, 0x00	; 0
     374:	30 f0       	brcs	.+12     	; 0x382 <strncmp+0x16>
     376:	8d 91       	ld	r24, X+
     378:	01 90       	ld	r0, Z+
     37a:	80 19       	sub	r24, r0
     37c:	19 f4       	brne	.+6      	; 0x384 <strncmp+0x18>
     37e:	00 20       	and	r0, r0
     380:	b9 f7       	brne	.-18     	; 0x370 <strncmp+0x4>
     382:	88 1b       	sub	r24, r24
     384:	99 0b       	sbc	r25, r25
     386:	08 95       	ret

00000388 <strtok_r>:
     388:	00 97       	sbiw	r24, 0x00	; 0
     38a:	31 f4       	brne	.+12     	; 0x398 <strtok_r+0x10>
     38c:	da 01       	movw	r26, r20
     38e:	8d 91       	ld	r24, X+
     390:	9c 91       	ld	r25, X
     392:	00 97       	sbiw	r24, 0x00	; 0
     394:	09 f4       	brne	.+2      	; 0x398 <strtok_r+0x10>
     396:	0e c0       	rjmp	.+28     	; 0x3b4 <strtok_r+0x2c>
     398:	dc 01       	movw	r26, r24
     39a:	fb 01       	movw	r30, r22
     39c:	3d 91       	ld	r19, X+
     39e:	21 91       	ld	r18, Z+
     3a0:	22 23       	and	r18, r18
     3a2:	19 f0       	breq	.+6      	; 0x3aa <strtok_r+0x22>
     3a4:	32 17       	cp	r19, r18
     3a6:	c9 f3       	breq	.-14     	; 0x39a <strtok_r+0x12>
     3a8:	fa cf       	rjmp	.-12     	; 0x39e <strtok_r+0x16>
     3aa:	33 23       	and	r19, r19
     3ac:	31 f4       	brne	.+12     	; 0x3ba <strtok_r+0x32>
     3ae:	da 01       	movw	r26, r20
     3b0:	1d 92       	st	X+, r1
     3b2:	1c 92       	st	X, r1
     3b4:	88 27       	eor	r24, r24
     3b6:	99 27       	eor	r25, r25
     3b8:	08 95       	ret
     3ba:	11 97       	sbiw	r26, 0x01	; 1
     3bc:	af 93       	push	r26
     3be:	bf 93       	push	r27
     3c0:	fb 01       	movw	r30, r22
     3c2:	3d 91       	ld	r19, X+
     3c4:	21 91       	ld	r18, Z+
     3c6:	32 17       	cp	r19, r18
     3c8:	71 f4       	brne	.+28     	; 0x3e6 <strtok_r+0x5e>
     3ca:	33 23       	and	r19, r19
     3cc:	21 f4       	brne	.+8      	; 0x3d6 <strtok_r+0x4e>
     3ce:	88 27       	eor	r24, r24
     3d0:	99 27       	eor	r25, r25
     3d2:	11 97       	sbiw	r26, 0x01	; 1
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <strtok_r+0x52>
     3d6:	1e 92       	st	-X, r1
     3d8:	11 96       	adiw	r26, 0x01	; 1
     3da:	fa 01       	movw	r30, r20
     3dc:	a1 93       	st	Z+, r26
     3de:	b0 83       	st	Z, r27
     3e0:	9f 91       	pop	r25
     3e2:	8f 91       	pop	r24
     3e4:	08 95       	ret
     3e6:	22 23       	and	r18, r18
     3e8:	69 f7       	brne	.-38     	; 0x3c4 <strtok_r+0x3c>
     3ea:	ea cf       	rjmp	.-44     	; 0x3c0 <strtok_r+0x38>

000003ec <__mulhi_const_10>:
     3ec:	7a e0       	ldi	r23, 0x0A	; 10
     3ee:	97 9f       	mul	r25, r23
     3f0:	90 2d       	mov	r25, r0
     3f2:	87 9f       	mul	r24, r23
     3f4:	80 2d       	mov	r24, r0
     3f6:	91 0d       	add	r25, r1
     3f8:	11 24       	eor	r1, r1
     3fa:	08 95       	ret

000003fc <sprintf>:
     3fc:	ae e0       	ldi	r26, 0x0E	; 14
     3fe:	b0 e0       	ldi	r27, 0x00	; 0
     400:	e4 e0       	ldi	r30, 0x04	; 4
     402:	f2 e0       	ldi	r31, 0x02	; 2
     404:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__prologue_saves__+0x1c>
     408:	0d 89       	ldd	r16, Y+21	; 0x15
     40a:	1e 89       	ldd	r17, Y+22	; 0x16
     40c:	86 e0       	ldi	r24, 0x06	; 6
     40e:	8c 83       	std	Y+4, r24	; 0x04
     410:	1a 83       	std	Y+2, r17	; 0x02
     412:	09 83       	std	Y+1, r16	; 0x01
     414:	8f ef       	ldi	r24, 0xFF	; 255
     416:	9f e7       	ldi	r25, 0x7F	; 127
     418:	9e 83       	std	Y+6, r25	; 0x06
     41a:	8d 83       	std	Y+5, r24	; 0x05
     41c:	9e 01       	movw	r18, r28
     41e:	27 5e       	subi	r18, 0xE7	; 231
     420:	3f 4f       	sbci	r19, 0xFF	; 255
     422:	ce 01       	movw	r24, r28
     424:	01 96       	adiw	r24, 0x01	; 1
     426:	6f 89       	ldd	r22, Y+23	; 0x17
     428:	78 8d       	ldd	r23, Y+24	; 0x18
     42a:	a9 01       	movw	r20, r18
     42c:	0e 94 22 02 	call	0x444	; 0x444 <vfprintf>
     430:	2f 81       	ldd	r18, Y+7	; 0x07
     432:	38 85       	ldd	r19, Y+8	; 0x08
     434:	02 0f       	add	r16, r18
     436:	13 1f       	adc	r17, r19
     438:	f8 01       	movw	r30, r16
     43a:	10 82       	st	Z, r1
     43c:	2e 96       	adiw	r28, 0x0e	; 14
     43e:	e4 e0       	ldi	r30, 0x04	; 4
     440:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__epilogue_restores__+0x1c>

00000444 <vfprintf>:
     444:	ab e0       	ldi	r26, 0x0B	; 11
     446:	b0 e0       	ldi	r27, 0x00	; 0
     448:	e8 e2       	ldi	r30, 0x28	; 40
     44a:	f2 e0       	ldi	r31, 0x02	; 2
     44c:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__prologue_saves__>
     450:	3c 01       	movw	r6, r24
     452:	2b 01       	movw	r4, r22
     454:	5a 01       	movw	r10, r20
     456:	fc 01       	movw	r30, r24
     458:	17 82       	std	Z+7, r1	; 0x07
     45a:	16 82       	std	Z+6, r1	; 0x06
     45c:	83 81       	ldd	r24, Z+3	; 0x03
     45e:	81 fd       	sbrc	r24, 1
     460:	03 c0       	rjmp	.+6      	; 0x468 <vfprintf+0x24>
     462:	6f ef       	ldi	r22, 0xFF	; 255
     464:	7f ef       	ldi	r23, 0xFF	; 255
     466:	c6 c1       	rjmp	.+908    	; 0x7f4 <vfprintf+0x3b0>
     468:	9a e0       	ldi	r25, 0x0A	; 10
     46a:	89 2e       	mov	r8, r25
     46c:	1e 01       	movw	r2, r28
     46e:	08 94       	sec
     470:	21 1c       	adc	r2, r1
     472:	31 1c       	adc	r3, r1
     474:	f3 01       	movw	r30, r6
     476:	23 81       	ldd	r18, Z+3	; 0x03
     478:	f2 01       	movw	r30, r4
     47a:	23 fd       	sbrc	r18, 3
     47c:	85 91       	lpm	r24, Z+
     47e:	23 ff       	sbrs	r18, 3
     480:	81 91       	ld	r24, Z+
     482:	2f 01       	movw	r4, r30
     484:	88 23       	and	r24, r24
     486:	09 f4       	brne	.+2      	; 0x48a <vfprintf+0x46>
     488:	b2 c1       	rjmp	.+868    	; 0x7ee <vfprintf+0x3aa>
     48a:	85 32       	cpi	r24, 0x25	; 37
     48c:	39 f4       	brne	.+14     	; 0x49c <vfprintf+0x58>
     48e:	23 fd       	sbrc	r18, 3
     490:	85 91       	lpm	r24, Z+
     492:	23 ff       	sbrs	r18, 3
     494:	81 91       	ld	r24, Z+
     496:	2f 01       	movw	r4, r30
     498:	85 32       	cpi	r24, 0x25	; 37
     49a:	29 f4       	brne	.+10     	; 0x4a6 <vfprintf+0x62>
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	b3 01       	movw	r22, r6
     4a0:	0e 94 15 04 	call	0x82a	; 0x82a <fputc>
     4a4:	e7 cf       	rjmp	.-50     	; 0x474 <vfprintf+0x30>
     4a6:	98 2f       	mov	r25, r24
     4a8:	ff 24       	eor	r15, r15
     4aa:	ee 24       	eor	r14, r14
     4ac:	99 24       	eor	r9, r9
     4ae:	ff e1       	ldi	r31, 0x1F	; 31
     4b0:	ff 15       	cp	r31, r15
     4b2:	d0 f0       	brcs	.+52     	; 0x4e8 <vfprintf+0xa4>
     4b4:	9b 32       	cpi	r25, 0x2B	; 43
     4b6:	69 f0       	breq	.+26     	; 0x4d2 <vfprintf+0x8e>
     4b8:	9c 32       	cpi	r25, 0x2C	; 44
     4ba:	28 f4       	brcc	.+10     	; 0x4c6 <vfprintf+0x82>
     4bc:	90 32       	cpi	r25, 0x20	; 32
     4be:	59 f0       	breq	.+22     	; 0x4d6 <vfprintf+0x92>
     4c0:	93 32       	cpi	r25, 0x23	; 35
     4c2:	91 f4       	brne	.+36     	; 0x4e8 <vfprintf+0xa4>
     4c4:	0e c0       	rjmp	.+28     	; 0x4e2 <vfprintf+0x9e>
     4c6:	9d 32       	cpi	r25, 0x2D	; 45
     4c8:	49 f0       	breq	.+18     	; 0x4dc <vfprintf+0x98>
     4ca:	90 33       	cpi	r25, 0x30	; 48
     4cc:	69 f4       	brne	.+26     	; 0x4e8 <vfprintf+0xa4>
     4ce:	41 e0       	ldi	r20, 0x01	; 1
     4d0:	24 c0       	rjmp	.+72     	; 0x51a <vfprintf+0xd6>
     4d2:	52 e0       	ldi	r21, 0x02	; 2
     4d4:	f5 2a       	or	r15, r21
     4d6:	84 e0       	ldi	r24, 0x04	; 4
     4d8:	f8 2a       	or	r15, r24
     4da:	28 c0       	rjmp	.+80     	; 0x52c <vfprintf+0xe8>
     4dc:	98 e0       	ldi	r25, 0x08	; 8
     4de:	f9 2a       	or	r15, r25
     4e0:	25 c0       	rjmp	.+74     	; 0x52c <vfprintf+0xe8>
     4e2:	e0 e1       	ldi	r30, 0x10	; 16
     4e4:	fe 2a       	or	r15, r30
     4e6:	22 c0       	rjmp	.+68     	; 0x52c <vfprintf+0xe8>
     4e8:	f7 fc       	sbrc	r15, 7
     4ea:	29 c0       	rjmp	.+82     	; 0x53e <vfprintf+0xfa>
     4ec:	89 2f       	mov	r24, r25
     4ee:	80 53       	subi	r24, 0x30	; 48
     4f0:	8a 30       	cpi	r24, 0x0A	; 10
     4f2:	70 f4       	brcc	.+28     	; 0x510 <vfprintf+0xcc>
     4f4:	f6 fe       	sbrs	r15, 6
     4f6:	05 c0       	rjmp	.+10     	; 0x502 <vfprintf+0xbe>
     4f8:	98 9c       	mul	r9, r8
     4fa:	90 2c       	mov	r9, r0
     4fc:	11 24       	eor	r1, r1
     4fe:	98 0e       	add	r9, r24
     500:	15 c0       	rjmp	.+42     	; 0x52c <vfprintf+0xe8>
     502:	e8 9c       	mul	r14, r8
     504:	e0 2c       	mov	r14, r0
     506:	11 24       	eor	r1, r1
     508:	e8 0e       	add	r14, r24
     50a:	f0 e2       	ldi	r31, 0x20	; 32
     50c:	ff 2a       	or	r15, r31
     50e:	0e c0       	rjmp	.+28     	; 0x52c <vfprintf+0xe8>
     510:	9e 32       	cpi	r25, 0x2E	; 46
     512:	29 f4       	brne	.+10     	; 0x51e <vfprintf+0xda>
     514:	f6 fc       	sbrc	r15, 6
     516:	6b c1       	rjmp	.+726    	; 0x7ee <vfprintf+0x3aa>
     518:	40 e4       	ldi	r20, 0x40	; 64
     51a:	f4 2a       	or	r15, r20
     51c:	07 c0       	rjmp	.+14     	; 0x52c <vfprintf+0xe8>
     51e:	9c 36       	cpi	r25, 0x6C	; 108
     520:	19 f4       	brne	.+6      	; 0x528 <vfprintf+0xe4>
     522:	50 e8       	ldi	r21, 0x80	; 128
     524:	f5 2a       	or	r15, r21
     526:	02 c0       	rjmp	.+4      	; 0x52c <vfprintf+0xe8>
     528:	98 36       	cpi	r25, 0x68	; 104
     52a:	49 f4       	brne	.+18     	; 0x53e <vfprintf+0xfa>
     52c:	f2 01       	movw	r30, r4
     52e:	23 fd       	sbrc	r18, 3
     530:	95 91       	lpm	r25, Z+
     532:	23 ff       	sbrs	r18, 3
     534:	91 91       	ld	r25, Z+
     536:	2f 01       	movw	r4, r30
     538:	99 23       	and	r25, r25
     53a:	09 f0       	breq	.+2      	; 0x53e <vfprintf+0xfa>
     53c:	b8 cf       	rjmp	.-144    	; 0x4ae <vfprintf+0x6a>
     53e:	89 2f       	mov	r24, r25
     540:	85 54       	subi	r24, 0x45	; 69
     542:	83 30       	cpi	r24, 0x03	; 3
     544:	18 f0       	brcs	.+6      	; 0x54c <vfprintf+0x108>
     546:	80 52       	subi	r24, 0x20	; 32
     548:	83 30       	cpi	r24, 0x03	; 3
     54a:	38 f4       	brcc	.+14     	; 0x55a <vfprintf+0x116>
     54c:	44 e0       	ldi	r20, 0x04	; 4
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	a4 0e       	add	r10, r20
     552:	b5 1e       	adc	r11, r21
     554:	5f e3       	ldi	r21, 0x3F	; 63
     556:	59 83       	std	Y+1, r21	; 0x01
     558:	0f c0       	rjmp	.+30     	; 0x578 <vfprintf+0x134>
     55a:	93 36       	cpi	r25, 0x63	; 99
     55c:	31 f0       	breq	.+12     	; 0x56a <vfprintf+0x126>
     55e:	93 37       	cpi	r25, 0x73	; 115
     560:	79 f0       	breq	.+30     	; 0x580 <vfprintf+0x13c>
     562:	93 35       	cpi	r25, 0x53	; 83
     564:	09 f0       	breq	.+2      	; 0x568 <vfprintf+0x124>
     566:	56 c0       	rjmp	.+172    	; 0x614 <vfprintf+0x1d0>
     568:	20 c0       	rjmp	.+64     	; 0x5aa <vfprintf+0x166>
     56a:	f5 01       	movw	r30, r10
     56c:	80 81       	ld	r24, Z
     56e:	89 83       	std	Y+1, r24	; 0x01
     570:	42 e0       	ldi	r20, 0x02	; 2
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	a4 0e       	add	r10, r20
     576:	b5 1e       	adc	r11, r21
     578:	61 01       	movw	r12, r2
     57a:	01 e0       	ldi	r16, 0x01	; 1
     57c:	10 e0       	ldi	r17, 0x00	; 0
     57e:	12 c0       	rjmp	.+36     	; 0x5a4 <vfprintf+0x160>
     580:	f5 01       	movw	r30, r10
     582:	c0 80       	ld	r12, Z
     584:	d1 80       	ldd	r13, Z+1	; 0x01
     586:	f6 fc       	sbrc	r15, 6
     588:	03 c0       	rjmp	.+6      	; 0x590 <vfprintf+0x14c>
     58a:	6f ef       	ldi	r22, 0xFF	; 255
     58c:	7f ef       	ldi	r23, 0xFF	; 255
     58e:	02 c0       	rjmp	.+4      	; 0x594 <vfprintf+0x150>
     590:	69 2d       	mov	r22, r9
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	42 e0       	ldi	r20, 0x02	; 2
     596:	50 e0       	ldi	r21, 0x00	; 0
     598:	a4 0e       	add	r10, r20
     59a:	b5 1e       	adc	r11, r21
     59c:	c6 01       	movw	r24, r12
     59e:	0e 94 0a 04 	call	0x814	; 0x814 <strnlen>
     5a2:	8c 01       	movw	r16, r24
     5a4:	5f e7       	ldi	r21, 0x7F	; 127
     5a6:	f5 22       	and	r15, r21
     5a8:	14 c0       	rjmp	.+40     	; 0x5d2 <vfprintf+0x18e>
     5aa:	f5 01       	movw	r30, r10
     5ac:	c0 80       	ld	r12, Z
     5ae:	d1 80       	ldd	r13, Z+1	; 0x01
     5b0:	f6 fc       	sbrc	r15, 6
     5b2:	03 c0       	rjmp	.+6      	; 0x5ba <vfprintf+0x176>
     5b4:	6f ef       	ldi	r22, 0xFF	; 255
     5b6:	7f ef       	ldi	r23, 0xFF	; 255
     5b8:	02 c0       	rjmp	.+4      	; 0x5be <vfprintf+0x17a>
     5ba:	69 2d       	mov	r22, r9
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	42 e0       	ldi	r20, 0x02	; 2
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	a4 0e       	add	r10, r20
     5c4:	b5 1e       	adc	r11, r21
     5c6:	c6 01       	movw	r24, r12
     5c8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <strnlen_P>
     5cc:	8c 01       	movw	r16, r24
     5ce:	50 e8       	ldi	r21, 0x80	; 128
     5d0:	f5 2a       	or	r15, r21
     5d2:	f3 fe       	sbrs	r15, 3
     5d4:	07 c0       	rjmp	.+14     	; 0x5e4 <vfprintf+0x1a0>
     5d6:	1a c0       	rjmp	.+52     	; 0x60c <vfprintf+0x1c8>
     5d8:	80 e2       	ldi	r24, 0x20	; 32
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	b3 01       	movw	r22, r6
     5de:	0e 94 15 04 	call	0x82a	; 0x82a <fputc>
     5e2:	ea 94       	dec	r14
     5e4:	8e 2d       	mov	r24, r14
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	08 17       	cp	r16, r24
     5ea:	19 07       	cpc	r17, r25
     5ec:	a8 f3       	brcs	.-22     	; 0x5d8 <vfprintf+0x194>
     5ee:	0e c0       	rjmp	.+28     	; 0x60c <vfprintf+0x1c8>
     5f0:	f6 01       	movw	r30, r12
     5f2:	f7 fc       	sbrc	r15, 7
     5f4:	85 91       	lpm	r24, Z+
     5f6:	f7 fe       	sbrs	r15, 7
     5f8:	81 91       	ld	r24, Z+
     5fa:	6f 01       	movw	r12, r30
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	b3 01       	movw	r22, r6
     600:	0e 94 15 04 	call	0x82a	; 0x82a <fputc>
     604:	e1 10       	cpse	r14, r1
     606:	ea 94       	dec	r14
     608:	01 50       	subi	r16, 0x01	; 1
     60a:	10 40       	sbci	r17, 0x00	; 0
     60c:	01 15       	cp	r16, r1
     60e:	11 05       	cpc	r17, r1
     610:	79 f7       	brne	.-34     	; 0x5f0 <vfprintf+0x1ac>
     612:	ea c0       	rjmp	.+468    	; 0x7e8 <vfprintf+0x3a4>
     614:	94 36       	cpi	r25, 0x64	; 100
     616:	11 f0       	breq	.+4      	; 0x61c <vfprintf+0x1d8>
     618:	99 36       	cpi	r25, 0x69	; 105
     61a:	69 f5       	brne	.+90     	; 0x676 <vfprintf+0x232>
     61c:	f7 fe       	sbrs	r15, 7
     61e:	08 c0       	rjmp	.+16     	; 0x630 <vfprintf+0x1ec>
     620:	f5 01       	movw	r30, r10
     622:	20 81       	ld	r18, Z
     624:	31 81       	ldd	r19, Z+1	; 0x01
     626:	42 81       	ldd	r20, Z+2	; 0x02
     628:	53 81       	ldd	r21, Z+3	; 0x03
     62a:	84 e0       	ldi	r24, 0x04	; 4
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0a c0       	rjmp	.+20     	; 0x644 <vfprintf+0x200>
     630:	f5 01       	movw	r30, r10
     632:	80 81       	ld	r24, Z
     634:	91 81       	ldd	r25, Z+1	; 0x01
     636:	9c 01       	movw	r18, r24
     638:	44 27       	eor	r20, r20
     63a:	37 fd       	sbrc	r19, 7
     63c:	40 95       	com	r20
     63e:	54 2f       	mov	r21, r20
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	a8 0e       	add	r10, r24
     646:	b9 1e       	adc	r11, r25
     648:	9f e6       	ldi	r25, 0x6F	; 111
     64a:	f9 22       	and	r15, r25
     64c:	57 ff       	sbrs	r21, 7
     64e:	09 c0       	rjmp	.+18     	; 0x662 <vfprintf+0x21e>
     650:	50 95       	com	r21
     652:	40 95       	com	r20
     654:	30 95       	com	r19
     656:	21 95       	neg	r18
     658:	3f 4f       	sbci	r19, 0xFF	; 255
     65a:	4f 4f       	sbci	r20, 0xFF	; 255
     65c:	5f 4f       	sbci	r21, 0xFF	; 255
     65e:	e0 e8       	ldi	r30, 0x80	; 128
     660:	fe 2a       	or	r15, r30
     662:	ca 01       	movw	r24, r20
     664:	b9 01       	movw	r22, r18
     666:	a1 01       	movw	r20, r2
     668:	2a e0       	ldi	r18, 0x0A	; 10
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	0e 94 41 04 	call	0x882	; 0x882 <__ultoa_invert>
     670:	d8 2e       	mov	r13, r24
     672:	d2 18       	sub	r13, r2
     674:	40 c0       	rjmp	.+128    	; 0x6f6 <vfprintf+0x2b2>
     676:	95 37       	cpi	r25, 0x75	; 117
     678:	29 f4       	brne	.+10     	; 0x684 <vfprintf+0x240>
     67a:	1f 2d       	mov	r17, r15
     67c:	1f 7e       	andi	r17, 0xEF	; 239
     67e:	2a e0       	ldi	r18, 0x0A	; 10
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	1d c0       	rjmp	.+58     	; 0x6be <vfprintf+0x27a>
     684:	1f 2d       	mov	r17, r15
     686:	19 7f       	andi	r17, 0xF9	; 249
     688:	9f 36       	cpi	r25, 0x6F	; 111
     68a:	61 f0       	breq	.+24     	; 0x6a4 <vfprintf+0x260>
     68c:	90 37       	cpi	r25, 0x70	; 112
     68e:	20 f4       	brcc	.+8      	; 0x698 <vfprintf+0x254>
     690:	98 35       	cpi	r25, 0x58	; 88
     692:	09 f0       	breq	.+2      	; 0x696 <vfprintf+0x252>
     694:	ac c0       	rjmp	.+344    	; 0x7ee <vfprintf+0x3aa>
     696:	0f c0       	rjmp	.+30     	; 0x6b6 <vfprintf+0x272>
     698:	90 37       	cpi	r25, 0x70	; 112
     69a:	39 f0       	breq	.+14     	; 0x6aa <vfprintf+0x266>
     69c:	98 37       	cpi	r25, 0x78	; 120
     69e:	09 f0       	breq	.+2      	; 0x6a2 <vfprintf+0x25e>
     6a0:	a6 c0       	rjmp	.+332    	; 0x7ee <vfprintf+0x3aa>
     6a2:	04 c0       	rjmp	.+8      	; 0x6ac <vfprintf+0x268>
     6a4:	28 e0       	ldi	r18, 0x08	; 8
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	0a c0       	rjmp	.+20     	; 0x6be <vfprintf+0x27a>
     6aa:	10 61       	ori	r17, 0x10	; 16
     6ac:	14 fd       	sbrc	r17, 4
     6ae:	14 60       	ori	r17, 0x04	; 4
     6b0:	20 e1       	ldi	r18, 0x10	; 16
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	04 c0       	rjmp	.+8      	; 0x6be <vfprintf+0x27a>
     6b6:	14 fd       	sbrc	r17, 4
     6b8:	16 60       	ori	r17, 0x06	; 6
     6ba:	20 e1       	ldi	r18, 0x10	; 16
     6bc:	32 e0       	ldi	r19, 0x02	; 2
     6be:	17 ff       	sbrs	r17, 7
     6c0:	08 c0       	rjmp	.+16     	; 0x6d2 <vfprintf+0x28e>
     6c2:	f5 01       	movw	r30, r10
     6c4:	60 81       	ld	r22, Z
     6c6:	71 81       	ldd	r23, Z+1	; 0x01
     6c8:	82 81       	ldd	r24, Z+2	; 0x02
     6ca:	93 81       	ldd	r25, Z+3	; 0x03
     6cc:	44 e0       	ldi	r20, 0x04	; 4
     6ce:	50 e0       	ldi	r21, 0x00	; 0
     6d0:	08 c0       	rjmp	.+16     	; 0x6e2 <vfprintf+0x29e>
     6d2:	f5 01       	movw	r30, r10
     6d4:	80 81       	ld	r24, Z
     6d6:	91 81       	ldd	r25, Z+1	; 0x01
     6d8:	bc 01       	movw	r22, r24
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	42 e0       	ldi	r20, 0x02	; 2
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	a4 0e       	add	r10, r20
     6e4:	b5 1e       	adc	r11, r21
     6e6:	a1 01       	movw	r20, r2
     6e8:	0e 94 41 04 	call	0x882	; 0x882 <__ultoa_invert>
     6ec:	d8 2e       	mov	r13, r24
     6ee:	d2 18       	sub	r13, r2
     6f0:	8f e7       	ldi	r24, 0x7F	; 127
     6f2:	f8 2e       	mov	r15, r24
     6f4:	f1 22       	and	r15, r17
     6f6:	f6 fe       	sbrs	r15, 6
     6f8:	0b c0       	rjmp	.+22     	; 0x710 <vfprintf+0x2cc>
     6fa:	5e ef       	ldi	r21, 0xFE	; 254
     6fc:	f5 22       	and	r15, r21
     6fe:	d9 14       	cp	r13, r9
     700:	38 f4       	brcc	.+14     	; 0x710 <vfprintf+0x2cc>
     702:	f4 fe       	sbrs	r15, 4
     704:	07 c0       	rjmp	.+14     	; 0x714 <vfprintf+0x2d0>
     706:	f2 fc       	sbrc	r15, 2
     708:	05 c0       	rjmp	.+10     	; 0x714 <vfprintf+0x2d0>
     70a:	8f ee       	ldi	r24, 0xEF	; 239
     70c:	f8 22       	and	r15, r24
     70e:	02 c0       	rjmp	.+4      	; 0x714 <vfprintf+0x2d0>
     710:	1d 2d       	mov	r17, r13
     712:	01 c0       	rjmp	.+2      	; 0x716 <vfprintf+0x2d2>
     714:	19 2d       	mov	r17, r9
     716:	f4 fe       	sbrs	r15, 4
     718:	0d c0       	rjmp	.+26     	; 0x734 <vfprintf+0x2f0>
     71a:	fe 01       	movw	r30, r28
     71c:	ed 0d       	add	r30, r13
     71e:	f1 1d       	adc	r31, r1
     720:	80 81       	ld	r24, Z
     722:	80 33       	cpi	r24, 0x30	; 48
     724:	19 f4       	brne	.+6      	; 0x72c <vfprintf+0x2e8>
     726:	99 ee       	ldi	r25, 0xE9	; 233
     728:	f9 22       	and	r15, r25
     72a:	08 c0       	rjmp	.+16     	; 0x73c <vfprintf+0x2f8>
     72c:	1f 5f       	subi	r17, 0xFF	; 255
     72e:	f2 fe       	sbrs	r15, 2
     730:	05 c0       	rjmp	.+10     	; 0x73c <vfprintf+0x2f8>
     732:	03 c0       	rjmp	.+6      	; 0x73a <vfprintf+0x2f6>
     734:	8f 2d       	mov	r24, r15
     736:	86 78       	andi	r24, 0x86	; 134
     738:	09 f0       	breq	.+2      	; 0x73c <vfprintf+0x2f8>
     73a:	1f 5f       	subi	r17, 0xFF	; 255
     73c:	0f 2d       	mov	r16, r15
     73e:	f3 fc       	sbrc	r15, 3
     740:	14 c0       	rjmp	.+40     	; 0x76a <vfprintf+0x326>
     742:	f0 fe       	sbrs	r15, 0
     744:	0f c0       	rjmp	.+30     	; 0x764 <vfprintf+0x320>
     746:	1e 15       	cp	r17, r14
     748:	10 f0       	brcs	.+4      	; 0x74e <vfprintf+0x30a>
     74a:	9d 2c       	mov	r9, r13
     74c:	0b c0       	rjmp	.+22     	; 0x764 <vfprintf+0x320>
     74e:	9d 2c       	mov	r9, r13
     750:	9e 0c       	add	r9, r14
     752:	91 1a       	sub	r9, r17
     754:	1e 2d       	mov	r17, r14
     756:	06 c0       	rjmp	.+12     	; 0x764 <vfprintf+0x320>
     758:	80 e2       	ldi	r24, 0x20	; 32
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	b3 01       	movw	r22, r6
     75e:	0e 94 15 04 	call	0x82a	; 0x82a <fputc>
     762:	1f 5f       	subi	r17, 0xFF	; 255
     764:	1e 15       	cp	r17, r14
     766:	c0 f3       	brcs	.-16     	; 0x758 <vfprintf+0x314>
     768:	04 c0       	rjmp	.+8      	; 0x772 <vfprintf+0x32e>
     76a:	1e 15       	cp	r17, r14
     76c:	10 f4       	brcc	.+4      	; 0x772 <vfprintf+0x32e>
     76e:	e1 1a       	sub	r14, r17
     770:	01 c0       	rjmp	.+2      	; 0x774 <vfprintf+0x330>
     772:	ee 24       	eor	r14, r14
     774:	04 ff       	sbrs	r16, 4
     776:	0f c0       	rjmp	.+30     	; 0x796 <vfprintf+0x352>
     778:	80 e3       	ldi	r24, 0x30	; 48
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	b3 01       	movw	r22, r6
     77e:	0e 94 15 04 	call	0x82a	; 0x82a <fputc>
     782:	02 ff       	sbrs	r16, 2
     784:	1d c0       	rjmp	.+58     	; 0x7c0 <vfprintf+0x37c>
     786:	01 fd       	sbrc	r16, 1
     788:	03 c0       	rjmp	.+6      	; 0x790 <vfprintf+0x34c>
     78a:	88 e7       	ldi	r24, 0x78	; 120
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e c0       	rjmp	.+28     	; 0x7ac <vfprintf+0x368>
     790:	88 e5       	ldi	r24, 0x58	; 88
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0b c0       	rjmp	.+22     	; 0x7ac <vfprintf+0x368>
     796:	80 2f       	mov	r24, r16
     798:	86 78       	andi	r24, 0x86	; 134
     79a:	91 f0       	breq	.+36     	; 0x7c0 <vfprintf+0x37c>
     79c:	01 ff       	sbrs	r16, 1
     79e:	02 c0       	rjmp	.+4      	; 0x7a4 <vfprintf+0x360>
     7a0:	8b e2       	ldi	r24, 0x2B	; 43
     7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <vfprintf+0x362>
     7a4:	80 e2       	ldi	r24, 0x20	; 32
     7a6:	f7 fc       	sbrc	r15, 7
     7a8:	8d e2       	ldi	r24, 0x2D	; 45
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	b3 01       	movw	r22, r6
     7ae:	0e 94 15 04 	call	0x82a	; 0x82a <fputc>
     7b2:	06 c0       	rjmp	.+12     	; 0x7c0 <vfprintf+0x37c>
     7b4:	80 e3       	ldi	r24, 0x30	; 48
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	b3 01       	movw	r22, r6
     7ba:	0e 94 15 04 	call	0x82a	; 0x82a <fputc>
     7be:	9a 94       	dec	r9
     7c0:	d9 14       	cp	r13, r9
     7c2:	c0 f3       	brcs	.-16     	; 0x7b4 <vfprintf+0x370>
     7c4:	da 94       	dec	r13
     7c6:	f1 01       	movw	r30, r2
     7c8:	ed 0d       	add	r30, r13
     7ca:	f1 1d       	adc	r31, r1
     7cc:	80 81       	ld	r24, Z
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	b3 01       	movw	r22, r6
     7d2:	0e 94 15 04 	call	0x82a	; 0x82a <fputc>
     7d6:	dd 20       	and	r13, r13
     7d8:	a9 f7       	brne	.-22     	; 0x7c4 <vfprintf+0x380>
     7da:	06 c0       	rjmp	.+12     	; 0x7e8 <vfprintf+0x3a4>
     7dc:	80 e2       	ldi	r24, 0x20	; 32
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	b3 01       	movw	r22, r6
     7e2:	0e 94 15 04 	call	0x82a	; 0x82a <fputc>
     7e6:	ea 94       	dec	r14
     7e8:	ee 20       	and	r14, r14
     7ea:	c1 f7       	brne	.-16     	; 0x7dc <vfprintf+0x398>
     7ec:	43 ce       	rjmp	.-890    	; 0x474 <vfprintf+0x30>
     7ee:	f3 01       	movw	r30, r6
     7f0:	66 81       	ldd	r22, Z+6	; 0x06
     7f2:	77 81       	ldd	r23, Z+7	; 0x07
     7f4:	cb 01       	movw	r24, r22
     7f6:	2b 96       	adiw	r28, 0x0b	; 11
     7f8:	e2 e1       	ldi	r30, 0x12	; 18
     7fa:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__epilogue_restores__>

000007fe <strnlen_P>:
     7fe:	fc 01       	movw	r30, r24
     800:	05 90       	lpm	r0, Z+
     802:	61 50       	subi	r22, 0x01	; 1
     804:	70 40       	sbci	r23, 0x00	; 0
     806:	01 10       	cpse	r0, r1
     808:	d8 f7       	brcc	.-10     	; 0x800 <strnlen_P+0x2>
     80a:	80 95       	com	r24
     80c:	90 95       	com	r25
     80e:	8e 0f       	add	r24, r30
     810:	9f 1f       	adc	r25, r31
     812:	08 95       	ret

00000814 <strnlen>:
     814:	fc 01       	movw	r30, r24
     816:	61 50       	subi	r22, 0x01	; 1
     818:	70 40       	sbci	r23, 0x00	; 0
     81a:	01 90       	ld	r0, Z+
     81c:	01 10       	cpse	r0, r1
     81e:	d8 f7       	brcc	.-10     	; 0x816 <strnlen+0x2>
     820:	80 95       	com	r24
     822:	90 95       	com	r25
     824:	8e 0f       	add	r24, r30
     826:	9f 1f       	adc	r25, r31
     828:	08 95       	ret

0000082a <fputc>:
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	8c 01       	movw	r16, r24
     834:	eb 01       	movw	r28, r22
     836:	8b 81       	ldd	r24, Y+3	; 0x03
     838:	81 ff       	sbrs	r24, 1
     83a:	1b c0       	rjmp	.+54     	; 0x872 <__stack+0x13>
     83c:	82 ff       	sbrs	r24, 2
     83e:	0d c0       	rjmp	.+26     	; 0x85a <fputc+0x30>
     840:	2e 81       	ldd	r18, Y+6	; 0x06
     842:	3f 81       	ldd	r19, Y+7	; 0x07
     844:	8c 81       	ldd	r24, Y+4	; 0x04
     846:	9d 81       	ldd	r25, Y+5	; 0x05
     848:	28 17       	cp	r18, r24
     84a:	39 07       	cpc	r19, r25
     84c:	64 f4       	brge	.+24     	; 0x866 <__stack+0x7>
     84e:	e8 81       	ld	r30, Y
     850:	f9 81       	ldd	r31, Y+1	; 0x01
     852:	01 93       	st	Z+, r16
     854:	f9 83       	std	Y+1, r31	; 0x01
     856:	e8 83       	st	Y, r30
     858:	06 c0       	rjmp	.+12     	; 0x866 <__stack+0x7>
     85a:	e8 85       	ldd	r30, Y+8	; 0x08
     85c:	f9 85       	ldd	r31, Y+9	; 0x09
     85e:	80 2f       	mov	r24, r16
     860:	09 95       	icall
     862:	89 2b       	or	r24, r25
     864:	31 f4       	brne	.+12     	; 0x872 <__stack+0x13>
     866:	8e 81       	ldd	r24, Y+6	; 0x06
     868:	9f 81       	ldd	r25, Y+7	; 0x07
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	9f 83       	std	Y+7, r25	; 0x07
     86e:	8e 83       	std	Y+6, r24	; 0x06
     870:	02 c0       	rjmp	.+4      	; 0x876 <__stack+0x17>
     872:	0f ef       	ldi	r16, 0xFF	; 255
     874:	1f ef       	ldi	r17, 0xFF	; 255
     876:	c8 01       	movw	r24, r16
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	08 95       	ret

00000882 <__ultoa_invert>:
     882:	fa 01       	movw	r30, r20
     884:	aa 27       	eor	r26, r26
     886:	28 30       	cpi	r18, 0x08	; 8
     888:	51 f1       	breq	.+84     	; 0x8de <__ultoa_invert+0x5c>
     88a:	20 31       	cpi	r18, 0x10	; 16
     88c:	81 f1       	breq	.+96     	; 0x8ee <__ultoa_invert+0x6c>
     88e:	e8 94       	clt
     890:	6f 93       	push	r22
     892:	6e 7f       	andi	r22, 0xFE	; 254
     894:	6e 5f       	subi	r22, 0xFE	; 254
     896:	7f 4f       	sbci	r23, 0xFF	; 255
     898:	8f 4f       	sbci	r24, 0xFF	; 255
     89a:	9f 4f       	sbci	r25, 0xFF	; 255
     89c:	af 4f       	sbci	r26, 0xFF	; 255
     89e:	b1 e0       	ldi	r27, 0x01	; 1
     8a0:	3e d0       	rcall	.+124    	; 0x91e <__ultoa_invert+0x9c>
     8a2:	b4 e0       	ldi	r27, 0x04	; 4
     8a4:	3c d0       	rcall	.+120    	; 0x91e <__ultoa_invert+0x9c>
     8a6:	67 0f       	add	r22, r23
     8a8:	78 1f       	adc	r23, r24
     8aa:	89 1f       	adc	r24, r25
     8ac:	9a 1f       	adc	r25, r26
     8ae:	a1 1d       	adc	r26, r1
     8b0:	68 0f       	add	r22, r24
     8b2:	79 1f       	adc	r23, r25
     8b4:	8a 1f       	adc	r24, r26
     8b6:	91 1d       	adc	r25, r1
     8b8:	a1 1d       	adc	r26, r1
     8ba:	6a 0f       	add	r22, r26
     8bc:	71 1d       	adc	r23, r1
     8be:	81 1d       	adc	r24, r1
     8c0:	91 1d       	adc	r25, r1
     8c2:	a1 1d       	adc	r26, r1
     8c4:	20 d0       	rcall	.+64     	; 0x906 <__ultoa_invert+0x84>
     8c6:	09 f4       	brne	.+2      	; 0x8ca <__ultoa_invert+0x48>
     8c8:	68 94       	set
     8ca:	3f 91       	pop	r19
     8cc:	2a e0       	ldi	r18, 0x0A	; 10
     8ce:	26 9f       	mul	r18, r22
     8d0:	11 24       	eor	r1, r1
     8d2:	30 19       	sub	r19, r0
     8d4:	30 5d       	subi	r19, 0xD0	; 208
     8d6:	31 93       	st	Z+, r19
     8d8:	de f6       	brtc	.-74     	; 0x890 <__ultoa_invert+0xe>
     8da:	cf 01       	movw	r24, r30
     8dc:	08 95       	ret
     8de:	46 2f       	mov	r20, r22
     8e0:	47 70       	andi	r20, 0x07	; 7
     8e2:	40 5d       	subi	r20, 0xD0	; 208
     8e4:	41 93       	st	Z+, r20
     8e6:	b3 e0       	ldi	r27, 0x03	; 3
     8e8:	0f d0       	rcall	.+30     	; 0x908 <__ultoa_invert+0x86>
     8ea:	c9 f7       	brne	.-14     	; 0x8de <__ultoa_invert+0x5c>
     8ec:	f6 cf       	rjmp	.-20     	; 0x8da <__ultoa_invert+0x58>
     8ee:	46 2f       	mov	r20, r22
     8f0:	4f 70       	andi	r20, 0x0F	; 15
     8f2:	40 5d       	subi	r20, 0xD0	; 208
     8f4:	4a 33       	cpi	r20, 0x3A	; 58
     8f6:	18 f0       	brcs	.+6      	; 0x8fe <__ultoa_invert+0x7c>
     8f8:	49 5d       	subi	r20, 0xD9	; 217
     8fa:	31 fd       	sbrc	r19, 1
     8fc:	40 52       	subi	r20, 0x20	; 32
     8fe:	41 93       	st	Z+, r20
     900:	02 d0       	rcall	.+4      	; 0x906 <__ultoa_invert+0x84>
     902:	a9 f7       	brne	.-22     	; 0x8ee <__ultoa_invert+0x6c>
     904:	ea cf       	rjmp	.-44     	; 0x8da <__ultoa_invert+0x58>
     906:	b4 e0       	ldi	r27, 0x04	; 4
     908:	a6 95       	lsr	r26
     90a:	97 95       	ror	r25
     90c:	87 95       	ror	r24
     90e:	77 95       	ror	r23
     910:	67 95       	ror	r22
     912:	ba 95       	dec	r27
     914:	c9 f7       	brne	.-14     	; 0x908 <__ultoa_invert+0x86>
     916:	00 97       	sbiw	r24, 0x00	; 0
     918:	61 05       	cpc	r22, r1
     91a:	71 05       	cpc	r23, r1
     91c:	08 95       	ret
     91e:	9b 01       	movw	r18, r22
     920:	ac 01       	movw	r20, r24
     922:	0a 2e       	mov	r0, r26
     924:	06 94       	lsr	r0
     926:	57 95       	ror	r21
     928:	47 95       	ror	r20
     92a:	37 95       	ror	r19
     92c:	27 95       	ror	r18
     92e:	ba 95       	dec	r27
     930:	c9 f7       	brne	.-14     	; 0x924 <__ultoa_invert+0xa2>
     932:	62 0f       	add	r22, r18
     934:	73 1f       	adc	r23, r19
     936:	84 1f       	adc	r24, r20
     938:	95 1f       	adc	r25, r21
     93a:	a0 1d       	adc	r26, r0
     93c:	08 95       	ret

0000093e <delay_ms>:
uchar buf[80];

/**
 * Some basic delay function
 */
void delay_ms(unsigned short ms) {
     93e:	df 93       	push	r29
     940:	cf 93       	push	r28
     942:	00 d0       	rcall	.+0      	; 0x944 <delay_ms+0x6>
     944:	00 d0       	rcall	.+0      	; 0x946 <delay_ms+0x8>
     946:	00 d0       	rcall	.+0      	; 0x948 <delay_ms+0xa>
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	9e 83       	std	Y+6, r25	; 0x06
     94e:	8d 83       	std	Y+5, r24	; 0x05
	unsigned short outer1, outer2;
	outer1 = 200 * 12;
     950:	80 e6       	ldi	r24, 0x60	; 96
     952:	99 e0       	ldi	r25, 0x09	; 9
     954:	9c 83       	std	Y+4, r25	; 0x04
     956:	8b 83       	std	Y+3, r24	; 0x03
     958:	1c c0       	rjmp	.+56     	; 0x992 <delay_ms+0x54>

	while (outer1) {
		outer2 = 100;
     95a:	84 e6       	ldi	r24, 0x64	; 100
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	9a 83       	std	Y+2, r25	; 0x02
     960:	89 83       	std	Y+1, r24	; 0x01
     962:	0e c0       	rjmp	.+28     	; 0x980 <delay_ms+0x42>
		while (outer2) {
			while (ms)
				ms--;
     964:	8d 81       	ldd	r24, Y+5	; 0x05
     966:	9e 81       	ldd	r25, Y+6	; 0x06
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	9e 83       	std	Y+6, r25	; 0x06
     96c:	8d 83       	std	Y+5, r24	; 0x05
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
			while (ms)
     96e:	8d 81       	ldd	r24, Y+5	; 0x05
     970:	9e 81       	ldd	r25, Y+6	; 0x06
     972:	00 97       	sbiw	r24, 0x00	; 0
     974:	b9 f7       	brne	.-18     	; 0x964 <delay_ms+0x26>
				ms--;
			outer2--;
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	9a 81       	ldd	r25, Y+2	; 0x02
     97a:	01 97       	sbiw	r24, 0x01	; 1
     97c:	9a 83       	std	Y+2, r25	; 0x02
     97e:	89 83       	std	Y+1, r24	; 0x01
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	9a 81       	ldd	r25, Y+2	; 0x02
     984:	00 97       	sbiw	r24, 0x00	; 0
     986:	99 f7       	brne	.-26     	; 0x96e <delay_ms+0x30>
			while (ms)
				ms--;
			outer2--;
		}
		outer1--;
     988:	8b 81       	ldd	r24, Y+3	; 0x03
     98a:	9c 81       	ldd	r25, Y+4	; 0x04
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	9c 83       	std	Y+4, r25	; 0x04
     990:	8b 83       	std	Y+3, r24	; 0x03
 */
void delay_ms(unsigned short ms) {
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
     992:	8b 81       	ldd	r24, Y+3	; 0x03
     994:	9c 81       	ldd	r25, Y+4	; 0x04
     996:	00 97       	sbiw	r24, 0x00	; 0
     998:	01 f7       	brne	.-64     	; 0x95a <delay_ms+0x1c>
				ms--;
			outer2--;
		}
		outer1--;
	}
}
     99a:	26 96       	adiw	r28, 0x06	; 6
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	cf 91       	pop	r28
     9a8:	df 91       	pop	r29
     9aa:	08 95       	ret

000009ac <gpib_init>:
 * Init GPIB pins and variables.
 * \brief All signal lines not related to the controller part
 * 		are initialized with useful values.
 *		(The controller part initialization is done on gpib_controller_assert())
 */
void gpib_init(void) {
     9ac:	df 93       	push	r29
     9ae:	cf 93       	push	r28
     9b0:	cd b7       	in	r28, 0x3d	; 61
     9b2:	de b7       	in	r29, 0x3e	; 62
	// data lines - complete port A as input
	DDRA = 0x00;
     9b4:	ea e3       	ldi	r30, 0x3A	; 58
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	10 82       	st	Z, r1

	// handshake lines - on port D , everything as input
	DDRD &= ~_BV(G_DAV); // DAV 
     9ba:	a1 e3       	ldi	r26, 0x31	; 49
     9bc:	b0 e0       	ldi	r27, 0x00	; 0
     9be:	e1 e3       	ldi	r30, 0x31	; 49
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	80 81       	ld	r24, Z
     9c4:	8b 7f       	andi	r24, 0xFB	; 251
     9c6:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_EOI); // EOI 
     9c8:	a1 e3       	ldi	r26, 0x31	; 49
     9ca:	b0 e0       	ldi	r27, 0x00	; 0
     9cc:	e1 e3       	ldi	r30, 0x31	; 49
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	80 81       	ld	r24, Z
     9d2:	8f 7e       	andi	r24, 0xEF	; 239
     9d4:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_SRQ); // SRQ 
     9d6:	a1 e3       	ldi	r26, 0x31	; 49
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	e1 e3       	ldi	r30, 0x31	; 49
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	8f 7b       	andi	r24, 0xBF	; 191
     9e2:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_ATN); // ATN  
     9e4:	a1 e3       	ldi	r26, 0x31	; 49
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	e1 e3       	ldi	r30, 0x31	; 49
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	8f 77       	andi	r24, 0x7F	; 127
     9f0:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_REN); // REN  
     9f2:	a7 e3       	ldi	r26, 0x37	; 55
     9f4:	b0 e0       	ldi	r27, 0x00	; 0
     9f6:	e7 e3       	ldi	r30, 0x37	; 55
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	80 81       	ld	r24, Z
     9fc:	8d 7f       	andi	r24, 0xFD	; 253
     9fe:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_IFC); // IFC  
     a00:	a7 e3       	ldi	r26, 0x37	; 55
     a02:	b0 e0       	ldi	r27, 0x00	; 0
     a04:	e7 e3       	ldi	r30, 0x37	; 55
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	80 81       	ld	r24, Z
     a0a:	8e 7f       	andi	r24, 0xFE	; 254
     a0c:	8c 93       	st	X, r24

	// init handshake lines
	assign_bit(DDRD, PORTD, G_NRFD);
     a0e:	a2 e3       	ldi	r26, 0x32	; 50
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	e2 e3       	ldi	r30, 0x32	; 50
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	80 81       	ld	r24, Z
     a18:	87 7f       	andi	r24, 0xF7	; 247
     a1a:	8c 93       	st	X, r24
     a1c:	a1 e3       	ldi	r26, 0x31	; 49
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	e1 e3       	ldi	r30, 0x31	; 49
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	88 60       	ori	r24, 0x08	; 8
     a28:	8c 93       	st	X, r24
     a2a:	a2 e3       	ldi	r26, 0x32	; 50
     a2c:	b0 e0       	ldi	r27, 0x00	; 0
     a2e:	e2 e3       	ldi	r30, 0x32	; 50
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	80 81       	ld	r24, Z
     a34:	87 7f       	andi	r24, 0xF7	; 247
     a36:	8c 93       	st	X, r24
	// not ready for data now
	release_bit(DDRD, PORTD, G_NDAC);
     a38:	a1 e3       	ldi	r26, 0x31	; 49
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	e1 e3       	ldi	r30, 0x31	; 49
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	8f 7d       	andi	r24, 0xDF	; 223
     a44:	8c 93       	st	X, r24
     a46:	a2 e3       	ldi	r26, 0x32	; 50
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	e2 e3       	ldi	r30, 0x32	; 50
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
     a50:	80 62       	ori	r24, 0x20	; 32
     a52:	8c 93       	st	X, r24
	// initially: ok so far
}
     a54:	cf 91       	pop	r28
     a56:	df 91       	pop	r29
     a58:	08 95       	ret

00000a5a <gpib_prepare_write>:

/**
 * Prepare partner for writing
 */
void gpib_prepare_write() {
     a5a:	df 93       	push	r29
     a5c:	cf 93       	push	r28
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	28 97       	sbiw	r28, 0x08	; 8
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	f8 94       	cli
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	// untalk/unlisten all partbners
	gpib_untalkUnlisten();
     a6e:	0e 94 9b 05 	call	0xb36	; 0xb36 <gpib_untalkUnlisten>
	// set device to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_partner_pad());
     a72:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <gpib_get_partner_pad>
     a76:	80 5e       	subi	r24, 0xE0	; 224
     a78:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     a7a:	ce 01       	movw	r24, r28
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	61 e0       	ldi	r22, 0x01	; 1
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gpib_cmd>
	// send secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
     a86:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <gpib_get_partner_sad>
     a8a:	8f 3f       	cpi	r24, 0xFF	; 255
     a8c:	51 f0       	breq	.+20     	; 0xaa2 <gpib_prepare_write+0x48>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
     a8e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <gpib_get_partner_sad>
     a92:	80 66       	ori	r24, 0x60	; 96
     a94:	89 83       	std	Y+1, r24	; 0x01
		gpib_cmd(controlString, 1);
     a96:	ce 01       	movw	r24, r28
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	61 e0       	ldi	r22, 0x01	; 1
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gpib_cmd>
	}
	// set myself (controller) to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_address());
     aa2:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <gpib_get_address>
     aa6:	80 5c       	subi	r24, 0xC0	; 192
     aa8:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     aaa:	ce 01       	movw	r24, r28
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gpib_cmd>
}
     ab6:	28 96       	adiw	r28, 0x08	; 8
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	f8 94       	cli
     abc:	de bf       	out	0x3e, r29	; 62
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	cd bf       	out	0x3d, r28	; 61
     ac2:	cf 91       	pop	r28
     ac4:	df 91       	pop	r29
     ac6:	08 95       	ret

00000ac8 <gpib_prepare_read>:

/**
 * Prepare partner for writing
 */
void gpib_prepare_read() {
     ac8:	df 93       	push	r29
     aca:	cf 93       	push	r28
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
     ad0:	28 97       	sbiw	r28, 0x08	; 8
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	de bf       	out	0x3e, r29	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// untalk/unlisten all partbners
	gpib_untalkUnlisten();
     adc:	0e 94 9b 05 	call	0xb36	; 0xb36 <gpib_untalkUnlisten>
	// set myself (controller) to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_address());
     ae0:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <gpib_get_address>
     ae4:	80 5e       	subi	r24, 0xE0	; 224
     ae6:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     ae8:	ce 01       	movw	r24, r28
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	61 e0       	ldi	r22, 0x01	; 1
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gpib_cmd>
	// set device to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_partner_pad());
     af4:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <gpib_get_partner_pad>
     af8:	80 5c       	subi	r24, 0xC0	; 192
     afa:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     afc:	ce 01       	movw	r24, r28
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	61 e0       	ldi	r22, 0x01	; 1
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gpib_cmd>
	// secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
     b08:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <gpib_get_partner_sad>
     b0c:	8f 3f       	cpi	r24, 0xFF	; 255
     b0e:	51 f0       	breq	.+20     	; 0xb24 <gpib_prepare_read+0x5c>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
     b10:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <gpib_get_partner_sad>
     b14:	80 66       	ori	r24, 0x60	; 96
     b16:	89 83       	std	Y+1, r24	; 0x01
		gpib_cmd(controlString, 1);
     b18:	ce 01       	movw	r24, r28
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	61 e0       	ldi	r22, 0x01	; 1
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gpib_cmd>
	}
}
     b24:	28 96       	adiw	r28, 0x08	; 8
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	f8 94       	cli
     b2a:	de bf       	out	0x3e, r29	; 62
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	cd bf       	out	0x3d, r28	; 61
     b30:	cf 91       	pop	r28
     b32:	df 91       	pop	r29
     b34:	08 95       	ret

00000b36 <gpib_untalkUnlisten>:

/**
 * Untalk / unlisten all partners on bus.
 */
void gpib_untalkUnlisten() {
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	28 97       	sbiw	r28, 0x08	; 8
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
     b4a:	8f e5       	ldi	r24, 0x5F	; 95
     b4c:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     b4e:	ce 01       	movw	r24, r28
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	61 e0       	ldi	r22, 0x01	; 1
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gpib_cmd>
	controlString[0] = G_CMD_UNL;
     b5a:	8f e3       	ldi	r24, 0x3F	; 63
     b5c:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     b5e:	ce 01       	movw	r24, r28
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	61 e0       	ldi	r22, 0x01	; 1
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gpib_cmd>
}
     b6a:	28 96       	adiw	r28, 0x08	; 8
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <gpib_receive>:
 *  \returns		On any error, 0xff is returned. in this case, the value of parameter *_byte is undefined.
 * 		Otherwise the value of the EOI signal line during read is returned. If EOI was assigned, a 0x01 is
 * 		returned. If EOI was not assigned, a 0x00 is returned. Assignment of EOI means that the talker
 * 		is sending the last character for this transmission.
 */
uchar gpib_receive(uchar* _byte) {
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	27 97       	sbiw	r28, 0x07	; 7
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	cd bf       	out	0x3d, r28	; 61
     b90:	9e 83       	std	Y+6, r25	; 0x06
     b92:	8d 83       	std	Y+5, r24	; 0x05
	int timeout;
	uchar byte, eoi;

	//uart_puts("\n\rgpib_receive()\n\r");

	if (controller.talks == 1) {
     b94:	80 91 61 04 	lds	r24, 0x0461
     b98:	81 30       	cpi	r24, 0x01	; 1
     b9a:	39 f4       	brne	.+14     	; 0xbaa <gpib_receive+0x2e>
		*_byte = 0xff;
     b9c:	ed 81       	ldd	r30, Y+5	; 0x05
     b9e:	fe 81       	ldd	r31, Y+6	; 0x06
     ba0:	8f ef       	ldi	r24, 0xFF	; 255
     ba2:	80 83       	st	Z, r24
		return 0xff;
     ba4:	8f ef       	ldi	r24, 0xFF	; 255
     ba6:	8f 83       	std	Y+7, r24	; 0x07
     ba8:	c6 c0       	rjmp	.+396    	; 0xd36 <gpib_receive+0x1ba>
	}

	// handshake: set nrfd, means i am ready to receive some data
	release_bit(DDRD, PORTD, G_NRFD);
     baa:	a1 e3       	ldi	r26, 0x31	; 49
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e1 e3       	ldi	r30, 0x31	; 49
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	87 7f       	andi	r24, 0xF7	; 247
     bb6:	8c 93       	st	X, r24
     bb8:	a2 e3       	ldi	r26, 0x32	; 50
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	e2 e3       	ldi	r30, 0x32	; 50
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	88 60       	ori	r24, 0x08	; 8
     bc4:	8c 93       	st	X, r24
	assign_bit(DDRD, PORTD, G_NDAC);
     bc6:	a2 e3       	ldi	r26, 0x32	; 50
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e2 e3       	ldi	r30, 0x32	; 50
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	8f 7d       	andi	r24, 0xDF	; 223
     bd2:	8c 93       	st	X, r24
     bd4:	a1 e3       	ldi	r26, 0x31	; 49
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	e1 e3       	ldi	r30, 0x31	; 49
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	80 62       	ori	r24, 0x20	; 32
     be0:	8c 93       	st	X, r24
     be2:	a2 e3       	ldi	r26, 0x32	; 50
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e2 e3       	ldi	r30, 0x32	; 50
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	8f 7d       	andi	r24, 0xDF	; 223
     bee:	8c 93       	st	X, r24

	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     bf0:	80 91 cb 05 	lds	r24, 0x05CB
     bf4:	88 2f       	mov	r24, r24
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	05 96       	adiw	r24, 0x05	; 5
     bfa:	9c 83       	std	Y+4, r25	; 0x04
     bfc:	8b 83       	std	Y+3, r24	; 0x03
     bfe:	10 c0       	rjmp	.+32     	; 0xc20 <gpib_receive+0xa4>
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     c00:	80 91 cb 05 	lds	r24, 0x05CB
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	8b 81       	ldd	r24, Y+3	; 0x03
     c0a:	9c 81       	ldd	r25, Y+4	; 0x04
     c0c:	28 17       	cp	r18, r24
     c0e:	39 07       	cpc	r19, r25
     c10:	39 f4       	brne	.+14     	; 0xc20 <gpib_receive+0xa4>
			uart_puts("\n\rError: DAV timeout (1)\n\r");
     c12:	80 e6       	ldi	r24, 0x60	; 96
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
			return 0xff;
     c1a:	8f ef       	ldi	r24, 0xFF	; 255
     c1c:	8f 83       	std	Y+7, r24	; 0x07
     c1e:	8b c0       	rjmp	.+278    	; 0xd36 <gpib_receive+0x1ba>
	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
     c20:	e0 e3       	ldi	r30, 0x30	; 48
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	88 2f       	mov	r24, r24
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	84 70       	andi	r24, 0x04	; 4
     c2c:	90 70       	andi	r25, 0x00	; 0
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	49 f0       	breq	.+18     	; 0xc44 <gpib_receive+0xc8>
     c32:	80 91 cb 05 	lds	r24, 0x05CB
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	82 17       	cp	r24, r18
     c40:	93 07       	cpc	r25, r19
     c42:	f4 f6       	brge	.-68     	; 0xc00 <gpib_receive+0x84>
#else
	loop_until_bit_is_clear(PIND,G_DAV);
#endif

	// handshake: clear NRFD, means i am busy now to read data
	assign_bit(DDRD, PORTD, G_NRFD);
     c44:	a2 e3       	ldi	r26, 0x32	; 50
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e2 e3       	ldi	r30, 0x32	; 50
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	87 7f       	andi	r24, 0xF7	; 247
     c50:	8c 93       	st	X, r24
     c52:	a1 e3       	ldi	r26, 0x31	; 49
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	e1 e3       	ldi	r30, 0x31	; 49
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	88 60       	ori	r24, 0x08	; 8
     c5e:	8c 93       	st	X, r24
     c60:	a2 e3       	ldi	r26, 0x32	; 50
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e2 e3       	ldi	r30, 0x32	; 50
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	87 7f       	andi	r24, 0xF7	; 247
     c6c:	8c 93       	st	X, r24
	// read data
	byte = PINA ^ 0xff;
     c6e:	e9 e3       	ldi	r30, 0x39	; 57
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	80 95       	com	r24
     c76:	8a 83       	std	Y+2, r24	; 0x02

	// handshake: set ndac, means i have completed/accepted the read
	release_bit(DDRD, PORTD, G_NDAC);
     c78:	a1 e3       	ldi	r26, 0x31	; 49
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e1 e3       	ldi	r30, 0x31	; 49
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	8f 7d       	andi	r24, 0xDF	; 223
     c84:	8c 93       	st	X, r24
     c86:	a2 e3       	ldi	r26, 0x32	; 50
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e2 e3       	ldi	r30, 0x32	; 50
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	80 62       	ori	r24, 0x20	; 32
     c92:	8c 93       	st	X, r24

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     c94:	80 91 cb 05 	lds	r24, 0x05CB
     c98:	88 2f       	mov	r24, r24
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	05 96       	adiw	r24, 0x05	; 5
     c9e:	9c 83       	std	Y+4, r25	; 0x04
     ca0:	8b 83       	std	Y+3, r24	; 0x03
     ca2:	10 c0       	rjmp	.+32     	; 0xcc4 <gpib_receive+0x148>
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     ca4:	80 91 cb 05 	lds	r24, 0x05CB
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	9c 81       	ldd	r25, Y+4	; 0x04
     cb0:	28 17       	cp	r18, r24
     cb2:	39 07       	cpc	r19, r25
     cb4:	39 f4       	brne	.+14     	; 0xcc4 <gpib_receive+0x148>
			uart_puts("\n\rError: DAV timeout (2)\n\r");
     cb6:	8b e7       	ldi	r24, 0x7B	; 123
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
			return 0xff;
     cbe:	8f ef       	ldi	r24, 0xFF	; 255
     cc0:	8f 83       	std	Y+7, r24	; 0x07
     cc2:	39 c0       	rjmp	.+114    	; 0xd36 <gpib_receive+0x1ba>
	release_bit(DDRD, PORTD, G_NDAC);

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
     cc4:	e0 e3       	ldi	r30, 0x30	; 48
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	88 2f       	mov	r24, r24
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	84 70       	andi	r24, 0x04	; 4
     cd0:	90 70       	andi	r25, 0x00	; 0
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	49 f4       	brne	.+18     	; 0xce8 <gpib_receive+0x16c>
     cd6:	80 91 cb 05 	lds	r24, 0x05CB
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	9c 81       	ldd	r25, Y+4	; 0x04
     ce2:	82 17       	cp	r24, r18
     ce4:	93 07       	cpc	r25, r19
     ce6:	f4 f6       	brge	.-68     	; 0xca4 <gpib_receive+0x128>
	}
#else
	loop_until_bit_is_set(PIND,G_DAV);
#endif
	// handshake: clear ndac (this is a prerequisite for receive next byte)
	assign_bit(DDRD, PORTD, G_NDAC);
     ce8:	a2 e3       	ldi	r26, 0x32	; 50
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	e2 e3       	ldi	r30, 0x32	; 50
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	8f 7d       	andi	r24, 0xDF	; 223
     cf4:	8c 93       	st	X, r24
     cf6:	a1 e3       	ldi	r26, 0x31	; 49
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e1 e3       	ldi	r30, 0x31	; 49
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	80 62       	ori	r24, 0x20	; 32
     d02:	8c 93       	st	X, r24
     d04:	a2 e3       	ldi	r26, 0x32	; 50
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e2 e3       	ldi	r30, 0x32	; 50
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	8f 7d       	andi	r24, 0xDF	; 223
     d10:	8c 93       	st	X, r24

	// check if last byte of transmission
	eoi = bit_is_clear(PIND, G_EOI);
     d12:	e0 e3       	ldi	r30, 0x30	; 48
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	88 2f       	mov	r24, r24
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	80 71       	andi	r24, 0x10	; 16
     d1e:	90 70       	andi	r25, 0x00	; 0
     d20:	19 82       	std	Y+1, r1	; 0x01
     d22:	00 97       	sbiw	r24, 0x00	; 0
     d24:	11 f4       	brne	.+4      	; 0xd2a <gpib_receive+0x1ae>
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	89 83       	std	Y+1, r24	; 0x01

	*_byte = byte;
     d2a:	ed 81       	ldd	r30, Y+5	; 0x05
     d2c:	fe 81       	ldd	r31, Y+6	; 0x06
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	80 83       	st	Z, r24

	return eoi;
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	8f 83       	std	Y+7, r24	; 0x07
     d36:	8f 81       	ldd	r24, Y+7	; 0x07
}
     d38:	27 96       	adiw	r28, 0x07	; 7
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <gpib_controller_assign>:
 * You have to change the initialization of the partner array according to your environment.
 * The partners-array is used by gpib_serial_poll() for looping over all existing devices.
 * 
 * \param address the address to be used by the controller. Usually 0x00.
 */
void gpib_controller_assign(uchar address) {
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	0f 92       	push	r0
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	89 83       	std	Y+1, r24	; 0x01
	controller.myaddress = address;
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	80 93 5e 04 	sts	0x045E, r24
	controller.talks = 0;
     d5c:	10 92 61 04 	sts	0x0461, r1
	controller.partner.primary = ADDRESS_NOT_SET; // init default active partner
     d60:	8f ef       	ldi	r24, 0xFF	; 255
     d62:	80 93 5f 04 	sts	0x045F, r24
	controller.partner.secondary = ADDRESS_NOT_SET;
     d66:	8f ef       	ldi	r24, 0xFF	; 255
     d68:	80 93 60 04 	sts	0x0460, r24
	controller.flavour = FLAVOUR_NONE;
     d6c:	10 92 62 04 	sts	0x0462, r1
	/** clear list of partners */
	gpib_clear_partners();
     d70:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <gpib_clear_partners>
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     d74:	a8 e3       	ldi	r26, 0x38	; 56
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e8 e3       	ldi	r30, 0x38	; 56
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	8e 7f       	andi	r24, 0xFE	; 254
     d80:	8c 93       	st	X, r24
     d82:	a7 e3       	ldi	r26, 0x37	; 55
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e7 e3       	ldi	r30, 0x37	; 55
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	81 60       	ori	r24, 0x01	; 1
     d8e:	8c 93       	st	X, r24
     d90:	a8 e3       	ldi	r26, 0x38	; 56
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e8 e3       	ldi	r30, 0x38	; 56
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	8e 7f       	andi	r24, 0xFE	; 254
     d9c:	8c 93       	st	X, r24
	delay_ms(200);
     d9e:	88 ec       	ldi	r24, 0xC8	; 200
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 9f 04 	call	0x93e	; 0x93e <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     da6:	a7 e3       	ldi	r26, 0x37	; 55
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e7 e3       	ldi	r30, 0x37	; 55
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8e 7f       	andi	r24, 0xFE	; 254
     db2:	8c 93       	st	X, r24
     db4:	a8 e3       	ldi	r26, 0x38	; 56
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e8 e3       	ldi	r30, 0x38	; 56
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	81 60       	ori	r24, 0x01	; 1
     dc0:	8c 93       	st	X, r24
	// set up all devices for remote control
	assign_bit(DDRB, PORTB, G_REN);
     dc2:	a8 e3       	ldi	r26, 0x38	; 56
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e8 e3       	ldi	r30, 0x38	; 56
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	8d 7f       	andi	r24, 0xFD	; 253
     dce:	8c 93       	st	X, r24
     dd0:	a7 e3       	ldi	r26, 0x37	; 55
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e7 e3       	ldi	r30, 0x37	; 55
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	82 60       	ori	r24, 0x02	; 2
     ddc:	8c 93       	st	X, r24
     dde:	a8 e3       	ldi	r26, 0x38	; 56
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e8 e3       	ldi	r30, 0x38	; 56
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	8d 7f       	andi	r24, 0xFD	; 253
     dea:	8c 93       	st	X, r24

	// DCL - device clear for all devices on bus
	cmd_buf[0] = G_CMD_DCL;
     dec:	84 e1       	ldi	r24, 0x14	; 20
     dee:	80 93 16 05 	sts	0x0516, r24
	gpib_cmd(cmd_buf, 1);
     df2:	86 e1       	ldi	r24, 0x16	; 22
     df4:	95 e0       	ldi	r25, 0x05	; 5
     df6:	61 e0       	ldi	r22, 0x01	; 1
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gpib_cmd>
}
     dfe:	0f 90       	pop	r0
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	08 95       	ret

00000e06 <gpib_controller_release>:

/**
 * Release bus 
 */
void gpib_controller_release(void) {
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     e0e:	a8 e3       	ldi	r26, 0x38	; 56
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e8 e3       	ldi	r30, 0x38	; 56
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	8e 7f       	andi	r24, 0xFE	; 254
     e1a:	8c 93       	st	X, r24
     e1c:	a7 e3       	ldi	r26, 0x37	; 55
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e7 e3       	ldi	r30, 0x37	; 55
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	81 60       	ori	r24, 0x01	; 1
     e28:	8c 93       	st	X, r24
     e2a:	a8 e3       	ldi	r26, 0x38	; 56
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e8 e3       	ldi	r30, 0x38	; 56
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8e 7f       	andi	r24, 0xFE	; 254
     e36:	8c 93       	st	X, r24
	delay_ms(200);
     e38:	88 ec       	ldi	r24, 0xC8	; 200
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 9f 04 	call	0x93e	; 0x93e <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     e40:	a7 e3       	ldi	r26, 0x37	; 55
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e7 e3       	ldi	r30, 0x37	; 55
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	8e 7f       	andi	r24, 0xFE	; 254
     e4c:	8c 93       	st	X, r24
     e4e:	a8 e3       	ldi	r26, 0x38	; 56
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e8 e3       	ldi	r30, 0x38	; 56
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	81 60       	ori	r24, 0x01	; 1
     e5a:	8c 93       	st	X, r24
	// set up all devices for local control
	release_bit(DDRB, PORTB, G_REN);
     e5c:	a7 e3       	ldi	r26, 0x37	; 55
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e7 e3       	ldi	r30, 0x37	; 55
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	8d 7f       	andi	r24, 0xFD	; 253
     e68:	8c 93       	st	X, r24
     e6a:	a8 e3       	ldi	r26, 0x38	; 56
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e8 e3       	ldi	r30, 0x38	; 56
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	82 60       	ori	r24, 0x02	; 2
     e76:	8c 93       	st	X, r24
}
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <gpib_cmd>:
 * \param bytes byte array containing bytes to be send
 * \param length length of valid bytes in byte array or zero.
 * for binary data, lenght must be defined. For strings, length can be set to zero. Then the length of
 * the string is calculated internally.
  */
uchar gpib_cmd(uchar *bytes, int length) {
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	2b 97       	sbiw	r28, 0x0b	; 11
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	9f 83       	std	Y+7, r25	; 0x07
     e94:	8e 83       	std	Y+6, r24	; 0x06
     e96:	79 87       	std	Y+9, r23	; 0x09
     e98:	68 87       	std	Y+8, r22	; 0x08
	uchar c;
	int i;
	// set attention arg true for commands
	uchar attention = 1;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	8a 83       	std	Y+2, r24	; 0x02

	gpib_write_prologue(attention);
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	0e 94 9b 07 	call	0xf36	; 0xf36 <gpib_write_prologue>

	if (length == 0) {
     ea4:	88 85       	ldd	r24, Y+8	; 0x08
     ea6:	99 85       	ldd	r25, Y+9	; 0x09
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	31 f4       	brne	.+12     	; 0xeb8 <gpib_cmd+0x3a>
		// length==0 means this is a common C string, null-terminated.
		// then, length can be easily calculated
		length = strlen((char*) bytes);
     eac:	8e 81       	ldd	r24, Y+6	; 0x06
     eae:	9f 81       	ldd	r25, Y+7	; 0x07
     eb0:	0e 94 ad 01 	call	0x35a	; 0x35a <strlen>
     eb4:	99 87       	std	Y+9, r25	; 0x09
     eb6:	88 87       	std	Y+8, r24	; 0x08
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif

	for (i = 0; i < length; i++) {
     eb8:	1c 82       	std	Y+4, r1	; 0x04
     eba:	1b 82       	std	Y+3, r1	; 0x03
     ebc:	28 c0       	rjmp	.+80     	; 0xf0e <gpib_cmd+0x90>
		// put data on bus
		c = bytes[i];
     ebe:	2b 81       	ldd	r18, Y+3	; 0x03
     ec0:	3c 81       	ldd	r19, Y+4	; 0x04
     ec2:	8e 81       	ldd	r24, Y+6	; 0x06
     ec4:	9f 81       	ldd	r25, Y+7	; 0x07
     ec6:	fc 01       	movw	r30, r24
     ec8:	e2 0f       	add	r30, r18
     eca:	f3 1f       	adc	r31, r19
     ecc:	80 81       	ld	r24, Z
     ece:	8d 83       	std	Y+5, r24	; 0x05
		//sprintf( buf, "char: %c\n\r", c );
		//uart_puts(buf);

		uchar isLastByte = (i == length - 1) && !attention;
     ed0:	88 85       	ldd	r24, Y+8	; 0x08
     ed2:	99 85       	ldd	r25, Y+9	; 0x09
     ed4:	9c 01       	movw	r18, r24
     ed6:	21 50       	subi	r18, 0x01	; 1
     ed8:	30 40       	sbci	r19, 0x00	; 0
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	9c 81       	ldd	r25, Y+4	; 0x04
     ede:	28 17       	cp	r18, r24
     ee0:	39 07       	cpc	r19, r25
     ee2:	41 f4       	brne	.+16     	; 0xef4 <gpib_cmd+0x76>
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	88 23       	and	r24, r24
     ee8:	29 f4       	brne	.+10     	; 0xef4 <gpib_cmd+0x76>
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	9b 87       	std	Y+11, r25	; 0x0b
     ef0:	8a 87       	std	Y+10, r24	; 0x0a
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <gpib_cmd+0x7a>
     ef4:	1b 86       	std	Y+11, r1	; 0x0b
     ef6:	1a 86       	std	Y+10, r1	; 0x0a
     ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
     efa:	99 83       	std	Y+1, r25	; 0x01
		gpib_write_byte(c, isLastByte);
     efc:	8d 81       	ldd	r24, Y+5	; 0x05
     efe:	69 81       	ldd	r22, Y+1	; 0x01
     f00:	0e 94 54 08 	call	0x10a8	; 0x10a8 <gpib_write_byte>
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif

	for (i = 0; i < length; i++) {
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	01 96       	adiw	r24, 0x01	; 1
     f0a:	9c 83       	std	Y+4, r25	; 0x04
     f0c:	8b 83       	std	Y+3, r24	; 0x03
     f0e:	2b 81       	ldd	r18, Y+3	; 0x03
     f10:	3c 81       	ldd	r19, Y+4	; 0x04
     f12:	88 85       	ldd	r24, Y+8	; 0x08
     f14:	99 85       	ldd	r25, Y+9	; 0x09
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	8c f2       	brlt	.-94     	; 0xebe <gpib_cmd+0x40>

		uchar isLastByte = (i == length - 1) && !attention;
		gpib_write_byte(c, isLastByte);
	}

	gpib_write_epilogue(attention);
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <gpib_write_epilogue>

	return 0x00;
     f22:	80 e0       	ldi	r24, 0x00	; 0
}
     f24:	2b 96       	adiw	r28, 0x0b	; 11
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <gpib_write_prologue>:

/**
 * Emits prologue before writing to a listener.
 *
 */
void gpib_write_prologue(uchar attention) {
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	0f 92       	push	r0
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	89 83       	std	Y+1, r24	; 0x01
	// set talks state. This is used by ISR to recognize own talk
	// (controller must not talk to itself and must not take part in listener handshake when talking)
	controller.talks = 1;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	80 93 61 04 	sts	0x0461, r24
	if (attention) {
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	88 23       	and	r24, r24
     f4c:	a9 f0       	breq	.+42     	; 0xf78 <gpib_write_prologue+0x42>
		//uart_puts("\n\rgpib_controller_write()\n\r");
		// assign ATN for commands
		assign_bit(DDRD, PORTD, G_ATN);
     f4e:	a2 e3       	ldi	r26, 0x32	; 50
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e2 e3       	ldi	r30, 0x32	; 50
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8f 77       	andi	r24, 0x7F	; 127
     f5a:	8c 93       	st	X, r24
     f5c:	a1 e3       	ldi	r26, 0x31	; 49
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e1 e3       	ldi	r30, 0x31	; 49
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	80 68       	ori	r24, 0x80	; 128
     f68:	8c 93       	st	X, r24
     f6a:	a2 e3       	ldi	r26, 0x32	; 50
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e2 e3       	ldi	r30, 0x32	; 50
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	8f 77       	andi	r24, 0x7F	; 127
     f76:	8c 93       	st	X, r24
	}
	// release EOI during transmission
	release_bit(DDRD, PORTD, G_EOI);
     f78:	a1 e3       	ldi	r26, 0x31	; 49
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e1 e3       	ldi	r30, 0x31	; 49
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8f 7e       	andi	r24, 0xEF	; 239
     f84:	8c 93       	st	X, r24
     f86:	a2 e3       	ldi	r26, 0x32	; 50
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e2 e3       	ldi	r30, 0x32	; 50
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	80 61       	ori	r24, 0x10	; 16
     f92:	8c 93       	st	X, r24
	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
     f94:	a1 e3       	ldi	r26, 0x31	; 49
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e1 e3       	ldi	r30, 0x31	; 49
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	8b 7f       	andi	r24, 0xFB	; 251
     fa0:	8c 93       	st	X, r24
     fa2:	a2 e3       	ldi	r26, 0x32	; 50
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e2 e3       	ldi	r30, 0x32	; 50
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	84 60       	ori	r24, 0x04	; 4
     fae:	8c 93       	st	X, r24
	// release NRFD (just to be sure)
	release_bit(DDRD, PORTD, G_NRFD);
     fb0:	a1 e3       	ldi	r26, 0x31	; 49
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e1 e3       	ldi	r30, 0x31	; 49
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	87 7f       	andi	r24, 0xF7	; 247
     fbc:	8c 93       	st	X, r24
     fbe:	a2 e3       	ldi	r26, 0x32	; 50
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e2 e3       	ldi	r30, 0x32	; 50
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	88 60       	ori	r24, 0x08	; 8
     fca:	8c 93       	st	X, r24
}
     fcc:	0f 90       	pop	r0
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <gpib_write_epilogue>:

/**
 * Emits epilogue after writing to a listener.
 *
 */
void gpib_write_epilogue(uchar attention) {
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	0f 92       	push	r0
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	89 83       	std	Y+1, r24	; 0x01
	if (attention) {
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	88 23       	and	r24, r24
     fe4:	71 f0       	breq	.+28     	; 0x1002 <gpib_write_epilogue+0x2e>
		// assign ATN for commands
		release_bit(DDRD, PORTD, G_ATN);
     fe6:	a1 e3       	ldi	r26, 0x31	; 49
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e1 e3       	ldi	r30, 0x31	; 49
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	8f 77       	andi	r24, 0x7F	; 127
     ff2:	8c 93       	st	X, r24
     ff4:	a2 e3       	ldi	r26, 0x32	; 50
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e2 e3       	ldi	r30, 0x32	; 50
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	80 68       	ori	r24, 0x80	; 128
    1000:	8c 93       	st	X, r24
	}
	// clear talk state.Controller does not talk anymore.
	controller.talks = 0;
    1002:	10 92 61 04 	sts	0x0461, r1
}
    1006:	0f 90       	pop	r0
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <gpib_write_command>:
 * - prefix with GPIB write prologue
 * - the string
 * - postfix with GPIB epilogue
 * - postfix that untalks/unlistens all partners
 */
void gpib_write_command(uchar *s) {
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	00 d0       	rcall	.+0      	; 0x1014 <gpib_write_command+0x6>
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	9a 83       	std	Y+2, r25	; 0x02
    101a:	89 83       	std	Y+1, r24	; 0x01
	gpib_prepare_write();
    101c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <gpib_prepare_write>
	gpib_write_prologue(0);
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	0e 94 9b 07 	call	0xf36	; 0xf36 <gpib_write_prologue>
	gpib_write_string(s);
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	9a 81       	ldd	r25, Y+2	; 0x02
    102a:	0e 94 25 08 	call	0x104a	; 0x104a <gpib_write_string>
	gpib_write_byte(ASCII_CODE_CR, 1);
    102e:	8d e0       	ldi	r24, 0x0D	; 13
    1030:	61 e0       	ldi	r22, 0x01	; 1
    1032:	0e 94 54 08 	call	0x10a8	; 0x10a8 <gpib_write_byte>
	gpib_write_epilogue(0);
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <gpib_write_epilogue>
	gpib_untalkUnlisten();
    103c:	0e 94 9b 05 	call	0xb36	; 0xb36 <gpib_untalkUnlisten>
}
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <gpib_write_string>:

/**
 * Write string. Only the raw string is written, no prefix and no postfix.
 */
void gpib_write_string(uchar *s) {
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	00 d0       	rcall	.+0      	; 0x1054 <gpib_write_string+0xa>
    1054:	00 d0       	rcall	.+0      	; 0x1056 <gpib_write_string+0xc>
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	9c 83       	std	Y+4, r25	; 0x04
    105c:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < strlen(s); i++) {
    105e:	1a 82       	std	Y+2, r1	; 0x02
    1060:	19 82       	std	Y+1, r1	; 0x01
    1062:	10 c0       	rjmp	.+32     	; 0x1084 <gpib_write_string+0x3a>
		gpib_write_byte(s[i], 0);
    1064:	29 81       	ldd	r18, Y+1	; 0x01
    1066:	3a 81       	ldd	r19, Y+2	; 0x02
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	fc 01       	movw	r30, r24
    106e:	e2 0f       	add	r30, r18
    1070:	f3 1f       	adc	r31, r19
    1072:	80 81       	ld	r24, Z
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	0e 94 54 08 	call	0x10a8	; 0x10a8 <gpib_write_byte>

/**
 * Write string. Only the raw string is written, no prefix and no postfix.
 */
void gpib_write_string(uchar *s) {
	for (int i = 0; i < strlen(s); i++) {
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	9a 81       	ldd	r25, Y+2	; 0x02
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	9a 83       	std	Y+2, r25	; 0x02
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	09 81       	ldd	r16, Y+1	; 0x01
    1086:	1a 81       	ldd	r17, Y+2	; 0x02
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	9c 81       	ldd	r25, Y+4	; 0x04
    108c:	0e 94 ad 01 	call	0x35a	; 0x35a <strlen>
    1090:	08 17       	cp	r16, r24
    1092:	19 07       	cpc	r17, r25
    1094:	38 f3       	brcs	.-50     	; 0x1064 <gpib_write_string+0x1a>
		gpib_write_byte(s[i], 0);
	}
}
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	08 95       	ret

000010a8 <gpib_write_byte>:


/**
 * Emits single byte to GPIB port pins.
 */
uchar gpib_write_byte(uchar c, uchar isLastByte) {
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <gpib_write_byte+0x6>
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <gpib_write_byte+0x8>
    10b0:	0f 92       	push	r0
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	8b 83       	std	Y+3, r24	; 0x03
    10b8:	6c 83       	std	Y+4, r22	; 0x04
	int timeout;

	// wait for NDAC assign from all listeners
	release_bit(DDRD, PORTD, G_NDAC);
    10ba:	a1 e3       	ldi	r26, 0x31	; 49
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e1 e3       	ldi	r30, 0x31	; 49
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	8f 7d       	andi	r24, 0xDF	; 223
    10c6:	8c 93       	st	X, r24
    10c8:	a2 e3       	ldi	r26, 0x32	; 50
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e2 e3       	ldi	r30, 0x32	; 50
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	80 62       	ori	r24, 0x20	; 32
    10d4:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
	timeout = s + 5;
    10d6:	80 91 cb 05 	lds	r24, 0x05CB
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	05 96       	adiw	r24, 0x05	; 5
    10e0:	9a 83       	std	Y+2, r25	; 0x02
    10e2:	89 83       	std	Y+1, r24	; 0x01
    10e4:	10 c0       	rjmp	.+32     	; 0x1106 <gpib_write_byte+0x5e>
	//gpib_info();
	while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
		if (s == timeout) {
    10e6:	80 91 cb 05 	lds	r24, 0x05CB
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	9a 81       	ldd	r25, Y+2	; 0x02
    10f2:	28 17       	cp	r18, r24
    10f4:	39 07       	cpc	r19, r25
    10f6:	39 f4       	brne	.+14     	; 0x1106 <gpib_write_byte+0x5e>
			uart_puts("\n\rError: NDAC timeout\n\r");
    10f8:	86 e9       	ldi	r24, 0x96	; 150
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
			return 0xff;
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	8d 83       	std	Y+5, r24	; 0x05
    1104:	f7 c1       	rjmp	.+1006   	; 0x14f4 <gpib_write_byte+0x44c>
	// wait for NDAC assign from all listeners
	release_bit(DDRD, PORTD, G_NDAC);
#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
    1106:	e0 e3       	ldi	r30, 0x30	; 48
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	80 72       	andi	r24, 0x20	; 32
    1112:	90 70       	andi	r25, 0x00	; 0
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	49 f0       	breq	.+18     	; 0x112a <gpib_write_byte+0x82>
    1118:	80 91 cb 05 	lds	r24, 0x05CB
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	9a 81       	ldd	r25, Y+2	; 0x02
    1124:	82 17       	cp	r24, r18
    1126:	93 07       	cpc	r25, r19
    1128:	f4 f6       	brge	.-68     	; 0x10e6 <gpib_write_byte+0x3e>
	}
#else
	loop_until_bit_is_clear(PIND,G_NDAC);
#endif

	DDRA = 0x00;
    112a:	ea e3       	ldi	r30, 0x3A	; 58
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	10 82       	st	Z, r1
	if (c & 0x01) {
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	81 70       	andi	r24, 0x01	; 1
    1138:	90 70       	andi	r25, 0x00	; 0
    113a:	88 23       	and	r24, r24
    113c:	b1 f0       	breq	.+44     	; 0x116a <gpib_write_byte+0xc2>
		assign_bit(DDRA, PORTA, PA0);
    113e:	ab e3       	ldi	r26, 0x3B	; 59
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	eb e3       	ldi	r30, 0x3B	; 59
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	8e 7f       	andi	r24, 0xFE	; 254
    114a:	8c 93       	st	X, r24
    114c:	aa e3       	ldi	r26, 0x3A	; 58
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	ea e3       	ldi	r30, 0x3A	; 58
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	81 60       	ori	r24, 0x01	; 1
    1158:	8c 93       	st	X, r24
    115a:	ab e3       	ldi	r26, 0x3B	; 59
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	eb e3       	ldi	r30, 0x3B	; 59
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	8e 7f       	andi	r24, 0xFE	; 254
    1166:	8c 93       	st	X, r24
    1168:	0e c0       	rjmp	.+28     	; 0x1186 <gpib_write_byte+0xde>
	} else {
		release_bit(DDRA, PORTA, PA0)
    116a:	aa e3       	ldi	r26, 0x3A	; 58
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ea e3       	ldi	r30, 0x3A	; 58
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	8e 7f       	andi	r24, 0xFE	; 254
    1176:	8c 93       	st	X, r24
    1178:	ab e3       	ldi	r26, 0x3B	; 59
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	eb e3       	ldi	r30, 0x3B	; 59
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	81 60       	ori	r24, 0x01	; 1
    1184:	8c 93       	st	X, r24
	}
	if (c & 0x02) {
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	82 70       	andi	r24, 0x02	; 2
    118e:	90 70       	andi	r25, 0x00	; 0
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	b1 f0       	breq	.+44     	; 0x11c0 <gpib_write_byte+0x118>
		assign_bit(DDRA, PORTA, PA1)
    1194:	ab e3       	ldi	r26, 0x3B	; 59
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	eb e3       	ldi	r30, 0x3B	; 59
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8d 7f       	andi	r24, 0xFD	; 253
    11a0:	8c 93       	st	X, r24
    11a2:	aa e3       	ldi	r26, 0x3A	; 58
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	ea e3       	ldi	r30, 0x3A	; 58
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	82 60       	ori	r24, 0x02	; 2
    11ae:	8c 93       	st	X, r24
    11b0:	ab e3       	ldi	r26, 0x3B	; 59
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	eb e3       	ldi	r30, 0x3B	; 59
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	8d 7f       	andi	r24, 0xFD	; 253
    11bc:	8c 93       	st	X, r24
    11be:	0e c0       	rjmp	.+28     	; 0x11dc <gpib_write_byte+0x134>
	} else {
		release_bit(DDRA, PORTA, PA1);
    11c0:	aa e3       	ldi	r26, 0x3A	; 58
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	ea e3       	ldi	r30, 0x3A	; 58
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	8d 7f       	andi	r24, 0xFD	; 253
    11cc:	8c 93       	st	X, r24
    11ce:	ab e3       	ldi	r26, 0x3B	; 59
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	eb e3       	ldi	r30, 0x3B	; 59
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	82 60       	ori	r24, 0x02	; 2
    11da:	8c 93       	st	X, r24
	}
	if (c & 0x04) {
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	84 70       	andi	r24, 0x04	; 4
    11e4:	90 70       	andi	r25, 0x00	; 0
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	b1 f0       	breq	.+44     	; 0x1216 <gpib_write_byte+0x16e>
		assign_bit(DDRA, PORTA, PA2);
    11ea:	ab e3       	ldi	r26, 0x3B	; 59
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	eb e3       	ldi	r30, 0x3B	; 59
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	8b 7f       	andi	r24, 0xFB	; 251
    11f6:	8c 93       	st	X, r24
    11f8:	aa e3       	ldi	r26, 0x3A	; 58
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	ea e3       	ldi	r30, 0x3A	; 58
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	84 60       	ori	r24, 0x04	; 4
    1204:	8c 93       	st	X, r24
    1206:	ab e3       	ldi	r26, 0x3B	; 59
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	eb e3       	ldi	r30, 0x3B	; 59
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	8b 7f       	andi	r24, 0xFB	; 251
    1212:	8c 93       	st	X, r24
    1214:	0e c0       	rjmp	.+28     	; 0x1232 <gpib_write_byte+0x18a>
	} else {
		release_bit(DDRA, PORTA, PA2);
    1216:	aa e3       	ldi	r26, 0x3A	; 58
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	ea e3       	ldi	r30, 0x3A	; 58
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	8b 7f       	andi	r24, 0xFB	; 251
    1222:	8c 93       	st	X, r24
    1224:	ab e3       	ldi	r26, 0x3B	; 59
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	eb e3       	ldi	r30, 0x3B	; 59
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	84 60       	ori	r24, 0x04	; 4
    1230:	8c 93       	st	X, r24
	}
	if (c & 0x08) {
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	88 2f       	mov	r24, r24
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	88 70       	andi	r24, 0x08	; 8
    123a:	90 70       	andi	r25, 0x00	; 0
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	b1 f0       	breq	.+44     	; 0x126c <gpib_write_byte+0x1c4>
		assign_bit(DDRA, PORTA, PA3);
    1240:	ab e3       	ldi	r26, 0x3B	; 59
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	eb e3       	ldi	r30, 0x3B	; 59
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	87 7f       	andi	r24, 0xF7	; 247
    124c:	8c 93       	st	X, r24
    124e:	aa e3       	ldi	r26, 0x3A	; 58
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	ea e3       	ldi	r30, 0x3A	; 58
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	88 60       	ori	r24, 0x08	; 8
    125a:	8c 93       	st	X, r24
    125c:	ab e3       	ldi	r26, 0x3B	; 59
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	eb e3       	ldi	r30, 0x3B	; 59
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	87 7f       	andi	r24, 0xF7	; 247
    1268:	8c 93       	st	X, r24
    126a:	0e c0       	rjmp	.+28     	; 0x1288 <gpib_write_byte+0x1e0>
	} else {
		release_bit(DDRA, PORTA, PA3);
    126c:	aa e3       	ldi	r26, 0x3A	; 58
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	ea e3       	ldi	r30, 0x3A	; 58
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	87 7f       	andi	r24, 0xF7	; 247
    1278:	8c 93       	st	X, r24
    127a:	ab e3       	ldi	r26, 0x3B	; 59
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	eb e3       	ldi	r30, 0x3B	; 59
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	88 60       	ori	r24, 0x08	; 8
    1286:	8c 93       	st	X, r24
	}
	if (c & 0x10) {
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	88 2f       	mov	r24, r24
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	80 71       	andi	r24, 0x10	; 16
    1290:	90 70       	andi	r25, 0x00	; 0
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	b1 f0       	breq	.+44     	; 0x12c2 <gpib_write_byte+0x21a>
		assign_bit(DDRA, PORTA, PA4);
    1296:	ab e3       	ldi	r26, 0x3B	; 59
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	eb e3       	ldi	r30, 0x3B	; 59
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	8f 7e       	andi	r24, 0xEF	; 239
    12a2:	8c 93       	st	X, r24
    12a4:	aa e3       	ldi	r26, 0x3A	; 58
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	ea e3       	ldi	r30, 0x3A	; 58
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	80 61       	ori	r24, 0x10	; 16
    12b0:	8c 93       	st	X, r24
    12b2:	ab e3       	ldi	r26, 0x3B	; 59
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	eb e3       	ldi	r30, 0x3B	; 59
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	8f 7e       	andi	r24, 0xEF	; 239
    12be:	8c 93       	st	X, r24
    12c0:	0e c0       	rjmp	.+28     	; 0x12de <gpib_write_byte+0x236>
	} else {
		release_bit(DDRA, PORTA, PA4);
    12c2:	aa e3       	ldi	r26, 0x3A	; 58
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	ea e3       	ldi	r30, 0x3A	; 58
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	8f 7e       	andi	r24, 0xEF	; 239
    12ce:	8c 93       	st	X, r24
    12d0:	ab e3       	ldi	r26, 0x3B	; 59
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	eb e3       	ldi	r30, 0x3B	; 59
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	80 61       	ori	r24, 0x10	; 16
    12dc:	8c 93       	st	X, r24
	}
	if (c & 0x20) {
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	88 2f       	mov	r24, r24
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	80 72       	andi	r24, 0x20	; 32
    12e6:	90 70       	andi	r25, 0x00	; 0
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	b1 f0       	breq	.+44     	; 0x1318 <gpib_write_byte+0x270>
		assign_bit(DDRA, PORTA, PA5);
    12ec:	ab e3       	ldi	r26, 0x3B	; 59
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	eb e3       	ldi	r30, 0x3B	; 59
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	8f 7d       	andi	r24, 0xDF	; 223
    12f8:	8c 93       	st	X, r24
    12fa:	aa e3       	ldi	r26, 0x3A	; 58
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	ea e3       	ldi	r30, 0x3A	; 58
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	80 62       	ori	r24, 0x20	; 32
    1306:	8c 93       	st	X, r24
    1308:	ab e3       	ldi	r26, 0x3B	; 59
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	eb e3       	ldi	r30, 0x3B	; 59
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	8f 7d       	andi	r24, 0xDF	; 223
    1314:	8c 93       	st	X, r24
    1316:	0e c0       	rjmp	.+28     	; 0x1334 <gpib_write_byte+0x28c>
	} else {
		release_bit(DDRA, PORTA, PA5);
    1318:	aa e3       	ldi	r26, 0x3A	; 58
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	ea e3       	ldi	r30, 0x3A	; 58
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	8f 7d       	andi	r24, 0xDF	; 223
    1324:	8c 93       	st	X, r24
    1326:	ab e3       	ldi	r26, 0x3B	; 59
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	eb e3       	ldi	r30, 0x3B	; 59
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	80 62       	ori	r24, 0x20	; 32
    1332:	8c 93       	st	X, r24
	}
	if (c & 0x40) {
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	88 2f       	mov	r24, r24
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	80 74       	andi	r24, 0x40	; 64
    133c:	90 70       	andi	r25, 0x00	; 0
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	b1 f0       	breq	.+44     	; 0x136e <gpib_write_byte+0x2c6>
		assign_bit(DDRA, PORTA, PA6);
    1342:	ab e3       	ldi	r26, 0x3B	; 59
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	eb e3       	ldi	r30, 0x3B	; 59
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8f 7b       	andi	r24, 0xBF	; 191
    134e:	8c 93       	st	X, r24
    1350:	aa e3       	ldi	r26, 0x3A	; 58
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	ea e3       	ldi	r30, 0x3A	; 58
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	80 64       	ori	r24, 0x40	; 64
    135c:	8c 93       	st	X, r24
    135e:	ab e3       	ldi	r26, 0x3B	; 59
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	eb e3       	ldi	r30, 0x3B	; 59
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	8f 7b       	andi	r24, 0xBF	; 191
    136a:	8c 93       	st	X, r24
    136c:	0e c0       	rjmp	.+28     	; 0x138a <gpib_write_byte+0x2e2>
	} else {
		release_bit(DDRA, PORTA, PA6);
    136e:	aa e3       	ldi	r26, 0x3A	; 58
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	ea e3       	ldi	r30, 0x3A	; 58
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	8f 7b       	andi	r24, 0xBF	; 191
    137a:	8c 93       	st	X, r24
    137c:	ab e3       	ldi	r26, 0x3B	; 59
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	eb e3       	ldi	r30, 0x3B	; 59
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	80 64       	ori	r24, 0x40	; 64
    1388:	8c 93       	st	X, r24
	}
	if (c & 0x80) {
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	88 23       	and	r24, r24
    138e:	b4 f4       	brge	.+44     	; 0x13bc <gpib_write_byte+0x314>
		assign_bit(DDRA, PORTA, PA7);
    1390:	ab e3       	ldi	r26, 0x3B	; 59
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	eb e3       	ldi	r30, 0x3B	; 59
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	8f 77       	andi	r24, 0x7F	; 127
    139c:	8c 93       	st	X, r24
    139e:	aa e3       	ldi	r26, 0x3A	; 58
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	ea e3       	ldi	r30, 0x3A	; 58
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	80 68       	ori	r24, 0x80	; 128
    13aa:	8c 93       	st	X, r24
    13ac:	ab e3       	ldi	r26, 0x3B	; 59
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	eb e3       	ldi	r30, 0x3B	; 59
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	8f 77       	andi	r24, 0x7F	; 127
    13b8:	8c 93       	st	X, r24
    13ba:	0e c0       	rjmp	.+28     	; 0x13d8 <gpib_write_byte+0x330>
	} else {
		release_bit(DDRA, PORTA, PA7);
    13bc:	aa e3       	ldi	r26, 0x3A	; 58
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	ea e3       	ldi	r30, 0x3A	; 58
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	8f 77       	andi	r24, 0x7F	; 127
    13c8:	8c 93       	st	X, r24
    13ca:	ab e3       	ldi	r26, 0x3B	; 59
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	eb e3       	ldi	r30, 0x3B	; 59
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	80 68       	ori	r24, 0x80	; 128
    13d6:	8c 93       	st	X, r24
	}

	// wait until listeners release NRFD
	//uart_puts("1");
	release_bit(DDRD, PORTD, G_NRFD);
    13d8:	a1 e3       	ldi	r26, 0x31	; 49
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e1 e3       	ldi	r30, 0x31	; 49
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	87 7f       	andi	r24, 0xF7	; 247
    13e4:	8c 93       	st	X, r24
    13e6:	a2 e3       	ldi	r26, 0x32	; 50
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e2 e3       	ldi	r30, 0x32	; 50
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	88 60       	ori	r24, 0x08	; 8
    13f2:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
	//gpib_info();
	timeout = s + 5;
    13f4:	80 91 cb 05 	lds	r24, 0x05CB
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	05 96       	adiw	r24, 0x05	; 5
    13fe:	9a 83       	std	Y+2, r25	; 0x02
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	10 c0       	rjmp	.+32     	; 0x1424 <gpib_write_byte+0x37c>
	while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
		if (s == timeout) {
    1404:	80 91 cb 05 	lds	r24, 0x05CB
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	9a 81       	ldd	r25, Y+2	; 0x02
    1410:	28 17       	cp	r18, r24
    1412:	39 07       	cpc	r19, r25
    1414:	39 f4       	brne	.+14     	; 0x1424 <gpib_write_byte+0x37c>
			uart_puts("\n\rError: NRFD timeout\n\r");
    1416:	8e ea       	ldi	r24, 0xAE	; 174
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
			return 0xff;
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	8d 83       	std	Y+5, r24	; 0x05
    1422:	68 c0       	rjmp	.+208    	; 0x14f4 <gpib_write_byte+0x44c>
	//uart_puts("1");
	release_bit(DDRD, PORTD, G_NRFD);
#ifdef WITH_TIMEOUT
	//gpib_info();
	timeout = s + 5;
	while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
    1424:	e0 e3       	ldi	r30, 0x30	; 48
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	88 70       	andi	r24, 0x08	; 8
    1430:	90 70       	andi	r25, 0x00	; 0
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	49 f4       	brne	.+18     	; 0x1448 <gpib_write_byte+0x3a0>
    1436:	80 91 cb 05 	lds	r24, 0x05CB
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	9a 81       	ldd	r25, Y+2	; 0x02
    1442:	82 17       	cp	r24, r18
    1444:	93 07       	cpc	r25, r19
    1446:	f4 f6       	brge	.-68     	; 0x1404 <gpib_write_byte+0x35c>
#else
	loop_until_bit_is_set(PIND,G_NRFD);
#endif

	// assign EOI during transmission of only last byte
	if (isLastByte) {
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	88 23       	and	r24, r24
    144c:	a9 f0       	breq	.+42     	; 0x1478 <gpib_write_byte+0x3d0>
		//uart_puts("\n\rE\n\r");
		assign_bit(DDRD, PORTD, G_EOI);
    144e:	a2 e3       	ldi	r26, 0x32	; 50
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e2 e3       	ldi	r30, 0x32	; 50
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	8f 7e       	andi	r24, 0xEF	; 239
    145a:	8c 93       	st	X, r24
    145c:	a1 e3       	ldi	r26, 0x31	; 49
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e1 e3       	ldi	r30, 0x31	; 49
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	80 61       	ori	r24, 0x10	; 16
    1468:	8c 93       	st	X, r24
    146a:	a2 e3       	ldi	r26, 0x32	; 50
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e2 e3       	ldi	r30, 0x32	; 50
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	8f 7e       	andi	r24, 0xEF	; 239
    1476:	8c 93       	st	X, r24
	}

	// assign DAV, data valid for listeners
	assign_bit(DDRD, PORTD, G_DAV);
    1478:	a2 e3       	ldi	r26, 0x32	; 50
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e2 e3       	ldi	r30, 0x32	; 50
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	8b 7f       	andi	r24, 0xFB	; 251
    1484:	8c 93       	st	X, r24
    1486:	a1 e3       	ldi	r26, 0x31	; 49
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e1 e3       	ldi	r30, 0x31	; 49
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	84 60       	ori	r24, 0x04	; 4
    1492:	8c 93       	st	X, r24
    1494:	a2 e3       	ldi	r26, 0x32	; 50
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e2 e3       	ldi	r30, 0x32	; 50
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	8b 7f       	andi	r24, 0xFB	; 251
    14a0:	8c 93       	st	X, r24

	// wait for NDAC release
	//uart_puts("2");
	release_bit(DDRD, PORTD, G_NDAC);
    14a2:	a1 e3       	ldi	r26, 0x31	; 49
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e1 e3       	ldi	r30, 0x31	; 49
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	8f 7d       	andi	r24, 0xDF	; 223
    14ae:	8c 93       	st	X, r24
    14b0:	a2 e3       	ldi	r26, 0x32	; 50
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e2 e3       	ldi	r30, 0x32	; 50
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	80 62       	ori	r24, 0x20	; 32
    14bc:	8c 93       	st	X, r24
	loop_until_bit_is_set(PIND, G_NDAC);
    14be:	e0 e3       	ldi	r30, 0x30	; 48
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	80 72       	andi	r24, 0x20	; 32
    14ca:	90 70       	andi	r25, 0x00	; 0
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	b9 f3       	breq	.-18     	; 0x14be <gpib_write_byte+0x416>

	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
    14d0:	a1 e3       	ldi	r26, 0x31	; 49
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e1 e3       	ldi	r30, 0x31	; 49
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	8b 7f       	andi	r24, 0xFB	; 251
    14dc:	8c 93       	st	X, r24
    14de:	a2 e3       	ldi	r26, 0x32	; 50
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e2 e3       	ldi	r30, 0x32	; 50
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	84 60       	ori	r24, 0x04	; 4
    14ea:	8c 93       	st	X, r24

	// reset Port to all input
	DDRA = 0x00;
    14ec:	ea e3       	ldi	r30, 0x3A	; 58
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	10 82       	st	Z, r1

	//uart_puts("3\r\n");

	return 0;
    14f2:	1d 82       	std	Y+5, r1	; 0x05
    14f4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <gpib_info>:


/**
 * print some useful info about bus state (for example value of handshake pins)
 */
void gpib_info(void) {
    1506:	af 92       	push	r10
    1508:	bf 92       	push	r11
    150a:	cf 92       	push	r12
    150c:	df 92       	push	r13
    150e:	ef 92       	push	r14
    1510:	ff 92       	push	r15
    1512:	0f 93       	push	r16
    1514:	1f 93       	push	r17
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	2a 97       	sbiw	r28, 0x0a	; 10
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
	uchar dav, nrfd, ndac, eoi, atn, srq, ifc, ren;
	extern uchar buf[80];

	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    152a:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <gpib_get_partner_pad>
    152e:	08 2f       	mov	r16, r24
    1530:	10 e0       	ldi	r17, 0x00	; 0
    1532:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <gpib_get_partner_sad>
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	8d b7       	in	r24, 0x3d	; 61
    153c:	9e b7       	in	r25, 0x3e	; 62
    153e:	08 97       	sbiw	r24, 0x08	; 8
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	9e bf       	out	0x3e, r25	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	8d bf       	out	0x3d, r24	; 61
    154a:	ed b7       	in	r30, 0x3d	; 61
    154c:	fe b7       	in	r31, 0x3e	; 62
    154e:	31 96       	adiw	r30, 0x01	; 1
    1550:	8a e7       	ldi	r24, 0x7A	; 122
    1552:	95 e0       	ldi	r25, 0x05	; 5
    1554:	91 83       	std	Z+1, r25	; 0x01
    1556:	80 83       	st	Z, r24
    1558:	86 ec       	ldi	r24, 0xC6	; 198
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	93 83       	std	Z+3, r25	; 0x03
    155e:	82 83       	std	Z+2, r24	; 0x02
    1560:	15 83       	std	Z+5, r17	; 0x05
    1562:	04 83       	std	Z+4, r16	; 0x04
    1564:	37 83       	std	Z+7, r19	; 0x07
    1566:	26 83       	std	Z+6, r18	; 0x06
    1568:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sprintf>
    156c:	8d b7       	in	r24, 0x3d	; 61
    156e:	9e b7       	in	r25, 0x3e	; 62
    1570:	08 96       	adiw	r24, 0x08	; 8
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	9e bf       	out	0x3e, r25	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	8d bf       	out	0x3d, r24	; 61
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);
    157c:	8a e7       	ldi	r24, 0x7A	; 122
    157e:	95 e0       	ldi	r25, 0x05	; 5
    1580:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>

	uart_puts("Partner list\n\r");
    1584:	84 ef       	ldi	r24, 0xF4	; 244
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
	for (int i = 0; i < MAX_PARTNER; i++) {
    158c:	1a 82       	std	Y+2, r1	; 0x02
    158e:	19 82       	std	Y+1, r1	; 0x01
    1590:	49 c0       	rjmp	.+146    	; 0x1624 <gpib_info+0x11e>
		if (controller.partners[i].primary != ADDRESS_NOT_SET) {
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	9a 81       	ldd	r25, Y+2	; 0x02
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	fc 01       	movw	r30, r24
    159c:	ed 59       	subi	r30, 0x9D	; 157
    159e:	fb 4f       	sbci	r31, 0xFB	; 251
    15a0:	80 81       	ld	r24, Z
    15a2:	8f 3f       	cpi	r24, 0xFF	; 255
    15a4:	d1 f1       	breq	.+116    	; 0x161a <gpib_info+0x114>
			sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	9a 81       	ldd	r25, Y+2	; 0x02
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	fc 01       	movw	r30, r24
    15b0:	ed 59       	subi	r30, 0x9D	; 157
    15b2:	fb 4f       	sbci	r31, 0xFB	; 251
    15b4:	80 81       	ld	r24, Z
    15b6:	48 2f       	mov	r20, r24
    15b8:	50 e0       	ldi	r21, 0x00	; 0
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	9a 81       	ldd	r25, Y+2	; 0x02
    15be:	03 96       	adiw	r24, 0x03	; 3
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	fc 01       	movw	r30, r24
    15c6:	e2 5a       	subi	r30, 0xA2	; 162
    15c8:	fb 4f       	sbci	r31, 0xFB	; 251
    15ca:	80 81       	ld	r24, Z
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	8d b7       	in	r24, 0x3d	; 61
    15d2:	9e b7       	in	r25, 0x3e	; 62
    15d4:	08 97       	sbiw	r24, 0x08	; 8
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	9e bf       	out	0x3e, r25	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	8d bf       	out	0x3d, r24	; 61
    15e0:	ed b7       	in	r30, 0x3d	; 61
    15e2:	fe b7       	in	r31, 0x3e	; 62
    15e4:	31 96       	adiw	r30, 0x01	; 1
    15e6:	8a e7       	ldi	r24, 0x7A	; 122
    15e8:	95 e0       	ldi	r25, 0x05	; 5
    15ea:	91 83       	std	Z+1, r25	; 0x01
    15ec:	80 83       	st	Z, r24
    15ee:	86 ec       	ldi	r24, 0xC6	; 198
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	93 83       	std	Z+3, r25	; 0x03
    15f4:	82 83       	std	Z+2, r24	; 0x02
    15f6:	55 83       	std	Z+5, r21	; 0x05
    15f8:	44 83       	std	Z+4, r20	; 0x04
    15fa:	37 83       	std	Z+7, r19	; 0x07
    15fc:	26 83       	std	Z+6, r18	; 0x06
    15fe:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sprintf>
    1602:	8d b7       	in	r24, 0x3d	; 61
    1604:	9e b7       	in	r25, 0x3e	; 62
    1606:	08 96       	adiw	r24, 0x08	; 8
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	9e bf       	out	0x3e, r25	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	8d bf       	out	0x3d, r24	; 61
					controller.partners[i].primary,
					controller.partners[i].secondary);
			uart_puts(buf);
    1612:	8a e7       	ldi	r24, 0x7A	; 122
    1614:	95 e0       	ldi	r25, 0x05	; 5
    1616:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);

	uart_puts("Partner list\n\r");
	for (int i = 0; i < MAX_PARTNER; i++) {
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	9a 81       	ldd	r25, Y+2	; 0x02
    161e:	01 96       	adiw	r24, 0x01	; 1
    1620:	9a 83       	std	Y+2, r25	; 0x02
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	9a 81       	ldd	r25, Y+2	; 0x02
    1628:	85 30       	cpi	r24, 0x05	; 5
    162a:	91 05       	cpc	r25, r1
    162c:	0c f4       	brge	.+2      	; 0x1630 <gpib_info+0x12a>
    162e:	b1 cf       	rjmp	.-158    	; 0x1592 <gpib_info+0x8c>
					controller.partners[i].secondary);
			uart_puts(buf);
		}
	}

	dav = bit_is_set(PIND, G_DAV);
    1630:	e0 e3       	ldi	r30, 0x30	; 48
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	84 70       	andi	r24, 0x04	; 4
    1638:	8a 87       	std	Y+10, r24	; 0x0a
	nrfd = bit_is_set(PIND, G_NRFD);
    163a:	e0 e3       	ldi	r30, 0x30	; 48
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	88 70       	andi	r24, 0x08	; 8
    1642:	89 87       	std	Y+9, r24	; 0x09
	ndac = bit_is_set(PIND, G_NDAC);
    1644:	e0 e3       	ldi	r30, 0x30	; 48
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	80 72       	andi	r24, 0x20	; 32
    164c:	88 87       	std	Y+8, r24	; 0x08
	eoi = bit_is_set(PIND, G_EOI);
    164e:	e0 e3       	ldi	r30, 0x30	; 48
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	80 71       	andi	r24, 0x10	; 16
    1656:	8f 83       	std	Y+7, r24	; 0x07
	atn = bit_is_set(PIND, G_ATN);
    1658:	e0 e3       	ldi	r30, 0x30	; 48
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	80 78       	andi	r24, 0x80	; 128
    1660:	8e 83       	std	Y+6, r24	; 0x06
	srq = bit_is_set(PIND, G_SRQ);
    1662:	e0 e3       	ldi	r30, 0x30	; 48
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	80 74       	andi	r24, 0x40	; 64
    166a:	8d 83       	std	Y+5, r24	; 0x05
	ifc = bit_is_set(PINB, G_IFC);
    166c:	e6 e3       	ldi	r30, 0x36	; 54
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	81 70       	andi	r24, 0x01	; 1
    1674:	8c 83       	std	Y+4, r24	; 0x04
	ren = bit_is_set(PINB, G_REN);
    1676:	e6 e3       	ldi	r30, 0x36	; 54
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	82 70       	andi	r24, 0x02	; 2
    167e:	8b 83       	std	Y+3, r24	; 0x03
	//d = PINA;
	//di = d ^ 0xff;
	if (dav == 0x00)
    1680:	8a 85       	ldd	r24, Y+10	; 0x0a
    1682:	88 23       	and	r24, r24
    1684:	19 f4       	brne	.+6      	; 0x168c <gpib_info+0x186>
		dav = '0';
    1686:	80 e3       	ldi	r24, 0x30	; 48
    1688:	8a 87       	std	Y+10, r24	; 0x0a
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <gpib_info+0x18a>
	else
		dav = '1';
    168c:	81 e3       	ldi	r24, 0x31	; 49
    168e:	8a 87       	std	Y+10, r24	; 0x0a
	if (nrfd == 0x00)
    1690:	89 85       	ldd	r24, Y+9	; 0x09
    1692:	88 23       	and	r24, r24
    1694:	19 f4       	brne	.+6      	; 0x169c <gpib_info+0x196>
		nrfd = '0';
    1696:	80 e3       	ldi	r24, 0x30	; 48
    1698:	89 87       	std	Y+9, r24	; 0x09
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <gpib_info+0x19a>
	else
		nrfd = '1';
    169c:	81 e3       	ldi	r24, 0x31	; 49
    169e:	89 87       	std	Y+9, r24	; 0x09
	if (ndac == 0x00)
    16a0:	88 85       	ldd	r24, Y+8	; 0x08
    16a2:	88 23       	and	r24, r24
    16a4:	19 f4       	brne	.+6      	; 0x16ac <gpib_info+0x1a6>
		ndac = '0';
    16a6:	80 e3       	ldi	r24, 0x30	; 48
    16a8:	88 87       	std	Y+8, r24	; 0x08
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <gpib_info+0x1aa>
	else
		ndac = '1';
    16ac:	81 e3       	ldi	r24, 0x31	; 49
    16ae:	88 87       	std	Y+8, r24	; 0x08
	if (eoi == 0x00)
    16b0:	8f 81       	ldd	r24, Y+7	; 0x07
    16b2:	88 23       	and	r24, r24
    16b4:	19 f4       	brne	.+6      	; 0x16bc <gpib_info+0x1b6>
		eoi = '0';
    16b6:	80 e3       	ldi	r24, 0x30	; 48
    16b8:	8f 83       	std	Y+7, r24	; 0x07
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <gpib_info+0x1ba>
	else
		eoi = '1';
    16bc:	81 e3       	ldi	r24, 0x31	; 49
    16be:	8f 83       	std	Y+7, r24	; 0x07
	if (atn == 0x00)
    16c0:	8e 81       	ldd	r24, Y+6	; 0x06
    16c2:	88 23       	and	r24, r24
    16c4:	19 f4       	brne	.+6      	; 0x16cc <gpib_info+0x1c6>
		atn = '0';
    16c6:	80 e3       	ldi	r24, 0x30	; 48
    16c8:	8e 83       	std	Y+6, r24	; 0x06
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <gpib_info+0x1ca>
	else
		atn = '1';
    16cc:	81 e3       	ldi	r24, 0x31	; 49
    16ce:	8e 83       	std	Y+6, r24	; 0x06
	if (srq == 0x00)
    16d0:	8d 81       	ldd	r24, Y+5	; 0x05
    16d2:	88 23       	and	r24, r24
    16d4:	19 f4       	brne	.+6      	; 0x16dc <gpib_info+0x1d6>
		srq = '0';
    16d6:	80 e3       	ldi	r24, 0x30	; 48
    16d8:	8d 83       	std	Y+5, r24	; 0x05
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <gpib_info+0x1da>
	else
		srq = '1';
    16dc:	81 e3       	ldi	r24, 0x31	; 49
    16de:	8d 83       	std	Y+5, r24	; 0x05
	if (ifc == 0x00)
    16e0:	8c 81       	ldd	r24, Y+4	; 0x04
    16e2:	88 23       	and	r24, r24
    16e4:	19 f4       	brne	.+6      	; 0x16ec <gpib_info+0x1e6>
		ifc = '0';
    16e6:	80 e3       	ldi	r24, 0x30	; 48
    16e8:	8c 83       	std	Y+4, r24	; 0x04
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <gpib_info+0x1ea>
	else
		ifc = '1';
    16ec:	81 e3       	ldi	r24, 0x31	; 49
    16ee:	8c 83       	std	Y+4, r24	; 0x04
	if (ren == 0x00)
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	88 23       	and	r24, r24
    16f4:	19 f4       	brne	.+6      	; 0x16fc <gpib_info+0x1f6>
		ren = '0';
    16f6:	80 e3       	ldi	r24, 0x30	; 48
    16f8:	8b 83       	std	Y+3, r24	; 0x03
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <gpib_info+0x1fa>
	else
		ren = '1';
    16fc:	81 e3       	ldi	r24, 0x31	; 49
    16fe:	8b 83       	std	Y+3, r24	; 0x03

	sprintf(buf,
    1700:	8a 85       	ldd	r24, Y+10	; 0x0a
    1702:	a8 2e       	mov	r10, r24
    1704:	bb 24       	eor	r11, r11
    1706:	89 85       	ldd	r24, Y+9	; 0x09
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	88 85       	ldd	r24, Y+8	; 0x08
    170e:	48 2f       	mov	r20, r24
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	8f 81       	ldd	r24, Y+7	; 0x07
    1714:	68 2f       	mov	r22, r24
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	8c 81       	ldd	r24, Y+4	; 0x04
    171a:	a8 2f       	mov	r26, r24
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	08 2f       	mov	r16, r24
    1722:	10 e0       	ldi	r17, 0x00	; 0
    1724:	8e 81       	ldd	r24, Y+6	; 0x06
    1726:	e8 2e       	mov	r14, r24
    1728:	ff 24       	eor	r15, r15
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	c8 2e       	mov	r12, r24
    172e:	dd 24       	eor	r13, r13
    1730:	8d b7       	in	r24, 0x3d	; 61
    1732:	9e b7       	in	r25, 0x3e	; 62
    1734:	44 97       	sbiw	r24, 0x14	; 20
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	9e bf       	out	0x3e, r25	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	8d bf       	out	0x3d, r24	; 61
    1740:	ed b7       	in	r30, 0x3d	; 61
    1742:	fe b7       	in	r31, 0x3e	; 62
    1744:	31 96       	adiw	r30, 0x01	; 1
    1746:	8a e7       	ldi	r24, 0x7A	; 122
    1748:	95 e0       	ldi	r25, 0x05	; 5
    174a:	91 83       	std	Z+1, r25	; 0x01
    174c:	80 83       	st	Z, r24
    174e:	83 e0       	ldi	r24, 0x03	; 3
    1750:	91 e0       	ldi	r25, 0x01	; 1
    1752:	93 83       	std	Z+3, r25	; 0x03
    1754:	82 83       	std	Z+2, r24	; 0x02
    1756:	b5 82       	std	Z+5, r11	; 0x05
    1758:	a4 82       	std	Z+4, r10	; 0x04
    175a:	37 83       	std	Z+7, r19	; 0x07
    175c:	26 83       	std	Z+6, r18	; 0x06
    175e:	51 87       	std	Z+9, r21	; 0x09
    1760:	40 87       	std	Z+8, r20	; 0x08
    1762:	73 87       	std	Z+11, r23	; 0x0b
    1764:	62 87       	std	Z+10, r22	; 0x0a
    1766:	b5 87       	std	Z+13, r27	; 0x0d
    1768:	a4 87       	std	Z+12, r26	; 0x0c
    176a:	17 87       	std	Z+15, r17	; 0x0f
    176c:	06 87       	std	Z+14, r16	; 0x0e
    176e:	f1 8a       	std	Z+17, r15	; 0x11
    1770:	e0 8a       	std	Z+16, r14	; 0x10
    1772:	d3 8a       	std	Z+19, r13	; 0x13
    1774:	c2 8a       	std	Z+18, r12	; 0x12
    1776:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sprintf>
    177a:	8d b7       	in	r24, 0x3d	; 61
    177c:	9e b7       	in	r25, 0x3e	; 62
    177e:	44 96       	adiw	r24, 0x14	; 20
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	9e bf       	out	0x3e, r25	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	8d bf       	out	0x3d, r24	; 61
			"dav=%c,nrfd=%c,ndac=%c, eoi=%c, ifc=%c,ren=%c,atn=%c,srq=%c\n\r",
			dav, nrfd, ndac, eoi, ifc, ren, atn, srq);
	uart_puts(buf);
    178a:	8a e7       	ldi	r24, 0x7A	; 122
    178c:	95 e0       	ldi	r25, 0x05	; 5
    178e:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
}
    1792:	2a 96       	adiw	r28, 0x0a	; 10
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	1f 91       	pop	r17
    17a4:	0f 91       	pop	r16
    17a6:	ff 90       	pop	r15
    17a8:	ef 90       	pop	r14
    17aa:	df 90       	pop	r13
    17ac:	cf 90       	pop	r12
    17ae:	bf 90       	pop	r11
    17b0:	af 90       	pop	r10
    17b2:	08 95       	ret

000017b4 <gpib_serial_poll>:
 * I haven't looked how a device with two byte address behaves.
 *
 * Secondary/primary is returned in inout parameters
 * If any emitter is found, return value is != 0.
 */
uchar gpib_serial_poll(uint8_t *primary_v, uint8_t* secondary_v) {
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	2c 97       	sbiw	r28, 0x0c	; 12
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	9a 87       	std	Y+10, r25	; 0x0a
    17ca:	89 87       	std	Y+9, r24	; 0x09
    17cc:	7c 87       	std	Y+12, r23	; 0x0c
    17ce:	6b 87       	std	Y+11, r22	; 0x0b
	uchar b, e;
	uchar primary = 0, secondary = 0, found = 0, foundPhysical =
    17d0:	1e 82       	std	Y+6, r1	; 0x06
    17d2:	1d 82       	std	Y+5, r1	; 0x05
    17d4:	1c 82       	std	Y+4, r1	; 0x04
	ADDRESS_NOT_SET;
    17d6:	8f ef       	ldi	r24, 0xFF	; 255
    17d8:	8b 83       	std	Y+3, r24	; 0x03
	int i;

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	cmd_buf[0] = G_CMD_UNT;
    17da:	8f e5       	ldi	r24, 0x5F	; 95
    17dc:	80 93 16 05 	sts	0x0516, r24
	gpib_cmd(cmd_buf, 1);
    17e0:	86 e1       	ldi	r24, 0x16	; 22
    17e2:	95 e0       	ldi	r25, 0x05	; 5
    17e4:	61 e0       	ldi	r22, 0x01	; 1
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gpib_cmd>
	cmd_buf[0] = G_CMD_UNL;
    17ec:	8f e3       	ldi	r24, 0x3F	; 63
    17ee:	80 93 16 05 	sts	0x0516, r24
	gpib_cmd(cmd_buf, 1);
    17f2:	86 e1       	ldi	r24, 0x16	; 22
    17f4:	95 e0       	ldi	r25, 0x05	; 5
    17f6:	61 e0       	ldi	r22, 0x01	; 1
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gpib_cmd>

	// serial poll enable
	// effect: all devices will send status byte instead of normal data when addressed
	// as talker
	//uart_puts("before SPE\r\n");
	cmd_buf[0] = G_CMD_SPE;
    17fe:	88 e1       	ldi	r24, 0x18	; 24
    1800:	80 93 16 05 	sts	0x0516, r24
	gpib_cmd(cmd_buf, 1);
    1804:	86 e1       	ldi	r24, 0x16	; 22
    1806:	95 e0       	ldi	r25, 0x05	; 5
    1808:	61 e0       	ldi	r22, 0x01	; 1
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gpib_cmd>
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    1810:	1a 82       	std	Y+2, r1	; 0x02
    1812:	19 82       	std	Y+1, r1	; 0x01
    1814:	de c0       	rjmp	.+444    	; 0x19d2 <gpib_serial_poll+0x21e>
			i++) {

		// set partner to talker mode
		primary = address2TalkerAddress(controller.partners[i].primary);
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	9a 81       	ldd	r25, Y+2	; 0x02
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	fc 01       	movw	r30, r24
    1820:	ed 59       	subi	r30, 0x9D	; 157
    1822:	fb 4f       	sbci	r31, 0xFB	; 251
    1824:	80 81       	ld	r24, Z
    1826:	80 5c       	subi	r24, 0xC0	; 192
    1828:	8e 83       	std	Y+6, r24	; 0x06
		secondary = secondaryAdressToAdressByte(
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	9a 81       	ldd	r25, Y+2	; 0x02
    182e:	03 96       	adiw	r24, 0x03	; 3
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	fc 01       	movw	r30, r24
    1836:	e2 5a       	subi	r30, 0xA2	; 162
    1838:	fb 4f       	sbci	r31, 0xFB	; 251
    183a:	80 81       	ld	r24, Z
    183c:	80 66       	ori	r24, 0x60	; 96
    183e:	8d 83       	std	Y+5, r24	; 0x05
				controller.partners[i].secondary);

		cmd_buf[0] = primary;
    1840:	8e 81       	ldd	r24, Y+6	; 0x06
    1842:	80 93 16 05 	sts	0x0516, r24
		//uart_puts("before talker address write\r\n");
		gpib_cmd(cmd_buf, 1);
    1846:	86 e1       	ldi	r24, 0x16	; 22
    1848:	95 e0       	ldi	r25, 0x05	; 5
    184a:	61 e0       	ldi	r22, 0x01	; 1
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gpib_cmd>
		//uart_puts("after talker address write\r\n");
		// handle secondary address if required
		if (secondary != ADDRESS_NOT_SET) {
    1852:	8d 81       	ldd	r24, Y+5	; 0x05
    1854:	8f 3f       	cpi	r24, 0xFF	; 255
    1856:	49 f0       	breq	.+18     	; 0x186a <gpib_serial_poll+0xb6>
			cmd_buf[0] = secondary;
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
    185a:	80 93 16 05 	sts	0x0516, r24
			//uart_puts("before talker address write\r\n");
			gpib_cmd(cmd_buf, 1);
    185e:	86 e1       	ldi	r24, 0x16	; 22
    1860:	95 e0       	ldi	r25, 0x05	; 5
    1862:	61 e0       	ldi	r22, 0x01	; 1
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gpib_cmd>
		}

		// now receive data
		//uart_puts("before status byte receive\r\n");
		e = gpib_receive(&b);
    186a:	ce 01       	movw	r24, r28
    186c:	08 96       	adiw	r24, 0x08	; 8
    186e:	0e 94 be 05 	call	0xb7c	; 0xb7c <gpib_receive>
    1872:	8f 83       	std	Y+7, r24	; 0x07
		//uart_puts("after status byte receive\r\n");
		// status byte is now in b

		if (secondary != ADDRESS_NOT_SET) {
    1874:	8d 81       	ldd	r24, Y+5	; 0x05
    1876:	8f 3f       	cpi	r24, 0xFF	; 255
    1878:	81 f1       	breq	.+96     	; 0x18da <gpib_serial_poll+0x126>
			sprintf((char*) cmd_buf,
    187a:	8e 81       	ldd	r24, Y+6	; 0x06
    187c:	88 2f       	mov	r24, r24
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	bc 01       	movw	r22, r24
    1882:	60 54       	subi	r22, 0x40	; 64
    1884:	70 40       	sbci	r23, 0x00	; 0
    1886:	8d 81       	ldd	r24, Y+5	; 0x05
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	88 85       	ldd	r24, Y+8	; 0x08
    188e:	48 2f       	mov	r20, r24
    1890:	50 e0       	ldi	r21, 0x00	; 0
    1892:	8d b7       	in	r24, 0x3d	; 61
    1894:	9e b7       	in	r25, 0x3e	; 62
    1896:	0a 97       	sbiw	r24, 0x0a	; 10
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	9e bf       	out	0x3e, r25	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	8d bf       	out	0x3d, r24	; 61
    18a2:	ed b7       	in	r30, 0x3d	; 61
    18a4:	fe b7       	in	r31, 0x3e	; 62
    18a6:	31 96       	adiw	r30, 0x01	; 1
    18a8:	86 e1       	ldi	r24, 0x16	; 22
    18aa:	95 e0       	ldi	r25, 0x05	; 5
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	80 83       	st	Z, r24
    18b0:	81 e4       	ldi	r24, 0x41	; 65
    18b2:	91 e0       	ldi	r25, 0x01	; 1
    18b4:	93 83       	std	Z+3, r25	; 0x03
    18b6:	82 83       	std	Z+2, r24	; 0x02
    18b8:	75 83       	std	Z+5, r23	; 0x05
    18ba:	64 83       	std	Z+4, r22	; 0x04
    18bc:	37 83       	std	Z+7, r19	; 0x07
    18be:	26 83       	std	Z+6, r18	; 0x06
    18c0:	51 87       	std	Z+9, r21	; 0x09
    18c2:	40 87       	std	Z+8, r20	; 0x08
    18c4:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sprintf>
    18c8:	8d b7       	in	r24, 0x3d	; 61
    18ca:	9e b7       	in	r25, 0x3e	; 62
    18cc:	0a 96       	adiw	r24, 0x0a	; 10
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	9e bf       	out	0x3e, r25	; 62
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	8d bf       	out	0x3d, r24	; 61
    18d8:	2a c0       	rjmp	.+84     	; 0x192e <gpib_serial_poll+0x17a>
					"Status byte from device primary=0x%02x,secondary=0x%02x (physical) = 0x%02x\n\r",
					TalkerAddress2Address(primary), secondary, b);
		} else {
			sprintf((char*) cmd_buf,
    18da:	8e 81       	ldd	r24, Y+6	; 0x06
    18dc:	88 2f       	mov	r24, r24
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	9c 01       	movw	r18, r24
    18e2:	20 54       	subi	r18, 0x40	; 64
    18e4:	30 40       	sbci	r19, 0x00	; 0
    18e6:	88 85       	ldd	r24, Y+8	; 0x08
    18e8:	48 2f       	mov	r20, r24
    18ea:	50 e0       	ldi	r21, 0x00	; 0
    18ec:	8d b7       	in	r24, 0x3d	; 61
    18ee:	9e b7       	in	r25, 0x3e	; 62
    18f0:	08 97       	sbiw	r24, 0x08	; 8
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	9e bf       	out	0x3e, r25	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	8d bf       	out	0x3d, r24	; 61
    18fc:	ed b7       	in	r30, 0x3d	; 61
    18fe:	fe b7       	in	r31, 0x3e	; 62
    1900:	31 96       	adiw	r30, 0x01	; 1
    1902:	86 e1       	ldi	r24, 0x16	; 22
    1904:	95 e0       	ldi	r25, 0x05	; 5
    1906:	91 83       	std	Z+1, r25	; 0x01
    1908:	80 83       	st	Z, r24
    190a:	8f e8       	ldi	r24, 0x8F	; 143
    190c:	91 e0       	ldi	r25, 0x01	; 1
    190e:	93 83       	std	Z+3, r25	; 0x03
    1910:	82 83       	std	Z+2, r24	; 0x02
    1912:	35 83       	std	Z+5, r19	; 0x05
    1914:	24 83       	std	Z+4, r18	; 0x04
    1916:	57 83       	std	Z+7, r21	; 0x07
    1918:	46 83       	std	Z+6, r20	; 0x06
    191a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sprintf>
    191e:	8d b7       	in	r24, 0x3d	; 61
    1920:	9e b7       	in	r25, 0x3e	; 62
    1922:	08 96       	adiw	r24, 0x08	; 8
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	9e bf       	out	0x3e, r25	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	8d bf       	out	0x3d, r24	; 61
					"Status byte from device primary=0x%02x (physical) = 0x%02x\n\r",
					TalkerAddress2Address(primary), b);
		}
		uart_puts((char*) cmd_buf);
    192e:	86 e1       	ldi	r24, 0x16	; 22
    1930:	95 e0       	ldi	r25, 0x05	; 5
    1932:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>

		// send UNT and UNL commands (unlisten and untalk)
		// effect: all talker stop talking and all listeners stop listening
		cmd_buf[0] = G_CMD_UNT;
    1936:	8f e5       	ldi	r24, 0x5F	; 95
    1938:	80 93 16 05 	sts	0x0516, r24
		gpib_cmd(cmd_buf, 1);
    193c:	86 e1       	ldi	r24, 0x16	; 22
    193e:	95 e0       	ldi	r25, 0x05	; 5
    1940:	61 e0       	ldi	r22, 0x01	; 1
    1942:	70 e0       	ldi	r23, 0x00	; 0
    1944:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gpib_cmd>
		cmd_buf[0] = G_CMD_UNL;
    1948:	8f e3       	ldi	r24, 0x3F	; 63
    194a:	80 93 16 05 	sts	0x0516, r24
		gpib_cmd(cmd_buf, 1);
    194e:	86 e1       	ldi	r24, 0x16	; 22
    1950:	95 e0       	ldi	r25, 0x05	; 5
    1952:	61 e0       	ldi	r22, 0x01	; 1
    1954:	70 e0       	ldi	r23, 0x00	; 0
    1956:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gpib_cmd>

		if (b & (1 << 6)) {
    195a:	88 85       	ldd	r24, Y+8	; 0x08
    195c:	88 2f       	mov	r24, r24
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	80 74       	andi	r24, 0x40	; 64
    1962:	90 70       	andi	r25, 0x00	; 0
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	81 f1       	breq	.+96     	; 0x19c8 <gpib_serial_poll+0x214>
			found = primary;
    1968:	8e 81       	ldd	r24, Y+6	; 0x06
    196a:	8c 83       	std	Y+4, r24	; 0x04
			foundPhysical = TalkerAddress2Address(found);
    196c:	8c 81       	ldd	r24, Y+4	; 0x04
    196e:	80 54       	subi	r24, 0x40	; 64
    1970:	8b 83       	std	Y+3, r24	; 0x03
			// bit 6 of status byte of SRQ emitter is 1
			// when reading status byte from emitter, he releases SRQ line (may also be tested here)
			sprintf((char*) cmd_buf,
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	48 2f       	mov	r20, r24
    197c:	50 e0       	ldi	r21, 0x00	; 0
    197e:	8d b7       	in	r24, 0x3d	; 61
    1980:	9e b7       	in	r25, 0x3e	; 62
    1982:	08 97       	sbiw	r24, 0x08	; 8
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	9e bf       	out	0x3e, r25	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	8d bf       	out	0x3d, r24	; 61
    198e:	ed b7       	in	r30, 0x3d	; 61
    1990:	fe b7       	in	r31, 0x3e	; 62
    1992:	31 96       	adiw	r30, 0x01	; 1
    1994:	86 e1       	ldi	r24, 0x16	; 22
    1996:	95 e0       	ldi	r25, 0x05	; 5
    1998:	91 83       	std	Z+1, r25	; 0x01
    199a:	80 83       	st	Z, r24
    199c:	8c ec       	ldi	r24, 0xCC	; 204
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	93 83       	std	Z+3, r25	; 0x03
    19a2:	82 83       	std	Z+2, r24	; 0x02
    19a4:	35 83       	std	Z+5, r19	; 0x05
    19a6:	24 83       	std	Z+4, r18	; 0x04
    19a8:	57 83       	std	Z+7, r21	; 0x07
    19aa:	46 83       	std	Z+6, r20	; 0x06
    19ac:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sprintf>
    19b0:	8d b7       	in	r24, 0x3d	; 61
    19b2:	9e b7       	in	r25, 0x3e	; 62
    19b4:	08 96       	adiw	r24, 0x08	; 8
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	9e bf       	out	0x3e, r25	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	8d bf       	out	0x3d, r24	; 61
					"SRQ emitter is device = 0x%02x (physical address), secondary = 0x%02x\n\r",
					foundPhysical, secondary);
			uart_puts((char*) cmd_buf);
    19c0:	86 e1       	ldi	r24, 0x16	; 22
    19c2:	95 e0       	ldi	r25, 0x05	; 5
    19c4:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
	gpib_cmd(cmd_buf, 1);
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
			i++) {
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	9a 81       	ldd	r25, Y+2	; 0x02
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	9a 83       	std	Y+2, r25	; 0x02
    19d0:	89 83       	std	Y+1, r24	; 0x01
	cmd_buf[0] = G_CMD_SPE;
	gpib_cmd(cmd_buf, 1);
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	9a 81       	ldd	r25, Y+2	; 0x02
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	fc 01       	movw	r30, r24
    19dc:	ed 59       	subi	r30, 0x9D	; 157
    19de:	fb 4f       	sbci	r31, 0xFB	; 251
    19e0:	80 81       	ld	r24, Z
    19e2:	8f 3f       	cpi	r24, 0xFF	; 255
    19e4:	21 f0       	breq	.+8      	; 0x19ee <gpib_serial_poll+0x23a>
    19e6:	8c 81       	ldd	r24, Y+4	; 0x04
    19e8:	88 23       	and	r24, r24
    19ea:	09 f4       	brne	.+2      	; 0x19ee <gpib_serial_poll+0x23a>
    19ec:	14 cf       	rjmp	.-472    	; 0x1816 <gpib_serial_poll+0x62>
		}
	}

	// serial poll disable
	// effect: all devices will return to normal behaviour as talker
	cmd_buf[0] = G_CMD_SPD;
    19ee:	89 e1       	ldi	r24, 0x19	; 25
    19f0:	80 93 16 05 	sts	0x0516, r24
	//uart_puts("before SPD\r\n");
	gpib_cmd(cmd_buf, 1);
    19f4:	86 e1       	ldi	r24, 0x16	; 22
    19f6:	95 e0       	ldi	r25, 0x05	; 5
    19f8:	61 e0       	ldi	r22, 0x01	; 1
    19fa:	70 e0       	ldi	r23, 0x00	; 0
    19fc:	0e 94 3f 07 	call	0xe7e	; 0xe7e <gpib_cmd>
	//uart_puts("after SPD\r\n");

	// "return" values determined
	*primary_v = primary;
    1a00:	e9 85       	ldd	r30, Y+9	; 0x09
    1a02:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a04:	8e 81       	ldd	r24, Y+6	; 0x06
    1a06:	80 83       	st	Z, r24
	*secondary_v = secondary;
    1a08:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a0a:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0e:	80 83       	st	Z, r24

	return found;
    1a10:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1a12:	2c 96       	adiw	r28, 0x0c	; 12
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <gpib_set_partner_address>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_address(uchar primary, uchar secondary) {
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <gpib_set_partner_address+0x6>
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	6a 83       	std	Y+2, r22	; 0x02
	controller.partner.primary = primary;
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	80 93 5f 04 	sts	0x045F, r24
	controller.partner.secondary = secondary;
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	80 93 60 04 	sts	0x0460, r24
}
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <gpib_set_partner_secondary>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_secondary(uchar secondary) {
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	0f 92       	push	r0
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	89 83       	std	Y+1, r24	; 0x01
	controller.partner.secondary = secondary;
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	80 93 60 04 	sts	0x0460, r24
}
    1a5a:	0f 90       	pop	r0
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <gpib_get_partner_pad>:

/**
 * Get primary address of device currently controlled.
 * \returns primary address Address of device.
 */
uchar gpib_get_partner_pad(void) {
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.primary;
    1a6a:	80 91 5f 04 	lds	r24, 0x045F
}
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <gpib_get_partner_sad>:

/**
 * Get secondary address of device currently controlled.
 * \returns secondary address Address of device.
 */
uchar gpib_get_partner_sad(void) {
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.secondary;
    1a7c:	80 91 60 04 	lds	r24, 0x0460
}
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <gpib_get_address>:

/**
 * Get controller address.
 * \returns address of controller.
 */
uchar gpib_get_address(void) {
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
	return controller.myaddress;
    1a8e:	80 91 5e 04 	lds	r24, 0x045E
}
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	08 95       	ret

00001a98 <gpib_set_flavour>:

void gpib_set_flavour(uchar flavour) {
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	0f 92       	push	r0
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	89 83       	std	Y+1, r24	; 0x01
	controller.flavour = flavour;
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	80 93 62 04 	sts	0x0462, r24
}
    1aaa:	0f 90       	pop	r0
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <gpib_get_flavour>:

uchar gpib_get_flavour(void) {
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
	return controller.flavour;
    1aba:	80 91 62 04 	lds	r24, 0x0462
}
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <gpib_clear_partners>:

/**
 * Clear partners list
 */
void gpib_clear_partners() {
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <gpib_clear_partners+0x6>
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < MAX_PARTNER; i++) {
    1ace:	1a 82       	std	Y+2, r1	; 0x02
    1ad0:	19 82       	std	Y+1, r1	; 0x01
    1ad2:	0e c0       	rjmp	.+28     	; 0x1af0 <gpib_clear_partners+0x2c>
		controller.partners[i].primary = ADDRESS_NOT_SET;
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	fc 01       	movw	r30, r24
    1ade:	ed 59       	subi	r30, 0x9D	; 157
    1ae0:	fb 4f       	sbci	r31, 0xFB	; 251
    1ae2:	8f ef       	ldi	r24, 0xFF	; 255
    1ae4:	80 83       	st	Z, r24

/**
 * Clear partners list
 */
void gpib_clear_partners() {
	for (int i = 0; i < MAX_PARTNER; i++) {
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aea:	01 96       	adiw	r24, 0x01	; 1
    1aec:	9a 83       	std	Y+2, r25	; 0x02
    1aee:	89 83       	std	Y+1, r24	; 0x01
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	85 30       	cpi	r24, 0x05	; 5
    1af6:	91 05       	cpc	r25, r1
    1af8:	6c f3       	brlt	.-38     	; 0x1ad4 <gpib_clear_partners+0x10>
		controller.partners[i].primary = ADDRESS_NOT_SET;
	}
}
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <gpib_add_partner_address>:

/**
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <gpib_add_partner_address+0x6>
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <gpib_add_partner_address+0x8>
    1b0c:	0f 92       	push	r0
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	8b 83       	std	Y+3, r24	; 0x03
    1b14:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1b16:	1a 82       	std	Y+2, r1	; 0x02
    1b18:	19 82       	std	Y+1, r1	; 0x01
    1b1a:	05 c0       	rjmp	.+10     	; 0x1b26 <gpib_add_partner_address+0x22>
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
			i++) {
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	9a 83       	std	Y+2, r25	; 0x02
    1b24:	89 83       	std	Y+1, r24	; 0x01
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2a:	85 30       	cpi	r24, 0x05	; 5
    1b2c:	91 05       	cpc	r25, r1
    1b2e:	54 f4       	brge	.+20     	; 0x1b44 <gpib_add_partner_address+0x40>
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	fc 01       	movw	r30, r24
    1b3a:	ed 59       	subi	r30, 0x9D	; 157
    1b3c:	fb 4f       	sbci	r31, 0xFB	; 251
    1b3e:	80 81       	ld	r24, Z
    1b40:	8f 3f       	cpi	r24, 0xFF	; 255
    1b42:	61 f7       	brne	.-40     	; 0x1b1c <gpib_add_partner_address+0x18>
			i++) {
	}
	if (i == MAX_PARTNER) {
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	9a 81       	ldd	r25, Y+2	; 0x02
    1b48:	85 30       	cpi	r24, 0x05	; 5
    1b4a:	91 05       	cpc	r25, r1
    1b4c:	39 f4       	brne	.+14     	; 0x1b5c <gpib_add_partner_address+0x58>
		uart_puts("Too much partners.\n\r");
    1b4e:	84 e1       	ldi	r24, 0x14	; 20
    1b50:	92 e0       	ldi	r25, 0x02	; 2
    1b52:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
		return 1;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	8d 83       	std	Y+5, r24	; 0x05
    1b5a:	14 c0       	rjmp	.+40     	; 0x1b84 <gpib_add_partner_address+0x80>
	}
	controller.partners[i].primary = primary;
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	fc 01       	movw	r30, r24
    1b66:	ed 59       	subi	r30, 0x9D	; 157
    1b68:	fb 4f       	sbci	r31, 0xFB	; 251
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	80 83       	st	Z, r24
	controller.partners[i].secondary = secondary;
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	03 96       	adiw	r24, 0x03	; 3
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	fc 01       	movw	r30, r24
    1b7a:	e2 5a       	subi	r30, 0xA2	; 162
    1b7c:	fb 4f       	sbci	r31, 0xFB	; 251
    1b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b80:	80 83       	st	Z, r24
	return 0;
    1b82:	1d 82       	std	Y+5, r1	; 0x05
    1b84:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <gpib_remove_partner_address>:

/**
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <gpib_remove_partner_address+0x6>
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <gpib_remove_partner_address+0x8>
    1b9e:	0f 92       	push	r0
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	8b 83       	std	Y+3, r24	; 0x03
    1ba6:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1ba8:	1a 82       	std	Y+2, r1	; 0x02
    1baa:	19 82       	std	Y+1, r1	; 0x01
    1bac:	05 c0       	rjmp	.+10     	; 0x1bb8 <gpib_remove_partner_address+0x22>
			i < MAX_PARTNER
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb2:	01 96       	adiw	r24, 0x01	; 1
    1bb4:	9a 83       	std	Y+2, r25	; 0x02
    1bb6:	89 83       	std	Y+1, r24	; 0x01
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbc:	85 30       	cpi	r24, 0x05	; 5
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	bc f4       	brge	.+46     	; 0x1bf0 <gpib_remove_partner_address+0x5a>
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	fc 01       	movw	r30, r24
    1bcc:	ed 59       	subi	r30, 0x9D	; 157
    1bce:	fb 4f       	sbci	r31, 0xFB	; 251
    1bd0:	90 81       	ld	r25, Z
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	98 17       	cp	r25, r24
    1bd6:	59 f7       	brne	.-42     	; 0x1bae <gpib_remove_partner_address+0x18>
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	9a 81       	ldd	r25, Y+2	; 0x02
    1bdc:	03 96       	adiw	r24, 0x03	; 3
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	fc 01       	movw	r30, r24
    1be4:	e2 5a       	subi	r30, 0xA2	; 162
    1be6:	fb 4f       	sbci	r31, 0xFB	; 251
    1be8:	90 81       	ld	r25, Z
    1bea:	8c 81       	ldd	r24, Y+4	; 0x04
    1bec:	98 17       	cp	r25, r24
    1bee:	f9 f6       	brne	.-66     	; 0x1bae <gpib_remove_partner_address+0x18>
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
	}
	if (i == MAX_PARTNER) {
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf4:	85 30       	cpi	r24, 0x05	; 5
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	39 f4       	brne	.+14     	; 0x1c08 <gpib_remove_partner_address+0x72>
		uart_puts("Partner unknown.\n\r");
    1bfa:	89 e2       	ldi	r24, 0x29	; 41
    1bfc:	92 e0       	ldi	r25, 0x02	; 2
    1bfe:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
		return 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	8d 83       	std	Y+5, r24	; 0x05
    1c06:	14 c0       	rjmp	.+40     	; 0x1c30 <gpib_remove_partner_address+0x9a>
	}
	controller.partners[i].primary = ADDRESS_NOT_SET;
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	fc 01       	movw	r30, r24
    1c12:	ed 59       	subi	r30, 0x9D	; 157
    1c14:	fb 4f       	sbci	r31, 0xFB	; 251
    1c16:	8f ef       	ldi	r24, 0xFF	; 255
    1c18:	80 83       	st	Z, r24
	controller.partners[i].secondary = ADDRESS_NOT_SET;
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1e:	03 96       	adiw	r24, 0x03	; 3
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	fc 01       	movw	r30, r24
    1c26:	e2 5a       	subi	r30, 0xA2	; 162
    1c28:	fb 4f       	sbci	r31, 0xFB	; 251
    1c2a:	8f ef       	ldi	r24, 0xFF	; 255
    1c2c:	80 83       	st	Z, r24
	return 0;
    1c2e:	1d 82       	std	Y+5, r1	; 0x05
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <arb_ramp>:
void receiveAnswer();

#define ARB_TEST
#ifdef ARB_TEST

void arb_ramp() {
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	2e 97       	sbiw	r28, 0x0e	; 14
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
	uchar b[10];

	gpib_prepare_write();
    1c56:	0e 94 2d 05 	call	0xa5a	; 0xa5a <gpib_prepare_write>
	gpib_write_prologue(0);
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	0e 94 9b 07 	call	0xf36	; 0xf36 <gpib_write_prologue>

	gpib_write_string("SOUR:LIST:SEGM:VOLT ");
    1c60:	8c e3       	ldi	r24, 0x3C	; 60
    1c62:	92 e0       	ldi	r25, 0x02	; 2
    1c64:	0e 94 25 08 	call	0x104a	; 0x104a <gpib_write_string>

	for (int i = 0; i < 4096; i++) {
    1c68:	1c 82       	std	Y+4, r1	; 0x04
    1c6a:	1b 82       	std	Y+3, r1	; 0x03
    1c6c:	39 c0       	rjmp	.+114    	; 0x1ce0 <arb_ramp+0x9e>
		int f = i / 1000;
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	28 ee       	ldi	r18, 0xE8	; 232
    1c74:	33 e0       	ldi	r19, 0x03	; 3
    1c76:	b9 01       	movw	r22, r18
    1c78:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <__divmodhi4>
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	9a 83       	std	Y+2, r25	; 0x02
    1c80:	89 83       	std	Y+1, r24	; 0x01
		sprintf(b, "%d", f);
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <arb_ramp+0x42>
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <arb_ramp+0x44>
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <arb_ramp+0x46>
    1c88:	ed b7       	in	r30, 0x3d	; 61
    1c8a:	fe b7       	in	r31, 0x3e	; 62
    1c8c:	31 96       	adiw	r30, 0x01	; 1
    1c8e:	ce 01       	movw	r24, r28
    1c90:	05 96       	adiw	r24, 0x05	; 5
    1c92:	91 83       	std	Z+1, r25	; 0x01
    1c94:	80 83       	st	Z, r24
    1c96:	81 e5       	ldi	r24, 0x51	; 81
    1c98:	92 e0       	ldi	r25, 0x02	; 2
    1c9a:	93 83       	std	Z+3, r25	; 0x03
    1c9c:	82 83       	std	Z+2, r24	; 0x02
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca2:	95 83       	std	Z+5, r25	; 0x05
    1ca4:	84 83       	std	Z+4, r24	; 0x04
    1ca6:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sprintf>
    1caa:	8d b7       	in	r24, 0x3d	; 61
    1cac:	9e b7       	in	r25, 0x3e	; 62
    1cae:	06 96       	adiw	r24, 0x06	; 6
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	9e bf       	out	0x3e, r25	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	8d bf       	out	0x3d, r24	; 61
		gpib_write_byte(b[0], 0);
    1cba:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbc:	60 e0       	ldi	r22, 0x00	; 0
    1cbe:	0e 94 54 08 	call	0x10a8	; 0x10a8 <gpib_write_byte>
		if (i < 4096 - 1) {
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	2f e0       	ldi	r18, 0x0F	; 15
    1cc8:	8f 3f       	cpi	r24, 0xFF	; 255
    1cca:	92 07       	cpc	r25, r18
    1ccc:	24 f4       	brge	.+8      	; 0x1cd6 <arb_ramp+0x94>
			gpib_write_byte(',', 0);
    1cce:	8c e2       	ldi	r24, 0x2C	; 44
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	0e 94 54 08 	call	0x10a8	; 0x10a8 <gpib_write_byte>
	gpib_prepare_write();
	gpib_write_prologue(0);

	gpib_write_string("SOUR:LIST:SEGM:VOLT ");

	for (int i = 0; i < 4096; i++) {
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	01 96       	adiw	r24, 0x01	; 1
    1cdc:	9c 83       	std	Y+4, r25	; 0x04
    1cde:	8b 83       	std	Y+3, r24	; 0x03
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce4:	20 e1       	ldi	r18, 0x10	; 16
    1ce6:	80 30       	cpi	r24, 0x00	; 0
    1ce8:	92 07       	cpc	r25, r18
    1cea:	0c f2       	brlt	.-126    	; 0x1c6e <arb_ramp+0x2c>
		if (i < 4096 - 1) {
			gpib_write_byte(',', 0);
		}
	}

	gpib_write_byte(ASCII_CODE_CR, 1);
    1cec:	8d e0       	ldi	r24, 0x0D	; 13
    1cee:	61 e0       	ldi	r22, 0x01	; 1
    1cf0:	0e 94 54 08 	call	0x10a8	; 0x10a8 <gpib_write_byte>
	gpib_write_epilogue(0);
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <gpib_write_epilogue>
	gpib_untalkUnlisten();
    1cfa:	0e 94 9b 05 	call	0xb36	; 0xb36 <gpib_untalkUnlisten>
}
    1cfe:	2e 96       	adiw	r28, 0x0e	; 14
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <arb>:

void arb() {
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
	gpib_write_command("*RST");
    1d18:	84 e5       	ldi	r24, 0x54	; 84
    1d1a:	92 e0       	ldi	r25, 0x02	; 2
    1d1c:	0e 94 07 08 	call	0x100e	; 0x100e <gpib_write_command>
	gpib_write_command("SOUR:ROSC:SOUR INT;");
    1d20:	89 e5       	ldi	r24, 0x59	; 89
    1d22:	92 e0       	ldi	r25, 0x02	; 2
    1d24:	0e 94 07 08 	call	0x100e	; 0x100e <gpib_write_command>
	gpib_write_command(":SOUR:FREQ:FIX 1E3;");
    1d28:	8d e6       	ldi	r24, 0x6D	; 109
    1d2a:	92 e0       	ldi	r25, 0x02	; 2
    1d2c:	0e 94 07 08 	call	0x100e	; 0x100e <gpib_write_command>
	gpib_write_command(":SOUR:FUNC:SHAP USER;");
    1d30:	81 e8       	ldi	r24, 0x81	; 129
    1d32:	92 e0       	ldi	r25, 0x02	; 2
    1d34:	0e 94 07 08 	call	0x100e	; 0x100e <gpib_write_command>
	gpib_write_command(":SOUR:VOLT:LEV:IMM:AMPL 5V");
    1d38:	87 e9       	ldi	r24, 0x97	; 151
    1d3a:	92 e0       	ldi	r25, 0x02	; 2
    1d3c:	0e 94 07 08 	call	0x100e	; 0x100e <gpib_write_command>
	gpib_write_command("SOUR:LIST:SEGM:SEL A"); // no ';' at end!
    1d40:	82 eb       	ldi	r24, 0xB2	; 178
    1d42:	92 e0       	ldi	r25, 0x02	; 2
    1d44:	0e 94 07 08 	call	0x100e	; 0x100e <gpib_write_command>
	arb_ramp();
    1d48:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <arb_ramp>
	gpib_write_command("SOUR:FUNC:USER A");
    1d4c:	87 ec       	ldi	r24, 0xC7	; 199
    1d4e:	92 e0       	ldi	r25, 0x02	; 2
    1d50:	0e 94 07 08 	call	0x100e	; 0x100e <gpib_write_command>
	gpib_write_command("INIT:IMM");
    1d54:	88 ed       	ldi	r24, 0xD8	; 216
    1d56:	92 e0       	ldi	r25, 0x02	; 2
    1d58:	0e 94 07 08 	call	0x100e	; 0x100e <gpib_write_command>
	//send_command("SOUR:LIST:SEGM:SEL?");
}
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <stringToTwoUchars>:

/**
 * Read two integers from string like "45 56" or one integer. In latter case
 * the second integer is initialized with a special value.
 */
static void stringToTwoUchars(char *string, uchar *a, uchar *b) {
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	28 97       	sbiw	r28, 0x08	; 8
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	9c 83       	std	Y+4, r25	; 0x04
    1d78:	8b 83       	std	Y+3, r24	; 0x03
    1d7a:	7e 83       	std	Y+6, r23	; 0x06
    1d7c:	6d 83       	std	Y+5, r22	; 0x05
    1d7e:	58 87       	std	Y+8, r21	; 0x08
    1d80:	4f 83       	std	Y+7, r20	; 0x07
	char *token = strtok(string, " ");
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	9c 81       	ldd	r25, Y+4	; 0x04
    1d86:	21 ee       	ldi	r18, 0xE1	; 225
    1d88:	32 e0       	ldi	r19, 0x02	; 2
    1d8a:	b9 01       	movw	r22, r18
    1d8c:	0e 94 a8 01 	call	0x350	; 0x350 <strtok>
    1d90:	9a 83       	std	Y+2, r25	; 0x02
    1d92:	89 83       	std	Y+1, r24	; 0x01
	*a = atoi((char*) token);
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	9a 81       	ldd	r25, Y+2	; 0x02
    1d98:	0e 94 8a 01 	call	0x314	; 0x314 <atoi>
    1d9c:	ed 81       	ldd	r30, Y+5	; 0x05
    1d9e:	fe 81       	ldd	r31, Y+6	; 0x06
    1da0:	80 83       	st	Z, r24
	token = strtok(NULL, " ");
    1da2:	21 ee       	ldi	r18, 0xE1	; 225
    1da4:	32 e0       	ldi	r19, 0x02	; 2
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	b9 01       	movw	r22, r18
    1dac:	0e 94 a8 01 	call	0x350	; 0x350 <strtok>
    1db0:	9a 83       	std	Y+2, r25	; 0x02
    1db2:	89 83       	std	Y+1, r24	; 0x01
	if (token != NULL) {
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	9a 81       	ldd	r25, Y+2	; 0x02
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	41 f0       	breq	.+16     	; 0x1dcc <stringToTwoUchars+0x6a>
		*b = atoi((char*) token);
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc0:	0e 94 8a 01 	call	0x314	; 0x314 <atoi>
    1dc4:	ef 81       	ldd	r30, Y+7	; 0x07
    1dc6:	f8 85       	ldd	r31, Y+8	; 0x08
    1dc8:	80 83       	st	Z, r24
    1dca:	04 c0       	rjmp	.+8      	; 0x1dd4 <stringToTwoUchars+0x72>
	} else {
		*b = ADDRESS_NOT_SET;
    1dcc:	ef 81       	ldd	r30, Y+7	; 0x07
    1dce:	f8 85       	ldd	r31, Y+8	; 0x08
    1dd0:	8f ef       	ldi	r24, 0xFF	; 255
    1dd2:	80 83       	st	Z, r24
	}
}
    1dd4:	28 96       	adiw	r28, 0x08	; 8
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <check_errors>:
 * Checks for errors.
 *
 * Reads error queue. output is one error per line.
 *
 */
void check_errors() {
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	c7 55       	subi	r28, 0x57	; 87
    1df0:	d0 40       	sbci	r29, 0x00	; 0
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	de bf       	out	0x3e, r29	; 62
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	cd bf       	out	0x3d, r28	; 61
	char *error_cmd = "SYST:ERR?";
    1dfc:	83 ee       	ldi	r24, 0xE3	; 227
    1dfe:	92 e0       	ldi	r25, 0x02	; 2
    1e00:	9e 83       	std	Y+6, r25	; 0x06
    1e02:	8d 83       	std	Y+5, r24	; 0x05
	uchar msg[80];
	uchar b, e;
	uchar colptr = 0;
    1e04:	1b 82       	std	Y+3, r1	; 0x03
	uchar allErrorsRead = 0;
    1e06:	1a 82       	std	Y+2, r1	; 0x02
    1e08:	48 c0       	rjmp	.+144    	; 0x1e9a <check_errors+0xb4>

	while (!allErrorsRead) {
		gpib_write_command(error_cmd);
    1e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0e:	0e 94 07 08 	call	0x100e	; 0x100e <gpib_write_command>
		gpib_prepare_read();
    1e12:	0e 94 64 05 	call	0xac8	; 0xac8 <gpib_prepare_read>
		// read the answer until EOI is detected (then e becomes true)
		uchar i = 0;
    1e16:	19 82       	std	Y+1, r1	; 0x01
		do {
			// gpib bus receive
			e = gpib_receive(&b);
    1e18:	ce 01       	movw	r24, r28
    1e1a:	89 5a       	subi	r24, 0xA9	; 169
    1e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1e:	0e 94 be 05 	call	0xb7c	; 0xb7c <gpib_receive>
    1e22:	8c 83       	std	Y+4, r24	; 0x04
			msg[i++] = b;
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e9 5a       	subi	r30, 0xA9	; 169
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	40 81       	ld	r20, Z
    1e32:	ce 01       	movw	r24, r28
    1e34:	07 96       	adiw	r24, 0x07	; 7
    1e36:	fc 01       	movw	r30, r24
    1e38:	e2 0f       	add	r30, r18
    1e3a:	f3 1f       	adc	r31, r19
    1e3c:	40 83       	st	Z, r20
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	8f 5f       	subi	r24, 0xFF	; 255
    1e42:	89 83       	std	Y+1, r24	; 0x01
		} while (!e);
    1e44:	8c 81       	ldd	r24, Y+4	; 0x04
    1e46:	88 23       	and	r24, r24
    1e48:	39 f3       	breq	.-50     	; 0x1e18 <check_errors+0x32>
		// terminate string
		//msg[i++] = '\n';
		msg[i++] = '\r';
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	ce 01       	movw	r24, r28
    1e52:	07 96       	adiw	r24, 0x07	; 7
    1e54:	fc 01       	movw	r30, r24
    1e56:	e2 0f       	add	r30, r18
    1e58:	f3 1f       	adc	r31, r19
    1e5a:	8d e0       	ldi	r24, 0x0D	; 13
    1e5c:	80 83       	st	Z, r24
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	8f 5f       	subi	r24, 0xFF	; 255
    1e62:	89 83       	std	Y+1, r24	; 0x01
		msg[i] = 0x00;
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	07 96       	adiw	r24, 0x07	; 7
    1e6e:	fc 01       	movw	r30, r24
    1e70:	e2 0f       	add	r30, r18
    1e72:	f3 1f       	adc	r31, r19
    1e74:	10 82       	st	Z, r1
		// check if all errors have been read
		if (strncmp(msg,"+0,",3)==0) {
    1e76:	ce 01       	movw	r24, r28
    1e78:	07 96       	adiw	r24, 0x07	; 7
    1e7a:	2d ee       	ldi	r18, 0xED	; 237
    1e7c:	32 e0       	ldi	r19, 0x02	; 2
    1e7e:	b9 01       	movw	r22, r18
    1e80:	43 e0       	ldi	r20, 0x03	; 3
    1e82:	50 e0       	ldi	r21, 0x00	; 0
    1e84:	0e 94 b6 01 	call	0x36c	; 0x36c <strncmp>
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	19 f4       	brne	.+6      	; 0x1e92 <check_errors+0xac>
			allErrorsRead=1;
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	8a 83       	std	Y+2, r24	; 0x02
    1e90:	04 c0       	rjmp	.+8      	; 0x1e9a <check_errors+0xb4>
		} else {
			uart_puts((char*) msg);
    1e92:	ce 01       	movw	r24, r28
    1e94:	07 96       	adiw	r24, 0x07	; 7
    1e96:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
	uchar msg[80];
	uchar b, e;
	uchar colptr = 0;
	uchar allErrorsRead = 0;

	while (!allErrorsRead) {
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	88 23       	and	r24, r24
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <check_errors+0xbc>
    1ea0:	b4 cf       	rjmp	.-152    	; 0x1e0a <check_errors+0x24>
			allErrorsRead=1;
		} else {
			uart_puts((char*) msg);
		}
	}
}
    1ea2:	c9 5a       	subi	r28, 0xA9	; 169
    1ea4:	df 4f       	sbci	r29, 0xFF	; 255
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <input_char>:

/**
 * Reads in character into parameter c. Checks for errors and prints them out.
 * Returns 0 if there is no char to read, 1 if there was a char read in.
 */
uchar input_char(uchar *ch) {
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <input_char+0x6>
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <input_char+0x8>
    1ebe:	0f 92       	push	r0
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	9c 83       	std	Y+4, r25	; 0x04
    1ec6:	8b 83       	std	Y+3, r24	; 0x03
	 * uart_getc() returns in the lower byte the received character and
	 * in the higher byte (bitmask) the last receive error
	 * UART_NO_DATA is returned when no data is available.
	 *
	 */
	c = uart_getc();
    1ec8:	0e 94 7d 15 	call	0x2afa	; 0x2afa <uart_getc>
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	89 83       	std	Y+1, r24	; 0x01
	if (c & UART_NO_DATA) {
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed4:	80 70       	andi	r24, 0x00	; 0
    1ed6:	91 70       	andi	r25, 0x01	; 1
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	11 f0       	breq	.+4      	; 0x1ee0 <input_char+0x2a>
		// no data available from UART
		return 0;
    1edc:	1d 82       	std	Y+5, r1	; 0x05
    1ede:	24 c0       	rjmp	.+72     	; 0x1f28 <input_char+0x72>
	}
	// make uchar from character in int value
	*ch = (uchar) c;
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee6:	80 83       	st	Z, r24

	/*
	 * new data available from UART
	 * check for Frame or Overrun error
	 */
	if (c & UART_FRAME_ERROR) {
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	9a 81       	ldd	r25, Y+2	; 0x02
    1eec:	80 70       	andi	r24, 0x00	; 0
    1eee:	98 70       	andi	r25, 0x08	; 8
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	21 f0       	breq	.+8      	; 0x1efc <input_char+0x46>
		/* Framing Error detected, i.e no stop bit detected */
		uart_puts_P("UART Frame Error: ");
    1ef4:	81 e8       	ldi	r24, 0x81	; 129
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
	}
	if (c & UART_OVERRUN_ERROR) {
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	9a 81       	ldd	r25, Y+2	; 0x02
    1f00:	80 70       	andi	r24, 0x00	; 0
    1f02:	94 70       	andi	r25, 0x04	; 4
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	21 f0       	breq	.+8      	; 0x1f10 <input_char+0x5a>
		/*
		 * Overrun, a character already present in the UART UDR register was
		 * not read by the interrupt handler before the next character arrived,
		 * one or more received characters have been dropped
		 */
		uart_puts_P("UART Overrun Error: ");
    1f08:	8c e6       	ldi	r24, 0x6C	; 108
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
	}
	if (c & UART_BUFFER_OVERFLOW) {
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	9a 81       	ldd	r25, Y+2	; 0x02
    1f14:	80 70       	andi	r24, 0x00	; 0
    1f16:	92 70       	andi	r25, 0x02	; 2
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	21 f0       	breq	.+8      	; 0x1f24 <input_char+0x6e>
		/*
		 * We are not reading the receive buffer fast enough,
		 * one or more received character have been dropped
		 */
		uart_puts_P("Buffer overflow error: ");
    1f1c:	84 e5       	ldi	r24, 0x54	; 84
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
	}
	return 1;
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	8d 83       	std	Y+5, r24	; 0x05
    1f28:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	08 95       	ret

00001f3a <process_char>:
 * a) xon/xoff mode forward buffer to GPIB
 * b) no flow control: prints error message that input buffer is full.
 *
 * Returns 1 if command end is detected, 0 otherwise.
 */
uchar process_char(uchar *buf, uchar ch, int *ptr) {
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	00 d0       	rcall	.+0      	; 0x1f40 <process_char+0x6>
    1f40:	00 d0       	rcall	.+0      	; 0x1f42 <process_char+0x8>
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <process_char+0xa>
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	9b 83       	std	Y+3, r25	; 0x03
    1f4a:	8a 83       	std	Y+2, r24	; 0x02
    1f4c:	6c 83       	std	Y+4, r22	; 0x04
    1f4e:	5e 83       	std	Y+6, r21	; 0x06
    1f50:	4d 83       	std	Y+5, r20	; 0x05
	uchar ret = 0;
    1f52:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * send received character back depending on global flag
	 */
	if (rs232_remote_echo) {
    1f54:	80 91 57 04 	lds	r24, 0x0457
    1f58:	88 23       	and	r24, r24
    1f5a:	19 f0       	breq	.+6      	; 0x1f62 <process_char+0x28>
		uart_putc((unsigned char) ch);
    1f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5e:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <uart_putc>
	}

	// if input buffer is not full, add char
	if (*ptr < COMMAND_INPUT_BUFFER_SIZE - 1) {
    1f62:	ed 81       	ldd	r30, Y+5	; 0x05
    1f64:	fe 81       	ldd	r31, Y+6	; 0x06
    1f66:	80 81       	ld	r24, Z
    1f68:	91 81       	ldd	r25, Z+1	; 0x01
    1f6a:	8f 34       	cpi	r24, 0x4F	; 79
    1f6c:	91 05       	cpc	r25, r1
    1f6e:	ec f4       	brge	.+58     	; 0x1faa <process_char+0x70>
		buf[(*ptr)++] = ch;
    1f70:	ed 81       	ldd	r30, Y+5	; 0x05
    1f72:	fe 81       	ldd	r31, Y+6	; 0x06
    1f74:	40 81       	ld	r20, Z
    1f76:	51 81       	ldd	r21, Z+1	; 0x01
    1f78:	9a 01       	movw	r18, r20
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7e:	fc 01       	movw	r30, r24
    1f80:	e2 0f       	add	r30, r18
    1f82:	f3 1f       	adc	r31, r19
    1f84:	8c 81       	ldd	r24, Y+4	; 0x04
    1f86:	80 83       	st	Z, r24
    1f88:	ca 01       	movw	r24, r20
    1f8a:	01 96       	adiw	r24, 0x01	; 1
    1f8c:	ed 81       	ldd	r30, Y+5	; 0x05
    1f8e:	fe 81       	ldd	r31, Y+6	; 0x06
    1f90:	91 83       	std	Z+1, r25	; 0x01
    1f92:	80 83       	st	Z, r24
		buf[*ptr] = '\0';
    1f94:	ed 81       	ldd	r30, Y+5	; 0x05
    1f96:	fe 81       	ldd	r31, Y+6	; 0x06
    1f98:	80 81       	ld	r24, Z
    1f9a:	91 81       	ldd	r25, Z+1	; 0x01
    1f9c:	9c 01       	movw	r18, r24
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	e2 0f       	add	r30, r18
    1fa6:	f3 1f       	adc	r31, r19
    1fa8:	10 82       	st	Z, r1
	}

	// if command ends or buffer is full ...
	if (ch == ASCII_CODE_CR || *ptr >= COMMAND_INPUT_BUFFER_SIZE - 1) {
    1faa:	8c 81       	ldd	r24, Y+4	; 0x04
    1fac:	8d 30       	cpi	r24, 0x0D	; 13
    1fae:	39 f0       	breq	.+14     	; 0x1fbe <process_char+0x84>
    1fb0:	ed 81       	ldd	r30, Y+5	; 0x05
    1fb2:	fe 81       	ldd	r31, Y+6	; 0x06
    1fb4:	80 81       	ld	r24, Z
    1fb6:	91 81       	ldd	r25, Z+1	; 0x01
    1fb8:	8f 34       	cpi	r24, 0x4F	; 79
    1fba:	91 05       	cpc	r25, r1
    1fbc:	14 f1       	brlt	.+68     	; 0x2002 <process_char+0xc8>
		if (ch == ASCII_CODE_CR) {
    1fbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc0:	8d 30       	cpi	r24, 0x0D	; 13
    1fc2:	b9 f4       	brne	.+46     	; 0x1ff2 <process_char+0xb8>
			// adjust string terminator
			buf[--(*ptr)] = '\0';
    1fc4:	ed 81       	ldd	r30, Y+5	; 0x05
    1fc6:	fe 81       	ldd	r31, Y+6	; 0x06
    1fc8:	80 81       	ld	r24, Z
    1fca:	91 81       	ldd	r25, Z+1	; 0x01
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	ed 81       	ldd	r30, Y+5	; 0x05
    1fd0:	fe 81       	ldd	r31, Y+6	; 0x06
    1fd2:	91 83       	std	Z+1, r25	; 0x01
    1fd4:	80 83       	st	Z, r24
    1fd6:	ed 81       	ldd	r30, Y+5	; 0x05
    1fd8:	fe 81       	ldd	r31, Y+6	; 0x06
    1fda:	80 81       	ld	r24, Z
    1fdc:	91 81       	ldd	r25, Z+1	; 0x01
    1fde:	9c 01       	movw	r18, r24
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	e2 0f       	add	r30, r18
    1fe8:	f3 1f       	adc	r31, r19
    1fea:	10 82       	st	Z, r1
			// let calling function send last command part (or command itself)
			ret = 1;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	89 83       	std	Y+1, r24	; 0x01
    1ff0:	08 c0       	rjmp	.+16     	; 0x2002 <process_char+0xc8>
		} else {
			// send intermediate part of command.
			uart_puts_P("Command overflow.");
    1ff2:	84 e9       	ldi	r24, 0x94	; 148
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
			*ptr = 0;
    1ffa:	ed 81       	ldd	r30, Y+5	; 0x05
    1ffc:	fe 81       	ldd	r31, Y+6	; 0x06
    1ffe:	11 82       	std	Z+1, r1	; 0x01
    2000:	10 82       	st	Z, r1
		}
	}
	return ret;
    2002:	89 81       	ldd	r24, Y+1	; 0x01
}
    2004:	26 96       	adiw	r28, 0x06	; 6
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	de bf       	out	0x3e, r29	; 62
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	cd bf       	out	0x3d, r28	; 61
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <input_process>:
 * This approach handles small single line commands (needing no flow control) and large
 * multi-line commands if flow control is xon/xoff.
 *
 * \returns The character read in
 */
uchar input_process(uchar *buf, int *ptr) {
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	27 97       	sbiw	r28, 0x07	; 7
    2020:	0f b6       	in	r0, 0x3f	; 63
    2022:	f8 94       	cli
    2024:	de bf       	out	0x3e, r29	; 62
    2026:	0f be       	out	0x3f, r0	; 63
    2028:	cd bf       	out	0x3d, r28	; 61
    202a:	9c 83       	std	Y+4, r25	; 0x04
    202c:	8b 83       	std	Y+3, r24	; 0x03
    202e:	7e 83       	std	Y+6, r23	; 0x06
    2030:	6d 83       	std	Y+5, r22	; 0x05
	uchar ch, ret = 0;
    2032:	19 82       	std	Y+1, r1	; 0x01

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
    2034:	0e 94 77 14 	call	0x28ee	; 0x28ee <uart_get_flow_control>
    2038:	81 30       	cpi	r24, 0x01	; 1
    203a:	b9 f4       	brne	.+46     	; 0x206a <input_process+0x54>
    203c:	12 c0       	rjmp	.+36     	; 0x2062 <input_process+0x4c>
		while (!ret) {
			// if nothing can be read in, return
			if (!input_char(&ch)) {
    203e:	ce 01       	movw	r24, r28
    2040:	02 96       	adiw	r24, 0x02	; 2
    2042:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <input_char>
    2046:	88 23       	and	r24, r24
    2048:	11 f4       	brne	.+4      	; 0x204e <input_process+0x38>
				return 0;
    204a:	1f 82       	std	Y+7, r1	; 0x07
    204c:	22 c0       	rjmp	.+68     	; 0x2092 <input_process+0x7c>
			}
			ret = process_char(buf, ch, ptr);
    204e:	4a 81       	ldd	r20, Y+2	; 0x02
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	9c 81       	ldd	r25, Y+4	; 0x04
    2054:	2d 81       	ldd	r18, Y+5	; 0x05
    2056:	3e 81       	ldd	r19, Y+6	; 0x06
    2058:	64 2f       	mov	r22, r20
    205a:	a9 01       	movw	r20, r18
    205c:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <process_char>
    2060:	89 83       	std	Y+1, r24	; 0x01
 */
uchar input_process(uchar *buf, int *ptr) {
	uchar ch, ret = 0;

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
		while (!ret) {
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	88 23       	and	r24, r24
    2066:	59 f3       	breq	.-42     	; 0x203e <input_process+0x28>
    2068:	12 c0       	rjmp	.+36     	; 0x208e <input_process+0x78>
			}
			ret = process_char(buf, ch, ptr);
		}
	} else {
		// if nothing can be read in, return
		if (!input_char(&ch)) {
    206a:	ce 01       	movw	r24, r28
    206c:	02 96       	adiw	r24, 0x02	; 2
    206e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <input_char>
    2072:	88 23       	and	r24, r24
    2074:	11 f4       	brne	.+4      	; 0x207a <input_process+0x64>
			return 0;
    2076:	1f 82       	std	Y+7, r1	; 0x07
    2078:	0c c0       	rjmp	.+24     	; 0x2092 <input_process+0x7c>
		}
		ret = process_char(buf, ch, ptr);
    207a:	4a 81       	ldd	r20, Y+2	; 0x02
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	9c 81       	ldd	r25, Y+4	; 0x04
    2080:	2d 81       	ldd	r18, Y+5	; 0x05
    2082:	3e 81       	ldd	r19, Y+6	; 0x06
    2084:	64 2f       	mov	r22, r20
    2086:	a9 01       	movw	r20, r18
    2088:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <process_char>
    208c:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	8f 83       	std	Y+7, r24	; 0x07
    2092:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2094:	27 96       	adiw	r28, 0x07	; 7
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <handle_internal_commands>:

/**
 * Handles builtin commands.
 */
void handle_internal_commands(uchar *cmd) {
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	00 d0       	rcall	.+0      	; 0x20ac <handle_internal_commands+0x6>
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <handle_internal_commands+0x8>
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <handle_internal_commands+0xa>
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	9c 83       	std	Y+4, r25	; 0x04
    20b6:	8b 83       	std	Y+3, r24	; 0x03
	uchar val, val1;

	switch (cmd[1]) {
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	9c 81       	ldd	r25, Y+4	; 0x04
    20bc:	fc 01       	movw	r30, r24
    20be:	31 96       	adiw	r30, 0x01	; 1
    20c0:	80 81       	ld	r24, Z
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	3e 83       	std	Y+6, r19	; 0x06
    20c8:	2d 83       	std	Y+5, r18	; 0x05
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	88 36       	cpi	r24, 0x68	; 104
    20d0:	91 05       	cpc	r25, r1
    20d2:	09 f4       	brne	.+2      	; 0x20d6 <handle_internal_commands+0x30>
    20d4:	40 c1       	rjmp	.+640    	; 0x2356 <handle_internal_commands+0x2b0>
    20d6:	2d 81       	ldd	r18, Y+5	; 0x05
    20d8:	3e 81       	ldd	r19, Y+6	; 0x06
    20da:	29 36       	cpi	r18, 0x69	; 105
    20dc:	31 05       	cpc	r19, r1
    20de:	f4 f4       	brge	.+60     	; 0x211c <handle_internal_commands+0x76>
    20e0:	8d 81       	ldd	r24, Y+5	; 0x05
    20e2:	9e 81       	ldd	r25, Y+6	; 0x06
    20e4:	81 36       	cpi	r24, 0x61	; 97
    20e6:	91 05       	cpc	r25, r1
    20e8:	c1 f1       	breq	.+112    	; 0x215a <handle_internal_commands+0xb4>
    20ea:	2d 81       	ldd	r18, Y+5	; 0x05
    20ec:	3e 81       	ldd	r19, Y+6	; 0x06
    20ee:	22 36       	cpi	r18, 0x62	; 98
    20f0:	31 05       	cpc	r19, r1
    20f2:	6c f4       	brge	.+26     	; 0x210e <handle_internal_commands+0x68>
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	9e 81       	ldd	r25, Y+6	; 0x06
    20f8:	8b 32       	cpi	r24, 0x2B	; 43
    20fa:	91 05       	cpc	r25, r1
    20fc:	09 f4       	brne	.+2      	; 0x2100 <handle_internal_commands+0x5a>
    20fe:	96 c0       	rjmp	.+300    	; 0x222c <handle_internal_commands+0x186>
    2100:	2d 81       	ldd	r18, Y+5	; 0x05
    2102:	3e 81       	ldd	r19, Y+6	; 0x06
    2104:	2d 32       	cpi	r18, 0x2D	; 45
    2106:	31 05       	cpc	r19, r1
    2108:	09 f4       	brne	.+2      	; 0x210c <handle_internal_commands+0x66>
    210a:	ce c0       	rjmp	.+412    	; 0x22a8 <handle_internal_commands+0x202>
    210c:	5e c1       	rjmp	.+700    	; 0x23ca <handle_internal_commands+0x324>
    210e:	8d 81       	ldd	r24, Y+5	; 0x05
    2110:	9e 81       	ldd	r25, Y+6	; 0x06
    2112:	85 36       	cpi	r24, 0x65	; 101
    2114:	91 05       	cpc	r25, r1
    2116:	09 f4       	brne	.+2      	; 0x211a <handle_internal_commands+0x74>
    2118:	46 c1       	rjmp	.+652    	; 0x23a6 <handle_internal_commands+0x300>
    211a:	57 c1       	rjmp	.+686    	; 0x23ca <handle_internal_commands+0x324>
    211c:	2d 81       	ldd	r18, Y+5	; 0x05
    211e:	3e 81       	ldd	r19, Y+6	; 0x06
    2120:	23 37       	cpi	r18, 0x73	; 115
    2122:	31 05       	cpc	r19, r1
    2124:	09 f4       	brne	.+2      	; 0x2128 <handle_internal_commands+0x82>
    2126:	57 c0       	rjmp	.+174    	; 0x21d6 <handle_internal_commands+0x130>
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	84 37       	cpi	r24, 0x74	; 116
    212e:	91 05       	cpc	r25, r1
    2130:	3c f4       	brge	.+14     	; 0x2140 <handle_internal_commands+0x9a>
    2132:	2d 81       	ldd	r18, Y+5	; 0x05
    2134:	3e 81       	ldd	r19, Y+6	; 0x06
    2136:	29 36       	cpi	r18, 0x69	; 105
    2138:	31 05       	cpc	r19, r1
    213a:	09 f4       	brne	.+2      	; 0x213e <handle_internal_commands+0x98>
    213c:	0f c1       	rjmp	.+542    	; 0x235c <handle_internal_commands+0x2b6>
    213e:	45 c1       	rjmp	.+650    	; 0x23ca <handle_internal_commands+0x324>
    2140:	8d 81       	ldd	r24, Y+5	; 0x05
    2142:	9e 81       	ldd	r25, Y+6	; 0x06
    2144:	88 37       	cpi	r24, 0x78	; 120
    2146:	91 05       	cpc	r25, r1
    2148:	09 f4       	brne	.+2      	; 0x214c <handle_internal_commands+0xa6>
    214a:	ec c0       	rjmp	.+472    	; 0x2324 <handle_internal_commands+0x27e>
    214c:	2d 81       	ldd	r18, Y+5	; 0x05
    214e:	3e 81       	ldd	r19, Y+6	; 0x06
    2150:	2a 37       	cpi	r18, 0x7A	; 122
    2152:	31 05       	cpc	r19, r1
    2154:	09 f4       	brne	.+2      	; 0x2158 <handle_internal_commands+0xb2>
    2156:	2e c1       	rjmp	.+604    	; 0x23b4 <handle_internal_commands+0x30e>
    2158:	38 c1       	rjmp	.+624    	; 0x23ca <handle_internal_commands+0x324>
	case 'a':
		/* set partner primary+secondary address */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	9c 81       	ldd	r25, Y+4	; 0x04
    215e:	02 96       	adiw	r24, 0x02	; 2
    2160:	ae 01       	movw	r20, r28
    2162:	4e 5f       	subi	r20, 0xFE	; 254
    2164:	5f 4f       	sbci	r21, 0xFF	; 255
    2166:	9e 01       	movw	r18, r28
    2168:	2f 5f       	subi	r18, 0xFF	; 255
    216a:	3f 4f       	sbci	r19, 0xFF	; 255
    216c:	b9 01       	movw	r22, r18
    216e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <stringToTwoUchars>
		sprintf(cmd, "Set partner address, primary: %u , secondary: %u\n\r",
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	48 2f       	mov	r20, r24
    217c:	50 e0       	ldi	r21, 0x00	; 0
    217e:	8d b7       	in	r24, 0x3d	; 61
    2180:	9e b7       	in	r25, 0x3e	; 62
    2182:	08 97       	sbiw	r24, 0x08	; 8
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	9e bf       	out	0x3e, r25	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	8d bf       	out	0x3d, r24	; 61
    218e:	ed b7       	in	r30, 0x3d	; 61
    2190:	fe b7       	in	r31, 0x3e	; 62
    2192:	31 96       	adiw	r30, 0x01	; 1
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	9c 81       	ldd	r25, Y+4	; 0x04
    2198:	91 83       	std	Z+1, r25	; 0x01
    219a:	80 83       	st	Z, r24
    219c:	81 ef       	ldi	r24, 0xF1	; 241
    219e:	92 e0       	ldi	r25, 0x02	; 2
    21a0:	93 83       	std	Z+3, r25	; 0x03
    21a2:	82 83       	std	Z+2, r24	; 0x02
    21a4:	35 83       	std	Z+5, r19	; 0x05
    21a6:	24 83       	std	Z+4, r18	; 0x04
    21a8:	57 83       	std	Z+7, r21	; 0x07
    21aa:	46 83       	std	Z+6, r20	; 0x06
    21ac:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sprintf>
    21b0:	2d b7       	in	r18, 0x3d	; 61
    21b2:	3e b7       	in	r19, 0x3e	; 62
    21b4:	28 5f       	subi	r18, 0xF8	; 248
    21b6:	3f 4f       	sbci	r19, 0xFF	; 255
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	3e bf       	out	0x3e, r19	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	2d bf       	out	0x3d, r18	; 61
				val, val1);
		uart_puts(cmd);
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	9c 81       	ldd	r25, Y+4	; 0x04
    21c6:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
		gpib_set_partner_address(val, val1);
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	9a 81       	ldd	r25, Y+2	; 0x02
    21ce:	69 2f       	mov	r22, r25
    21d0:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <gpib_set_partner_address>
    21d4:	00 c1       	rjmp	.+512    	; 0x23d6 <handle_internal_commands+0x330>
		break;
	case 's':
		/* set partner secondary address */
		val = atoi((char*) (&(cmd[2])));
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	9c 81       	ldd	r25, Y+4	; 0x04
    21da:	02 96       	adiw	r24, 0x02	; 2
    21dc:	0e 94 8a 01 	call	0x314	; 0x314 <atoi>
    21e0:	89 83       	std	Y+1, r24	; 0x01
		sprintf(cmd, "Set partner secondary address to %u\n\r", val);
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <handle_internal_commands+0x144>
    21ea:	00 d0       	rcall	.+0      	; 0x21ec <handle_internal_commands+0x146>
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <handle_internal_commands+0x148>
    21ee:	ed b7       	in	r30, 0x3d	; 61
    21f0:	fe b7       	in	r31, 0x3e	; 62
    21f2:	31 96       	adiw	r30, 0x01	; 1
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	9c 81       	ldd	r25, Y+4	; 0x04
    21f8:	91 83       	std	Z+1, r25	; 0x01
    21fa:	80 83       	st	Z, r24
    21fc:	84 e2       	ldi	r24, 0x24	; 36
    21fe:	93 e0       	ldi	r25, 0x03	; 3
    2200:	93 83       	std	Z+3, r25	; 0x03
    2202:	82 83       	std	Z+2, r24	; 0x02
    2204:	35 83       	std	Z+5, r19	; 0x05
    2206:	24 83       	std	Z+4, r18	; 0x04
    2208:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sprintf>
    220c:	8d b7       	in	r24, 0x3d	; 61
    220e:	9e b7       	in	r25, 0x3e	; 62
    2210:	06 96       	adiw	r24, 0x06	; 6
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	9e bf       	out	0x3e, r25	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	8d bf       	out	0x3d, r24	; 61
		uart_puts(cmd);
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	9c 81       	ldd	r25, Y+4	; 0x04
    2220:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
		gpib_set_partner_secondary(val);
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <gpib_set_partner_secondary>
    222a:	d5 c0       	rjmp	.+426    	; 0x23d6 <handle_internal_commands+0x330>
		break;
	case '+':
		/* add device */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	9c 81       	ldd	r25, Y+4	; 0x04
    2230:	02 96       	adiw	r24, 0x02	; 2
    2232:	ae 01       	movw	r20, r28
    2234:	4e 5f       	subi	r20, 0xFE	; 254
    2236:	5f 4f       	sbci	r21, 0xFF	; 255
    2238:	9e 01       	movw	r18, r28
    223a:	2f 5f       	subi	r18, 0xFF	; 255
    223c:	3f 4f       	sbci	r19, 0xFF	; 255
    223e:	b9 01       	movw	r22, r18
    2240:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <stringToTwoUchars>
		sprintf(cmd, "Add device, primary: %u , secondary: %u\n\r", val, val1);
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	28 2f       	mov	r18, r24
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	8a 81       	ldd	r24, Y+2	; 0x02
    224c:	48 2f       	mov	r20, r24
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	8d b7       	in	r24, 0x3d	; 61
    2252:	9e b7       	in	r25, 0x3e	; 62
    2254:	08 97       	sbiw	r24, 0x08	; 8
    2256:	0f b6       	in	r0, 0x3f	; 63
    2258:	f8 94       	cli
    225a:	9e bf       	out	0x3e, r25	; 62
    225c:	0f be       	out	0x3f, r0	; 63
    225e:	8d bf       	out	0x3d, r24	; 61
    2260:	ed b7       	in	r30, 0x3d	; 61
    2262:	fe b7       	in	r31, 0x3e	; 62
    2264:	31 96       	adiw	r30, 0x01	; 1
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	9c 81       	ldd	r25, Y+4	; 0x04
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	80 83       	st	Z, r24
    226e:	8a e4       	ldi	r24, 0x4A	; 74
    2270:	93 e0       	ldi	r25, 0x03	; 3
    2272:	93 83       	std	Z+3, r25	; 0x03
    2274:	82 83       	std	Z+2, r24	; 0x02
    2276:	35 83       	std	Z+5, r19	; 0x05
    2278:	24 83       	std	Z+4, r18	; 0x04
    227a:	57 83       	std	Z+7, r21	; 0x07
    227c:	46 83       	std	Z+6, r20	; 0x06
    227e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sprintf>
    2282:	2d b7       	in	r18, 0x3d	; 61
    2284:	3e b7       	in	r19, 0x3e	; 62
    2286:	28 5f       	subi	r18, 0xF8	; 248
    2288:	3f 4f       	sbci	r19, 0xFF	; 255
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	3e bf       	out	0x3e, r19	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	2d bf       	out	0x3d, r18	; 61
		uart_puts(cmd);
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	9c 81       	ldd	r25, Y+4	; 0x04
    2298:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
		gpib_add_partner_address(val, val1);
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	9a 81       	ldd	r25, Y+2	; 0x02
    22a0:	69 2f       	mov	r22, r25
    22a2:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <gpib_add_partner_address>
    22a6:	97 c0       	rjmp	.+302    	; 0x23d6 <handle_internal_commands+0x330>
		break;
	case '-':
		/* add device */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	9c 81       	ldd	r25, Y+4	; 0x04
    22ac:	02 96       	adiw	r24, 0x02	; 2
    22ae:	ae 01       	movw	r20, r28
    22b0:	4e 5f       	subi	r20, 0xFE	; 254
    22b2:	5f 4f       	sbci	r21, 0xFF	; 255
    22b4:	9e 01       	movw	r18, r28
    22b6:	2f 5f       	subi	r18, 0xFF	; 255
    22b8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ba:	b9 01       	movw	r22, r18
    22bc:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <stringToTwoUchars>
		sprintf(cmd, "Remove device, primary: %u , secondary: %u\n\r", val,
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	48 2f       	mov	r20, r24
    22ca:	50 e0       	ldi	r21, 0x00	; 0
    22cc:	8d b7       	in	r24, 0x3d	; 61
    22ce:	9e b7       	in	r25, 0x3e	; 62
    22d0:	08 97       	sbiw	r24, 0x08	; 8
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	f8 94       	cli
    22d6:	9e bf       	out	0x3e, r25	; 62
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	8d bf       	out	0x3d, r24	; 61
    22dc:	ed b7       	in	r30, 0x3d	; 61
    22de:	fe b7       	in	r31, 0x3e	; 62
    22e0:	31 96       	adiw	r30, 0x01	; 1
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	9c 81       	ldd	r25, Y+4	; 0x04
    22e6:	91 83       	std	Z+1, r25	; 0x01
    22e8:	80 83       	st	Z, r24
    22ea:	84 e7       	ldi	r24, 0x74	; 116
    22ec:	93 e0       	ldi	r25, 0x03	; 3
    22ee:	93 83       	std	Z+3, r25	; 0x03
    22f0:	82 83       	std	Z+2, r24	; 0x02
    22f2:	35 83       	std	Z+5, r19	; 0x05
    22f4:	24 83       	std	Z+4, r18	; 0x04
    22f6:	57 83       	std	Z+7, r21	; 0x07
    22f8:	46 83       	std	Z+6, r20	; 0x06
    22fa:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sprintf>
    22fe:	2d b7       	in	r18, 0x3d	; 61
    2300:	3e b7       	in	r19, 0x3e	; 62
    2302:	28 5f       	subi	r18, 0xF8	; 248
    2304:	3f 4f       	sbci	r19, 0xFF	; 255
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	f8 94       	cli
    230a:	3e bf       	out	0x3e, r19	; 62
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	2d bf       	out	0x3d, r18	; 61
				val1);
		uart_puts(cmd);
    2310:	8b 81       	ldd	r24, Y+3	; 0x03
    2312:	9c 81       	ldd	r25, Y+4	; 0x04
    2314:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
		gpib_remove_partner_address(val, val1);
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	9a 81       	ldd	r25, Y+2	; 0x02
    231c:	69 2f       	mov	r22, r25
    231e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <gpib_remove_partner_address>
    2322:	59 c0       	rjmp	.+178    	; 0x23d6 <handle_internal_commands+0x330>
		break;
	case 'x':
		/* Xon/Xoff flow control */
		if (!xonXoffMode) {
    2324:	80 91 58 04 	lds	r24, 0x0458
    2328:	88 23       	and	r24, r24
    232a:	59 f4       	brne	.+22     	; 0x2342 <handle_internal_commands+0x29c>
			xonXoffMode = 1;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	80 93 58 04 	sts	0x0458, r24
			uart_set_flow_control(FLOWCONTROL_XONXOFF);
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol on\n\r");
    2338:	82 ee       	ldi	r24, 0xE2	; 226
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
    2340:	4a c0       	rjmp	.+148    	; 0x23d6 <handle_internal_commands+0x330>
		} else {
			xonXoffMode = 0;
    2342:	10 92 58 04 	sts	0x0458, r1
			uart_set_flow_control(FLOWCONTROL_NONE);
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol off\n\r");
    234c:	87 ec       	ldi	r24, 0xC7	; 199
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
    2354:	40 c0       	rjmp	.+128    	; 0x23d6 <handle_internal_commands+0x330>
		}
		break;
	case 'h':
		/* print some usage infos */
		printHelp();
    2356:	0e 94 cd 12 	call	0x259a	; 0x259a <printHelp>
    235a:	3d c0       	rjmp	.+122    	; 0x23d6 <handle_internal_commands+0x330>
		break;
	case 'i':
		gpib_info();
    235c:	0e 94 83 0a 	call	0x1506	; 0x1506 <gpib_info>
		sprintf(cmd, "Xon/Xoff flow control: %u\n\r", xonXoffMode);
    2360:	80 91 58 04 	lds	r24, 0x0458
    2364:	28 2f       	mov	r18, r24
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	00 d0       	rcall	.+0      	; 0x236a <handle_internal_commands+0x2c4>
    236a:	00 d0       	rcall	.+0      	; 0x236c <handle_internal_commands+0x2c6>
    236c:	00 d0       	rcall	.+0      	; 0x236e <handle_internal_commands+0x2c8>
    236e:	ed b7       	in	r30, 0x3d	; 61
    2370:	fe b7       	in	r31, 0x3e	; 62
    2372:	31 96       	adiw	r30, 0x01	; 1
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	91 83       	std	Z+1, r25	; 0x01
    237a:	80 83       	st	Z, r24
    237c:	81 ea       	ldi	r24, 0xA1	; 161
    237e:	93 e0       	ldi	r25, 0x03	; 3
    2380:	93 83       	std	Z+3, r25	; 0x03
    2382:	82 83       	std	Z+2, r24	; 0x02
    2384:	35 83       	std	Z+5, r19	; 0x05
    2386:	24 83       	std	Z+4, r18	; 0x04
    2388:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sprintf>
    238c:	8d b7       	in	r24, 0x3d	; 61
    238e:	9e b7       	in	r25, 0x3e	; 62
    2390:	06 96       	adiw	r24, 0x06	; 6
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	9e bf       	out	0x3e, r25	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	8d bf       	out	0x3d, r24	; 61
		uart_puts(cmd);
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	9c 81       	ldd	r25, Y+4	; 0x04
    23a0:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
    23a4:	18 c0       	rjmp	.+48     	; 0x23d6 <handle_internal_commands+0x330>
		break;
	case 'e':
		uart_puts_P("Check errors\n\r");
    23a6:	88 eb       	ldi	r24, 0xB8	; 184
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
		check_errors();
    23ae:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <check_errors>
    23b2:	11 c0       	rjmp	.+34     	; 0x23d6 <handle_internal_commands+0x330>
		break;
#ifdef ARB_TEST
	case 'z':
		uart_puts("arb\n\r");
    23b4:	8d eb       	ldi	r24, 0xBD	; 189
    23b6:	93 e0       	ldi	r25, 0x03	; 3
    23b8:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
		arb();
    23bc:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <arb>
		uart_puts("arb done\n\r");
    23c0:	83 ec       	ldi	r24, 0xC3	; 195
    23c2:	93 e0       	ldi	r25, 0x03	; 3
    23c4:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
    23c8:	06 c0       	rjmp	.+12     	; 0x23d6 <handle_internal_commands+0x330>
		break;
#endif
	default:
		uart_puts_P("unknown command\n\r");
    23ca:	86 ea       	ldi	r24, 0xA6	; 166
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
		printHelp();
    23d2:	0e 94 cd 12 	call	0x259a	; 0x259a <printHelp>
		break;
	}
}
    23d6:	26 96       	adiw	r28, 0x06	; 6
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <receiveAnswer>:

/**
 * Receives answer after command was sent.
 */
void receiveAnswer() {
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	00 d0       	rcall	.+0      	; 0x23ee <receiveAnswer+0x6>
    23ee:	00 d0       	rcall	.+0      	; 0x23f0 <receiveAnswer+0x8>
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
	uchar b, e;
	uchar colptr = 0;
    23f4:	19 82       	std	Y+1, r1	; 0x01

	gpib_prepare_read();
    23f6:	0e 94 64 05 	call	0xac8	; 0xac8 <gpib_prepare_read>
	// read the answer until EOI is detected (then e becomes true)
	do {
		// gpib bus receive
		e = gpib_receive(&b);
    23fa:	ce 01       	movw	r24, r28
    23fc:	03 96       	adiw	r24, 0x03	; 3
    23fe:	0e 94 be 05 	call	0xb7c	; 0xb7c <gpib_receive>
    2402:	8a 83       	std	Y+2, r24	; 0x02
		// write out character
		uart_putc(b);
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <uart_putc>
		if (linebreak && (colptr++ == linebreak)) {
    240a:	80 91 5a 04 	lds	r24, 0x045A
    240e:	88 23       	and	r24, r24
    2410:	99 f0       	breq	.+38     	; 0x2438 <receiveAnswer+0x50>
    2412:	90 91 5a 04 	lds	r25, 0x045A
    2416:	1c 82       	std	Y+4, r1	; 0x04
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	89 17       	cp	r24, r25
    241c:	11 f4       	brne	.+4      	; 0x2422 <receiveAnswer+0x3a>
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	8c 83       	std	Y+4, r24	; 0x04
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	8f 5f       	subi	r24, 0xFF	; 255
    2426:	89 83       	std	Y+1, r24	; 0x01
    2428:	8c 81       	ldd	r24, Y+4	; 0x04
    242a:	88 23       	and	r24, r24
    242c:	29 f0       	breq	.+10     	; 0x2438 <receiveAnswer+0x50>
			uart_puts_P("\n\r");
    242e:	8c ef       	ldi	r24, 0xFC	; 252
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
			colptr = 0;
    2436:	19 82       	std	Y+1, r1	; 0x01
		}
		//sprintf((char*)buf,"%02x - %c\n\r", b, b);
		//uart_puts((char*)buf);
	} while (!e);
    2438:	8a 81       	ldd	r24, Y+2	; 0x02
    243a:	88 23       	and	r24, r24
    243c:	f1 f2       	breq	.-68     	; 0x23fa <receiveAnswer+0x12>
}
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <srq_occured>:

/**
 * Check if a SRQ occured
 */
uchar srq_occured(int* old_time) {
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	00 d0       	rcall	.+0      	; 0x2452 <srq_occured+0x6>
    2452:	0f 92       	push	r0
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	9b 83       	std	Y+3, r25	; 0x03
    245a:	8a 83       	std	Y+2, r24	; 0x02
	uchar srq = 0;
    245c:	19 82       	std	Y+1, r1	; 0x01
	if (*old_time == 0) {
    245e:	ea 81       	ldd	r30, Y+2	; 0x02
    2460:	fb 81       	ldd	r31, Y+3	; 0x03
    2462:	80 81       	ld	r24, Z
    2464:	91 81       	ldd	r25, Z+1	; 0x01
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	49 f4       	brne	.+18     	; 0x247c <srq_occured+0x30>
		// old_time value initialization on first call with value s
		*old_time = s;
    246a:	80 91 cb 05 	lds	r24, 0x05CB
    246e:	88 2f       	mov	r24, r24
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	ea 81       	ldd	r30, Y+2	; 0x02
    2474:	fb 81       	ldd	r31, Y+3	; 0x03
    2476:	91 83       	std	Z+1, r25	; 0x01
    2478:	80 83       	st	Z, r24
    247a:	1e c0       	rjmp	.+60     	; 0x24b8 <srq_occured+0x6c>
	} else {
		if (s > *old_time) {
    247c:	80 91 cb 05 	lds	r24, 0x05CB
    2480:	28 2f       	mov	r18, r24
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	ea 81       	ldd	r30, Y+2	; 0x02
    2486:	fb 81       	ldd	r31, Y+3	; 0x03
    2488:	80 81       	ld	r24, Z
    248a:	91 81       	ldd	r25, Z+1	; 0x01
    248c:	82 17       	cp	r24, r18
    248e:	93 07       	cpc	r25, r19
    2490:	9c f4       	brge	.+38     	; 0x24b8 <srq_occured+0x6c>
			// some time has passed - check if srq was set
			srq = bit_is_clear(PIND, G_SRQ);
    2492:	e0 e3       	ldi	r30, 0x30	; 48
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	88 2f       	mov	r24, r24
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	80 74       	andi	r24, 0x40	; 64
    249e:	90 70       	andi	r25, 0x00	; 0
    24a0:	19 82       	std	Y+1, r1	; 0x01
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	11 f4       	brne	.+4      	; 0x24aa <srq_occured+0x5e>
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	89 83       	std	Y+1, r24	; 0x01
			if (srq)
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	88 23       	and	r24, r24
    24ae:	21 f0       	breq	.+8      	; 0x24b8 <srq_occured+0x6c>
				uart_puts_P("\n\rSRQ detected.\n\r");
    24b0:	8f ef       	ldi	r24, 0xFF	; 255
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
		}
	}
	return srq;
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	0f 90       	pop	r0
    24c0:	cf 91       	pop	r28
    24c2:	df 91       	pop	r29
    24c4:	08 95       	ret

000024c6 <handle_srq>:

/**
 * Handles SRQs by doing serial poll
 *
 */
uchar handle_srq(uchar *buf, int *buf_ptr) {
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	28 97       	sbiw	r28, 0x08	; 8
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	9d 83       	std	Y+5, r25	; 0x05
    24dc:	8c 83       	std	Y+4, r24	; 0x04
    24de:	7f 83       	std	Y+7, r23	; 0x07
    24e0:	6e 83       	std	Y+6, r22	; 0x06
	uchar command_ready = 0;
    24e2:	19 82       	std	Y+1, r1	; 0x01
	uint8_t primary, secondary;

	if (!gpib_serial_poll(&primary, &secondary)) {
    24e4:	ce 01       	movw	r24, r28
    24e6:	02 96       	adiw	r24, 0x02	; 2
    24e8:	9e 01       	movw	r18, r28
    24ea:	2d 5f       	subi	r18, 0xFD	; 253
    24ec:	3f 4f       	sbci	r19, 0xFF	; 255
    24ee:	b9 01       	movw	r22, r18
    24f0:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <gpib_serial_poll>
    24f4:	88 23       	and	r24, r24
    24f6:	69 f4       	brne	.+26     	; 0x2512 <handle_srq+0x4c>
		uart_puts_P(
    24f8:	8c e2       	ldi	r24, 0x2C	; 44
    24fa:	91 e0       	ldi	r25, 0x01	; 1
    24fc:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
				"\n\rSRQ emitter is not in list of known devices. SRQ Ignored.\n\r");
		uart_puts_P("\n\rSRQs are disabled now.\n\r");
    2500:	81 e1       	ldi	r24, 0x11	; 17
    2502:	91 e0       	ldi	r25, 0x01	; 1
    2504:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
		srq_enabled = 0;
    2508:	10 92 59 04 	sts	0x0459, r1
		return command_ready;
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	88 87       	std	Y+8, r24	; 0x08
    2510:	3a c0       	rjmp	.+116    	; 0x2586 <handle_srq+0xc0>
	}
	gpib_set_partner_address(primary, secondary);
    2512:	8a 81       	ldd	r24, Y+2	; 0x02
    2514:	9b 81       	ldd	r25, Y+3	; 0x03
    2516:	69 2f       	mov	r22, r25
    2518:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <gpib_set_partner_address>

	if (gpib_get_flavour() == FLAVOUR_TEK) {
    251c:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <gpib_get_flavour>
    2520:	81 30       	cpi	r24, 0x01	; 1
    2522:	79 f5       	brne	.+94     	; 0x2582 <handle_srq+0xbc>
		// Tek: check status for reason
		buf[0] = 'E';
    2524:	ec 81       	ldd	r30, Y+4	; 0x04
    2526:	fd 81       	ldd	r31, Y+5	; 0x05
    2528:	85 e4       	ldi	r24, 0x45	; 69
    252a:	80 83       	st	Z, r24
		buf[1] = 'V';
    252c:	8c 81       	ldd	r24, Y+4	; 0x04
    252e:	9d 81       	ldd	r25, Y+5	; 0x05
    2530:	fc 01       	movw	r30, r24
    2532:	31 96       	adiw	r30, 0x01	; 1
    2534:	86 e5       	ldi	r24, 0x56	; 86
    2536:	80 83       	st	Z, r24
		buf[2] = 'E';
    2538:	8c 81       	ldd	r24, Y+4	; 0x04
    253a:	9d 81       	ldd	r25, Y+5	; 0x05
    253c:	fc 01       	movw	r30, r24
    253e:	32 96       	adiw	r30, 0x02	; 2
    2540:	85 e4       	ldi	r24, 0x45	; 69
    2542:	80 83       	st	Z, r24
		buf[3] = 'N';
    2544:	8c 81       	ldd	r24, Y+4	; 0x04
    2546:	9d 81       	ldd	r25, Y+5	; 0x05
    2548:	fc 01       	movw	r30, r24
    254a:	33 96       	adiw	r30, 0x03	; 3
    254c:	8e e4       	ldi	r24, 0x4E	; 78
    254e:	80 83       	st	Z, r24
		buf[4] = 'T';
    2550:	8c 81       	ldd	r24, Y+4	; 0x04
    2552:	9d 81       	ldd	r25, Y+5	; 0x05
    2554:	fc 01       	movw	r30, r24
    2556:	34 96       	adiw	r30, 0x04	; 4
    2558:	84 e5       	ldi	r24, 0x54	; 84
    255a:	80 83       	st	Z, r24
		buf[5] = '?';
    255c:	8c 81       	ldd	r24, Y+4	; 0x04
    255e:	9d 81       	ldd	r25, Y+5	; 0x05
    2560:	fc 01       	movw	r30, r24
    2562:	35 96       	adiw	r30, 0x05	; 5
    2564:	8f e3       	ldi	r24, 0x3F	; 63
    2566:	80 83       	st	Z, r24
		buf[6] = '\0';
    2568:	8c 81       	ldd	r24, Y+4	; 0x04
    256a:	9d 81       	ldd	r25, Y+5	; 0x05
    256c:	fc 01       	movw	r30, r24
    256e:	36 96       	adiw	r30, 0x06	; 6
    2570:	10 82       	st	Z, r1
		*buf_ptr = 6;
    2572:	ee 81       	ldd	r30, Y+6	; 0x06
    2574:	ff 81       	ldd	r31, Y+7	; 0x07
    2576:	86 e0       	ldi	r24, 0x06	; 6
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	91 83       	std	Z+1, r25	; 0x01
    257c:	80 83       	st	Z, r24
		command_ready = 1;
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	89 83       	std	Y+1, r24	; 0x01
	}
	return command_ready;
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	88 87       	std	Y+8, r24	; 0x08
    2586:	88 85       	ldd	r24, Y+8	; 0x08
}
    2588:	28 96       	adiw	r28, 0x08	; 8
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	f8 94       	cli
    258e:	de bf       	out	0x3e, r29	; 62
    2590:	0f be       	out	0x3f, r0	; 63
    2592:	cd bf       	out	0x3d, r28	; 61
    2594:	cf 91       	pop	r28
    2596:	df 91       	pop	r29
    2598:	08 95       	ret

0000259a <printHelp>:

void printHelp() {
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
    25a2:	c0 55       	subi	r28, 0x50	; 80
    25a4:	d0 40       	sbci	r29, 0x00	; 0
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	cd bf       	out	0x3d, r28	; 61
	char buf[COMMAND_INPUT_BUFFER_SIZE];
	sprintf(buf, "\n\rGPIB Controller (Rev.%s) (c) spurtikus.de 2008-2015\n\r",
    25b0:	00 d0       	rcall	.+0      	; 0x25b2 <printHelp+0x18>
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <printHelp+0x1a>
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <printHelp+0x1c>
    25b6:	ed b7       	in	r30, 0x3d	; 61
    25b8:	fe b7       	in	r31, 0x3e	; 62
    25ba:	31 96       	adiw	r30, 0x01	; 1
    25bc:	ce 01       	movw	r24, r28
    25be:	01 96       	adiw	r24, 0x01	; 1
    25c0:	91 83       	std	Z+1, r25	; 0x01
    25c2:	80 83       	st	Z, r24
    25c4:	8e ec       	ldi	r24, 0xCE	; 206
    25c6:	93 e0       	ldi	r25, 0x03	; 3
    25c8:	93 83       	std	Z+3, r25	; 0x03
    25ca:	82 83       	std	Z+2, r24	; 0x02
    25cc:	86 e0       	ldi	r24, 0x06	; 6
    25ce:	94 e0       	ldi	r25, 0x04	; 4
    25d0:	95 83       	std	Z+5, r25	; 0x05
    25d2:	84 83       	std	Z+4, r24	; 0x04
    25d4:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sprintf>
    25d8:	8d b7       	in	r24, 0x3d	; 61
    25da:	9e b7       	in	r25, 0x3e	; 62
    25dc:	06 96       	adiw	r24, 0x06	; 6
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	f8 94       	cli
    25e2:	9e bf       	out	0x3e, r25	; 62
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	8d bf       	out	0x3d, r24	; 61
	REVISION);
	uart_puts(buf);
    25e8:	ce 01       	movw	r24, r28
    25ea:	01 96       	adiw	r24, 0x01	; 1
    25ec:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
	uart_puts_P("Internal commands:\n\r");
    25f0:	84 e8       	ldi	r24, 0x84	; 132
    25f2:	92 e0       	ldi	r25, 0x02	; 2
    25f4:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
	uart_puts(
    25f8:	8a e0       	ldi	r24, 0x0A	; 10
    25fa:	94 e0       	ldi	r25, 0x04	; 4
    25fc:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
			".a <primary> [<secondary>] - set prim./second. address of remote device\n\r");
	uart_puts_P(".s <secondary> - set secondary address of remote device\n\r");
    2600:	8a e4       	ldi	r24, 0x4A	; 74
    2602:	92 e0       	ldi	r25, 0x02	; 2
    2604:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
	uart_puts_P(
    2608:	8a e0       	ldi	r24, 0x0A	; 10
    260a:	92 e0       	ldi	r25, 0x02	; 2
    260c:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
			".+ <n> - add partner device address to list of known devices.\n\r");
	uart_puts_P(
    2610:	85 ec       	ldi	r24, 0xC5	; 197
    2612:	91 e0       	ldi	r25, 0x01	; 1
    2614:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
			".- <n> - remove partner device address from list of known devices.\n\r");
	uart_puts_P(".x - toggle Xon/Xoff flow control.\n\r");
    2618:	80 ea       	ldi	r24, 0xA0	; 160
    261a:	91 e0       	ldi	r25, 0x01	; 1
    261c:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
	uart_puts_P(".h - print help.\n\r");
    2620:	8d e8       	ldi	r24, 0x8D	; 141
    2622:	91 e0       	ldi	r25, 0x01	; 1
    2624:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
	uart_puts_P(".i - dump info about GPIB lines.\n\r");
    2628:	8a e6       	ldi	r24, 0x6A	; 106
    262a:	91 e0       	ldi	r25, 0x01	; 1
    262c:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
}
    2630:	c0 5b       	subi	r28, 0xB0	; 176
    2632:	df 4f       	sbci	r29, 0xFF	; 255
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	de bf       	out	0x3e, r29	; 62
    263a:	0f be       	out	0x3f, r0	; 63
    263c:	cd bf       	out	0x3d, r28	; 61
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <state_machine>:
 * 2. send user entered command, if available, to listeners (act as talker, set devices to listeners)
 * 3. if command was a query, read the answer from device (become listener and set device to talker)
 * 4. check if SRQ occured and handle that
 *
 */
void state_machine() {
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	c9 55       	subi	r28, 0x59	; 89
    264e:	d0 40       	sbci	r29, 0x00	; 0
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
	int old_time = 0;
    265a:	1e 82       	std	Y+6, r1	; 0x06
    265c:	1d 82       	std	Y+5, r1	; 0x05
	uchar is_query = 0;
    265e:	1c 82       	std	Y+4, r1	; 0x04
	uchar do_prompt = 1;
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	8b 83       	std	Y+3, r24	; 0x03
	uchar ch;

	/** buffers used for commands and output strings */
	uchar buf[COMMAND_INPUT_BUFFER_SIZE];
	/** pointer in buffer */
	int buf_ptr = 0;
    2664:	fe 01       	movw	r30, r28
    2666:	e8 5a       	subi	r30, 0xA8	; 168
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	11 82       	std	Z+1, r1	; 0x01
    266c:	10 82       	st	Z, r1

	uchar state = S_INITIAL;
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	8a 83       	std	Y+2, r24	; 0x02
	for (;;) {
		if (state == S_INITIAL) {
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	81 30       	cpi	r24, 0x01	; 1
    2676:	49 f4       	brne	.+18     	; 0x268a <state_machine+0x46>
			if (do_prompt) {
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	88 23       	and	r24, r24
    267c:	31 f0       	breq	.+12     	; 0x268a <state_machine+0x46>
				uart_puts("> ");
    267e:	84 e5       	ldi	r24, 0x54	; 84
    2680:	94 e0       	ldi	r25, 0x04	; 4
    2682:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <uart_puts>
				do_prompt = 0;
    2686:	1b 82       	std	Y+3, r1	; 0x03
				is_query = 0;
    2688:	1c 82       	std	Y+4, r1	; 0x04
			}
		}

		if (!input_char(&ch))
    268a:	ce 01       	movw	r24, r28
    268c:	07 96       	adiw	r24, 0x07	; 7
    268e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <input_char>
    2692:	88 23       	and	r24, r24
    2694:	71 f3       	breq	.-36     	; 0x2672 <state_machine+0x2e>
			continue;

		// byte received. Decide with state what to do.

		if (state == S_INITIAL) {
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	81 30       	cpi	r24, 0x01	; 1
    269a:	41 f4       	brne	.+16     	; 0x26ac <state_machine+0x68>
			// internal or external command?
			if (ch == '.') {
    269c:	8f 81       	ldd	r24, Y+7	; 0x07
    269e:	8e 32       	cpi	r24, 0x2E	; 46
    26a0:	19 f4       	brne	.+6      	; 0x26a8 <state_machine+0x64>
				// internal command
				state = S_FIRST_BYTE_INT;
    26a2:	82 e0       	ldi	r24, 0x02	; 2
    26a4:	8a 83       	std	Y+2, r24	; 0x02
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <state_machine+0x68>
			} else {
				// gpib command
				state = S_FIRST_BYTE_GPIB;
    26a8:	83 e0       	ldi	r24, 0x03	; 3
    26aa:	8a 83       	std	Y+2, r24	; 0x02

			}
		}

		if (state == S_FIRST_BYTE_INT) {
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	82 30       	cpi	r24, 0x02	; 2
    26b0:	59 f5       	brne	.+86     	; 0x2708 <state_machine+0xc4>
			buf[0] = ch;
    26b2:	8f 81       	ldd	r24, Y+7	; 0x07
    26b4:	88 87       	std	Y+8, r24	; 0x08
			buf_ptr = 1;
    26b6:	fe 01       	movw	r30, r28
    26b8:	e8 5a       	subi	r30, 0xA8	; 168
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	91 83       	std	Z+1, r25	; 0x01
    26c2:	80 83       	st	Z, r24
			// send received character back depending on global flag
			if (rs232_remote_echo) {
    26c4:	80 91 57 04 	lds	r24, 0x0457
    26c8:	88 23       	and	r24, r24
    26ca:	19 f0       	breq	.+6      	; 0x26d2 <state_machine+0x8e>
				uart_putc((unsigned char) ch);
    26cc:	8f 81       	ldd	r24, Y+7	; 0x07
    26ce:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <uart_putc>
			}
			// collect line until CR
			while (!input_process(buf, &buf_ptr))
    26d2:	ce 01       	movw	r24, r28
    26d4:	08 96       	adiw	r24, 0x08	; 8
    26d6:	9e 01       	movw	r18, r28
    26d8:	28 5a       	subi	r18, 0xA8	; 168
    26da:	3f 4f       	sbci	r19, 0xFF	; 255
    26dc:	b9 01       	movw	r22, r18
    26de:	0e 94 0b 10 	call	0x2016	; 0x2016 <input_process>
    26e2:	88 23       	and	r24, r24
    26e4:	b1 f3       	breq	.-20     	; 0x26d2 <state_machine+0x8e>
				;
			uart_puts_P("\n\r");
    26e6:	82 ed       	ldi	r24, 0xD2	; 210
    26e8:	92 e0       	ldi	r25, 0x02	; 2
    26ea:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
			// execute internal command
			handle_internal_commands(buf);
    26ee:	ce 01       	movw	r24, r28
    26f0:	08 96       	adiw	r24, 0x08	; 8
    26f2:	0e 94 53 10 	call	0x20a6	; 0x20a6 <handle_internal_commands>
			// reset local vars
			state = S_INITIAL;
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	8a 83       	std	Y+2, r24	; 0x02
			buf_ptr = 0;
    26fa:	fe 01       	movw	r30, r28
    26fc:	e8 5a       	subi	r30, 0xA8	; 168
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	11 82       	std	Z+1, r1	; 0x01
    2702:	10 82       	st	Z, r1
			do_prompt = 1;
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	8b 83       	std	Y+3, r24	; 0x03
		}

		if (state == S_FIRST_BYTE_GPIB) {
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	83 30       	cpi	r24, 0x03	; 3
    270c:	d1 f4       	brne	.+52     	; 0x2742 <state_machine+0xfe>
			// GPIB command. Check if a partner was defined.
			if (gpib_get_partner_pad() == ADDRESS_NOT_SET) {
    270e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <gpib_get_partner_pad>
    2712:	8f 3f       	cpi	r24, 0xFF	; 255
    2714:	79 f4       	brne	.+30     	; 0x2734 <state_machine+0xf0>
				uart_puts_P(
    2716:	8f e9       	ldi	r24, 0x9F	; 159
    2718:	92 e0       	ldi	r25, 0x02	; 2
    271a:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
						"Device address is not set. Can not send command.\n\r");
				// reset local vars
				state = S_INITIAL;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	8a 83       	std	Y+2, r24	; 0x02
				buf_ptr = 0;
    2722:	fe 01       	movw	r30, r28
    2724:	e8 5a       	subi	r30, 0xA8	; 168
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	11 82       	std	Z+1, r1	; 0x01
    272a:	10 82       	st	Z, r1
				do_prompt = 1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	8b 83       	std	Y+3, r24	; 0x03
				is_query = 0;
    2730:	1c 82       	std	Y+4, r1	; 0x04
    2732:	07 c0       	rjmp	.+14     	; 0x2742 <state_machine+0xfe>
			} else {
				// write prologue
				state = S_SEND_BYTES;
    2734:	84 e0       	ldi	r24, 0x04	; 4
    2736:	8a 83       	std	Y+2, r24	; 0x02
				gpib_prepare_write();
    2738:	0e 94 2d 05 	call	0xa5a	; 0xa5a <gpib_prepare_write>
				gpib_write_prologue(0);
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	0e 94 9b 07 	call	0xf36	; 0xf36 <gpib_write_prologue>
			}
		}

		if (state == S_SEND_BYTES) {
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	84 30       	cpi	r24, 0x04	; 4
    2746:	29 f5       	brne	.+74     	; 0x2792 <state_machine+0x14e>
			// send received character back depending on global flag
			if (rs232_remote_echo) {
    2748:	80 91 57 04 	lds	r24, 0x0457
    274c:	88 23       	and	r24, r24
    274e:	19 f0       	breq	.+6      	; 0x2756 <state_machine+0x112>
				uart_putc((unsigned char) ch);
    2750:	8f 81       	ldd	r24, Y+7	; 0x07
    2752:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <uart_putc>
			}
			uchar isLastByte = (ch == ASCII_CODE_CR);
    2756:	8f 81       	ldd	r24, Y+7	; 0x07
    2758:	19 82       	std	Y+1, r1	; 0x01
    275a:	8d 30       	cpi	r24, 0x0D	; 13
    275c:	11 f4       	brne	.+4      	; 0x2762 <state_machine+0x11e>
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	89 83       	std	Y+1, r24	; 0x01
			gpib_write_byte(ch, isLastByte);
    2762:	8f 81       	ldd	r24, Y+7	; 0x07
    2764:	69 81       	ldd	r22, Y+1	; 0x01
    2766:	0e 94 54 08 	call	0x10a8	; 0x10a8 <gpib_write_byte>

			if (ch == '?') {
    276a:	8f 81       	ldd	r24, Y+7	; 0x07
    276c:	8f 33       	cpi	r24, 0x3F	; 63
    276e:	11 f4       	brne	.+4      	; 0x2774 <state_machine+0x130>
				is_query = 1;
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	8c 83       	std	Y+4, r24	; 0x04
			}

			if (isLastByte) {
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	88 23       	and	r24, r24
    2778:	61 f0       	breq	.+24     	; 0x2792 <state_machine+0x14e>
				uart_puts_P("\n\r");
    277a:	8c e9       	ldi	r24, 0x9C	; 156
    277c:	92 e0       	ldi	r25, 0x02	; 2
    277e:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
				if (is_query) {
    2782:	8c 81       	ldd	r24, Y+4	; 0x04
    2784:	88 23       	and	r24, r24
    2786:	19 f0       	breq	.+6      	; 0x278e <state_machine+0x14a>
					//uart_puts("Query. Will check for answer.\n\r");
					state = S_GPIB_ANSWER;
    2788:	85 e0       	ldi	r24, 0x05	; 5
    278a:	8a 83       	std	Y+2, r24	; 0x02
    278c:	02 c0       	rjmp	.+4      	; 0x2792 <state_machine+0x14e>
				} else {
					//uart_puts("Command only.\n\r");
					state = S_GPIB_NO_ANSWER;
    278e:	86 e0       	ldi	r24, 0x06	; 6
    2790:	8a 83       	std	Y+2, r24	; 0x02
				}
			}
		}

		// write epilogue
		if (state == S_GPIB_ANSWER || state == S_GPIB_NO_ANSWER) {
    2792:	8a 81       	ldd	r24, Y+2	; 0x02
    2794:	85 30       	cpi	r24, 0x05	; 5
    2796:	19 f0       	breq	.+6      	; 0x279e <state_machine+0x15a>
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	86 30       	cpi	r24, 0x06	; 6
    279c:	41 f4       	brne	.+16     	; 0x27ae <state_machine+0x16a>
			gpib_write_epilogue(0);
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <gpib_write_epilogue>
			buf_ptr = 0;
    27a4:	fe 01       	movw	r30, r28
    27a6:	e8 5a       	subi	r30, 0xA8	; 168
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	11 82       	std	Z+1, r1	; 0x01
    27ac:	10 82       	st	Z, r1
		}

		// if we sent a query, read the answer
		if (state == S_GPIB_ANSWER) {
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	85 30       	cpi	r24, 0x05	; 5
    27b2:	21 f4       	brne	.+8      	; 0x27bc <state_machine+0x178>
			receiveAnswer();
    27b4:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <receiveAnswer>
			state = S_FINAL;
    27b8:	87 e0       	ldi	r24, 0x07	; 7
    27ba:	8a 83       	std	Y+2, r24	; 0x02
		}

		// finalize state machine
		if (state == S_GPIB_NO_ANSWER || state == S_FINAL) {
    27bc:	8a 81       	ldd	r24, Y+2	; 0x02
    27be:	86 30       	cpi	r24, 0x06	; 6
    27c0:	19 f0       	breq	.+6      	; 0x27c8 <state_machine+0x184>
    27c2:	8a 81       	ldd	r24, Y+2	; 0x02
    27c4:	87 30       	cpi	r24, 0x07	; 7
    27c6:	51 f4       	brne	.+20     	; 0x27dc <state_machine+0x198>
			// untalk/unlisten all partners
			gpib_untalkUnlisten();
    27c8:	0e 94 9b 05 	call	0xb36	; 0xb36 <gpib_untalkUnlisten>
			// some devices do not send cr,lf at command end, so create it always itself
			uart_puts_P("\n\r");
    27cc:	89 e9       	ldi	r24, 0x99	; 153
    27ce:	92 e0       	ldi	r25, 0x02	; 2
    27d0:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <uart_puts_p>
			do_prompt = 1;
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	8b 83       	std	Y+3, r24	; 0x03
			state = S_INITIAL;
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	8a 83       	std	Y+2, r24	; 0x02
		}

		// SRQ detection - do this every time when time value s has changed
		// s is incremented every second. So we check once a second.
		if (srq_enabled && srq_occured(&old_time)) {
    27dc:	80 91 59 04 	lds	r24, 0x0459
    27e0:	88 23       	and	r24, r24
    27e2:	09 f4       	brne	.+2      	; 0x27e6 <state_machine+0x1a2>
    27e4:	46 cf       	rjmp	.-372    	; 0x2672 <state_machine+0x2e>
    27e6:	ce 01       	movw	r24, r28
    27e8:	05 96       	adiw	r24, 0x05	; 5
    27ea:	0e 94 26 12 	call	0x244c	; 0x244c <srq_occured>
    27ee:	88 23       	and	r24, r24
    27f0:	09 f4       	brne	.+2      	; 0x27f4 <state_machine+0x1b0>
    27f2:	3f cf       	rjmp	.-386    	; 0x2672 <state_machine+0x2e>
			// TODO: make handle srq work again
			// the returned command_ready was interpreted to read in an answer
			// but this was turned of for new input loop
			// next two lines replace that but must be tested.
			if (handle_srq(buf, &buf_ptr)) {
    27f4:	ce 01       	movw	r24, r28
    27f6:	08 96       	adiw	r24, 0x08	; 8
    27f8:	9e 01       	movw	r18, r28
    27fa:	28 5a       	subi	r18, 0xA8	; 168
    27fc:	3f 4f       	sbci	r19, 0xFF	; 255
    27fe:	b9 01       	movw	r22, r18
    2800:	0e 94 63 12 	call	0x24c6	; 0x24c6 <handle_srq>
    2804:	88 23       	and	r24, r24
    2806:	09 f4       	brne	.+2      	; 0x280a <state_machine+0x1c6>
    2808:	34 cf       	rjmp	.-408    	; 0x2672 <state_machine+0x2e>
				state = S_GPIB_ANSWER;
    280a:	85 e0       	ldi	r24, 0x05	; 5
    280c:	8a 83       	std	Y+2, r24	; 0x02
    280e:	31 cf       	rjmp	.-414    	; 0x2672 <state_machine+0x2e>

00002810 <main>:
 * \brief Implementation of GPIB controller. Reads a command from RS232, sends it via bus.
 * If The command contains a '?', an answer from the device is expected and read in. The
 * answer then is printed out. If an SRQ occured, a serial poll is initiated.
 * 
 */
int main(void) {
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
	/*
	 *  Initialize UART library, pass baudrate and avr cpu clock 
	 *  with the macro UART_BAUD_SELECT()
	 */DI();
    2818:	8c e0       	ldi	r24, 0x0C	; 12
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	0e 94 49 15 	call	0x2a92	; 0x2a92 <uart_init>

	/*
	 * now enable interrupt, since UART and TIMER library is interrupt controlled
	 */sei();
    2820:	78 94       	sei

	/** print some usage infos */
	printHelp();
    2822:	0e 94 cd 12 	call	0x259a	; 0x259a <printHelp>

	// init timer for timeout detection
	timer16_init();
    2826:	0e 94 4a 14 	call	0x2894	; 0x2894 <timer16_init>

	// init gpib lines
	gpib_init();
    282a:	0e 94 d6 04 	call	0x9ac	; 0x9ac <gpib_init>
	// init controller part - assign bus 
	gpib_controller_assign(0x00);
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	0e 94 a5 06 	call	0xd4a	; 0xd4a <gpib_controller_assign>

	if (xonXoffMode) {
    2834:	80 91 58 04 	lds	r24, 0x0458
    2838:	88 23       	and	r24, r24
    283a:	19 f0       	breq	.+6      	; 0x2842 <main+0x32>
		uart_set_flow_control(FLOWCONTROL_XONXOFF);
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <uart_set_flow_control>
	}

	// state machine loops forever
	state_machine();
    2842:	0e 94 22 13 	call	0x2644	; 0x2644 <state_machine>
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	90 e0       	ldi	r25, 0x00	; 0
}
    284a:	cf 91       	pop	r28
    284c:	df 91       	pop	r29
    284e:	08 95       	ret

00002850 <__vector_7>:

/**
 * Interrupt Service Routine - do not call directly
 *  This routine is called when the Timer Value TCNT1 reaches the Output Compare Register Value OCR1A
 */ 
ISR(TIMER1_COMPA_vect) {
    2850:	1f 92       	push	r1
    2852:	0f 92       	push	r0
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	0f 92       	push	r0
    2858:	11 24       	eor	r1, r1
    285a:	8f 93       	push	r24
    285c:	df 93       	push	r29
    285e:	cf 93       	push	r28
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
#if XTAL_CPU % DEBOUNCE
	OCR1A = XTAL_CPU / DEBOUNCE - 1;
#endif
	if (--timer==0) {
    2864:	80 91 ca 05 	lds	r24, 0x05CA
    2868:	81 50       	subi	r24, 0x01	; 1
    286a:	80 93 ca 05 	sts	0x05CA, r24
    286e:	80 91 ca 05 	lds	r24, 0x05CA
    2872:	88 23       	and	r24, r24
    2874:	39 f4       	brne	.+14     	; 0x2884 <__vector_7+0x34>
		timer=(uint8_t) DEBOUNCE;
    2876:	10 92 ca 05 	sts	0x05CA, r1
		s++;
    287a:	80 91 cb 05 	lds	r24, 0x05CB
    287e:	8f 5f       	subi	r24, 0xFF	; 255
    2880:	80 93 cb 05 	sts	0x05CB, r24
#if XTAL_CPU % DEBOUNCE
		OCR1A = XTAL_CPU / DEBOUNCE + XTAL_CPU % DEBOUNCE - 1;
#endif
	}
}
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	8f 91       	pop	r24
    288a:	0f 90       	pop	r0
    288c:	0f be       	out	0x3f, r0	; 63
    288e:	0f 90       	pop	r0
    2890:	1f 90       	pop	r1
    2892:	18 95       	reti

00002894 <timer16_init>:
/**
 * Timer initialisation.
 *  \brief initializes all registers ands sets second value 's' to zero. Timer is immediately
 * started.
 */ 
void timer16_init( void ) {
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62

	// OCR1A=XTAL/DEBOUNCE-1 -> Bei Erreichen dieses Wertes (31249) wird die ISR besucht
	// die ISR wird also alle 1/256s aufgerufen. Wenn man dort also bis 256 hochzählt, ist genau
	// 1 Sekunde um! 256 ist der Wert der Variable timer und wird über das define DEBOUNCE festgelegt

	TCCR1B = (1<<CS10) ^ (1<<WGM12);	// Prescaler of 1 | CTC mode
    289c:	ee e4       	ldi	r30, 0x4E	; 78
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	89 e0       	ldi	r24, 0x09	; 9
    28a2:	80 83       	st	Z, r24
	OCR1A  = F_CPU/DEBOUNCE-1;		// Output compare register value 
    28a4:	ea e4       	ldi	r30, 0x4A	; 74
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	81 e1       	ldi	r24, 0x11	; 17
    28aa:	9a e7       	ldi	r25, 0x7A	; 122
    28ac:	91 83       	std	Z+1, r25	; 0x01
    28ae:	80 83       	st	Z, r24
	TCNT1 = 0; // Start value for timer register
    28b0:	ec e4       	ldi	r30, 0x4C	; 76
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	11 82       	std	Z+1, r1	; 0x01
    28b6:	10 82       	st	Z, r1
	s=0; // Initialize second value (s) to zero
    28b8:	10 92 cb 05 	sts	0x05CB, r1
	timer = (uint8_t)DEBOUNCE; 
    28bc:	10 92 ca 05 	sts	0x05CA, r1
	TIMSK |= (1<<OCIE1A);		// activate timer interrupts which starts timer run
    28c0:	a9 e5       	ldi	r26, 0x59	; 89
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	e9 e5       	ldi	r30, 0x59	; 89
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	80 61       	ori	r24, 0x10	; 16
    28cc:	8c 93       	st	X, r24
}
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	08 95       	ret

000028d4 <uart_set_flow_control>:
/** number of chars in rx buffer */
static volatile unsigned char chars_in_rx_buffer = 0;

void SendOutOfBand(unsigned char c);

void uart_set_flow_control(unsigned char _flowControl) {
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	0f 92       	push	r0
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	89 83       	std	Y+1, r24	; 0x01
	flowControl = _flowControl;
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
    28e2:	80 93 6d 04 	sts	0x046D, r24
}
    28e6:	0f 90       	pop	r0
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	08 95       	ret

000028ee <uart_get_flow_control>:

unsigned char uart_get_flow_control() {
    28ee:	df 93       	push	r29
    28f0:	cf 93       	push	r28
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
	return flowControl;
    28f6:	80 91 6d 04 	lds	r24, 0x046D
}
    28fa:	cf 91       	pop	r28
    28fc:	df 91       	pop	r29
    28fe:	08 95       	ret

00002900 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
 Function: UART Receive Complete interrupt
 Purpose:  called when the UART has received a character
 **************************************************************************/
{
    2900:	1f 92       	push	r1
    2902:	0f 92       	push	r0
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	0f 92       	push	r0
    2908:	11 24       	eor	r1, r1
    290a:	2f 93       	push	r18
    290c:	3f 93       	push	r19
    290e:	4f 93       	push	r20
    2910:	5f 93       	push	r21
    2912:	6f 93       	push	r22
    2914:	7f 93       	push	r23
    2916:	8f 93       	push	r24
    2918:	9f 93       	push	r25
    291a:	af 93       	push	r26
    291c:	bf 93       	push	r27
    291e:	ef 93       	push	r30
    2920:	ff 93       	push	r31
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	00 d0       	rcall	.+0      	; 0x2928 <__vector_13+0x28>
    2928:	00 d0       	rcall	.+0      	; 0x292a <__vector_13+0x2a>
    292a:	cd b7       	in	r28, 0x3d	; 61
    292c:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	unsigned char usr;
	unsigned char lastRxError;

	/* read UART status register and UART data register */
	usr = UART0_STATUS;
    292e:	eb e2       	ldi	r30, 0x2B	; 43
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	8a 83       	std	Y+2, r24	; 0x02
	data = UART0_DATA;
    2936:	ec e2       	ldi	r30, 0x2C	; 44
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	80 81       	ld	r24, Z
    293c:	8b 83       	std	Y+3, r24	; 0x03

	/* */
#if defined( AT90_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
    293e:	8a 81       	ldd	r24, Y+2	; 0x02
    2940:	88 71       	andi	r24, 0x18	; 24
    2942:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif

	/* calculate buffer index */
	tmphead = (UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    2944:	80 91 13 05 	lds	r24, 0x0513
    2948:	8f 5f       	subi	r24, 0xFF	; 255
    294a:	8f 77       	andi	r24, 0x7F	; 127
    294c:	8c 83       	std	Y+4, r24	; 0x04

	if (tmphead == UART_RxTail) {
    294e:	90 91 14 05 	lds	r25, 0x0514
    2952:	8c 81       	ldd	r24, Y+4	; 0x04
    2954:	89 17       	cp	r24, r25
    2956:	19 f4       	brne	.+6      	; 0x295e <__vector_13+0x5e>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    2958:	82 e0       	ldi	r24, 0x02	; 2
    295a:	89 83       	std	Y+1, r24	; 0x01
    295c:	10 c0       	rjmp	.+32     	; 0x297e <__vector_13+0x7e>
	} else {
		/* store new index */
		UART_RxHead = tmphead;
    295e:	8c 81       	ldd	r24, Y+4	; 0x04
    2960:	80 93 13 05 	sts	0x0513, r24
		/* store received data in buffer */
		UART_RxBuf[tmphead] = data;
    2964:	8c 81       	ldd	r24, Y+4	; 0x04
    2966:	88 2f       	mov	r24, r24
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	fc 01       	movw	r30, r24
    296c:	ef 56       	subi	r30, 0x6F	; 111
    296e:	fb 4f       	sbci	r31, 0xFB	; 251
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	80 83       	st	Z, r24
		chars_in_rx_buffer++;
    2974:	80 91 70 04 	lds	r24, 0x0470
    2978:	8f 5f       	subi	r24, 0xFF	; 255
    297a:	80 93 70 04 	sts	0x0470, r24
	}

	if (flowControl == FLOWCONTROL_XONXOFF
    297e:	80 91 6d 04 	lds	r24, 0x046D
    2982:	81 30       	cpi	r24, 0x01	; 1
    2984:	99 f4       	brne	.+38     	; 0x29ac <__vector_13+0xac>
    2986:	80 91 70 04 	lds	r24, 0x0470
    298a:	81 36       	cpi	r24, 0x61	; 97
    298c:	78 f0       	brcs	.+30     	; 0x29ac <__vector_13+0xac>
			&& chars_in_rx_buffer > UART_RX_BUFFER_MAX_MARK) {
		/* immediately send XOFF */
		oob_event = 1;
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	80 93 6e 04 	sts	0x046E, r24
		if (!after_xoff_sent) {
    2994:	80 91 6f 04 	lds	r24, 0x046F
    2998:	88 23       	and	r24, r24
    299a:	31 f4       	brne	.+12     	; 0x29a8 <__vector_13+0xa8>
			SendOutOfBand(XOFF);
    299c:	83 e1       	ldi	r24, 0x13	; 19
    299e:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <SendOutOfBand>
			after_xoff_sent = 1;
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	80 93 6f 04 	sts	0x046F, r24
		}
		oob_event = 0;
    29a8:	10 92 6e 04 	sts	0x046E, r1
	}

	UART_LastRxError = lastRxError;
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	80 93 15 05 	sts	0x0515, r24
}
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	0f 90       	pop	r0
    29ba:	cf 91       	pop	r28
    29bc:	df 91       	pop	r29
    29be:	ff 91       	pop	r31
    29c0:	ef 91       	pop	r30
    29c2:	bf 91       	pop	r27
    29c4:	af 91       	pop	r26
    29c6:	9f 91       	pop	r25
    29c8:	8f 91       	pop	r24
    29ca:	7f 91       	pop	r23
    29cc:	6f 91       	pop	r22
    29ce:	5f 91       	pop	r21
    29d0:	4f 91       	pop	r20
    29d2:	3f 91       	pop	r19
    29d4:	2f 91       	pop	r18
    29d6:	0f 90       	pop	r0
    29d8:	0f be       	out	0x3f, r0	; 63
    29da:	0f 90       	pop	r0
    29dc:	1f 90       	pop	r1
    29de:	18 95       	reti

000029e0 <SendOutOfBand>:

void SendOutOfBand(unsigned char c) {
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	0f 92       	push	r0
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << UDRE)))
    29ec:	eb e2       	ldi	r30, 0x2B	; 43
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	88 2f       	mov	r24, r24
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	80 72       	andi	r24, 0x20	; 32
    29f8:	90 70       	andi	r25, 0x00	; 0
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	b9 f3       	breq	.-18     	; 0x29ec <SendOutOfBand+0xc>
		;
	UDR = c;
    29fe:	ec e2       	ldi	r30, 0x2C	; 44
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	80 83       	st	Z, r24
}
    2a06:	0f 90       	pop	r0
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
 Function: UART Data Register Empty interrupt
 Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
    2a0e:	1f 92       	push	r1
    2a10:	0f 92       	push	r0
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	0f 92       	push	r0
    2a16:	11 24       	eor	r1, r1
    2a18:	8f 93       	push	r24
    2a1a:	9f 93       	push	r25
    2a1c:	af 93       	push	r26
    2a1e:	bf 93       	push	r27
    2a20:	ef 93       	push	r30
    2a22:	ff 93       	push	r31
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	0f 92       	push	r0
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;

	if (oob_event) {
    2a2e:	80 91 6e 04 	lds	r24, 0x046E
    2a32:	88 23       	and	r24, r24
    2a34:	01 f5       	brne	.+64     	; 0x2a76 <__vector_14+0x68>
		/* suppress transmitting during oob handling */
		return;
	}
	if (UART_TxHead != UART_TxTail) {
    2a36:	90 91 11 05 	lds	r25, 0x0511
    2a3a:	80 91 12 05 	lds	r24, 0x0512
    2a3e:	98 17       	cp	r25, r24
    2a40:	99 f0       	breq	.+38     	; 0x2a68 <__vector_14+0x5a>
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    2a42:	80 91 12 05 	lds	r24, 0x0512
    2a46:	8f 5f       	subi	r24, 0xFF	; 255
    2a48:	8f 71       	andi	r24, 0x1F	; 31
    2a4a:	89 83       	std	Y+1, r24	; 0x01
		UART_TxTail = tmptail;
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	80 93 12 05 	sts	0x0512, r24
		/* get one byte from buffer and write it to UART */
		UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
    2a52:	ac e2       	ldi	r26, 0x2C	; 44
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	88 2f       	mov	r24, r24
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	ef 58       	subi	r30, 0x8F	; 143
    2a60:	fb 4f       	sbci	r31, 0xFB	; 251
    2a62:	80 81       	ld	r24, Z
    2a64:	8c 93       	st	X, r24
    2a66:	07 c0       	rjmp	.+14     	; 0x2a76 <__vector_14+0x68>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
    2a68:	aa e2       	ldi	r26, 0x2A	; 42
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	ea e2       	ldi	r30, 0x2A	; 42
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	8f 7d       	andi	r24, 0xDF	; 223
    2a74:	8c 93       	st	X, r24
	}
}
    2a76:	0f 90       	pop	r0
    2a78:	cf 91       	pop	r28
    2a7a:	df 91       	pop	r29
    2a7c:	ff 91       	pop	r31
    2a7e:	ef 91       	pop	r30
    2a80:	bf 91       	pop	r27
    2a82:	af 91       	pop	r26
    2a84:	9f 91       	pop	r25
    2a86:	8f 91       	pop	r24
    2a88:	0f 90       	pop	r0
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	0f 90       	pop	r0
    2a8e:	1f 90       	pop	r1
    2a90:	18 95       	reti

00002a92 <uart_init>:
 Function: uart_init()
 Purpose:  initialize UART and set baudrate
 Input:    baudrate using macro UART_BAUD_SELECT()
 Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate) {
    2a92:	df 93       	push	r29
    2a94:	cf 93       	push	r28
    2a96:	00 d0       	rcall	.+0      	; 0x2a98 <uart_init+0x6>
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	9a 83       	std	Y+2, r25	; 0x02
    2a9e:	89 83       	std	Y+1, r24	; 0x01
	UART_TxHead = 0;
    2aa0:	10 92 11 05 	sts	0x0511, r1
	UART_TxTail = 0;
    2aa4:	10 92 12 05 	sts	0x0512, r1
	UART_RxHead = 0;
    2aa8:	10 92 13 05 	sts	0x0513, r1
	UART_RxTail = 0;
    2aac:	10 92 14 05 	sts	0x0514, r1
	/* enable UART receiver and transmmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if (baudrate & 0x8000) {
    2ab0:	89 81       	ldd	r24, Y+1	; 0x01
    2ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab4:	99 23       	and	r25, r25
    2ab6:	4c f4       	brge	.+18     	; 0x2aca <uart_init+0x38>
		UART0_STATUS = (1 << U2X);  //Enable 2x speed
    2ab8:	eb e2       	ldi	r30, 0x2B	; 43
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	82 e0       	ldi	r24, 0x02	; 2
    2abe:	80 83       	st	Z, r24
		baudrate &= ~0x8000;
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac4:	9f 77       	andi	r25, 0x7F	; 127
    2ac6:	9a 83       	std	Y+2, r25	; 0x02
    2ac8:	89 83       	std	Y+1, r24	; 0x01
	}
	UBRRH = (unsigned char) (baudrate >> 8);
    2aca:	e0 e4       	ldi	r30, 0x40	; 64
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad2:	89 2f       	mov	r24, r25
    2ad4:	99 27       	eor	r25, r25
    2ad6:	80 83       	st	Z, r24
	UBRRL = (unsigned char) baudrate;
    2ad8:	e9 e2       	ldi	r30, 0x29	; 41
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	80 83       	st	Z, r24

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | (1 << RXEN) | (1 << TXEN);
    2ae0:	ea e2       	ldi	r30, 0x2A	; 42
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	88 e9       	ldi	r24, 0x98	; 152
    2ae6:	80 83       	st	Z, r24

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
    2ae8:	e0 e4       	ldi	r30, 0x40	; 64
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	86 e8       	ldi	r24, 0x86	; 134
    2aee:	80 83       	st	Z, r24
	/* Enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
    2af4:	cf 91       	pop	r28
    2af6:	df 91       	pop	r29
    2af8:	08 95       	ret

00002afa <uart_getc>:
 Function: uart_getc()
 Purpose:  return byte from ringbuffer
 Returns:  lower byte:  received byte from ringbuffer
 higher byte: last receive error
 **************************************************************************/
unsigned int uart_getc(void) {
    2afa:	df 93       	push	r29
    2afc:	cf 93       	push	r28
    2afe:	00 d0       	rcall	.+0      	; 0x2b00 <uart_getc+0x6>
    2b00:	00 d0       	rcall	.+0      	; 0x2b02 <uart_getc+0x8>
    2b02:	cd b7       	in	r28, 0x3d	; 61
    2b04:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;
	unsigned char data;

	if (UART_RxHead == UART_RxTail) {
    2b06:	90 91 13 05 	lds	r25, 0x0513
    2b0a:	80 91 14 05 	lds	r24, 0x0514
    2b0e:	98 17       	cp	r25, r24
    2b10:	29 f4       	brne	.+10     	; 0x2b1c <uart_getc+0x22>
		return UART_NO_DATA; /* no data available */
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	91 e0       	ldi	r25, 0x01	; 1
    2b16:	9c 83       	std	Y+4, r25	; 0x04
    2b18:	8b 83       	std	Y+3, r24	; 0x03
    2b1a:	3c c0       	rjmp	.+120    	; 0x2b94 <uart_getc+0x9a>
	}

	/* calculate /store buffer index */
	tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    2b1c:	80 91 14 05 	lds	r24, 0x0514
    2b20:	8f 5f       	subi	r24, 0xFF	; 255
    2b22:	8f 77       	andi	r24, 0x7F	; 127
    2b24:	8a 83       	std	Y+2, r24	; 0x02
	UART_RxTail = tmptail;
    2b26:	8a 81       	ldd	r24, Y+2	; 0x02
    2b28:	80 93 14 05 	sts	0x0514, r24

	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];
    2b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2e:	88 2f       	mov	r24, r24
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	fc 01       	movw	r30, r24
    2b34:	ef 56       	subi	r30, 0x6F	; 111
    2b36:	fb 4f       	sbci	r31, 0xFB	; 251
    2b38:	80 81       	ld	r24, Z
    2b3a:	89 83       	std	Y+1, r24	; 0x01
	if (chars_in_rx_buffer > 0) {
    2b3c:	80 91 70 04 	lds	r24, 0x0470
    2b40:	88 23       	and	r24, r24
    2b42:	29 f0       	breq	.+10     	; 0x2b4e <uart_getc+0x54>
		chars_in_rx_buffer--;
    2b44:	80 91 70 04 	lds	r24, 0x0470
    2b48:	81 50       	subi	r24, 0x01	; 1
    2b4a:	80 93 70 04 	sts	0x0470, r24
	}
	if ((flowControl == FLOWCONTROL_XONXOFF) && after_xoff_sent) {
    2b4e:	80 91 6d 04 	lds	r24, 0x046D
    2b52:	81 30       	cpi	r24, 0x01	; 1
    2b54:	91 f4       	brne	.+36     	; 0x2b7a <uart_getc+0x80>
    2b56:	80 91 6f 04 	lds	r24, 0x046F
    2b5a:	88 23       	and	r24, r24
    2b5c:	71 f0       	breq	.+28     	; 0x2b7a <uart_getc+0x80>
		if (chars_in_rx_buffer <= UART_RX_BUFFER_MIN_MARK) {
    2b5e:	80 91 70 04 	lds	r24, 0x0470
    2b62:	81 31       	cpi	r24, 0x11	; 17
    2b64:	50 f4       	brcc	.+20     	; 0x2b7a <uart_getc+0x80>
			/* immediately send XON */
			oob_event = 1;
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	80 93 6e 04 	sts	0x046E, r24
			SendOutOfBand(XON);
    2b6c:	81 e1       	ldi	r24, 0x11	; 17
    2b6e:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <SendOutOfBand>
			after_xoff_sent = 0;
    2b72:	10 92 6f 04 	sts	0x046F, r1
			oob_event = 0;
    2b76:	10 92 6e 04 	sts	0x046E, r1
		}
	}

	return (UART_LastRxError << 8) + data;
    2b7a:	80 91 15 05 	lds	r24, 0x0515
    2b7e:	88 2f       	mov	r24, r24
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	38 2f       	mov	r19, r24
    2b84:	22 27       	eor	r18, r18
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	88 2f       	mov	r24, r24
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	82 0f       	add	r24, r18
    2b8e:	93 1f       	adc	r25, r19
    2b90:	9c 83       	std	Y+4, r25	; 0x04
    2b92:	8b 83       	std	Y+3, r24	; 0x03
    2b94:	8b 81       	ldd	r24, Y+3	; 0x03
    2b96:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    2b98:	0f 90       	pop	r0
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	0f 90       	pop	r0
    2ba0:	cf 91       	pop	r28
    2ba2:	df 91       	pop	r29
    2ba4:	08 95       	ret

00002ba6 <uart_putc>:
 Function: uart_putc()
 Purpose:  write byte to ringbuffer for transmitting via UART
 Input:    byte to be transmitted
 Returns:  none
 **************************************************************************/
void uart_putc(unsigned char data) {
    2ba6:	df 93       	push	r29
    2ba8:	cf 93       	push	r28
    2baa:	00 d0       	rcall	.+0      	; 0x2bac <uart_putc+0x6>
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char tmphead;

	tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    2bb2:	80 91 11 05 	lds	r24, 0x0511
    2bb6:	8f 5f       	subi	r24, 0xFF	; 255
    2bb8:	8f 71       	andi	r24, 0x1F	; 31
    2bba:	89 83       	std	Y+1, r24	; 0x01

	while (tmphead == UART_TxTail) {
    2bbc:	90 91 12 05 	lds	r25, 0x0512
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
    2bc2:	89 17       	cp	r24, r25
    2bc4:	d9 f3       	breq	.-10     	; 0x2bbc <uart_putc+0x16>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	88 2f       	mov	r24, r24
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	fc 01       	movw	r30, r24
    2bce:	ef 58       	subi	r30, 0x8F	; 143
    2bd0:	fb 4f       	sbci	r31, 0xFB	; 251
    2bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd4:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    2bd6:	89 81       	ldd	r24, Y+1	; 0x01
    2bd8:	80 93 11 05 	sts	0x0511, r24

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    2bdc:	aa e2       	ldi	r26, 0x2A	; 42
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	ea e2       	ldi	r30, 0x2A	; 42
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	80 81       	ld	r24, Z
    2be6:	80 62       	ori	r24, 0x20	; 32
    2be8:	8c 93       	st	X, r24

}/* uart_putc */
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	08 95       	ret

00002bf4 <uart_puts>:
 Function: uart_puts()
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	00 d0       	rcall	.+0      	; 0x2bfa <uart_puts+0x6>
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	9a 83       	std	Y+2, r25	; 0x02
    2c00:	89 83       	std	Y+1, r24	; 0x01
    2c02:	0b c0       	rjmp	.+22     	; 0x2c1a <uart_puts+0x26>
	while (*s)
		uart_putc(*s++);
    2c04:	e9 81       	ldd	r30, Y+1	; 0x01
    2c06:	fa 81       	ldd	r31, Y+2	; 0x02
    2c08:	20 81       	ld	r18, Z
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
    2c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0e:	01 96       	adiw	r24, 0x01	; 1
    2c10:	9a 83       	std	Y+2, r25	; 0x02
    2c12:	89 83       	std	Y+1, r24	; 0x01
    2c14:	82 2f       	mov	r24, r18
    2c16:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <uart_putc>
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
	while (*s)
    2c1a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c1c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c1e:	80 81       	ld	r24, Z
    2c20:	88 23       	and	r24, r24
    2c22:	81 f7       	brne	.-32     	; 0x2c04 <uart_puts+0x10>
		uart_putc(*s++);

}/* uart_puts */
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	08 95       	ret

00002c2e <uart_puts_p>:
 Function: uart_puts_p()
 Purpose:  transmit string from program memory to UART
 Input:    program memory string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
    2c2e:	df 93       	push	r29
    2c30:	cf 93       	push	r28
    2c32:	00 d0       	rcall	.+0      	; 0x2c34 <uart_puts_p+0x6>
    2c34:	00 d0       	rcall	.+0      	; 0x2c36 <uart_puts_p+0x8>
    2c36:	00 d0       	rcall	.+0      	; 0x2c38 <uart_puts_p+0xa>
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	9d 83       	std	Y+5, r25	; 0x05
    2c3e:	8c 83       	std	Y+4, r24	; 0x04
    2c40:	03 c0       	rjmp	.+6      	; 0x2c48 <uart_puts_p+0x1a>
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
		uart_putc(c);
    2c42:	8e 81       	ldd	r24, Y+6	; 0x06
    2c44:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <uart_putc>
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
    2c48:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c4c:	9b 83       	std	Y+3, r25	; 0x03
    2c4e:	8a 83       	std	Y+2, r24	; 0x02
    2c50:	8c 81       	ldd	r24, Y+4	; 0x04
    2c52:	9d 81       	ldd	r25, Y+5	; 0x05
    2c54:	01 96       	adiw	r24, 0x01	; 1
    2c56:	9d 83       	std	Y+5, r25	; 0x05
    2c58:	8c 83       	std	Y+4, r24	; 0x04
    2c5a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c5c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c5e:	84 91       	lpm	r24, Z+
    2c60:	89 83       	std	Y+1, r24	; 0x01
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	8e 83       	std	Y+6, r24	; 0x06
    2c66:	8e 81       	ldd	r24, Y+6	; 0x06
    2c68:	88 23       	and	r24, r24
    2c6a:	59 f7       	brne	.-42     	; 0x2c42 <uart_puts_p+0x14>
		uart_putc(c);

}/* uart_puts_p */
    2c6c:	26 96       	adiw	r28, 0x06	; 6
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	cd bf       	out	0x3d, r28	; 61
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	08 95       	ret

00002c7e <__divmodhi4>:
    2c7e:	97 fb       	bst	r25, 7
    2c80:	09 2e       	mov	r0, r25
    2c82:	07 26       	eor	r0, r23
    2c84:	0a d0       	rcall	.+20     	; 0x2c9a <__divmodhi4_neg1>
    2c86:	77 fd       	sbrc	r23, 7
    2c88:	04 d0       	rcall	.+8      	; 0x2c92 <__divmodhi4_neg2>
    2c8a:	0c d0       	rcall	.+24     	; 0x2ca4 <__udivmodhi4>
    2c8c:	06 d0       	rcall	.+12     	; 0x2c9a <__divmodhi4_neg1>
    2c8e:	00 20       	and	r0, r0
    2c90:	1a f4       	brpl	.+6      	; 0x2c98 <__divmodhi4_exit>

00002c92 <__divmodhi4_neg2>:
    2c92:	70 95       	com	r23
    2c94:	61 95       	neg	r22
    2c96:	7f 4f       	sbci	r23, 0xFF	; 255

00002c98 <__divmodhi4_exit>:
    2c98:	08 95       	ret

00002c9a <__divmodhi4_neg1>:
    2c9a:	f6 f7       	brtc	.-4      	; 0x2c98 <__divmodhi4_exit>
    2c9c:	90 95       	com	r25
    2c9e:	81 95       	neg	r24
    2ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ca2:	08 95       	ret

00002ca4 <__udivmodhi4>:
    2ca4:	aa 1b       	sub	r26, r26
    2ca6:	bb 1b       	sub	r27, r27
    2ca8:	51 e1       	ldi	r21, 0x11	; 17
    2caa:	07 c0       	rjmp	.+14     	; 0x2cba <__udivmodhi4_ep>

00002cac <__udivmodhi4_loop>:
    2cac:	aa 1f       	adc	r26, r26
    2cae:	bb 1f       	adc	r27, r27
    2cb0:	a6 17       	cp	r26, r22
    2cb2:	b7 07       	cpc	r27, r23
    2cb4:	10 f0       	brcs	.+4      	; 0x2cba <__udivmodhi4_ep>
    2cb6:	a6 1b       	sub	r26, r22
    2cb8:	b7 0b       	sbc	r27, r23

00002cba <__udivmodhi4_ep>:
    2cba:	88 1f       	adc	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	5a 95       	dec	r21
    2cc0:	a9 f7       	brne	.-22     	; 0x2cac <__udivmodhi4_loop>
    2cc2:	80 95       	com	r24
    2cc4:	90 95       	com	r25
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	cd 01       	movw	r24, r26
    2cca:	08 95       	ret

00002ccc <__prologue_saves__>:
    2ccc:	2f 92       	push	r2
    2cce:	3f 92       	push	r3
    2cd0:	4f 92       	push	r4
    2cd2:	5f 92       	push	r5
    2cd4:	6f 92       	push	r6
    2cd6:	7f 92       	push	r7
    2cd8:	8f 92       	push	r8
    2cda:	9f 92       	push	r9
    2cdc:	af 92       	push	r10
    2cde:	bf 92       	push	r11
    2ce0:	cf 92       	push	r12
    2ce2:	df 92       	push	r13
    2ce4:	ef 92       	push	r14
    2ce6:	ff 92       	push	r15
    2ce8:	0f 93       	push	r16
    2cea:	1f 93       	push	r17
    2cec:	cf 93       	push	r28
    2cee:	df 93       	push	r29
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	ca 1b       	sub	r28, r26
    2cf6:	db 0b       	sbc	r29, r27
    2cf8:	0f b6       	in	r0, 0x3f	; 63
    2cfa:	f8 94       	cli
    2cfc:	de bf       	out	0x3e, r29	; 62
    2cfe:	0f be       	out	0x3f, r0	; 63
    2d00:	cd bf       	out	0x3d, r28	; 61
    2d02:	09 94       	ijmp

00002d04 <__epilogue_restores__>:
    2d04:	2a 88       	ldd	r2, Y+18	; 0x12
    2d06:	39 88       	ldd	r3, Y+17	; 0x11
    2d08:	48 88       	ldd	r4, Y+16	; 0x10
    2d0a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d0c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d0e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d10:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d12:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d14:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d16:	b9 84       	ldd	r11, Y+9	; 0x09
    2d18:	c8 84       	ldd	r12, Y+8	; 0x08
    2d1a:	df 80       	ldd	r13, Y+7	; 0x07
    2d1c:	ee 80       	ldd	r14, Y+6	; 0x06
    2d1e:	fd 80       	ldd	r15, Y+5	; 0x05
    2d20:	0c 81       	ldd	r16, Y+4	; 0x04
    2d22:	1b 81       	ldd	r17, Y+3	; 0x03
    2d24:	aa 81       	ldd	r26, Y+2	; 0x02
    2d26:	b9 81       	ldd	r27, Y+1	; 0x01
    2d28:	ce 0f       	add	r28, r30
    2d2a:	d1 1d       	adc	r29, r1
    2d2c:	0f b6       	in	r0, 0x3f	; 63
    2d2e:	f8 94       	cli
    2d30:	de bf       	out	0x3e, r29	; 62
    2d32:	0f be       	out	0x3f, r0	; 63
    2d34:	cd bf       	out	0x3d, r28	; 61
    2d36:	ed 01       	movw	r28, r26
    2d38:	08 95       	ret

00002d3a <_exit>:
    2d3a:	f8 94       	cli

00002d3c <__stop_program>:
    2d3c:	ff cf       	rjmp	.-2      	; 0x2d3c <__stop_program>

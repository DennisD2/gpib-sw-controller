
gpib_004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002af2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000342  00800060  00002af2  00002b66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000172  008003a2  00002e34  00002ea8  2**0
                  ALLOC
  3 .stab         000057c0  00000000  00000000  00002ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002866  00000000  00000000  00008668  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__ctors_end>
       4:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
       8:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
       c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      10:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      14:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      18:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      1c:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__vector_7>
      20:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      24:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      28:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      2c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      30:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      34:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__vector_13>
      38:	0c 94 08 14 	jmp	0x2810	; 0x2810 <__vector_14>
      3c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      40:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      44:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      48:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      4c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
      50:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>

00000054 <__c.1856>:
      54:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
      64:	65 72 72 6f 72 3a 20 00                             error: .

0000006c <__c.1854>:
      6c:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
      7c:	6f 72 3a 20 00                                      or: .

00000081 <__c.1852>:
      81:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
      91:	3a 20 00                                            : .

00000094 <__c.1878>:
      94:	43 6f 6d 6d 61 6e 64 20 6f 76 65 72 66 6c 6f 77     Command overflow
      a4:	2e 00                                               ..

000000a6 <__c.1950>:
      a6:	75 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 0a     unknown command.
      b6:	0d 00                                               ..

000000b8 <__c.1947>:
      b8:	43 68 65 63 6b 20 65 72 72 6f 72 73 0a 0d 00        Check errors...

000000c7 <__c.1942>:
      c7:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      d7:	74 72 6f 6c 20 6f 66 66 0a 0d 00                    trol off...

000000e2 <__c.1940>:
      e2:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      f2:	74 72 6f 6c 20 6f 6e 0a 0d 00                       trol on...

000000fc <__c.2029>:
      fc:	0a 0d 00                                            ...

000000ff <__c.2046>:
      ff:	0a 0d 53 52 51 20 64 65 74 65 63 74 65 64 2e 0a     ..SRQ detected..
     10f:	0d 00                                               ..

00000111 <__c.2076>:
     111:	0a 0d 53 52 51 73 20 61 72 65 20 64 69 73 61 62     ..SRQs are disab
     121:	6c 65 64 20 6e 6f 77 2e 0a 0d 00                    led now....

0000012c <__c.2074>:
     12c:	0a 0d 53 52 51 20 65 6d 69 74 74 65 72 20 69 73     ..SRQ emitter is
     13c:	20 6e 6f 74 20 69 6e 20 6c 69 73 74 20 6f 66 20      not in list of 
     14c:	6b 6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 20 53     known devices. S
     15c:	52 51 20 49 67 6e 6f 72 65 64 2e 0a 0d 00           RQ Ignored....

0000016a <__c.2108>:
     16a:	2e 69 20 2d 20 64 75 6d 70 20 69 6e 66 6f 20 61     .i - dump info a
     17a:	62 6f 75 74 20 47 50 49 42 20 6c 69 6e 65 73 2e     bout GPIB lines.
     18a:	0a 0d 00                                            ...

0000018d <__c.2106>:
     18d:	2e 68 20 2d 20 70 72 69 6e 74 20 68 65 6c 70 2e     .h - print help.
     19d:	0a 0d 00                                            ...

000001a0 <__c.2104>:
     1a0:	2e 78 20 2d 20 74 6f 67 67 6c 65 20 58 6f 6e 2f     .x - toggle Xon/
     1b0:	58 6f 66 66 20 66 6c 6f 77 20 63 6f 6e 74 72 6f     Xoff flow contro
     1c0:	6c 2e 0a 0d 00                                      l....

000001c5 <__c.2102>:
     1c5:	2e 2d 20 3c 6e 3e 20 2d 20 72 65 6d 6f 76 65 20     .- <n> - remove 
     1d5:	70 61 72 74 6e 65 72 20 64 65 76 69 63 65 20 61     partner device a
     1e5:	64 64 72 65 73 73 20 66 72 6f 6d 20 6c 69 73 74     ddress from list
     1f5:	20 6f 66 20 6b 6e 6f 77 6e 20 64 65 76 69 63 65      of known device
     205:	73 2e 0a 0d 00                                      s....

0000020a <__c.2100>:
     20a:	2e 2b 20 3c 6e 3e 20 2d 20 61 64 64 20 70 61 72     .+ <n> - add par
     21a:	74 6e 65 72 20 64 65 76 69 63 65 20 61 64 64 72     tner device addr
     22a:	65 73 73 20 74 6f 20 6c 69 73 74 20 6f 66 20 6b     ess to list of k
     23a:	6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 0a 0d 00     nown devices....

0000024a <__c.2098>:
     24a:	2e 73 20 3c 73 65 63 6f 6e 64 61 72 79 3e 20 2d     .s <secondary> -
     25a:	20 73 65 74 20 73 65 63 6f 6e 64 61 72 79 20 61      set secondary a
     26a:	64 64 72 65 73 73 20 6f 66 20 72 65 6d 6f 74 65     ddress of remote
     27a:	20 64 65 76 69 63 65 0a 0d 00                        device...

00000284 <__c.2096>:
     284:	49 6e 74 65 72 6e 61 6c 20 63 6f 6d 6d 61 6e 64     Internal command
     294:	73 3a 0a 0d 00                                      s:...

00000299 <__c.2129>:
     299:	0a 0d 00                                            ...

0000029c <__c.2127>:
     29c:	0a 0d 00                                            ...

0000029f <__c.2124>:
     29f:	44 65 76 69 63 65 20 61 64 64 72 65 73 73 20 69     Device address i
     2af:	73 20 6e 6f 74 20 73 65 74 2e 20 43 61 6e 20 6e     s not set. Can n
     2bf:	6f 74 20 73 65 6e 64 20 63 6f 6d 6d 61 6e 64 2e     ot send command.
     2cf:	0a 0d 00                                            ...

000002d2 <__c.2122>:
     2d2:	0a 0d 00 00                                         ....

000002d6 <__ctors_end>:
     2d6:	11 24       	eor	r1, r1
     2d8:	1f be       	out	0x3f, r1	; 63
     2da:	cf e5       	ldi	r28, 0x5F	; 95
     2dc:	d8 e0       	ldi	r29, 0x08	; 8
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	cd bf       	out	0x3d, r28	; 61

000002e2 <__do_copy_data>:
     2e2:	13 e0       	ldi	r17, 0x03	; 3
     2e4:	a0 e6       	ldi	r26, 0x60	; 96
     2e6:	b0 e0       	ldi	r27, 0x00	; 0
     2e8:	e2 ef       	ldi	r30, 0xF2	; 242
     2ea:	fa e2       	ldi	r31, 0x2A	; 42
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <.do_copy_data_start>

000002ee <.do_copy_data_loop>:
     2ee:	05 90       	lpm	r0, Z+
     2f0:	0d 92       	st	X+, r0

000002f2 <.do_copy_data_start>:
     2f2:	a2 3a       	cpi	r26, 0xA2	; 162
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <.do_copy_data_loop>

000002f8 <__do_clear_bss>:
     2f8:	15 e0       	ldi	r17, 0x05	; 5
     2fa:	a2 ea       	ldi	r26, 0xA2	; 162
     2fc:	b3 e0       	ldi	r27, 0x03	; 3
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a4 31       	cpi	r26, 0x14	; 20
     304:	b1 07       	cpc	r27, r17
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 16 12 	call	0x242c	; 0x242c <main>
     30c:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <_exit>

00000310 <__bad_interrupt>:
     310:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000314 <atoi>:
     314:	fc 01       	movw	r30, r24
     316:	88 27       	eor	r24, r24
     318:	99 27       	eor	r25, r25
     31a:	e8 94       	clt
     31c:	21 91       	ld	r18, Z+
     31e:	20 32       	cpi	r18, 0x20	; 32
     320:	e9 f3       	breq	.-6      	; 0x31c <atoi+0x8>
     322:	29 30       	cpi	r18, 0x09	; 9
     324:	10 f0       	brcs	.+4      	; 0x32a <atoi+0x16>
     326:	2e 30       	cpi	r18, 0x0E	; 14
     328:	c8 f3       	brcs	.-14     	; 0x31c <atoi+0x8>
     32a:	2b 32       	cpi	r18, 0x2B	; 43
     32c:	41 f0       	breq	.+16     	; 0x33e <atoi+0x2a>
     32e:	2d 32       	cpi	r18, 0x2D	; 45
     330:	39 f4       	brne	.+14     	; 0x340 <atoi+0x2c>
     332:	68 94       	set
     334:	04 c0       	rjmp	.+8      	; 0x33e <atoi+0x2a>
     336:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulhi_const_10>
     33a:	82 0f       	add	r24, r18
     33c:	91 1d       	adc	r25, r1
     33e:	21 91       	ld	r18, Z+
     340:	20 53       	subi	r18, 0x30	; 48
     342:	2a 30       	cpi	r18, 0x0A	; 10
     344:	c0 f3       	brcs	.-16     	; 0x336 <atoi+0x22>
     346:	1e f4       	brtc	.+6      	; 0x34e <atoi+0x3a>
     348:	90 95       	com	r25
     34a:	81 95       	neg	r24
     34c:	9f 4f       	sbci	r25, 0xFF	; 255
     34e:	08 95       	ret

00000350 <strtok>:
     350:	42 ea       	ldi	r20, 0xA2	; 162
     352:	53 e0       	ldi	r21, 0x03	; 3
     354:	0e 94 c1 01 	call	0x382	; 0x382 <strtok_r>
     358:	08 95       	ret

0000035a <strchr>:
     35a:	fc 01       	movw	r30, r24
     35c:	81 91       	ld	r24, Z+
     35e:	86 17       	cp	r24, r22
     360:	21 f0       	breq	.+8      	; 0x36a <strchr+0x10>
     362:	88 23       	and	r24, r24
     364:	d9 f7       	brne	.-10     	; 0x35c <strchr+0x2>
     366:	99 27       	eor	r25, r25
     368:	08 95       	ret
     36a:	31 97       	sbiw	r30, 0x01	; 1
     36c:	cf 01       	movw	r24, r30
     36e:	08 95       	ret

00000370 <strlen>:
     370:	fc 01       	movw	r30, r24
     372:	01 90       	ld	r0, Z+
     374:	00 20       	and	r0, r0
     376:	e9 f7       	brne	.-6      	; 0x372 <strlen+0x2>
     378:	80 95       	com	r24
     37a:	90 95       	com	r25
     37c:	8e 0f       	add	r24, r30
     37e:	9f 1f       	adc	r25, r31
     380:	08 95       	ret

00000382 <strtok_r>:
     382:	00 97       	sbiw	r24, 0x00	; 0
     384:	31 f4       	brne	.+12     	; 0x392 <strtok_r+0x10>
     386:	da 01       	movw	r26, r20
     388:	8d 91       	ld	r24, X+
     38a:	9c 91       	ld	r25, X
     38c:	00 97       	sbiw	r24, 0x00	; 0
     38e:	09 f4       	brne	.+2      	; 0x392 <strtok_r+0x10>
     390:	0e c0       	rjmp	.+28     	; 0x3ae <strtok_r+0x2c>
     392:	dc 01       	movw	r26, r24
     394:	fb 01       	movw	r30, r22
     396:	3d 91       	ld	r19, X+
     398:	21 91       	ld	r18, Z+
     39a:	22 23       	and	r18, r18
     39c:	19 f0       	breq	.+6      	; 0x3a4 <strtok_r+0x22>
     39e:	32 17       	cp	r19, r18
     3a0:	c9 f3       	breq	.-14     	; 0x394 <strtok_r+0x12>
     3a2:	fa cf       	rjmp	.-12     	; 0x398 <strtok_r+0x16>
     3a4:	33 23       	and	r19, r19
     3a6:	31 f4       	brne	.+12     	; 0x3b4 <strtok_r+0x32>
     3a8:	da 01       	movw	r26, r20
     3aa:	1d 92       	st	X+, r1
     3ac:	1c 92       	st	X, r1
     3ae:	88 27       	eor	r24, r24
     3b0:	99 27       	eor	r25, r25
     3b2:	08 95       	ret
     3b4:	11 97       	sbiw	r26, 0x01	; 1
     3b6:	af 93       	push	r26
     3b8:	bf 93       	push	r27
     3ba:	fb 01       	movw	r30, r22
     3bc:	3d 91       	ld	r19, X+
     3be:	21 91       	ld	r18, Z+
     3c0:	32 17       	cp	r19, r18
     3c2:	71 f4       	brne	.+28     	; 0x3e0 <strtok_r+0x5e>
     3c4:	33 23       	and	r19, r19
     3c6:	21 f4       	brne	.+8      	; 0x3d0 <strtok_r+0x4e>
     3c8:	88 27       	eor	r24, r24
     3ca:	99 27       	eor	r25, r25
     3cc:	11 97       	sbiw	r26, 0x01	; 1
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <strtok_r+0x52>
     3d0:	1e 92       	st	-X, r1
     3d2:	11 96       	adiw	r26, 0x01	; 1
     3d4:	fa 01       	movw	r30, r20
     3d6:	a1 93       	st	Z+, r26
     3d8:	b0 83       	st	Z, r27
     3da:	9f 91       	pop	r25
     3dc:	8f 91       	pop	r24
     3de:	08 95       	ret
     3e0:	22 23       	and	r18, r18
     3e2:	69 f7       	brne	.-38     	; 0x3be <strtok_r+0x3c>
     3e4:	ea cf       	rjmp	.-44     	; 0x3ba <strtok_r+0x38>

000003e6 <__mulhi_const_10>:
     3e6:	7a e0       	ldi	r23, 0x0A	; 10
     3e8:	97 9f       	mul	r25, r23
     3ea:	90 2d       	mov	r25, r0
     3ec:	87 9f       	mul	r24, r23
     3ee:	80 2d       	mov	r24, r0
     3f0:	91 0d       	add	r25, r1
     3f2:	11 24       	eor	r1, r1
     3f4:	08 95       	ret

000003f6 <sprintf>:
     3f6:	ae e0       	ldi	r26, 0x0E	; 14
     3f8:	b0 e0       	ldi	r27, 0x00	; 0
     3fa:	e1 e0       	ldi	r30, 0x01	; 1
     3fc:	f2 e0       	ldi	r31, 0x02	; 2
     3fe:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__prologue_saves__+0x1c>
     402:	0d 89       	ldd	r16, Y+21	; 0x15
     404:	1e 89       	ldd	r17, Y+22	; 0x16
     406:	86 e0       	ldi	r24, 0x06	; 6
     408:	8c 83       	std	Y+4, r24	; 0x04
     40a:	1a 83       	std	Y+2, r17	; 0x02
     40c:	09 83       	std	Y+1, r16	; 0x01
     40e:	8f ef       	ldi	r24, 0xFF	; 255
     410:	9f e7       	ldi	r25, 0x7F	; 127
     412:	9e 83       	std	Y+6, r25	; 0x06
     414:	8d 83       	std	Y+5, r24	; 0x05
     416:	9e 01       	movw	r18, r28
     418:	27 5e       	subi	r18, 0xE7	; 231
     41a:	3f 4f       	sbci	r19, 0xFF	; 255
     41c:	ce 01       	movw	r24, r28
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	6f 89       	ldd	r22, Y+23	; 0x17
     422:	78 8d       	ldd	r23, Y+24	; 0x18
     424:	a9 01       	movw	r20, r18
     426:	0e 94 1f 02 	call	0x43e	; 0x43e <vfprintf>
     42a:	2f 81       	ldd	r18, Y+7	; 0x07
     42c:	38 85       	ldd	r19, Y+8	; 0x08
     42e:	02 0f       	add	r16, r18
     430:	13 1f       	adc	r17, r19
     432:	f8 01       	movw	r30, r16
     434:	10 82       	st	Z, r1
     436:	2e 96       	adiw	r28, 0x0e	; 14
     438:	e4 e0       	ldi	r30, 0x04	; 4
     43a:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__epilogue_restores__+0x1c>

0000043e <vfprintf>:
     43e:	ab e0       	ldi	r26, 0x0B	; 11
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 40 15 	jmp	0x2a80	; 0x2a80 <__prologue_saves__>
     44a:	3c 01       	movw	r6, r24
     44c:	2b 01       	movw	r4, r22
     44e:	5a 01       	movw	r10, r20
     450:	fc 01       	movw	r30, r24
     452:	17 82       	std	Z+7, r1	; 0x07
     454:	16 82       	std	Z+6, r1	; 0x06
     456:	83 81       	ldd	r24, Z+3	; 0x03
     458:	81 fd       	sbrc	r24, 1
     45a:	03 c0       	rjmp	.+6      	; 0x462 <vfprintf+0x24>
     45c:	6f ef       	ldi	r22, 0xFF	; 255
     45e:	7f ef       	ldi	r23, 0xFF	; 255
     460:	c6 c1       	rjmp	.+908    	; 0x7ee <vfprintf+0x3b0>
     462:	9a e0       	ldi	r25, 0x0A	; 10
     464:	89 2e       	mov	r8, r25
     466:	1e 01       	movw	r2, r28
     468:	08 94       	sec
     46a:	21 1c       	adc	r2, r1
     46c:	31 1c       	adc	r3, r1
     46e:	f3 01       	movw	r30, r6
     470:	23 81       	ldd	r18, Z+3	; 0x03
     472:	f2 01       	movw	r30, r4
     474:	23 fd       	sbrc	r18, 3
     476:	85 91       	lpm	r24, Z+
     478:	23 ff       	sbrs	r18, 3
     47a:	81 91       	ld	r24, Z+
     47c:	2f 01       	movw	r4, r30
     47e:	88 23       	and	r24, r24
     480:	09 f4       	brne	.+2      	; 0x484 <vfprintf+0x46>
     482:	b2 c1       	rjmp	.+868    	; 0x7e8 <vfprintf+0x3aa>
     484:	85 32       	cpi	r24, 0x25	; 37
     486:	39 f4       	brne	.+14     	; 0x496 <vfprintf+0x58>
     488:	23 fd       	sbrc	r18, 3
     48a:	85 91       	lpm	r24, Z+
     48c:	23 ff       	sbrs	r18, 3
     48e:	81 91       	ld	r24, Z+
     490:	2f 01       	movw	r4, r30
     492:	85 32       	cpi	r24, 0x25	; 37
     494:	29 f4       	brne	.+10     	; 0x4a0 <vfprintf+0x62>
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	b3 01       	movw	r22, r6
     49a:	0e 94 12 04 	call	0x824	; 0x824 <fputc>
     49e:	e7 cf       	rjmp	.-50     	; 0x46e <vfprintf+0x30>
     4a0:	98 2f       	mov	r25, r24
     4a2:	ff 24       	eor	r15, r15
     4a4:	ee 24       	eor	r14, r14
     4a6:	99 24       	eor	r9, r9
     4a8:	ff e1       	ldi	r31, 0x1F	; 31
     4aa:	ff 15       	cp	r31, r15
     4ac:	d0 f0       	brcs	.+52     	; 0x4e2 <vfprintf+0xa4>
     4ae:	9b 32       	cpi	r25, 0x2B	; 43
     4b0:	69 f0       	breq	.+26     	; 0x4cc <vfprintf+0x8e>
     4b2:	9c 32       	cpi	r25, 0x2C	; 44
     4b4:	28 f4       	brcc	.+10     	; 0x4c0 <vfprintf+0x82>
     4b6:	90 32       	cpi	r25, 0x20	; 32
     4b8:	59 f0       	breq	.+22     	; 0x4d0 <vfprintf+0x92>
     4ba:	93 32       	cpi	r25, 0x23	; 35
     4bc:	91 f4       	brne	.+36     	; 0x4e2 <vfprintf+0xa4>
     4be:	0e c0       	rjmp	.+28     	; 0x4dc <vfprintf+0x9e>
     4c0:	9d 32       	cpi	r25, 0x2D	; 45
     4c2:	49 f0       	breq	.+18     	; 0x4d6 <vfprintf+0x98>
     4c4:	90 33       	cpi	r25, 0x30	; 48
     4c6:	69 f4       	brne	.+26     	; 0x4e2 <vfprintf+0xa4>
     4c8:	41 e0       	ldi	r20, 0x01	; 1
     4ca:	24 c0       	rjmp	.+72     	; 0x514 <vfprintf+0xd6>
     4cc:	52 e0       	ldi	r21, 0x02	; 2
     4ce:	f5 2a       	or	r15, r21
     4d0:	84 e0       	ldi	r24, 0x04	; 4
     4d2:	f8 2a       	or	r15, r24
     4d4:	28 c0       	rjmp	.+80     	; 0x526 <vfprintf+0xe8>
     4d6:	98 e0       	ldi	r25, 0x08	; 8
     4d8:	f9 2a       	or	r15, r25
     4da:	25 c0       	rjmp	.+74     	; 0x526 <vfprintf+0xe8>
     4dc:	e0 e1       	ldi	r30, 0x10	; 16
     4de:	fe 2a       	or	r15, r30
     4e0:	22 c0       	rjmp	.+68     	; 0x526 <vfprintf+0xe8>
     4e2:	f7 fc       	sbrc	r15, 7
     4e4:	29 c0       	rjmp	.+82     	; 0x538 <vfprintf+0xfa>
     4e6:	89 2f       	mov	r24, r25
     4e8:	80 53       	subi	r24, 0x30	; 48
     4ea:	8a 30       	cpi	r24, 0x0A	; 10
     4ec:	70 f4       	brcc	.+28     	; 0x50a <vfprintf+0xcc>
     4ee:	f6 fe       	sbrs	r15, 6
     4f0:	05 c0       	rjmp	.+10     	; 0x4fc <vfprintf+0xbe>
     4f2:	98 9c       	mul	r9, r8
     4f4:	90 2c       	mov	r9, r0
     4f6:	11 24       	eor	r1, r1
     4f8:	98 0e       	add	r9, r24
     4fa:	15 c0       	rjmp	.+42     	; 0x526 <vfprintf+0xe8>
     4fc:	e8 9c       	mul	r14, r8
     4fe:	e0 2c       	mov	r14, r0
     500:	11 24       	eor	r1, r1
     502:	e8 0e       	add	r14, r24
     504:	f0 e2       	ldi	r31, 0x20	; 32
     506:	ff 2a       	or	r15, r31
     508:	0e c0       	rjmp	.+28     	; 0x526 <vfprintf+0xe8>
     50a:	9e 32       	cpi	r25, 0x2E	; 46
     50c:	29 f4       	brne	.+10     	; 0x518 <vfprintf+0xda>
     50e:	f6 fc       	sbrc	r15, 6
     510:	6b c1       	rjmp	.+726    	; 0x7e8 <vfprintf+0x3aa>
     512:	40 e4       	ldi	r20, 0x40	; 64
     514:	f4 2a       	or	r15, r20
     516:	07 c0       	rjmp	.+14     	; 0x526 <vfprintf+0xe8>
     518:	9c 36       	cpi	r25, 0x6C	; 108
     51a:	19 f4       	brne	.+6      	; 0x522 <vfprintf+0xe4>
     51c:	50 e8       	ldi	r21, 0x80	; 128
     51e:	f5 2a       	or	r15, r21
     520:	02 c0       	rjmp	.+4      	; 0x526 <vfprintf+0xe8>
     522:	98 36       	cpi	r25, 0x68	; 104
     524:	49 f4       	brne	.+18     	; 0x538 <vfprintf+0xfa>
     526:	f2 01       	movw	r30, r4
     528:	23 fd       	sbrc	r18, 3
     52a:	95 91       	lpm	r25, Z+
     52c:	23 ff       	sbrs	r18, 3
     52e:	91 91       	ld	r25, Z+
     530:	2f 01       	movw	r4, r30
     532:	99 23       	and	r25, r25
     534:	09 f0       	breq	.+2      	; 0x538 <vfprintf+0xfa>
     536:	b8 cf       	rjmp	.-144    	; 0x4a8 <vfprintf+0x6a>
     538:	89 2f       	mov	r24, r25
     53a:	85 54       	subi	r24, 0x45	; 69
     53c:	83 30       	cpi	r24, 0x03	; 3
     53e:	18 f0       	brcs	.+6      	; 0x546 <vfprintf+0x108>
     540:	80 52       	subi	r24, 0x20	; 32
     542:	83 30       	cpi	r24, 0x03	; 3
     544:	38 f4       	brcc	.+14     	; 0x554 <vfprintf+0x116>
     546:	44 e0       	ldi	r20, 0x04	; 4
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	a4 0e       	add	r10, r20
     54c:	b5 1e       	adc	r11, r21
     54e:	5f e3       	ldi	r21, 0x3F	; 63
     550:	59 83       	std	Y+1, r21	; 0x01
     552:	0f c0       	rjmp	.+30     	; 0x572 <vfprintf+0x134>
     554:	93 36       	cpi	r25, 0x63	; 99
     556:	31 f0       	breq	.+12     	; 0x564 <vfprintf+0x126>
     558:	93 37       	cpi	r25, 0x73	; 115
     55a:	79 f0       	breq	.+30     	; 0x57a <vfprintf+0x13c>
     55c:	93 35       	cpi	r25, 0x53	; 83
     55e:	09 f0       	breq	.+2      	; 0x562 <vfprintf+0x124>
     560:	56 c0       	rjmp	.+172    	; 0x60e <vfprintf+0x1d0>
     562:	20 c0       	rjmp	.+64     	; 0x5a4 <vfprintf+0x166>
     564:	f5 01       	movw	r30, r10
     566:	80 81       	ld	r24, Z
     568:	89 83       	std	Y+1, r24	; 0x01
     56a:	42 e0       	ldi	r20, 0x02	; 2
     56c:	50 e0       	ldi	r21, 0x00	; 0
     56e:	a4 0e       	add	r10, r20
     570:	b5 1e       	adc	r11, r21
     572:	61 01       	movw	r12, r2
     574:	01 e0       	ldi	r16, 0x01	; 1
     576:	10 e0       	ldi	r17, 0x00	; 0
     578:	12 c0       	rjmp	.+36     	; 0x59e <vfprintf+0x160>
     57a:	f5 01       	movw	r30, r10
     57c:	c0 80       	ld	r12, Z
     57e:	d1 80       	ldd	r13, Z+1	; 0x01
     580:	f6 fc       	sbrc	r15, 6
     582:	03 c0       	rjmp	.+6      	; 0x58a <vfprintf+0x14c>
     584:	6f ef       	ldi	r22, 0xFF	; 255
     586:	7f ef       	ldi	r23, 0xFF	; 255
     588:	02 c0       	rjmp	.+4      	; 0x58e <vfprintf+0x150>
     58a:	69 2d       	mov	r22, r9
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	42 e0       	ldi	r20, 0x02	; 2
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	a4 0e       	add	r10, r20
     594:	b5 1e       	adc	r11, r21
     596:	c6 01       	movw	r24, r12
     598:	0e 94 07 04 	call	0x80e	; 0x80e <strnlen>
     59c:	8c 01       	movw	r16, r24
     59e:	5f e7       	ldi	r21, 0x7F	; 127
     5a0:	f5 22       	and	r15, r21
     5a2:	14 c0       	rjmp	.+40     	; 0x5cc <vfprintf+0x18e>
     5a4:	f5 01       	movw	r30, r10
     5a6:	c0 80       	ld	r12, Z
     5a8:	d1 80       	ldd	r13, Z+1	; 0x01
     5aa:	f6 fc       	sbrc	r15, 6
     5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <vfprintf+0x176>
     5ae:	6f ef       	ldi	r22, 0xFF	; 255
     5b0:	7f ef       	ldi	r23, 0xFF	; 255
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <vfprintf+0x17a>
     5b4:	69 2d       	mov	r22, r9
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	42 e0       	ldi	r20, 0x02	; 2
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	a4 0e       	add	r10, r20
     5be:	b5 1e       	adc	r11, r21
     5c0:	c6 01       	movw	r24, r12
     5c2:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <strnlen_P>
     5c6:	8c 01       	movw	r16, r24
     5c8:	50 e8       	ldi	r21, 0x80	; 128
     5ca:	f5 2a       	or	r15, r21
     5cc:	f3 fe       	sbrs	r15, 3
     5ce:	07 c0       	rjmp	.+14     	; 0x5de <vfprintf+0x1a0>
     5d0:	1a c0       	rjmp	.+52     	; 0x606 <vfprintf+0x1c8>
     5d2:	80 e2       	ldi	r24, 0x20	; 32
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	b3 01       	movw	r22, r6
     5d8:	0e 94 12 04 	call	0x824	; 0x824 <fputc>
     5dc:	ea 94       	dec	r14
     5de:	8e 2d       	mov	r24, r14
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	08 17       	cp	r16, r24
     5e4:	19 07       	cpc	r17, r25
     5e6:	a8 f3       	brcs	.-22     	; 0x5d2 <vfprintf+0x194>
     5e8:	0e c0       	rjmp	.+28     	; 0x606 <vfprintf+0x1c8>
     5ea:	f6 01       	movw	r30, r12
     5ec:	f7 fc       	sbrc	r15, 7
     5ee:	85 91       	lpm	r24, Z+
     5f0:	f7 fe       	sbrs	r15, 7
     5f2:	81 91       	ld	r24, Z+
     5f4:	6f 01       	movw	r12, r30
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	b3 01       	movw	r22, r6
     5fa:	0e 94 12 04 	call	0x824	; 0x824 <fputc>
     5fe:	e1 10       	cpse	r14, r1
     600:	ea 94       	dec	r14
     602:	01 50       	subi	r16, 0x01	; 1
     604:	10 40       	sbci	r17, 0x00	; 0
     606:	01 15       	cp	r16, r1
     608:	11 05       	cpc	r17, r1
     60a:	79 f7       	brne	.-34     	; 0x5ea <vfprintf+0x1ac>
     60c:	ea c0       	rjmp	.+468    	; 0x7e2 <vfprintf+0x3a4>
     60e:	94 36       	cpi	r25, 0x64	; 100
     610:	11 f0       	breq	.+4      	; 0x616 <vfprintf+0x1d8>
     612:	99 36       	cpi	r25, 0x69	; 105
     614:	69 f5       	brne	.+90     	; 0x670 <vfprintf+0x232>
     616:	f7 fe       	sbrs	r15, 7
     618:	08 c0       	rjmp	.+16     	; 0x62a <vfprintf+0x1ec>
     61a:	f5 01       	movw	r30, r10
     61c:	20 81       	ld	r18, Z
     61e:	31 81       	ldd	r19, Z+1	; 0x01
     620:	42 81       	ldd	r20, Z+2	; 0x02
     622:	53 81       	ldd	r21, Z+3	; 0x03
     624:	84 e0       	ldi	r24, 0x04	; 4
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0a c0       	rjmp	.+20     	; 0x63e <vfprintf+0x200>
     62a:	f5 01       	movw	r30, r10
     62c:	80 81       	ld	r24, Z
     62e:	91 81       	ldd	r25, Z+1	; 0x01
     630:	9c 01       	movw	r18, r24
     632:	44 27       	eor	r20, r20
     634:	37 fd       	sbrc	r19, 7
     636:	40 95       	com	r20
     638:	54 2f       	mov	r21, r20
     63a:	82 e0       	ldi	r24, 0x02	; 2
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	a8 0e       	add	r10, r24
     640:	b9 1e       	adc	r11, r25
     642:	9f e6       	ldi	r25, 0x6F	; 111
     644:	f9 22       	and	r15, r25
     646:	57 ff       	sbrs	r21, 7
     648:	09 c0       	rjmp	.+18     	; 0x65c <vfprintf+0x21e>
     64a:	50 95       	com	r21
     64c:	40 95       	com	r20
     64e:	30 95       	com	r19
     650:	21 95       	neg	r18
     652:	3f 4f       	sbci	r19, 0xFF	; 255
     654:	4f 4f       	sbci	r20, 0xFF	; 255
     656:	5f 4f       	sbci	r21, 0xFF	; 255
     658:	e0 e8       	ldi	r30, 0x80	; 128
     65a:	fe 2a       	or	r15, r30
     65c:	ca 01       	movw	r24, r20
     65e:	b9 01       	movw	r22, r18
     660:	a1 01       	movw	r20, r2
     662:	2a e0       	ldi	r18, 0x0A	; 10
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	0e 94 3e 04 	call	0x87c	; 0x87c <__ultoa_invert>
     66a:	d8 2e       	mov	r13, r24
     66c:	d2 18       	sub	r13, r2
     66e:	40 c0       	rjmp	.+128    	; 0x6f0 <vfprintf+0x2b2>
     670:	95 37       	cpi	r25, 0x75	; 117
     672:	29 f4       	brne	.+10     	; 0x67e <vfprintf+0x240>
     674:	1f 2d       	mov	r17, r15
     676:	1f 7e       	andi	r17, 0xEF	; 239
     678:	2a e0       	ldi	r18, 0x0A	; 10
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	1d c0       	rjmp	.+58     	; 0x6b8 <vfprintf+0x27a>
     67e:	1f 2d       	mov	r17, r15
     680:	19 7f       	andi	r17, 0xF9	; 249
     682:	9f 36       	cpi	r25, 0x6F	; 111
     684:	61 f0       	breq	.+24     	; 0x69e <vfprintf+0x260>
     686:	90 37       	cpi	r25, 0x70	; 112
     688:	20 f4       	brcc	.+8      	; 0x692 <vfprintf+0x254>
     68a:	98 35       	cpi	r25, 0x58	; 88
     68c:	09 f0       	breq	.+2      	; 0x690 <vfprintf+0x252>
     68e:	ac c0       	rjmp	.+344    	; 0x7e8 <vfprintf+0x3aa>
     690:	0f c0       	rjmp	.+30     	; 0x6b0 <vfprintf+0x272>
     692:	90 37       	cpi	r25, 0x70	; 112
     694:	39 f0       	breq	.+14     	; 0x6a4 <vfprintf+0x266>
     696:	98 37       	cpi	r25, 0x78	; 120
     698:	09 f0       	breq	.+2      	; 0x69c <vfprintf+0x25e>
     69a:	a6 c0       	rjmp	.+332    	; 0x7e8 <vfprintf+0x3aa>
     69c:	04 c0       	rjmp	.+8      	; 0x6a6 <vfprintf+0x268>
     69e:	28 e0       	ldi	r18, 0x08	; 8
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	0a c0       	rjmp	.+20     	; 0x6b8 <vfprintf+0x27a>
     6a4:	10 61       	ori	r17, 0x10	; 16
     6a6:	14 fd       	sbrc	r17, 4
     6a8:	14 60       	ori	r17, 0x04	; 4
     6aa:	20 e1       	ldi	r18, 0x10	; 16
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <vfprintf+0x27a>
     6b0:	14 fd       	sbrc	r17, 4
     6b2:	16 60       	ori	r17, 0x06	; 6
     6b4:	20 e1       	ldi	r18, 0x10	; 16
     6b6:	32 e0       	ldi	r19, 0x02	; 2
     6b8:	17 ff       	sbrs	r17, 7
     6ba:	08 c0       	rjmp	.+16     	; 0x6cc <vfprintf+0x28e>
     6bc:	f5 01       	movw	r30, r10
     6be:	60 81       	ld	r22, Z
     6c0:	71 81       	ldd	r23, Z+1	; 0x01
     6c2:	82 81       	ldd	r24, Z+2	; 0x02
     6c4:	93 81       	ldd	r25, Z+3	; 0x03
     6c6:	44 e0       	ldi	r20, 0x04	; 4
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	08 c0       	rjmp	.+16     	; 0x6dc <vfprintf+0x29e>
     6cc:	f5 01       	movw	r30, r10
     6ce:	80 81       	ld	r24, Z
     6d0:	91 81       	ldd	r25, Z+1	; 0x01
     6d2:	bc 01       	movw	r22, r24
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	42 e0       	ldi	r20, 0x02	; 2
     6da:	50 e0       	ldi	r21, 0x00	; 0
     6dc:	a4 0e       	add	r10, r20
     6de:	b5 1e       	adc	r11, r21
     6e0:	a1 01       	movw	r20, r2
     6e2:	0e 94 3e 04 	call	0x87c	; 0x87c <__ultoa_invert>
     6e6:	d8 2e       	mov	r13, r24
     6e8:	d2 18       	sub	r13, r2
     6ea:	8f e7       	ldi	r24, 0x7F	; 127
     6ec:	f8 2e       	mov	r15, r24
     6ee:	f1 22       	and	r15, r17
     6f0:	f6 fe       	sbrs	r15, 6
     6f2:	0b c0       	rjmp	.+22     	; 0x70a <vfprintf+0x2cc>
     6f4:	5e ef       	ldi	r21, 0xFE	; 254
     6f6:	f5 22       	and	r15, r21
     6f8:	d9 14       	cp	r13, r9
     6fa:	38 f4       	brcc	.+14     	; 0x70a <vfprintf+0x2cc>
     6fc:	f4 fe       	sbrs	r15, 4
     6fe:	07 c0       	rjmp	.+14     	; 0x70e <vfprintf+0x2d0>
     700:	f2 fc       	sbrc	r15, 2
     702:	05 c0       	rjmp	.+10     	; 0x70e <vfprintf+0x2d0>
     704:	8f ee       	ldi	r24, 0xEF	; 239
     706:	f8 22       	and	r15, r24
     708:	02 c0       	rjmp	.+4      	; 0x70e <vfprintf+0x2d0>
     70a:	1d 2d       	mov	r17, r13
     70c:	01 c0       	rjmp	.+2      	; 0x710 <vfprintf+0x2d2>
     70e:	19 2d       	mov	r17, r9
     710:	f4 fe       	sbrs	r15, 4
     712:	0d c0       	rjmp	.+26     	; 0x72e <vfprintf+0x2f0>
     714:	fe 01       	movw	r30, r28
     716:	ed 0d       	add	r30, r13
     718:	f1 1d       	adc	r31, r1
     71a:	80 81       	ld	r24, Z
     71c:	80 33       	cpi	r24, 0x30	; 48
     71e:	19 f4       	brne	.+6      	; 0x726 <vfprintf+0x2e8>
     720:	99 ee       	ldi	r25, 0xE9	; 233
     722:	f9 22       	and	r15, r25
     724:	08 c0       	rjmp	.+16     	; 0x736 <vfprintf+0x2f8>
     726:	1f 5f       	subi	r17, 0xFF	; 255
     728:	f2 fe       	sbrs	r15, 2
     72a:	05 c0       	rjmp	.+10     	; 0x736 <vfprintf+0x2f8>
     72c:	03 c0       	rjmp	.+6      	; 0x734 <vfprintf+0x2f6>
     72e:	8f 2d       	mov	r24, r15
     730:	86 78       	andi	r24, 0x86	; 134
     732:	09 f0       	breq	.+2      	; 0x736 <vfprintf+0x2f8>
     734:	1f 5f       	subi	r17, 0xFF	; 255
     736:	0f 2d       	mov	r16, r15
     738:	f3 fc       	sbrc	r15, 3
     73a:	14 c0       	rjmp	.+40     	; 0x764 <vfprintf+0x326>
     73c:	f0 fe       	sbrs	r15, 0
     73e:	0f c0       	rjmp	.+30     	; 0x75e <vfprintf+0x320>
     740:	1e 15       	cp	r17, r14
     742:	10 f0       	brcs	.+4      	; 0x748 <vfprintf+0x30a>
     744:	9d 2c       	mov	r9, r13
     746:	0b c0       	rjmp	.+22     	; 0x75e <vfprintf+0x320>
     748:	9d 2c       	mov	r9, r13
     74a:	9e 0c       	add	r9, r14
     74c:	91 1a       	sub	r9, r17
     74e:	1e 2d       	mov	r17, r14
     750:	06 c0       	rjmp	.+12     	; 0x75e <vfprintf+0x320>
     752:	80 e2       	ldi	r24, 0x20	; 32
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	b3 01       	movw	r22, r6
     758:	0e 94 12 04 	call	0x824	; 0x824 <fputc>
     75c:	1f 5f       	subi	r17, 0xFF	; 255
     75e:	1e 15       	cp	r17, r14
     760:	c0 f3       	brcs	.-16     	; 0x752 <vfprintf+0x314>
     762:	04 c0       	rjmp	.+8      	; 0x76c <vfprintf+0x32e>
     764:	1e 15       	cp	r17, r14
     766:	10 f4       	brcc	.+4      	; 0x76c <vfprintf+0x32e>
     768:	e1 1a       	sub	r14, r17
     76a:	01 c0       	rjmp	.+2      	; 0x76e <vfprintf+0x330>
     76c:	ee 24       	eor	r14, r14
     76e:	04 ff       	sbrs	r16, 4
     770:	0f c0       	rjmp	.+30     	; 0x790 <vfprintf+0x352>
     772:	80 e3       	ldi	r24, 0x30	; 48
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	b3 01       	movw	r22, r6
     778:	0e 94 12 04 	call	0x824	; 0x824 <fputc>
     77c:	02 ff       	sbrs	r16, 2
     77e:	1d c0       	rjmp	.+58     	; 0x7ba <vfprintf+0x37c>
     780:	01 fd       	sbrc	r16, 1
     782:	03 c0       	rjmp	.+6      	; 0x78a <vfprintf+0x34c>
     784:	88 e7       	ldi	r24, 0x78	; 120
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	0e c0       	rjmp	.+28     	; 0x7a6 <vfprintf+0x368>
     78a:	88 e5       	ldi	r24, 0x58	; 88
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0b c0       	rjmp	.+22     	; 0x7a6 <vfprintf+0x368>
     790:	80 2f       	mov	r24, r16
     792:	86 78       	andi	r24, 0x86	; 134
     794:	91 f0       	breq	.+36     	; 0x7ba <vfprintf+0x37c>
     796:	01 ff       	sbrs	r16, 1
     798:	02 c0       	rjmp	.+4      	; 0x79e <vfprintf+0x360>
     79a:	8b e2       	ldi	r24, 0x2B	; 43
     79c:	01 c0       	rjmp	.+2      	; 0x7a0 <vfprintf+0x362>
     79e:	80 e2       	ldi	r24, 0x20	; 32
     7a0:	f7 fc       	sbrc	r15, 7
     7a2:	8d e2       	ldi	r24, 0x2D	; 45
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	b3 01       	movw	r22, r6
     7a8:	0e 94 12 04 	call	0x824	; 0x824 <fputc>
     7ac:	06 c0       	rjmp	.+12     	; 0x7ba <vfprintf+0x37c>
     7ae:	80 e3       	ldi	r24, 0x30	; 48
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	b3 01       	movw	r22, r6
     7b4:	0e 94 12 04 	call	0x824	; 0x824 <fputc>
     7b8:	9a 94       	dec	r9
     7ba:	d9 14       	cp	r13, r9
     7bc:	c0 f3       	brcs	.-16     	; 0x7ae <vfprintf+0x370>
     7be:	da 94       	dec	r13
     7c0:	f1 01       	movw	r30, r2
     7c2:	ed 0d       	add	r30, r13
     7c4:	f1 1d       	adc	r31, r1
     7c6:	80 81       	ld	r24, Z
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	b3 01       	movw	r22, r6
     7cc:	0e 94 12 04 	call	0x824	; 0x824 <fputc>
     7d0:	dd 20       	and	r13, r13
     7d2:	a9 f7       	brne	.-22     	; 0x7be <vfprintf+0x380>
     7d4:	06 c0       	rjmp	.+12     	; 0x7e2 <vfprintf+0x3a4>
     7d6:	80 e2       	ldi	r24, 0x20	; 32
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	b3 01       	movw	r22, r6
     7dc:	0e 94 12 04 	call	0x824	; 0x824 <fputc>
     7e0:	ea 94       	dec	r14
     7e2:	ee 20       	and	r14, r14
     7e4:	c1 f7       	brne	.-16     	; 0x7d6 <vfprintf+0x398>
     7e6:	43 ce       	rjmp	.-890    	; 0x46e <vfprintf+0x30>
     7e8:	f3 01       	movw	r30, r6
     7ea:	66 81       	ldd	r22, Z+6	; 0x06
     7ec:	77 81       	ldd	r23, Z+7	; 0x07
     7ee:	cb 01       	movw	r24, r22
     7f0:	2b 96       	adiw	r28, 0x0b	; 11
     7f2:	e2 e1       	ldi	r30, 0x12	; 18
     7f4:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <__epilogue_restores__>

000007f8 <strnlen_P>:
     7f8:	fc 01       	movw	r30, r24
     7fa:	05 90       	lpm	r0, Z+
     7fc:	61 50       	subi	r22, 0x01	; 1
     7fe:	70 40       	sbci	r23, 0x00	; 0
     800:	01 10       	cpse	r0, r1
     802:	d8 f7       	brcc	.-10     	; 0x7fa <strnlen_P+0x2>
     804:	80 95       	com	r24
     806:	90 95       	com	r25
     808:	8e 0f       	add	r24, r30
     80a:	9f 1f       	adc	r25, r31
     80c:	08 95       	ret

0000080e <strnlen>:
     80e:	fc 01       	movw	r30, r24
     810:	61 50       	subi	r22, 0x01	; 1
     812:	70 40       	sbci	r23, 0x00	; 0
     814:	01 90       	ld	r0, Z+
     816:	01 10       	cpse	r0, r1
     818:	d8 f7       	brcc	.-10     	; 0x810 <strnlen+0x2>
     81a:	80 95       	com	r24
     81c:	90 95       	com	r25
     81e:	8e 0f       	add	r24, r30
     820:	9f 1f       	adc	r25, r31
     822:	08 95       	ret

00000824 <fputc>:
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	8c 01       	movw	r16, r24
     82e:	eb 01       	movw	r28, r22
     830:	8b 81       	ldd	r24, Y+3	; 0x03
     832:	81 ff       	sbrs	r24, 1
     834:	1b c0       	rjmp	.+54     	; 0x86c <__stack+0xd>
     836:	82 ff       	sbrs	r24, 2
     838:	0d c0       	rjmp	.+26     	; 0x854 <fputc+0x30>
     83a:	2e 81       	ldd	r18, Y+6	; 0x06
     83c:	3f 81       	ldd	r19, Y+7	; 0x07
     83e:	8c 81       	ldd	r24, Y+4	; 0x04
     840:	9d 81       	ldd	r25, Y+5	; 0x05
     842:	28 17       	cp	r18, r24
     844:	39 07       	cpc	r19, r25
     846:	64 f4       	brge	.+24     	; 0x860 <__stack+0x1>
     848:	e8 81       	ld	r30, Y
     84a:	f9 81       	ldd	r31, Y+1	; 0x01
     84c:	01 93       	st	Z+, r16
     84e:	f9 83       	std	Y+1, r31	; 0x01
     850:	e8 83       	st	Y, r30
     852:	06 c0       	rjmp	.+12     	; 0x860 <__stack+0x1>
     854:	e8 85       	ldd	r30, Y+8	; 0x08
     856:	f9 85       	ldd	r31, Y+9	; 0x09
     858:	80 2f       	mov	r24, r16
     85a:	09 95       	icall
     85c:	89 2b       	or	r24, r25
     85e:	31 f4       	brne	.+12     	; 0x86c <__stack+0xd>
     860:	8e 81       	ldd	r24, Y+6	; 0x06
     862:	9f 81       	ldd	r25, Y+7	; 0x07
     864:	01 96       	adiw	r24, 0x01	; 1
     866:	9f 83       	std	Y+7, r25	; 0x07
     868:	8e 83       	std	Y+6, r24	; 0x06
     86a:	02 c0       	rjmp	.+4      	; 0x870 <__stack+0x11>
     86c:	0f ef       	ldi	r16, 0xFF	; 255
     86e:	1f ef       	ldi	r17, 0xFF	; 255
     870:	c8 01       	movw	r24, r16
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	08 95       	ret

0000087c <__ultoa_invert>:
     87c:	fa 01       	movw	r30, r20
     87e:	aa 27       	eor	r26, r26
     880:	28 30       	cpi	r18, 0x08	; 8
     882:	51 f1       	breq	.+84     	; 0x8d8 <__ultoa_invert+0x5c>
     884:	20 31       	cpi	r18, 0x10	; 16
     886:	81 f1       	breq	.+96     	; 0x8e8 <__ultoa_invert+0x6c>
     888:	e8 94       	clt
     88a:	6f 93       	push	r22
     88c:	6e 7f       	andi	r22, 0xFE	; 254
     88e:	6e 5f       	subi	r22, 0xFE	; 254
     890:	7f 4f       	sbci	r23, 0xFF	; 255
     892:	8f 4f       	sbci	r24, 0xFF	; 255
     894:	9f 4f       	sbci	r25, 0xFF	; 255
     896:	af 4f       	sbci	r26, 0xFF	; 255
     898:	b1 e0       	ldi	r27, 0x01	; 1
     89a:	3e d0       	rcall	.+124    	; 0x918 <__ultoa_invert+0x9c>
     89c:	b4 e0       	ldi	r27, 0x04	; 4
     89e:	3c d0       	rcall	.+120    	; 0x918 <__ultoa_invert+0x9c>
     8a0:	67 0f       	add	r22, r23
     8a2:	78 1f       	adc	r23, r24
     8a4:	89 1f       	adc	r24, r25
     8a6:	9a 1f       	adc	r25, r26
     8a8:	a1 1d       	adc	r26, r1
     8aa:	68 0f       	add	r22, r24
     8ac:	79 1f       	adc	r23, r25
     8ae:	8a 1f       	adc	r24, r26
     8b0:	91 1d       	adc	r25, r1
     8b2:	a1 1d       	adc	r26, r1
     8b4:	6a 0f       	add	r22, r26
     8b6:	71 1d       	adc	r23, r1
     8b8:	81 1d       	adc	r24, r1
     8ba:	91 1d       	adc	r25, r1
     8bc:	a1 1d       	adc	r26, r1
     8be:	20 d0       	rcall	.+64     	; 0x900 <__ultoa_invert+0x84>
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <__ultoa_invert+0x48>
     8c2:	68 94       	set
     8c4:	3f 91       	pop	r19
     8c6:	2a e0       	ldi	r18, 0x0A	; 10
     8c8:	26 9f       	mul	r18, r22
     8ca:	11 24       	eor	r1, r1
     8cc:	30 19       	sub	r19, r0
     8ce:	30 5d       	subi	r19, 0xD0	; 208
     8d0:	31 93       	st	Z+, r19
     8d2:	de f6       	brtc	.-74     	; 0x88a <__ultoa_invert+0xe>
     8d4:	cf 01       	movw	r24, r30
     8d6:	08 95       	ret
     8d8:	46 2f       	mov	r20, r22
     8da:	47 70       	andi	r20, 0x07	; 7
     8dc:	40 5d       	subi	r20, 0xD0	; 208
     8de:	41 93       	st	Z+, r20
     8e0:	b3 e0       	ldi	r27, 0x03	; 3
     8e2:	0f d0       	rcall	.+30     	; 0x902 <__ultoa_invert+0x86>
     8e4:	c9 f7       	brne	.-14     	; 0x8d8 <__ultoa_invert+0x5c>
     8e6:	f6 cf       	rjmp	.-20     	; 0x8d4 <__ultoa_invert+0x58>
     8e8:	46 2f       	mov	r20, r22
     8ea:	4f 70       	andi	r20, 0x0F	; 15
     8ec:	40 5d       	subi	r20, 0xD0	; 208
     8ee:	4a 33       	cpi	r20, 0x3A	; 58
     8f0:	18 f0       	brcs	.+6      	; 0x8f8 <__ultoa_invert+0x7c>
     8f2:	49 5d       	subi	r20, 0xD9	; 217
     8f4:	31 fd       	sbrc	r19, 1
     8f6:	40 52       	subi	r20, 0x20	; 32
     8f8:	41 93       	st	Z+, r20
     8fa:	02 d0       	rcall	.+4      	; 0x900 <__ultoa_invert+0x84>
     8fc:	a9 f7       	brne	.-22     	; 0x8e8 <__ultoa_invert+0x6c>
     8fe:	ea cf       	rjmp	.-44     	; 0x8d4 <__ultoa_invert+0x58>
     900:	b4 e0       	ldi	r27, 0x04	; 4
     902:	a6 95       	lsr	r26
     904:	97 95       	ror	r25
     906:	87 95       	ror	r24
     908:	77 95       	ror	r23
     90a:	67 95       	ror	r22
     90c:	ba 95       	dec	r27
     90e:	c9 f7       	brne	.-14     	; 0x902 <__ultoa_invert+0x86>
     910:	00 97       	sbiw	r24, 0x00	; 0
     912:	61 05       	cpc	r22, r1
     914:	71 05       	cpc	r23, r1
     916:	08 95       	ret
     918:	9b 01       	movw	r18, r22
     91a:	ac 01       	movw	r20, r24
     91c:	0a 2e       	mov	r0, r26
     91e:	06 94       	lsr	r0
     920:	57 95       	ror	r21
     922:	47 95       	ror	r20
     924:	37 95       	ror	r19
     926:	27 95       	ror	r18
     928:	ba 95       	dec	r27
     92a:	c9 f7       	brne	.-14     	; 0x91e <__ultoa_invert+0xa2>
     92c:	62 0f       	add	r22, r18
     92e:	73 1f       	adc	r23, r19
     930:	84 1f       	adc	r24, r20
     932:	95 1f       	adc	r25, r21
     934:	a0 1d       	adc	r26, r0
     936:	08 95       	ret

00000938 <delay_ms>:
uchar cmd_buf[100];

/**
 * Some basic delay function
 */
void delay_ms(unsigned short ms) {
     938:	df 93       	push	r29
     93a:	cf 93       	push	r28
     93c:	00 d0       	rcall	.+0      	; 0x93e <delay_ms+0x6>
     93e:	00 d0       	rcall	.+0      	; 0x940 <delay_ms+0x8>
     940:	00 d0       	rcall	.+0      	; 0x942 <delay_ms+0xa>
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
     946:	9e 83       	std	Y+6, r25	; 0x06
     948:	8d 83       	std	Y+5, r24	; 0x05
	unsigned short outer1, outer2;
	outer1 = 200 * 12;
     94a:	80 e6       	ldi	r24, 0x60	; 96
     94c:	99 e0       	ldi	r25, 0x09	; 9
     94e:	9c 83       	std	Y+4, r25	; 0x04
     950:	8b 83       	std	Y+3, r24	; 0x03
     952:	1c c0       	rjmp	.+56     	; 0x98c <delay_ms+0x54>

	while (outer1) {
		outer2 = 100;
     954:	84 e6       	ldi	r24, 0x64	; 100
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	9a 83       	std	Y+2, r25	; 0x02
     95a:	89 83       	std	Y+1, r24	; 0x01
     95c:	0e c0       	rjmp	.+28     	; 0x97a <delay_ms+0x42>
		while (outer2) {
			while (ms)
				ms--;
     95e:	8d 81       	ldd	r24, Y+5	; 0x05
     960:	9e 81       	ldd	r25, Y+6	; 0x06
     962:	01 97       	sbiw	r24, 0x01	; 1
     964:	9e 83       	std	Y+6, r25	; 0x06
     966:	8d 83       	std	Y+5, r24	; 0x05
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
			while (ms)
     968:	8d 81       	ldd	r24, Y+5	; 0x05
     96a:	9e 81       	ldd	r25, Y+6	; 0x06
     96c:	00 97       	sbiw	r24, 0x00	; 0
     96e:	b9 f7       	brne	.-18     	; 0x95e <delay_ms+0x26>
				ms--;
			outer2--;
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	9a 81       	ldd	r25, Y+2	; 0x02
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	9a 83       	std	Y+2, r25	; 0x02
     978:	89 83       	std	Y+1, r24	; 0x01
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
     97a:	89 81       	ldd	r24, Y+1	; 0x01
     97c:	9a 81       	ldd	r25, Y+2	; 0x02
     97e:	00 97       	sbiw	r24, 0x00	; 0
     980:	99 f7       	brne	.-26     	; 0x968 <delay_ms+0x30>
			while (ms)
				ms--;
			outer2--;
		}
		outer1--;
     982:	8b 81       	ldd	r24, Y+3	; 0x03
     984:	9c 81       	ldd	r25, Y+4	; 0x04
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	9c 83       	std	Y+4, r25	; 0x04
     98a:	8b 83       	std	Y+3, r24	; 0x03
 */
void delay_ms(unsigned short ms) {
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
     98c:	8b 81       	ldd	r24, Y+3	; 0x03
     98e:	9c 81       	ldd	r25, Y+4	; 0x04
     990:	00 97       	sbiw	r24, 0x00	; 0
     992:	01 f7       	brne	.-64     	; 0x954 <delay_ms+0x1c>
				ms--;
			outer2--;
		}
		outer1--;
	}
}
     994:	26 96       	adiw	r28, 0x06	; 6
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	cf 91       	pop	r28
     9a2:	df 91       	pop	r29
     9a4:	08 95       	ret

000009a6 <gpib_init>:
 * Init GPIB pins and variables.
 * \brief All signal lines not related to the controller part
 * 		are initialized with useful values.
 *		(The controller part initialization is done on gpib_controller_assert())
 */
void gpib_init(void) {
     9a6:	df 93       	push	r29
     9a8:	cf 93       	push	r28
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
	// data lines - complete port A as input
	DDRA = 0x00;
     9ae:	ea e3       	ldi	r30, 0x3A	; 58
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	10 82       	st	Z, r1

	// handshake lines - on port D , everything as input
	DDRD &= ~_BV(G_DAV); // DAV 
     9b4:	a1 e3       	ldi	r26, 0x31	; 49
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	e1 e3       	ldi	r30, 0x31	; 49
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	80 81       	ld	r24, Z
     9be:	8b 7f       	andi	r24, 0xFB	; 251
     9c0:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_EOI); // EOI 
     9c2:	a1 e3       	ldi	r26, 0x31	; 49
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e1 e3       	ldi	r30, 0x31	; 49
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
     9cc:	8f 7e       	andi	r24, 0xEF	; 239
     9ce:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_SRQ); // SRQ 
     9d0:	a1 e3       	ldi	r26, 0x31	; 49
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	e1 e3       	ldi	r30, 0x31	; 49
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	80 81       	ld	r24, Z
     9da:	8f 7b       	andi	r24, 0xBF	; 191
     9dc:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_ATN); // ATN  
     9de:	a1 e3       	ldi	r26, 0x31	; 49
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	e1 e3       	ldi	r30, 0x31	; 49
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	80 81       	ld	r24, Z
     9e8:	8f 77       	andi	r24, 0x7F	; 127
     9ea:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_REN); // REN  
     9ec:	a7 e3       	ldi	r26, 0x37	; 55
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e7 e3       	ldi	r30, 0x37	; 55
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8d 7f       	andi	r24, 0xFD	; 253
     9f8:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_IFC); // IFC  
     9fa:	a7 e3       	ldi	r26, 0x37	; 55
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e7 e3       	ldi	r30, 0x37	; 55
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8e 7f       	andi	r24, 0xFE	; 254
     a06:	8c 93       	st	X, r24

	// init handshake lines
	assign_bit(DDRD, PORTD, G_NRFD);
     a08:	a2 e3       	ldi	r26, 0x32	; 50
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	e2 e3       	ldi	r30, 0x32	; 50
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	87 7f       	andi	r24, 0xF7	; 247
     a14:	8c 93       	st	X, r24
     a16:	a1 e3       	ldi	r26, 0x31	; 49
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	e1 e3       	ldi	r30, 0x31	; 49
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
     a20:	88 60       	ori	r24, 0x08	; 8
     a22:	8c 93       	st	X, r24
     a24:	a2 e3       	ldi	r26, 0x32	; 50
     a26:	b0 e0       	ldi	r27, 0x00	; 0
     a28:	e2 e3       	ldi	r30, 0x32	; 50
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	80 81       	ld	r24, Z
     a2e:	87 7f       	andi	r24, 0xF7	; 247
     a30:	8c 93       	st	X, r24
	// not ready for data now
	release_bit(DDRD, PORTD, G_NDAC);
     a32:	a1 e3       	ldi	r26, 0x31	; 49
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	e1 e3       	ldi	r30, 0x31	; 49
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 81       	ld	r24, Z
     a3c:	8f 7d       	andi	r24, 0xDF	; 223
     a3e:	8c 93       	st	X, r24
     a40:	a2 e3       	ldi	r26, 0x32	; 50
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	e2 e3       	ldi	r30, 0x32	; 50
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 81       	ld	r24, Z
     a4a:	80 62       	ori	r24, 0x20	; 32
     a4c:	8c 93       	st	X, r24
	// initially: ok so far
}
     a4e:	cf 91       	pop	r28
     a50:	df 91       	pop	r29
     a52:	08 95       	ret

00000a54 <gpib_receive>:
 *  \returns		On any error, 0xff is returned. in this case, the value of parameter *_byte is undefined.
 * 		Otherwise the value of the EOI signal line during read is returned. If EOI was assigned, a 0x01 is
 * 		returned. If EOI was not assigned, a 0x00 is returned. Assignment of EOI means that the talker
 * 		is sending the last character for this transmission.
 */
uchar gpib_receive(uchar* _byte) {
     a54:	df 93       	push	r29
     a56:	cf 93       	push	r28
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
     a5c:	27 97       	sbiw	r28, 0x07	; 7
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	f8 94       	cli
     a62:	de bf       	out	0x3e, r29	; 62
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	cd bf       	out	0x3d, r28	; 61
     a68:	9e 83       	std	Y+6, r25	; 0x06
     a6a:	8d 83       	std	Y+5, r24	; 0x05
	int timeout;
	uchar byte, eoi;

	//uart_puts("\n\rgpib_receive()\n\r");

	if (controller.talks == 1) {
     a6c:	80 91 a7 03 	lds	r24, 0x03A7
     a70:	81 30       	cpi	r24, 0x01	; 1
     a72:	39 f4       	brne	.+14     	; 0xa82 <gpib_receive+0x2e>
		*_byte = 0xff;
     a74:	ed 81       	ldd	r30, Y+5	; 0x05
     a76:	fe 81       	ldd	r31, Y+6	; 0x06
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	80 83       	st	Z, r24
		return 0xff;
     a7c:	8f ef       	ldi	r24, 0xFF	; 255
     a7e:	8f 83       	std	Y+7, r24	; 0x07
     a80:	c6 c0       	rjmp	.+396    	; 0xc0e <gpib_receive+0x1ba>
	}

	// handshake: set nrfd, means i am ready to receive some data
	release_bit(DDRD, PORTD, G_NRFD);
     a82:	a1 e3       	ldi	r26, 0x31	; 49
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	e1 e3       	ldi	r30, 0x31	; 49
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	80 81       	ld	r24, Z
     a8c:	87 7f       	andi	r24, 0xF7	; 247
     a8e:	8c 93       	st	X, r24
     a90:	a2 e3       	ldi	r26, 0x32	; 50
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	e2 e3       	ldi	r30, 0x32	; 50
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	80 81       	ld	r24, Z
     a9a:	88 60       	ori	r24, 0x08	; 8
     a9c:	8c 93       	st	X, r24
	assign_bit(DDRD, PORTD, G_NDAC);
     a9e:	a2 e3       	ldi	r26, 0x32	; 50
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	e2 e3       	ldi	r30, 0x32	; 50
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	80 81       	ld	r24, Z
     aa8:	8f 7d       	andi	r24, 0xDF	; 223
     aaa:	8c 93       	st	X, r24
     aac:	a1 e3       	ldi	r26, 0x31	; 49
     aae:	b0 e0       	ldi	r27, 0x00	; 0
     ab0:	e1 e3       	ldi	r30, 0x31	; 49
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	80 81       	ld	r24, Z
     ab6:	80 62       	ori	r24, 0x20	; 32
     ab8:	8c 93       	st	X, r24
     aba:	a2 e3       	ldi	r26, 0x32	; 50
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	e2 e3       	ldi	r30, 0x32	; 50
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	80 81       	ld	r24, Z
     ac4:	8f 7d       	andi	r24, 0xDF	; 223
     ac6:	8c 93       	st	X, r24

	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     ac8:	80 91 13 05 	lds	r24, 0x0513
     acc:	88 2f       	mov	r24, r24
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	05 96       	adiw	r24, 0x05	; 5
     ad2:	9c 83       	std	Y+4, r25	; 0x04
     ad4:	8b 83       	std	Y+3, r24	; 0x03
     ad6:	10 c0       	rjmp	.+32     	; 0xaf8 <gpib_receive+0xa4>
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     ad8:	80 91 13 05 	lds	r24, 0x0513
     adc:	28 2f       	mov	r18, r24
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	8b 81       	ldd	r24, Y+3	; 0x03
     ae2:	9c 81       	ldd	r25, Y+4	; 0x04
     ae4:	28 17       	cp	r18, r24
     ae6:	39 07       	cpc	r19, r25
     ae8:	39 f4       	brne	.+14     	; 0xaf8 <gpib_receive+0xa4>
			uart_puts("\n\rError: DAV timeout (1)\n\r");
     aea:	80 e6       	ldi	r24, 0x60	; 96
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>
			return 0xff;
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	8f 83       	std	Y+7, r24	; 0x07
     af6:	8b c0       	rjmp	.+278    	; 0xc0e <gpib_receive+0x1ba>
	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
     af8:	e0 e3       	ldi	r30, 0x30	; 48
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 81       	ld	r24, Z
     afe:	88 2f       	mov	r24, r24
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	84 70       	andi	r24, 0x04	; 4
     b04:	90 70       	andi	r25, 0x00	; 0
     b06:	00 97       	sbiw	r24, 0x00	; 0
     b08:	49 f0       	breq	.+18     	; 0xb1c <gpib_receive+0xc8>
     b0a:	80 91 13 05 	lds	r24, 0x0513
     b0e:	28 2f       	mov	r18, r24
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	8b 81       	ldd	r24, Y+3	; 0x03
     b14:	9c 81       	ldd	r25, Y+4	; 0x04
     b16:	82 17       	cp	r24, r18
     b18:	93 07       	cpc	r25, r19
     b1a:	f4 f6       	brge	.-68     	; 0xad8 <gpib_receive+0x84>
#else
	loop_until_bit_is_clear(PIND,G_DAV);
#endif

	// handshake: clear NRFD, means i am busy now to read data
	assign_bit(DDRD, PORTD, G_NRFD);
     b1c:	a2 e3       	ldi	r26, 0x32	; 50
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	e2 e3       	ldi	r30, 0x32	; 50
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	87 7f       	andi	r24, 0xF7	; 247
     b28:	8c 93       	st	X, r24
     b2a:	a1 e3       	ldi	r26, 0x31	; 49
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	e1 e3       	ldi	r30, 0x31	; 49
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	88 60       	ori	r24, 0x08	; 8
     b36:	8c 93       	st	X, r24
     b38:	a2 e3       	ldi	r26, 0x32	; 50
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	e2 e3       	ldi	r30, 0x32	; 50
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	87 7f       	andi	r24, 0xF7	; 247
     b44:	8c 93       	st	X, r24
	// read data
	byte = PINA ^ 0xff;
     b46:	e9 e3       	ldi	r30, 0x39	; 57
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	80 81       	ld	r24, Z
     b4c:	80 95       	com	r24
     b4e:	8a 83       	std	Y+2, r24	; 0x02

	// handshake: set ndac, means i have completed/accepted the read
	release_bit(DDRD, PORTD, G_NDAC);
     b50:	a1 e3       	ldi	r26, 0x31	; 49
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	e1 e3       	ldi	r30, 0x31	; 49
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	8f 7d       	andi	r24, 0xDF	; 223
     b5c:	8c 93       	st	X, r24
     b5e:	a2 e3       	ldi	r26, 0x32	; 50
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e2 e3       	ldi	r30, 0x32	; 50
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	80 62       	ori	r24, 0x20	; 32
     b6a:	8c 93       	st	X, r24

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     b6c:	80 91 13 05 	lds	r24, 0x0513
     b70:	88 2f       	mov	r24, r24
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	05 96       	adiw	r24, 0x05	; 5
     b76:	9c 83       	std	Y+4, r25	; 0x04
     b78:	8b 83       	std	Y+3, r24	; 0x03
     b7a:	10 c0       	rjmp	.+32     	; 0xb9c <gpib_receive+0x148>
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     b7c:	80 91 13 05 	lds	r24, 0x0513
     b80:	28 2f       	mov	r18, r24
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	8b 81       	ldd	r24, Y+3	; 0x03
     b86:	9c 81       	ldd	r25, Y+4	; 0x04
     b88:	28 17       	cp	r18, r24
     b8a:	39 07       	cpc	r19, r25
     b8c:	39 f4       	brne	.+14     	; 0xb9c <gpib_receive+0x148>
			uart_puts("\n\rError: DAV timeout (2)\n\r");
     b8e:	8b e7       	ldi	r24, 0x7B	; 123
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>
			return 0xff;
     b96:	8f ef       	ldi	r24, 0xFF	; 255
     b98:	8f 83       	std	Y+7, r24	; 0x07
     b9a:	39 c0       	rjmp	.+114    	; 0xc0e <gpib_receive+0x1ba>
	release_bit(DDRD, PORTD, G_NDAC);

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
     b9c:	e0 e3       	ldi	r30, 0x30	; 48
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	88 2f       	mov	r24, r24
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	84 70       	andi	r24, 0x04	; 4
     ba8:	90 70       	andi	r25, 0x00	; 0
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	49 f4       	brne	.+18     	; 0xbc0 <gpib_receive+0x16c>
     bae:	80 91 13 05 	lds	r24, 0x0513
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	9c 81       	ldd	r25, Y+4	; 0x04
     bba:	82 17       	cp	r24, r18
     bbc:	93 07       	cpc	r25, r19
     bbe:	f4 f6       	brge	.-68     	; 0xb7c <gpib_receive+0x128>
	}
#else
	loop_until_bit_is_set(PIND,G_DAV);
#endif
	// handshake: clear ndac (this is a prerequisite for receive next byte)
	assign_bit(DDRD, PORTD, G_NDAC);
     bc0:	a2 e3       	ldi	r26, 0x32	; 50
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e2 e3       	ldi	r30, 0x32	; 50
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	8f 7d       	andi	r24, 0xDF	; 223
     bcc:	8c 93       	st	X, r24
     bce:	a1 e3       	ldi	r26, 0x31	; 49
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e1 e3       	ldi	r30, 0x31	; 49
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	80 62       	ori	r24, 0x20	; 32
     bda:	8c 93       	st	X, r24
     bdc:	a2 e3       	ldi	r26, 0x32	; 50
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e2 e3       	ldi	r30, 0x32	; 50
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8f 7d       	andi	r24, 0xDF	; 223
     be8:	8c 93       	st	X, r24

	// check if last byte of transmission
	eoi = bit_is_clear(PIND, G_EOI);
     bea:	e0 e3       	ldi	r30, 0x30	; 48
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	88 2f       	mov	r24, r24
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	80 71       	andi	r24, 0x10	; 16
     bf6:	90 70       	andi	r25, 0x00	; 0
     bf8:	19 82       	std	Y+1, r1	; 0x01
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	11 f4       	brne	.+4      	; 0xc02 <gpib_receive+0x1ae>
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	89 83       	std	Y+1, r24	; 0x01

	*_byte = byte;
     c02:	ed 81       	ldd	r30, Y+5	; 0x05
     c04:	fe 81       	ldd	r31, Y+6	; 0x06
     c06:	8a 81       	ldd	r24, Y+2	; 0x02
     c08:	80 83       	st	Z, r24

	return eoi;
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	8f 83       	std	Y+7, r24	; 0x07
     c0e:	8f 81       	ldd	r24, Y+7	; 0x07
}
     c10:	27 96       	adiw	r28, 0x07	; 7
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	cf 91       	pop	r28
     c1e:	df 91       	pop	r29
     c20:	08 95       	ret

00000c22 <gpib_controller_assign>:
 * You have to change the initialization of the partner array according to your environment.
 * The partners-array is used by gpib_serial_poll() for looping over all existing devices.
 * 
 * \param address the address to be used by the controller. Usually 0x00.
 */
void gpib_controller_assign(uchar address) {
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	0f 92       	push	r0
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	89 83       	std	Y+1, r24	; 0x01
	controller.myaddress = address;
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	80 93 a4 03 	sts	0x03A4, r24
	controller.talks = 0;
     c34:	10 92 a7 03 	sts	0x03A7, r1
	controller.partner.primary = ADDRESS_NOT_SET; // init default active partner
     c38:	8f ef       	ldi	r24, 0xFF	; 255
     c3a:	80 93 a5 03 	sts	0x03A5, r24
	controller.partner.secondary = ADDRESS_NOT_SET;
     c3e:	8f ef       	ldi	r24, 0xFF	; 255
     c40:	80 93 a6 03 	sts	0x03A6, r24
	controller.flavour = FLAVOUR_NONE;
     c44:	10 92 a8 03 	sts	0x03A8, r1
	/** clear list of partners */
	gpib_clear_partners();
     c48:	0e 94 b2 0c 	call	0x1964	; 0x1964 <gpib_clear_partners>
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     c4c:	a8 e3       	ldi	r26, 0x38	; 56
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	e8 e3       	ldi	r30, 0x38	; 56
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	8e 7f       	andi	r24, 0xFE	; 254
     c58:	8c 93       	st	X, r24
     c5a:	a7 e3       	ldi	r26, 0x37	; 55
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e7 e3       	ldi	r30, 0x37	; 55
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	81 60       	ori	r24, 0x01	; 1
     c66:	8c 93       	st	X, r24
     c68:	a8 e3       	ldi	r26, 0x38	; 56
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e8 e3       	ldi	r30, 0x38	; 56
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	8e 7f       	andi	r24, 0xFE	; 254
     c74:	8c 93       	st	X, r24
	delay_ms(200);
     c76:	88 ec       	ldi	r24, 0xC8	; 200
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 9c 04 	call	0x938	; 0x938 <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     c7e:	a7 e3       	ldi	r26, 0x37	; 55
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e7 e3       	ldi	r30, 0x37	; 55
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	8e 7f       	andi	r24, 0xFE	; 254
     c8a:	8c 93       	st	X, r24
     c8c:	a8 e3       	ldi	r26, 0x38	; 56
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e8 e3       	ldi	r30, 0x38	; 56
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	81 60       	ori	r24, 0x01	; 1
     c98:	8c 93       	st	X, r24
	// set up all devices for remote control
	assign_bit(DDRB, PORTB, G_REN);
     c9a:	a8 e3       	ldi	r26, 0x38	; 56
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e8 e3       	ldi	r30, 0x38	; 56
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	8d 7f       	andi	r24, 0xFD	; 253
     ca6:	8c 93       	st	X, r24
     ca8:	a7 e3       	ldi	r26, 0x37	; 55
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e7 e3       	ldi	r30, 0x37	; 55
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	82 60       	ori	r24, 0x02	; 2
     cb4:	8c 93       	st	X, r24
     cb6:	a8 e3       	ldi	r26, 0x38	; 56
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e8 e3       	ldi	r30, 0x38	; 56
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	8d 7f       	andi	r24, 0xFD	; 253
     cc2:	8c 93       	st	X, r24

	// DCL - device clear for all devices on bus
	cmd_buf[0] = G_CMD_DCL;
     cc4:	84 e1       	ldi	r24, 0x14	; 20
     cc6:	80 93 5e 04 	sts	0x045E, r24
	gpib_cmd(cmd_buf, 1);
     cca:	8e e5       	ldi	r24, 0x5E	; 94
     ccc:	94 e0       	ldi	r25, 0x04	; 4
     cce:	61 e0       	ldi	r22, 0x01	; 1
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>
}
     cd6:	0f 90       	pop	r0
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <gpib_controller_release>:

/**
 * Release bus 
 */
void gpib_controller_release(void) {
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     ce6:	a8 e3       	ldi	r26, 0x38	; 56
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 e3       	ldi	r30, 0x38	; 56
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	8e 7f       	andi	r24, 0xFE	; 254
     cf2:	8c 93       	st	X, r24
     cf4:	a7 e3       	ldi	r26, 0x37	; 55
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e7 e3       	ldi	r30, 0x37	; 55
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	81 60       	ori	r24, 0x01	; 1
     d00:	8c 93       	st	X, r24
     d02:	a8 e3       	ldi	r26, 0x38	; 56
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e8 e3       	ldi	r30, 0x38	; 56
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	8e 7f       	andi	r24, 0xFE	; 254
     d0e:	8c 93       	st	X, r24
	delay_ms(200);
     d10:	88 ec       	ldi	r24, 0xC8	; 200
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 9c 04 	call	0x938	; 0x938 <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     d18:	a7 e3       	ldi	r26, 0x37	; 55
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e7 e3       	ldi	r30, 0x37	; 55
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	8e 7f       	andi	r24, 0xFE	; 254
     d24:	8c 93       	st	X, r24
     d26:	a8 e3       	ldi	r26, 0x38	; 56
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e8 e3       	ldi	r30, 0x38	; 56
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	81 60       	ori	r24, 0x01	; 1
     d32:	8c 93       	st	X, r24
	// set up all devices for local control
	release_bit(DDRB, PORTB, G_REN);
     d34:	a7 e3       	ldi	r26, 0x37	; 55
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e7 e3       	ldi	r30, 0x37	; 55
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8d 7f       	andi	r24, 0xFD	; 253
     d40:	8c 93       	st	X, r24
     d42:	a8 e3       	ldi	r26, 0x38	; 56
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e8 e3       	ldi	r30, 0x38	; 56
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	82 60       	ori	r24, 0x02	; 2
     d4e:	8c 93       	st	X, r24
}
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <gpib_write>:

/**
 * Write GPIB string to bus
 * \brief See _gpib_write() for further information.
 */
uchar gpib_write(uchar *bytes, int length) {
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <gpib_write+0x6>
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <gpib_write+0x8>
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	9a 83       	std	Y+2, r25	; 0x02
     d64:	89 83       	std	Y+1, r24	; 0x01
     d66:	7c 83       	std	Y+4, r23	; 0x04
     d68:	6b 83       	std	Y+3, r22	; 0x03
	// set attention arg false for ordinary strings
	return _gpib_write(bytes, length, (uchar) 0);
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	9a 81       	ldd	r25, Y+2	; 0x02
     d6e:	2b 81       	ldd	r18, Y+3	; 0x03
     d70:	3c 81       	ldd	r19, Y+4	; 0x04
     d72:	b9 01       	movw	r22, r18
     d74:	40 e0       	ldi	r20, 0x00	; 0
     d76:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_gpib_write>
}
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <gpib_cmd>:

/**
 * Write GPIB command to bus
 * \brief See _gpib_write() for further information.
 */
uchar gpib_cmd(uchar *bytes, int length) {
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <gpib_cmd+0x6>
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <gpib_cmd+0x8>
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	89 83       	std	Y+1, r24	; 0x01
     d98:	7c 83       	std	Y+4, r23	; 0x04
     d9a:	6b 83       	std	Y+3, r22	; 0x03
	// set attention arg true for commands
	return _gpib_write(bytes, length, (uchar) 1);
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	9a 81       	ldd	r25, Y+2	; 0x02
     da0:	2b 81       	ldd	r18, Y+3	; 0x03
     da2:	3c 81       	ldd	r19, Y+4	; 0x04
     da4:	b9 01       	movw	r22, r18
     da6:	41 e0       	ldi	r20, 0x01	; 1
     da8:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_gpib_write>
}
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <gpib_write_prologue>:

/**
 * Emits prologue before writing to a listener.
 *
 */
void gpib_write_prologue(uchar attention) {
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	0f 92       	push	r0
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	89 83       	std	Y+1, r24	; 0x01
	// set talks state. This is used by ISR to recognize own talk
	// (controller must not talk to itself and must not take part in listener handshake when talking)
	controller.talks = 1;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	80 93 a7 03 	sts	0x03A7, r24
	if (attention) {
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	88 23       	and	r24, r24
     dd0:	a9 f0       	breq	.+42     	; 0xdfc <gpib_write_prologue+0x42>
		//uart_puts("\n\rgpib_controller_write()\n\r");
		// assign ATN for commands
		assign_bit(DDRD, PORTD, G_ATN);
     dd2:	a2 e3       	ldi	r26, 0x32	; 50
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e2 e3       	ldi	r30, 0x32	; 50
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	8f 77       	andi	r24, 0x7F	; 127
     dde:	8c 93       	st	X, r24
     de0:	a1 e3       	ldi	r26, 0x31	; 49
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e1 e3       	ldi	r30, 0x31	; 49
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	80 68       	ori	r24, 0x80	; 128
     dec:	8c 93       	st	X, r24
     dee:	a2 e3       	ldi	r26, 0x32	; 50
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e2 e3       	ldi	r30, 0x32	; 50
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	8f 77       	andi	r24, 0x7F	; 127
     dfa:	8c 93       	st	X, r24
	}
	// release EOI during transmission
	release_bit(DDRD, PORTD, G_EOI);
     dfc:	a1 e3       	ldi	r26, 0x31	; 49
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e1 e3       	ldi	r30, 0x31	; 49
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	8f 7e       	andi	r24, 0xEF	; 239
     e08:	8c 93       	st	X, r24
     e0a:	a2 e3       	ldi	r26, 0x32	; 50
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e2 e3       	ldi	r30, 0x32	; 50
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	80 61       	ori	r24, 0x10	; 16
     e16:	8c 93       	st	X, r24
	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
     e18:	a1 e3       	ldi	r26, 0x31	; 49
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e1 e3       	ldi	r30, 0x31	; 49
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	8b 7f       	andi	r24, 0xFB	; 251
     e24:	8c 93       	st	X, r24
     e26:	a2 e3       	ldi	r26, 0x32	; 50
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e2 e3       	ldi	r30, 0x32	; 50
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	84 60       	ori	r24, 0x04	; 4
     e32:	8c 93       	st	X, r24
	// release NRFD (just to be sure)
	release_bit(DDRD, PORTD, G_NRFD);
     e34:	a1 e3       	ldi	r26, 0x31	; 49
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e1 e3       	ldi	r30, 0x31	; 49
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	87 7f       	andi	r24, 0xF7	; 247
     e40:	8c 93       	st	X, r24
     e42:	a2 e3       	ldi	r26, 0x32	; 50
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e2 e3       	ldi	r30, 0x32	; 50
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	88 60       	ori	r24, 0x08	; 8
     e4e:	8c 93       	st	X, r24
}
     e50:	0f 90       	pop	r0
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <gpib_write_epilogue>:

/**
 * Emits epilogue after writing to a listener.
 *
 */
void gpib_write_epilogue(uchar attention) {
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	0f 92       	push	r0
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	89 83       	std	Y+1, r24	; 0x01
	if (attention) {
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	88 23       	and	r24, r24
     e68:	71 f0       	breq	.+28     	; 0xe86 <gpib_write_epilogue+0x2e>
		// assign ATN for commands
		release_bit(DDRD, PORTD, G_ATN);
     e6a:	a1 e3       	ldi	r26, 0x31	; 49
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e1 e3       	ldi	r30, 0x31	; 49
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	8f 77       	andi	r24, 0x7F	; 127
     e76:	8c 93       	st	X, r24
     e78:	a2 e3       	ldi	r26, 0x32	; 50
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e2 e3       	ldi	r30, 0x32	; 50
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	80 68       	ori	r24, 0x80	; 128
     e84:	8c 93       	st	X, r24
	}
	// clear talk state.Controller does not talk anymore.
	controller.talks = 0;
     e86:	10 92 a7 03 	sts	0x03A7, r1
}
     e8a:	0f 90       	pop	r0
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	08 95       	ret

00000e92 <gpib_write_byte>:

/**
 * Emits single byte to GPIB port pins.
 */
uchar gpib_write_byte(uchar c, uchar isLastByte) {
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	00 d0       	rcall	.+0      	; 0xe98 <gpib_write_byte+0x6>
     e98:	00 d0       	rcall	.+0      	; 0xe9a <gpib_write_byte+0x8>
     e9a:	0f 92       	push	r0
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	8b 83       	std	Y+3, r24	; 0x03
     ea2:	6c 83       	std	Y+4, r22	; 0x04
	int timeout;

	// wait for NDAC assign from all listeners
	release_bit(DDRD, PORTD, G_NDAC);
     ea4:	a1 e3       	ldi	r26, 0x31	; 49
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e1 e3       	ldi	r30, 0x31	; 49
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	8f 7d       	andi	r24, 0xDF	; 223
     eb0:	8c 93       	st	X, r24
     eb2:	a2 e3       	ldi	r26, 0x32	; 50
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e2 e3       	ldi	r30, 0x32	; 50
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	80 62       	ori	r24, 0x20	; 32
     ebe:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
	timeout = s + 5;
     ec0:	80 91 13 05 	lds	r24, 0x0513
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	05 96       	adiw	r24, 0x05	; 5
     eca:	9a 83       	std	Y+2, r25	; 0x02
     ecc:	89 83       	std	Y+1, r24	; 0x01
     ece:	10 c0       	rjmp	.+32     	; 0xef0 <gpib_write_byte+0x5e>
	//gpib_info();
	while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
		if (s == timeout) {
     ed0:	80 91 13 05 	lds	r24, 0x0513
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	28 17       	cp	r18, r24
     ede:	39 07       	cpc	r19, r25
     ee0:	39 f4       	brne	.+14     	; 0xef0 <gpib_write_byte+0x5e>
			uart_puts("\n\rError: NDAC timeout\n\r");
     ee2:	86 e9       	ldi	r24, 0x96	; 150
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>
			return 0xff;
     eea:	8f ef       	ldi	r24, 0xFF	; 255
     eec:	8d 83       	std	Y+5, r24	; 0x05
     eee:	f7 c1       	rjmp	.+1006   	; 0x12de <gpib_write_byte+0x44c>
	// wait for NDAC assign from all listeners
	release_bit(DDRD, PORTD, G_NDAC);
#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
     ef0:	e0 e3       	ldi	r30, 0x30	; 48
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	88 2f       	mov	r24, r24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	80 72       	andi	r24, 0x20	; 32
     efc:	90 70       	andi	r25, 0x00	; 0
     efe:	00 97       	sbiw	r24, 0x00	; 0
     f00:	49 f0       	breq	.+18     	; 0xf14 <gpib_write_byte+0x82>
     f02:	80 91 13 05 	lds	r24, 0x0513
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	82 17       	cp	r24, r18
     f10:	93 07       	cpc	r25, r19
     f12:	f4 f6       	brge	.-68     	; 0xed0 <gpib_write_byte+0x3e>
	}
#else
	loop_until_bit_is_clear(PIND,G_NDAC);
#endif

	DDRA = 0x00;
     f14:	ea e3       	ldi	r30, 0x3A	; 58
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	10 82       	st	Z, r1
	if (c & 0x01) {
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	81 70       	andi	r24, 0x01	; 1
     f22:	90 70       	andi	r25, 0x00	; 0
     f24:	88 23       	and	r24, r24
     f26:	b1 f0       	breq	.+44     	; 0xf54 <gpib_write_byte+0xc2>
		assign_bit(DDRA, PORTA, PA0);
     f28:	ab e3       	ldi	r26, 0x3B	; 59
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	eb e3       	ldi	r30, 0x3B	; 59
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	8e 7f       	andi	r24, 0xFE	; 254
     f34:	8c 93       	st	X, r24
     f36:	aa e3       	ldi	r26, 0x3A	; 58
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	ea e3       	ldi	r30, 0x3A	; 58
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	81 60       	ori	r24, 0x01	; 1
     f42:	8c 93       	st	X, r24
     f44:	ab e3       	ldi	r26, 0x3B	; 59
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	eb e3       	ldi	r30, 0x3B	; 59
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8e 7f       	andi	r24, 0xFE	; 254
     f50:	8c 93       	st	X, r24
     f52:	0e c0       	rjmp	.+28     	; 0xf70 <gpib_write_byte+0xde>
	} else {
		release_bit(DDRA, PORTA, PA0)
     f54:	aa e3       	ldi	r26, 0x3A	; 58
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	ea e3       	ldi	r30, 0x3A	; 58
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8e 7f       	andi	r24, 0xFE	; 254
     f60:	8c 93       	st	X, r24
     f62:	ab e3       	ldi	r26, 0x3B	; 59
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	eb e3       	ldi	r30, 0x3B	; 59
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	81 60       	ori	r24, 0x01	; 1
     f6e:	8c 93       	st	X, r24
	}
	if (c & 0x02) {
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	88 2f       	mov	r24, r24
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	82 70       	andi	r24, 0x02	; 2
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	b1 f0       	breq	.+44     	; 0xfaa <gpib_write_byte+0x118>
		assign_bit(DDRA, PORTA, PA1)
     f7e:	ab e3       	ldi	r26, 0x3B	; 59
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	eb e3       	ldi	r30, 0x3B	; 59
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8d 7f       	andi	r24, 0xFD	; 253
     f8a:	8c 93       	st	X, r24
     f8c:	aa e3       	ldi	r26, 0x3A	; 58
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	ea e3       	ldi	r30, 0x3A	; 58
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	82 60       	ori	r24, 0x02	; 2
     f98:	8c 93       	st	X, r24
     f9a:	ab e3       	ldi	r26, 0x3B	; 59
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	eb e3       	ldi	r30, 0x3B	; 59
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	8d 7f       	andi	r24, 0xFD	; 253
     fa6:	8c 93       	st	X, r24
     fa8:	0e c0       	rjmp	.+28     	; 0xfc6 <gpib_write_byte+0x134>
	} else {
		release_bit(DDRA, PORTA, PA1);
     faa:	aa e3       	ldi	r26, 0x3A	; 58
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	ea e3       	ldi	r30, 0x3A	; 58
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	8d 7f       	andi	r24, 0xFD	; 253
     fb6:	8c 93       	st	X, r24
     fb8:	ab e3       	ldi	r26, 0x3B	; 59
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	eb e3       	ldi	r30, 0x3B	; 59
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	82 60       	ori	r24, 0x02	; 2
     fc4:	8c 93       	st	X, r24
	}
	if (c & 0x04) {
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	84 70       	andi	r24, 0x04	; 4
     fce:	90 70       	andi	r25, 0x00	; 0
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	b1 f0       	breq	.+44     	; 0x1000 <gpib_write_byte+0x16e>
		assign_bit(DDRA, PORTA, PA2);
     fd4:	ab e3       	ldi	r26, 0x3B	; 59
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	eb e3       	ldi	r30, 0x3B	; 59
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8b 7f       	andi	r24, 0xFB	; 251
     fe0:	8c 93       	st	X, r24
     fe2:	aa e3       	ldi	r26, 0x3A	; 58
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	ea e3       	ldi	r30, 0x3A	; 58
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	84 60       	ori	r24, 0x04	; 4
     fee:	8c 93       	st	X, r24
     ff0:	ab e3       	ldi	r26, 0x3B	; 59
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	eb e3       	ldi	r30, 0x3B	; 59
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	8b 7f       	andi	r24, 0xFB	; 251
     ffc:	8c 93       	st	X, r24
     ffe:	0e c0       	rjmp	.+28     	; 0x101c <gpib_write_byte+0x18a>
	} else {
		release_bit(DDRA, PORTA, PA2);
    1000:	aa e3       	ldi	r26, 0x3A	; 58
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	ea e3       	ldi	r30, 0x3A	; 58
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8b 7f       	andi	r24, 0xFB	; 251
    100c:	8c 93       	st	X, r24
    100e:	ab e3       	ldi	r26, 0x3B	; 59
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	eb e3       	ldi	r30, 0x3B	; 59
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	84 60       	ori	r24, 0x04	; 4
    101a:	8c 93       	st	X, r24
	}
	if (c & 0x08) {
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	88 2f       	mov	r24, r24
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	88 70       	andi	r24, 0x08	; 8
    1024:	90 70       	andi	r25, 0x00	; 0
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	b1 f0       	breq	.+44     	; 0x1056 <gpib_write_byte+0x1c4>
		assign_bit(DDRA, PORTA, PA3);
    102a:	ab e3       	ldi	r26, 0x3B	; 59
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	eb e3       	ldi	r30, 0x3B	; 59
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	87 7f       	andi	r24, 0xF7	; 247
    1036:	8c 93       	st	X, r24
    1038:	aa e3       	ldi	r26, 0x3A	; 58
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	ea e3       	ldi	r30, 0x3A	; 58
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	88 60       	ori	r24, 0x08	; 8
    1044:	8c 93       	st	X, r24
    1046:	ab e3       	ldi	r26, 0x3B	; 59
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	eb e3       	ldi	r30, 0x3B	; 59
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	87 7f       	andi	r24, 0xF7	; 247
    1052:	8c 93       	st	X, r24
    1054:	0e c0       	rjmp	.+28     	; 0x1072 <gpib_write_byte+0x1e0>
	} else {
		release_bit(DDRA, PORTA, PA3);
    1056:	aa e3       	ldi	r26, 0x3A	; 58
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	ea e3       	ldi	r30, 0x3A	; 58
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	87 7f       	andi	r24, 0xF7	; 247
    1062:	8c 93       	st	X, r24
    1064:	ab e3       	ldi	r26, 0x3B	; 59
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	eb e3       	ldi	r30, 0x3B	; 59
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	88 60       	ori	r24, 0x08	; 8
    1070:	8c 93       	st	X, r24
	}
	if (c & 0x10) {
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	88 2f       	mov	r24, r24
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	80 71       	andi	r24, 0x10	; 16
    107a:	90 70       	andi	r25, 0x00	; 0
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	b1 f0       	breq	.+44     	; 0x10ac <gpib_write_byte+0x21a>
		assign_bit(DDRA, PORTA, PA4);
    1080:	ab e3       	ldi	r26, 0x3B	; 59
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	eb e3       	ldi	r30, 0x3B	; 59
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	8f 7e       	andi	r24, 0xEF	; 239
    108c:	8c 93       	st	X, r24
    108e:	aa e3       	ldi	r26, 0x3A	; 58
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	ea e3       	ldi	r30, 0x3A	; 58
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	80 61       	ori	r24, 0x10	; 16
    109a:	8c 93       	st	X, r24
    109c:	ab e3       	ldi	r26, 0x3B	; 59
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	eb e3       	ldi	r30, 0x3B	; 59
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	8f 7e       	andi	r24, 0xEF	; 239
    10a8:	8c 93       	st	X, r24
    10aa:	0e c0       	rjmp	.+28     	; 0x10c8 <gpib_write_byte+0x236>
	} else {
		release_bit(DDRA, PORTA, PA4);
    10ac:	aa e3       	ldi	r26, 0x3A	; 58
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	ea e3       	ldi	r30, 0x3A	; 58
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	8f 7e       	andi	r24, 0xEF	; 239
    10b8:	8c 93       	st	X, r24
    10ba:	ab e3       	ldi	r26, 0x3B	; 59
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	eb e3       	ldi	r30, 0x3B	; 59
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	80 61       	ori	r24, 0x10	; 16
    10c6:	8c 93       	st	X, r24
	}
	if (c & 0x20) {
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	80 72       	andi	r24, 0x20	; 32
    10d0:	90 70       	andi	r25, 0x00	; 0
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	b1 f0       	breq	.+44     	; 0x1102 <gpib_write_byte+0x270>
		assign_bit(DDRA, PORTA, PA5);
    10d6:	ab e3       	ldi	r26, 0x3B	; 59
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	eb e3       	ldi	r30, 0x3B	; 59
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	8f 7d       	andi	r24, 0xDF	; 223
    10e2:	8c 93       	st	X, r24
    10e4:	aa e3       	ldi	r26, 0x3A	; 58
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	ea e3       	ldi	r30, 0x3A	; 58
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	80 62       	ori	r24, 0x20	; 32
    10f0:	8c 93       	st	X, r24
    10f2:	ab e3       	ldi	r26, 0x3B	; 59
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	eb e3       	ldi	r30, 0x3B	; 59
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8f 7d       	andi	r24, 0xDF	; 223
    10fe:	8c 93       	st	X, r24
    1100:	0e c0       	rjmp	.+28     	; 0x111e <gpib_write_byte+0x28c>
	} else {
		release_bit(DDRA, PORTA, PA5);
    1102:	aa e3       	ldi	r26, 0x3A	; 58
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	ea e3       	ldi	r30, 0x3A	; 58
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	8f 7d       	andi	r24, 0xDF	; 223
    110e:	8c 93       	st	X, r24
    1110:	ab e3       	ldi	r26, 0x3B	; 59
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	eb e3       	ldi	r30, 0x3B	; 59
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	80 62       	ori	r24, 0x20	; 32
    111c:	8c 93       	st	X, r24
	}
	if (c & 0x40) {
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	88 2f       	mov	r24, r24
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	80 74       	andi	r24, 0x40	; 64
    1126:	90 70       	andi	r25, 0x00	; 0
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	b1 f0       	breq	.+44     	; 0x1158 <gpib_write_byte+0x2c6>
		assign_bit(DDRA, PORTA, PA6);
    112c:	ab e3       	ldi	r26, 0x3B	; 59
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	eb e3       	ldi	r30, 0x3B	; 59
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	8f 7b       	andi	r24, 0xBF	; 191
    1138:	8c 93       	st	X, r24
    113a:	aa e3       	ldi	r26, 0x3A	; 58
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	ea e3       	ldi	r30, 0x3A	; 58
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	80 64       	ori	r24, 0x40	; 64
    1146:	8c 93       	st	X, r24
    1148:	ab e3       	ldi	r26, 0x3B	; 59
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	eb e3       	ldi	r30, 0x3B	; 59
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8f 7b       	andi	r24, 0xBF	; 191
    1154:	8c 93       	st	X, r24
    1156:	0e c0       	rjmp	.+28     	; 0x1174 <gpib_write_byte+0x2e2>
	} else {
		release_bit(DDRA, PORTA, PA6);
    1158:	aa e3       	ldi	r26, 0x3A	; 58
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	ea e3       	ldi	r30, 0x3A	; 58
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	8f 7b       	andi	r24, 0xBF	; 191
    1164:	8c 93       	st	X, r24
    1166:	ab e3       	ldi	r26, 0x3B	; 59
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	eb e3       	ldi	r30, 0x3B	; 59
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	80 64       	ori	r24, 0x40	; 64
    1172:	8c 93       	st	X, r24
	}
	if (c & 0x80) {
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	88 23       	and	r24, r24
    1178:	b4 f4       	brge	.+44     	; 0x11a6 <gpib_write_byte+0x314>
		assign_bit(DDRA, PORTA, PA7);
    117a:	ab e3       	ldi	r26, 0x3B	; 59
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	eb e3       	ldi	r30, 0x3B	; 59
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	8f 77       	andi	r24, 0x7F	; 127
    1186:	8c 93       	st	X, r24
    1188:	aa e3       	ldi	r26, 0x3A	; 58
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	ea e3       	ldi	r30, 0x3A	; 58
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	80 68       	ori	r24, 0x80	; 128
    1194:	8c 93       	st	X, r24
    1196:	ab e3       	ldi	r26, 0x3B	; 59
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	eb e3       	ldi	r30, 0x3B	; 59
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	8f 77       	andi	r24, 0x7F	; 127
    11a2:	8c 93       	st	X, r24
    11a4:	0e c0       	rjmp	.+28     	; 0x11c2 <gpib_write_byte+0x330>
	} else {
		release_bit(DDRA, PORTA, PA7);
    11a6:	aa e3       	ldi	r26, 0x3A	; 58
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	ea e3       	ldi	r30, 0x3A	; 58
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	8f 77       	andi	r24, 0x7F	; 127
    11b2:	8c 93       	st	X, r24
    11b4:	ab e3       	ldi	r26, 0x3B	; 59
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	eb e3       	ldi	r30, 0x3B	; 59
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	80 68       	ori	r24, 0x80	; 128
    11c0:	8c 93       	st	X, r24
	}

	// wait until listeners release NRFD
	//uart_puts("1");
	release_bit(DDRD, PORTD, G_NRFD);
    11c2:	a1 e3       	ldi	r26, 0x31	; 49
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e1 e3       	ldi	r30, 0x31	; 49
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	87 7f       	andi	r24, 0xF7	; 247
    11ce:	8c 93       	st	X, r24
    11d0:	a2 e3       	ldi	r26, 0x32	; 50
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e2 e3       	ldi	r30, 0x32	; 50
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	88 60       	ori	r24, 0x08	; 8
    11dc:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
	//gpib_info();
	timeout = s + 5;
    11de:	80 91 13 05 	lds	r24, 0x0513
    11e2:	88 2f       	mov	r24, r24
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	05 96       	adiw	r24, 0x05	; 5
    11e8:	9a 83       	std	Y+2, r25	; 0x02
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	10 c0       	rjmp	.+32     	; 0x120e <gpib_write_byte+0x37c>
	while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
		if (s == timeout) {
    11ee:	80 91 13 05 	lds	r24, 0x0513
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
    11fa:	28 17       	cp	r18, r24
    11fc:	39 07       	cpc	r19, r25
    11fe:	39 f4       	brne	.+14     	; 0x120e <gpib_write_byte+0x37c>
			uart_puts("\n\rError: NRFD timeout\n\r");
    1200:	8e ea       	ldi	r24, 0xAE	; 174
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>
			return 0xff;
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	8d 83       	std	Y+5, r24	; 0x05
    120c:	68 c0       	rjmp	.+208    	; 0x12de <gpib_write_byte+0x44c>
	//uart_puts("1");
	release_bit(DDRD, PORTD, G_NRFD);
#ifdef WITH_TIMEOUT
	//gpib_info();
	timeout = s + 5;
	while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
    120e:	e0 e3       	ldi	r30, 0x30	; 48
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	88 70       	andi	r24, 0x08	; 8
    121a:	90 70       	andi	r25, 0x00	; 0
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	49 f4       	brne	.+18     	; 0x1232 <gpib_write_byte+0x3a0>
    1220:	80 91 13 05 	lds	r24, 0x0513
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	9a 81       	ldd	r25, Y+2	; 0x02
    122c:	82 17       	cp	r24, r18
    122e:	93 07       	cpc	r25, r19
    1230:	f4 f6       	brge	.-68     	; 0x11ee <gpib_write_byte+0x35c>
#else
	loop_until_bit_is_set(PIND,G_NRFD);
#endif

	// assign EOI during transmission of only last byte
	if (isLastByte) {
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	88 23       	and	r24, r24
    1236:	a9 f0       	breq	.+42     	; 0x1262 <gpib_write_byte+0x3d0>
		//uart_puts("\n\rE\n\r");
		assign_bit(DDRD, PORTD, G_EOI);
    1238:	a2 e3       	ldi	r26, 0x32	; 50
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e2 e3       	ldi	r30, 0x32	; 50
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	8f 7e       	andi	r24, 0xEF	; 239
    1244:	8c 93       	st	X, r24
    1246:	a1 e3       	ldi	r26, 0x31	; 49
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e1 e3       	ldi	r30, 0x31	; 49
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	80 61       	ori	r24, 0x10	; 16
    1252:	8c 93       	st	X, r24
    1254:	a2 e3       	ldi	r26, 0x32	; 50
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e2 e3       	ldi	r30, 0x32	; 50
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	8f 7e       	andi	r24, 0xEF	; 239
    1260:	8c 93       	st	X, r24
	}

	// assign DAV, data valid for listeners
	assign_bit(DDRD, PORTD, G_DAV);
    1262:	a2 e3       	ldi	r26, 0x32	; 50
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e2 e3       	ldi	r30, 0x32	; 50
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	8b 7f       	andi	r24, 0xFB	; 251
    126e:	8c 93       	st	X, r24
    1270:	a1 e3       	ldi	r26, 0x31	; 49
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e1 e3       	ldi	r30, 0x31	; 49
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	84 60       	ori	r24, 0x04	; 4
    127c:	8c 93       	st	X, r24
    127e:	a2 e3       	ldi	r26, 0x32	; 50
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e2 e3       	ldi	r30, 0x32	; 50
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	8b 7f       	andi	r24, 0xFB	; 251
    128a:	8c 93       	st	X, r24

	// wait for NDAC release
	//uart_puts("2");
	release_bit(DDRD, PORTD, G_NDAC);
    128c:	a1 e3       	ldi	r26, 0x31	; 49
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e1 e3       	ldi	r30, 0x31	; 49
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	8f 7d       	andi	r24, 0xDF	; 223
    1298:	8c 93       	st	X, r24
    129a:	a2 e3       	ldi	r26, 0x32	; 50
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e2 e3       	ldi	r30, 0x32	; 50
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	80 62       	ori	r24, 0x20	; 32
    12a6:	8c 93       	st	X, r24
	loop_until_bit_is_set(PIND, G_NDAC);
    12a8:	e0 e3       	ldi	r30, 0x30	; 48
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	88 2f       	mov	r24, r24
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	80 72       	andi	r24, 0x20	; 32
    12b4:	90 70       	andi	r25, 0x00	; 0
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	b9 f3       	breq	.-18     	; 0x12a8 <gpib_write_byte+0x416>

	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
    12ba:	a1 e3       	ldi	r26, 0x31	; 49
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e1 e3       	ldi	r30, 0x31	; 49
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	8b 7f       	andi	r24, 0xFB	; 251
    12c6:	8c 93       	st	X, r24
    12c8:	a2 e3       	ldi	r26, 0x32	; 50
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e2 e3       	ldi	r30, 0x32	; 50
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	84 60       	ori	r24, 0x04	; 4
    12d4:	8c 93       	st	X, r24

	// reset Port to all input
	DDRA = 0x00;
    12d6:	ea e3       	ldi	r30, 0x3A	; 58
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	10 82       	st	Z, r1

	//uart_puts("3\r\n");

	return 0;
    12dc:	1d 82       	std	Y+5, r1	; 0x05
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
}
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <_gpib_write>:
 * \param length length of valid bytes in byte array or zero.
 * for binary data, lenght must be defined. For strings, length can be set to zero. Then the length of
 * the string is calculated internally.
 * \param attention attention tur means assign ATN signal line during write.
 */
static uchar _gpib_write(uchar *bytes, int length, uchar attention) {
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	2b 97       	sbiw	r28, 0x0b	; 11
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	9e 83       	std	Y+6, r25	; 0x06
    1306:	8d 83       	std	Y+5, r24	; 0x05
    1308:	78 87       	std	Y+8, r23	; 0x08
    130a:	6f 83       	std	Y+7, r22	; 0x07
    130c:	49 87       	std	Y+9, r20	; 0x09
	uchar c;
	int i;

	gpib_write_prologue(attention);
    130e:	89 85       	ldd	r24, Y+9	; 0x09
    1310:	0e 94 dd 06 	call	0xdba	; 0xdba <gpib_write_prologue>

	if (length == 0) {
    1314:	8f 81       	ldd	r24, Y+7	; 0x07
    1316:	98 85       	ldd	r25, Y+8	; 0x08
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	31 f4       	brne	.+12     	; 0x1328 <_gpib_write+0x38>
		// length==0 means this is a common C string, null-terminated.
		// then, length can be easily calculated
		length = strlen((char*) bytes);
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	0e 94 b8 01 	call	0x370	; 0x370 <strlen>
    1324:	98 87       	std	Y+8, r25	; 0x08
    1326:	8f 83       	std	Y+7, r24	; 0x07
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif

	for (i = 0; i < length; i++) {
    1328:	1b 82       	std	Y+3, r1	; 0x03
    132a:	1a 82       	std	Y+2, r1	; 0x02
    132c:	28 c0       	rjmp	.+80     	; 0x137e <_gpib_write+0x8e>
		// put data on bus
		c = bytes[i];
    132e:	2a 81       	ldd	r18, Y+2	; 0x02
    1330:	3b 81       	ldd	r19, Y+3	; 0x03
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	fc 01       	movw	r30, r24
    1338:	e2 0f       	add	r30, r18
    133a:	f3 1f       	adc	r31, r19
    133c:	80 81       	ld	r24, Z
    133e:	8c 83       	std	Y+4, r24	; 0x04
		//sprintf( buf, "char: %c\n\r", c );
		//uart_puts(buf);		

		uchar isLastByte = (i == length - 1) && !attention;
    1340:	8f 81       	ldd	r24, Y+7	; 0x07
    1342:	98 85       	ldd	r25, Y+8	; 0x08
    1344:	9c 01       	movw	r18, r24
    1346:	21 50       	subi	r18, 0x01	; 1
    1348:	30 40       	sbci	r19, 0x00	; 0
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	9b 81       	ldd	r25, Y+3	; 0x03
    134e:	28 17       	cp	r18, r24
    1350:	39 07       	cpc	r19, r25
    1352:	41 f4       	brne	.+16     	; 0x1364 <_gpib_write+0x74>
    1354:	89 85       	ldd	r24, Y+9	; 0x09
    1356:	88 23       	and	r24, r24
    1358:	29 f4       	brne	.+10     	; 0x1364 <_gpib_write+0x74>
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	9b 87       	std	Y+11, r25	; 0x0b
    1360:	8a 87       	std	Y+10, r24	; 0x0a
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <_gpib_write+0x78>
    1364:	1b 86       	std	Y+11, r1	; 0x0b
    1366:	1a 86       	std	Y+10, r1	; 0x0a
    1368:	9a 85       	ldd	r25, Y+10	; 0x0a
    136a:	99 83       	std	Y+1, r25	; 0x01
		gpib_write_byte(c, isLastByte);
    136c:	8c 81       	ldd	r24, Y+4	; 0x04
    136e:	69 81       	ldd	r22, Y+1	; 0x01
    1370:	0e 94 49 07 	call	0xe92	; 0xe92 <gpib_write_byte>
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif

	for (i = 0; i < length; i++) {
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	9b 81       	ldd	r25, Y+3	; 0x03
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	9b 83       	std	Y+3, r25	; 0x03
    137c:	8a 83       	std	Y+2, r24	; 0x02
    137e:	2a 81       	ldd	r18, Y+2	; 0x02
    1380:	3b 81       	ldd	r19, Y+3	; 0x03
    1382:	8f 81       	ldd	r24, Y+7	; 0x07
    1384:	98 85       	ldd	r25, Y+8	; 0x08
    1386:	28 17       	cp	r18, r24
    1388:	39 07       	cpc	r19, r25
    138a:	8c f2       	brlt	.-94     	; 0x132e <_gpib_write+0x3e>

		uchar isLastByte = (i == length - 1) && !attention;
		gpib_write_byte(c, isLastByte);
	}

	gpib_write_epilogue(attention);
    138c:	89 85       	ldd	r24, Y+9	; 0x09
    138e:	0e 94 2c 07 	call	0xe58	; 0xe58 <gpib_write_epilogue>

	return 0x00;
    1392:	80 e0       	ldi	r24, 0x00	; 0
}
    1394:	2b 96       	adiw	r28, 0x0b	; 11
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <gpib_info>:

/**
 * print some useful info about bus state (for example value of handshake pins)
 */
void gpib_info(void) {
    13a6:	af 92       	push	r10
    13a8:	bf 92       	push	r11
    13aa:	cf 92       	push	r12
    13ac:	df 92       	push	r13
    13ae:	ef 92       	push	r14
    13b0:	ff 92       	push	r15
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	2a 97       	sbiw	r28, 0x0a	; 10
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
	uchar dav, nrfd, ndac, eoi, atn, srq, ifc, ren;
	extern uchar buf[80];

	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    13ca:	0e 94 81 0c 	call	0x1902	; 0x1902 <gpib_get_partner_pad>
    13ce:	08 2f       	mov	r16, r24
    13d0:	10 e0       	ldi	r17, 0x00	; 0
    13d2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <gpib_get_partner_sad>
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	8d b7       	in	r24, 0x3d	; 61
    13dc:	9e b7       	in	r25, 0x3e	; 62
    13de:	08 97       	sbiw	r24, 0x08	; 8
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	9e bf       	out	0x3e, r25	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	8d bf       	out	0x3d, r24	; 61
    13ea:	ed b7       	in	r30, 0x3d	; 61
    13ec:	fe b7       	in	r31, 0x3e	; 62
    13ee:	31 96       	adiw	r30, 0x01	; 1
    13f0:	82 ec       	ldi	r24, 0xC2	; 194
    13f2:	94 e0       	ldi	r25, 0x04	; 4
    13f4:	91 83       	std	Z+1, r25	; 0x01
    13f6:	80 83       	st	Z, r24
    13f8:	86 ec       	ldi	r24, 0xC6	; 198
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	93 83       	std	Z+3, r25	; 0x03
    13fe:	82 83       	std	Z+2, r24	; 0x02
    1400:	15 83       	std	Z+5, r17	; 0x05
    1402:	04 83       	std	Z+4, r16	; 0x04
    1404:	37 83       	std	Z+7, r19	; 0x07
    1406:	26 83       	std	Z+6, r18	; 0x06
    1408:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <sprintf>
    140c:	8d b7       	in	r24, 0x3d	; 61
    140e:	9e b7       	in	r25, 0x3e	; 62
    1410:	08 96       	adiw	r24, 0x08	; 8
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	9e bf       	out	0x3e, r25	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	8d bf       	out	0x3d, r24	; 61
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);
    141c:	82 ec       	ldi	r24, 0xC2	; 194
    141e:	94 e0       	ldi	r25, 0x04	; 4
    1420:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>

	uart_puts("Partner list\n\r");
    1424:	84 ef       	ldi	r24, 0xF4	; 244
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>
	for (int i = 0; i < MAX_PARTNER; i++) {
    142c:	1a 82       	std	Y+2, r1	; 0x02
    142e:	19 82       	std	Y+1, r1	; 0x01
    1430:	49 c0       	rjmp	.+146    	; 0x14c4 <gpib_info+0x11e>
		if (controller.partners[i].primary != ADDRESS_NOT_SET) {
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	9a 81       	ldd	r25, Y+2	; 0x02
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	fc 01       	movw	r30, r24
    143c:	e7 55       	subi	r30, 0x57	; 87
    143e:	fc 4f       	sbci	r31, 0xFC	; 252
    1440:	80 81       	ld	r24, Z
    1442:	8f 3f       	cpi	r24, 0xFF	; 255
    1444:	d1 f1       	breq	.+116    	; 0x14ba <gpib_info+0x114>
			sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	9a 81       	ldd	r25, Y+2	; 0x02
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	fc 01       	movw	r30, r24
    1450:	e7 55       	subi	r30, 0x57	; 87
    1452:	fc 4f       	sbci	r31, 0xFC	; 252
    1454:	80 81       	ld	r24, Z
    1456:	48 2f       	mov	r20, r24
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	9a 81       	ldd	r25, Y+2	; 0x02
    145e:	03 96       	adiw	r24, 0x03	; 3
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	fc 01       	movw	r30, r24
    1466:	ec 55       	subi	r30, 0x5C	; 92
    1468:	fc 4f       	sbci	r31, 0xFC	; 252
    146a:	80 81       	ld	r24, Z
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	8d b7       	in	r24, 0x3d	; 61
    1472:	9e b7       	in	r25, 0x3e	; 62
    1474:	08 97       	sbiw	r24, 0x08	; 8
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	9e bf       	out	0x3e, r25	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	8d bf       	out	0x3d, r24	; 61
    1480:	ed b7       	in	r30, 0x3d	; 61
    1482:	fe b7       	in	r31, 0x3e	; 62
    1484:	31 96       	adiw	r30, 0x01	; 1
    1486:	82 ec       	ldi	r24, 0xC2	; 194
    1488:	94 e0       	ldi	r25, 0x04	; 4
    148a:	91 83       	std	Z+1, r25	; 0x01
    148c:	80 83       	st	Z, r24
    148e:	86 ec       	ldi	r24, 0xC6	; 198
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	93 83       	std	Z+3, r25	; 0x03
    1494:	82 83       	std	Z+2, r24	; 0x02
    1496:	55 83       	std	Z+5, r21	; 0x05
    1498:	44 83       	std	Z+4, r20	; 0x04
    149a:	37 83       	std	Z+7, r19	; 0x07
    149c:	26 83       	std	Z+6, r18	; 0x06
    149e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <sprintf>
    14a2:	8d b7       	in	r24, 0x3d	; 61
    14a4:	9e b7       	in	r25, 0x3e	; 62
    14a6:	08 96       	adiw	r24, 0x08	; 8
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	9e bf       	out	0x3e, r25	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	8d bf       	out	0x3d, r24	; 61
					controller.partners[i].primary,
					controller.partners[i].secondary);
			uart_puts(buf);
    14b2:	82 ec       	ldi	r24, 0xC2	; 194
    14b4:	94 e0       	ldi	r25, 0x04	; 4
    14b6:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>
	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);

	uart_puts("Partner list\n\r");
	for (int i = 0; i < MAX_PARTNER; i++) {
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	9a 81       	ldd	r25, Y+2	; 0x02
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	9a 83       	std	Y+2, r25	; 0x02
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	9a 81       	ldd	r25, Y+2	; 0x02
    14c8:	85 30       	cpi	r24, 0x05	; 5
    14ca:	91 05       	cpc	r25, r1
    14cc:	0c f4       	brge	.+2      	; 0x14d0 <gpib_info+0x12a>
    14ce:	b1 cf       	rjmp	.-158    	; 0x1432 <gpib_info+0x8c>
					controller.partners[i].secondary);
			uart_puts(buf);
		}
	}

	dav = bit_is_set(PIND, G_DAV);
    14d0:	e0 e3       	ldi	r30, 0x30	; 48
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	84 70       	andi	r24, 0x04	; 4
    14d8:	8a 87       	std	Y+10, r24	; 0x0a
	nrfd = bit_is_set(PIND, G_NRFD);
    14da:	e0 e3       	ldi	r30, 0x30	; 48
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	88 70       	andi	r24, 0x08	; 8
    14e2:	89 87       	std	Y+9, r24	; 0x09
	ndac = bit_is_set(PIND, G_NDAC);
    14e4:	e0 e3       	ldi	r30, 0x30	; 48
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	80 72       	andi	r24, 0x20	; 32
    14ec:	88 87       	std	Y+8, r24	; 0x08
	eoi = bit_is_set(PIND, G_EOI);
    14ee:	e0 e3       	ldi	r30, 0x30	; 48
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	80 71       	andi	r24, 0x10	; 16
    14f6:	8f 83       	std	Y+7, r24	; 0x07
	atn = bit_is_set(PIND, G_ATN);
    14f8:	e0 e3       	ldi	r30, 0x30	; 48
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 78       	andi	r24, 0x80	; 128
    1500:	8e 83       	std	Y+6, r24	; 0x06
	srq = bit_is_set(PIND, G_SRQ);
    1502:	e0 e3       	ldi	r30, 0x30	; 48
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	80 74       	andi	r24, 0x40	; 64
    150a:	8d 83       	std	Y+5, r24	; 0x05
	ifc = bit_is_set(PINB, G_IFC);
    150c:	e6 e3       	ldi	r30, 0x36	; 54
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	81 70       	andi	r24, 0x01	; 1
    1514:	8c 83       	std	Y+4, r24	; 0x04
	ren = bit_is_set(PINB, G_REN);
    1516:	e6 e3       	ldi	r30, 0x36	; 54
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	82 70       	andi	r24, 0x02	; 2
    151e:	8b 83       	std	Y+3, r24	; 0x03
	//d = PINA;
	//di = d ^ 0xff;
	if (dav == 0x00)
    1520:	8a 85       	ldd	r24, Y+10	; 0x0a
    1522:	88 23       	and	r24, r24
    1524:	19 f4       	brne	.+6      	; 0x152c <gpib_info+0x186>
		dav = '0';
    1526:	80 e3       	ldi	r24, 0x30	; 48
    1528:	8a 87       	std	Y+10, r24	; 0x0a
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <gpib_info+0x18a>
	else
		dav = '1';
    152c:	81 e3       	ldi	r24, 0x31	; 49
    152e:	8a 87       	std	Y+10, r24	; 0x0a
	if (nrfd == 0x00)
    1530:	89 85       	ldd	r24, Y+9	; 0x09
    1532:	88 23       	and	r24, r24
    1534:	19 f4       	brne	.+6      	; 0x153c <gpib_info+0x196>
		nrfd = '0';
    1536:	80 e3       	ldi	r24, 0x30	; 48
    1538:	89 87       	std	Y+9, r24	; 0x09
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <gpib_info+0x19a>
	else
		nrfd = '1';
    153c:	81 e3       	ldi	r24, 0x31	; 49
    153e:	89 87       	std	Y+9, r24	; 0x09
	if (ndac == 0x00)
    1540:	88 85       	ldd	r24, Y+8	; 0x08
    1542:	88 23       	and	r24, r24
    1544:	19 f4       	brne	.+6      	; 0x154c <gpib_info+0x1a6>
		ndac = '0';
    1546:	80 e3       	ldi	r24, 0x30	; 48
    1548:	88 87       	std	Y+8, r24	; 0x08
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <gpib_info+0x1aa>
	else
		ndac = '1';
    154c:	81 e3       	ldi	r24, 0x31	; 49
    154e:	88 87       	std	Y+8, r24	; 0x08
	if (eoi == 0x00)
    1550:	8f 81       	ldd	r24, Y+7	; 0x07
    1552:	88 23       	and	r24, r24
    1554:	19 f4       	brne	.+6      	; 0x155c <gpib_info+0x1b6>
		eoi = '0';
    1556:	80 e3       	ldi	r24, 0x30	; 48
    1558:	8f 83       	std	Y+7, r24	; 0x07
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <gpib_info+0x1ba>
	else
		eoi = '1';
    155c:	81 e3       	ldi	r24, 0x31	; 49
    155e:	8f 83       	std	Y+7, r24	; 0x07
	if (atn == 0x00)
    1560:	8e 81       	ldd	r24, Y+6	; 0x06
    1562:	88 23       	and	r24, r24
    1564:	19 f4       	brne	.+6      	; 0x156c <gpib_info+0x1c6>
		atn = '0';
    1566:	80 e3       	ldi	r24, 0x30	; 48
    1568:	8e 83       	std	Y+6, r24	; 0x06
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <gpib_info+0x1ca>
	else
		atn = '1';
    156c:	81 e3       	ldi	r24, 0x31	; 49
    156e:	8e 83       	std	Y+6, r24	; 0x06
	if (srq == 0x00)
    1570:	8d 81       	ldd	r24, Y+5	; 0x05
    1572:	88 23       	and	r24, r24
    1574:	19 f4       	brne	.+6      	; 0x157c <gpib_info+0x1d6>
		srq = '0';
    1576:	80 e3       	ldi	r24, 0x30	; 48
    1578:	8d 83       	std	Y+5, r24	; 0x05
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <gpib_info+0x1da>
	else
		srq = '1';
    157c:	81 e3       	ldi	r24, 0x31	; 49
    157e:	8d 83       	std	Y+5, r24	; 0x05
	if (ifc == 0x00)
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
    1582:	88 23       	and	r24, r24
    1584:	19 f4       	brne	.+6      	; 0x158c <gpib_info+0x1e6>
		ifc = '0';
    1586:	80 e3       	ldi	r24, 0x30	; 48
    1588:	8c 83       	std	Y+4, r24	; 0x04
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <gpib_info+0x1ea>
	else
		ifc = '1';
    158c:	81 e3       	ldi	r24, 0x31	; 49
    158e:	8c 83       	std	Y+4, r24	; 0x04
	if (ren == 0x00)
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	88 23       	and	r24, r24
    1594:	19 f4       	brne	.+6      	; 0x159c <gpib_info+0x1f6>
		ren = '0';
    1596:	80 e3       	ldi	r24, 0x30	; 48
    1598:	8b 83       	std	Y+3, r24	; 0x03
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <gpib_info+0x1fa>
	else
		ren = '1';
    159c:	81 e3       	ldi	r24, 0x31	; 49
    159e:	8b 83       	std	Y+3, r24	; 0x03

	sprintf(buf,
    15a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    15a2:	a8 2e       	mov	r10, r24
    15a4:	bb 24       	eor	r11, r11
    15a6:	89 85       	ldd	r24, Y+9	; 0x09
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	88 85       	ldd	r24, Y+8	; 0x08
    15ae:	48 2f       	mov	r20, r24
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	8f 81       	ldd	r24, Y+7	; 0x07
    15b4:	68 2f       	mov	r22, r24
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ba:	a8 2f       	mov	r26, r24
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	08 2f       	mov	r16, r24
    15c2:	10 e0       	ldi	r17, 0x00	; 0
    15c4:	8e 81       	ldd	r24, Y+6	; 0x06
    15c6:	e8 2e       	mov	r14, r24
    15c8:	ff 24       	eor	r15, r15
    15ca:	8d 81       	ldd	r24, Y+5	; 0x05
    15cc:	c8 2e       	mov	r12, r24
    15ce:	dd 24       	eor	r13, r13
    15d0:	8d b7       	in	r24, 0x3d	; 61
    15d2:	9e b7       	in	r25, 0x3e	; 62
    15d4:	44 97       	sbiw	r24, 0x14	; 20
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	9e bf       	out	0x3e, r25	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	8d bf       	out	0x3d, r24	; 61
    15e0:	ed b7       	in	r30, 0x3d	; 61
    15e2:	fe b7       	in	r31, 0x3e	; 62
    15e4:	31 96       	adiw	r30, 0x01	; 1
    15e6:	82 ec       	ldi	r24, 0xC2	; 194
    15e8:	94 e0       	ldi	r25, 0x04	; 4
    15ea:	91 83       	std	Z+1, r25	; 0x01
    15ec:	80 83       	st	Z, r24
    15ee:	83 e0       	ldi	r24, 0x03	; 3
    15f0:	91 e0       	ldi	r25, 0x01	; 1
    15f2:	93 83       	std	Z+3, r25	; 0x03
    15f4:	82 83       	std	Z+2, r24	; 0x02
    15f6:	b5 82       	std	Z+5, r11	; 0x05
    15f8:	a4 82       	std	Z+4, r10	; 0x04
    15fa:	37 83       	std	Z+7, r19	; 0x07
    15fc:	26 83       	std	Z+6, r18	; 0x06
    15fe:	51 87       	std	Z+9, r21	; 0x09
    1600:	40 87       	std	Z+8, r20	; 0x08
    1602:	73 87       	std	Z+11, r23	; 0x0b
    1604:	62 87       	std	Z+10, r22	; 0x0a
    1606:	b5 87       	std	Z+13, r27	; 0x0d
    1608:	a4 87       	std	Z+12, r26	; 0x0c
    160a:	17 87       	std	Z+15, r17	; 0x0f
    160c:	06 87       	std	Z+14, r16	; 0x0e
    160e:	f1 8a       	std	Z+17, r15	; 0x11
    1610:	e0 8a       	std	Z+16, r14	; 0x10
    1612:	d3 8a       	std	Z+19, r13	; 0x13
    1614:	c2 8a       	std	Z+18, r12	; 0x12
    1616:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <sprintf>
    161a:	8d b7       	in	r24, 0x3d	; 61
    161c:	9e b7       	in	r25, 0x3e	; 62
    161e:	44 96       	adiw	r24, 0x14	; 20
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	9e bf       	out	0x3e, r25	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	8d bf       	out	0x3d, r24	; 61
			"dav=%c,nrfd=%c,ndac=%c, eoi=%c, ifc=%c,ren=%c,atn=%c,srq=%c\n\r",
			dav, nrfd, ndac, eoi, ifc, ren, atn, srq);
	uart_puts(buf);
    162a:	82 ec       	ldi	r24, 0xC2	; 194
    162c:	94 e0       	ldi	r25, 0x04	; 4
    162e:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>
}
    1632:	2a 96       	adiw	r28, 0x0a	; 10
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	ff 90       	pop	r15
    1648:	ef 90       	pop	r14
    164a:	df 90       	pop	r13
    164c:	cf 90       	pop	r12
    164e:	bf 90       	pop	r11
    1650:	af 90       	pop	r10
    1652:	08 95       	ret

00001654 <gpib_serial_poll>:
 * I haven't looked how a device with two byte address behaves.
 *
 * Secondary/primary is returned in inout parameters
 * If any emitter is found, return value is != 0.
 */
uchar gpib_serial_poll(uint8_t *primary_v, uint8_t* secondary_v) {
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	2c 97       	sbiw	r28, 0x0c	; 12
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	9a 87       	std	Y+10, r25	; 0x0a
    166a:	89 87       	std	Y+9, r24	; 0x09
    166c:	7c 87       	std	Y+12, r23	; 0x0c
    166e:	6b 87       	std	Y+11, r22	; 0x0b
	uchar b, e;
	uchar primary = 0, secondary = 0, found = 0, foundPhysical =
    1670:	1e 82       	std	Y+6, r1	; 0x06
    1672:	1d 82       	std	Y+5, r1	; 0x05
    1674:	1c 82       	std	Y+4, r1	; 0x04
	ADDRESS_NOT_SET;
    1676:	8f ef       	ldi	r24, 0xFF	; 255
    1678:	8b 83       	std	Y+3, r24	; 0x03
	int i;

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	cmd_buf[0] = G_CMD_UNT;
    167a:	8f e5       	ldi	r24, 0x5F	; 95
    167c:	80 93 5e 04 	sts	0x045E, r24
	gpib_cmd(cmd_buf, 1);
    1680:	8e e5       	ldi	r24, 0x5E	; 94
    1682:	94 e0       	ldi	r25, 0x04	; 4
    1684:	61 e0       	ldi	r22, 0x01	; 1
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>
	cmd_buf[0] = G_CMD_UNL;
    168c:	8f e3       	ldi	r24, 0x3F	; 63
    168e:	80 93 5e 04 	sts	0x045E, r24
	gpib_cmd(cmd_buf, 1);
    1692:	8e e5       	ldi	r24, 0x5E	; 94
    1694:	94 e0       	ldi	r25, 0x04	; 4
    1696:	61 e0       	ldi	r22, 0x01	; 1
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>

	// serial poll enable
	// effect: all devices will send status byte instead of normal data when addressed
	// as talker
	//uart_puts("before SPE\r\n");
	cmd_buf[0] = G_CMD_SPE;
    169e:	88 e1       	ldi	r24, 0x18	; 24
    16a0:	80 93 5e 04 	sts	0x045E, r24
	gpib_cmd(cmd_buf, 1);
    16a4:	8e e5       	ldi	r24, 0x5E	; 94
    16a6:	94 e0       	ldi	r25, 0x04	; 4
    16a8:	61 e0       	ldi	r22, 0x01	; 1
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    16b0:	1a 82       	std	Y+2, r1	; 0x02
    16b2:	19 82       	std	Y+1, r1	; 0x01
    16b4:	de c0       	rjmp	.+444    	; 0x1872 <gpib_serial_poll+0x21e>
			i++) {

		// set partner to talker mode
		primary = address2TalkerAddress(controller.partners[i].primary);
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	fc 01       	movw	r30, r24
    16c0:	e7 55       	subi	r30, 0x57	; 87
    16c2:	fc 4f       	sbci	r31, 0xFC	; 252
    16c4:	80 81       	ld	r24, Z
    16c6:	80 5c       	subi	r24, 0xC0	; 192
    16c8:	8e 83       	std	Y+6, r24	; 0x06
		secondary = secondaryAdressToAdressByte(
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	9a 81       	ldd	r25, Y+2	; 0x02
    16ce:	03 96       	adiw	r24, 0x03	; 3
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	fc 01       	movw	r30, r24
    16d6:	ec 55       	subi	r30, 0x5C	; 92
    16d8:	fc 4f       	sbci	r31, 0xFC	; 252
    16da:	80 81       	ld	r24, Z
    16dc:	80 66       	ori	r24, 0x60	; 96
    16de:	8d 83       	std	Y+5, r24	; 0x05
				controller.partners[i].secondary);

		cmd_buf[0] = primary;
    16e0:	8e 81       	ldd	r24, Y+6	; 0x06
    16e2:	80 93 5e 04 	sts	0x045E, r24
		//uart_puts("before talker address write\r\n");
		gpib_cmd(cmd_buf, 1);
    16e6:	8e e5       	ldi	r24, 0x5E	; 94
    16e8:	94 e0       	ldi	r25, 0x04	; 4
    16ea:	61 e0       	ldi	r22, 0x01	; 1
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>
		//uart_puts("after talker address write\r\n");
		// handle secondary address if required
		if (secondary != ADDRESS_NOT_SET) {
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	8f 3f       	cpi	r24, 0xFF	; 255
    16f6:	49 f0       	breq	.+18     	; 0x170a <gpib_serial_poll+0xb6>
			cmd_buf[0] = secondary;
    16f8:	8d 81       	ldd	r24, Y+5	; 0x05
    16fa:	80 93 5e 04 	sts	0x045E, r24
			//uart_puts("before talker address write\r\n");
			gpib_cmd(cmd_buf, 1);
    16fe:	8e e5       	ldi	r24, 0x5E	; 94
    1700:	94 e0       	ldi	r25, 0x04	; 4
    1702:	61 e0       	ldi	r22, 0x01	; 1
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>
		}

		// now receive data
		//uart_puts("before status byte receive\r\n");
		e = gpib_receive(&b);
    170a:	ce 01       	movw	r24, r28
    170c:	08 96       	adiw	r24, 0x08	; 8
    170e:	0e 94 2a 05 	call	0xa54	; 0xa54 <gpib_receive>
    1712:	8f 83       	std	Y+7, r24	; 0x07
		//uart_puts("after status byte receive\r\n");
		// status byte is now in b

		if (secondary != ADDRESS_NOT_SET) {
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
    1716:	8f 3f       	cpi	r24, 0xFF	; 255
    1718:	81 f1       	breq	.+96     	; 0x177a <gpib_serial_poll+0x126>
			sprintf((char*) cmd_buf,
    171a:	8e 81       	ldd	r24, Y+6	; 0x06
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	bc 01       	movw	r22, r24
    1722:	60 54       	subi	r22, 0x40	; 64
    1724:	70 40       	sbci	r23, 0x00	; 0
    1726:	8d 81       	ldd	r24, Y+5	; 0x05
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	88 85       	ldd	r24, Y+8	; 0x08
    172e:	48 2f       	mov	r20, r24
    1730:	50 e0       	ldi	r21, 0x00	; 0
    1732:	8d b7       	in	r24, 0x3d	; 61
    1734:	9e b7       	in	r25, 0x3e	; 62
    1736:	0a 97       	sbiw	r24, 0x0a	; 10
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	9e bf       	out	0x3e, r25	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	8d bf       	out	0x3d, r24	; 61
    1742:	ed b7       	in	r30, 0x3d	; 61
    1744:	fe b7       	in	r31, 0x3e	; 62
    1746:	31 96       	adiw	r30, 0x01	; 1
    1748:	8e e5       	ldi	r24, 0x5E	; 94
    174a:	94 e0       	ldi	r25, 0x04	; 4
    174c:	91 83       	std	Z+1, r25	; 0x01
    174e:	80 83       	st	Z, r24
    1750:	81 e4       	ldi	r24, 0x41	; 65
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	93 83       	std	Z+3, r25	; 0x03
    1756:	82 83       	std	Z+2, r24	; 0x02
    1758:	75 83       	std	Z+5, r23	; 0x05
    175a:	64 83       	std	Z+4, r22	; 0x04
    175c:	37 83       	std	Z+7, r19	; 0x07
    175e:	26 83       	std	Z+6, r18	; 0x06
    1760:	51 87       	std	Z+9, r21	; 0x09
    1762:	40 87       	std	Z+8, r20	; 0x08
    1764:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <sprintf>
    1768:	8d b7       	in	r24, 0x3d	; 61
    176a:	9e b7       	in	r25, 0x3e	; 62
    176c:	0a 96       	adiw	r24, 0x0a	; 10
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	9e bf       	out	0x3e, r25	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	8d bf       	out	0x3d, r24	; 61
    1778:	2a c0       	rjmp	.+84     	; 0x17ce <gpib_serial_poll+0x17a>
					"Status byte from device primary=0x%02x,secondary=0x%02x (physical) = 0x%02x\n\r",
					TalkerAddress2Address(primary), secondary, b);
		} else {
			sprintf((char*) cmd_buf,
    177a:	8e 81       	ldd	r24, Y+6	; 0x06
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	9c 01       	movw	r18, r24
    1782:	20 54       	subi	r18, 0x40	; 64
    1784:	30 40       	sbci	r19, 0x00	; 0
    1786:	88 85       	ldd	r24, Y+8	; 0x08
    1788:	48 2f       	mov	r20, r24
    178a:	50 e0       	ldi	r21, 0x00	; 0
    178c:	8d b7       	in	r24, 0x3d	; 61
    178e:	9e b7       	in	r25, 0x3e	; 62
    1790:	08 97       	sbiw	r24, 0x08	; 8
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	9e bf       	out	0x3e, r25	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	8d bf       	out	0x3d, r24	; 61
    179c:	ed b7       	in	r30, 0x3d	; 61
    179e:	fe b7       	in	r31, 0x3e	; 62
    17a0:	31 96       	adiw	r30, 0x01	; 1
    17a2:	8e e5       	ldi	r24, 0x5E	; 94
    17a4:	94 e0       	ldi	r25, 0x04	; 4
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	80 83       	st	Z, r24
    17aa:	8f e8       	ldi	r24, 0x8F	; 143
    17ac:	91 e0       	ldi	r25, 0x01	; 1
    17ae:	93 83       	std	Z+3, r25	; 0x03
    17b0:	82 83       	std	Z+2, r24	; 0x02
    17b2:	35 83       	std	Z+5, r19	; 0x05
    17b4:	24 83       	std	Z+4, r18	; 0x04
    17b6:	57 83       	std	Z+7, r21	; 0x07
    17b8:	46 83       	std	Z+6, r20	; 0x06
    17ba:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <sprintf>
    17be:	8d b7       	in	r24, 0x3d	; 61
    17c0:	9e b7       	in	r25, 0x3e	; 62
    17c2:	08 96       	adiw	r24, 0x08	; 8
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	9e bf       	out	0x3e, r25	; 62
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	8d bf       	out	0x3d, r24	; 61
					"Status byte from device primary=0x%02x (physical) = 0x%02x\n\r",
					TalkerAddress2Address(primary), b);
		}
		uart_puts((char*) cmd_buf);
    17ce:	8e e5       	ldi	r24, 0x5E	; 94
    17d0:	94 e0       	ldi	r25, 0x04	; 4
    17d2:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>

		// send UNT and UNL commands (unlisten and untalk)
		// effect: all talker stop talking and all listeners stop listening
		cmd_buf[0] = G_CMD_UNT;
    17d6:	8f e5       	ldi	r24, 0x5F	; 95
    17d8:	80 93 5e 04 	sts	0x045E, r24
		gpib_cmd(cmd_buf, 1);
    17dc:	8e e5       	ldi	r24, 0x5E	; 94
    17de:	94 e0       	ldi	r25, 0x04	; 4
    17e0:	61 e0       	ldi	r22, 0x01	; 1
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>
		cmd_buf[0] = G_CMD_UNL;
    17e8:	8f e3       	ldi	r24, 0x3F	; 63
    17ea:	80 93 5e 04 	sts	0x045E, r24
		gpib_cmd(cmd_buf, 1);
    17ee:	8e e5       	ldi	r24, 0x5E	; 94
    17f0:	94 e0       	ldi	r25, 0x04	; 4
    17f2:	61 e0       	ldi	r22, 0x01	; 1
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>

		if (b & (1 << 6)) {
    17fa:	88 85       	ldd	r24, Y+8	; 0x08
    17fc:	88 2f       	mov	r24, r24
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	80 74       	andi	r24, 0x40	; 64
    1802:	90 70       	andi	r25, 0x00	; 0
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	81 f1       	breq	.+96     	; 0x1868 <gpib_serial_poll+0x214>
			found = primary;
    1808:	8e 81       	ldd	r24, Y+6	; 0x06
    180a:	8c 83       	std	Y+4, r24	; 0x04
			foundPhysical = TalkerAddress2Address(found);
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	80 54       	subi	r24, 0x40	; 64
    1810:	8b 83       	std	Y+3, r24	; 0x03
			// bit 6 of status byte of SRQ emitter is 1
			// when reading status byte from emitter, he releases SRQ line (may also be tested here)
			sprintf((char*) cmd_buf,
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	48 2f       	mov	r20, r24
    181c:	50 e0       	ldi	r21, 0x00	; 0
    181e:	8d b7       	in	r24, 0x3d	; 61
    1820:	9e b7       	in	r25, 0x3e	; 62
    1822:	08 97       	sbiw	r24, 0x08	; 8
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	9e bf       	out	0x3e, r25	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	8d bf       	out	0x3d, r24	; 61
    182e:	ed b7       	in	r30, 0x3d	; 61
    1830:	fe b7       	in	r31, 0x3e	; 62
    1832:	31 96       	adiw	r30, 0x01	; 1
    1834:	8e e5       	ldi	r24, 0x5E	; 94
    1836:	94 e0       	ldi	r25, 0x04	; 4
    1838:	91 83       	std	Z+1, r25	; 0x01
    183a:	80 83       	st	Z, r24
    183c:	8c ec       	ldi	r24, 0xCC	; 204
    183e:	91 e0       	ldi	r25, 0x01	; 1
    1840:	93 83       	std	Z+3, r25	; 0x03
    1842:	82 83       	std	Z+2, r24	; 0x02
    1844:	35 83       	std	Z+5, r19	; 0x05
    1846:	24 83       	std	Z+4, r18	; 0x04
    1848:	57 83       	std	Z+7, r21	; 0x07
    184a:	46 83       	std	Z+6, r20	; 0x06
    184c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <sprintf>
    1850:	8d b7       	in	r24, 0x3d	; 61
    1852:	9e b7       	in	r25, 0x3e	; 62
    1854:	08 96       	adiw	r24, 0x08	; 8
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	9e bf       	out	0x3e, r25	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	8d bf       	out	0x3d, r24	; 61
					"SRQ emitter is device = 0x%02x (physical address), secondary = 0x%02x\n\r",
					foundPhysical, secondary);
			uart_puts((char*) cmd_buf);
    1860:	8e e5       	ldi	r24, 0x5E	; 94
    1862:	94 e0       	ldi	r25, 0x04	; 4
    1864:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>
	gpib_cmd(cmd_buf, 1);
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
			i++) {
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	9a 81       	ldd	r25, Y+2	; 0x02
    186c:	01 96       	adiw	r24, 0x01	; 1
    186e:	9a 83       	std	Y+2, r25	; 0x02
    1870:	89 83       	std	Y+1, r24	; 0x01
	cmd_buf[0] = G_CMD_SPE;
	gpib_cmd(cmd_buf, 1);
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	9a 81       	ldd	r25, Y+2	; 0x02
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	fc 01       	movw	r30, r24
    187c:	e7 55       	subi	r30, 0x57	; 87
    187e:	fc 4f       	sbci	r31, 0xFC	; 252
    1880:	80 81       	ld	r24, Z
    1882:	8f 3f       	cpi	r24, 0xFF	; 255
    1884:	21 f0       	breq	.+8      	; 0x188e <gpib_serial_poll+0x23a>
    1886:	8c 81       	ldd	r24, Y+4	; 0x04
    1888:	88 23       	and	r24, r24
    188a:	09 f4       	brne	.+2      	; 0x188e <gpib_serial_poll+0x23a>
    188c:	14 cf       	rjmp	.-472    	; 0x16b6 <gpib_serial_poll+0x62>
		}
	}

	// serial poll disable
	// effect: all devices will return to normal behaviour as talker
	cmd_buf[0] = G_CMD_SPD;
    188e:	89 e1       	ldi	r24, 0x19	; 25
    1890:	80 93 5e 04 	sts	0x045E, r24
	//uart_puts("before SPD\r\n");
	gpib_cmd(cmd_buf, 1);
    1894:	8e e5       	ldi	r24, 0x5E	; 94
    1896:	94 e0       	ldi	r25, 0x04	; 4
    1898:	61 e0       	ldi	r22, 0x01	; 1
    189a:	70 e0       	ldi	r23, 0x00	; 0
    189c:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>
	//uart_puts("after SPD\r\n");

	// "return" values determined
	*primary_v = primary;
    18a0:	e9 85       	ldd	r30, Y+9	; 0x09
    18a2:	fa 85       	ldd	r31, Y+10	; 0x0a
    18a4:	8e 81       	ldd	r24, Y+6	; 0x06
    18a6:	80 83       	st	Z, r24
	*secondary_v = secondary;
    18a8:	eb 85       	ldd	r30, Y+11	; 0x0b
    18aa:	fc 85       	ldd	r31, Y+12	; 0x0c
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	80 83       	st	Z, r24

	return found;
    18b0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    18b2:	2c 96       	adiw	r28, 0x0c	; 12
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <gpib_set_partner_address>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_address(uchar primary, uchar secondary) {
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <gpib_set_partner_address+0x6>
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	6a 83       	std	Y+2, r22	; 0x02
	controller.partner.primary = primary;
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	80 93 a5 03 	sts	0x03A5, r24
	controller.partner.secondary = secondary;
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	80 93 a6 03 	sts	0x03A6, r24
}
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	08 95       	ret

000018e8 <gpib_set_partner_secondary>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_secondary(uchar secondary) {
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	0f 92       	push	r0
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	89 83       	std	Y+1, r24	; 0x01
	controller.partner.secondary = secondary;
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	80 93 a6 03 	sts	0x03A6, r24
}
    18fa:	0f 90       	pop	r0
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <gpib_get_partner_pad>:

/**
 * Get primary address of device currently controlled.
 * \returns primary address Address of device.
 */
uchar gpib_get_partner_pad(void) {
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.primary;
    190a:	80 91 a5 03 	lds	r24, 0x03A5
}
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <gpib_get_partner_sad>:

/**
 * Get secondary address of device currently controlled.
 * \returns secondary address Address of device.
 */
uchar gpib_get_partner_sad(void) {
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.secondary;
    191c:	80 91 a6 03 	lds	r24, 0x03A6
}
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <gpib_get_address>:

/**
 * Get controller address.
 * \returns address of controller.
 */
uchar gpib_get_address(void) {
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
	return controller.myaddress;
    192e:	80 91 a4 03 	lds	r24, 0x03A4
}
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <gpib_set_flavour>:

void gpib_set_flavour(uchar flavour) {
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	0f 92       	push	r0
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	89 83       	std	Y+1, r24	; 0x01
	controller.flavour = flavour;
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	80 93 a8 03 	sts	0x03A8, r24
}
    194a:	0f 90       	pop	r0
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	08 95       	ret

00001952 <gpib_get_flavour>:

uchar gpib_get_flavour(void) {
    1952:	df 93       	push	r29
    1954:	cf 93       	push	r28
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
	return controller.flavour;
    195a:	80 91 a8 03 	lds	r24, 0x03A8
}
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <gpib_clear_partners>:

/**
 * Clear partners list
 */
void gpib_clear_partners() {
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	00 d0       	rcall	.+0      	; 0x196a <gpib_clear_partners+0x6>
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < MAX_PARTNER; i++) {
    196e:	1a 82       	std	Y+2, r1	; 0x02
    1970:	19 82       	std	Y+1, r1	; 0x01
    1972:	0e c0       	rjmp	.+28     	; 0x1990 <gpib_clear_partners+0x2c>
		controller.partners[i].primary = ADDRESS_NOT_SET;
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	9a 81       	ldd	r25, Y+2	; 0x02
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	fc 01       	movw	r30, r24
    197e:	e7 55       	subi	r30, 0x57	; 87
    1980:	fc 4f       	sbci	r31, 0xFC	; 252
    1982:	8f ef       	ldi	r24, 0xFF	; 255
    1984:	80 83       	st	Z, r24

/**
 * Clear partners list
 */
void gpib_clear_partners() {
	for (int i = 0; i < MAX_PARTNER; i++) {
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	9a 81       	ldd	r25, Y+2	; 0x02
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	9a 83       	std	Y+2, r25	; 0x02
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	9a 81       	ldd	r25, Y+2	; 0x02
    1994:	85 30       	cpi	r24, 0x05	; 5
    1996:	91 05       	cpc	r25, r1
    1998:	6c f3       	brlt	.-38     	; 0x1974 <gpib_clear_partners+0x10>
		controller.partners[i].primary = ADDRESS_NOT_SET;
	}
}
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <gpib_add_partner_address>:

/**
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <gpib_add_partner_address+0x6>
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <gpib_add_partner_address+0x8>
    19ac:	0f 92       	push	r0
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	8b 83       	std	Y+3, r24	; 0x03
    19b4:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    19b6:	1a 82       	std	Y+2, r1	; 0x02
    19b8:	19 82       	std	Y+1, r1	; 0x01
    19ba:	05 c0       	rjmp	.+10     	; 0x19c6 <gpib_add_partner_address+0x22>
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
			i++) {
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
    19c0:	01 96       	adiw	r24, 0x01	; 1
    19c2:	9a 83       	std	Y+2, r25	; 0x02
    19c4:	89 83       	std	Y+1, r24	; 0x01
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ca:	85 30       	cpi	r24, 0x05	; 5
    19cc:	91 05       	cpc	r25, r1
    19ce:	54 f4       	brge	.+20     	; 0x19e4 <gpib_add_partner_address+0x40>
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	9a 81       	ldd	r25, Y+2	; 0x02
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	fc 01       	movw	r30, r24
    19da:	e7 55       	subi	r30, 0x57	; 87
    19dc:	fc 4f       	sbci	r31, 0xFC	; 252
    19de:	80 81       	ld	r24, Z
    19e0:	8f 3f       	cpi	r24, 0xFF	; 255
    19e2:	61 f7       	brne	.-40     	; 0x19bc <gpib_add_partner_address+0x18>
			i++) {
	}
	if (i == MAX_PARTNER) {
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	9a 81       	ldd	r25, Y+2	; 0x02
    19e8:	85 30       	cpi	r24, 0x05	; 5
    19ea:	91 05       	cpc	r25, r1
    19ec:	39 f4       	brne	.+14     	; 0x19fc <gpib_add_partner_address+0x58>
		uart_puts("Too much partners.\n\r");
    19ee:	84 e1       	ldi	r24, 0x14	; 20
    19f0:	92 e0       	ldi	r25, 0x02	; 2
    19f2:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>
		return 1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	8d 83       	std	Y+5, r24	; 0x05
    19fa:	14 c0       	rjmp	.+40     	; 0x1a24 <gpib_add_partner_address+0x80>
	}
	controller.partners[i].primary = primary;
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	fc 01       	movw	r30, r24
    1a06:	e7 55       	subi	r30, 0x57	; 87
    1a08:	fc 4f       	sbci	r31, 0xFC	; 252
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	80 83       	st	Z, r24
	controller.partners[i].secondary = secondary;
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	9a 81       	ldd	r25, Y+2	; 0x02
    1a12:	03 96       	adiw	r24, 0x03	; 3
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	fc 01       	movw	r30, r24
    1a1a:	ec 55       	subi	r30, 0x5C	; 92
    1a1c:	fc 4f       	sbci	r31, 0xFC	; 252
    1a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a20:	80 83       	st	Z, r24
	return 0;
    1a22:	1d 82       	std	Y+5, r1	; 0x05
    1a24:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <gpib_remove_partner_address>:

/**
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <gpib_remove_partner_address+0x6>
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <gpib_remove_partner_address+0x8>
    1a3e:	0f 92       	push	r0
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	8b 83       	std	Y+3, r24	; 0x03
    1a46:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1a48:	1a 82       	std	Y+2, r1	; 0x02
    1a4a:	19 82       	std	Y+1, r1	; 0x01
    1a4c:	05 c0       	rjmp	.+10     	; 0x1a58 <gpib_remove_partner_address+0x22>
			i < MAX_PARTNER
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	9a 81       	ldd	r25, Y+2	; 0x02
    1a52:	01 96       	adiw	r24, 0x01	; 1
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5c:	85 30       	cpi	r24, 0x05	; 5
    1a5e:	91 05       	cpc	r25, r1
    1a60:	bc f4       	brge	.+46     	; 0x1a90 <gpib_remove_partner_address+0x5a>
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	9a 81       	ldd	r25, Y+2	; 0x02
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	e7 55       	subi	r30, 0x57	; 87
    1a6e:	fc 4f       	sbci	r31, 0xFC	; 252
    1a70:	90 81       	ld	r25, Z
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	98 17       	cp	r25, r24
    1a76:	59 f7       	brne	.-42     	; 0x1a4e <gpib_remove_partner_address+0x18>
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7c:	03 96       	adiw	r24, 0x03	; 3
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	fc 01       	movw	r30, r24
    1a84:	ec 55       	subi	r30, 0x5C	; 92
    1a86:	fc 4f       	sbci	r31, 0xFC	; 252
    1a88:	90 81       	ld	r25, Z
    1a8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8c:	98 17       	cp	r25, r24
    1a8e:	f9 f6       	brne	.-66     	; 0x1a4e <gpib_remove_partner_address+0x18>
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
	}
	if (i == MAX_PARTNER) {
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	9a 81       	ldd	r25, Y+2	; 0x02
    1a94:	85 30       	cpi	r24, 0x05	; 5
    1a96:	91 05       	cpc	r25, r1
    1a98:	39 f4       	brne	.+14     	; 0x1aa8 <gpib_remove_partner_address+0x72>
		uart_puts("Partner unknown.\n\r");
    1a9a:	89 e2       	ldi	r24, 0x29	; 41
    1a9c:	92 e0       	ldi	r25, 0x02	; 2
    1a9e:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>
		return 1;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	8d 83       	std	Y+5, r24	; 0x05
    1aa6:	14 c0       	rjmp	.+40     	; 0x1ad0 <gpib_remove_partner_address+0x9a>
	}
	controller.partners[i].primary = ADDRESS_NOT_SET;
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	e7 55       	subi	r30, 0x57	; 87
    1ab4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ab6:	8f ef       	ldi	r24, 0xFF	; 255
    1ab8:	80 83       	st	Z, r24
	controller.partners[i].secondary = ADDRESS_NOT_SET;
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	9a 81       	ldd	r25, Y+2	; 0x02
    1abe:	03 96       	adiw	r24, 0x03	; 3
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	ec 55       	subi	r30, 0x5C	; 92
    1ac8:	fc 4f       	sbci	r31, 0xFC	; 252
    1aca:	8f ef       	ldi	r24, 0xFF	; 255
    1acc:	80 83       	st	Z, r24
	return 0;
    1ace:	1d 82       	std	Y+5, r1	; 0x05
    1ad0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <stringToTwoUchars>:

/**
 * Read two integers from string like "45 56" or one integer. In latter case
 * the second integer is initialized with a special value.
 */
static void stringToTwoUchars(char *string, uchar *a, uchar *b) {
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	28 97       	sbiw	r28, 0x08	; 8
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	9c 83       	std	Y+4, r25	; 0x04
    1af8:	8b 83       	std	Y+3, r24	; 0x03
    1afa:	7e 83       	std	Y+6, r23	; 0x06
    1afc:	6d 83       	std	Y+5, r22	; 0x05
    1afe:	58 87       	std	Y+8, r21	; 0x08
    1b00:	4f 83       	std	Y+7, r20	; 0x07
	char *token = strtok(string, " ");
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	9c 81       	ldd	r25, Y+4	; 0x04
    1b06:	2c e3       	ldi	r18, 0x3C	; 60
    1b08:	32 e0       	ldi	r19, 0x02	; 2
    1b0a:	b9 01       	movw	r22, r18
    1b0c:	0e 94 a8 01 	call	0x350	; 0x350 <strtok>
    1b10:	9a 83       	std	Y+2, r25	; 0x02
    1b12:	89 83       	std	Y+1, r24	; 0x01
	*a = atoi((char*) token);
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
    1b18:	0e 94 8a 01 	call	0x314	; 0x314 <atoi>
    1b1c:	ed 81       	ldd	r30, Y+5	; 0x05
    1b1e:	fe 81       	ldd	r31, Y+6	; 0x06
    1b20:	80 83       	st	Z, r24
	token = strtok(NULL, " ");
    1b22:	2c e3       	ldi	r18, 0x3C	; 60
    1b24:	32 e0       	ldi	r19, 0x02	; 2
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	b9 01       	movw	r22, r18
    1b2c:	0e 94 a8 01 	call	0x350	; 0x350 <strtok>
    1b30:	9a 83       	std	Y+2, r25	; 0x02
    1b32:	89 83       	std	Y+1, r24	; 0x01
	if (token != NULL) {
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	9a 81       	ldd	r25, Y+2	; 0x02
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	41 f0       	breq	.+16     	; 0x1b4c <stringToTwoUchars+0x6a>
		*b = atoi((char*) token);
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b40:	0e 94 8a 01 	call	0x314	; 0x314 <atoi>
    1b44:	ef 81       	ldd	r30, Y+7	; 0x07
    1b46:	f8 85       	ldd	r31, Y+8	; 0x08
    1b48:	80 83       	st	Z, r24
    1b4a:	04 c0       	rjmp	.+8      	; 0x1b54 <stringToTwoUchars+0x72>
	} else {
		*b = ADDRESS_NOT_SET;
    1b4c:	ef 81       	ldd	r30, Y+7	; 0x07
    1b4e:	f8 85       	ldd	r31, Y+8	; 0x08
    1b50:	8f ef       	ldi	r24, 0xFF	; 255
    1b52:	80 83       	st	Z, r24
	}
}
    1b54:	28 96       	adiw	r28, 0x08	; 8
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	cd bf       	out	0x3d, r28	; 61
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <check_errors>:
 *
 * Reads error queue first entry.
 * TODO: read complete queue in while loop.
 *
 */
void check_errors() {
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <check_errors+0x6>
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
	char *error_cmd = "SYST:ERR?";
    1b70:	8e e3       	ldi	r24, 0x3E	; 62
    1b72:	92 e0       	ldi	r25, 0x02	; 2
    1b74:	9a 83       	std	Y+2, r25	; 0x02
    1b76:	89 83       	std	Y+1, r24	; 0x01
	send_command(error_cmd, SEND_FULL_CMD);
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7c:	62 e0       	ldi	r22, 0x02	; 2
    1b7e:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <send_command>
	receiveAnswer();
    1b82:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <receiveAnswer>
}
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <input_char>:

/**
 * Reads in character into parameter c. Checks for errors and prints them out.
 * Returns 0 if there is no char to read, 1 if there was a char read in.
 */
uchar input_char(uchar *ch) {
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <input_char+0x6>
    1b96:	00 d0       	rcall	.+0      	; 0x1b98 <input_char+0x8>
    1b98:	0f 92       	push	r0
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	9c 83       	std	Y+4, r25	; 0x04
    1ba0:	8b 83       	std	Y+3, r24	; 0x03
	 * uart_getc() returns in the lower byte the received character and
	 * in the higher byte (bitmask) the last receive error
	 * UART_NO_DATA is returned when no data is available.
	 *
	 */
	c = uart_getc();
    1ba2:	0e 94 7e 14 	call	0x28fc	; 0x28fc <uart_getc>
    1ba6:	9a 83       	std	Y+2, r25	; 0x02
    1ba8:	89 83       	std	Y+1, r24	; 0x01
	if (c & UART_NO_DATA) {
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	9a 81       	ldd	r25, Y+2	; 0x02
    1bae:	80 70       	andi	r24, 0x00	; 0
    1bb0:	91 70       	andi	r25, 0x01	; 1
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	11 f0       	breq	.+4      	; 0x1bba <input_char+0x2a>
		// no data available from UART
		return 0;
    1bb6:	1d 82       	std	Y+5, r1	; 0x05
    1bb8:	24 c0       	rjmp	.+72     	; 0x1c02 <input_char+0x72>
	}
	// make uchar from character in int value
	*ch = (uchar) c;
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	eb 81       	ldd	r30, Y+3	; 0x03
    1bbe:	fc 81       	ldd	r31, Y+4	; 0x04
    1bc0:	80 83       	st	Z, r24

	/*
	 * new data available from UART
	 * check for Frame or Overrun error
	 */
	if (c & UART_FRAME_ERROR) {
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	80 70       	andi	r24, 0x00	; 0
    1bc8:	98 70       	andi	r25, 0x08	; 8
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	21 f0       	breq	.+8      	; 0x1bd6 <input_char+0x46>
		/* Framing Error detected, i.e no stop bit detected */
		uart_puts_P("UART Frame Error: ");
    1bce:	81 e8       	ldi	r24, 0x81	; 129
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
	}
	if (c & UART_OVERRUN_ERROR) {
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bda:	80 70       	andi	r24, 0x00	; 0
    1bdc:	94 70       	andi	r25, 0x04	; 4
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	21 f0       	breq	.+8      	; 0x1bea <input_char+0x5a>
		/*
		 * Overrun, a character already present in the UART UDR register was
		 * not read by the interrupt handler before the next character arrived,
		 * one or more received characters have been dropped
		 */
		uart_puts_P("UART Overrun Error: ");
    1be2:	8c e6       	ldi	r24, 0x6C	; 108
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
	}
	if (c & UART_BUFFER_OVERFLOW) {
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	9a 81       	ldd	r25, Y+2	; 0x02
    1bee:	80 70       	andi	r24, 0x00	; 0
    1bf0:	92 70       	andi	r25, 0x02	; 2
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	21 f0       	breq	.+8      	; 0x1bfe <input_char+0x6e>
		/*
		 * We are not reading the receive buffer fast enough,
		 * one or more received character have been dropped
		 */
		uart_puts_P("Buffer overflow error: ");
    1bf6:	84 e5       	ldi	r24, 0x54	; 84
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
	}
	return 1;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	8d 83       	std	Y+5, r24	; 0x05
    1c02:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <process_char>:
 * a) xon/xoff mode forward buffer to GPIB
 * b) no flow control: prints error message that input buffer is full.
 *
 * Returns 1 if command end is detected, 0 otherwise.
 */
uchar process_char(uchar ch) {
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <process_char+0x6>
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	8a 83       	std	Y+2, r24	; 0x02
	uchar ret = 0;
    1c20:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * send received character back depending on global flag
	 */
	if (rs232_remote_echo) {
    1c22:	80 91 9d 03 	lds	r24, 0x039D
    1c26:	88 23       	and	r24, r24
    1c28:	19 f0       	breq	.+6      	; 0x1c30 <process_char+0x1c>
		uart_putc((unsigned char) ch);
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <uart_putc>
	}

	// if input buffer is not full, add char
	if (buf_ptr < COMMAND_INPUT_BUFFER_SIZE - 1) {
    1c30:	80 91 b3 03 	lds	r24, 0x03B3
    1c34:	90 91 b4 03 	lds	r25, 0x03B4
    1c38:	8f 34       	cpi	r24, 0x4F	; 79
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	bc f4       	brge	.+46     	; 0x1c6c <process_char+0x58>
		buf[buf_ptr++] = ch;
    1c3e:	20 91 b3 03 	lds	r18, 0x03B3
    1c42:	30 91 b4 03 	lds	r19, 0x03B4
    1c46:	f9 01       	movw	r30, r18
    1c48:	ee 53       	subi	r30, 0x3E	; 62
    1c4a:	fb 4f       	sbci	r31, 0xFB	; 251
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	80 83       	st	Z, r24
    1c50:	c9 01       	movw	r24, r18
    1c52:	01 96       	adiw	r24, 0x01	; 1
    1c54:	90 93 b4 03 	sts	0x03B4, r25
    1c58:	80 93 b3 03 	sts	0x03B3, r24
		buf[buf_ptr] = '\0';
    1c5c:	80 91 b3 03 	lds	r24, 0x03B3
    1c60:	90 91 b4 03 	lds	r25, 0x03B4
    1c64:	fc 01       	movw	r30, r24
    1c66:	ee 53       	subi	r30, 0x3E	; 62
    1c68:	fb 4f       	sbci	r31, 0xFB	; 251
    1c6a:	10 82       	st	Z, r1
	}

	// if command ends or buffer is full ...
	if (ch == ASCII_CODE_CR || buf_ptr >= COMMAND_INPUT_BUFFER_SIZE - 1) {
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	8d 30       	cpi	r24, 0x0D	; 13
    1c70:	39 f0       	breq	.+14     	; 0x1c80 <process_char+0x6c>
    1c72:	80 91 b3 03 	lds	r24, 0x03B3
    1c76:	90 91 b4 03 	lds	r25, 0x03B4
    1c7a:	8f 34       	cpi	r24, 0x4F	; 79
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	6c f1       	brlt	.+90     	; 0x1cda <process_char+0xc6>

		if (ch == ASCII_CODE_CR) {
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	8d 30       	cpi	r24, 0x0D	; 13
    1c84:	a1 f4       	brne	.+40     	; 0x1cae <process_char+0x9a>
			// adjust string terminator
			buf[--buf_ptr] = '\0';
    1c86:	80 91 b3 03 	lds	r24, 0x03B3
    1c8a:	90 91 b4 03 	lds	r25, 0x03B4
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	90 93 b4 03 	sts	0x03B4, r25
    1c94:	80 93 b3 03 	sts	0x03B3, r24
    1c98:	80 91 b3 03 	lds	r24, 0x03B3
    1c9c:	90 91 b4 03 	lds	r25, 0x03B4
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	ee 53       	subi	r30, 0x3E	; 62
    1ca4:	fb 4f       	sbci	r31, 0xFB	; 251
    1ca6:	10 82       	st	Z, r1
			// let calling function send last command part (or command itself)
			ret = 1;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	16 c0       	rjmp	.+44     	; 0x1cda <process_char+0xc6>
		} else {
			if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
    1cae:	0e 94 78 13 	call	0x26f0	; 0x26f0 <uart_get_flow_control>
    1cb2:	81 30       	cpi	r24, 0x01	; 1
    1cb4:	51 f4       	brne	.+20     	; 0x1cca <process_char+0xb6>
				// send intermediate part of command.
				send_command(buf, SEND_PART);
    1cb6:	82 ec       	ldi	r24, 0xC2	; 194
    1cb8:	94 e0       	ldi	r25, 0x04	; 4
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <send_command>
				buf_ptr = 0;
    1cc0:	10 92 b4 03 	sts	0x03B4, r1
    1cc4:	10 92 b3 03 	sts	0x03B3, r1
    1cc8:	08 c0       	rjmp	.+16     	; 0x1cda <process_char+0xc6>
			} else {
				// send intermediate part of command.
				uart_puts_P("Command overflow.");
    1cca:	84 e9       	ldi	r24, 0x94	; 148
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
				buf_ptr = 0;
    1cd2:	10 92 b4 03 	sts	0x03B4, r1
    1cd6:	10 92 b3 03 	sts	0x03B3, r1
			}
		}
	}
	return ret;
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	08 95       	ret

00001ce6 <input_process>:
 * This approach handles small single line commands (needing no flow control) and large
 * multi-line commands if flow control is xon/xoff.
 *
 * \returns The character read in
 */
uchar input_process(void) {
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <input_process+0x6>
    1cec:	0f 92       	push	r0
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
	uchar ch, ret = 0;
    1cf2:	19 82       	std	Y+1, r1	; 0x01

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
    1cf4:	0e 94 78 13 	call	0x26f0	; 0x26f0 <uart_get_flow_control>
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	89 f4       	brne	.+34     	; 0x1d1e <input_process+0x38>
    1cfc:	0c c0       	rjmp	.+24     	; 0x1d16 <input_process+0x30>
		while (!ret) {
			// if nothing can be read in, return
			if (!input_char(&ch)) {
    1cfe:	ce 01       	movw	r24, r28
    1d00:	02 96       	adiw	r24, 0x02	; 2
    1d02:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <input_char>
    1d06:	88 23       	and	r24, r24
    1d08:	11 f4       	brne	.+4      	; 0x1d0e <input_process+0x28>
				return 0;
    1d0a:	1b 82       	std	Y+3, r1	; 0x03
    1d0c:	16 c0       	rjmp	.+44     	; 0x1d3a <input_process+0x54>
			}
			ret = process_char(ch);
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <process_char>
    1d14:	89 83       	std	Y+1, r24	; 0x01
 */
uchar input_process(void) {
	uchar ch, ret = 0;

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
		while (!ret) {
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	88 23       	and	r24, r24
    1d1a:	89 f3       	breq	.-30     	; 0x1cfe <input_process+0x18>
    1d1c:	0c c0       	rjmp	.+24     	; 0x1d36 <input_process+0x50>
			}
			ret = process_char(ch);
		}
	} else {
		// if nothing can be read in, return
		if (!input_char(&ch)) {
    1d1e:	ce 01       	movw	r24, r28
    1d20:	02 96       	adiw	r24, 0x02	; 2
    1d22:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <input_char>
    1d26:	88 23       	and	r24, r24
    1d28:	11 f4       	brne	.+4      	; 0x1d2e <input_process+0x48>
			return 0;
    1d2a:	1b 82       	std	Y+3, r1	; 0x03
    1d2c:	06 c0       	rjmp	.+12     	; 0x1d3a <input_process+0x54>
		}
		ret = process_char(ch);
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <process_char>
    1d34:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	8b 83       	std	Y+3, r24	; 0x03
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <handle_internal_commands>:

/**
 * Handles builtin commands.
 */
void handle_internal_commands(uchar *commandString) {
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <handle_internal_commands+0x6>
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <handle_internal_commands+0x8>
    1d50:	00 d0       	rcall	.+0      	; 0x1d52 <handle_internal_commands+0xa>
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	9c 83       	std	Y+4, r25	; 0x04
    1d58:	8b 83       	std	Y+3, r24	; 0x03
	uchar val, val1;

	switch (buf[1]) {
    1d5a:	80 91 c3 04 	lds	r24, 0x04C3
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	3e 83       	std	Y+6, r19	; 0x06
    1d64:	2d 83       	std	Y+5, r18	; 0x05
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	88 36       	cpi	r24, 0x68	; 104
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <handle_internal_commands+0x2a>
    1d70:	30 c1       	rjmp	.+608    	; 0x1fd2 <handle_internal_commands+0x28a>
    1d72:	2d 81       	ldd	r18, Y+5	; 0x05
    1d74:	3e 81       	ldd	r19, Y+6	; 0x06
    1d76:	29 36       	cpi	r18, 0x69	; 105
    1d78:	31 05       	cpc	r19, r1
    1d7a:	f4 f4       	brge	.+60     	; 0x1db8 <handle_internal_commands+0x70>
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d80:	81 36       	cpi	r24, 0x61	; 97
    1d82:	91 05       	cpc	r25, r1
    1d84:	61 f1       	breq	.+88     	; 0x1dde <handle_internal_commands+0x96>
    1d86:	2d 81       	ldd	r18, Y+5	; 0x05
    1d88:	3e 81       	ldd	r19, Y+6	; 0x06
    1d8a:	22 36       	cpi	r18, 0x62	; 98
    1d8c:	31 05       	cpc	r19, r1
    1d8e:	6c f4       	brge	.+26     	; 0x1daa <handle_internal_commands+0x62>
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	9e 81       	ldd	r25, Y+6	; 0x06
    1d94:	8b 32       	cpi	r24, 0x2B	; 43
    1d96:	91 05       	cpc	r25, r1
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <handle_internal_commands+0x54>
    1d9a:	88 c0       	rjmp	.+272    	; 0x1eac <handle_internal_commands+0x164>
    1d9c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d9e:	3e 81       	ldd	r19, Y+6	; 0x06
    1da0:	2d 32       	cpi	r18, 0x2D	; 45
    1da2:	31 05       	cpc	r19, r1
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <handle_internal_commands+0x60>
    1da6:	bf c0       	rjmp	.+382    	; 0x1f26 <handle_internal_commands+0x1de>
    1da8:	43 c1       	rjmp	.+646    	; 0x2030 <handle_internal_commands+0x2e8>
    1daa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dac:	9e 81       	ldd	r25, Y+6	; 0x06
    1dae:	85 36       	cpi	r24, 0x65	; 101
    1db0:	91 05       	cpc	r25, r1
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <handle_internal_commands+0x6e>
    1db4:	36 c1       	rjmp	.+620    	; 0x2022 <handle_internal_commands+0x2da>
    1db6:	3c c1       	rjmp	.+632    	; 0x2030 <handle_internal_commands+0x2e8>
    1db8:	2d 81       	ldd	r18, Y+5	; 0x05
    1dba:	3e 81       	ldd	r19, Y+6	; 0x06
    1dbc:	23 37       	cpi	r18, 0x73	; 115
    1dbe:	31 05       	cpc	r19, r1
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <handle_internal_commands+0x7c>
    1dc2:	4a c0       	rjmp	.+148    	; 0x1e58 <handle_internal_commands+0x110>
    1dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc8:	88 37       	cpi	r24, 0x78	; 120
    1dca:	91 05       	cpc	r25, r1
    1dcc:	09 f4       	brne	.+2      	; 0x1dd0 <handle_internal_commands+0x88>
    1dce:	e8 c0       	rjmp	.+464    	; 0x1fa0 <handle_internal_commands+0x258>
    1dd0:	2d 81       	ldd	r18, Y+5	; 0x05
    1dd2:	3e 81       	ldd	r19, Y+6	; 0x06
    1dd4:	29 36       	cpi	r18, 0x69	; 105
    1dd6:	31 05       	cpc	r19, r1
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <handle_internal_commands+0x94>
    1dda:	fe c0       	rjmp	.+508    	; 0x1fd8 <handle_internal_commands+0x290>
    1ddc:	29 c1       	rjmp	.+594    	; 0x2030 <handle_internal_commands+0x2e8>
	case 'a':
		/* set partner primary+secondary address */
		stringToTwoUchars((char*) (&(buf[2])), &val, &val1);
    1dde:	84 ec       	ldi	r24, 0xC4	; 196
    1de0:	94 e0       	ldi	r25, 0x04	; 4
    1de2:	ae 01       	movw	r20, r28
    1de4:	4e 5f       	subi	r20, 0xFE	; 254
    1de6:	5f 4f       	sbci	r21, 0xFF	; 255
    1de8:	9e 01       	movw	r18, r28
    1dea:	2f 5f       	subi	r18, 0xFF	; 255
    1dec:	3f 4f       	sbci	r19, 0xFF	; 255
    1dee:	b9 01       	movw	r22, r18
    1df0:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <stringToTwoUchars>
		sprintf(buf, "Set partner address, primary: %u , secondary: %u\n\r",
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	48 2f       	mov	r20, r24
    1dfe:	50 e0       	ldi	r21, 0x00	; 0
    1e00:	8d b7       	in	r24, 0x3d	; 61
    1e02:	9e b7       	in	r25, 0x3e	; 62
    1e04:	08 97       	sbiw	r24, 0x08	; 8
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	9e bf       	out	0x3e, r25	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	8d bf       	out	0x3d, r24	; 61
    1e10:	ed b7       	in	r30, 0x3d	; 61
    1e12:	fe b7       	in	r31, 0x3e	; 62
    1e14:	31 96       	adiw	r30, 0x01	; 1
    1e16:	82 ec       	ldi	r24, 0xC2	; 194
    1e18:	94 e0       	ldi	r25, 0x04	; 4
    1e1a:	91 83       	std	Z+1, r25	; 0x01
    1e1c:	80 83       	st	Z, r24
    1e1e:	88 e4       	ldi	r24, 0x48	; 72
    1e20:	92 e0       	ldi	r25, 0x02	; 2
    1e22:	93 83       	std	Z+3, r25	; 0x03
    1e24:	82 83       	std	Z+2, r24	; 0x02
    1e26:	35 83       	std	Z+5, r19	; 0x05
    1e28:	24 83       	std	Z+4, r18	; 0x04
    1e2a:	57 83       	std	Z+7, r21	; 0x07
    1e2c:	46 83       	std	Z+6, r20	; 0x06
    1e2e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <sprintf>
    1e32:	2d b7       	in	r18, 0x3d	; 61
    1e34:	3e b7       	in	r19, 0x3e	; 62
    1e36:	28 5f       	subi	r18, 0xF8	; 248
    1e38:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	3e bf       	out	0x3e, r19	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	2d bf       	out	0x3d, r18	; 61
				val, val1);
		uart_puts(buf);
    1e44:	82 ec       	ldi	r24, 0xC2	; 194
    1e46:	94 e0       	ldi	r25, 0x04	; 4
    1e48:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>
		gpib_set_partner_address(val, val1);
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e50:	69 2f       	mov	r22, r25
    1e52:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <gpib_set_partner_address>
    1e56:	f2 c0       	rjmp	.+484    	; 0x203c <handle_internal_commands+0x2f4>
		break;
	case 's':
		/* set partner secondary address */
		val = atoi((char*) (&(buf[2])));
    1e58:	84 ec       	ldi	r24, 0xC4	; 196
    1e5a:	94 e0       	ldi	r25, 0x04	; 4
    1e5c:	0e 94 8a 01 	call	0x314	; 0x314 <atoi>
    1e60:	89 83       	std	Y+1, r24	; 0x01
		sprintf(buf, "Set partner secondary address to %u\n\r", val);
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <handle_internal_commands+0x122>
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <handle_internal_commands+0x124>
    1e6c:	00 d0       	rcall	.+0      	; 0x1e6e <handle_internal_commands+0x126>
    1e6e:	ed b7       	in	r30, 0x3d	; 61
    1e70:	fe b7       	in	r31, 0x3e	; 62
    1e72:	31 96       	adiw	r30, 0x01	; 1
    1e74:	82 ec       	ldi	r24, 0xC2	; 194
    1e76:	94 e0       	ldi	r25, 0x04	; 4
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	80 83       	st	Z, r24
    1e7c:	8b e7       	ldi	r24, 0x7B	; 123
    1e7e:	92 e0       	ldi	r25, 0x02	; 2
    1e80:	93 83       	std	Z+3, r25	; 0x03
    1e82:	82 83       	std	Z+2, r24	; 0x02
    1e84:	35 83       	std	Z+5, r19	; 0x05
    1e86:	24 83       	std	Z+4, r18	; 0x04
    1e88:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <sprintf>
    1e8c:	8d b7       	in	r24, 0x3d	; 61
    1e8e:	9e b7       	in	r25, 0x3e	; 62
    1e90:	06 96       	adiw	r24, 0x06	; 6
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	9e bf       	out	0x3e, r25	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	8d bf       	out	0x3d, r24	; 61
		uart_puts(buf);
    1e9c:	82 ec       	ldi	r24, 0xC2	; 194
    1e9e:	94 e0       	ldi	r25, 0x04	; 4
    1ea0:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>
		gpib_set_partner_secondary(val);
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <gpib_set_partner_secondary>
    1eaa:	c8 c0       	rjmp	.+400    	; 0x203c <handle_internal_commands+0x2f4>
		break;
	case '+':
		/* add device */
		stringToTwoUchars((char*) (&(buf[2])), &val, &val1);
    1eac:	84 ec       	ldi	r24, 0xC4	; 196
    1eae:	94 e0       	ldi	r25, 0x04	; 4
    1eb0:	ae 01       	movw	r20, r28
    1eb2:	4e 5f       	subi	r20, 0xFE	; 254
    1eb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb6:	9e 01       	movw	r18, r28
    1eb8:	2f 5f       	subi	r18, 0xFF	; 255
    1eba:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebc:	b9 01       	movw	r22, r18
    1ebe:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <stringToTwoUchars>
		sprintf(buf, "Add device, primary: %u , secondary: %u\n\r", val, val1);
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	48 2f       	mov	r20, r24
    1ecc:	50 e0       	ldi	r21, 0x00	; 0
    1ece:	8d b7       	in	r24, 0x3d	; 61
    1ed0:	9e b7       	in	r25, 0x3e	; 62
    1ed2:	08 97       	sbiw	r24, 0x08	; 8
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	9e bf       	out	0x3e, r25	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	8d bf       	out	0x3d, r24	; 61
    1ede:	ed b7       	in	r30, 0x3d	; 61
    1ee0:	fe b7       	in	r31, 0x3e	; 62
    1ee2:	31 96       	adiw	r30, 0x01	; 1
    1ee4:	82 ec       	ldi	r24, 0xC2	; 194
    1ee6:	94 e0       	ldi	r25, 0x04	; 4
    1ee8:	91 83       	std	Z+1, r25	; 0x01
    1eea:	80 83       	st	Z, r24
    1eec:	81 ea       	ldi	r24, 0xA1	; 161
    1eee:	92 e0       	ldi	r25, 0x02	; 2
    1ef0:	93 83       	std	Z+3, r25	; 0x03
    1ef2:	82 83       	std	Z+2, r24	; 0x02
    1ef4:	35 83       	std	Z+5, r19	; 0x05
    1ef6:	24 83       	std	Z+4, r18	; 0x04
    1ef8:	57 83       	std	Z+7, r21	; 0x07
    1efa:	46 83       	std	Z+6, r20	; 0x06
    1efc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <sprintf>
    1f00:	2d b7       	in	r18, 0x3d	; 61
    1f02:	3e b7       	in	r19, 0x3e	; 62
    1f04:	28 5f       	subi	r18, 0xF8	; 248
    1f06:	3f 4f       	sbci	r19, 0xFF	; 255
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	3e bf       	out	0x3e, r19	; 62
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	2d bf       	out	0x3d, r18	; 61
		uart_puts(buf);
    1f12:	82 ec       	ldi	r24, 0xC2	; 194
    1f14:	94 e0       	ldi	r25, 0x04	; 4
    1f16:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>
		gpib_add_partner_address(val, val1);
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1e:	69 2f       	mov	r22, r25
    1f20:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <gpib_add_partner_address>
    1f24:	8b c0       	rjmp	.+278    	; 0x203c <handle_internal_commands+0x2f4>
		break;
	case '-':
		/* add device */
		stringToTwoUchars((char*) (&(buf[2])), &val, &val1);
    1f26:	84 ec       	ldi	r24, 0xC4	; 196
    1f28:	94 e0       	ldi	r25, 0x04	; 4
    1f2a:	ae 01       	movw	r20, r28
    1f2c:	4e 5f       	subi	r20, 0xFE	; 254
    1f2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f30:	9e 01       	movw	r18, r28
    1f32:	2f 5f       	subi	r18, 0xFF	; 255
    1f34:	3f 4f       	sbci	r19, 0xFF	; 255
    1f36:	b9 01       	movw	r22, r18
    1f38:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <stringToTwoUchars>
		sprintf(buf, "Remove device, primary: %u , secondary: %u\n\r", val,
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	48 2f       	mov	r20, r24
    1f46:	50 e0       	ldi	r21, 0x00	; 0
    1f48:	8d b7       	in	r24, 0x3d	; 61
    1f4a:	9e b7       	in	r25, 0x3e	; 62
    1f4c:	08 97       	sbiw	r24, 0x08	; 8
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	9e bf       	out	0x3e, r25	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	8d bf       	out	0x3d, r24	; 61
    1f58:	ed b7       	in	r30, 0x3d	; 61
    1f5a:	fe b7       	in	r31, 0x3e	; 62
    1f5c:	31 96       	adiw	r30, 0x01	; 1
    1f5e:	82 ec       	ldi	r24, 0xC2	; 194
    1f60:	94 e0       	ldi	r25, 0x04	; 4
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	80 83       	st	Z, r24
    1f66:	8b ec       	ldi	r24, 0xCB	; 203
    1f68:	92 e0       	ldi	r25, 0x02	; 2
    1f6a:	93 83       	std	Z+3, r25	; 0x03
    1f6c:	82 83       	std	Z+2, r24	; 0x02
    1f6e:	35 83       	std	Z+5, r19	; 0x05
    1f70:	24 83       	std	Z+4, r18	; 0x04
    1f72:	57 83       	std	Z+7, r21	; 0x07
    1f74:	46 83       	std	Z+6, r20	; 0x06
    1f76:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <sprintf>
    1f7a:	2d b7       	in	r18, 0x3d	; 61
    1f7c:	3e b7       	in	r19, 0x3e	; 62
    1f7e:	28 5f       	subi	r18, 0xF8	; 248
    1f80:	3f 4f       	sbci	r19, 0xFF	; 255
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	3e bf       	out	0x3e, r19	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	2d bf       	out	0x3d, r18	; 61
				val1);
		uart_puts(buf);
    1f8c:	82 ec       	ldi	r24, 0xC2	; 194
    1f8e:	94 e0       	ldi	r25, 0x04	; 4
    1f90:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>
		gpib_remove_partner_address(val, val1);
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	9a 81       	ldd	r25, Y+2	; 0x02
    1f98:	69 2f       	mov	r22, r25
    1f9a:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <gpib_remove_partner_address>
    1f9e:	4e c0       	rjmp	.+156    	; 0x203c <handle_internal_commands+0x2f4>
		break;
	case 'x':
		/* Xon/Xoff flow control */
		if (!xonXoffMode) {
    1fa0:	80 91 9e 03 	lds	r24, 0x039E
    1fa4:	88 23       	and	r24, r24
    1fa6:	59 f4       	brne	.+22     	; 0x1fbe <handle_internal_commands+0x276>
			xonXoffMode = 1;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	80 93 9e 03 	sts	0x039E, r24
			uart_set_flow_control(FLOWCONTROL_XONXOFF);
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol on\n\r");
    1fb4:	82 ee       	ldi	r24, 0xE2	; 226
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
    1fbc:	3f c0       	rjmp	.+126    	; 0x203c <handle_internal_commands+0x2f4>
		} else {
			xonXoffMode = 0;
    1fbe:	10 92 9e 03 	sts	0x039E, r1
			uart_set_flow_control(FLOWCONTROL_NONE);
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol off\n\r");
    1fc8:	87 ec       	ldi	r24, 0xC7	; 199
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
    1fd0:	35 c0       	rjmp	.+106    	; 0x203c <handle_internal_commands+0x2f4>
		}
		break;
	case 'h':
		/* print some usage infos */
		printHelp();
    1fd2:	0e 94 cf 11 	call	0x239e	; 0x239e <printHelp>
    1fd6:	32 c0       	rjmp	.+100    	; 0x203c <handle_internal_commands+0x2f4>
		break;
	case 'i':
		gpib_info();
    1fd8:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <gpib_info>
		sprintf(buf, "Xon/Xoff flow control: %u\n\r", xonXoffMode);
    1fdc:	80 91 9e 03 	lds	r24, 0x039E
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <handle_internal_commands+0x29e>
    1fe6:	00 d0       	rcall	.+0      	; 0x1fe8 <handle_internal_commands+0x2a0>
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <handle_internal_commands+0x2a2>
    1fea:	ed b7       	in	r30, 0x3d	; 61
    1fec:	fe b7       	in	r31, 0x3e	; 62
    1fee:	31 96       	adiw	r30, 0x01	; 1
    1ff0:	82 ec       	ldi	r24, 0xC2	; 194
    1ff2:	94 e0       	ldi	r25, 0x04	; 4
    1ff4:	91 83       	std	Z+1, r25	; 0x01
    1ff6:	80 83       	st	Z, r24
    1ff8:	88 ef       	ldi	r24, 0xF8	; 248
    1ffa:	92 e0       	ldi	r25, 0x02	; 2
    1ffc:	93 83       	std	Z+3, r25	; 0x03
    1ffe:	82 83       	std	Z+2, r24	; 0x02
    2000:	35 83       	std	Z+5, r19	; 0x05
    2002:	24 83       	std	Z+4, r18	; 0x04
    2004:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <sprintf>
    2008:	8d b7       	in	r24, 0x3d	; 61
    200a:	9e b7       	in	r25, 0x3e	; 62
    200c:	06 96       	adiw	r24, 0x06	; 6
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	9e bf       	out	0x3e, r25	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	8d bf       	out	0x3d, r24	; 61
		uart_puts(buf);
    2018:	82 ec       	ldi	r24, 0xC2	; 194
    201a:	94 e0       	ldi	r25, 0x04	; 4
    201c:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>
    2020:	0d c0       	rjmp	.+26     	; 0x203c <handle_internal_commands+0x2f4>
		break;
	case 'e':
		uart_puts_P("Check errors\n\r");
    2022:	88 eb       	ldi	r24, 0xB8	; 184
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
		check_errors();
    202a:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <check_errors>
    202e:	06 c0       	rjmp	.+12     	; 0x203c <handle_internal_commands+0x2f4>
		arb_ramp();
		uart_puts("arb done\n\r");
		break;
#endif
	default:
		uart_puts_P("unknown command\n\r");
    2030:	86 ea       	ldi	r24, 0xA6	; 166
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
		printHelp();
    2038:	0e 94 cf 11 	call	0x239e	; 0x239e <printHelp>
		break;
	}
}
    203c:	26 96       	adiw	r28, 0x06	; 6
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	de bf       	out	0x3e, r29	; 62
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	cd bf       	out	0x3d, r28	; 61
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <prepare_write>:

/**
 * Prepare listener for writing
 */
void prepare_write() {
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	28 97       	sbiw	r28, 0x08	; 8
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
    2062:	8f e5       	ldi	r24, 0x5F	; 95
    2064:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
    2066:	ce 01       	movw	r24, r28
    2068:	01 96       	adiw	r24, 0x01	; 1
    206a:	61 e0       	ldi	r22, 0x01	; 1
    206c:	70 e0       	ldi	r23, 0x00	; 0
    206e:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    2072:	8f e3       	ldi	r24, 0x3F	; 63
    2074:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
    2076:	ce 01       	movw	r24, r28
    2078:	01 96       	adiw	r24, 0x01	; 1
    207a:	61 e0       	ldi	r22, 0x01	; 1
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>
	// set device to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_partner_pad());
    2082:	0e 94 81 0c 	call	0x1902	; 0x1902 <gpib_get_partner_pad>
    2086:	80 5e       	subi	r24, 0xE0	; 224
    2088:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
    208a:	ce 01       	movw	r24, r28
    208c:	01 96       	adiw	r24, 0x01	; 1
    208e:	61 e0       	ldi	r22, 0x01	; 1
    2090:	70 e0       	ldi	r23, 0x00	; 0
    2092:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>
	// send secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
    2096:	0e 94 8a 0c 	call	0x1914	; 0x1914 <gpib_get_partner_sad>
    209a:	8f 3f       	cpi	r24, 0xFF	; 255
    209c:	51 f0       	breq	.+20     	; 0x20b2 <prepare_write+0x64>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
    209e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <gpib_get_partner_sad>
    20a2:	80 66       	ori	r24, 0x60	; 96
    20a4:	89 83       	std	Y+1, r24	; 0x01
		gpib_cmd(controlString, 1);
    20a6:	ce 01       	movw	r24, r28
    20a8:	01 96       	adiw	r24, 0x01	; 1
    20aa:	61 e0       	ldi	r22, 0x01	; 1
    20ac:	70 e0       	ldi	r23, 0x00	; 0
    20ae:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>
	}
	// set myself (controller) to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_address());
    20b2:	0e 94 93 0c 	call	0x1926	; 0x1926 <gpib_get_address>
    20b6:	80 5c       	subi	r24, 0xC0	; 192
    20b8:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
    20ba:	ce 01       	movw	r24, r28
    20bc:	01 96       	adiw	r24, 0x01	; 1
    20be:	61 e0       	ldi	r22, 0x01	; 1
    20c0:	70 e0       	ldi	r23, 0x00	; 0
    20c2:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>
}
    20c6:	28 96       	adiw	r28, 0x08	; 8
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	de bf       	out	0x3e, r29	; 62
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	cd bf       	out	0x3d, r28	; 61
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <send_command>:
 * Sends a command.
 * Mode is SEND_FULL_CMD or SEND_PART
 *
 * Returns 1 if command is a query, 0 otherwise.
 */
uchar send_command(uchar *commandString, uchar mode) {
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	00 d0       	rcall	.+0      	; 0x20de <send_command+0x6>
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <send_command+0x8>
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	9b 83       	std	Y+3, r25	; 0x03
    20e6:	8a 83       	std	Y+2, r24	; 0x02
    20e8:	6c 83       	std	Y+4, r22	; 0x04
	uchar is_query;
	prepare_write();
    20ea:	0e 94 27 10 	call	0x204e	; 0x204e <prepare_write>
	//uart_puts("\n\rcommand: ");
	//uart_puts((char*) commandString);
	//uart_puts("\n\r");
	// gpib bus write
	// put out command to listeners
	if (mode == SEND_FULL_CMD) {
    20ee:	8c 81       	ldd	r24, Y+4	; 0x04
    20f0:	82 30       	cpi	r24, 0x02	; 2
    20f2:	39 f4       	brne	.+14     	; 0x2102 <send_command+0x2a>
		// full cmd , we have C string where length can be calculated by gpib_write()
		gpib_write(commandString, 0);
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	9b 81       	ldd	r25, Y+3	; 0x03
    20f8:	60 e0       	ldi	r22, 0x00	; 0
    20fa:	70 e0       	ldi	r23, 0x00	; 0
    20fc:	0e 94 ab 06 	call	0xd56	; 0xd56 <gpib_write>
    2100:	06 c0       	rjmp	.+12     	; 0x210e <send_command+0x36>
	} else {
		// partial command, we must give length value; buffer is full.
		gpib_write(commandString, COMMAND_INPUT_BUFFER_SIZE - 1);
    2102:	8a 81       	ldd	r24, Y+2	; 0x02
    2104:	9b 81       	ldd	r25, Y+3	; 0x03
    2106:	6f e4       	ldi	r22, 0x4F	; 79
    2108:	70 e0       	ldi	r23, 0x00	; 0
    210a:	0e 94 ab 06 	call	0xd56	; 0xd56 <gpib_write>
	}

	// check if query or command only
	if (strchr((char*) commandString, '?') != NULL) {
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	9b 81       	ldd	r25, Y+3	; 0x03
    2112:	6f e3       	ldi	r22, 0x3F	; 63
    2114:	70 e0       	ldi	r23, 0x00	; 0
    2116:	0e 94 ad 01 	call	0x35a	; 0x35a <strchr>
    211a:	00 97       	sbiw	r24, 0x00	; 0
    211c:	19 f0       	breq	.+6      	; 0x2124 <send_command+0x4c>
		//uart_puts("Query. Will check for answer.\n\r");
		is_query = 1;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	89 83       	std	Y+1, r24	; 0x01
    2122:	01 c0       	rjmp	.+2      	; 0x2126 <send_command+0x4e>
	} else {
		//uart_puts("Command only.\n\r");
		is_query = 0;
    2124:	19 82       	std	Y+1, r1	; 0x01
	}
	return is_query;
    2126:	89 81       	ldd	r24, Y+1	; 0x01
}
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <prepare_read>:

void prepare_read() {
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	28 97       	sbiw	r28, 0x08	; 8
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// UNT and UNL
	controlString[0] = G_CMD_UNT;
    214a:	8f e5       	ldi	r24, 0x5F	; 95
    214c:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
    214e:	ce 01       	movw	r24, r28
    2150:	01 96       	adiw	r24, 0x01	; 1
    2152:	61 e0       	ldi	r22, 0x01	; 1
    2154:	70 e0       	ldi	r23, 0x00	; 0
    2156:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    215a:	8f e3       	ldi	r24, 0x3F	; 63
    215c:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
    215e:	ce 01       	movw	r24, r28
    2160:	01 96       	adiw	r24, 0x01	; 1
    2162:	61 e0       	ldi	r22, 0x01	; 1
    2164:	70 e0       	ldi	r23, 0x00	; 0
    2166:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>
	// set myself (controller) to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_address());
    216a:	0e 94 93 0c 	call	0x1926	; 0x1926 <gpib_get_address>
    216e:	80 5e       	subi	r24, 0xE0	; 224
    2170:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
    2172:	ce 01       	movw	r24, r28
    2174:	01 96       	adiw	r24, 0x01	; 1
    2176:	61 e0       	ldi	r22, 0x01	; 1
    2178:	70 e0       	ldi	r23, 0x00	; 0
    217a:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>
	// set device to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_partner_pad());
    217e:	0e 94 81 0c 	call	0x1902	; 0x1902 <gpib_get_partner_pad>
    2182:	80 5c       	subi	r24, 0xC0	; 192
    2184:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
    2186:	ce 01       	movw	r24, r28
    2188:	01 96       	adiw	r24, 0x01	; 1
    218a:	61 e0       	ldi	r22, 0x01	; 1
    218c:	70 e0       	ldi	r23, 0x00	; 0
    218e:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>
	// secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
    2192:	0e 94 8a 0c 	call	0x1914	; 0x1914 <gpib_get_partner_sad>
    2196:	8f 3f       	cpi	r24, 0xFF	; 255
    2198:	51 f0       	breq	.+20     	; 0x21ae <prepare_read+0x78>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
    219a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <gpib_get_partner_sad>
    219e:	80 66       	ori	r24, 0x60	; 96
    21a0:	89 83       	std	Y+1, r24	; 0x01
		gpib_cmd(controlString, 1);
    21a2:	ce 01       	movw	r24, r28
    21a4:	01 96       	adiw	r24, 0x01	; 1
    21a6:	61 e0       	ldi	r22, 0x01	; 1
    21a8:	70 e0       	ldi	r23, 0x00	; 0
    21aa:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>
	}
}
    21ae:	28 96       	adiw	r28, 0x08	; 8
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <receiveAnswer>:

/**
 * Receives answer after command was sent.
 */
void receiveAnswer() {
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	2c 97       	sbiw	r28, 0x0c	; 12
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	uchar b, e;
	uchar colptr = 0;
    21d4:	19 82       	std	Y+1, r1	; 0x01

	prepare_read();
    21d6:	0e 94 9b 10 	call	0x2136	; 0x2136 <prepare_read>
	// read the answer until EOI is detected (then e becomes true)
	do {
		// gpib bus receive
		e = gpib_receive(&b);
    21da:	ce 01       	movw	r24, r28
    21dc:	0b 96       	adiw	r24, 0x0b	; 11
    21de:	0e 94 2a 05 	call	0xa54	; 0xa54 <gpib_receive>
    21e2:	8a 83       	std	Y+2, r24	; 0x02
		// write out character
		uart_putc(b);
    21e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    21e6:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <uart_putc>
		if (linebreak && (colptr++ == linebreak)) {
    21ea:	80 91 a0 03 	lds	r24, 0x03A0
    21ee:	88 23       	and	r24, r24
    21f0:	99 f0       	breq	.+38     	; 0x2218 <receiveAnswer+0x58>
    21f2:	90 91 a0 03 	lds	r25, 0x03A0
    21f6:	1c 86       	std	Y+12, r1	; 0x0c
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	89 17       	cp	r24, r25
    21fc:	11 f4       	brne	.+4      	; 0x2202 <receiveAnswer+0x42>
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	8c 87       	std	Y+12, r24	; 0x0c
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	8f 5f       	subi	r24, 0xFF	; 255
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	8c 85       	ldd	r24, Y+12	; 0x0c
    220a:	88 23       	and	r24, r24
    220c:	29 f0       	breq	.+10     	; 0x2218 <receiveAnswer+0x58>
			uart_puts_P("\n\r");
    220e:	8c ef       	ldi	r24, 0xFC	; 252
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
			colptr = 0;
    2216:	19 82       	std	Y+1, r1	; 0x01
		}
		//sprintf((char*)buf,"%02x - %c\n\r", b, b);
		//uart_puts((char*)buf);
	} while (!e);
    2218:	8a 81       	ldd	r24, Y+2	; 0x02
    221a:	88 23       	and	r24, r24
    221c:	f1 f2       	breq	.-68     	; 0x21da <receiveAnswer+0x1a>

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
    221e:	8f e5       	ldi	r24, 0x5F	; 95
    2220:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
    2222:	ce 01       	movw	r24, r28
    2224:	03 96       	adiw	r24, 0x03	; 3
    2226:	61 e0       	ldi	r22, 0x01	; 1
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    222e:	8f e3       	ldi	r24, 0x3F	; 63
    2230:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
    2232:	ce 01       	movw	r24, r28
    2234:	03 96       	adiw	r24, 0x03	; 3
    2236:	61 e0       	ldi	r22, 0x01	; 1
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	0e 94 c4 06 	call	0xd88	; 0xd88 <gpib_cmd>
}
    223e:	2c 96       	adiw	r28, 0x0c	; 12
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <srq_occured>:

/**
 * Check if a SRQ occured
 */
uchar srq_occured(int* old_time) {
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	00 d0       	rcall	.+0      	; 0x2256 <srq_occured+0x6>
    2256:	0f 92       	push	r0
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	9b 83       	std	Y+3, r25	; 0x03
    225e:	8a 83       	std	Y+2, r24	; 0x02
	uchar srq = 0;
    2260:	19 82       	std	Y+1, r1	; 0x01
	if (*old_time == 0) {
    2262:	ea 81       	ldd	r30, Y+2	; 0x02
    2264:	fb 81       	ldd	r31, Y+3	; 0x03
    2266:	80 81       	ld	r24, Z
    2268:	91 81       	ldd	r25, Z+1	; 0x01
    226a:	00 97       	sbiw	r24, 0x00	; 0
    226c:	49 f4       	brne	.+18     	; 0x2280 <srq_occured+0x30>
		// old_time value initialization on first call with value s
		*old_time = s;
    226e:	80 91 13 05 	lds	r24, 0x0513
    2272:	88 2f       	mov	r24, r24
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	ea 81       	ldd	r30, Y+2	; 0x02
    2278:	fb 81       	ldd	r31, Y+3	; 0x03
    227a:	91 83       	std	Z+1, r25	; 0x01
    227c:	80 83       	st	Z, r24
    227e:	1e c0       	rjmp	.+60     	; 0x22bc <srq_occured+0x6c>
	} else {
		if (s > *old_time) {
    2280:	80 91 13 05 	lds	r24, 0x0513
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	ea 81       	ldd	r30, Y+2	; 0x02
    228a:	fb 81       	ldd	r31, Y+3	; 0x03
    228c:	80 81       	ld	r24, Z
    228e:	91 81       	ldd	r25, Z+1	; 0x01
    2290:	82 17       	cp	r24, r18
    2292:	93 07       	cpc	r25, r19
    2294:	9c f4       	brge	.+38     	; 0x22bc <srq_occured+0x6c>
			// some time has passed - check if srq was set
			srq = bit_is_clear(PIND, G_SRQ);
    2296:	e0 e3       	ldi	r30, 0x30	; 48
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	88 2f       	mov	r24, r24
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	80 74       	andi	r24, 0x40	; 64
    22a2:	90 70       	andi	r25, 0x00	; 0
    22a4:	19 82       	std	Y+1, r1	; 0x01
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	11 f4       	brne	.+4      	; 0x22ae <srq_occured+0x5e>
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	89 83       	std	Y+1, r24	; 0x01
			if (srq)
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	88 23       	and	r24, r24
    22b2:	21 f0       	breq	.+8      	; 0x22bc <srq_occured+0x6c>
				uart_puts_P("\n\rSRQ detected.\n\r");
    22b4:	8f ef       	ldi	r24, 0xFF	; 255
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
		}
	}
	return srq;
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <handle_srq>:

/**
 * Handles SRQs by doing serial poll
 *
 */
uchar handle_srq(uchar *buf, int *buf_ptr) {
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    22d2:	28 97       	sbiw	r28, 0x08	; 8
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61
    22de:	9d 83       	std	Y+5, r25	; 0x05
    22e0:	8c 83       	std	Y+4, r24	; 0x04
    22e2:	7f 83       	std	Y+7, r23	; 0x07
    22e4:	6e 83       	std	Y+6, r22	; 0x06
	uchar command_ready = 0;
    22e6:	19 82       	std	Y+1, r1	; 0x01
	uint8_t primary, secondary;

	if (!gpib_serial_poll(&primary, &secondary)) {
    22e8:	ce 01       	movw	r24, r28
    22ea:	02 96       	adiw	r24, 0x02	; 2
    22ec:	9e 01       	movw	r18, r28
    22ee:	2d 5f       	subi	r18, 0xFD	; 253
    22f0:	3f 4f       	sbci	r19, 0xFF	; 255
    22f2:	b9 01       	movw	r22, r18
    22f4:	0e 94 2a 0b 	call	0x1654	; 0x1654 <gpib_serial_poll>
    22f8:	88 23       	and	r24, r24
    22fa:	69 f4       	brne	.+26     	; 0x2316 <handle_srq+0x4c>
		uart_puts_P(
    22fc:	8c e2       	ldi	r24, 0x2C	; 44
    22fe:	91 e0       	ldi	r25, 0x01	; 1
    2300:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
				"\n\rSRQ emitter is not in list of known devices. SRQ Ignored.\n\r");
		uart_puts_P("\n\rSRQs are disabled now.\n\r");
    2304:	81 e1       	ldi	r24, 0x11	; 17
    2306:	91 e0       	ldi	r25, 0x01	; 1
    2308:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
		srq_enabled = 0;
    230c:	10 92 9f 03 	sts	0x039F, r1
		return command_ready;
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	88 87       	std	Y+8, r24	; 0x08
    2314:	3a c0       	rjmp	.+116    	; 0x238a <handle_srq+0xc0>
	}
	gpib_set_partner_address(primary, secondary);
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	9b 81       	ldd	r25, Y+3	; 0x03
    231a:	69 2f       	mov	r22, r25
    231c:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <gpib_set_partner_address>

	if (gpib_get_flavour() == FLAVOUR_TEK) {
    2320:	0e 94 a9 0c 	call	0x1952	; 0x1952 <gpib_get_flavour>
    2324:	81 30       	cpi	r24, 0x01	; 1
    2326:	79 f5       	brne	.+94     	; 0x2386 <handle_srq+0xbc>
		// Tek: check status for reason
		buf[0] = 'E';
    2328:	ec 81       	ldd	r30, Y+4	; 0x04
    232a:	fd 81       	ldd	r31, Y+5	; 0x05
    232c:	85 e4       	ldi	r24, 0x45	; 69
    232e:	80 83       	st	Z, r24
		buf[1] = 'V';
    2330:	8c 81       	ldd	r24, Y+4	; 0x04
    2332:	9d 81       	ldd	r25, Y+5	; 0x05
    2334:	fc 01       	movw	r30, r24
    2336:	31 96       	adiw	r30, 0x01	; 1
    2338:	86 e5       	ldi	r24, 0x56	; 86
    233a:	80 83       	st	Z, r24
		buf[2] = 'E';
    233c:	8c 81       	ldd	r24, Y+4	; 0x04
    233e:	9d 81       	ldd	r25, Y+5	; 0x05
    2340:	fc 01       	movw	r30, r24
    2342:	32 96       	adiw	r30, 0x02	; 2
    2344:	85 e4       	ldi	r24, 0x45	; 69
    2346:	80 83       	st	Z, r24
		buf[3] = 'N';
    2348:	8c 81       	ldd	r24, Y+4	; 0x04
    234a:	9d 81       	ldd	r25, Y+5	; 0x05
    234c:	fc 01       	movw	r30, r24
    234e:	33 96       	adiw	r30, 0x03	; 3
    2350:	8e e4       	ldi	r24, 0x4E	; 78
    2352:	80 83       	st	Z, r24
		buf[4] = 'T';
    2354:	8c 81       	ldd	r24, Y+4	; 0x04
    2356:	9d 81       	ldd	r25, Y+5	; 0x05
    2358:	fc 01       	movw	r30, r24
    235a:	34 96       	adiw	r30, 0x04	; 4
    235c:	84 e5       	ldi	r24, 0x54	; 84
    235e:	80 83       	st	Z, r24
		buf[5] = '?';
    2360:	8c 81       	ldd	r24, Y+4	; 0x04
    2362:	9d 81       	ldd	r25, Y+5	; 0x05
    2364:	fc 01       	movw	r30, r24
    2366:	35 96       	adiw	r30, 0x05	; 5
    2368:	8f e3       	ldi	r24, 0x3F	; 63
    236a:	80 83       	st	Z, r24
		buf[6] = '\0';
    236c:	8c 81       	ldd	r24, Y+4	; 0x04
    236e:	9d 81       	ldd	r25, Y+5	; 0x05
    2370:	fc 01       	movw	r30, r24
    2372:	36 96       	adiw	r30, 0x06	; 6
    2374:	10 82       	st	Z, r1
		*buf_ptr = 6;
    2376:	ee 81       	ldd	r30, Y+6	; 0x06
    2378:	ff 81       	ldd	r31, Y+7	; 0x07
    237a:	86 e0       	ldi	r24, 0x06	; 6
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	91 83       	std	Z+1, r25	; 0x01
    2380:	80 83       	st	Z, r24
		command_ready = 1;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	89 83       	std	Y+1, r24	; 0x01
	}
	return command_ready;
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	88 87       	std	Y+8, r24	; 0x08
    238a:	88 85       	ldd	r24, Y+8	; 0x08
}
    238c:	28 96       	adiw	r28, 0x08	; 8
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	08 95       	ret

0000239e <printHelp>:

void printHelp() {
    239e:	df 93       	push	r29
    23a0:	cf 93       	push	r28
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
#ifdef WRITE
	sprintf(buf, "\n\rGPIB Controller (Rev.%s) (c) spurtikus.de 2008-2015\n\r",
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <printHelp+0xa>
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <printHelp+0xc>
    23aa:	00 d0       	rcall	.+0      	; 0x23ac <printHelp+0xe>
    23ac:	ed b7       	in	r30, 0x3d	; 61
    23ae:	fe b7       	in	r31, 0x3e	; 62
    23b0:	31 96       	adiw	r30, 0x01	; 1
    23b2:	82 ec       	ldi	r24, 0xC2	; 194
    23b4:	94 e0       	ldi	r25, 0x04	; 4
    23b6:	91 83       	std	Z+1, r25	; 0x01
    23b8:	80 83       	st	Z, r24
    23ba:	84 e1       	ldi	r24, 0x14	; 20
    23bc:	93 e0       	ldi	r25, 0x03	; 3
    23be:	93 83       	std	Z+3, r25	; 0x03
    23c0:	82 83       	std	Z+2, r24	; 0x02
    23c2:	8c e4       	ldi	r24, 0x4C	; 76
    23c4:	93 e0       	ldi	r25, 0x03	; 3
    23c6:	95 83       	std	Z+5, r25	; 0x05
    23c8:	84 83       	std	Z+4, r24	; 0x04
    23ca:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <sprintf>
    23ce:	8d b7       	in	r24, 0x3d	; 61
    23d0:	9e b7       	in	r25, 0x3e	; 62
    23d2:	06 96       	adiw	r24, 0x06	; 6
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	9e bf       	out	0x3e, r25	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	8d bf       	out	0x3d, r24	; 61
	REVISION);
	uart_puts(buf);
    23de:	82 ec       	ldi	r24, 0xC2	; 194
    23e0:	94 e0       	ldi	r25, 0x04	; 4
    23e2:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>
#else
	uart_puts("\n\rGPIB Listener Only (Rev.%s) (c) spurtikus.de 2008-2015\n\r", REVISION);
	uart_puts(buf);
#endif
	uart_puts_P("Internal commands:\n\r");
    23e6:	84 e8       	ldi	r24, 0x84	; 132
    23e8:	92 e0       	ldi	r25, 0x02	; 2
    23ea:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
	uart_puts(
    23ee:	80 e5       	ldi	r24, 0x50	; 80
    23f0:	93 e0       	ldi	r25, 0x03	; 3
    23f2:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>
			".a <primary> [<secondary>] - set prim./second. address of remote device\n\r");
	uart_puts_P(".s <secondary> - set secondary address of remote device\n\r");
    23f6:	8a e4       	ldi	r24, 0x4A	; 74
    23f8:	92 e0       	ldi	r25, 0x02	; 2
    23fa:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
	uart_puts_P(
    23fe:	8a e0       	ldi	r24, 0x0A	; 10
    2400:	92 e0       	ldi	r25, 0x02	; 2
    2402:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
			".+ <n> - add partner device address to list of known devices.\n\r");
	uart_puts_P(
    2406:	85 ec       	ldi	r24, 0xC5	; 197
    2408:	91 e0       	ldi	r25, 0x01	; 1
    240a:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
			".- <n> - remove partner device address from list of known devices.\n\r");
	uart_puts_P(".x - toggle Xon/Xoff flow control.\n\r");
    240e:	80 ea       	ldi	r24, 0xA0	; 160
    2410:	91 e0       	ldi	r25, 0x01	; 1
    2412:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
	uart_puts_P(".h - print help.\n\r");
    2416:	8d e8       	ldi	r24, 0x8D	; 141
    2418:	91 e0       	ldi	r25, 0x01	; 1
    241a:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
	uart_puts_P(".i - dump info about GPIB lines.\n\r");
    241e:	8a e6       	ldi	r24, 0x6A	; 106
    2420:	91 e0       	ldi	r25, 0x01	; 1
    2422:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
}
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret

0000242c <main>:
 * \brief Implementation of GPIB controller. Reads a command from RS232, sends it via bus.
 * If The command contains a '?', an answer from the device is expected and read in. The
 * answer then is printed out. If an SRQ occured, a serial poll is initiated.
 * 
 */
int main(void) {
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
    2434:	28 97       	sbiw	r28, 0x08	; 8
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	cd bf       	out	0x3d, r28	; 61
	int old_time = 0;
    2440:	1f 82       	std	Y+7, r1	; 0x07
    2442:	1e 82       	std	Y+6, r1	; 0x06
	uchar is_query = 0;
    2444:	1d 82       	std	Y+5, r1	; 0x05
//	uchar command_ready = 0;
	uchar do_prompt = 1;
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	8c 83       	std	Y+4, r24	; 0x04

	/*
	 *  Initialize UART library, pass baudrate and avr cpu clock 
	 *  with the macro UART_BAUD_SELECT()
	 */DI();
    244a:	8c e0       	ldi	r24, 0x0C	; 12
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	0e 94 4a 14 	call	0x2894	; 0x2894 <uart_init>

	/*
	 * now enable interrupt, since UART and TIMER library is interrupt controlled
	 */sei();
    2452:	78 94       	sei

	/** print some usage infos */
	printHelp();
    2454:	0e 94 cf 11 	call	0x239e	; 0x239e <printHelp>

	// init timer for timeout detection
	timer16_init();
    2458:	0e 94 4b 13 	call	0x2696	; 0x2696 <timer16_init>

	// init gpib lines
	gpib_init();
    245c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <gpib_init>
	// init controller part - assign bus 
	gpib_controller_assign(0x00);
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	0e 94 11 06 	call	0xc22	; 0xc22 <gpib_controller_assign>

	if (xonXoffMode) {
    2466:	80 91 9e 03 	lds	r24, 0x039E
    246a:	88 23       	and	r24, r24
    246c:	19 f0       	breq	.+6      	; 0x2474 <main+0x48>
		uart_set_flow_control(FLOWCONTROL_XONXOFF);
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <uart_set_flow_control>
#define S_GPIB_ANSWER 5
#define S_GPIB_NO_ANSWER 6
#define S_FINAL 7

	uchar ch;
	uint state = S_INITIAL;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	9b 83       	std	Y+3, r25	; 0x03
    247a:	8a 83       	std	Y+2, r24	; 0x02
	for (;;) {

		if (state == S_INITIAL) {
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	9b 81       	ldd	r25, Y+3	; 0x03
    2480:	81 30       	cpi	r24, 0x01	; 1
    2482:	91 05       	cpc	r25, r1
    2484:	49 f4       	brne	.+18     	; 0x2498 <main+0x6c>
			if (do_prompt) {
    2486:	8c 81       	ldd	r24, Y+4	; 0x04
    2488:	88 23       	and	r24, r24
    248a:	31 f0       	breq	.+12     	; 0x2498 <main+0x6c>
				uart_puts("> ");
    248c:	8a e9       	ldi	r24, 0x9A	; 154
    248e:	93 e0       	ldi	r25, 0x03	; 3
    2490:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <uart_puts>
				do_prompt = 0;
    2494:	1c 82       	std	Y+4, r1	; 0x04
				is_query = 0;
    2496:	1d 82       	std	Y+5, r1	; 0x05
			}
		}

		if (!input_char(&ch))
    2498:	ce 01       	movw	r24, r28
    249a:	08 96       	adiw	r24, 0x08	; 8
    249c:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <input_char>
    24a0:	88 23       	and	r24, r24
    24a2:	61 f3       	breq	.-40     	; 0x247c <main+0x50>
			continue;

		// byte received. Decide with state what to do.

		if (state == S_INITIAL) {
    24a4:	8a 81       	ldd	r24, Y+2	; 0x02
    24a6:	9b 81       	ldd	r25, Y+3	; 0x03
    24a8:	81 30       	cpi	r24, 0x01	; 1
    24aa:	91 05       	cpc	r25, r1
    24ac:	61 f4       	brne	.+24     	; 0x24c6 <main+0x9a>
			// internal or external command?
			if (ch == '.') {
    24ae:	88 85       	ldd	r24, Y+8	; 0x08
    24b0:	8e 32       	cpi	r24, 0x2E	; 46
    24b2:	29 f4       	brne	.+10     	; 0x24be <main+0x92>
				// internal command
				state = S_FIRST_BYTE_INT;
    24b4:	82 e0       	ldi	r24, 0x02	; 2
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	9b 83       	std	Y+3, r25	; 0x03
    24ba:	8a 83       	std	Y+2, r24	; 0x02
    24bc:	04 c0       	rjmp	.+8      	; 0x24c6 <main+0x9a>
			} else {
				// gpib command
				state = S_FIRST_BYTE_GPIB;
    24be:	83 e0       	ldi	r24, 0x03	; 3
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	9b 83       	std	Y+3, r25	; 0x03
    24c4:	8a 83       	std	Y+2, r24	; 0x02

			}
		}

		if (state == S_FIRST_BYTE_INT) {
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	9b 81       	ldd	r25, Y+3	; 0x03
    24ca:	82 30       	cpi	r24, 0x02	; 2
    24cc:	91 05       	cpc	r25, r1
    24ce:	31 f5       	brne	.+76     	; 0x251c <main+0xf0>
			buf[0] = ch;
    24d0:	88 85       	ldd	r24, Y+8	; 0x08
    24d2:	80 93 c2 04 	sts	0x04C2, r24
			buf_ptr = 1;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	90 93 b4 03 	sts	0x03B4, r25
    24de:	80 93 b3 03 	sts	0x03B3, r24
			// send received character back depending on global flag
			if (rs232_remote_echo) {
    24e2:	80 91 9d 03 	lds	r24, 0x039D
    24e6:	88 23       	and	r24, r24
    24e8:	19 f0       	breq	.+6      	; 0x24f0 <main+0xc4>
				uart_putc((unsigned char) ch);
    24ea:	88 85       	ldd	r24, Y+8	; 0x08
    24ec:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <uart_putc>
			}
			// collect line until CR
			while (!input_process())
    24f0:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <input_process>
    24f4:	88 23       	and	r24, r24
    24f6:	e1 f3       	breq	.-8      	; 0x24f0 <main+0xc4>
				;
			uart_puts_P("\n\r");
    24f8:	82 ed       	ldi	r24, 0xD2	; 210
    24fa:	92 e0       	ldi	r25, 0x02	; 2
    24fc:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
			// execute internal command
			handle_internal_commands(buf);
    2500:	82 ec       	ldi	r24, 0xC2	; 194
    2502:	94 e0       	ldi	r25, 0x04	; 4
    2504:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <handle_internal_commands>
			// reset local vars
			state = S_INITIAL;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9b 83       	std	Y+3, r25	; 0x03
    250e:	8a 83       	std	Y+2, r24	; 0x02
			buf_ptr = 0;
    2510:	10 92 b4 03 	sts	0x03B4, r1
    2514:	10 92 b3 03 	sts	0x03B3, r1
			do_prompt = 1;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	8c 83       	std	Y+4, r24	; 0x04
		}

		if (state == S_FIRST_BYTE_GPIB) {
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	9b 81       	ldd	r25, Y+3	; 0x03
    2520:	83 30       	cpi	r24, 0x03	; 3
    2522:	91 05       	cpc	r25, r1
    2524:	e9 f4       	brne	.+58     	; 0x2560 <main+0x134>
			// GPIB command. Check if a partner was defined.
			if (gpib_get_partner_pad() == ADDRESS_NOT_SET) {
    2526:	0e 94 81 0c 	call	0x1902	; 0x1902 <gpib_get_partner_pad>
    252a:	8f 3f       	cpi	r24, 0xFF	; 255
    252c:	81 f4       	brne	.+32     	; 0x254e <main+0x122>
				uart_puts_P(
    252e:	8f e9       	ldi	r24, 0x9F	; 159
    2530:	92 e0       	ldi	r25, 0x02	; 2
    2532:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
						"Device address is not set. Can not send command.\n\r");
				// reset local vars
				state = S_INITIAL;
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	9b 83       	std	Y+3, r25	; 0x03
    253c:	8a 83       	std	Y+2, r24	; 0x02
				buf_ptr = 0;
    253e:	10 92 b4 03 	sts	0x03B4, r1
    2542:	10 92 b3 03 	sts	0x03B3, r1
				do_prompt = 1;
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	8c 83       	std	Y+4, r24	; 0x04
				is_query = 0;
    254a:	1d 82       	std	Y+5, r1	; 0x05
    254c:	09 c0       	rjmp	.+18     	; 0x2560 <main+0x134>
			} else {
				// write prologue
				state = S_SEND_BYTES;
    254e:	84 e0       	ldi	r24, 0x04	; 4
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	9b 83       	std	Y+3, r25	; 0x03
    2554:	8a 83       	std	Y+2, r24	; 0x02
				prepare_write();
    2556:	0e 94 27 10 	call	0x204e	; 0x204e <prepare_write>
				gpib_write_prologue(0);
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	0e 94 dd 06 	call	0xdba	; 0xdba <gpib_write_prologue>
			}
		}

		if (state == S_SEND_BYTES) {
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	9b 81       	ldd	r25, Y+3	; 0x03
    2564:	84 30       	cpi	r24, 0x04	; 4
    2566:	91 05       	cpc	r25, r1
    2568:	49 f5       	brne	.+82     	; 0x25bc <main+0x190>
			// send received character back depending on global flag
			if (rs232_remote_echo) {
    256a:	80 91 9d 03 	lds	r24, 0x039D
    256e:	88 23       	and	r24, r24
    2570:	19 f0       	breq	.+6      	; 0x2578 <main+0x14c>
				uart_putc((unsigned char) ch);
    2572:	88 85       	ldd	r24, Y+8	; 0x08
    2574:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <uart_putc>
			}
			uchar isLastByte = (ch == ASCII_CODE_CR);
    2578:	88 85       	ldd	r24, Y+8	; 0x08
    257a:	19 82       	std	Y+1, r1	; 0x01
    257c:	8d 30       	cpi	r24, 0x0D	; 13
    257e:	11 f4       	brne	.+4      	; 0x2584 <main+0x158>
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	89 83       	std	Y+1, r24	; 0x01
			gpib_write_byte(ch, isLastByte);
    2584:	88 85       	ldd	r24, Y+8	; 0x08
    2586:	69 81       	ldd	r22, Y+1	; 0x01
    2588:	0e 94 49 07 	call	0xe92	; 0xe92 <gpib_write_byte>

			if (ch == '?') {
    258c:	88 85       	ldd	r24, Y+8	; 0x08
    258e:	8f 33       	cpi	r24, 0x3F	; 63
    2590:	11 f4       	brne	.+4      	; 0x2596 <main+0x16a>
				is_query = 1;
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	8d 83       	std	Y+5, r24	; 0x05
			}

			if (isLastByte) {
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	88 23       	and	r24, r24
    259a:	81 f0       	breq	.+32     	; 0x25bc <main+0x190>
				uart_puts_P("\n\r");
    259c:	8c e9       	ldi	r24, 0x9C	; 156
    259e:	92 e0       	ldi	r25, 0x02	; 2
    25a0:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
				if (is_query) {
    25a4:	8d 81       	ldd	r24, Y+5	; 0x05
    25a6:	88 23       	and	r24, r24
    25a8:	29 f0       	breq	.+10     	; 0x25b4 <main+0x188>
					//uart_puts("Query. Will check for answer.\n\r");
					state = S_GPIB_ANSWER;
    25aa:	85 e0       	ldi	r24, 0x05	; 5
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	9b 83       	std	Y+3, r25	; 0x03
    25b0:	8a 83       	std	Y+2, r24	; 0x02
    25b2:	04 c0       	rjmp	.+8      	; 0x25bc <main+0x190>
				} else {
					//uart_puts("Command only.\n\r");
					state = S_GPIB_NO_ANSWER;
    25b4:	86 e0       	ldi	r24, 0x06	; 6
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	9b 83       	std	Y+3, r25	; 0x03
    25ba:	8a 83       	std	Y+2, r24	; 0x02
				}
			}
		}

		// write epilogue
		if (state == S_GPIB_ANSWER || state == S_GPIB_NO_ANSWER) {
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	9b 81       	ldd	r25, Y+3	; 0x03
    25c0:	85 30       	cpi	r24, 0x05	; 5
    25c2:	91 05       	cpc	r25, r1
    25c4:	29 f0       	breq	.+10     	; 0x25d0 <main+0x1a4>
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ca:	86 30       	cpi	r24, 0x06	; 6
    25cc:	91 05       	cpc	r25, r1
    25ce:	39 f4       	brne	.+14     	; 0x25de <main+0x1b2>
			gpib_write_epilogue(0);
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	0e 94 2c 07 	call	0xe58	; 0xe58 <gpib_write_epilogue>
			buf_ptr = 0;
    25d6:	10 92 b4 03 	sts	0x03B4, r1
    25da:	10 92 b3 03 	sts	0x03B3, r1
		}

		// if we sent a query, read the answer
		if (state == S_GPIB_ANSWER) {
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	9b 81       	ldd	r25, Y+3	; 0x03
    25e2:	85 30       	cpi	r24, 0x05	; 5
    25e4:	91 05       	cpc	r25, r1
    25e6:	31 f4       	brne	.+12     	; 0x25f4 <main+0x1c8>
			receiveAnswer();
    25e8:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <receiveAnswer>
			state = S_FINAL;
    25ec:	87 e0       	ldi	r24, 0x07	; 7
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	9b 83       	std	Y+3, r25	; 0x03
    25f2:	8a 83       	std	Y+2, r24	; 0x02
		}

		// finalize state machine
		if (state == S_GPIB_NO_ANSWER || state == S_FINAL) {
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	9b 81       	ldd	r25, Y+3	; 0x03
    25f8:	86 30       	cpi	r24, 0x06	; 6
    25fa:	91 05       	cpc	r25, r1
    25fc:	29 f0       	breq	.+10     	; 0x2608 <main+0x1dc>
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	9b 81       	ldd	r25, Y+3	; 0x03
    2602:	87 30       	cpi	r24, 0x07	; 7
    2604:	91 05       	cpc	r25, r1
    2606:	51 f4       	brne	.+20     	; 0x261c <main+0x1f0>
			// some devices do not send cr,lf at command end, so create it always itself
			uart_puts_P("\n\r");
    2608:	89 e9       	ldi	r24, 0x99	; 153
    260a:	92 e0       	ldi	r25, 0x02	; 2
    260c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <uart_puts_p>
			do_prompt = 1;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	8c 83       	std	Y+4, r24	; 0x04
			state = S_INITIAL;
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	9b 83       	std	Y+3, r25	; 0x03
    261a:	8a 83       	std	Y+2, r24	; 0x02
		}

		// SRQ detection - do this every time when time value s has changed
		// s is incremented every second. So we check once a second.
		if (srq_enabled && srq_occured(&old_time)) {
    261c:	80 91 9f 03 	lds	r24, 0x039F
    2620:	88 23       	and	r24, r24
    2622:	09 f4       	brne	.+2      	; 0x2626 <main+0x1fa>
    2624:	2b cf       	rjmp	.-426    	; 0x247c <main+0x50>
    2626:	ce 01       	movw	r24, r28
    2628:	06 96       	adiw	r24, 0x06	; 6
    262a:	0e 94 28 11 	call	0x2250	; 0x2250 <srq_occured>
    262e:	88 23       	and	r24, r24
    2630:	09 f4       	brne	.+2      	; 0x2634 <main+0x208>
    2632:	24 cf       	rjmp	.-440    	; 0x247c <main+0x50>
			// TODO: make handle srq work again
			// the returned command_ready was interpreted to read in an answer
			// but this was turned of for new input loop
			// next two lines replace that but must be tested.
			if (handle_srq(buf, &buf_ptr)) {
    2634:	82 ec       	ldi	r24, 0xC2	; 194
    2636:	94 e0       	ldi	r25, 0x04	; 4
    2638:	23 eb       	ldi	r18, 0xB3	; 179
    263a:	33 e0       	ldi	r19, 0x03	; 3
    263c:	b9 01       	movw	r22, r18
    263e:	0e 94 65 11 	call	0x22ca	; 0x22ca <handle_srq>
    2642:	88 23       	and	r24, r24
    2644:	09 f4       	brne	.+2      	; 0x2648 <main+0x21c>
    2646:	1a cf       	rjmp	.-460    	; 0x247c <main+0x50>
				state = S_GPIB_ANSWER;
    2648:	85 e0       	ldi	r24, 0x05	; 5
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	9b 83       	std	Y+3, r25	; 0x03
    264e:	8a 83       	std	Y+2, r24	; 0x02
    2650:	15 cf       	rjmp	.-470    	; 0x247c <main+0x50>

00002652 <__vector_7>:

/**
 * Interrupt Service Routine - do not call directly
 *  This routine is called when the Timer Value TCNT1 reaches the Output Compare Register Value OCR1A
 */ 
ISR(TIMER1_COMPA_vect) {
    2652:	1f 92       	push	r1
    2654:	0f 92       	push	r0
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	0f 92       	push	r0
    265a:	11 24       	eor	r1, r1
    265c:	8f 93       	push	r24
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
#if XTAL_CPU % DEBOUNCE
	OCR1A = XTAL_CPU / DEBOUNCE - 1;
#endif
	if (--timer==0) {
    2666:	80 91 12 05 	lds	r24, 0x0512
    266a:	81 50       	subi	r24, 0x01	; 1
    266c:	80 93 12 05 	sts	0x0512, r24
    2670:	80 91 12 05 	lds	r24, 0x0512
    2674:	88 23       	and	r24, r24
    2676:	39 f4       	brne	.+14     	; 0x2686 <__vector_7+0x34>
		timer=(uint8_t) DEBOUNCE;
    2678:	10 92 12 05 	sts	0x0512, r1
		s++;
    267c:	80 91 13 05 	lds	r24, 0x0513
    2680:	8f 5f       	subi	r24, 0xFF	; 255
    2682:	80 93 13 05 	sts	0x0513, r24
#if XTAL_CPU % DEBOUNCE
		OCR1A = XTAL_CPU / DEBOUNCE + XTAL_CPU % DEBOUNCE - 1;
#endif
	}
}
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	8f 91       	pop	r24
    268c:	0f 90       	pop	r0
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	0f 90       	pop	r0
    2692:	1f 90       	pop	r1
    2694:	18 95       	reti

00002696 <timer16_init>:
/**
 * Timer initialisation.
 *  \brief initializes all registers ands sets second value 's' to zero. Timer is immediately
 * started.
 */ 
void timer16_init( void ) {
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62

	// OCR1A=XTAL/DEBOUNCE-1 -> Bei Erreichen dieses Wertes (31249) wird die ISR besucht
	// die ISR wird also alle 1/256s aufgerufen. Wenn man dort also bis 256 hochzählt, ist genau
	// 1 Sekunde um! 256 ist der Wert der Variable timer und wird über das define DEBOUNCE festgelegt

	TCCR1B = (1<<CS10) ^ (1<<WGM12);	// Prescaler of 1 | CTC mode
    269e:	ee e4       	ldi	r30, 0x4E	; 78
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	89 e0       	ldi	r24, 0x09	; 9
    26a4:	80 83       	st	Z, r24
	OCR1A  = F_CPU/DEBOUNCE-1;		// Output compare register value 
    26a6:	ea e4       	ldi	r30, 0x4A	; 74
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	81 e1       	ldi	r24, 0x11	; 17
    26ac:	9a e7       	ldi	r25, 0x7A	; 122
    26ae:	91 83       	std	Z+1, r25	; 0x01
    26b0:	80 83       	st	Z, r24
	TCNT1 = 0; // Start value for timer register
    26b2:	ec e4       	ldi	r30, 0x4C	; 76
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	11 82       	std	Z+1, r1	; 0x01
    26b8:	10 82       	st	Z, r1
	s=0; // Initialize second value (s) to zero
    26ba:	10 92 13 05 	sts	0x0513, r1
	timer = (uint8_t)DEBOUNCE; 
    26be:	10 92 12 05 	sts	0x0512, r1
	TIMSK |= (1<<OCIE1A);		// activate timer interrupts which starts timer run
    26c2:	a9 e5       	ldi	r26, 0x59	; 89
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	e9 e5       	ldi	r30, 0x59	; 89
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	80 61       	ori	r24, 0x10	; 16
    26ce:	8c 93       	st	X, r24
}
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	08 95       	ret

000026d6 <uart_set_flow_control>:
/** number of chars in rx buffer */
static volatile unsigned char chars_in_rx_buffer = 0;

void SendOutOfBand(unsigned char c);

void uart_set_flow_control(unsigned char _flowControl) {
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	0f 92       	push	r0
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
    26e0:	89 83       	std	Y+1, r24	; 0x01
	flowControl = _flowControl;
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	80 93 b5 03 	sts	0x03B5, r24
}
    26e8:	0f 90       	pop	r0
    26ea:	cf 91       	pop	r28
    26ec:	df 91       	pop	r29
    26ee:	08 95       	ret

000026f0 <uart_get_flow_control>:

unsigned char uart_get_flow_control() {
    26f0:	df 93       	push	r29
    26f2:	cf 93       	push	r28
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
	return flowControl;
    26f8:	80 91 b5 03 	lds	r24, 0x03B5
}
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	08 95       	ret

00002702 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
 Function: UART Receive Complete interrupt
 Purpose:  called when the UART has received a character
 **************************************************************************/
{
    2702:	1f 92       	push	r1
    2704:	0f 92       	push	r0
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	0f 92       	push	r0
    270a:	11 24       	eor	r1, r1
    270c:	2f 93       	push	r18
    270e:	3f 93       	push	r19
    2710:	4f 93       	push	r20
    2712:	5f 93       	push	r21
    2714:	6f 93       	push	r22
    2716:	7f 93       	push	r23
    2718:	8f 93       	push	r24
    271a:	9f 93       	push	r25
    271c:	af 93       	push	r26
    271e:	bf 93       	push	r27
    2720:	ef 93       	push	r30
    2722:	ff 93       	push	r31
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	00 d0       	rcall	.+0      	; 0x272a <__vector_13+0x28>
    272a:	00 d0       	rcall	.+0      	; 0x272c <__vector_13+0x2a>
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	unsigned char usr;
	unsigned char lastRxError;

	/* read UART status register and UART data register */
	usr = UART0_STATUS;
    2730:	eb e2       	ldi	r30, 0x2B	; 43
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	8a 83       	std	Y+2, r24	; 0x02
	data = UART0_DATA;
    2738:	ec e2       	ldi	r30, 0x2C	; 44
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	8b 83       	std	Y+3, r24	; 0x03

	/* */
#if defined( AT90_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
    2740:	8a 81       	ldd	r24, Y+2	; 0x02
    2742:	88 71       	andi	r24, 0x18	; 24
    2744:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif

	/* calculate buffer index */
	tmphead = (UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    2746:	80 91 5b 04 	lds	r24, 0x045B
    274a:	8f 5f       	subi	r24, 0xFF	; 255
    274c:	8f 77       	andi	r24, 0x7F	; 127
    274e:	8c 83       	std	Y+4, r24	; 0x04

	if (tmphead == UART_RxTail) {
    2750:	90 91 5c 04 	lds	r25, 0x045C
    2754:	8c 81       	ldd	r24, Y+4	; 0x04
    2756:	89 17       	cp	r24, r25
    2758:	19 f4       	brne	.+6      	; 0x2760 <__vector_13+0x5e>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    275a:	82 e0       	ldi	r24, 0x02	; 2
    275c:	89 83       	std	Y+1, r24	; 0x01
    275e:	10 c0       	rjmp	.+32     	; 0x2780 <__vector_13+0x7e>
	} else {
		/* store new index */
		UART_RxHead = tmphead;
    2760:	8c 81       	ldd	r24, Y+4	; 0x04
    2762:	80 93 5b 04 	sts	0x045B, r24
		/* store received data in buffer */
		UART_RxBuf[tmphead] = data;
    2766:	8c 81       	ldd	r24, Y+4	; 0x04
    2768:	88 2f       	mov	r24, r24
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	fc 01       	movw	r30, r24
    276e:	e7 52       	subi	r30, 0x27	; 39
    2770:	fc 4f       	sbci	r31, 0xFC	; 252
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	80 83       	st	Z, r24
		chars_in_rx_buffer++;
    2776:	80 91 b8 03 	lds	r24, 0x03B8
    277a:	8f 5f       	subi	r24, 0xFF	; 255
    277c:	80 93 b8 03 	sts	0x03B8, r24
	}

	if (flowControl == FLOWCONTROL_XONXOFF
    2780:	80 91 b5 03 	lds	r24, 0x03B5
    2784:	81 30       	cpi	r24, 0x01	; 1
    2786:	99 f4       	brne	.+38     	; 0x27ae <__vector_13+0xac>
    2788:	80 91 b8 03 	lds	r24, 0x03B8
    278c:	81 36       	cpi	r24, 0x61	; 97
    278e:	78 f0       	brcs	.+30     	; 0x27ae <__vector_13+0xac>
			&& chars_in_rx_buffer > UART_RX_BUFFER_MAX_MARK) {
		/* immediately send XOFF */
		oob_event = 1;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	80 93 b6 03 	sts	0x03B6, r24
		if (!after_xoff_sent) {
    2796:	80 91 b7 03 	lds	r24, 0x03B7
    279a:	88 23       	and	r24, r24
    279c:	31 f4       	brne	.+12     	; 0x27aa <__vector_13+0xa8>
			SendOutOfBand(XOFF);
    279e:	83 e1       	ldi	r24, 0x13	; 19
    27a0:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <SendOutOfBand>
			after_xoff_sent = 1;
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	80 93 b7 03 	sts	0x03B7, r24
		}
		oob_event = 0;
    27aa:	10 92 b6 03 	sts	0x03B6, r1
	}

	UART_LastRxError = lastRxError;
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	80 93 5d 04 	sts	0x045D, r24
}
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	cf 91       	pop	r28
    27be:	df 91       	pop	r29
    27c0:	ff 91       	pop	r31
    27c2:	ef 91       	pop	r30
    27c4:	bf 91       	pop	r27
    27c6:	af 91       	pop	r26
    27c8:	9f 91       	pop	r25
    27ca:	8f 91       	pop	r24
    27cc:	7f 91       	pop	r23
    27ce:	6f 91       	pop	r22
    27d0:	5f 91       	pop	r21
    27d2:	4f 91       	pop	r20
    27d4:	3f 91       	pop	r19
    27d6:	2f 91       	pop	r18
    27d8:	0f 90       	pop	r0
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	0f 90       	pop	r0
    27de:	1f 90       	pop	r1
    27e0:	18 95       	reti

000027e2 <SendOutOfBand>:

void SendOutOfBand(unsigned char c) {
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	0f 92       	push	r0
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << UDRE)))
    27ee:	eb e2       	ldi	r30, 0x2B	; 43
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	88 2f       	mov	r24, r24
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	80 72       	andi	r24, 0x20	; 32
    27fa:	90 70       	andi	r25, 0x00	; 0
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	b9 f3       	breq	.-18     	; 0x27ee <SendOutOfBand+0xc>
		;
	UDR = c;
    2800:	ec e2       	ldi	r30, 0x2C	; 44
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	80 83       	st	Z, r24
}
    2808:	0f 90       	pop	r0
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
 Function: UART Data Register Empty interrupt
 Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
    2810:	1f 92       	push	r1
    2812:	0f 92       	push	r0
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	0f 92       	push	r0
    2818:	11 24       	eor	r1, r1
    281a:	8f 93       	push	r24
    281c:	9f 93       	push	r25
    281e:	af 93       	push	r26
    2820:	bf 93       	push	r27
    2822:	ef 93       	push	r30
    2824:	ff 93       	push	r31
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	0f 92       	push	r0
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;

	if (oob_event) {
    2830:	80 91 b6 03 	lds	r24, 0x03B6
    2834:	88 23       	and	r24, r24
    2836:	01 f5       	brne	.+64     	; 0x2878 <__vector_14+0x68>
		/* suppress transmitting during oob handling */
		return;
	}
	if (UART_TxHead != UART_TxTail) {
    2838:	90 91 59 04 	lds	r25, 0x0459
    283c:	80 91 5a 04 	lds	r24, 0x045A
    2840:	98 17       	cp	r25, r24
    2842:	99 f0       	breq	.+38     	; 0x286a <__vector_14+0x5a>
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    2844:	80 91 5a 04 	lds	r24, 0x045A
    2848:	8f 5f       	subi	r24, 0xFF	; 255
    284a:	8f 71       	andi	r24, 0x1F	; 31
    284c:	89 83       	std	Y+1, r24	; 0x01
		UART_TxTail = tmptail;
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	80 93 5a 04 	sts	0x045A, r24
		/* get one byte from buffer and write it to UART */
		UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
    2854:	ac e2       	ldi	r26, 0x2C	; 44
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	89 81       	ldd	r24, Y+1	; 0x01
    285a:	88 2f       	mov	r24, r24
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	fc 01       	movw	r30, r24
    2860:	e7 54       	subi	r30, 0x47	; 71
    2862:	fc 4f       	sbci	r31, 0xFC	; 252
    2864:	80 81       	ld	r24, Z
    2866:	8c 93       	st	X, r24
    2868:	07 c0       	rjmp	.+14     	; 0x2878 <__vector_14+0x68>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
    286a:	aa e2       	ldi	r26, 0x2A	; 42
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	ea e2       	ldi	r30, 0x2A	; 42
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	8f 7d       	andi	r24, 0xDF	; 223
    2876:	8c 93       	st	X, r24
	}
}
    2878:	0f 90       	pop	r0
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	ff 91       	pop	r31
    2880:	ef 91       	pop	r30
    2882:	bf 91       	pop	r27
    2884:	af 91       	pop	r26
    2886:	9f 91       	pop	r25
    2888:	8f 91       	pop	r24
    288a:	0f 90       	pop	r0
    288c:	0f be       	out	0x3f, r0	; 63
    288e:	0f 90       	pop	r0
    2890:	1f 90       	pop	r1
    2892:	18 95       	reti

00002894 <uart_init>:
 Function: uart_init()
 Purpose:  initialize UART and set baudrate
 Input:    baudrate using macro UART_BAUD_SELECT()
 Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate) {
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	00 d0       	rcall	.+0      	; 0x289a <uart_init+0x6>
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	9a 83       	std	Y+2, r25	; 0x02
    28a0:	89 83       	std	Y+1, r24	; 0x01
	UART_TxHead = 0;
    28a2:	10 92 59 04 	sts	0x0459, r1
	UART_TxTail = 0;
    28a6:	10 92 5a 04 	sts	0x045A, r1
	UART_RxHead = 0;
    28aa:	10 92 5b 04 	sts	0x045B, r1
	UART_RxTail = 0;
    28ae:	10 92 5c 04 	sts	0x045C, r1
	/* enable UART receiver and transmmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if (baudrate & 0x8000) {
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	9a 81       	ldd	r25, Y+2	; 0x02
    28b6:	99 23       	and	r25, r25
    28b8:	4c f4       	brge	.+18     	; 0x28cc <uart_init+0x38>
		UART0_STATUS = (1 << U2X);  //Enable 2x speed
    28ba:	eb e2       	ldi	r30, 0x2B	; 43
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	82 e0       	ldi	r24, 0x02	; 2
    28c0:	80 83       	st	Z, r24
		baudrate &= ~0x8000;
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	9a 81       	ldd	r25, Y+2	; 0x02
    28c6:	9f 77       	andi	r25, 0x7F	; 127
    28c8:	9a 83       	std	Y+2, r25	; 0x02
    28ca:	89 83       	std	Y+1, r24	; 0x01
	}
	UBRRH = (unsigned char) (baudrate >> 8);
    28cc:	e0 e4       	ldi	r30, 0x40	; 64
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	9a 81       	ldd	r25, Y+2	; 0x02
    28d4:	89 2f       	mov	r24, r25
    28d6:	99 27       	eor	r25, r25
    28d8:	80 83       	st	Z, r24
	UBRRL = (unsigned char) baudrate;
    28da:	e9 e2       	ldi	r30, 0x29	; 41
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	80 83       	st	Z, r24

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | (1 << RXEN) | (1 << TXEN);
    28e2:	ea e2       	ldi	r30, 0x2A	; 42
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	88 e9       	ldi	r24, 0x98	; 152
    28e8:	80 83       	st	Z, r24

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
    28ea:	e0 e4       	ldi	r30, 0x40	; 64
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	86 e8       	ldi	r24, 0x86	; 134
    28f0:	80 83       	st	Z, r24
	/* Enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	cf 91       	pop	r28
    28f8:	df 91       	pop	r29
    28fa:	08 95       	ret

000028fc <uart_getc>:
 Function: uart_getc()
 Purpose:  return byte from ringbuffer
 Returns:  lower byte:  received byte from ringbuffer
 higher byte: last receive error
 **************************************************************************/
unsigned int uart_getc(void) {
    28fc:	df 93       	push	r29
    28fe:	cf 93       	push	r28
    2900:	00 d0       	rcall	.+0      	; 0x2902 <uart_getc+0x6>
    2902:	00 d0       	rcall	.+0      	; 0x2904 <uart_getc+0x8>
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;
	unsigned char data;

	if (UART_RxHead == UART_RxTail) {
    2908:	90 91 5b 04 	lds	r25, 0x045B
    290c:	80 91 5c 04 	lds	r24, 0x045C
    2910:	98 17       	cp	r25, r24
    2912:	29 f4       	brne	.+10     	; 0x291e <uart_getc+0x22>
		return UART_NO_DATA; /* no data available */
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	91 e0       	ldi	r25, 0x01	; 1
    2918:	9c 83       	std	Y+4, r25	; 0x04
    291a:	8b 83       	std	Y+3, r24	; 0x03
    291c:	3c c0       	rjmp	.+120    	; 0x2996 <uart_getc+0x9a>
	}

	/* calculate /store buffer index */
	tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    291e:	80 91 5c 04 	lds	r24, 0x045C
    2922:	8f 5f       	subi	r24, 0xFF	; 255
    2924:	8f 77       	andi	r24, 0x7F	; 127
    2926:	8a 83       	std	Y+2, r24	; 0x02
	UART_RxTail = tmptail;
    2928:	8a 81       	ldd	r24, Y+2	; 0x02
    292a:	80 93 5c 04 	sts	0x045C, r24

	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	88 2f       	mov	r24, r24
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	fc 01       	movw	r30, r24
    2936:	e7 52       	subi	r30, 0x27	; 39
    2938:	fc 4f       	sbci	r31, 0xFC	; 252
    293a:	80 81       	ld	r24, Z
    293c:	89 83       	std	Y+1, r24	; 0x01
	if (chars_in_rx_buffer > 0) {
    293e:	80 91 b8 03 	lds	r24, 0x03B8
    2942:	88 23       	and	r24, r24
    2944:	29 f0       	breq	.+10     	; 0x2950 <uart_getc+0x54>
		chars_in_rx_buffer--;
    2946:	80 91 b8 03 	lds	r24, 0x03B8
    294a:	81 50       	subi	r24, 0x01	; 1
    294c:	80 93 b8 03 	sts	0x03B8, r24
	}
	if ((flowControl == FLOWCONTROL_XONXOFF) && after_xoff_sent) {
    2950:	80 91 b5 03 	lds	r24, 0x03B5
    2954:	81 30       	cpi	r24, 0x01	; 1
    2956:	91 f4       	brne	.+36     	; 0x297c <uart_getc+0x80>
    2958:	80 91 b7 03 	lds	r24, 0x03B7
    295c:	88 23       	and	r24, r24
    295e:	71 f0       	breq	.+28     	; 0x297c <uart_getc+0x80>
		if (chars_in_rx_buffer <= UART_RX_BUFFER_MIN_MARK) {
    2960:	80 91 b8 03 	lds	r24, 0x03B8
    2964:	81 31       	cpi	r24, 0x11	; 17
    2966:	50 f4       	brcc	.+20     	; 0x297c <uart_getc+0x80>
			/* immediately send XON */
			oob_event = 1;
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	80 93 b6 03 	sts	0x03B6, r24
			SendOutOfBand(XON);
    296e:	81 e1       	ldi	r24, 0x11	; 17
    2970:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <SendOutOfBand>
			after_xoff_sent = 0;
    2974:	10 92 b7 03 	sts	0x03B7, r1
			oob_event = 0;
    2978:	10 92 b6 03 	sts	0x03B6, r1
		}
	}

	return (UART_LastRxError << 8) + data;
    297c:	80 91 5d 04 	lds	r24, 0x045D
    2980:	88 2f       	mov	r24, r24
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	38 2f       	mov	r19, r24
    2986:	22 27       	eor	r18, r18
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	88 2f       	mov	r24, r24
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	82 0f       	add	r24, r18
    2990:	93 1f       	adc	r25, r19
    2992:	9c 83       	std	Y+4, r25	; 0x04
    2994:	8b 83       	std	Y+3, r24	; 0x03
    2996:	8b 81       	ldd	r24, Y+3	; 0x03
    2998:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	cf 91       	pop	r28
    29a4:	df 91       	pop	r29
    29a6:	08 95       	ret

000029a8 <uart_putc>:
 Function: uart_putc()
 Purpose:  write byte to ringbuffer for transmitting via UART
 Input:    byte to be transmitted
 Returns:  none
 **************************************************************************/
void uart_putc(unsigned char data) {
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <uart_putc+0x6>
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char tmphead;

	tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    29b4:	80 91 59 04 	lds	r24, 0x0459
    29b8:	8f 5f       	subi	r24, 0xFF	; 255
    29ba:	8f 71       	andi	r24, 0x1F	; 31
    29bc:	89 83       	std	Y+1, r24	; 0x01

	while (tmphead == UART_TxTail) {
    29be:	90 91 5a 04 	lds	r25, 0x045A
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	89 17       	cp	r24, r25
    29c6:	d9 f3       	breq	.-10     	; 0x29be <uart_putc+0x16>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	88 2f       	mov	r24, r24
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	fc 01       	movw	r30, r24
    29d0:	e7 54       	subi	r30, 0x47	; 71
    29d2:	fc 4f       	sbci	r31, 0xFC	; 252
    29d4:	8a 81       	ldd	r24, Y+2	; 0x02
    29d6:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	80 93 59 04 	sts	0x0459, r24

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    29de:	aa e2       	ldi	r26, 0x2A	; 42
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	ea e2       	ldi	r30, 0x2A	; 42
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	80 62       	ori	r24, 0x20	; 32
    29ea:	8c 93       	st	X, r24

}/* uart_putc */
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	cf 91       	pop	r28
    29f2:	df 91       	pop	r29
    29f4:	08 95       	ret

000029f6 <uart_puts>:
 Function: uart_puts()
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
    29f6:	df 93       	push	r29
    29f8:	cf 93       	push	r28
    29fa:	00 d0       	rcall	.+0      	; 0x29fc <uart_puts+0x6>
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	9a 83       	std	Y+2, r25	; 0x02
    2a02:	89 83       	std	Y+1, r24	; 0x01
    2a04:	0b c0       	rjmp	.+22     	; 0x2a1c <uart_puts+0x26>
	while (*s)
		uart_putc(*s++);
    2a06:	e9 81       	ldd	r30, Y+1	; 0x01
    2a08:	fa 81       	ldd	r31, Y+2	; 0x02
    2a0a:	20 81       	ld	r18, Z
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a10:	01 96       	adiw	r24, 0x01	; 1
    2a12:	9a 83       	std	Y+2, r25	; 0x02
    2a14:	89 83       	std	Y+1, r24	; 0x01
    2a16:	82 2f       	mov	r24, r18
    2a18:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <uart_putc>
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
	while (*s)
    2a1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a20:	80 81       	ld	r24, Z
    2a22:	88 23       	and	r24, r24
    2a24:	81 f7       	brne	.-32     	; 0x2a06 <uart_puts+0x10>
		uart_putc(*s++);

}/* uart_puts */
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	cf 91       	pop	r28
    2a2c:	df 91       	pop	r29
    2a2e:	08 95       	ret

00002a30 <uart_puts_p>:
 Function: uart_puts_p()
 Purpose:  transmit string from program memory to UART
 Input:    program memory string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
    2a30:	df 93       	push	r29
    2a32:	cf 93       	push	r28
    2a34:	00 d0       	rcall	.+0      	; 0x2a36 <uart_puts_p+0x6>
    2a36:	00 d0       	rcall	.+0      	; 0x2a38 <uart_puts_p+0x8>
    2a38:	00 d0       	rcall	.+0      	; 0x2a3a <uart_puts_p+0xa>
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
    2a3e:	9d 83       	std	Y+5, r25	; 0x05
    2a40:	8c 83       	std	Y+4, r24	; 0x04
    2a42:	03 c0       	rjmp	.+6      	; 0x2a4a <uart_puts_p+0x1a>
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
		uart_putc(c);
    2a44:	8e 81       	ldd	r24, Y+6	; 0x06
    2a46:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <uart_putc>
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
    2a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a4e:	9b 83       	std	Y+3, r25	; 0x03
    2a50:	8a 83       	std	Y+2, r24	; 0x02
    2a52:	8c 81       	ldd	r24, Y+4	; 0x04
    2a54:	9d 81       	ldd	r25, Y+5	; 0x05
    2a56:	01 96       	adiw	r24, 0x01	; 1
    2a58:	9d 83       	std	Y+5, r25	; 0x05
    2a5a:	8c 83       	std	Y+4, r24	; 0x04
    2a5c:	ea 81       	ldd	r30, Y+2	; 0x02
    2a5e:	fb 81       	ldd	r31, Y+3	; 0x03
    2a60:	84 91       	lpm	r24, Z+
    2a62:	89 83       	std	Y+1, r24	; 0x01
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	8e 83       	std	Y+6, r24	; 0x06
    2a68:	8e 81       	ldd	r24, Y+6	; 0x06
    2a6a:	88 23       	and	r24, r24
    2a6c:	59 f7       	brne	.-42     	; 0x2a44 <uart_puts_p+0x14>
		uart_putc(c);

}/* uart_puts_p */
    2a6e:	26 96       	adiw	r28, 0x06	; 6
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	de bf       	out	0x3e, r29	; 62
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	cd bf       	out	0x3d, r28	; 61
    2a7a:	cf 91       	pop	r28
    2a7c:	df 91       	pop	r29
    2a7e:	08 95       	ret

00002a80 <__prologue_saves__>:
    2a80:	2f 92       	push	r2
    2a82:	3f 92       	push	r3
    2a84:	4f 92       	push	r4
    2a86:	5f 92       	push	r5
    2a88:	6f 92       	push	r6
    2a8a:	7f 92       	push	r7
    2a8c:	8f 92       	push	r8
    2a8e:	9f 92       	push	r9
    2a90:	af 92       	push	r10
    2a92:	bf 92       	push	r11
    2a94:	cf 92       	push	r12
    2a96:	df 92       	push	r13
    2a98:	ef 92       	push	r14
    2a9a:	ff 92       	push	r15
    2a9c:	0f 93       	push	r16
    2a9e:	1f 93       	push	r17
    2aa0:	cf 93       	push	r28
    2aa2:	df 93       	push	r29
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	ca 1b       	sub	r28, r26
    2aaa:	db 0b       	sbc	r29, r27
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	f8 94       	cli
    2ab0:	de bf       	out	0x3e, r29	; 62
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	cd bf       	out	0x3d, r28	; 61
    2ab6:	09 94       	ijmp

00002ab8 <__epilogue_restores__>:
    2ab8:	2a 88       	ldd	r2, Y+18	; 0x12
    2aba:	39 88       	ldd	r3, Y+17	; 0x11
    2abc:	48 88       	ldd	r4, Y+16	; 0x10
    2abe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ac0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ac2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ac4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ac6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ac8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2aca:	b9 84       	ldd	r11, Y+9	; 0x09
    2acc:	c8 84       	ldd	r12, Y+8	; 0x08
    2ace:	df 80       	ldd	r13, Y+7	; 0x07
    2ad0:	ee 80       	ldd	r14, Y+6	; 0x06
    2ad2:	fd 80       	ldd	r15, Y+5	; 0x05
    2ad4:	0c 81       	ldd	r16, Y+4	; 0x04
    2ad6:	1b 81       	ldd	r17, Y+3	; 0x03
    2ad8:	aa 81       	ldd	r26, Y+2	; 0x02
    2ada:	b9 81       	ldd	r27, Y+1	; 0x01
    2adc:	ce 0f       	add	r28, r30
    2ade:	d1 1d       	adc	r29, r1
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	f8 94       	cli
    2ae4:	de bf       	out	0x3e, r29	; 62
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	cd bf       	out	0x3d, r28	; 61
    2aea:	ed 01       	movw	r28, r26
    2aec:	08 95       	ret

00002aee <_exit>:
    2aee:	f8 94       	cli

00002af0 <__stop_program>:
    2af0:	ff cf       	rjmp	.-2      	; 0x2af0 <__stop_program>

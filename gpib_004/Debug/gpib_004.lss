
gpib_004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001dc4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000364  00800060  00001dc4  00001e38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000106  008003c4  00002128  0000219c  2**0
                  ALLOC
  3 .stab         00004224  00000000  00000000  0000219c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002103  00000000  00000000  000063c0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__vector_7>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__vector_13>
      38:	0c 94 94 0d 	jmp	0x1b28	; 0x1b28 <__vector_14>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000054 <__c.1896>:
      54:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
      64:	65 72 72 6f 72 3a 20 00                             error: .

0000006c <__c.1894>:
      6c:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
      7c:	6f 72 3a 20 00                                      or: .

00000081 <__c.1892>:
      81:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
      91:	3a 20 00                                            : .

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	13 e0       	ldi	r17, 0x03	; 3
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	e4 ec       	ldi	r30, 0xC4	; 196
      a8:	fd e1       	ldi	r31, 0x1D	; 29
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
      b0:	a4 3c       	cpi	r26, 0xC4	; 196
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>

000000b6 <__do_clear_bss>:
      b6:	14 e0       	ldi	r17, 0x04	; 4
      b8:	a4 ec       	ldi	r26, 0xC4	; 196
      ba:	b3 e0       	ldi	r27, 0x03	; 3
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	aa 3c       	cpi	r26, 0xCA	; 202
      c2:	b1 07       	cpc	r27, r17
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 25 0a 	call	0x144a	; 0x144a <main>
      ca:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000d2 <atoi>:
      d2:	fc 01       	movw	r30, r24
      d4:	88 27       	eor	r24, r24
      d6:	99 27       	eor	r25, r25
      d8:	e8 94       	clt
      da:	21 91       	ld	r18, Z+
      dc:	20 32       	cpi	r18, 0x20	; 32
      de:	e9 f3       	breq	.-6      	; 0xda <atoi+0x8>
      e0:	29 30       	cpi	r18, 0x09	; 9
      e2:	10 f0       	brcs	.+4      	; 0xe8 <atoi+0x16>
      e4:	2e 30       	cpi	r18, 0x0E	; 14
      e6:	c8 f3       	brcs	.-14     	; 0xda <atoi+0x8>
      e8:	2b 32       	cpi	r18, 0x2B	; 43
      ea:	41 f0       	breq	.+16     	; 0xfc <atoi+0x2a>
      ec:	2d 32       	cpi	r18, 0x2D	; 45
      ee:	39 f4       	brne	.+14     	; 0xfe <atoi+0x2c>
      f0:	68 94       	set
      f2:	04 c0       	rjmp	.+8      	; 0xfc <atoi+0x2a>
      f4:	0e 94 9b 00 	call	0x136	; 0x136 <__mulhi_const_10>
      f8:	82 0f       	add	r24, r18
      fa:	91 1d       	adc	r25, r1
      fc:	21 91       	ld	r18, Z+
      fe:	20 53       	subi	r18, 0x30	; 48
     100:	2a 30       	cpi	r18, 0x0A	; 10
     102:	c0 f3       	brcs	.-16     	; 0xf4 <atoi+0x22>
     104:	1e f4       	brtc	.+6      	; 0x10c <atoi+0x3a>
     106:	90 95       	com	r25
     108:	81 95       	neg	r24
     10a:	9f 4f       	sbci	r25, 0xFF	; 255
     10c:	08 95       	ret

0000010e <strchr>:
     10e:	fc 01       	movw	r30, r24
     110:	81 91       	ld	r24, Z+
     112:	86 17       	cp	r24, r22
     114:	21 f0       	breq	.+8      	; 0x11e <strchr+0x10>
     116:	88 23       	and	r24, r24
     118:	d9 f7       	brne	.-10     	; 0x110 <strchr+0x2>
     11a:	99 27       	eor	r25, r25
     11c:	08 95       	ret
     11e:	31 97       	sbiw	r30, 0x01	; 1
     120:	cf 01       	movw	r24, r30
     122:	08 95       	ret

00000124 <strlen>:
     124:	fc 01       	movw	r30, r24
     126:	01 90       	ld	r0, Z+
     128:	00 20       	and	r0, r0
     12a:	e9 f7       	brne	.-6      	; 0x126 <strlen+0x2>
     12c:	80 95       	com	r24
     12e:	90 95       	com	r25
     130:	8e 0f       	add	r24, r30
     132:	9f 1f       	adc	r25, r31
     134:	08 95       	ret

00000136 <__mulhi_const_10>:
     136:	7a e0       	ldi	r23, 0x0A	; 10
     138:	97 9f       	mul	r25, r23
     13a:	90 2d       	mov	r25, r0
     13c:	87 9f       	mul	r24, r23
     13e:	80 2d       	mov	r24, r0
     140:	91 0d       	add	r25, r1
     142:	11 24       	eor	r1, r1
     144:	08 95       	ret

00000146 <sprintf>:
     146:	ae e0       	ldi	r26, 0x0E	; 14
     148:	b0 e0       	ldi	r27, 0x00	; 0
     14a:	e9 ea       	ldi	r30, 0xA9	; 169
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__prologue_saves__+0x1c>
     152:	0d 89       	ldd	r16, Y+21	; 0x15
     154:	1e 89       	ldd	r17, Y+22	; 0x16
     156:	86 e0       	ldi	r24, 0x06	; 6
     158:	8c 83       	std	Y+4, r24	; 0x04
     15a:	1a 83       	std	Y+2, r17	; 0x02
     15c:	09 83       	std	Y+1, r16	; 0x01
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	9f e7       	ldi	r25, 0x7F	; 127
     162:	9e 83       	std	Y+6, r25	; 0x06
     164:	8d 83       	std	Y+5, r24	; 0x05
     166:	9e 01       	movw	r18, r28
     168:	27 5e       	subi	r18, 0xE7	; 231
     16a:	3f 4f       	sbci	r19, 0xFF	; 255
     16c:	ce 01       	movw	r24, r28
     16e:	01 96       	adiw	r24, 0x01	; 1
     170:	6f 89       	ldd	r22, Y+23	; 0x17
     172:	78 8d       	ldd	r23, Y+24	; 0x18
     174:	a9 01       	movw	r20, r18
     176:	0e 94 c7 00 	call	0x18e	; 0x18e <vfprintf>
     17a:	2f 81       	ldd	r18, Y+7	; 0x07
     17c:	38 85       	ldd	r19, Y+8	; 0x08
     17e:	02 0f       	add	r16, r18
     180:	13 1f       	adc	r17, r19
     182:	f8 01       	movw	r30, r16
     184:	10 82       	st	Z, r1
     186:	2e 96       	adiw	r28, 0x0e	; 14
     188:	e4 e0       	ldi	r30, 0x04	; 4
     18a:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <__epilogue_restores__+0x1c>

0000018e <vfprintf>:
     18e:	ab e0       	ldi	r26, 0x0B	; 11
     190:	b0 e0       	ldi	r27, 0x00	; 0
     192:	ed ec       	ldi	r30, 0xCD	; 205
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__prologue_saves__>
     19a:	3c 01       	movw	r6, r24
     19c:	2b 01       	movw	r4, r22
     19e:	5a 01       	movw	r10, r20
     1a0:	fc 01       	movw	r30, r24
     1a2:	17 82       	std	Z+7, r1	; 0x07
     1a4:	16 82       	std	Z+6, r1	; 0x06
     1a6:	83 81       	ldd	r24, Z+3	; 0x03
     1a8:	81 fd       	sbrc	r24, 1
     1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <vfprintf+0x24>
     1ac:	6f ef       	ldi	r22, 0xFF	; 255
     1ae:	7f ef       	ldi	r23, 0xFF	; 255
     1b0:	c6 c1       	rjmp	.+908    	; 0x53e <vfprintf+0x3b0>
     1b2:	9a e0       	ldi	r25, 0x0A	; 10
     1b4:	89 2e       	mov	r8, r25
     1b6:	1e 01       	movw	r2, r28
     1b8:	08 94       	sec
     1ba:	21 1c       	adc	r2, r1
     1bc:	31 1c       	adc	r3, r1
     1be:	f3 01       	movw	r30, r6
     1c0:	23 81       	ldd	r18, Z+3	; 0x03
     1c2:	f2 01       	movw	r30, r4
     1c4:	23 fd       	sbrc	r18, 3
     1c6:	85 91       	lpm	r24, Z+
     1c8:	23 ff       	sbrs	r18, 3
     1ca:	81 91       	ld	r24, Z+
     1cc:	2f 01       	movw	r4, r30
     1ce:	88 23       	and	r24, r24
     1d0:	09 f4       	brne	.+2      	; 0x1d4 <vfprintf+0x46>
     1d2:	b2 c1       	rjmp	.+868    	; 0x538 <vfprintf+0x3aa>
     1d4:	85 32       	cpi	r24, 0x25	; 37
     1d6:	39 f4       	brne	.+14     	; 0x1e6 <vfprintf+0x58>
     1d8:	23 fd       	sbrc	r18, 3
     1da:	85 91       	lpm	r24, Z+
     1dc:	23 ff       	sbrs	r18, 3
     1de:	81 91       	ld	r24, Z+
     1e0:	2f 01       	movw	r4, r30
     1e2:	85 32       	cpi	r24, 0x25	; 37
     1e4:	29 f4       	brne	.+10     	; 0x1f0 <vfprintf+0x62>
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	b3 01       	movw	r22, r6
     1ea:	0e 94 ba 02 	call	0x574	; 0x574 <fputc>
     1ee:	e7 cf       	rjmp	.-50     	; 0x1be <vfprintf+0x30>
     1f0:	98 2f       	mov	r25, r24
     1f2:	ff 24       	eor	r15, r15
     1f4:	ee 24       	eor	r14, r14
     1f6:	99 24       	eor	r9, r9
     1f8:	ff e1       	ldi	r31, 0x1F	; 31
     1fa:	ff 15       	cp	r31, r15
     1fc:	d0 f0       	brcs	.+52     	; 0x232 <vfprintf+0xa4>
     1fe:	9b 32       	cpi	r25, 0x2B	; 43
     200:	69 f0       	breq	.+26     	; 0x21c <vfprintf+0x8e>
     202:	9c 32       	cpi	r25, 0x2C	; 44
     204:	28 f4       	brcc	.+10     	; 0x210 <vfprintf+0x82>
     206:	90 32       	cpi	r25, 0x20	; 32
     208:	59 f0       	breq	.+22     	; 0x220 <vfprintf+0x92>
     20a:	93 32       	cpi	r25, 0x23	; 35
     20c:	91 f4       	brne	.+36     	; 0x232 <vfprintf+0xa4>
     20e:	0e c0       	rjmp	.+28     	; 0x22c <vfprintf+0x9e>
     210:	9d 32       	cpi	r25, 0x2D	; 45
     212:	49 f0       	breq	.+18     	; 0x226 <vfprintf+0x98>
     214:	90 33       	cpi	r25, 0x30	; 48
     216:	69 f4       	brne	.+26     	; 0x232 <vfprintf+0xa4>
     218:	41 e0       	ldi	r20, 0x01	; 1
     21a:	24 c0       	rjmp	.+72     	; 0x264 <vfprintf+0xd6>
     21c:	52 e0       	ldi	r21, 0x02	; 2
     21e:	f5 2a       	or	r15, r21
     220:	84 e0       	ldi	r24, 0x04	; 4
     222:	f8 2a       	or	r15, r24
     224:	28 c0       	rjmp	.+80     	; 0x276 <vfprintf+0xe8>
     226:	98 e0       	ldi	r25, 0x08	; 8
     228:	f9 2a       	or	r15, r25
     22a:	25 c0       	rjmp	.+74     	; 0x276 <vfprintf+0xe8>
     22c:	e0 e1       	ldi	r30, 0x10	; 16
     22e:	fe 2a       	or	r15, r30
     230:	22 c0       	rjmp	.+68     	; 0x276 <vfprintf+0xe8>
     232:	f7 fc       	sbrc	r15, 7
     234:	29 c0       	rjmp	.+82     	; 0x288 <vfprintf+0xfa>
     236:	89 2f       	mov	r24, r25
     238:	80 53       	subi	r24, 0x30	; 48
     23a:	8a 30       	cpi	r24, 0x0A	; 10
     23c:	70 f4       	brcc	.+28     	; 0x25a <vfprintf+0xcc>
     23e:	f6 fe       	sbrs	r15, 6
     240:	05 c0       	rjmp	.+10     	; 0x24c <vfprintf+0xbe>
     242:	98 9c       	mul	r9, r8
     244:	90 2c       	mov	r9, r0
     246:	11 24       	eor	r1, r1
     248:	98 0e       	add	r9, r24
     24a:	15 c0       	rjmp	.+42     	; 0x276 <vfprintf+0xe8>
     24c:	e8 9c       	mul	r14, r8
     24e:	e0 2c       	mov	r14, r0
     250:	11 24       	eor	r1, r1
     252:	e8 0e       	add	r14, r24
     254:	f0 e2       	ldi	r31, 0x20	; 32
     256:	ff 2a       	or	r15, r31
     258:	0e c0       	rjmp	.+28     	; 0x276 <vfprintf+0xe8>
     25a:	9e 32       	cpi	r25, 0x2E	; 46
     25c:	29 f4       	brne	.+10     	; 0x268 <vfprintf+0xda>
     25e:	f6 fc       	sbrc	r15, 6
     260:	6b c1       	rjmp	.+726    	; 0x538 <vfprintf+0x3aa>
     262:	40 e4       	ldi	r20, 0x40	; 64
     264:	f4 2a       	or	r15, r20
     266:	07 c0       	rjmp	.+14     	; 0x276 <vfprintf+0xe8>
     268:	9c 36       	cpi	r25, 0x6C	; 108
     26a:	19 f4       	brne	.+6      	; 0x272 <vfprintf+0xe4>
     26c:	50 e8       	ldi	r21, 0x80	; 128
     26e:	f5 2a       	or	r15, r21
     270:	02 c0       	rjmp	.+4      	; 0x276 <vfprintf+0xe8>
     272:	98 36       	cpi	r25, 0x68	; 104
     274:	49 f4       	brne	.+18     	; 0x288 <vfprintf+0xfa>
     276:	f2 01       	movw	r30, r4
     278:	23 fd       	sbrc	r18, 3
     27a:	95 91       	lpm	r25, Z+
     27c:	23 ff       	sbrs	r18, 3
     27e:	91 91       	ld	r25, Z+
     280:	2f 01       	movw	r4, r30
     282:	99 23       	and	r25, r25
     284:	09 f0       	breq	.+2      	; 0x288 <vfprintf+0xfa>
     286:	b8 cf       	rjmp	.-144    	; 0x1f8 <vfprintf+0x6a>
     288:	89 2f       	mov	r24, r25
     28a:	85 54       	subi	r24, 0x45	; 69
     28c:	83 30       	cpi	r24, 0x03	; 3
     28e:	18 f0       	brcs	.+6      	; 0x296 <vfprintf+0x108>
     290:	80 52       	subi	r24, 0x20	; 32
     292:	83 30       	cpi	r24, 0x03	; 3
     294:	38 f4       	brcc	.+14     	; 0x2a4 <vfprintf+0x116>
     296:	44 e0       	ldi	r20, 0x04	; 4
     298:	50 e0       	ldi	r21, 0x00	; 0
     29a:	a4 0e       	add	r10, r20
     29c:	b5 1e       	adc	r11, r21
     29e:	5f e3       	ldi	r21, 0x3F	; 63
     2a0:	59 83       	std	Y+1, r21	; 0x01
     2a2:	0f c0       	rjmp	.+30     	; 0x2c2 <vfprintf+0x134>
     2a4:	93 36       	cpi	r25, 0x63	; 99
     2a6:	31 f0       	breq	.+12     	; 0x2b4 <vfprintf+0x126>
     2a8:	93 37       	cpi	r25, 0x73	; 115
     2aa:	79 f0       	breq	.+30     	; 0x2ca <vfprintf+0x13c>
     2ac:	93 35       	cpi	r25, 0x53	; 83
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <vfprintf+0x124>
     2b0:	56 c0       	rjmp	.+172    	; 0x35e <vfprintf+0x1d0>
     2b2:	20 c0       	rjmp	.+64     	; 0x2f4 <vfprintf+0x166>
     2b4:	f5 01       	movw	r30, r10
     2b6:	80 81       	ld	r24, Z
     2b8:	89 83       	std	Y+1, r24	; 0x01
     2ba:	42 e0       	ldi	r20, 0x02	; 2
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	a4 0e       	add	r10, r20
     2c0:	b5 1e       	adc	r11, r21
     2c2:	61 01       	movw	r12, r2
     2c4:	01 e0       	ldi	r16, 0x01	; 1
     2c6:	10 e0       	ldi	r17, 0x00	; 0
     2c8:	12 c0       	rjmp	.+36     	; 0x2ee <vfprintf+0x160>
     2ca:	f5 01       	movw	r30, r10
     2cc:	c0 80       	ld	r12, Z
     2ce:	d1 80       	ldd	r13, Z+1	; 0x01
     2d0:	f6 fc       	sbrc	r15, 6
     2d2:	03 c0       	rjmp	.+6      	; 0x2da <vfprintf+0x14c>
     2d4:	6f ef       	ldi	r22, 0xFF	; 255
     2d6:	7f ef       	ldi	r23, 0xFF	; 255
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <vfprintf+0x150>
     2da:	69 2d       	mov	r22, r9
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	42 e0       	ldi	r20, 0x02	; 2
     2e0:	50 e0       	ldi	r21, 0x00	; 0
     2e2:	a4 0e       	add	r10, r20
     2e4:	b5 1e       	adc	r11, r21
     2e6:	c6 01       	movw	r24, r12
     2e8:	0e 94 af 02 	call	0x55e	; 0x55e <strnlen>
     2ec:	8c 01       	movw	r16, r24
     2ee:	5f e7       	ldi	r21, 0x7F	; 127
     2f0:	f5 22       	and	r15, r21
     2f2:	14 c0       	rjmp	.+40     	; 0x31c <vfprintf+0x18e>
     2f4:	f5 01       	movw	r30, r10
     2f6:	c0 80       	ld	r12, Z
     2f8:	d1 80       	ldd	r13, Z+1	; 0x01
     2fa:	f6 fc       	sbrc	r15, 6
     2fc:	03 c0       	rjmp	.+6      	; 0x304 <vfprintf+0x176>
     2fe:	6f ef       	ldi	r22, 0xFF	; 255
     300:	7f ef       	ldi	r23, 0xFF	; 255
     302:	02 c0       	rjmp	.+4      	; 0x308 <vfprintf+0x17a>
     304:	69 2d       	mov	r22, r9
     306:	70 e0       	ldi	r23, 0x00	; 0
     308:	42 e0       	ldi	r20, 0x02	; 2
     30a:	50 e0       	ldi	r21, 0x00	; 0
     30c:	a4 0e       	add	r10, r20
     30e:	b5 1e       	adc	r11, r21
     310:	c6 01       	movw	r24, r12
     312:	0e 94 a4 02 	call	0x548	; 0x548 <strnlen_P>
     316:	8c 01       	movw	r16, r24
     318:	50 e8       	ldi	r21, 0x80	; 128
     31a:	f5 2a       	or	r15, r21
     31c:	f3 fe       	sbrs	r15, 3
     31e:	07 c0       	rjmp	.+14     	; 0x32e <vfprintf+0x1a0>
     320:	1a c0       	rjmp	.+52     	; 0x356 <vfprintf+0x1c8>
     322:	80 e2       	ldi	r24, 0x20	; 32
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	b3 01       	movw	r22, r6
     328:	0e 94 ba 02 	call	0x574	; 0x574 <fputc>
     32c:	ea 94       	dec	r14
     32e:	8e 2d       	mov	r24, r14
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	08 17       	cp	r16, r24
     334:	19 07       	cpc	r17, r25
     336:	a8 f3       	brcs	.-22     	; 0x322 <vfprintf+0x194>
     338:	0e c0       	rjmp	.+28     	; 0x356 <vfprintf+0x1c8>
     33a:	f6 01       	movw	r30, r12
     33c:	f7 fc       	sbrc	r15, 7
     33e:	85 91       	lpm	r24, Z+
     340:	f7 fe       	sbrs	r15, 7
     342:	81 91       	ld	r24, Z+
     344:	6f 01       	movw	r12, r30
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	b3 01       	movw	r22, r6
     34a:	0e 94 ba 02 	call	0x574	; 0x574 <fputc>
     34e:	e1 10       	cpse	r14, r1
     350:	ea 94       	dec	r14
     352:	01 50       	subi	r16, 0x01	; 1
     354:	10 40       	sbci	r17, 0x00	; 0
     356:	01 15       	cp	r16, r1
     358:	11 05       	cpc	r17, r1
     35a:	79 f7       	brne	.-34     	; 0x33a <vfprintf+0x1ac>
     35c:	ea c0       	rjmp	.+468    	; 0x532 <vfprintf+0x3a4>
     35e:	94 36       	cpi	r25, 0x64	; 100
     360:	11 f0       	breq	.+4      	; 0x366 <vfprintf+0x1d8>
     362:	99 36       	cpi	r25, 0x69	; 105
     364:	69 f5       	brne	.+90     	; 0x3c0 <vfprintf+0x232>
     366:	f7 fe       	sbrs	r15, 7
     368:	08 c0       	rjmp	.+16     	; 0x37a <vfprintf+0x1ec>
     36a:	f5 01       	movw	r30, r10
     36c:	20 81       	ld	r18, Z
     36e:	31 81       	ldd	r19, Z+1	; 0x01
     370:	42 81       	ldd	r20, Z+2	; 0x02
     372:	53 81       	ldd	r21, Z+3	; 0x03
     374:	84 e0       	ldi	r24, 0x04	; 4
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0a c0       	rjmp	.+20     	; 0x38e <vfprintf+0x200>
     37a:	f5 01       	movw	r30, r10
     37c:	80 81       	ld	r24, Z
     37e:	91 81       	ldd	r25, Z+1	; 0x01
     380:	9c 01       	movw	r18, r24
     382:	44 27       	eor	r20, r20
     384:	37 fd       	sbrc	r19, 7
     386:	40 95       	com	r20
     388:	54 2f       	mov	r21, r20
     38a:	82 e0       	ldi	r24, 0x02	; 2
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	a8 0e       	add	r10, r24
     390:	b9 1e       	adc	r11, r25
     392:	9f e6       	ldi	r25, 0x6F	; 111
     394:	f9 22       	and	r15, r25
     396:	57 ff       	sbrs	r21, 7
     398:	09 c0       	rjmp	.+18     	; 0x3ac <vfprintf+0x21e>
     39a:	50 95       	com	r21
     39c:	40 95       	com	r20
     39e:	30 95       	com	r19
     3a0:	21 95       	neg	r18
     3a2:	3f 4f       	sbci	r19, 0xFF	; 255
     3a4:	4f 4f       	sbci	r20, 0xFF	; 255
     3a6:	5f 4f       	sbci	r21, 0xFF	; 255
     3a8:	e0 e8       	ldi	r30, 0x80	; 128
     3aa:	fe 2a       	or	r15, r30
     3ac:	ca 01       	movw	r24, r20
     3ae:	b9 01       	movw	r22, r18
     3b0:	a1 01       	movw	r20, r2
     3b2:	2a e0       	ldi	r18, 0x0A	; 10
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__ultoa_invert>
     3ba:	d8 2e       	mov	r13, r24
     3bc:	d2 18       	sub	r13, r2
     3be:	40 c0       	rjmp	.+128    	; 0x440 <vfprintf+0x2b2>
     3c0:	95 37       	cpi	r25, 0x75	; 117
     3c2:	29 f4       	brne	.+10     	; 0x3ce <vfprintf+0x240>
     3c4:	1f 2d       	mov	r17, r15
     3c6:	1f 7e       	andi	r17, 0xEF	; 239
     3c8:	2a e0       	ldi	r18, 0x0A	; 10
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	1d c0       	rjmp	.+58     	; 0x408 <vfprintf+0x27a>
     3ce:	1f 2d       	mov	r17, r15
     3d0:	19 7f       	andi	r17, 0xF9	; 249
     3d2:	9f 36       	cpi	r25, 0x6F	; 111
     3d4:	61 f0       	breq	.+24     	; 0x3ee <vfprintf+0x260>
     3d6:	90 37       	cpi	r25, 0x70	; 112
     3d8:	20 f4       	brcc	.+8      	; 0x3e2 <vfprintf+0x254>
     3da:	98 35       	cpi	r25, 0x58	; 88
     3dc:	09 f0       	breq	.+2      	; 0x3e0 <vfprintf+0x252>
     3de:	ac c0       	rjmp	.+344    	; 0x538 <vfprintf+0x3aa>
     3e0:	0f c0       	rjmp	.+30     	; 0x400 <vfprintf+0x272>
     3e2:	90 37       	cpi	r25, 0x70	; 112
     3e4:	39 f0       	breq	.+14     	; 0x3f4 <vfprintf+0x266>
     3e6:	98 37       	cpi	r25, 0x78	; 120
     3e8:	09 f0       	breq	.+2      	; 0x3ec <vfprintf+0x25e>
     3ea:	a6 c0       	rjmp	.+332    	; 0x538 <vfprintf+0x3aa>
     3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <vfprintf+0x268>
     3ee:	28 e0       	ldi	r18, 0x08	; 8
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	0a c0       	rjmp	.+20     	; 0x408 <vfprintf+0x27a>
     3f4:	10 61       	ori	r17, 0x10	; 16
     3f6:	14 fd       	sbrc	r17, 4
     3f8:	14 60       	ori	r17, 0x04	; 4
     3fa:	20 e1       	ldi	r18, 0x10	; 16
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <vfprintf+0x27a>
     400:	14 fd       	sbrc	r17, 4
     402:	16 60       	ori	r17, 0x06	; 6
     404:	20 e1       	ldi	r18, 0x10	; 16
     406:	32 e0       	ldi	r19, 0x02	; 2
     408:	17 ff       	sbrs	r17, 7
     40a:	08 c0       	rjmp	.+16     	; 0x41c <vfprintf+0x28e>
     40c:	f5 01       	movw	r30, r10
     40e:	60 81       	ld	r22, Z
     410:	71 81       	ldd	r23, Z+1	; 0x01
     412:	82 81       	ldd	r24, Z+2	; 0x02
     414:	93 81       	ldd	r25, Z+3	; 0x03
     416:	44 e0       	ldi	r20, 0x04	; 4
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	08 c0       	rjmp	.+16     	; 0x42c <vfprintf+0x29e>
     41c:	f5 01       	movw	r30, r10
     41e:	80 81       	ld	r24, Z
     420:	91 81       	ldd	r25, Z+1	; 0x01
     422:	bc 01       	movw	r22, r24
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	42 e0       	ldi	r20, 0x02	; 2
     42a:	50 e0       	ldi	r21, 0x00	; 0
     42c:	a4 0e       	add	r10, r20
     42e:	b5 1e       	adc	r11, r21
     430:	a1 01       	movw	r20, r2
     432:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__ultoa_invert>
     436:	d8 2e       	mov	r13, r24
     438:	d2 18       	sub	r13, r2
     43a:	8f e7       	ldi	r24, 0x7F	; 127
     43c:	f8 2e       	mov	r15, r24
     43e:	f1 22       	and	r15, r17
     440:	f6 fe       	sbrs	r15, 6
     442:	0b c0       	rjmp	.+22     	; 0x45a <vfprintf+0x2cc>
     444:	5e ef       	ldi	r21, 0xFE	; 254
     446:	f5 22       	and	r15, r21
     448:	d9 14       	cp	r13, r9
     44a:	38 f4       	brcc	.+14     	; 0x45a <vfprintf+0x2cc>
     44c:	f4 fe       	sbrs	r15, 4
     44e:	07 c0       	rjmp	.+14     	; 0x45e <vfprintf+0x2d0>
     450:	f2 fc       	sbrc	r15, 2
     452:	05 c0       	rjmp	.+10     	; 0x45e <vfprintf+0x2d0>
     454:	8f ee       	ldi	r24, 0xEF	; 239
     456:	f8 22       	and	r15, r24
     458:	02 c0       	rjmp	.+4      	; 0x45e <vfprintf+0x2d0>
     45a:	1d 2d       	mov	r17, r13
     45c:	01 c0       	rjmp	.+2      	; 0x460 <vfprintf+0x2d2>
     45e:	19 2d       	mov	r17, r9
     460:	f4 fe       	sbrs	r15, 4
     462:	0d c0       	rjmp	.+26     	; 0x47e <vfprintf+0x2f0>
     464:	fe 01       	movw	r30, r28
     466:	ed 0d       	add	r30, r13
     468:	f1 1d       	adc	r31, r1
     46a:	80 81       	ld	r24, Z
     46c:	80 33       	cpi	r24, 0x30	; 48
     46e:	19 f4       	brne	.+6      	; 0x476 <vfprintf+0x2e8>
     470:	99 ee       	ldi	r25, 0xE9	; 233
     472:	f9 22       	and	r15, r25
     474:	08 c0       	rjmp	.+16     	; 0x486 <vfprintf+0x2f8>
     476:	1f 5f       	subi	r17, 0xFF	; 255
     478:	f2 fe       	sbrs	r15, 2
     47a:	05 c0       	rjmp	.+10     	; 0x486 <vfprintf+0x2f8>
     47c:	03 c0       	rjmp	.+6      	; 0x484 <vfprintf+0x2f6>
     47e:	8f 2d       	mov	r24, r15
     480:	86 78       	andi	r24, 0x86	; 134
     482:	09 f0       	breq	.+2      	; 0x486 <vfprintf+0x2f8>
     484:	1f 5f       	subi	r17, 0xFF	; 255
     486:	0f 2d       	mov	r16, r15
     488:	f3 fc       	sbrc	r15, 3
     48a:	14 c0       	rjmp	.+40     	; 0x4b4 <vfprintf+0x326>
     48c:	f0 fe       	sbrs	r15, 0
     48e:	0f c0       	rjmp	.+30     	; 0x4ae <vfprintf+0x320>
     490:	1e 15       	cp	r17, r14
     492:	10 f0       	brcs	.+4      	; 0x498 <vfprintf+0x30a>
     494:	9d 2c       	mov	r9, r13
     496:	0b c0       	rjmp	.+22     	; 0x4ae <vfprintf+0x320>
     498:	9d 2c       	mov	r9, r13
     49a:	9e 0c       	add	r9, r14
     49c:	91 1a       	sub	r9, r17
     49e:	1e 2d       	mov	r17, r14
     4a0:	06 c0       	rjmp	.+12     	; 0x4ae <vfprintf+0x320>
     4a2:	80 e2       	ldi	r24, 0x20	; 32
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	b3 01       	movw	r22, r6
     4a8:	0e 94 ba 02 	call	0x574	; 0x574 <fputc>
     4ac:	1f 5f       	subi	r17, 0xFF	; 255
     4ae:	1e 15       	cp	r17, r14
     4b0:	c0 f3       	brcs	.-16     	; 0x4a2 <vfprintf+0x314>
     4b2:	04 c0       	rjmp	.+8      	; 0x4bc <vfprintf+0x32e>
     4b4:	1e 15       	cp	r17, r14
     4b6:	10 f4       	brcc	.+4      	; 0x4bc <vfprintf+0x32e>
     4b8:	e1 1a       	sub	r14, r17
     4ba:	01 c0       	rjmp	.+2      	; 0x4be <vfprintf+0x330>
     4bc:	ee 24       	eor	r14, r14
     4be:	04 ff       	sbrs	r16, 4
     4c0:	0f c0       	rjmp	.+30     	; 0x4e0 <vfprintf+0x352>
     4c2:	80 e3       	ldi	r24, 0x30	; 48
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	b3 01       	movw	r22, r6
     4c8:	0e 94 ba 02 	call	0x574	; 0x574 <fputc>
     4cc:	02 ff       	sbrs	r16, 2
     4ce:	1d c0       	rjmp	.+58     	; 0x50a <vfprintf+0x37c>
     4d0:	01 fd       	sbrc	r16, 1
     4d2:	03 c0       	rjmp	.+6      	; 0x4da <vfprintf+0x34c>
     4d4:	88 e7       	ldi	r24, 0x78	; 120
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e c0       	rjmp	.+28     	; 0x4f6 <vfprintf+0x368>
     4da:	88 e5       	ldi	r24, 0x58	; 88
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0b c0       	rjmp	.+22     	; 0x4f6 <vfprintf+0x368>
     4e0:	80 2f       	mov	r24, r16
     4e2:	86 78       	andi	r24, 0x86	; 134
     4e4:	91 f0       	breq	.+36     	; 0x50a <vfprintf+0x37c>
     4e6:	01 ff       	sbrs	r16, 1
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <vfprintf+0x360>
     4ea:	8b e2       	ldi	r24, 0x2B	; 43
     4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <vfprintf+0x362>
     4ee:	80 e2       	ldi	r24, 0x20	; 32
     4f0:	f7 fc       	sbrc	r15, 7
     4f2:	8d e2       	ldi	r24, 0x2D	; 45
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	b3 01       	movw	r22, r6
     4f8:	0e 94 ba 02 	call	0x574	; 0x574 <fputc>
     4fc:	06 c0       	rjmp	.+12     	; 0x50a <vfprintf+0x37c>
     4fe:	80 e3       	ldi	r24, 0x30	; 48
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	b3 01       	movw	r22, r6
     504:	0e 94 ba 02 	call	0x574	; 0x574 <fputc>
     508:	9a 94       	dec	r9
     50a:	d9 14       	cp	r13, r9
     50c:	c0 f3       	brcs	.-16     	; 0x4fe <vfprintf+0x370>
     50e:	da 94       	dec	r13
     510:	f1 01       	movw	r30, r2
     512:	ed 0d       	add	r30, r13
     514:	f1 1d       	adc	r31, r1
     516:	80 81       	ld	r24, Z
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	b3 01       	movw	r22, r6
     51c:	0e 94 ba 02 	call	0x574	; 0x574 <fputc>
     520:	dd 20       	and	r13, r13
     522:	a9 f7       	brne	.-22     	; 0x50e <vfprintf+0x380>
     524:	06 c0       	rjmp	.+12     	; 0x532 <vfprintf+0x3a4>
     526:	80 e2       	ldi	r24, 0x20	; 32
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	b3 01       	movw	r22, r6
     52c:	0e 94 ba 02 	call	0x574	; 0x574 <fputc>
     530:	ea 94       	dec	r14
     532:	ee 20       	and	r14, r14
     534:	c1 f7       	brne	.-16     	; 0x526 <vfprintf+0x398>
     536:	43 ce       	rjmp	.-890    	; 0x1be <vfprintf+0x30>
     538:	f3 01       	movw	r30, r6
     53a:	66 81       	ldd	r22, Z+6	; 0x06
     53c:	77 81       	ldd	r23, Z+7	; 0x07
     53e:	cb 01       	movw	r24, r22
     540:	2b 96       	adiw	r28, 0x0b	; 11
     542:	e2 e1       	ldi	r30, 0x12	; 18
     544:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__epilogue_restores__>

00000548 <strnlen_P>:
     548:	fc 01       	movw	r30, r24
     54a:	05 90       	lpm	r0, Z+
     54c:	61 50       	subi	r22, 0x01	; 1
     54e:	70 40       	sbci	r23, 0x00	; 0
     550:	01 10       	cpse	r0, r1
     552:	d8 f7       	brcc	.-10     	; 0x54a <strnlen_P+0x2>
     554:	80 95       	com	r24
     556:	90 95       	com	r25
     558:	8e 0f       	add	r24, r30
     55a:	9f 1f       	adc	r25, r31
     55c:	08 95       	ret

0000055e <strnlen>:
     55e:	fc 01       	movw	r30, r24
     560:	61 50       	subi	r22, 0x01	; 1
     562:	70 40       	sbci	r23, 0x00	; 0
     564:	01 90       	ld	r0, Z+
     566:	01 10       	cpse	r0, r1
     568:	d8 f7       	brcc	.-10     	; 0x560 <strnlen+0x2>
     56a:	80 95       	com	r24
     56c:	90 95       	com	r25
     56e:	8e 0f       	add	r24, r30
     570:	9f 1f       	adc	r25, r31
     572:	08 95       	ret

00000574 <fputc>:
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	8c 01       	movw	r16, r24
     57e:	eb 01       	movw	r28, r22
     580:	8b 81       	ldd	r24, Y+3	; 0x03
     582:	81 ff       	sbrs	r24, 1
     584:	1b c0       	rjmp	.+54     	; 0x5bc <fputc+0x48>
     586:	82 ff       	sbrs	r24, 2
     588:	0d c0       	rjmp	.+26     	; 0x5a4 <fputc+0x30>
     58a:	2e 81       	ldd	r18, Y+6	; 0x06
     58c:	3f 81       	ldd	r19, Y+7	; 0x07
     58e:	8c 81       	ldd	r24, Y+4	; 0x04
     590:	9d 81       	ldd	r25, Y+5	; 0x05
     592:	28 17       	cp	r18, r24
     594:	39 07       	cpc	r19, r25
     596:	64 f4       	brge	.+24     	; 0x5b0 <fputc+0x3c>
     598:	e8 81       	ld	r30, Y
     59a:	f9 81       	ldd	r31, Y+1	; 0x01
     59c:	01 93       	st	Z+, r16
     59e:	f9 83       	std	Y+1, r31	; 0x01
     5a0:	e8 83       	st	Y, r30
     5a2:	06 c0       	rjmp	.+12     	; 0x5b0 <fputc+0x3c>
     5a4:	e8 85       	ldd	r30, Y+8	; 0x08
     5a6:	f9 85       	ldd	r31, Y+9	; 0x09
     5a8:	80 2f       	mov	r24, r16
     5aa:	09 95       	icall
     5ac:	89 2b       	or	r24, r25
     5ae:	31 f4       	brne	.+12     	; 0x5bc <fputc+0x48>
     5b0:	8e 81       	ldd	r24, Y+6	; 0x06
     5b2:	9f 81       	ldd	r25, Y+7	; 0x07
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	9f 83       	std	Y+7, r25	; 0x07
     5b8:	8e 83       	std	Y+6, r24	; 0x06
     5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <fputc+0x4c>
     5bc:	0f ef       	ldi	r16, 0xFF	; 255
     5be:	1f ef       	ldi	r17, 0xFF	; 255
     5c0:	c8 01       	movw	r24, r16
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	08 95       	ret

000005cc <__ultoa_invert>:
     5cc:	fa 01       	movw	r30, r20
     5ce:	aa 27       	eor	r26, r26
     5d0:	28 30       	cpi	r18, 0x08	; 8
     5d2:	51 f1       	breq	.+84     	; 0x628 <__ultoa_invert+0x5c>
     5d4:	20 31       	cpi	r18, 0x10	; 16
     5d6:	81 f1       	breq	.+96     	; 0x638 <__ultoa_invert+0x6c>
     5d8:	e8 94       	clt
     5da:	6f 93       	push	r22
     5dc:	6e 7f       	andi	r22, 0xFE	; 254
     5de:	6e 5f       	subi	r22, 0xFE	; 254
     5e0:	7f 4f       	sbci	r23, 0xFF	; 255
     5e2:	8f 4f       	sbci	r24, 0xFF	; 255
     5e4:	9f 4f       	sbci	r25, 0xFF	; 255
     5e6:	af 4f       	sbci	r26, 0xFF	; 255
     5e8:	b1 e0       	ldi	r27, 0x01	; 1
     5ea:	3e d0       	rcall	.+124    	; 0x668 <__ultoa_invert+0x9c>
     5ec:	b4 e0       	ldi	r27, 0x04	; 4
     5ee:	3c d0       	rcall	.+120    	; 0x668 <__ultoa_invert+0x9c>
     5f0:	67 0f       	add	r22, r23
     5f2:	78 1f       	adc	r23, r24
     5f4:	89 1f       	adc	r24, r25
     5f6:	9a 1f       	adc	r25, r26
     5f8:	a1 1d       	adc	r26, r1
     5fa:	68 0f       	add	r22, r24
     5fc:	79 1f       	adc	r23, r25
     5fe:	8a 1f       	adc	r24, r26
     600:	91 1d       	adc	r25, r1
     602:	a1 1d       	adc	r26, r1
     604:	6a 0f       	add	r22, r26
     606:	71 1d       	adc	r23, r1
     608:	81 1d       	adc	r24, r1
     60a:	91 1d       	adc	r25, r1
     60c:	a1 1d       	adc	r26, r1
     60e:	20 d0       	rcall	.+64     	; 0x650 <__ultoa_invert+0x84>
     610:	09 f4       	brne	.+2      	; 0x614 <__ultoa_invert+0x48>
     612:	68 94       	set
     614:	3f 91       	pop	r19
     616:	2a e0       	ldi	r18, 0x0A	; 10
     618:	26 9f       	mul	r18, r22
     61a:	11 24       	eor	r1, r1
     61c:	30 19       	sub	r19, r0
     61e:	30 5d       	subi	r19, 0xD0	; 208
     620:	31 93       	st	Z+, r19
     622:	de f6       	brtc	.-74     	; 0x5da <__ultoa_invert+0xe>
     624:	cf 01       	movw	r24, r30
     626:	08 95       	ret
     628:	46 2f       	mov	r20, r22
     62a:	47 70       	andi	r20, 0x07	; 7
     62c:	40 5d       	subi	r20, 0xD0	; 208
     62e:	41 93       	st	Z+, r20
     630:	b3 e0       	ldi	r27, 0x03	; 3
     632:	0f d0       	rcall	.+30     	; 0x652 <__ultoa_invert+0x86>
     634:	c9 f7       	brne	.-14     	; 0x628 <__ultoa_invert+0x5c>
     636:	f6 cf       	rjmp	.-20     	; 0x624 <__ultoa_invert+0x58>
     638:	46 2f       	mov	r20, r22
     63a:	4f 70       	andi	r20, 0x0F	; 15
     63c:	40 5d       	subi	r20, 0xD0	; 208
     63e:	4a 33       	cpi	r20, 0x3A	; 58
     640:	18 f0       	brcs	.+6      	; 0x648 <__ultoa_invert+0x7c>
     642:	49 5d       	subi	r20, 0xD9	; 217
     644:	31 fd       	sbrc	r19, 1
     646:	40 52       	subi	r20, 0x20	; 32
     648:	41 93       	st	Z+, r20
     64a:	02 d0       	rcall	.+4      	; 0x650 <__ultoa_invert+0x84>
     64c:	a9 f7       	brne	.-22     	; 0x638 <__ultoa_invert+0x6c>
     64e:	ea cf       	rjmp	.-44     	; 0x624 <__ultoa_invert+0x58>
     650:	b4 e0       	ldi	r27, 0x04	; 4
     652:	a6 95       	lsr	r26
     654:	97 95       	ror	r25
     656:	87 95       	ror	r24
     658:	77 95       	ror	r23
     65a:	67 95       	ror	r22
     65c:	ba 95       	dec	r27
     65e:	c9 f7       	brne	.-14     	; 0x652 <__ultoa_invert+0x86>
     660:	00 97       	sbiw	r24, 0x00	; 0
     662:	61 05       	cpc	r22, r1
     664:	71 05       	cpc	r23, r1
     666:	08 95       	ret
     668:	9b 01       	movw	r18, r22
     66a:	ac 01       	movw	r20, r24
     66c:	0a 2e       	mov	r0, r26
     66e:	06 94       	lsr	r0
     670:	57 95       	ror	r21
     672:	47 95       	ror	r20
     674:	37 95       	ror	r19
     676:	27 95       	ror	r18
     678:	ba 95       	dec	r27
     67a:	c9 f7       	brne	.-14     	; 0x66e <__ultoa_invert+0xa2>
     67c:	62 0f       	add	r22, r18
     67e:	73 1f       	adc	r23, r19
     680:	84 1f       	adc	r24, r20
     682:	95 1f       	adc	r25, r21
     684:	a0 1d       	adc	r26, r0
     686:	08 95       	ret

00000688 <delay_ms>:
uchar cmd_buf[100];

/**
 * Some basic delay function
 */
void delay_ms(unsigned short ms) {
     688:	df 93       	push	r29
     68a:	cf 93       	push	r28
     68c:	00 d0       	rcall	.+0      	; 0x68e <delay_ms+0x6>
     68e:	00 d0       	rcall	.+0      	; 0x690 <delay_ms+0x8>
     690:	00 d0       	rcall	.+0      	; 0x692 <delay_ms+0xa>
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	9e 83       	std	Y+6, r25	; 0x06
     698:	8d 83       	std	Y+5, r24	; 0x05
	unsigned short outer1, outer2;
	outer1 = 200 * 12;
     69a:	80 e6       	ldi	r24, 0x60	; 96
     69c:	99 e0       	ldi	r25, 0x09	; 9
     69e:	9c 83       	std	Y+4, r25	; 0x04
     6a0:	8b 83       	std	Y+3, r24	; 0x03
     6a2:	1c c0       	rjmp	.+56     	; 0x6dc <delay_ms+0x54>

	while (outer1) {
		outer2 = 100;
     6a4:	84 e6       	ldi	r24, 0x64	; 100
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	9a 83       	std	Y+2, r25	; 0x02
     6aa:	89 83       	std	Y+1, r24	; 0x01
     6ac:	0e c0       	rjmp	.+28     	; 0x6ca <delay_ms+0x42>
		while (outer2) {
			while (ms)
				ms--;
     6ae:	8d 81       	ldd	r24, Y+5	; 0x05
     6b0:	9e 81       	ldd	r25, Y+6	; 0x06
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	9e 83       	std	Y+6, r25	; 0x06
     6b6:	8d 83       	std	Y+5, r24	; 0x05
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
			while (ms)
     6b8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ba:	9e 81       	ldd	r25, Y+6	; 0x06
     6bc:	00 97       	sbiw	r24, 0x00	; 0
     6be:	b9 f7       	brne	.-18     	; 0x6ae <delay_ms+0x26>
				ms--;
			outer2--;
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	9a 81       	ldd	r25, Y+2	; 0x02
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	9a 83       	std	Y+2, r25	; 0x02
     6c8:	89 83       	std	Y+1, r24	; 0x01
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	9a 81       	ldd	r25, Y+2	; 0x02
     6ce:	00 97       	sbiw	r24, 0x00	; 0
     6d0:	99 f7       	brne	.-26     	; 0x6b8 <delay_ms+0x30>
			while (ms)
				ms--;
			outer2--;
		}
		outer1--;
     6d2:	8b 81       	ldd	r24, Y+3	; 0x03
     6d4:	9c 81       	ldd	r25, Y+4	; 0x04
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	9c 83       	std	Y+4, r25	; 0x04
     6da:	8b 83       	std	Y+3, r24	; 0x03
 */
void delay_ms(unsigned short ms) {
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
     6dc:	8b 81       	ldd	r24, Y+3	; 0x03
     6de:	9c 81       	ldd	r25, Y+4	; 0x04
     6e0:	00 97       	sbiw	r24, 0x00	; 0
     6e2:	01 f7       	brne	.-64     	; 0x6a4 <delay_ms+0x1c>
				ms--;
			outer2--;
		}
		outer1--;
	}
}
     6e4:	26 96       	adiw	r28, 0x06	; 6
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	cf 91       	pop	r28
     6f2:	df 91       	pop	r29
     6f4:	08 95       	ret

000006f6 <gpib_init>:
 * Init GPIB pins and variables.
 * \brief All signal lines not related to the controller part
 * 		are initialized with useful values.
 *		(The controller part initialization is done on gpib_controller_assert())
 */
void gpib_init(void) {
     6f6:	df 93       	push	r29
     6f8:	cf 93       	push	r28
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
	// data lines - complete port A as input
	DDRA = 0x00;
     6fe:	ea e3       	ldi	r30, 0x3A	; 58
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	10 82       	st	Z, r1

	// handshake lines - on port D , everything as input
	DDRD &= ~_BV(G_DAV); // DAV 
     704:	a1 e3       	ldi	r26, 0x31	; 49
     706:	b0 e0       	ldi	r27, 0x00	; 0
     708:	e1 e3       	ldi	r30, 0x31	; 49
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	8b 7f       	andi	r24, 0xFB	; 251
     710:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_EOI); // EOI 
     712:	a1 e3       	ldi	r26, 0x31	; 49
     714:	b0 e0       	ldi	r27, 0x00	; 0
     716:	e1 e3       	ldi	r30, 0x31	; 49
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	80 81       	ld	r24, Z
     71c:	8f 7e       	andi	r24, 0xEF	; 239
     71e:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_SRQ); // SRQ 
     720:	a1 e3       	ldi	r26, 0x31	; 49
     722:	b0 e0       	ldi	r27, 0x00	; 0
     724:	e1 e3       	ldi	r30, 0x31	; 49
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	80 81       	ld	r24, Z
     72a:	8f 7b       	andi	r24, 0xBF	; 191
     72c:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_ATN); // ATN  
     72e:	a1 e3       	ldi	r26, 0x31	; 49
     730:	b0 e0       	ldi	r27, 0x00	; 0
     732:	e1 e3       	ldi	r30, 0x31	; 49
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 81       	ld	r24, Z
     738:	8f 77       	andi	r24, 0x7F	; 127
     73a:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_REN); // REN  
     73c:	a7 e3       	ldi	r26, 0x37	; 55
     73e:	b0 e0       	ldi	r27, 0x00	; 0
     740:	e7 e3       	ldi	r30, 0x37	; 55
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	8d 7f       	andi	r24, 0xFD	; 253
     748:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_IFC); // IFC  
     74a:	a7 e3       	ldi	r26, 0x37	; 55
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	e7 e3       	ldi	r30, 0x37	; 55
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	80 81       	ld	r24, Z
     754:	8e 7f       	andi	r24, 0xFE	; 254
     756:	8c 93       	st	X, r24

	// init handshake lines
	assign_bit(DDRD, PORTD, G_NRFD);
     758:	a2 e3       	ldi	r26, 0x32	; 50
     75a:	b0 e0       	ldi	r27, 0x00	; 0
     75c:	e2 e3       	ldi	r30, 0x32	; 50
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	80 81       	ld	r24, Z
     762:	87 7f       	andi	r24, 0xF7	; 247
     764:	8c 93       	st	X, r24
     766:	a1 e3       	ldi	r26, 0x31	; 49
     768:	b0 e0       	ldi	r27, 0x00	; 0
     76a:	e1 e3       	ldi	r30, 0x31	; 49
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	80 81       	ld	r24, Z
     770:	88 60       	ori	r24, 0x08	; 8
     772:	8c 93       	st	X, r24
     774:	a2 e3       	ldi	r26, 0x32	; 50
     776:	b0 e0       	ldi	r27, 0x00	; 0
     778:	e2 e3       	ldi	r30, 0x32	; 50
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	87 7f       	andi	r24, 0xF7	; 247
     780:	8c 93       	st	X, r24
	// not ready for data now
	release_bit(DDRD, PORTD, G_NDAC);
     782:	a1 e3       	ldi	r26, 0x31	; 49
     784:	b0 e0       	ldi	r27, 0x00	; 0
     786:	e1 e3       	ldi	r30, 0x31	; 49
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	8f 7d       	andi	r24, 0xDF	; 223
     78e:	8c 93       	st	X, r24
     790:	a2 e3       	ldi	r26, 0x32	; 50
     792:	b0 e0       	ldi	r27, 0x00	; 0
     794:	e2 e3       	ldi	r30, 0x32	; 50
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	80 62       	ori	r24, 0x20	; 32
     79c:	8c 93       	st	X, r24
	// initially: ok so far
}
     79e:	cf 91       	pop	r28
     7a0:	df 91       	pop	r29
     7a2:	08 95       	ret

000007a4 <gpib_receive>:
 *  \returns		On any error, 0xff is returned. in this case, the value of parameter *_byte is undefined.
 * 		Otherwise the value of the EOI signal line during read is returned. If EOI was assigned, a 0x01 is
 * 		returned. If EOI was not assigned, a 0x00 is returned. Assignment of EOI means that the talker
 * 		is sending the last character for this transmission.
 */
uchar gpib_receive(uchar* _byte) {
     7a4:	df 93       	push	r29
     7a6:	cf 93       	push	r28
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
     7ac:	27 97       	sbiw	r28, 0x07	; 7
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	9e 83       	std	Y+6, r25	; 0x06
     7ba:	8d 83       	std	Y+5, r24	; 0x05
	int timeout;
	uchar byte, eoi;

	//uart_puts("\n\rgpib_receive()\n\r");

	if (controller.talks == 1) {
     7bc:	80 91 0e 04 	lds	r24, 0x040E
     7c0:	81 30       	cpi	r24, 0x01	; 1
     7c2:	39 f4       	brne	.+14     	; 0x7d2 <gpib_receive+0x2e>
		*_byte = 0xff;
     7c4:	ed 81       	ldd	r30, Y+5	; 0x05
     7c6:	fe 81       	ldd	r31, Y+6	; 0x06
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
     7ca:	80 83       	st	Z, r24
		return 0xff;
     7cc:	8f ef       	ldi	r24, 0xFF	; 255
     7ce:	8f 83       	std	Y+7, r24	; 0x07
     7d0:	c6 c0       	rjmp	.+396    	; 0x95e <__stack+0xff>
	}

	// handshake: set nrfd, means i am ready to receive some data
	release_bit(DDRD, PORTD, G_NRFD);
     7d2:	a1 e3       	ldi	r26, 0x31	; 49
     7d4:	b0 e0       	ldi	r27, 0x00	; 0
     7d6:	e1 e3       	ldi	r30, 0x31	; 49
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	80 81       	ld	r24, Z
     7dc:	87 7f       	andi	r24, 0xF7	; 247
     7de:	8c 93       	st	X, r24
     7e0:	a2 e3       	ldi	r26, 0x32	; 50
     7e2:	b0 e0       	ldi	r27, 0x00	; 0
     7e4:	e2 e3       	ldi	r30, 0x32	; 50
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	80 81       	ld	r24, Z
     7ea:	88 60       	ori	r24, 0x08	; 8
     7ec:	8c 93       	st	X, r24
	assign_bit(DDRD, PORTD, G_NDAC);
     7ee:	a2 e3       	ldi	r26, 0x32	; 50
     7f0:	b0 e0       	ldi	r27, 0x00	; 0
     7f2:	e2 e3       	ldi	r30, 0x32	; 50
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	80 81       	ld	r24, Z
     7f8:	8f 7d       	andi	r24, 0xDF	; 223
     7fa:	8c 93       	st	X, r24
     7fc:	a1 e3       	ldi	r26, 0x31	; 49
     7fe:	b0 e0       	ldi	r27, 0x00	; 0
     800:	e1 e3       	ldi	r30, 0x31	; 49
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 81       	ld	r24, Z
     806:	80 62       	ori	r24, 0x20	; 32
     808:	8c 93       	st	X, r24
     80a:	a2 e3       	ldi	r26, 0x32	; 50
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e2 e3       	ldi	r30, 0x32	; 50
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	80 81       	ld	r24, Z
     814:	8f 7d       	andi	r24, 0xDF	; 223
     816:	8c 93       	st	X, r24

	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     818:	80 91 c9 04 	lds	r24, 0x04C9
     81c:	88 2f       	mov	r24, r24
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	05 96       	adiw	r24, 0x05	; 5
     822:	9c 83       	std	Y+4, r25	; 0x04
     824:	8b 83       	std	Y+3, r24	; 0x03
     826:	10 c0       	rjmp	.+32     	; 0x848 <gpib_receive+0xa4>
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     828:	80 91 c9 04 	lds	r24, 0x04C9
     82c:	28 2f       	mov	r18, r24
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	8b 81       	ldd	r24, Y+3	; 0x03
     832:	9c 81       	ldd	r25, Y+4	; 0x04
     834:	28 17       	cp	r18, r24
     836:	39 07       	cpc	r19, r25
     838:	39 f4       	brne	.+14     	; 0x848 <gpib_receive+0xa4>
			uart_puts("\n\rError: DAV timeout (1)\n\r");
     83a:	80 e6       	ldi	r24, 0x60	; 96
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
			return 0xff;
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	8f 83       	std	Y+7, r24	; 0x07
     846:	8b c0       	rjmp	.+278    	; 0x95e <__stack+0xff>
	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
     848:	e0 e3       	ldi	r30, 0x30	; 48
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	88 2f       	mov	r24, r24
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	84 70       	andi	r24, 0x04	; 4
     854:	90 70       	andi	r25, 0x00	; 0
     856:	00 97       	sbiw	r24, 0x00	; 0
     858:	49 f0       	breq	.+18     	; 0x86c <__stack+0xd>
     85a:	80 91 c9 04 	lds	r24, 0x04C9
     85e:	28 2f       	mov	r18, r24
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	8b 81       	ldd	r24, Y+3	; 0x03
     864:	9c 81       	ldd	r25, Y+4	; 0x04
     866:	82 17       	cp	r24, r18
     868:	93 07       	cpc	r25, r19
     86a:	f4 f6       	brge	.-68     	; 0x828 <gpib_receive+0x84>
#else
	loop_until_bit_is_clear(PIND,G_DAV);
#endif

	// handshake: clear NRFD, means i am busy now to read data
	assign_bit(DDRD, PORTD, G_NRFD);
     86c:	a2 e3       	ldi	r26, 0x32	; 50
     86e:	b0 e0       	ldi	r27, 0x00	; 0
     870:	e2 e3       	ldi	r30, 0x32	; 50
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	87 7f       	andi	r24, 0xF7	; 247
     878:	8c 93       	st	X, r24
     87a:	a1 e3       	ldi	r26, 0x31	; 49
     87c:	b0 e0       	ldi	r27, 0x00	; 0
     87e:	e1 e3       	ldi	r30, 0x31	; 49
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	80 81       	ld	r24, Z
     884:	88 60       	ori	r24, 0x08	; 8
     886:	8c 93       	st	X, r24
     888:	a2 e3       	ldi	r26, 0x32	; 50
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	e2 e3       	ldi	r30, 0x32	; 50
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	80 81       	ld	r24, Z
     892:	87 7f       	andi	r24, 0xF7	; 247
     894:	8c 93       	st	X, r24
	// read data
	byte = PINA ^ 0xff;
     896:	e9 e3       	ldi	r30, 0x39	; 57
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	80 81       	ld	r24, Z
     89c:	80 95       	com	r24
     89e:	8a 83       	std	Y+2, r24	; 0x02

	// handshake: set ndac, means i have completed/accepted the read
	release_bit(DDRD, PORTD, G_NDAC);
     8a0:	a1 e3       	ldi	r26, 0x31	; 49
     8a2:	b0 e0       	ldi	r27, 0x00	; 0
     8a4:	e1 e3       	ldi	r30, 0x31	; 49
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	80 81       	ld	r24, Z
     8aa:	8f 7d       	andi	r24, 0xDF	; 223
     8ac:	8c 93       	st	X, r24
     8ae:	a2 e3       	ldi	r26, 0x32	; 50
     8b0:	b0 e0       	ldi	r27, 0x00	; 0
     8b2:	e2 e3       	ldi	r30, 0x32	; 50
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	80 81       	ld	r24, Z
     8b8:	80 62       	ori	r24, 0x20	; 32
     8ba:	8c 93       	st	X, r24

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     8bc:	80 91 c9 04 	lds	r24, 0x04C9
     8c0:	88 2f       	mov	r24, r24
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	05 96       	adiw	r24, 0x05	; 5
     8c6:	9c 83       	std	Y+4, r25	; 0x04
     8c8:	8b 83       	std	Y+3, r24	; 0x03
     8ca:	10 c0       	rjmp	.+32     	; 0x8ec <__stack+0x8d>
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     8cc:	80 91 c9 04 	lds	r24, 0x04C9
     8d0:	28 2f       	mov	r18, r24
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	8b 81       	ldd	r24, Y+3	; 0x03
     8d6:	9c 81       	ldd	r25, Y+4	; 0x04
     8d8:	28 17       	cp	r18, r24
     8da:	39 07       	cpc	r19, r25
     8dc:	39 f4       	brne	.+14     	; 0x8ec <__stack+0x8d>
			uart_puts("\n\rError: DAV timeout (2)\n\r");
     8de:	8b e7       	ldi	r24, 0x7B	; 123
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
			return 0xff;
     8e6:	8f ef       	ldi	r24, 0xFF	; 255
     8e8:	8f 83       	std	Y+7, r24	; 0x07
     8ea:	39 c0       	rjmp	.+114    	; 0x95e <__stack+0xff>
	release_bit(DDRD, PORTD, G_NDAC);

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
     8ec:	e0 e3       	ldi	r30, 0x30	; 48
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	88 2f       	mov	r24, r24
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	84 70       	andi	r24, 0x04	; 4
     8f8:	90 70       	andi	r25, 0x00	; 0
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	49 f4       	brne	.+18     	; 0x910 <__stack+0xb1>
     8fe:	80 91 c9 04 	lds	r24, 0x04C9
     902:	28 2f       	mov	r18, r24
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	8b 81       	ldd	r24, Y+3	; 0x03
     908:	9c 81       	ldd	r25, Y+4	; 0x04
     90a:	82 17       	cp	r24, r18
     90c:	93 07       	cpc	r25, r19
     90e:	f4 f6       	brge	.-68     	; 0x8cc <__stack+0x6d>
	}
#else
	loop_until_bit_is_set(PIND,G_DAV);
#endif
	// handshake: clear ndac (this is a prerequisite for receive next byte)
	assign_bit(DDRD, PORTD, G_NDAC);
     910:	a2 e3       	ldi	r26, 0x32	; 50
     912:	b0 e0       	ldi	r27, 0x00	; 0
     914:	e2 e3       	ldi	r30, 0x32	; 50
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	8f 7d       	andi	r24, 0xDF	; 223
     91c:	8c 93       	st	X, r24
     91e:	a1 e3       	ldi	r26, 0x31	; 49
     920:	b0 e0       	ldi	r27, 0x00	; 0
     922:	e1 e3       	ldi	r30, 0x31	; 49
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	80 62       	ori	r24, 0x20	; 32
     92a:	8c 93       	st	X, r24
     92c:	a2 e3       	ldi	r26, 0x32	; 50
     92e:	b0 e0       	ldi	r27, 0x00	; 0
     930:	e2 e3       	ldi	r30, 0x32	; 50
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	8f 7d       	andi	r24, 0xDF	; 223
     938:	8c 93       	st	X, r24

	// check if last byte of transmission
	eoi = bit_is_clear(PIND,G_EOI);
     93a:	e0 e3       	ldi	r30, 0x30	; 48
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	88 2f       	mov	r24, r24
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	80 71       	andi	r24, 0x10	; 16
     946:	90 70       	andi	r25, 0x00	; 0
     948:	19 82       	std	Y+1, r1	; 0x01
     94a:	00 97       	sbiw	r24, 0x00	; 0
     94c:	11 f4       	brne	.+4      	; 0x952 <__stack+0xf3>
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	89 83       	std	Y+1, r24	; 0x01

	*_byte = byte;
     952:	ed 81       	ldd	r30, Y+5	; 0x05
     954:	fe 81       	ldd	r31, Y+6	; 0x06
     956:	8a 81       	ldd	r24, Y+2	; 0x02
     958:	80 83       	st	Z, r24

	return eoi;
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	8f 83       	std	Y+7, r24	; 0x07
     95e:	8f 81       	ldd	r24, Y+7	; 0x07
}
     960:	27 96       	adiw	r28, 0x07	; 7
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	f8 94       	cli
     966:	de bf       	out	0x3e, r29	; 62
     968:	0f be       	out	0x3f, r0	; 63
     96a:	cd bf       	out	0x3d, r28	; 61
     96c:	cf 91       	pop	r28
     96e:	df 91       	pop	r29
     970:	08 95       	ret

00000972 <queryPartners>:
 * array "partners".
 *
 * TODO: the function does not a query for now, but just assumes that there are two devices
 * with addresses 0x01 and 0x02. This is very limited but currently ok for me.
 */
void queryPartners() {
     972:	df 93       	push	r29
     974:	cf 93       	push	r28
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
	controller.partners[0] = 0x02;
     97a:	82 e0       	ldi	r24, 0x02	; 2
     97c:	80 93 0f 04 	sts	0x040F, r24
	//controller.partners[1] = 0x01;
	controller.partners[3] = 0x00; // end value is 0x00
     980:	10 92 12 04 	sts	0x0412, r1
}
     984:	cf 91       	pop	r28
     986:	df 91       	pop	r29
     988:	08 95       	ret

0000098a <gpib_controller_assign>:
 * You have to change the initialization of the partner array according to your environment.
 * The partners-array is used by gpib_serial_poll() for looping over all existing devices.
 * 
 * \param address the address to be used by the controller. Usually 0x00.
 */
void gpib_controller_assign(uchar address) {
     98a:	df 93       	push	r29
     98c:	cf 93       	push	r28
     98e:	0f 92       	push	r0
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
     994:	89 83       	std	Y+1, r24	; 0x01
	controller.myaddress = address;
     996:	89 81       	ldd	r24, Y+1	; 0x01
     998:	80 93 0b 04 	sts	0x040B, r24
	controller.talks = 0;
     99c:	10 92 0e 04 	sts	0x040E, r1
	controller.partner_pad = DEFAULT_PARTNER_ADDRESS; // init default active partner
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	80 93 0c 04 	sts	0x040C, r24
	controller.partner_sad = ADDRESS_NOT_SET;
     9a6:	8f ef       	ldi	r24, 0xFF	; 255
     9a8:	80 93 0d 04 	sts	0x040D, r24
	/** get all partners on bus by querying them */
	queryPartners();
     9ac:	0e 94 b9 04 	call	0x972	; 0x972 <queryPartners>

	// set up initial state of bus
	assign_bit( DDRB, PORTB, G_IFC);
     9b0:	a8 e3       	ldi	r26, 0x38	; 56
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	e8 e3       	ldi	r30, 0x38	; 56
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	80 81       	ld	r24, Z
     9ba:	8e 7f       	andi	r24, 0xFE	; 254
     9bc:	8c 93       	st	X, r24
     9be:	a7 e3       	ldi	r26, 0x37	; 55
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	e7 e3       	ldi	r30, 0x37	; 55
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	80 81       	ld	r24, Z
     9c8:	81 60       	ori	r24, 0x01	; 1
     9ca:	8c 93       	st	X, r24
     9cc:	a8 e3       	ldi	r26, 0x38	; 56
     9ce:	b0 e0       	ldi	r27, 0x00	; 0
     9d0:	e8 e3       	ldi	r30, 0x38	; 56
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	80 81       	ld	r24, Z
     9d6:	8e 7f       	andi	r24, 0xFE	; 254
     9d8:	8c 93       	st	X, r24
	delay_ms(200);
     9da:	88 ec       	ldi	r24, 0xC8	; 200
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 44 03 	call	0x688	; 0x688 <delay_ms>
	release_bit( DDRB, PORTB, G_IFC);
     9e2:	a7 e3       	ldi	r26, 0x37	; 55
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	e7 e3       	ldi	r30, 0x37	; 55
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	80 81       	ld	r24, Z
     9ec:	8e 7f       	andi	r24, 0xFE	; 254
     9ee:	8c 93       	st	X, r24
     9f0:	a8 e3       	ldi	r26, 0x38	; 56
     9f2:	b0 e0       	ldi	r27, 0x00	; 0
     9f4:	e8 e3       	ldi	r30, 0x38	; 56
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	80 81       	ld	r24, Z
     9fa:	81 60       	ori	r24, 0x01	; 1
     9fc:	8c 93       	st	X, r24
	// set up all devices for remote control
	assign_bit( DDRB, PORTB, G_REN);
     9fe:	a8 e3       	ldi	r26, 0x38	; 56
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	e8 e3       	ldi	r30, 0x38	; 56
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	80 81       	ld	r24, Z
     a08:	8d 7f       	andi	r24, 0xFD	; 253
     a0a:	8c 93       	st	X, r24
     a0c:	a7 e3       	ldi	r26, 0x37	; 55
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	e7 e3       	ldi	r30, 0x37	; 55
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	80 81       	ld	r24, Z
     a16:	82 60       	ori	r24, 0x02	; 2
     a18:	8c 93       	st	X, r24
     a1a:	a8 e3       	ldi	r26, 0x38	; 56
     a1c:	b0 e0       	ldi	r27, 0x00	; 0
     a1e:	e8 e3       	ldi	r30, 0x38	; 56
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	80 81       	ld	r24, Z
     a24:	8d 7f       	andi	r24, 0xFD	; 253
     a26:	8c 93       	st	X, r24

	// DCL - device clear for all devices on bus
	cmd_buf[0] = G_CMD_DCL;
     a28:	84 e1       	ldi	r24, 0x14	; 20
     a2a:	80 93 14 04 	sts	0x0414, r24
	gpib_cmd(cmd_buf, 1);
     a2e:	84 e1       	ldi	r24, 0x14	; 20
     a30:	94 e0       	ldi	r25, 0x04	; 4
     a32:	61 e0       	ldi	r22, 0x01	; 1
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>
}
     a3a:	0f 90       	pop	r0
     a3c:	cf 91       	pop	r28
     a3e:	df 91       	pop	r29
     a40:	08 95       	ret

00000a42 <gpib_controller_release>:

/**
 * Release bus 
 */
void gpib_controller_release(void) {
     a42:	df 93       	push	r29
     a44:	cf 93       	push	r28
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
	// set up initial state of bus
	assign_bit( DDRB, PORTB, G_IFC);
     a4a:	a8 e3       	ldi	r26, 0x38	; 56
     a4c:	b0 e0       	ldi	r27, 0x00	; 0
     a4e:	e8 e3       	ldi	r30, 0x38	; 56
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 81       	ld	r24, Z
     a54:	8e 7f       	andi	r24, 0xFE	; 254
     a56:	8c 93       	st	X, r24
     a58:	a7 e3       	ldi	r26, 0x37	; 55
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	e7 e3       	ldi	r30, 0x37	; 55
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	81 60       	ori	r24, 0x01	; 1
     a64:	8c 93       	st	X, r24
     a66:	a8 e3       	ldi	r26, 0x38	; 56
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e8 e3       	ldi	r30, 0x38	; 56
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	8e 7f       	andi	r24, 0xFE	; 254
     a72:	8c 93       	st	X, r24
	delay_ms(200);
     a74:	88 ec       	ldi	r24, 0xC8	; 200
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 44 03 	call	0x688	; 0x688 <delay_ms>
	release_bit( DDRB, PORTB, G_IFC);
     a7c:	a7 e3       	ldi	r26, 0x37	; 55
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	e7 e3       	ldi	r30, 0x37	; 55
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	8e 7f       	andi	r24, 0xFE	; 254
     a88:	8c 93       	st	X, r24
     a8a:	a8 e3       	ldi	r26, 0x38	; 56
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 e3       	ldi	r30, 0x38	; 56
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	80 81       	ld	r24, Z
     a94:	81 60       	ori	r24, 0x01	; 1
     a96:	8c 93       	st	X, r24
	// set up all devices for local control
	release_bit( DDRB, PORTB, G_REN);
     a98:	a7 e3       	ldi	r26, 0x37	; 55
     a9a:	b0 e0       	ldi	r27, 0x00	; 0
     a9c:	e7 e3       	ldi	r30, 0x37	; 55
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	80 81       	ld	r24, Z
     aa2:	8d 7f       	andi	r24, 0xFD	; 253
     aa4:	8c 93       	st	X, r24
     aa6:	a8 e3       	ldi	r26, 0x38	; 56
     aa8:	b0 e0       	ldi	r27, 0x00	; 0
     aaa:	e8 e3       	ldi	r30, 0x38	; 56
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	80 81       	ld	r24, Z
     ab0:	82 60       	ori	r24, 0x02	; 2
     ab2:	8c 93       	st	X, r24
}
     ab4:	cf 91       	pop	r28
     ab6:	df 91       	pop	r29
     ab8:	08 95       	ret

00000aba <gpib_write>:

/**
 * Write GPIB string to bus
 * \brief See _gpib_write() for further information.
 */
uchar gpib_write(uchar *bytes, int length) {
     aba:	df 93       	push	r29
     abc:	cf 93       	push	r28
     abe:	00 d0       	rcall	.+0      	; 0xac0 <gpib_write+0x6>
     ac0:	00 d0       	rcall	.+0      	; 0xac2 <gpib_write+0x8>
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	9a 83       	std	Y+2, r25	; 0x02
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	7c 83       	std	Y+4, r23	; 0x04
     acc:	6b 83       	std	Y+3, r22	; 0x03
	// set attention arg false for ordinary strings
	return _gpib_write(bytes, length, (uchar) 0);
     ace:	89 81       	ldd	r24, Y+1	; 0x01
     ad0:	9a 81       	ldd	r25, Y+2	; 0x02
     ad2:	2b 81       	ldd	r18, Y+3	; 0x03
     ad4:	3c 81       	ldd	r19, Y+4	; 0x04
     ad6:	b9 01       	movw	r22, r18
     ad8:	40 e0       	ldi	r20, 0x00	; 0
     ada:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_gpib_write>
}
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	cf 91       	pop	r28
     ae8:	df 91       	pop	r29
     aea:	08 95       	ret

00000aec <gpib_cmd>:

/**
 * Write GPIB command to bus
 * \brief See _gpib_write() for further information.
 */
uchar gpib_cmd(uchar *bytes, int length) {
     aec:	df 93       	push	r29
     aee:	cf 93       	push	r28
     af0:	00 d0       	rcall	.+0      	; 0xaf2 <gpib_cmd+0x6>
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <gpib_cmd+0x8>
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
     af8:	9a 83       	std	Y+2, r25	; 0x02
     afa:	89 83       	std	Y+1, r24	; 0x01
     afc:	7c 83       	std	Y+4, r23	; 0x04
     afe:	6b 83       	std	Y+3, r22	; 0x03
	// set attention arg true for commands
	return _gpib_write(bytes, length, (uchar) 1);
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	9a 81       	ldd	r25, Y+2	; 0x02
     b04:	2b 81       	ldd	r18, Y+3	; 0x03
     b06:	3c 81       	ldd	r19, Y+4	; 0x04
     b08:	b9 01       	movw	r22, r18
     b0a:	41 e0       	ldi	r20, 0x01	; 1
     b0c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_gpib_write>
}
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	cf 91       	pop	r28
     b1a:	df 91       	pop	r29
     b1c:	08 95       	ret

00000b1e <_gpib_write>:
 * \param length length of valid bytes in byte array or zero.
 * for binary data, lenght must be defined. For strings, length can be set to zero. Then the length of
 * the string is calculated internally.
 * \param attention attention tur means assign ATN signal line during write.
 */
uchar _gpib_write(uchar *bytes, int length, uchar attention) {
     b1e:	df 93       	push	r29
     b20:	cf 93       	push	r28
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	2b 97       	sbiw	r28, 0x0b	; 11
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	9f 83       	std	Y+7, r25	; 0x07
     b34:	8e 83       	std	Y+6, r24	; 0x06
     b36:	79 87       	std	Y+9, r23	; 0x09
     b38:	68 87       	std	Y+8, r22	; 0x08
     b3a:	4a 87       	std	Y+10, r20	; 0x0a
	int timeout;
	//uchar buf[64];

	// set talks state. This is used by ISR to recognize own talk
	// (controller must not talk to itself and must not take part in listener handshake when talking)
	controller.talks = 1;
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	80 93 0e 04 	sts	0x040E, r24

	if (attention) {
     b42:	8a 85       	ldd	r24, Y+10	; 0x0a
     b44:	88 23       	and	r24, r24
     b46:	a9 f0       	breq	.+42     	; 0xb72 <_gpib_write+0x54>
		//uart_puts("\n\rgpib_controller_write()\n\r");
		// assign ATN for commands
		assign_bit( DDRD, PORTD, G_ATN);
     b48:	a2 e3       	ldi	r26, 0x32	; 50
     b4a:	b0 e0       	ldi	r27, 0x00	; 0
     b4c:	e2 e3       	ldi	r30, 0x32	; 50
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 81       	ld	r24, Z
     b52:	8f 77       	andi	r24, 0x7F	; 127
     b54:	8c 93       	st	X, r24
     b56:	a1 e3       	ldi	r26, 0x31	; 49
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	e1 e3       	ldi	r30, 0x31	; 49
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	80 68       	ori	r24, 0x80	; 128
     b62:	8c 93       	st	X, r24
     b64:	a2 e3       	ldi	r26, 0x32	; 50
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e2 e3       	ldi	r30, 0x32	; 50
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	8f 77       	andi	r24, 0x7F	; 127
     b70:	8c 93       	st	X, r24
	}

	if (length == 0) {
     b72:	88 85       	ldd	r24, Y+8	; 0x08
     b74:	99 85       	ldd	r25, Y+9	; 0x09
     b76:	00 97       	sbiw	r24, 0x00	; 0
     b78:	31 f4       	brne	.+12     	; 0xb86 <_gpib_write+0x68>
		// length==0 means this is a common C string, null-terminated.
		// then, length can be easily calculated
		length = strlen((char*) bytes);
     b7a:	8e 81       	ldd	r24, Y+6	; 0x06
     b7c:	9f 81       	ldd	r25, Y+7	; 0x07
     b7e:	0e 94 92 00 	call	0x124	; 0x124 <strlen>
     b82:	99 87       	std	Y+9, r25	; 0x09
     b84:	88 87       	std	Y+8, r24	; 0x08
	//	else 
	//		sprintf( buf, "gpib_write: 0x%02x\n\r", bytes[0] );
	//	uart_puts((char*)buf);

	// release EOI during transmission
	release_bit(DDRD, PORTD, G_EOI);
     b86:	a1 e3       	ldi	r26, 0x31	; 49
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e1 e3       	ldi	r30, 0x31	; 49
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8f 7e       	andi	r24, 0xEF	; 239
     b92:	8c 93       	st	X, r24
     b94:	a2 e3       	ldi	r26, 0x32	; 50
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e2 e3       	ldi	r30, 0x32	; 50
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 61       	ori	r24, 0x10	; 16
     ba0:	8c 93       	st	X, r24
	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
     ba2:	a1 e3       	ldi	r26, 0x31	; 49
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e1 e3       	ldi	r30, 0x31	; 49
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8b 7f       	andi	r24, 0xFB	; 251
     bae:	8c 93       	st	X, r24
     bb0:	a2 e3       	ldi	r26, 0x32	; 50
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e2 e3       	ldi	r30, 0x32	; 50
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	84 60       	ori	r24, 0x04	; 4
     bbc:	8c 93       	st	X, r24
	// release NRFD (just to be sure)
	release_bit(DDRD, PORTD, G_NRFD);
     bbe:	a1 e3       	ldi	r26, 0x31	; 49
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e1 e3       	ldi	r30, 0x31	; 49
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	87 7f       	andi	r24, 0xF7	; 247
     bca:	8c 93       	st	X, r24
     bcc:	a2 e3       	ldi	r26, 0x32	; 50
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e2 e3       	ldi	r30, 0x32	; 50
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	88 60       	ori	r24, 0x08	; 8
     bd8:	8c 93       	st	X, r24

	// bytes[0] = 'a'
	// bytes[1] = 'b'
	// length = 2
	for (i = 0; i < length; i++) {
     bda:	1c 82       	std	Y+4, r1	; 0x04
     bdc:	1b 82       	std	Y+3, r1	; 0x03
     bde:	34 c2       	rjmp	.+1128   	; 0x1048 <_gpib_write+0x52a>

		// put data on bus
		c = bytes[i];
     be0:	2b 81       	ldd	r18, Y+3	; 0x03
     be2:	3c 81       	ldd	r19, Y+4	; 0x04
     be4:	8e 81       	ldd	r24, Y+6	; 0x06
     be6:	9f 81       	ldd	r25, Y+7	; 0x07
     be8:	fc 01       	movw	r30, r24
     bea:	e2 0f       	add	r30, r18
     bec:	f3 1f       	adc	r31, r19
     bee:	80 81       	ld	r24, Z
     bf0:	8d 83       	std	Y+5, r24	; 0x05
		//sprintf( buf, "char: %c\n\r", c );
		//uart_puts(buf);		

		release_bit(DDRD, PORTD, G_NDAC);
     bf2:	a1 e3       	ldi	r26, 0x31	; 49
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e1 e3       	ldi	r30, 0x31	; 49
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	8f 7d       	andi	r24, 0xDF	; 223
     bfe:	8c 93       	st	X, r24
     c00:	a2 e3       	ldi	r26, 0x32	; 50
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e2 e3       	ldi	r30, 0x32	; 50
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	80 62       	ori	r24, 0x20	; 32
     c0c:	8c 93       	st	X, r24
		//uart_puts("0");
		// wait for NDAC assign from all listeners
#ifdef WITH_TIMEOUT
		timeout = s + 5;
     c0e:	80 91 c9 04 	lds	r24, 0x04C9
     c12:	88 2f       	mov	r24, r24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	05 96       	adiw	r24, 0x05	; 5
     c18:	9a 83       	std	Y+2, r25	; 0x02
     c1a:	89 83       	std	Y+1, r24	; 0x01
     c1c:	10 c0       	rjmp	.+32     	; 0xc3e <_gpib_write+0x120>
		//gpib_info();
		while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
			if (s == timeout) {
     c1e:	80 91 c9 04 	lds	r24, 0x04C9
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	9a 81       	ldd	r25, Y+2	; 0x02
     c2a:	28 17       	cp	r18, r24
     c2c:	39 07       	cpc	r19, r25
     c2e:	39 f4       	brne	.+14     	; 0xc3e <_gpib_write+0x120>
				uart_puts("\n\rError: NDAC timeout\n\r");
     c30:	86 e9       	ldi	r24, 0x96	; 150
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
				return 0xff;
     c38:	8f ef       	ldi	r24, 0xFF	; 255
     c3a:	8b 87       	std	Y+11, r24	; 0x0b
     c3c:	21 c2       	rjmp	.+1090   	; 0x1080 <_gpib_write+0x562>
		//uart_puts("0");
		// wait for NDAC assign from all listeners
#ifdef WITH_TIMEOUT
		timeout = s + 5;
		//gpib_info();
		while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
     c3e:	e0 e3       	ldi	r30, 0x30	; 48
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	88 2f       	mov	r24, r24
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	80 72       	andi	r24, 0x20	; 32
     c4a:	90 70       	andi	r25, 0x00	; 0
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	49 f0       	breq	.+18     	; 0xc62 <_gpib_write+0x144>
     c50:	80 91 c9 04 	lds	r24, 0x04C9
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	82 17       	cp	r24, r18
     c5e:	93 07       	cpc	r25, r19
     c60:	f4 f6       	brge	.-68     	; 0xc1e <_gpib_write+0x100>
		}
#else
		loop_until_bit_is_clear(PIND,G_NDAC);
#endif

		DDRA = 0x00;
     c62:	ea e3       	ldi	r30, 0x3A	; 58
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	10 82       	st	Z, r1
		if (c & 0x01) {
     c68:	8d 81       	ldd	r24, Y+5	; 0x05
     c6a:	88 2f       	mov	r24, r24
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	81 70       	andi	r24, 0x01	; 1
     c70:	90 70       	andi	r25, 0x00	; 0
     c72:	88 23       	and	r24, r24
     c74:	b1 f0       	breq	.+44     	; 0xca2 <_gpib_write+0x184>
			assign_bit(DDRA, PORTA, PA0);
     c76:	ab e3       	ldi	r26, 0x3B	; 59
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	eb e3       	ldi	r30, 0x3B	; 59
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	8e 7f       	andi	r24, 0xFE	; 254
     c82:	8c 93       	st	X, r24
     c84:	aa e3       	ldi	r26, 0x3A	; 58
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	ea e3       	ldi	r30, 0x3A	; 58
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	81 60       	ori	r24, 0x01	; 1
     c90:	8c 93       	st	X, r24
     c92:	ab e3       	ldi	r26, 0x3B	; 59
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	eb e3       	ldi	r30, 0x3B	; 59
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	8e 7f       	andi	r24, 0xFE	; 254
     c9e:	8c 93       	st	X, r24
     ca0:	0e c0       	rjmp	.+28     	; 0xcbe <_gpib_write+0x1a0>
		} else {
			release_bit(DDRA, PORTA, PA0)
     ca2:	aa e3       	ldi	r26, 0x3A	; 58
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8e 7f       	andi	r24, 0xFE	; 254
     cae:	8c 93       	st	X, r24
     cb0:	ab e3       	ldi	r26, 0x3B	; 59
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	eb e3       	ldi	r30, 0x3B	; 59
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	81 60       	ori	r24, 0x01	; 1
     cbc:	8c 93       	st	X, r24
		}

		if (c & 0x02) {
     cbe:	8d 81       	ldd	r24, Y+5	; 0x05
     cc0:	88 2f       	mov	r24, r24
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	82 70       	andi	r24, 0x02	; 2
     cc6:	90 70       	andi	r25, 0x00	; 0
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	b1 f0       	breq	.+44     	; 0xcf8 <_gpib_write+0x1da>
			assign_bit(DDRA, PORTA, PA1)
     ccc:	ab e3       	ldi	r26, 0x3B	; 59
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	eb e3       	ldi	r30, 0x3B	; 59
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	8d 7f       	andi	r24, 0xFD	; 253
     cd8:	8c 93       	st	X, r24
     cda:	aa e3       	ldi	r26, 0x3A	; 58
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	ea e3       	ldi	r30, 0x3A	; 58
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	82 60       	ori	r24, 0x02	; 2
     ce6:	8c 93       	st	X, r24
     ce8:	ab e3       	ldi	r26, 0x3B	; 59
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	eb e3       	ldi	r30, 0x3B	; 59
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	8d 7f       	andi	r24, 0xFD	; 253
     cf4:	8c 93       	st	X, r24
     cf6:	0e c0       	rjmp	.+28     	; 0xd14 <_gpib_write+0x1f6>
		} else {
			release_bit(DDRA, PORTA, PA1);
     cf8:	aa e3       	ldi	r26, 0x3A	; 58
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	ea e3       	ldi	r30, 0x3A	; 58
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	8d 7f       	andi	r24, 0xFD	; 253
     d04:	8c 93       	st	X, r24
     d06:	ab e3       	ldi	r26, 0x3B	; 59
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	eb e3       	ldi	r30, 0x3B	; 59
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	82 60       	ori	r24, 0x02	; 2
     d12:	8c 93       	st	X, r24
		}

		if (c & 0x04) {
     d14:	8d 81       	ldd	r24, Y+5	; 0x05
     d16:	88 2f       	mov	r24, r24
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	84 70       	andi	r24, 0x04	; 4
     d1c:	90 70       	andi	r25, 0x00	; 0
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	b1 f0       	breq	.+44     	; 0xd4e <_gpib_write+0x230>
			assign_bit(DDRA, PORTA, PA2);
     d22:	ab e3       	ldi	r26, 0x3B	; 59
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	eb e3       	ldi	r30, 0x3B	; 59
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	8b 7f       	andi	r24, 0xFB	; 251
     d2e:	8c 93       	st	X, r24
     d30:	aa e3       	ldi	r26, 0x3A	; 58
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	ea e3       	ldi	r30, 0x3A	; 58
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	84 60       	ori	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	ab e3       	ldi	r26, 0x3B	; 59
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	eb e3       	ldi	r30, 0x3B	; 59
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	8b 7f       	andi	r24, 0xFB	; 251
     d4a:	8c 93       	st	X, r24
     d4c:	0e c0       	rjmp	.+28     	; 0xd6a <_gpib_write+0x24c>
		} else {
			release_bit(DDRA, PORTA, PA2);
     d4e:	aa e3       	ldi	r26, 0x3A	; 58
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	ea e3       	ldi	r30, 0x3A	; 58
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	8b 7f       	andi	r24, 0xFB	; 251
     d5a:	8c 93       	st	X, r24
     d5c:	ab e3       	ldi	r26, 0x3B	; 59
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	eb e3       	ldi	r30, 0x3B	; 59
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	84 60       	ori	r24, 0x04	; 4
     d68:	8c 93       	st	X, r24
		}

		if (c & 0x08) {
     d6a:	8d 81       	ldd	r24, Y+5	; 0x05
     d6c:	88 2f       	mov	r24, r24
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	88 70       	andi	r24, 0x08	; 8
     d72:	90 70       	andi	r25, 0x00	; 0
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	b1 f0       	breq	.+44     	; 0xda4 <_gpib_write+0x286>
			assign_bit(DDRA, PORTA, PA3);
     d78:	ab e3       	ldi	r26, 0x3B	; 59
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	eb e3       	ldi	r30, 0x3B	; 59
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	87 7f       	andi	r24, 0xF7	; 247
     d84:	8c 93       	st	X, r24
     d86:	aa e3       	ldi	r26, 0x3A	; 58
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	ea e3       	ldi	r30, 0x3A	; 58
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	88 60       	ori	r24, 0x08	; 8
     d92:	8c 93       	st	X, r24
     d94:	ab e3       	ldi	r26, 0x3B	; 59
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	eb e3       	ldi	r30, 0x3B	; 59
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	87 7f       	andi	r24, 0xF7	; 247
     da0:	8c 93       	st	X, r24
     da2:	0e c0       	rjmp	.+28     	; 0xdc0 <_gpib_write+0x2a2>
		} else {
			release_bit(DDRA, PORTA, PA3);
     da4:	aa e3       	ldi	r26, 0x3A	; 58
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	ea e3       	ldi	r30, 0x3A	; 58
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	87 7f       	andi	r24, 0xF7	; 247
     db0:	8c 93       	st	X, r24
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	88 60       	ori	r24, 0x08	; 8
     dbe:	8c 93       	st	X, r24
		}

		if (c & 0x10) {
     dc0:	8d 81       	ldd	r24, Y+5	; 0x05
     dc2:	88 2f       	mov	r24, r24
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	80 71       	andi	r24, 0x10	; 16
     dc8:	90 70       	andi	r25, 0x00	; 0
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	b1 f0       	breq	.+44     	; 0xdfa <_gpib_write+0x2dc>
			assign_bit(DDRA, PORTA, PA4);
     dce:	ab e3       	ldi	r26, 0x3B	; 59
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	eb e3       	ldi	r30, 0x3B	; 59
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	8f 7e       	andi	r24, 0xEF	; 239
     dda:	8c 93       	st	X, r24
     ddc:	aa e3       	ldi	r26, 0x3A	; 58
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	ea e3       	ldi	r30, 0x3A	; 58
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	80 61       	ori	r24, 0x10	; 16
     de8:	8c 93       	st	X, r24
     dea:	ab e3       	ldi	r26, 0x3B	; 59
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	eb e3       	ldi	r30, 0x3B	; 59
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	8f 7e       	andi	r24, 0xEF	; 239
     df6:	8c 93       	st	X, r24
     df8:	0e c0       	rjmp	.+28     	; 0xe16 <_gpib_write+0x2f8>
		} else {
			release_bit(DDRA, PORTA, PA4);
     dfa:	aa e3       	ldi	r26, 0x3A	; 58
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	ea e3       	ldi	r30, 0x3A	; 58
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8f 7e       	andi	r24, 0xEF	; 239
     e06:	8c 93       	st	X, r24
     e08:	ab e3       	ldi	r26, 0x3B	; 59
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	eb e3       	ldi	r30, 0x3B	; 59
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	80 61       	ori	r24, 0x10	; 16
     e14:	8c 93       	st	X, r24
		}

		if (c & 0x20) {
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
     e18:	88 2f       	mov	r24, r24
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	80 72       	andi	r24, 0x20	; 32
     e1e:	90 70       	andi	r25, 0x00	; 0
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	b1 f0       	breq	.+44     	; 0xe50 <_gpib_write+0x332>
			assign_bit(DDRA, PORTA, PA5);
     e24:	ab e3       	ldi	r26, 0x3B	; 59
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	eb e3       	ldi	r30, 0x3B	; 59
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8f 7d       	andi	r24, 0xDF	; 223
     e30:	8c 93       	st	X, r24
     e32:	aa e3       	ldi	r26, 0x3A	; 58
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	ea e3       	ldi	r30, 0x3A	; 58
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	80 62       	ori	r24, 0x20	; 32
     e3e:	8c 93       	st	X, r24
     e40:	ab e3       	ldi	r26, 0x3B	; 59
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	eb e3       	ldi	r30, 0x3B	; 59
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	8f 7d       	andi	r24, 0xDF	; 223
     e4c:	8c 93       	st	X, r24
     e4e:	0e c0       	rjmp	.+28     	; 0xe6c <_gpib_write+0x34e>
		} else {
			release_bit(DDRA, PORTA, PA5);
     e50:	aa e3       	ldi	r26, 0x3A	; 58
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ea e3       	ldi	r30, 0x3A	; 58
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	8f 7d       	andi	r24, 0xDF	; 223
     e5c:	8c 93       	st	X, r24
     e5e:	ab e3       	ldi	r26, 0x3B	; 59
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	eb e3       	ldi	r30, 0x3B	; 59
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	80 62       	ori	r24, 0x20	; 32
     e6a:	8c 93       	st	X, r24
		}

		if (c & 0x40) {
     e6c:	8d 81       	ldd	r24, Y+5	; 0x05
     e6e:	88 2f       	mov	r24, r24
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	80 74       	andi	r24, 0x40	; 64
     e74:	90 70       	andi	r25, 0x00	; 0
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	b1 f0       	breq	.+44     	; 0xea6 <_gpib_write+0x388>
			assign_bit(DDRA, PORTA, PA6);
     e7a:	ab e3       	ldi	r26, 0x3B	; 59
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	eb e3       	ldi	r30, 0x3B	; 59
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	8f 7b       	andi	r24, 0xBF	; 191
     e86:	8c 93       	st	X, r24
     e88:	aa e3       	ldi	r26, 0x3A	; 58
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	ea e3       	ldi	r30, 0x3A	; 58
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 64       	ori	r24, 0x40	; 64
     e94:	8c 93       	st	X, r24
     e96:	ab e3       	ldi	r26, 0x3B	; 59
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	eb e3       	ldi	r30, 0x3B	; 59
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8f 7b       	andi	r24, 0xBF	; 191
     ea2:	8c 93       	st	X, r24
     ea4:	0e c0       	rjmp	.+28     	; 0xec2 <_gpib_write+0x3a4>
		} else {
			release_bit(DDRA, PORTA, PA6);
     ea6:	aa e3       	ldi	r26, 0x3A	; 58
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	ea e3       	ldi	r30, 0x3A	; 58
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8f 7b       	andi	r24, 0xBF	; 191
     eb2:	8c 93       	st	X, r24
     eb4:	ab e3       	ldi	r26, 0x3B	; 59
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	eb e3       	ldi	r30, 0x3B	; 59
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	80 64       	ori	r24, 0x40	; 64
     ec0:	8c 93       	st	X, r24
		}

		if (c & 0x80) {
     ec2:	8d 81       	ldd	r24, Y+5	; 0x05
     ec4:	88 23       	and	r24, r24
     ec6:	b4 f4       	brge	.+44     	; 0xef4 <_gpib_write+0x3d6>
			assign_bit(DDRA, PORTA, PA7);
     ec8:	ab e3       	ldi	r26, 0x3B	; 59
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	eb e3       	ldi	r30, 0x3B	; 59
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	8f 77       	andi	r24, 0x7F	; 127
     ed4:	8c 93       	st	X, r24
     ed6:	aa e3       	ldi	r26, 0x3A	; 58
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	ea e3       	ldi	r30, 0x3A	; 58
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	80 68       	ori	r24, 0x80	; 128
     ee2:	8c 93       	st	X, r24
     ee4:	ab e3       	ldi	r26, 0x3B	; 59
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	eb e3       	ldi	r30, 0x3B	; 59
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8f 77       	andi	r24, 0x7F	; 127
     ef0:	8c 93       	st	X, r24
     ef2:	0e c0       	rjmp	.+28     	; 0xf10 <_gpib_write+0x3f2>
		} else {
			release_bit(DDRA, PORTA, PA7);
     ef4:	aa e3       	ldi	r26, 0x3A	; 58
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	ea e3       	ldi	r30, 0x3A	; 58
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	8f 77       	andi	r24, 0x7F	; 127
     f00:	8c 93       	st	X, r24
     f02:	ab e3       	ldi	r26, 0x3B	; 59
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	eb e3       	ldi	r30, 0x3B	; 59
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	80 68       	ori	r24, 0x80	; 128
     f0e:	8c 93       	st	X, r24
		}

		// wait until listeners release NRFD
		//uart_puts("1");
		release_bit(DDRD, PORTD, G_NRFD);
     f10:	a1 e3       	ldi	r26, 0x31	; 49
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e1 e3       	ldi	r30, 0x31	; 49
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	87 7f       	andi	r24, 0xF7	; 247
     f1c:	8c 93       	st	X, r24
     f1e:	a2 e3       	ldi	r26, 0x32	; 50
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e2 e3       	ldi	r30, 0x32	; 50
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	88 60       	ori	r24, 0x08	; 8
     f2a:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
		//gpib_info();
		timeout = s + 5;
     f2c:	80 91 c9 04 	lds	r24, 0x04C9
     f30:	88 2f       	mov	r24, r24
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	05 96       	adiw	r24, 0x05	; 5
     f36:	9a 83       	std	Y+2, r25	; 0x02
     f38:	89 83       	std	Y+1, r24	; 0x01
     f3a:	10 c0       	rjmp	.+32     	; 0xf5c <_gpib_write+0x43e>
		while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
			if (s == timeout) {
     f3c:	80 91 c9 04 	lds	r24, 0x04C9
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	9a 81       	ldd	r25, Y+2	; 0x02
     f48:	28 17       	cp	r18, r24
     f4a:	39 07       	cpc	r19, r25
     f4c:	39 f4       	brne	.+14     	; 0xf5c <_gpib_write+0x43e>
				uart_puts("\n\rError: NRFD timeout\n\r");
     f4e:	8e ea       	ldi	r24, 0xAE	; 174
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
				return 0xff;
     f56:	8f ef       	ldi	r24, 0xFF	; 255
     f58:	8b 87       	std	Y+11, r24	; 0x0b
     f5a:	92 c0       	rjmp	.+292    	; 0x1080 <_gpib_write+0x562>
		//uart_puts("1");
		release_bit(DDRD, PORTD, G_NRFD);
#ifdef WITH_TIMEOUT
		//gpib_info();
		timeout = s + 5;
		while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
     f5c:	e0 e3       	ldi	r30, 0x30	; 48
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	88 70       	andi	r24, 0x08	; 8
     f68:	90 70       	andi	r25, 0x00	; 0
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	49 f4       	brne	.+18     	; 0xf80 <_gpib_write+0x462>
     f6e:	80 91 c9 04 	lds	r24, 0x04C9
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	9a 81       	ldd	r25, Y+2	; 0x02
     f7a:	82 17       	cp	r24, r18
     f7c:	93 07       	cpc	r25, r19
     f7e:	f4 f6       	brge	.-68     	; 0xf3c <_gpib_write+0x41e>
#else
		loop_until_bit_is_set(PIND,G_NRFD);
#endif

		// assign EOI during transmission of only last byte
		if ((i == length - 1) && !attention) {
     f80:	88 85       	ldd	r24, Y+8	; 0x08
     f82:	99 85       	ldd	r25, Y+9	; 0x09
     f84:	9c 01       	movw	r18, r24
     f86:	21 50       	subi	r18, 0x01	; 1
     f88:	30 40       	sbci	r19, 0x00	; 0
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	9c 81       	ldd	r25, Y+4	; 0x04
     f8e:	28 17       	cp	r18, r24
     f90:	39 07       	cpc	r19, r25
     f92:	c1 f4       	brne	.+48     	; 0xfc4 <_gpib_write+0x4a6>
     f94:	8a 85       	ldd	r24, Y+10	; 0x0a
     f96:	88 23       	and	r24, r24
     f98:	a9 f4       	brne	.+42     	; 0xfc4 <_gpib_write+0x4a6>
			//uart_puts("\n\rE\n\r");
			assign_bit(DDRD, PORTD, G_EOI);
     f9a:	a2 e3       	ldi	r26, 0x32	; 50
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e2 e3       	ldi	r30, 0x32	; 50
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	8f 7e       	andi	r24, 0xEF	; 239
     fa6:	8c 93       	st	X, r24
     fa8:	a1 e3       	ldi	r26, 0x31	; 49
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e1 e3       	ldi	r30, 0x31	; 49
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	80 61       	ori	r24, 0x10	; 16
     fb4:	8c 93       	st	X, r24
     fb6:	a2 e3       	ldi	r26, 0x32	; 50
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e2 e3       	ldi	r30, 0x32	; 50
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	8f 7e       	andi	r24, 0xEF	; 239
     fc2:	8c 93       	st	X, r24
		}

		// assign DAV, data valid for listeners
		assign_bit(DDRD, PORTD, G_DAV);
     fc4:	a2 e3       	ldi	r26, 0x32	; 50
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e2 e3       	ldi	r30, 0x32	; 50
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	8b 7f       	andi	r24, 0xFB	; 251
     fd0:	8c 93       	st	X, r24
     fd2:	a1 e3       	ldi	r26, 0x31	; 49
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e1 e3       	ldi	r30, 0x31	; 49
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	84 60       	ori	r24, 0x04	; 4
     fde:	8c 93       	st	X, r24
     fe0:	a2 e3       	ldi	r26, 0x32	; 50
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e2 e3       	ldi	r30, 0x32	; 50
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	8b 7f       	andi	r24, 0xFB	; 251
     fec:	8c 93       	st	X, r24

		// wait for NDAC release
		//uart_puts("2");
		release_bit(DDRD, PORTD, G_NDAC);
     fee:	a1 e3       	ldi	r26, 0x31	; 49
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e1 e3       	ldi	r30, 0x31	; 49
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	8f 7d       	andi	r24, 0xDF	; 223
     ffa:	8c 93       	st	X, r24
     ffc:	a2 e3       	ldi	r26, 0x32	; 50
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e2 e3       	ldi	r30, 0x32	; 50
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	80 62       	ori	r24, 0x20	; 32
    1008:	8c 93       	st	X, r24
		loop_until_bit_is_set(PIND, G_NDAC);
    100a:	e0 e3       	ldi	r30, 0x30	; 48
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	80 72       	andi	r24, 0x20	; 32
    1016:	90 70       	andi	r25, 0x00	; 0
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	b9 f3       	breq	.-18     	; 0x100a <_gpib_write+0x4ec>

		// release DAV, data not valid anymore
		release_bit(DDRD, PORTD, G_DAV);
    101c:	a1 e3       	ldi	r26, 0x31	; 49
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e1 e3       	ldi	r30, 0x31	; 49
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	8b 7f       	andi	r24, 0xFB	; 251
    1028:	8c 93       	st	X, r24
    102a:	a2 e3       	ldi	r26, 0x32	; 50
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e2 e3       	ldi	r30, 0x32	; 50
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	84 60       	ori	r24, 0x04	; 4
    1036:	8c 93       	st	X, r24

		// reset Port to all input
		DDRA = 0x00;
    1038:	ea e3       	ldi	r30, 0x3A	; 58
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	10 82       	st	Z, r1
	release_bit(DDRD, PORTD, G_NRFD);

	// bytes[0] = 'a'
	// bytes[1] = 'b'
	// length = 2
	for (i = 0; i < length; i++) {
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	9c 81       	ldd	r25, Y+4	; 0x04
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	9c 83       	std	Y+4, r25	; 0x04
    1046:	8b 83       	std	Y+3, r24	; 0x03
    1048:	2b 81       	ldd	r18, Y+3	; 0x03
    104a:	3c 81       	ldd	r19, Y+4	; 0x04
    104c:	88 85       	ldd	r24, Y+8	; 0x08
    104e:	99 85       	ldd	r25, Y+9	; 0x09
    1050:	28 17       	cp	r18, r24
    1052:	39 07       	cpc	r19, r25
    1054:	0c f4       	brge	.+2      	; 0x1058 <_gpib_write+0x53a>
    1056:	c4 cd       	rjmp	.-1144   	; 0xbe0 <_gpib_write+0xc2>
		DDRA = 0x00;

		//uart_puts("3\r\n");
	}

	if (attention) {
    1058:	8a 85       	ldd	r24, Y+10	; 0x0a
    105a:	88 23       	and	r24, r24
    105c:	71 f0       	breq	.+28     	; 0x107a <_gpib_write+0x55c>
		// assign ATN for commands
		release_bit( DDRD, PORTD, G_ATN);
    105e:	a1 e3       	ldi	r26, 0x31	; 49
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e1 e3       	ldi	r30, 0x31	; 49
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	8f 77       	andi	r24, 0x7F	; 127
    106a:	8c 93       	st	X, r24
    106c:	a2 e3       	ldi	r26, 0x32	; 50
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e2 e3       	ldi	r30, 0x32	; 50
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	80 68       	ori	r24, 0x80	; 128
    1078:	8c 93       	st	X, r24
	}

	// clear talk state.Controller does not talk anymore.
	controller.talks = 0;
    107a:	10 92 0e 04 	sts	0x040E, r1

	return 0x00;
    107e:	1b 86       	std	Y+11, r1	; 0x0b
    1080:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1082:	2b 96       	adiw	r28, 0x0b	; 11
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <gpib_info>:

/**
 * print some useful info about bus state (for example value of handshake pins)
 */
void gpib_info(void) {
    1094:	af 92       	push	r10
    1096:	bf 92       	push	r11
    1098:	cf 92       	push	r12
    109a:	df 92       	push	r13
    109c:	ef 92       	push	r14
    109e:	ff 92       	push	r15
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	28 97       	sbiw	r28, 0x08	; 8
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
	uchar dav, nrfd, ndac, eoi, atn, srq, ifc, ren;
	extern uchar buf[80];

	dav = bit_is_set(PIND,G_DAV);
    10b8:	e0 e3       	ldi	r30, 0x30	; 48
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	84 70       	andi	r24, 0x04	; 4
    10c0:	88 87       	std	Y+8, r24	; 0x08
	nrfd = bit_is_set(PIND,G_NRFD);
    10c2:	e0 e3       	ldi	r30, 0x30	; 48
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	88 70       	andi	r24, 0x08	; 8
    10ca:	8f 83       	std	Y+7, r24	; 0x07
	ndac = bit_is_set(PIND,G_NDAC);
    10cc:	e0 e3       	ldi	r30, 0x30	; 48
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	80 72       	andi	r24, 0x20	; 32
    10d4:	8e 83       	std	Y+6, r24	; 0x06
	eoi = bit_is_set(PIND,G_EOI);
    10d6:	e0 e3       	ldi	r30, 0x30	; 48
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	80 71       	andi	r24, 0x10	; 16
    10de:	8d 83       	std	Y+5, r24	; 0x05
	atn = bit_is_set(PIND,G_ATN);
    10e0:	e0 e3       	ldi	r30, 0x30	; 48
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	80 78       	andi	r24, 0x80	; 128
    10e8:	8c 83       	std	Y+4, r24	; 0x04
	srq = bit_is_set(PIND,G_SRQ);
    10ea:	e0 e3       	ldi	r30, 0x30	; 48
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	80 74       	andi	r24, 0x40	; 64
    10f2:	8b 83       	std	Y+3, r24	; 0x03
	ifc = bit_is_set(PINB,G_IFC);
    10f4:	e6 e3       	ldi	r30, 0x36	; 54
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	81 70       	andi	r24, 0x01	; 1
    10fc:	8a 83       	std	Y+2, r24	; 0x02
	ren = bit_is_set(PINB,G_REN);
    10fe:	e6 e3       	ldi	r30, 0x36	; 54
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	82 70       	andi	r24, 0x02	; 2
    1106:	89 83       	std	Y+1, r24	; 0x01
	//d = PINA;
	//di = d ^ 0xff;
	if (dav == 0x00)
    1108:	88 85       	ldd	r24, Y+8	; 0x08
    110a:	88 23       	and	r24, r24
    110c:	19 f4       	brne	.+6      	; 0x1114 <gpib_info+0x80>
		dav = '0';
    110e:	80 e3       	ldi	r24, 0x30	; 48
    1110:	88 87       	std	Y+8, r24	; 0x08
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <gpib_info+0x84>
	else
		dav = '1';
    1114:	81 e3       	ldi	r24, 0x31	; 49
    1116:	88 87       	std	Y+8, r24	; 0x08
	if (nrfd == 0x00)
    1118:	8f 81       	ldd	r24, Y+7	; 0x07
    111a:	88 23       	and	r24, r24
    111c:	19 f4       	brne	.+6      	; 0x1124 <gpib_info+0x90>
		nrfd = '0';
    111e:	80 e3       	ldi	r24, 0x30	; 48
    1120:	8f 83       	std	Y+7, r24	; 0x07
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <gpib_info+0x94>
	else
		nrfd = '1';
    1124:	81 e3       	ldi	r24, 0x31	; 49
    1126:	8f 83       	std	Y+7, r24	; 0x07
	if (ndac == 0x00)
    1128:	8e 81       	ldd	r24, Y+6	; 0x06
    112a:	88 23       	and	r24, r24
    112c:	19 f4       	brne	.+6      	; 0x1134 <gpib_info+0xa0>
		ndac = '0';
    112e:	80 e3       	ldi	r24, 0x30	; 48
    1130:	8e 83       	std	Y+6, r24	; 0x06
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <gpib_info+0xa4>
	else
		ndac = '1';
    1134:	81 e3       	ldi	r24, 0x31	; 49
    1136:	8e 83       	std	Y+6, r24	; 0x06
	if (eoi == 0x00)
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	88 23       	and	r24, r24
    113c:	19 f4       	brne	.+6      	; 0x1144 <gpib_info+0xb0>
		eoi = '0';
    113e:	80 e3       	ldi	r24, 0x30	; 48
    1140:	8d 83       	std	Y+5, r24	; 0x05
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <gpib_info+0xb4>
	else
		eoi = '1';
    1144:	81 e3       	ldi	r24, 0x31	; 49
    1146:	8d 83       	std	Y+5, r24	; 0x05
	if (atn == 0x00)
    1148:	8c 81       	ldd	r24, Y+4	; 0x04
    114a:	88 23       	and	r24, r24
    114c:	19 f4       	brne	.+6      	; 0x1154 <gpib_info+0xc0>
		atn = '0';
    114e:	80 e3       	ldi	r24, 0x30	; 48
    1150:	8c 83       	std	Y+4, r24	; 0x04
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <gpib_info+0xc4>
	else
		atn = '1';
    1154:	81 e3       	ldi	r24, 0x31	; 49
    1156:	8c 83       	std	Y+4, r24	; 0x04
	if (srq == 0x00)
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 23       	and	r24, r24
    115c:	19 f4       	brne	.+6      	; 0x1164 <gpib_info+0xd0>
		srq = '0';
    115e:	80 e3       	ldi	r24, 0x30	; 48
    1160:	8b 83       	std	Y+3, r24	; 0x03
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <gpib_info+0xd4>
	else
		srq = '1';
    1164:	81 e3       	ldi	r24, 0x31	; 49
    1166:	8b 83       	std	Y+3, r24	; 0x03
	if (ifc == 0x00)
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	88 23       	and	r24, r24
    116c:	19 f4       	brne	.+6      	; 0x1174 <gpib_info+0xe0>
		ifc = '0';
    116e:	80 e3       	ldi	r24, 0x30	; 48
    1170:	8a 83       	std	Y+2, r24	; 0x02
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <gpib_info+0xe4>
	else
		ifc = '1';
    1174:	81 e3       	ldi	r24, 0x31	; 49
    1176:	8a 83       	std	Y+2, r24	; 0x02
	if (ren == 0x00)
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	88 23       	and	r24, r24
    117c:	19 f4       	brne	.+6      	; 0x1184 <gpib_info+0xf0>
		ren = '0';
    117e:	80 e3       	ldi	r24, 0x30	; 48
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <gpib_info+0xf4>
	else
		ren = '1';
    1184:	81 e3       	ldi	r24, 0x31	; 49
    1186:	89 83       	std	Y+1, r24	; 0x01

	sprintf(buf,
    1188:	88 85       	ldd	r24, Y+8	; 0x08
    118a:	a8 2e       	mov	r10, r24
    118c:	bb 24       	eor	r11, r11
    118e:	8f 81       	ldd	r24, Y+7	; 0x07
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	8e 81       	ldd	r24, Y+6	; 0x06
    1196:	48 2f       	mov	r20, r24
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	68 2f       	mov	r22, r24
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	a8 2f       	mov	r26, r24
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	08 2f       	mov	r16, r24
    11aa:	10 e0       	ldi	r17, 0x00	; 0
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	e8 2e       	mov	r14, r24
    11b0:	ff 24       	eor	r15, r15
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	c8 2e       	mov	r12, r24
    11b6:	dd 24       	eor	r13, r13
    11b8:	8d b7       	in	r24, 0x3d	; 61
    11ba:	9e b7       	in	r25, 0x3e	; 62
    11bc:	44 97       	sbiw	r24, 0x14	; 20
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	9e bf       	out	0x3e, r25	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	8d bf       	out	0x3d, r24	; 61
    11c8:	ed b7       	in	r30, 0x3d	; 61
    11ca:	fe b7       	in	r31, 0x3e	; 62
    11cc:	31 96       	adiw	r30, 0x01	; 1
    11ce:	88 e7       	ldi	r24, 0x78	; 120
    11d0:	94 e0       	ldi	r25, 0x04	; 4
    11d2:	91 83       	std	Z+1, r25	; 0x01
    11d4:	80 83       	st	Z, r24
    11d6:	86 ec       	ldi	r24, 0xC6	; 198
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	93 83       	std	Z+3, r25	; 0x03
    11dc:	82 83       	std	Z+2, r24	; 0x02
    11de:	b5 82       	std	Z+5, r11	; 0x05
    11e0:	a4 82       	std	Z+4, r10	; 0x04
    11e2:	37 83       	std	Z+7, r19	; 0x07
    11e4:	26 83       	std	Z+6, r18	; 0x06
    11e6:	51 87       	std	Z+9, r21	; 0x09
    11e8:	40 87       	std	Z+8, r20	; 0x08
    11ea:	73 87       	std	Z+11, r23	; 0x0b
    11ec:	62 87       	std	Z+10, r22	; 0x0a
    11ee:	b5 87       	std	Z+13, r27	; 0x0d
    11f0:	a4 87       	std	Z+12, r26	; 0x0c
    11f2:	17 87       	std	Z+15, r17	; 0x0f
    11f4:	06 87       	std	Z+14, r16	; 0x0e
    11f6:	f1 8a       	std	Z+17, r15	; 0x11
    11f8:	e0 8a       	std	Z+16, r14	; 0x10
    11fa:	d3 8a       	std	Z+19, r13	; 0x13
    11fc:	c2 8a       	std	Z+18, r12	; 0x12
    11fe:	0e 94 a3 00 	call	0x146	; 0x146 <sprintf>
    1202:	8d b7       	in	r24, 0x3d	; 61
    1204:	9e b7       	in	r25, 0x3e	; 62
    1206:	44 96       	adiw	r24, 0x14	; 20
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	9e bf       	out	0x3e, r25	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	8d bf       	out	0x3d, r24	; 61
			"dav=%c,nrfd=%c,ndac=%c, eoi=%c, ifc=%c,ren=%c,atn=%c,srq=%c\n\r",
			dav, nrfd, ndac, eoi, ifc, ren, atn, srq);
	uart_puts(buf);
    1212:	88 e7       	ldi	r24, 0x78	; 120
    1214:	94 e0       	ldi	r25, 0x04	; 4
    1216:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
}
    121a:	28 96       	adiw	r28, 0x08	; 8
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	ff 90       	pop	r15
    1230:	ef 90       	pop	r14
    1232:	df 90       	pop	r13
    1234:	cf 90       	pop	r12
    1236:	bf 90       	pop	r11
    1238:	af 90       	pop	r10
    123a:	08 95       	ret

0000123c <gpib_serial_poll>:
/**
 * execute serial polling
 *
 * We return the physical address of the device that created the SRQ.
 */
uchar gpib_serial_poll(void) {
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	27 97       	sbiw	r28, 0x07	; 7
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
	uchar b, e;
	uchar address = 0, found = 0, foundPhysical=0;
    1250:	1d 82       	std	Y+5, r1	; 0x05
    1252:	1c 82       	std	Y+4, r1	; 0x04
    1254:	1b 82       	std	Y+3, r1	; 0x03
	int i;

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	cmd_buf[0] = G_CMD_UNT;
    1256:	8f e5       	ldi	r24, 0x5F	; 95
    1258:	80 93 14 04 	sts	0x0414, r24
	gpib_cmd(cmd_buf, 1);
    125c:	84 e1       	ldi	r24, 0x14	; 20
    125e:	94 e0       	ldi	r25, 0x04	; 4
    1260:	61 e0       	ldi	r22, 0x01	; 1
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>
	cmd_buf[0] = G_CMD_UNL;
    1268:	8f e3       	ldi	r24, 0x3F	; 63
    126a:	80 93 14 04 	sts	0x0414, r24
	gpib_cmd(cmd_buf, 1);
    126e:	84 e1       	ldi	r24, 0x14	; 20
    1270:	94 e0       	ldi	r25, 0x04	; 4
    1272:	61 e0       	ldi	r22, 0x01	; 1
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>

	// serial poll enable
	// effect: all devices will send status byte instead of normal data when addressed
	// as talker
	//uart_puts("before SPE\r\n");
	cmd_buf[0] = G_CMD_SPE;
    127a:	88 e1       	ldi	r24, 0x18	; 24
    127c:	80 93 14 04 	sts	0x0414, r24
	gpib_cmd(cmd_buf, 1);
    1280:	84 e1       	ldi	r24, 0x14	; 20
    1282:	94 e0       	ldi	r25, 0x04	; 4
    1284:	61 e0       	ldi	r22, 0x01	; 1
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i] != 0x00) && !found; i++) {
    128c:	1a 82       	std	Y+2, r1	; 0x02
    128e:	19 82       	std	Y+1, r1	; 0x01
    1290:	88 c0       	rjmp	.+272    	; 0x13a2 <gpib_serial_poll+0x166>

		// set partner to talker mode
		address = address2TalkerAddress( controller.partners[i] );
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	9a 81       	ldd	r25, Y+2	; 0x02
    1296:	fc 01       	movw	r30, r24
    1298:	e1 5f       	subi	r30, 0xF1	; 241
    129a:	fb 4f       	sbci	r31, 0xFB	; 251
    129c:	80 81       	ld	r24, Z
    129e:	80 5c       	subi	r24, 0xC0	; 192
    12a0:	8d 83       	std	Y+5, r24	; 0x05
		cmd_buf[0] = address;
    12a2:	8d 81       	ldd	r24, Y+5	; 0x05
    12a4:	80 93 14 04 	sts	0x0414, r24
		//uart_puts("before talker address write\r\n");
		gpib_cmd(cmd_buf, 1);
    12a8:	84 e1       	ldi	r24, 0x14	; 20
    12aa:	94 e0       	ldi	r25, 0x04	; 4
    12ac:	61 e0       	ldi	r22, 0x01	; 1
    12ae:	70 e0       	ldi	r23, 0x00	; 0
    12b0:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>
		//uart_puts("after talker address write\r\n");

		// now receive data
		//uart_puts("before status byte receive\r\n");
		e = gpib_receive(&b);
    12b4:	ce 01       	movw	r24, r28
    12b6:	07 96       	adiw	r24, 0x07	; 7
    12b8:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <gpib_receive>
    12bc:	8e 83       	std	Y+6, r24	; 0x06
		//uart_puts("after status byte receive\r\n");
		// status byte is now in b
		sprintf((char*) cmd_buf, "Status byte from device 0x%02x (physical address) = 0x%02x\n\r",
    12be:	8d 81       	ldd	r24, Y+5	; 0x05
    12c0:	88 2f       	mov	r24, r24
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	9c 01       	movw	r18, r24
    12c6:	20 54       	subi	r18, 0x40	; 64
    12c8:	30 40       	sbci	r19, 0x00	; 0
    12ca:	8f 81       	ldd	r24, Y+7	; 0x07
    12cc:	48 2f       	mov	r20, r24
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	8d b7       	in	r24, 0x3d	; 61
    12d2:	9e b7       	in	r25, 0x3e	; 62
    12d4:	08 97       	sbiw	r24, 0x08	; 8
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	9e bf       	out	0x3e, r25	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	8d bf       	out	0x3d, r24	; 61
    12e0:	ed b7       	in	r30, 0x3d	; 61
    12e2:	fe b7       	in	r31, 0x3e	; 62
    12e4:	31 96       	adiw	r30, 0x01	; 1
    12e6:	84 e1       	ldi	r24, 0x14	; 20
    12e8:	94 e0       	ldi	r25, 0x04	; 4
    12ea:	91 83       	std	Z+1, r25	; 0x01
    12ec:	80 83       	st	Z, r24
    12ee:	84 e0       	ldi	r24, 0x04	; 4
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	93 83       	std	Z+3, r25	; 0x03
    12f4:	82 83       	std	Z+2, r24	; 0x02
    12f6:	35 83       	std	Z+5, r19	; 0x05
    12f8:	24 83       	std	Z+4, r18	; 0x04
    12fa:	57 83       	std	Z+7, r21	; 0x07
    12fc:	46 83       	std	Z+6, r20	; 0x06
    12fe:	0e 94 a3 00 	call	0x146	; 0x146 <sprintf>
    1302:	8d b7       	in	r24, 0x3d	; 61
    1304:	9e b7       	in	r25, 0x3e	; 62
    1306:	08 96       	adiw	r24, 0x08	; 8
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	9e bf       	out	0x3e, r25	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	8d bf       	out	0x3d, r24	; 61
				TalkerAddress2Address(address), b);
		uart_puts((char*) cmd_buf);
    1312:	84 e1       	ldi	r24, 0x14	; 20
    1314:	94 e0       	ldi	r25, 0x04	; 4
    1316:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>

		// send UNT and UNL commands (unlisten and untalk)
		// effect: all talker stop talking and all listeners stop listening
		cmd_buf[0] = G_CMD_UNT;
    131a:	8f e5       	ldi	r24, 0x5F	; 95
    131c:	80 93 14 04 	sts	0x0414, r24
		gpib_cmd(cmd_buf, 1);
    1320:	84 e1       	ldi	r24, 0x14	; 20
    1322:	94 e0       	ldi	r25, 0x04	; 4
    1324:	61 e0       	ldi	r22, 0x01	; 1
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>
		cmd_buf[0] = G_CMD_UNL;
    132c:	8f e3       	ldi	r24, 0x3F	; 63
    132e:	80 93 14 04 	sts	0x0414, r24
		gpib_cmd(cmd_buf, 1);
    1332:	84 e1       	ldi	r24, 0x14	; 20
    1334:	94 e0       	ldi	r25, 0x04	; 4
    1336:	61 e0       	ldi	r22, 0x01	; 1
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>

		if (b & (1 << 6)) {
    133e:	8f 81       	ldd	r24, Y+7	; 0x07
    1340:	88 2f       	mov	r24, r24
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	80 74       	andi	r24, 0x40	; 64
    1346:	90 70       	andi	r25, 0x00	; 0
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	31 f1       	breq	.+76     	; 0x1398 <gpib_serial_poll+0x15c>
			found = address;
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	8c 83       	std	Y+4, r24	; 0x04
			foundPhysical = TalkerAddress2Address(found);
    1350:	8c 81       	ldd	r24, Y+4	; 0x04
    1352:	80 54       	subi	r24, 0x40	; 64
    1354:	8b 83       	std	Y+3, r24	; 0x03
			// bit 6 of status byte of SRQ emitter is 1
			// when reading status byte from emitter, he releases SRQ line (may also be tested here)
			sprintf(
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	00 d0       	rcall	.+0      	; 0x135e <gpib_serial_poll+0x122>
    135e:	00 d0       	rcall	.+0      	; 0x1360 <gpib_serial_poll+0x124>
    1360:	00 d0       	rcall	.+0      	; 0x1362 <gpib_serial_poll+0x126>
    1362:	ed b7       	in	r30, 0x3d	; 61
    1364:	fe b7       	in	r31, 0x3e	; 62
    1366:	31 96       	adiw	r30, 0x01	; 1
    1368:	84 e1       	ldi	r24, 0x14	; 20
    136a:	94 e0       	ldi	r25, 0x04	; 4
    136c:	91 83       	std	Z+1, r25	; 0x01
    136e:	80 83       	st	Z, r24
    1370:	81 e4       	ldi	r24, 0x41	; 65
    1372:	91 e0       	ldi	r25, 0x01	; 1
    1374:	93 83       	std	Z+3, r25	; 0x03
    1376:	82 83       	std	Z+2, r24	; 0x02
    1378:	35 83       	std	Z+5, r19	; 0x05
    137a:	24 83       	std	Z+4, r18	; 0x04
    137c:	0e 94 a3 00 	call	0x146	; 0x146 <sprintf>
    1380:	8d b7       	in	r24, 0x3d	; 61
    1382:	9e b7       	in	r25, 0x3e	; 62
    1384:	06 96       	adiw	r24, 0x06	; 6
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	9e bf       	out	0x3e, r25	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	8d bf       	out	0x3d, r24	; 61
					(char*) cmd_buf,
					"SRQ emitter is device = 0x%02x (physical address)\n\r",
					foundPhysical);
			uart_puts((char*) cmd_buf);
    1390:	84 e1       	ldi	r24, 0x14	; 20
    1392:	94 e0       	ldi	r25, 0x04	; 4
    1394:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
	cmd_buf[0] = G_CMD_SPE;
	gpib_cmd(cmd_buf, 1);
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i] != 0x00) && !found; i++) {
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	9a 81       	ldd	r25, Y+2	; 0x02
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	9a 83       	std	Y+2, r25	; 0x02
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	9a 81       	ldd	r25, Y+2	; 0x02
    13a6:	fc 01       	movw	r30, r24
    13a8:	e1 5f       	subi	r30, 0xF1	; 241
    13aa:	fb 4f       	sbci	r31, 0xFB	; 251
    13ac:	80 81       	ld	r24, Z
    13ae:	88 23       	and	r24, r24
    13b0:	21 f0       	breq	.+8      	; 0x13ba <gpib_serial_poll+0x17e>
    13b2:	8c 81       	ldd	r24, Y+4	; 0x04
    13b4:	88 23       	and	r24, r24
    13b6:	09 f4       	brne	.+2      	; 0x13ba <gpib_serial_poll+0x17e>
    13b8:	6c cf       	rjmp	.-296    	; 0x1292 <gpib_serial_poll+0x56>
		}
	}

	// serial poll disable
	// effect: all devices will return to normal behaviour as talker
	cmd_buf[0] = G_CMD_SPD;
    13ba:	89 e1       	ldi	r24, 0x19	; 25
    13bc:	80 93 14 04 	sts	0x0414, r24
	//uart_puts("before SPD\r\n");
	gpib_cmd(cmd_buf, 1);
    13c0:	84 e1       	ldi	r24, 0x14	; 20
    13c2:	94 e0       	ldi	r25, 0x04	; 4
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>
	//uart_puts("after SPD\r\n");

	// return SRQ emitter address if found
	return foundPhysical;
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    13ce:	27 96       	adiw	r28, 0x07	; 7
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <gpib_set_partner_pad>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_pad(uchar address) {
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	0f 92       	push	r0
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	89 83       	std	Y+1, r24	; 0x01
	controller.partner_pad = address;
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	80 93 0c 04 	sts	0x040C, r24
}
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <gpib_set_partner_sad>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_sad(uchar address) {
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	0f 92       	push	r0
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	89 83       	std	Y+1, r24	; 0x01
	controller.partner_sad = address;
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	80 93 0d 04 	sts	0x040D, r24
}
    140c:	0f 90       	pop	r0
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <gpib_get_partner_pad>:

/**
 * Get primary address of device currently controlled.
 * \returns primary address Address of device.
 */
uchar gpib_get_partner_pad(void) {
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
	return controller.partner_pad;
    141c:	80 91 0c 04 	lds	r24, 0x040C
}
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <gpib_get_partner_sad>:

/**
 * Get secondary address of device currently controlled.
 * \returns secondary address Address of device.
 */
uchar gpib_get_partner_sad(void) {
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
	return controller.partner_sad;
    142e:	80 91 0d 04 	lds	r24, 0x040D
}
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <gpib_get_address>:

/**
 * Get controller address.
 * \returns address of controller.
 */
uchar gpib_get_address(void) {
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
	return controller.myaddress;
    1440:	80 91 0b 04 	lds	r24, 0x040B
}
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <main>:
 * \brief Implementation of GPIB controller. Reads a command from RS232, sends it via bus.
 * If The command contains a '?', an answer from the device is expected and read in. The
 * answer then is printed out. If an SRQ occured, a serial poll is initiated.
 * 
 */
int main(void) {
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	ab 97       	sbiw	r28, 0x2b	; 43
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
	uchar b, e;
	uchar partnerAddress = ADDRESS_NOT_SET; // 0xff means NO address assigned
    1462:	8f ef       	ldi	r24, 0xFF	; 255
    1464:	8f 83       	std	Y+7, r24	; 0x07
	int old_time = 0;
    1466:	1e 82       	std	Y+6, r1	; 0x06
    1468:	1d 82       	std	Y+5, r1	; 0x05
	uchar srq;
	uchar is_query = 0;
    146a:	1b 82       	std	Y+3, r1	; 0x03
	uchar command_ready = 0;
    146c:	1a 82       	std	Y+2, r1	; 0x02
	char sbuf[32];
	uchar do_prompt = 1;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	89 83       	std	Y+1, r24	; 0x01

	/*
	 *  Initialize UART library, pass baudrate and avr cpu clock 
	 *  with the macro UART_BAUD_SELECT()
	 */DI();
    1472:	8c e0       	ldi	r24, 0x0C	; 12
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <uart_init>

	/*
	 * now enable interrupt, since UART and TIMER library is interrupt controlled
	 */sei();
    147a:	78 94       	sei

	/** print some usage infos */
	printHelp();
    147c:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <printHelp>

	gpib_set_partner_sad(ADDRESS_NOT_SET);
    1480:	8f ef       	ldi	r24, 0xFF	; 255
    1482:	0e 94 fd 09 	call	0x13fa	; 0x13fa <gpib_set_partner_sad>
	/*
	 * WRITE: Controller talks and listens
	 */

	// init timer for timeout detection
	timer16_init();
    1486:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <timer16_init>

	// init gpib lines
	gpib_init();
    148a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <gpib_init>
	// init controller part - assign bus 
	gpib_controller_assign(0x00);
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	0e 94 c5 04 	call	0x98a	; 0x98a <gpib_controller_assign>
	 * 3. if command was a query, read the answer from device (become listener and set device to talker)
	 * 	4. check if SRQ occured and handle that
	 */
	for (;;) {

		if (do_prompt) {
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	88 23       	and	r24, r24
    1498:	29 f0       	breq	.+10     	; 0x14a4 <main+0x5a>
			uart_puts("> ");
    149a:	85 e7       	ldi	r24, 0x75	; 117
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
			do_prompt = 0;
    14a2:	19 82       	std	Y+1, r1	; 0x01
		}
		// input processing via rs232
		// command_ready may already been set by SRQ that occured before
		if (!command_ready)
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	88 23       	and	r24, r24
    14a8:	19 f4       	brne	.+6      	; 0x14b0 <main+0x66>
			command_ready = input_process();
    14aa:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <input_process>
    14ae:	8a 83       	std	Y+2, r24	; 0x02

		// check for internal command
		if (command_ready) {
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	88 23       	and	r24, r24
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <main+0x6e>
    14b6:	ca c0       	rjmp	.+404    	; 0x164c <main+0x202>
			// all internal cmds start with a '.'
			if (buf[0] == '.') {
    14b8:	80 91 78 04 	lds	r24, 0x0478
    14bc:	8e 32       	cpi	r24, 0x2E	; 46
    14be:	09 f0       	breq	.+2      	; 0x14c2 <main+0x78>
    14c0:	c5 c0       	rjmp	.+394    	; 0x164c <main+0x202>
				uart_puts("\n\rInternal command: ");
    14c2:	88 e7       	ldi	r24, 0x78	; 120
    14c4:	91 e0       	ldi	r25, 0x01	; 1
    14c6:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
				uart_puts((char*) buf);
    14ca:	88 e7       	ldi	r24, 0x78	; 120
    14cc:	94 e0       	ldi	r25, 0x04	; 4
    14ce:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
				uart_puts("\n\r");
    14d2:	8d e8       	ldi	r24, 0x8D	; 141
    14d4:	91 e0       	ldi	r25, 0x01	; 1
    14d6:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
				// reset local vars for command string reading
				buf_ptr = 0;
    14da:	10 92 c5 03 	sts	0x03C5, r1
    14de:	10 92 c4 03 	sts	0x03C4, r1
				command_ready = 0;
    14e2:	1a 82       	std	Y+2, r1	; 0x02

				switch (buf[1]) {
    14e4:	80 91 79 04 	lds	r24, 0x0479
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	3b a7       	std	Y+43, r19	; 0x2b
    14ee:	2a a7       	std	Y+42, r18	; 0x2a
    14f0:	8a a5       	ldd	r24, Y+42	; 0x2a
    14f2:	9b a5       	ldd	r25, Y+43	; 0x2b
    14f4:	88 36       	cpi	r24, 0x68	; 104
    14f6:	91 05       	cpc	r25, r1
    14f8:	09 f4       	brne	.+2      	; 0x14fc <main+0xb2>
    14fa:	6c c0       	rjmp	.+216    	; 0x15d4 <main+0x18a>
    14fc:	2a a5       	ldd	r18, Y+42	; 0x2a
    14fe:	3b a5       	ldd	r19, Y+43	; 0x2b
    1500:	29 36       	cpi	r18, 0x69	; 105
    1502:	31 05       	cpc	r19, r1
    1504:	34 f4       	brge	.+12     	; 0x1512 <main+0xc8>
    1506:	8a a5       	ldd	r24, Y+42	; 0x2a
    1508:	9b a5       	ldd	r25, Y+43	; 0x2b
    150a:	81 36       	cpi	r24, 0x61	; 97
    150c:	91 05       	cpc	r25, r1
    150e:	69 f0       	breq	.+26     	; 0x152a <main+0xe0>
    1510:	95 c0       	rjmp	.+298    	; 0x163c <main+0x1f2>
    1512:	2a a5       	ldd	r18, Y+42	; 0x2a
    1514:	3b a5       	ldd	r19, Y+43	; 0x2b
    1516:	29 36       	cpi	r18, 0x69	; 105
    1518:	31 05       	cpc	r19, r1
    151a:	09 f4       	brne	.+2      	; 0x151e <main+0xd4>
    151c:	5e c0       	rjmp	.+188    	; 0x15da <main+0x190>
    151e:	8a a5       	ldd	r24, Y+42	; 0x2a
    1520:	9b a5       	ldd	r25, Y+43	; 0x2b
    1522:	83 37       	cpi	r24, 0x73	; 115
    1524:	91 05       	cpc	r25, r1
    1526:	61 f1       	breq	.+88     	; 0x1580 <main+0x136>
    1528:	89 c0       	rjmp	.+274    	; 0x163c <main+0x1f2>
				case 'a':
					/* set partner address */
					partnerAddress = atoi((char*) (&(buf[2])));
    152a:	8a e7       	ldi	r24, 0x7A	; 122
    152c:	94 e0       	ldi	r25, 0x04	; 4
    152e:	0e 94 69 00 	call	0xd2	; 0xd2 <atoi>
    1532:	8f 83       	std	Y+7, r24	; 0x07
					sprintf(sbuf, "Set partner address to %u\n\r",
    1534:	8f 81       	ldd	r24, Y+7	; 0x07
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	00 d0       	rcall	.+0      	; 0x153c <main+0xf2>
    153c:	00 d0       	rcall	.+0      	; 0x153e <main+0xf4>
    153e:	00 d0       	rcall	.+0      	; 0x1540 <main+0xf6>
    1540:	ed b7       	in	r30, 0x3d	; 61
    1542:	fe b7       	in	r31, 0x3e	; 62
    1544:	31 96       	adiw	r30, 0x01	; 1
    1546:	ce 01       	movw	r24, r28
    1548:	0a 96       	adiw	r24, 0x0a	; 10
    154a:	91 83       	std	Z+1, r25	; 0x01
    154c:	80 83       	st	Z, r24
    154e:	80 e9       	ldi	r24, 0x90	; 144
    1550:	91 e0       	ldi	r25, 0x01	; 1
    1552:	93 83       	std	Z+3, r25	; 0x03
    1554:	82 83       	std	Z+2, r24	; 0x02
    1556:	35 83       	std	Z+5, r19	; 0x05
    1558:	24 83       	std	Z+4, r18	; 0x04
    155a:	0e 94 a3 00 	call	0x146	; 0x146 <sprintf>
    155e:	2d b7       	in	r18, 0x3d	; 61
    1560:	3e b7       	in	r19, 0x3e	; 62
    1562:	2a 5f       	subi	r18, 0xFA	; 250
    1564:	3f 4f       	sbci	r19, 0xFF	; 255
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	3e bf       	out	0x3e, r19	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	2d bf       	out	0x3d, r18	; 61
							partnerAddress);
					uart_puts(sbuf);
    1570:	ce 01       	movw	r24, r28
    1572:	0a 96       	adiw	r24, 0x0a	; 10
    1574:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
					gpib_set_partner_pad(partnerAddress);
    1578:	8f 81       	ldd	r24, Y+7	; 0x07
    157a:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <gpib_set_partner_pad>
    157e:	64 c0       	rjmp	.+200    	; 0x1648 <main+0x1fe>
					break;
				case 's':
					/* set partner secondary address */
					partnerAddress = atoi((char*) (&(buf[2])));
    1580:	8a e7       	ldi	r24, 0x7A	; 122
    1582:	94 e0       	ldi	r25, 0x04	; 4
    1584:	0e 94 69 00 	call	0xd2	; 0xd2 <atoi>
    1588:	8f 83       	std	Y+7, r24	; 0x07
					sprintf(sbuf, "Set partner secondary address to %u\n\r",
    158a:	8f 81       	ldd	r24, Y+7	; 0x07
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	00 d0       	rcall	.+0      	; 0x1592 <main+0x148>
    1592:	00 d0       	rcall	.+0      	; 0x1594 <main+0x14a>
    1594:	00 d0       	rcall	.+0      	; 0x1596 <main+0x14c>
    1596:	ed b7       	in	r30, 0x3d	; 61
    1598:	fe b7       	in	r31, 0x3e	; 62
    159a:	31 96       	adiw	r30, 0x01	; 1
    159c:	ce 01       	movw	r24, r28
    159e:	0a 96       	adiw	r24, 0x0a	; 10
    15a0:	91 83       	std	Z+1, r25	; 0x01
    15a2:	80 83       	st	Z, r24
    15a4:	8c ea       	ldi	r24, 0xAC	; 172
    15a6:	91 e0       	ldi	r25, 0x01	; 1
    15a8:	93 83       	std	Z+3, r25	; 0x03
    15aa:	82 83       	std	Z+2, r24	; 0x02
    15ac:	35 83       	std	Z+5, r19	; 0x05
    15ae:	24 83       	std	Z+4, r18	; 0x04
    15b0:	0e 94 a3 00 	call	0x146	; 0x146 <sprintf>
    15b4:	8d b7       	in	r24, 0x3d	; 61
    15b6:	9e b7       	in	r25, 0x3e	; 62
    15b8:	06 96       	adiw	r24, 0x06	; 6
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	9e bf       	out	0x3e, r25	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	8d bf       	out	0x3d, r24	; 61
							partnerAddress);
					uart_puts(sbuf);
    15c4:	ce 01       	movw	r24, r28
    15c6:	0a 96       	adiw	r24, 0x0a	; 10
    15c8:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
					gpib_set_partner_sad(partnerAddress);
    15cc:	8f 81       	ldd	r24, Y+7	; 0x07
    15ce:	0e 94 fd 09 	call	0x13fa	; 0x13fa <gpib_set_partner_sad>
    15d2:	3a c0       	rjmp	.+116    	; 0x1648 <main+0x1fe>
					break;
				case 'h':
					/* print some usage infos */
					printHelp();
    15d4:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <printHelp>
    15d8:	37 c0       	rjmp	.+110    	; 0x1648 <main+0x1fe>
					break;
				case 'i':
					sprintf(buf, "Partner adress: primary: %u, secondary: %u\n\r", gpib_get_partner_pad(), gpib_get_partner_sad());
    15da:	0e 94 0a 0a 	call	0x1414	; 0x1414 <gpib_get_partner_pad>
    15de:	08 2f       	mov	r16, r24
    15e0:	10 e0       	ldi	r17, 0x00	; 0
    15e2:	0e 94 13 0a 	call	0x1426	; 0x1426 <gpib_get_partner_sad>
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	8d b7       	in	r24, 0x3d	; 61
    15ec:	9e b7       	in	r25, 0x3e	; 62
    15ee:	08 97       	sbiw	r24, 0x08	; 8
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	9e bf       	out	0x3e, r25	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	8d bf       	out	0x3d, r24	; 61
    15fa:	ed b7       	in	r30, 0x3d	; 61
    15fc:	fe b7       	in	r31, 0x3e	; 62
    15fe:	31 96       	adiw	r30, 0x01	; 1
    1600:	88 e7       	ldi	r24, 0x78	; 120
    1602:	94 e0       	ldi	r25, 0x04	; 4
    1604:	91 83       	std	Z+1, r25	; 0x01
    1606:	80 83       	st	Z, r24
    1608:	82 ed       	ldi	r24, 0xD2	; 210
    160a:	91 e0       	ldi	r25, 0x01	; 1
    160c:	93 83       	std	Z+3, r25	; 0x03
    160e:	82 83       	std	Z+2, r24	; 0x02
    1610:	15 83       	std	Z+5, r17	; 0x05
    1612:	04 83       	std	Z+4, r16	; 0x04
    1614:	37 83       	std	Z+7, r19	; 0x07
    1616:	26 83       	std	Z+6, r18	; 0x06
    1618:	0e 94 a3 00 	call	0x146	; 0x146 <sprintf>
    161c:	2d b7       	in	r18, 0x3d	; 61
    161e:	3e b7       	in	r19, 0x3e	; 62
    1620:	28 5f       	subi	r18, 0xF8	; 248
    1622:	3f 4f       	sbci	r19, 0xFF	; 255
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	3e bf       	out	0x3e, r19	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	2d bf       	out	0x3d, r18	; 61
					uart_puts(buf);
    162e:	88 e7       	ldi	r24, 0x78	; 120
    1630:	94 e0       	ldi	r25, 0x04	; 4
    1632:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
					gpib_info();
    1636:	0e 94 4a 08 	call	0x1094	; 0x1094 <gpib_info>
    163a:	06 c0       	rjmp	.+12     	; 0x1648 <main+0x1fe>
					break;
				default:
					uart_puts("unknown command\n\r");
    163c:	8f ef       	ldi	r24, 0xFF	; 255
    163e:	91 e0       	ldi	r25, 0x01	; 1
    1640:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
					printHelp();
    1644:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <printHelp>
					break;
				}
				do_prompt = 1;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	89 83       	std	Y+1, r24	; 0x01
			}
		}

		if (command_ready == 1 && (partnerAddress == ADDRESS_NOT_SET)) {
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	91 f4       	brne	.+36     	; 0x1676 <main+0x22c>
    1652:	8f 81       	ldd	r24, Y+7	; 0x07
    1654:	8f 3f       	cpi	r24, 0xFF	; 255
    1656:	79 f4       	brne	.+30     	; 0x1676 <main+0x22c>
			uart_puts(
    1658:	81 e1       	ldi	r24, 0x11	; 17
    165a:	92 e0       	ldi	r25, 0x02	; 2
    165c:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
					"\n\rDevice address is not set. Please set the device address before sending commands.");
			uart_puts("\n\r");
    1660:	8d e8       	ldi	r24, 0x8D	; 141
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
			command_ready = 0;
    1668:	1a 82       	std	Y+2, r1	; 0x02
			buf_ptr = 0;
    166a:	10 92 c5 03 	sts	0x03C5, r1
    166e:	10 92 c4 03 	sts	0x03C4, r1
			do_prompt = 1;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	89 83       	std	Y+1, r24	; 0x01
		}

		// if a command was entered, send it to listeners
		if (command_ready) {
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	88 23       	and	r24, r24
    167a:	09 f4       	brne	.+2      	; 0x167e <main+0x234>
    167c:	68 c0       	rjmp	.+208    	; 0x174e <main+0x304>
			// send UNT and UNL commands (unlisten and untalk)
			// effect: all talker stop talking and all listeners stop listening
			cmd_buf[0] = G_CMD_UNT;
    167e:	8f e5       	ldi	r24, 0x5F	; 95
    1680:	80 93 14 04 	sts	0x0414, r24
			gpib_cmd(cmd_buf, 1);
    1684:	84 e1       	ldi	r24, 0x14	; 20
    1686:	94 e0       	ldi	r25, 0x04	; 4
    1688:	61 e0       	ldi	r22, 0x01	; 1
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>
			cmd_buf[0] = G_CMD_UNL;
    1690:	8f e3       	ldi	r24, 0x3F	; 63
    1692:	80 93 14 04 	sts	0x0414, r24
			gpib_cmd(cmd_buf, 1);
    1696:	84 e1       	ldi	r24, 0x14	; 20
    1698:	94 e0       	ldi	r25, 0x04	; 4
    169a:	61 e0       	ldi	r22, 0x01	; 1
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>

			// set device (oszi) to listener mode
			partnerAddress = address2ListenerAddress(gpib_get_partner_pad());
    16a2:	0e 94 0a 0a 	call	0x1414	; 0x1414 <gpib_get_partner_pad>
    16a6:	80 5e       	subi	r24, 0xE0	; 224
    16a8:	8f 83       	std	Y+7, r24	; 0x07
			cmd_buf[0] = partnerAddress;
    16aa:	8f 81       	ldd	r24, Y+7	; 0x07
    16ac:	80 93 14 04 	sts	0x0414, r24
			gpib_cmd(cmd_buf, 1);
    16b0:	84 e1       	ldi	r24, 0x14	; 20
    16b2:	94 e0       	ldi	r25, 0x04	; 4
    16b4:	61 e0       	ldi	r22, 0x01	; 1
    16b6:	70 e0       	ldi	r23, 0x00	; 0
    16b8:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>
			// secondary address if required
			if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
    16bc:	0e 94 13 0a 	call	0x1426	; 0x1426 <gpib_get_partner_sad>
    16c0:	8f 3f       	cpi	r24, 0xFF	; 255
    16c2:	69 f0       	breq	.+26     	; 0x16de <main+0x294>
				partnerAddress = secondaryAdressToAdressByte(
    16c4:	0e 94 13 0a 	call	0x1426	; 0x1426 <gpib_get_partner_sad>
    16c8:	80 66       	ori	r24, 0x60	; 96
    16ca:	8f 83       	std	Y+7, r24	; 0x07
						gpib_get_partner_sad());
				cmd_buf[0] = partnerAddress;
    16cc:	8f 81       	ldd	r24, Y+7	; 0x07
    16ce:	80 93 14 04 	sts	0x0414, r24
				gpib_cmd(cmd_buf, 1);
    16d2:	84 e1       	ldi	r24, 0x14	; 20
    16d4:	94 e0       	ldi	r25, 0x04	; 4
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>
			}

			// set myself (controller) to talker mode
			partnerAddress = address2TalkerAddress(gpib_get_address());
    16de:	0e 94 1c 0a 	call	0x1438	; 0x1438 <gpib_get_address>
    16e2:	80 5c       	subi	r24, 0xC0	; 192
    16e4:	8f 83       	std	Y+7, r24	; 0x07
			cmd_buf[0] = partnerAddress;
    16e6:	8f 81       	ldd	r24, Y+7	; 0x07
    16e8:	80 93 14 04 	sts	0x0414, r24
			gpib_cmd(cmd_buf, 1);
    16ec:	84 e1       	ldi	r24, 0x14	; 20
    16ee:	94 e0       	ldi	r25, 0x04	; 4
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>

			// put out command to listeners
			uart_puts("\n\rcommand: ");
    16f8:	85 e6       	ldi	r24, 0x65	; 101
    16fa:	92 e0       	ldi	r25, 0x02	; 2
    16fc:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
			uart_puts((char*) buf);
    1700:	88 e7       	ldi	r24, 0x78	; 120
    1702:	94 e0       	ldi	r25, 0x04	; 4
    1704:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
			uart_puts("\n\r");
    1708:	8d e8       	ldi	r24, 0x8D	; 141
    170a:	91 e0       	ldi	r25, 0x01	; 1
    170c:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
			// gpib bus write
			gpib_write(buf, 0);
    1710:	88 e7       	ldi	r24, 0x78	; 120
    1712:	94 e0       	ldi	r25, 0x04	; 4
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	0e 94 5d 05 	call	0xaba	; 0xaba <gpib_write>

			// check if query or command only
			// all queries contain a '?'
			if (strchr((char*) buf, '?') != NULL) {
    171c:	88 e7       	ldi	r24, 0x78	; 120
    171e:	94 e0       	ldi	r25, 0x04	; 4
    1720:	6f e3       	ldi	r22, 0x3F	; 63
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	0e 94 87 00 	call	0x10e	; 0x10e <strchr>
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	39 f0       	breq	.+14     	; 0x173a <main+0x2f0>
				uart_puts("Query. Will check for answer.\n\r");
    172c:	81 e7       	ldi	r24, 0x71	; 113
    172e:	92 e0       	ldi	r25, 0x02	; 2
    1730:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
				is_query = 1;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	8b 83       	std	Y+3, r24	; 0x03
    1738:	05 c0       	rjmp	.+10     	; 0x1744 <main+0x2fa>
			} else {
				uart_puts("Command only.\n\r> ");
    173a:	81 e9       	ldi	r24, 0x91	; 145
    173c:	92 e0       	ldi	r25, 0x02	; 2
    173e:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
				is_query = 0;
    1742:	1b 82       	std	Y+3, r1	; 0x03
			}

			// reset local vars for command string reading
			buf_ptr = 0;
    1744:	10 92 c5 03 	sts	0x03C5, r1
    1748:	10 92 c4 03 	sts	0x03C4, r1
			command_ready = 0;
    174c:	1a 82       	std	Y+2, r1	; 0x02
		}

		// if we sent a query, read the answer
		if (is_query) {
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	88 23       	and	r24, r24
    1752:	09 f4       	brne	.+2      	; 0x1756 <main+0x30c>
    1754:	63 c0       	rjmp	.+198    	; 0x181c <main+0x3d2>
			// UNT and UNL
			cmd_buf[0] = G_CMD_UNT;
    1756:	8f e5       	ldi	r24, 0x5F	; 95
    1758:	80 93 14 04 	sts	0x0414, r24
			gpib_cmd(cmd_buf, 1);
    175c:	84 e1       	ldi	r24, 0x14	; 20
    175e:	94 e0       	ldi	r25, 0x04	; 4
    1760:	61 e0       	ldi	r22, 0x01	; 1
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>
			cmd_buf[0] = G_CMD_UNL;
    1768:	8f e3       	ldi	r24, 0x3F	; 63
    176a:	80 93 14 04 	sts	0x0414, r24
			gpib_cmd(cmd_buf, 1);
    176e:	84 e1       	ldi	r24, 0x14	; 20
    1770:	94 e0       	ldi	r25, 0x04	; 4
    1772:	61 e0       	ldi	r22, 0x01	; 1
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>

			// set myself (controller) to listener mode
			partnerAddress = address2ListenerAddress(gpib_get_address());
    177a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <gpib_get_address>
    177e:	80 5e       	subi	r24, 0xE0	; 224
    1780:	8f 83       	std	Y+7, r24	; 0x07
			cmd_buf[0] = partnerAddress;
    1782:	8f 81       	ldd	r24, Y+7	; 0x07
    1784:	80 93 14 04 	sts	0x0414, r24
			gpib_cmd(cmd_buf, 1);
    1788:	84 e1       	ldi	r24, 0x14	; 20
    178a:	94 e0       	ldi	r25, 0x04	; 4
    178c:	61 e0       	ldi	r22, 0x01	; 1
    178e:	70 e0       	ldi	r23, 0x00	; 0
    1790:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>

			// set device (oszi) to talker mode
			partnerAddress = address2TalkerAddress(gpib_get_partner_pad());
    1794:	0e 94 0a 0a 	call	0x1414	; 0x1414 <gpib_get_partner_pad>
    1798:	80 5c       	subi	r24, 0xC0	; 192
    179a:	8f 83       	std	Y+7, r24	; 0x07
			cmd_buf[0] = partnerAddress;
    179c:	8f 81       	ldd	r24, Y+7	; 0x07
    179e:	80 93 14 04 	sts	0x0414, r24
			gpib_cmd(cmd_buf, 1);
    17a2:	84 e1       	ldi	r24, 0x14	; 20
    17a4:	94 e0       	ldi	r25, 0x04	; 4
    17a6:	61 e0       	ldi	r22, 0x01	; 1
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>
			// secondary address if required
			if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
    17ae:	0e 94 13 0a 	call	0x1426	; 0x1426 <gpib_get_partner_sad>
    17b2:	8f 3f       	cpi	r24, 0xFF	; 255
    17b4:	69 f0       	breq	.+26     	; 0x17d0 <main+0x386>
				partnerAddress = secondaryAdressToAdressByte(
    17b6:	0e 94 13 0a 	call	0x1426	; 0x1426 <gpib_get_partner_sad>
    17ba:	80 66       	ori	r24, 0x60	; 96
    17bc:	8f 83       	std	Y+7, r24	; 0x07
						gpib_get_partner_sad());
				cmd_buf[0] = partnerAddress;
    17be:	8f 81       	ldd	r24, Y+7	; 0x07
    17c0:	80 93 14 04 	sts	0x0414, r24
				gpib_cmd(cmd_buf, 1);
    17c4:	84 e1       	ldi	r24, 0x14	; 20
    17c6:	94 e0       	ldi	r25, 0x04	; 4
    17c8:	61 e0       	ldi	r22, 0x01	; 1
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>
			}

			// read the answer until EOI is detected (then e becomes true)
			do {
				// gpib bus receive
				e = gpib_receive(&b);
    17d0:	ce 01       	movw	r24, r28
    17d2:	09 96       	adiw	r24, 0x09	; 9
    17d4:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <gpib_receive>
    17d8:	88 87       	std	Y+8, r24	; 0x08
				// write out character
				uart_putc(b);
    17da:	89 85       	ldd	r24, Y+9	; 0x09
    17dc:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <uart_putc>
				//sprintf((char*)buf,"%02x - %c\n\r", b, b);
				//uart_puts((char*)buf);
			} while (!e);
    17e0:	88 85       	ldd	r24, Y+8	; 0x08
    17e2:	88 23       	and	r24, r24
    17e4:	a9 f3       	breq	.-22     	; 0x17d0 <main+0x386>

			// send UNT and UNL commands (unlisten and untalk)
			// effect: all talker stop talking and all listeners stop listening
			cmd_buf[0] = G_CMD_UNT;
    17e6:	8f e5       	ldi	r24, 0x5F	; 95
    17e8:	80 93 14 04 	sts	0x0414, r24
			gpib_cmd(cmd_buf, 1);
    17ec:	84 e1       	ldi	r24, 0x14	; 20
    17ee:	94 e0       	ldi	r25, 0x04	; 4
    17f0:	61 e0       	ldi	r22, 0x01	; 1
    17f2:	70 e0       	ldi	r23, 0x00	; 0
    17f4:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>
			cmd_buf[0] = G_CMD_UNL;
    17f8:	8f e3       	ldi	r24, 0x3F	; 63
    17fa:	80 93 14 04 	sts	0x0414, r24
			gpib_cmd(cmd_buf, 1);
    17fe:	84 e1       	ldi	r24, 0x14	; 20
    1800:	94 e0       	ldi	r25, 0x04	; 4
    1802:	61 e0       	ldi	r22, 0x01	; 1
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	0e 94 76 05 	call	0xaec	; 0xaec <gpib_cmd>

			uart_puts("\n\r"); // tek1241 is not sending cr,lf at command end, so create it always itself
    180a:	8d e8       	ldi	r24, 0x8D	; 141
    180c:	91 e0       	ldi	r25, 0x01	; 1
    180e:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
			uart_puts("> ");
    1812:	85 e7       	ldi	r24, 0x75	; 117
    1814:	91 e0       	ldi	r25, 0x01	; 1
    1816:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
			// reset for next command
			is_query = 0;
    181a:	1b 82       	std	Y+3, r1	; 0x03
		}

		// SRQ detection - do this every time when time value s has changed
		// s is incremented every second. So we check once a second.
		srq = 0;
    181c:	1c 82       	std	Y+4, r1	; 0x04
		if (old_time == 0) {
    181e:	8d 81       	ldd	r24, Y+5	; 0x05
    1820:	9e 81       	ldd	r25, Y+6	; 0x06
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	39 f4       	brne	.+14     	; 0x1834 <main+0x3ea>
			// old_time value initialization on first call with value s
			old_time = s;
    1826:	80 91 c9 04 	lds	r24, 0x04C9
    182a:	88 2f       	mov	r24, r24
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	9e 83       	std	Y+6, r25	; 0x06
    1830:	8d 83       	std	Y+5, r24	; 0x05
    1832:	1c c0       	rjmp	.+56     	; 0x186c <main+0x422>
		} else {
			if (s > old_time) {
    1834:	80 91 c9 04 	lds	r24, 0x04C9
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	8d 81       	ldd	r24, Y+5	; 0x05
    183e:	9e 81       	ldd	r25, Y+6	; 0x06
    1840:	82 17       	cp	r24, r18
    1842:	93 07       	cpc	r25, r19
    1844:	9c f4       	brge	.+38     	; 0x186c <main+0x422>
				// some time has passed - check if srq was set
				srq = bit_is_clear(PIND, G_SRQ);
    1846:	e0 e3       	ldi	r30, 0x30	; 48
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	88 2f       	mov	r24, r24
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	80 74       	andi	r24, 0x40	; 64
    1852:	90 70       	andi	r25, 0x00	; 0
    1854:	1c 82       	std	Y+4, r1	; 0x04
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	11 f4       	brne	.+4      	; 0x185e <main+0x414>
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	8c 83       	std	Y+4, r24	; 0x04
				if (srq)
    185e:	8c 81       	ldd	r24, Y+4	; 0x04
    1860:	88 23       	and	r24, r24
    1862:	21 f0       	breq	.+8      	; 0x186c <main+0x422>
					uart_puts("\n\rSRQ detected.\n\r");
    1864:	83 ea       	ldi	r24, 0xA3	; 163
    1866:	92 e0       	ldi	r25, 0x02	; 2
    1868:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
			}
		}

		// SRQ handling by doing serial poll
		if (srq) {
    186c:	8c 81       	ldd	r24, Y+4	; 0x04
    186e:	88 23       	and	r24, r24
    1870:	09 f4       	brne	.+2      	; 0x1874 <main+0x42a>
    1872:	10 ce       	rjmp	.-992    	; 0x1494 <main+0x4a>
			// reset srq for next call
			srq = 0;
    1874:	1c 82       	std	Y+4, r1	; 0x04
			// handle srq with serial poll
			partnerAddress = gpib_serial_poll();
    1876:	0e 94 1e 09 	call	0x123c	; 0x123c <gpib_serial_poll>
    187a:	8f 83       	std	Y+7, r24	; 0x07
			gpib_set_partner_pad(partnerAddress);
    187c:	8f 81       	ldd	r24, Y+7	; 0x07
    187e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <gpib_set_partner_pad>
			// check status for reason
			buf[0] = 'E';
    1882:	85 e4       	ldi	r24, 0x45	; 69
    1884:	80 93 78 04 	sts	0x0478, r24
			buf[1] = 'V';
    1888:	86 e5       	ldi	r24, 0x56	; 86
    188a:	80 93 79 04 	sts	0x0479, r24
			buf[2] = 'E';
    188e:	85 e4       	ldi	r24, 0x45	; 69
    1890:	80 93 7a 04 	sts	0x047A, r24
			buf[3] = 'N';
    1894:	8e e4       	ldi	r24, 0x4E	; 78
    1896:	80 93 7b 04 	sts	0x047B, r24
			buf[4] = 'T';
    189a:	84 e5       	ldi	r24, 0x54	; 84
    189c:	80 93 7c 04 	sts	0x047C, r24
			buf[5] = '?';
    18a0:	8f e3       	ldi	r24, 0x3F	; 63
    18a2:	80 93 7d 04 	sts	0x047D, r24
			buf[6] = '\0';
    18a6:	10 92 7e 04 	sts	0x047E, r1
			buf_ptr = 6;
    18aa:	86 e0       	ldi	r24, 0x06	; 6
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	90 93 c5 03 	sts	0x03C5, r25
    18b2:	80 93 c4 03 	sts	0x03C4, r24
			command_ready = 1;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	8a 83       	std	Y+2, r24	; 0x02
    18ba:	ec cd       	rjmp	.-1064   	; 0x1494 <main+0x4a>

000018bc <input_process>:
 * Processing user input
 * \brief Read in user input via rs232 using peter fleurys UART library.
 * \returns The character read in
 */

uchar input_process(void) {
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <input_process+0x6>
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <input_process+0x8>
    18c4:	0f 92       	push	r0
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
	unsigned int c;
	uchar ch;
	uchar ret = 0;
    18ca:	19 82       	std	Y+1, r1	; 0x01
	 * uart_getc() returns in the lower byte the received character and 
	 * in the higher byte (bitmask) the last receive error
	 * UART_NO_DATA is returned when no data is available.
	 *
	 */
	c = uart_getc();
    18cc:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <uart_getc>
    18d0:	9c 83       	std	Y+4, r25	; 0x04
    18d2:	8b 83       	std	Y+3, r24	; 0x03
	if (c & UART_NO_DATA) {
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	9c 81       	ldd	r25, Y+4	; 0x04
    18d8:	80 70       	andi	r24, 0x00	; 0
    18da:	91 70       	andi	r25, 0x01	; 1
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	11 f0       	breq	.+4      	; 0x18e4 <input_process+0x28>
		// no data available from UART
		return 0;
    18e0:	1d 82       	std	Y+5, r1	; 0x05
    18e2:	58 c0       	rjmp	.+176    	; 0x1994 <input_process+0xd8>

	/*
	 * new data available from UART
	 * check for Frame or Overrun error
	 */
	if (c & UART_FRAME_ERROR) {
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	9c 81       	ldd	r25, Y+4	; 0x04
    18e8:	80 70       	andi	r24, 0x00	; 0
    18ea:	98 70       	andi	r25, 0x08	; 8
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	21 f0       	breq	.+8      	; 0x18f8 <input_process+0x3c>
		/* Framing Error detected, i.e no stop bit detected */
		uart_puts_P("UART Frame Error: ");
    18f0:	81 e8       	ldi	r24, 0x81	; 129
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <uart_puts_p>
	}
	if (c & UART_OVERRUN_ERROR) {
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	9c 81       	ldd	r25, Y+4	; 0x04
    18fc:	80 70       	andi	r24, 0x00	; 0
    18fe:	94 70       	andi	r25, 0x04	; 4
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	21 f0       	breq	.+8      	; 0x190c <input_process+0x50>
		/* 
		 * Overrun, a character already present in the UART UDR register was 
		 * not read by the interrupt handler before the next character arrived,
		 * one or more received characters have been dropped
		 */
		uart_puts_P("UART Overrun Error: ");
    1904:	8c e6       	ldi	r24, 0x6C	; 108
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <uart_puts_p>
	}
	if (c & UART_BUFFER_OVERFLOW) {
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	9c 81       	ldd	r25, Y+4	; 0x04
    1910:	80 70       	andi	r24, 0x00	; 0
    1912:	92 70       	andi	r25, 0x02	; 2
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	21 f0       	breq	.+8      	; 0x1920 <input_process+0x64>
		/* 
		 * We are not reading the receive buffer fast enough,
		 * one or more received character have been dropped 
		 */
		uart_puts_P("Buffer overflow error: ");
    1918:	84 e5       	ldi	r24, 0x54	; 84
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <uart_puts_p>
	}

	/* 
	 * send received character back depending on global flag
	 */
	if (rs232_remote_echo)
    1920:	80 91 c1 03 	lds	r24, 0x03C1
    1924:	90 91 c2 03 	lds	r25, 0x03C2
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	19 f0       	breq	.+6      	; 0x1932 <input_process+0x76>
		uart_putc((unsigned char) c);
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <uart_putc>

	// make uchar from character in int value
	ch = (uchar) c;
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	8a 83       	std	Y+2, r24	; 0x02
	// add to buffer
	buf[buf_ptr++] = ch;
    1936:	20 91 c4 03 	lds	r18, 0x03C4
    193a:	30 91 c5 03 	lds	r19, 0x03C5
    193e:	f9 01       	movw	r30, r18
    1940:	e8 58       	subi	r30, 0x88	; 136
    1942:	fb 4f       	sbci	r31, 0xFB	; 251
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	80 83       	st	Z, r24
    1948:	c9 01       	movw	r24, r18
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	90 93 c5 03 	sts	0x03C5, r25
    1950:	80 93 c4 03 	sts	0x03C4, r24
	// terminate string
	buf[buf_ptr] = '\0';
    1954:	80 91 c4 03 	lds	r24, 0x03C4
    1958:	90 91 c5 03 	lds	r25, 0x03C5
    195c:	fc 01       	movw	r30, r24
    195e:	e8 58       	subi	r30, 0x88	; 136
    1960:	fb 4f       	sbci	r31, 0xFB	; 251
    1962:	10 82       	st	Z, r1

	// <CR> means command input is complete
	if (ch == ASCII_CODE_CR) {
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	8d 30       	cpi	r24, 0x0D	; 13
    1968:	99 f4       	brne	.+38     	; 0x1990 <input_process+0xd4>
		// adjust string terminator
		buf[--buf_ptr] = '\0';
    196a:	80 91 c4 03 	lds	r24, 0x03C4
    196e:	90 91 c5 03 	lds	r25, 0x03C5
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	90 93 c5 03 	sts	0x03C5, r25
    1978:	80 93 c4 03 	sts	0x03C4, r24
    197c:	80 91 c4 03 	lds	r24, 0x03C4
    1980:	90 91 c5 03 	lds	r25, 0x03C5
    1984:	fc 01       	movw	r30, r24
    1986:	e8 58       	subi	r30, 0x88	; 136
    1988:	fb 4f       	sbci	r31, 0xFB	; 251
    198a:	10 82       	st	Z, r1
		ret = 1;
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	8d 83       	std	Y+5, r24	; 0x05
    1994:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <printHelp>:

#define REVISION "0.7"

void printHelp() {
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
#ifdef WRITE
	sprintf(buf,
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <printHelp+0xa>
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <printHelp+0xc>
    19b2:	00 d0       	rcall	.+0      	; 0x19b4 <printHelp+0xe>
    19b4:	ed b7       	in	r30, 0x3d	; 61
    19b6:	fe b7       	in	r31, 0x3e	; 62
    19b8:	31 96       	adiw	r30, 0x01	; 1
    19ba:	88 e7       	ldi	r24, 0x78	; 120
    19bc:	94 e0       	ldi	r25, 0x04	; 4
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	80 83       	st	Z, r24
    19c2:	85 eb       	ldi	r24, 0xB5	; 181
    19c4:	92 e0       	ldi	r25, 0x02	; 2
    19c6:	93 83       	std	Z+3, r25	; 0x03
    19c8:	82 83       	std	Z+2, r24	; 0x02
    19ca:	85 ef       	ldi	r24, 0xF5	; 245
    19cc:	92 e0       	ldi	r25, 0x02	; 2
    19ce:	95 83       	std	Z+5, r25	; 0x05
    19d0:	84 83       	std	Z+4, r24	; 0x04
    19d2:	0e 94 a3 00 	call	0x146	; 0x146 <sprintf>
    19d6:	8d b7       	in	r24, 0x3d	; 61
    19d8:	9e b7       	in	r25, 0x3e	; 62
    19da:	06 96       	adiw	r24, 0x06	; 6
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	9e bf       	out	0x3e, r25	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	8d bf       	out	0x3d, r24	; 61
			"\n\rGPIB Controller (T/L/C) (Rev.%s) (c) spurtikus.de 2008-2015\n\r",
			REVISION);
	uart_puts(buf);
    19e6:	88 e7       	ldi	r24, 0x78	; 120
    19e8:	94 e0       	ldi	r25, 0x04	; 4
    19ea:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
#else
	uart_puts("\n\rGPIB Listener Only (L) (Rev.%s) (c) spurtikus.de 2008-2015\n\r", REVISION);
	uart_puts(buf);
#endif
	uart_puts("Internal commands:\n\r");
    19ee:	89 ef       	ldi	r24, 0xF9	; 249
    19f0:	92 e0       	ldi	r25, 0x02	; 2
    19f2:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
	uart_puts(".a <device address> - set primary address of remote device\n\r");
    19f6:	8e e0       	ldi	r24, 0x0E	; 14
    19f8:	93 e0       	ldi	r25, 0x03	; 3
    19fa:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
	uart_puts(
    19fe:	8b e4       	ldi	r24, 0x4B	; 75
    1a00:	93 e0       	ldi	r25, 0x03	; 3
    1a02:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
			".s <device address> - set secondary address of of remote device\n\r");
	uart_puts(".h - print help\n\r");
    1a06:	8d e8       	ldi	r24, 0x8D	; 141
    1a08:	93 e0       	ldi	r25, 0x03	; 3
    1a0a:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
	uart_puts(".i - dump info about GPIB lines\n\r");
    1a0e:	8f e9       	ldi	r24, 0x9F	; 159
    1a10:	93 e0       	ldi	r25, 0x03	; 3
    1a12:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <uart_puts>
}
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <__vector_7>:

/**
 * Interrupt Service Routine - do not call directly
 *  This routine is called when the Timer Value TCNT1 reaches the Output Compare Register Value OCR1A
 */ 
ISR(TIMER1_COMPA_vect) {
    1a1c:	1f 92       	push	r1
    1a1e:	0f 92       	push	r0
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	0f 92       	push	r0
    1a24:	11 24       	eor	r1, r1
    1a26:	8f 93       	push	r24
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
#if XTAL_CPU % DEBOUNCE
	OCR1A = XTAL_CPU / DEBOUNCE - 1;
#endif
	if (--timer==0) {
    1a30:	80 91 c8 04 	lds	r24, 0x04C8
    1a34:	81 50       	subi	r24, 0x01	; 1
    1a36:	80 93 c8 04 	sts	0x04C8, r24
    1a3a:	80 91 c8 04 	lds	r24, 0x04C8
    1a3e:	88 23       	and	r24, r24
    1a40:	39 f4       	brne	.+14     	; 0x1a50 <__vector_7+0x34>
		timer=(uint8_t) DEBOUNCE;
    1a42:	10 92 c8 04 	sts	0x04C8, r1
		s++;
    1a46:	80 91 c9 04 	lds	r24, 0x04C9
    1a4a:	8f 5f       	subi	r24, 0xFF	; 255
    1a4c:	80 93 c9 04 	sts	0x04C9, r24
#if XTAL_CPU % DEBOUNCE
		OCR1A = XTAL_CPU / DEBOUNCE + XTAL_CPU % DEBOUNCE - 1;
#endif
	}
}
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	8f 91       	pop	r24
    1a56:	0f 90       	pop	r0
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	0f 90       	pop	r0
    1a5c:	1f 90       	pop	r1
    1a5e:	18 95       	reti

00001a60 <timer16_init>:
/**
 * Timer initialisation.
 *  \brief initializes all registers ands sets second value 's' to zero. Timer is immediately
 * started.
 */ 
void timer16_init( void ) {
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62

	// OCR1A=XTAL/DEBOUNCE-1 -> Bei Erreichen dieses Wertes (31249) wird die ISR besucht
	// die ISR wird also alle 1/256s aufgerufen. Wenn man dort also bis 256 hochzählt, ist genau
	// 1 Sekunde um! 256 ist der Wert der Variable timer und wird über das define DEBOUNCE festgelegt

	TCCR1B = (1<<CS10) ^ (1<<WGM12);	// Prescaler of 1 | CTC mode
    1a68:	ee e4       	ldi	r30, 0x4E	; 78
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	89 e0       	ldi	r24, 0x09	; 9
    1a6e:	80 83       	st	Z, r24
	OCR1A  = F_CPU/DEBOUNCE-1;		// Output compare register value 
    1a70:	ea e4       	ldi	r30, 0x4A	; 74
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	81 e1       	ldi	r24, 0x11	; 17
    1a76:	9a e7       	ldi	r25, 0x7A	; 122
    1a78:	91 83       	std	Z+1, r25	; 0x01
    1a7a:	80 83       	st	Z, r24
	TCNT1 = 0; // Start value for timer register
    1a7c:	ec e4       	ldi	r30, 0x4C	; 76
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	11 82       	std	Z+1, r1	; 0x01
    1a82:	10 82       	st	Z, r1
	s=0; // Initialize second value (s) to zero
    1a84:	10 92 c9 04 	sts	0x04C9, r1
	timer = (uint8_t)DEBOUNCE; 
    1a88:	10 92 c8 04 	sts	0x04C8, r1
	TIMSK |= (1<<OCIE1A);		// activate timer interrupts which starts timer run
    1a8c:	a9 e5       	ldi	r26, 0x59	; 89
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e9 e5       	ldi	r30, 0x59	; 89
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	80 61       	ori	r24, 0x10	; 16
    1a98:	8c 93       	st	X, r24
}
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    1aa0:	1f 92       	push	r1
    1aa2:	0f 92       	push	r0
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	0f 92       	push	r0
    1aa8:	11 24       	eor	r1, r1
    1aaa:	8f 93       	push	r24
    1aac:	9f 93       	push	r25
    1aae:	ef 93       	push	r30
    1ab0:	ff 93       	push	r31
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <__vector_13+0x18>
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <__vector_13+0x1a>
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    1abe:	eb e2       	ldi	r30, 0x2B	; 43
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	8a 83       	std	Y+2, r24	; 0x02
    data = UART0_DATA;
    1ac6:	ec e2       	ldi	r30, 0x2C	; 44
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	8b 83       	std	Y+3, r24	; 0x03
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	88 71       	andi	r24, 0x18	; 24
    1ad2:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    1ad4:	80 91 08 04 	lds	r24, 0x0408
    1ad8:	8f 5f       	subi	r24, 0xFF	; 255
    1ada:	8f 71       	andi	r24, 0x1F	; 31
    1adc:	8c 83       	std	Y+4, r24	; 0x04
    
    if ( tmphead == UART_RxTail ) {
    1ade:	90 91 09 04 	lds	r25, 0x0409
    1ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae4:	89 17       	cp	r24, r25
    1ae6:	19 f4       	brne	.+6      	; 0x1aee <__vector_13+0x4e>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1ae8:	82 e0       	ldi	r24, 0x02	; 2
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	0b c0       	rjmp	.+22     	; 0x1b04 <__vector_13+0x64>
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    1aee:	8c 81       	ldd	r24, Y+4	; 0x04
    1af0:	80 93 08 04 	sts	0x0408, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    1af4:	8c 81       	ldd	r24, Y+4	; 0x04
    1af6:	88 2f       	mov	r24, r24
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	fc 01       	movw	r30, r24
    1afc:	ea 51       	subi	r30, 0x1A	; 26
    1afe:	fc 4f       	sbci	r31, 0xFC	; 252
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	80 83       	st	Z, r24
    }
    UART_LastRxError = lastRxError;   
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	80 93 0a 04 	sts	0x040A, r24
}
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	ff 91       	pop	r31
    1b18:	ef 91       	pop	r30
    1b1a:	9f 91       	pop	r25
    1b1c:	8f 91       	pop	r24
    1b1e:	0f 90       	pop	r0
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	0f 90       	pop	r0
    1b24:	1f 90       	pop	r1
    1b26:	18 95       	reti

00001b28 <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    1b28:	1f 92       	push	r1
    1b2a:	0f 92       	push	r0
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	0f 92       	push	r0
    1b30:	11 24       	eor	r1, r1
    1b32:	8f 93       	push	r24
    1b34:	9f 93       	push	r25
    1b36:	af 93       	push	r26
    1b38:	bf 93       	push	r27
    1b3a:	ef 93       	push	r30
    1b3c:	ff 93       	push	r31
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	0f 92       	push	r0
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    1b48:	90 91 06 04 	lds	r25, 0x0406
    1b4c:	80 91 07 04 	lds	r24, 0x0407
    1b50:	98 17       	cp	r25, r24
    1b52:	99 f0       	breq	.+38     	; 0x1b7a <__vector_14+0x52>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    1b54:	80 91 07 04 	lds	r24, 0x0407
    1b58:	8f 5f       	subi	r24, 0xFF	; 255
    1b5a:	8f 71       	andi	r24, 0x1F	; 31
    1b5c:	89 83       	std	Y+1, r24	; 0x01
        UART_TxTail = tmptail;
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	80 93 07 04 	sts	0x0407, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    1b64:	ac e2       	ldi	r26, 0x2C	; 44
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	88 2f       	mov	r24, r24
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	fc 01       	movw	r30, r24
    1b70:	ea 53       	subi	r30, 0x3A	; 58
    1b72:	fc 4f       	sbci	r31, 0xFC	; 252
    1b74:	80 81       	ld	r24, Z
    1b76:	8c 93       	st	X, r24
    1b78:	07 c0       	rjmp	.+14     	; 0x1b88 <__vector_14+0x60>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    1b7a:	aa e2       	ldi	r26, 0x2A	; 42
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	ea e2       	ldi	r30, 0x2A	; 42
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	8f 7d       	andi	r24, 0xDF	; 223
    1b86:	8c 93       	st	X, r24
    }
}
    1b88:	0f 90       	pop	r0
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	ff 91       	pop	r31
    1b90:	ef 91       	pop	r30
    1b92:	bf 91       	pop	r27
    1b94:	af 91       	pop	r26
    1b96:	9f 91       	pop	r25
    1b98:	8f 91       	pop	r24
    1b9a:	0f 90       	pop	r0
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	0f 90       	pop	r0
    1ba0:	1f 90       	pop	r1
    1ba2:	18 95       	reti

00001ba4 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <uart_init+0x6>
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	9a 83       	std	Y+2, r25	; 0x02
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    UART_TxHead = 0;
    1bb2:	10 92 06 04 	sts	0x0406, r1
    UART_TxTail = 0;
    1bb6:	10 92 07 04 	sts	0x0407, r1
    UART_RxHead = 0;
    1bba:	10 92 08 04 	sts	0x0408, r1
    UART_RxTail = 0;
    1bbe:	10 92 09 04 	sts	0x0409, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	99 23       	and	r25, r25
    1bc8:	4c f4       	brge	.+18     	; 0x1bdc <uart_init+0x38>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
    1bca:	eb e2       	ldi	r30, 0x2B	; 43
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	82 e0       	ldi	r24, 0x02	; 2
    1bd0:	80 83       	st	Z, r24
    	 baudrate &= ~0x8000;
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd6:	9f 77       	andi	r25, 0x7F	; 127
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	89 83       	std	Y+1, r24	; 0x01
    }
    UBRRH = (unsigned char)(baudrate>>8);
    1bdc:	e0 e4       	ldi	r30, 0x40	; 64
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	9a 81       	ldd	r25, Y+2	; 0x02
    1be4:	89 2f       	mov	r24, r25
    1be6:	99 27       	eor	r25, r25
    1be8:	80 83       	st	Z, r24
    UBRRL = (unsigned char) baudrate;
    1bea:	e9 e2       	ldi	r30, 0x29	; 41
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	80 83       	st	Z, r24
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
    1bf2:	ea e2       	ldi	r30, 0x2A	; 42
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	88 e9       	ldi	r24, 0x98	; 152
    1bf8:	80 83       	st	Z, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
    1bfa:	e0 e4       	ldi	r30, 0x40	; 64
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	86 e8       	ldi	r24, 0x86	; 134
    1c00:	80 83       	st	Z, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <uart_getc>:
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <uart_getc+0x6>
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <uart_getc+0x8>
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
    1c18:	90 91 08 04 	lds	r25, 0x0408
    1c1c:	80 91 09 04 	lds	r24, 0x0409
    1c20:	98 17       	cp	r25, r24
    1c22:	29 f4       	brne	.+10     	; 0x1c2e <uart_getc+0x22>
        return UART_NO_DATA;   /* no data available */
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	91 e0       	ldi	r25, 0x01	; 1
    1c28:	9c 83       	std	Y+4, r25	; 0x04
    1c2a:	8b 83       	std	Y+3, r24	; 0x03
    1c2c:	1d c0       	rjmp	.+58     	; 0x1c68 <uart_getc+0x5c>
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    1c2e:	80 91 09 04 	lds	r24, 0x0409
    1c32:	8f 5f       	subi	r24, 0xFF	; 255
    1c34:	8f 71       	andi	r24, 0x1F	; 31
    1c36:	8a 83       	std	Y+2, r24	; 0x02
    UART_RxTail = tmptail; 
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	80 93 09 04 	sts	0x0409, r24
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	88 2f       	mov	r24, r24
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	fc 01       	movw	r30, r24
    1c46:	ea 51       	subi	r30, 0x1A	; 26
    1c48:	fc 4f       	sbci	r31, 0xFC	; 252
    1c4a:	80 81       	ld	r24, Z
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    
    return (UART_LastRxError << 8) + data;
    1c4e:	80 91 0a 04 	lds	r24, 0x040A
    1c52:	88 2f       	mov	r24, r24
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	38 2f       	mov	r19, r24
    1c58:	22 27       	eor	r18, r18
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	88 2f       	mov	r24, r24
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	82 0f       	add	r24, r18
    1c62:	93 1f       	adc	r25, r19
    1c64:	9c 83       	std	Y+4, r25	; 0x04
    1c66:	8b 83       	std	Y+3, r24	; 0x03
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	08 95       	ret

00001c7a <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	00 d0       	rcall	.+0      	; 0x1c80 <uart_putc+0x6>
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1c86:	80 91 06 04 	lds	r24, 0x0406
    1c8a:	8f 5f       	subi	r24, 0xFF	; 255
    1c8c:	8f 71       	andi	r24, 0x1F	; 31
    1c8e:	89 83       	std	Y+1, r24	; 0x01
    
    while ( tmphead == UART_TxTail ){
    1c90:	90 91 07 04 	lds	r25, 0x0407
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	89 17       	cp	r24, r25
    1c98:	d9 f3       	breq	.-10     	; 0x1c90 <uart_putc+0x16>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
    1c9c:	88 2f       	mov	r24, r24
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	ea 53       	subi	r30, 0x3A	; 58
    1ca4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	80 93 06 04 	sts	0x0406, r24

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    1cb0:	aa e2       	ldi	r26, 0x2A	; 42
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	ea e2       	ldi	r30, 0x2A	; 42
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	80 62       	ori	r24, 0x20	; 32
    1cbc:	8c 93       	st	X, r24

}/* uart_putc */
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <uart_puts+0x6>
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	9a 83       	std	Y+2, r25	; 0x02
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	0b c0       	rjmp	.+22     	; 0x1cee <uart_puts+0x26>
    while (*s) 
      uart_putc(*s++);
    1cd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cda:	fa 81       	ldd	r31, Y+2	; 0x02
    1cdc:	20 81       	ld	r18, Z
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce2:	01 96       	adiw	r24, 0x01	; 1
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	82 2f       	mov	r24, r18
    1cea:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    1cee:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf2:	80 81       	ld	r24, Z
    1cf4:	88 23       	and	r24, r24
    1cf6:	81 f7       	brne	.-32     	; 0x1cd8 <uart_puts+0x10>
      uart_putc(*s++);

}/* uart_puts */
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <uart_puts_p+0x6>
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <uart_puts_p+0x8>
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <uart_puts_p+0xa>
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	9d 83       	std	Y+5, r25	; 0x05
    1d12:	8c 83       	std	Y+4, r24	; 0x04
    1d14:	03 c0       	rjmp	.+6      	; 0x1d1c <uart_puts_p+0x1a>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
    1d16:	8e 81       	ldd	r24, Y+6	; 0x06
    1d18:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1d1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d20:	9b 83       	std	Y+3, r25	; 0x03
    1d22:	8a 83       	std	Y+2, r24	; 0x02
    1d24:	8c 81       	ldd	r24, Y+4	; 0x04
    1d26:	9d 81       	ldd	r25, Y+5	; 0x05
    1d28:	01 96       	adiw	r24, 0x01	; 1
    1d2a:	9d 83       	std	Y+5, r25	; 0x05
    1d2c:	8c 83       	std	Y+4, r24	; 0x04
    1d2e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d30:	fb 81       	ldd	r31, Y+3	; 0x03
    1d32:	84 91       	lpm	r24, Z+
    1d34:	89 83       	std	Y+1, r24	; 0x01
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	8e 83       	std	Y+6, r24	; 0x06
    1d3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d3c:	88 23       	and	r24, r24
    1d3e:	59 f7       	brne	.-42     	; 0x1d16 <uart_puts_p+0x14>
      uart_putc(c);

}/* uart_puts_p */
    1d40:	26 96       	adiw	r28, 0x06	; 6
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <__prologue_saves__>:
    1d52:	2f 92       	push	r2
    1d54:	3f 92       	push	r3
    1d56:	4f 92       	push	r4
    1d58:	5f 92       	push	r5
    1d5a:	6f 92       	push	r6
    1d5c:	7f 92       	push	r7
    1d5e:	8f 92       	push	r8
    1d60:	9f 92       	push	r9
    1d62:	af 92       	push	r10
    1d64:	bf 92       	push	r11
    1d66:	cf 92       	push	r12
    1d68:	df 92       	push	r13
    1d6a:	ef 92       	push	r14
    1d6c:	ff 92       	push	r15
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	ca 1b       	sub	r28, r26
    1d7c:	db 0b       	sbc	r29, r27
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	09 94       	ijmp

00001d8a <__epilogue_restores__>:
    1d8a:	2a 88       	ldd	r2, Y+18	; 0x12
    1d8c:	39 88       	ldd	r3, Y+17	; 0x11
    1d8e:	48 88       	ldd	r4, Y+16	; 0x10
    1d90:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d92:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d94:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d96:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d98:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d9a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d9c:	b9 84       	ldd	r11, Y+9	; 0x09
    1d9e:	c8 84       	ldd	r12, Y+8	; 0x08
    1da0:	df 80       	ldd	r13, Y+7	; 0x07
    1da2:	ee 80       	ldd	r14, Y+6	; 0x06
    1da4:	fd 80       	ldd	r15, Y+5	; 0x05
    1da6:	0c 81       	ldd	r16, Y+4	; 0x04
    1da8:	1b 81       	ldd	r17, Y+3	; 0x03
    1daa:	aa 81       	ldd	r26, Y+2	; 0x02
    1dac:	b9 81       	ldd	r27, Y+1	; 0x01
    1dae:	ce 0f       	add	r28, r30
    1db0:	d1 1d       	adc	r29, r1
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	ed 01       	movw	r28, r26
    1dbe:	08 95       	ret

00001dc0 <_exit>:
    1dc0:	f8 94       	cli

00001dc2 <__stop_program>:
    1dc2:	ff cf       	rjmp	.-2      	; 0x1dc2 <__stop_program>

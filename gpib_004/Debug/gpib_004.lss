
gpib_004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000053e  00800060  000025ce  00002642  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000173  0080059e  00002b0c  00002b80  2**0
                  ALLOC
  3 .stab         00004e18  00000000  00000000  00002b80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000024ef  00000000  00000000  00007998  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <__vector_7>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__vector_13>
      38:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <__vector_14>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000054 <__c.2007>:
      54:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
      64:	65 72 72 6f 72 3a 20 00                             error: .

0000006c <__c.2005>:
      6c:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
      7c:	6f 72 3a 20 00                                      or: .

00000081 <__c.2003>:
      81:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
      91:	3a 20 00                                            : .

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	15 e0       	ldi	r17, 0x05	; 5
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	ee ec       	ldi	r30, 0xCE	; 206
      a8:	f5 e2       	ldi	r31, 0x25	; 37
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
      b0:	ae 39       	cpi	r26, 0x9E	; 158
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>

000000b6 <__do_clear_bss>:
      b6:	17 e0       	ldi	r17, 0x07	; 7
      b8:	ae e9       	ldi	r26, 0x9E	; 158
      ba:	b5 e0       	ldi	r27, 0x05	; 5
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	a1 31       	cpi	r26, 0x11	; 17
      c2:	b1 07       	cpc	r27, r17
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <main>
      ca:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000d2 <atoi>:
      d2:	fc 01       	movw	r30, r24
      d4:	88 27       	eor	r24, r24
      d6:	99 27       	eor	r25, r25
      d8:	e8 94       	clt
      da:	21 91       	ld	r18, Z+
      dc:	20 32       	cpi	r18, 0x20	; 32
      de:	e9 f3       	breq	.-6      	; 0xda <atoi+0x8>
      e0:	29 30       	cpi	r18, 0x09	; 9
      e2:	10 f0       	brcs	.+4      	; 0xe8 <atoi+0x16>
      e4:	2e 30       	cpi	r18, 0x0E	; 14
      e6:	c8 f3       	brcs	.-14     	; 0xda <atoi+0x8>
      e8:	2b 32       	cpi	r18, 0x2B	; 43
      ea:	41 f0       	breq	.+16     	; 0xfc <atoi+0x2a>
      ec:	2d 32       	cpi	r18, 0x2D	; 45
      ee:	39 f4       	brne	.+14     	; 0xfe <atoi+0x2c>
      f0:	68 94       	set
      f2:	04 c0       	rjmp	.+8      	; 0xfc <atoi+0x2a>
      f4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__mulhi_const_10>
      f8:	82 0f       	add	r24, r18
      fa:	91 1d       	adc	r25, r1
      fc:	21 91       	ld	r18, Z+
      fe:	20 53       	subi	r18, 0x30	; 48
     100:	2a 30       	cpi	r18, 0x0A	; 10
     102:	c0 f3       	brcs	.-16     	; 0xf4 <atoi+0x22>
     104:	1e f4       	brtc	.+6      	; 0x10c <atoi+0x3a>
     106:	90 95       	com	r25
     108:	81 95       	neg	r24
     10a:	9f 4f       	sbci	r25, 0xFF	; 255
     10c:	08 95       	ret

0000010e <strtok>:
     10e:	4e e9       	ldi	r20, 0x9E	; 158
     110:	55 e0       	ldi	r21, 0x05	; 5
     112:	0e 94 a0 00 	call	0x140	; 0x140 <strtok_r>
     116:	08 95       	ret

00000118 <strchr>:
     118:	fc 01       	movw	r30, r24
     11a:	81 91       	ld	r24, Z+
     11c:	86 17       	cp	r24, r22
     11e:	21 f0       	breq	.+8      	; 0x128 <strchr+0x10>
     120:	88 23       	and	r24, r24
     122:	d9 f7       	brne	.-10     	; 0x11a <strchr+0x2>
     124:	99 27       	eor	r25, r25
     126:	08 95       	ret
     128:	31 97       	sbiw	r30, 0x01	; 1
     12a:	cf 01       	movw	r24, r30
     12c:	08 95       	ret

0000012e <strlen>:
     12e:	fc 01       	movw	r30, r24
     130:	01 90       	ld	r0, Z+
     132:	00 20       	and	r0, r0
     134:	e9 f7       	brne	.-6      	; 0x130 <strlen+0x2>
     136:	80 95       	com	r24
     138:	90 95       	com	r25
     13a:	8e 0f       	add	r24, r30
     13c:	9f 1f       	adc	r25, r31
     13e:	08 95       	ret

00000140 <strtok_r>:
     140:	00 97       	sbiw	r24, 0x00	; 0
     142:	31 f4       	brne	.+12     	; 0x150 <strtok_r+0x10>
     144:	da 01       	movw	r26, r20
     146:	8d 91       	ld	r24, X+
     148:	9c 91       	ld	r25, X
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	09 f4       	brne	.+2      	; 0x150 <strtok_r+0x10>
     14e:	0e c0       	rjmp	.+28     	; 0x16c <strtok_r+0x2c>
     150:	dc 01       	movw	r26, r24
     152:	fb 01       	movw	r30, r22
     154:	3d 91       	ld	r19, X+
     156:	21 91       	ld	r18, Z+
     158:	22 23       	and	r18, r18
     15a:	19 f0       	breq	.+6      	; 0x162 <strtok_r+0x22>
     15c:	32 17       	cp	r19, r18
     15e:	c9 f3       	breq	.-14     	; 0x152 <strtok_r+0x12>
     160:	fa cf       	rjmp	.-12     	; 0x156 <strtok_r+0x16>
     162:	33 23       	and	r19, r19
     164:	31 f4       	brne	.+12     	; 0x172 <strtok_r+0x32>
     166:	da 01       	movw	r26, r20
     168:	1d 92       	st	X+, r1
     16a:	1c 92       	st	X, r1
     16c:	88 27       	eor	r24, r24
     16e:	99 27       	eor	r25, r25
     170:	08 95       	ret
     172:	11 97       	sbiw	r26, 0x01	; 1
     174:	af 93       	push	r26
     176:	bf 93       	push	r27
     178:	fb 01       	movw	r30, r22
     17a:	3d 91       	ld	r19, X+
     17c:	21 91       	ld	r18, Z+
     17e:	32 17       	cp	r19, r18
     180:	71 f4       	brne	.+28     	; 0x19e <strtok_r+0x5e>
     182:	33 23       	and	r19, r19
     184:	21 f4       	brne	.+8      	; 0x18e <strtok_r+0x4e>
     186:	88 27       	eor	r24, r24
     188:	99 27       	eor	r25, r25
     18a:	11 97       	sbiw	r26, 0x01	; 1
     18c:	02 c0       	rjmp	.+4      	; 0x192 <strtok_r+0x52>
     18e:	1e 92       	st	-X, r1
     190:	11 96       	adiw	r26, 0x01	; 1
     192:	fa 01       	movw	r30, r20
     194:	a1 93       	st	Z+, r26
     196:	b0 83       	st	Z, r27
     198:	9f 91       	pop	r25
     19a:	8f 91       	pop	r24
     19c:	08 95       	ret
     19e:	22 23       	and	r18, r18
     1a0:	69 f7       	brne	.-38     	; 0x17c <strtok_r+0x3c>
     1a2:	ea cf       	rjmp	.-44     	; 0x178 <strtok_r+0x38>

000001a4 <__mulhi_const_10>:
     1a4:	7a e0       	ldi	r23, 0x0A	; 10
     1a6:	97 9f       	mul	r25, r23
     1a8:	90 2d       	mov	r25, r0
     1aa:	87 9f       	mul	r24, r23
     1ac:	80 2d       	mov	r24, r0
     1ae:	91 0d       	add	r25, r1
     1b0:	11 24       	eor	r1, r1
     1b2:	08 95       	ret

000001b4 <sprintf>:
     1b4:	ae e0       	ldi	r26, 0x0E	; 14
     1b6:	b0 e0       	ldi	r27, 0x00	; 0
     1b8:	e0 ee       	ldi	r30, 0xE0	; 224
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	0c 94 bc 12 	jmp	0x2578	; 0x2578 <__prologue_saves__+0x1c>
     1c0:	0d 89       	ldd	r16, Y+21	; 0x15
     1c2:	1e 89       	ldd	r17, Y+22	; 0x16
     1c4:	86 e0       	ldi	r24, 0x06	; 6
     1c6:	8c 83       	std	Y+4, r24	; 0x04
     1c8:	1a 83       	std	Y+2, r17	; 0x02
     1ca:	09 83       	std	Y+1, r16	; 0x01
     1cc:	8f ef       	ldi	r24, 0xFF	; 255
     1ce:	9f e7       	ldi	r25, 0x7F	; 127
     1d0:	9e 83       	std	Y+6, r25	; 0x06
     1d2:	8d 83       	std	Y+5, r24	; 0x05
     1d4:	9e 01       	movw	r18, r28
     1d6:	27 5e       	subi	r18, 0xE7	; 231
     1d8:	3f 4f       	sbci	r19, 0xFF	; 255
     1da:	ce 01       	movw	r24, r28
     1dc:	01 96       	adiw	r24, 0x01	; 1
     1de:	6f 89       	ldd	r22, Y+23	; 0x17
     1e0:	78 8d       	ldd	r23, Y+24	; 0x18
     1e2:	a9 01       	movw	r20, r18
     1e4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <vfprintf>
     1e8:	2f 81       	ldd	r18, Y+7	; 0x07
     1ea:	38 85       	ldd	r19, Y+8	; 0x08
     1ec:	02 0f       	add	r16, r18
     1ee:	13 1f       	adc	r17, r19
     1f0:	f8 01       	movw	r30, r16
     1f2:	10 82       	st	Z, r1
     1f4:	2e 96       	adiw	r28, 0x0e	; 14
     1f6:	e4 e0       	ldi	r30, 0x04	; 4
     1f8:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__epilogue_restores__+0x1c>

000001fc <vfprintf>:
     1fc:	ab e0       	ldi	r26, 0x0B	; 11
     1fe:	b0 e0       	ldi	r27, 0x00	; 0
     200:	e4 e0       	ldi	r30, 0x04	; 4
     202:	f1 e0       	ldi	r31, 0x01	; 1
     204:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__prologue_saves__>
     208:	3c 01       	movw	r6, r24
     20a:	2b 01       	movw	r4, r22
     20c:	5a 01       	movw	r10, r20
     20e:	fc 01       	movw	r30, r24
     210:	17 82       	std	Z+7, r1	; 0x07
     212:	16 82       	std	Z+6, r1	; 0x06
     214:	83 81       	ldd	r24, Z+3	; 0x03
     216:	81 fd       	sbrc	r24, 1
     218:	03 c0       	rjmp	.+6      	; 0x220 <vfprintf+0x24>
     21a:	6f ef       	ldi	r22, 0xFF	; 255
     21c:	7f ef       	ldi	r23, 0xFF	; 255
     21e:	c6 c1       	rjmp	.+908    	; 0x5ac <vfprintf+0x3b0>
     220:	9a e0       	ldi	r25, 0x0A	; 10
     222:	89 2e       	mov	r8, r25
     224:	1e 01       	movw	r2, r28
     226:	08 94       	sec
     228:	21 1c       	adc	r2, r1
     22a:	31 1c       	adc	r3, r1
     22c:	f3 01       	movw	r30, r6
     22e:	23 81       	ldd	r18, Z+3	; 0x03
     230:	f2 01       	movw	r30, r4
     232:	23 fd       	sbrc	r18, 3
     234:	85 91       	lpm	r24, Z+
     236:	23 ff       	sbrs	r18, 3
     238:	81 91       	ld	r24, Z+
     23a:	2f 01       	movw	r4, r30
     23c:	88 23       	and	r24, r24
     23e:	09 f4       	brne	.+2      	; 0x242 <vfprintf+0x46>
     240:	b2 c1       	rjmp	.+868    	; 0x5a6 <vfprintf+0x3aa>
     242:	85 32       	cpi	r24, 0x25	; 37
     244:	39 f4       	brne	.+14     	; 0x254 <vfprintf+0x58>
     246:	23 fd       	sbrc	r18, 3
     248:	85 91       	lpm	r24, Z+
     24a:	23 ff       	sbrs	r18, 3
     24c:	81 91       	ld	r24, Z+
     24e:	2f 01       	movw	r4, r30
     250:	85 32       	cpi	r24, 0x25	; 37
     252:	29 f4       	brne	.+10     	; 0x25e <vfprintf+0x62>
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	b3 01       	movw	r22, r6
     258:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <fputc>
     25c:	e7 cf       	rjmp	.-50     	; 0x22c <vfprintf+0x30>
     25e:	98 2f       	mov	r25, r24
     260:	ff 24       	eor	r15, r15
     262:	ee 24       	eor	r14, r14
     264:	99 24       	eor	r9, r9
     266:	ff e1       	ldi	r31, 0x1F	; 31
     268:	ff 15       	cp	r31, r15
     26a:	d0 f0       	brcs	.+52     	; 0x2a0 <vfprintf+0xa4>
     26c:	9b 32       	cpi	r25, 0x2B	; 43
     26e:	69 f0       	breq	.+26     	; 0x28a <vfprintf+0x8e>
     270:	9c 32       	cpi	r25, 0x2C	; 44
     272:	28 f4       	brcc	.+10     	; 0x27e <vfprintf+0x82>
     274:	90 32       	cpi	r25, 0x20	; 32
     276:	59 f0       	breq	.+22     	; 0x28e <vfprintf+0x92>
     278:	93 32       	cpi	r25, 0x23	; 35
     27a:	91 f4       	brne	.+36     	; 0x2a0 <vfprintf+0xa4>
     27c:	0e c0       	rjmp	.+28     	; 0x29a <vfprintf+0x9e>
     27e:	9d 32       	cpi	r25, 0x2D	; 45
     280:	49 f0       	breq	.+18     	; 0x294 <vfprintf+0x98>
     282:	90 33       	cpi	r25, 0x30	; 48
     284:	69 f4       	brne	.+26     	; 0x2a0 <vfprintf+0xa4>
     286:	41 e0       	ldi	r20, 0x01	; 1
     288:	24 c0       	rjmp	.+72     	; 0x2d2 <vfprintf+0xd6>
     28a:	52 e0       	ldi	r21, 0x02	; 2
     28c:	f5 2a       	or	r15, r21
     28e:	84 e0       	ldi	r24, 0x04	; 4
     290:	f8 2a       	or	r15, r24
     292:	28 c0       	rjmp	.+80     	; 0x2e4 <vfprintf+0xe8>
     294:	98 e0       	ldi	r25, 0x08	; 8
     296:	f9 2a       	or	r15, r25
     298:	25 c0       	rjmp	.+74     	; 0x2e4 <vfprintf+0xe8>
     29a:	e0 e1       	ldi	r30, 0x10	; 16
     29c:	fe 2a       	or	r15, r30
     29e:	22 c0       	rjmp	.+68     	; 0x2e4 <vfprintf+0xe8>
     2a0:	f7 fc       	sbrc	r15, 7
     2a2:	29 c0       	rjmp	.+82     	; 0x2f6 <vfprintf+0xfa>
     2a4:	89 2f       	mov	r24, r25
     2a6:	80 53       	subi	r24, 0x30	; 48
     2a8:	8a 30       	cpi	r24, 0x0A	; 10
     2aa:	70 f4       	brcc	.+28     	; 0x2c8 <vfprintf+0xcc>
     2ac:	f6 fe       	sbrs	r15, 6
     2ae:	05 c0       	rjmp	.+10     	; 0x2ba <vfprintf+0xbe>
     2b0:	98 9c       	mul	r9, r8
     2b2:	90 2c       	mov	r9, r0
     2b4:	11 24       	eor	r1, r1
     2b6:	98 0e       	add	r9, r24
     2b8:	15 c0       	rjmp	.+42     	; 0x2e4 <vfprintf+0xe8>
     2ba:	e8 9c       	mul	r14, r8
     2bc:	e0 2c       	mov	r14, r0
     2be:	11 24       	eor	r1, r1
     2c0:	e8 0e       	add	r14, r24
     2c2:	f0 e2       	ldi	r31, 0x20	; 32
     2c4:	ff 2a       	or	r15, r31
     2c6:	0e c0       	rjmp	.+28     	; 0x2e4 <vfprintf+0xe8>
     2c8:	9e 32       	cpi	r25, 0x2E	; 46
     2ca:	29 f4       	brne	.+10     	; 0x2d6 <vfprintf+0xda>
     2cc:	f6 fc       	sbrc	r15, 6
     2ce:	6b c1       	rjmp	.+726    	; 0x5a6 <vfprintf+0x3aa>
     2d0:	40 e4       	ldi	r20, 0x40	; 64
     2d2:	f4 2a       	or	r15, r20
     2d4:	07 c0       	rjmp	.+14     	; 0x2e4 <vfprintf+0xe8>
     2d6:	9c 36       	cpi	r25, 0x6C	; 108
     2d8:	19 f4       	brne	.+6      	; 0x2e0 <vfprintf+0xe4>
     2da:	50 e8       	ldi	r21, 0x80	; 128
     2dc:	f5 2a       	or	r15, r21
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <vfprintf+0xe8>
     2e0:	98 36       	cpi	r25, 0x68	; 104
     2e2:	49 f4       	brne	.+18     	; 0x2f6 <vfprintf+0xfa>
     2e4:	f2 01       	movw	r30, r4
     2e6:	23 fd       	sbrc	r18, 3
     2e8:	95 91       	lpm	r25, Z+
     2ea:	23 ff       	sbrs	r18, 3
     2ec:	91 91       	ld	r25, Z+
     2ee:	2f 01       	movw	r4, r30
     2f0:	99 23       	and	r25, r25
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <vfprintf+0xfa>
     2f4:	b8 cf       	rjmp	.-144    	; 0x266 <vfprintf+0x6a>
     2f6:	89 2f       	mov	r24, r25
     2f8:	85 54       	subi	r24, 0x45	; 69
     2fa:	83 30       	cpi	r24, 0x03	; 3
     2fc:	18 f0       	brcs	.+6      	; 0x304 <vfprintf+0x108>
     2fe:	80 52       	subi	r24, 0x20	; 32
     300:	83 30       	cpi	r24, 0x03	; 3
     302:	38 f4       	brcc	.+14     	; 0x312 <vfprintf+0x116>
     304:	44 e0       	ldi	r20, 0x04	; 4
     306:	50 e0       	ldi	r21, 0x00	; 0
     308:	a4 0e       	add	r10, r20
     30a:	b5 1e       	adc	r11, r21
     30c:	5f e3       	ldi	r21, 0x3F	; 63
     30e:	59 83       	std	Y+1, r21	; 0x01
     310:	0f c0       	rjmp	.+30     	; 0x330 <vfprintf+0x134>
     312:	93 36       	cpi	r25, 0x63	; 99
     314:	31 f0       	breq	.+12     	; 0x322 <vfprintf+0x126>
     316:	93 37       	cpi	r25, 0x73	; 115
     318:	79 f0       	breq	.+30     	; 0x338 <vfprintf+0x13c>
     31a:	93 35       	cpi	r25, 0x53	; 83
     31c:	09 f0       	breq	.+2      	; 0x320 <vfprintf+0x124>
     31e:	56 c0       	rjmp	.+172    	; 0x3cc <vfprintf+0x1d0>
     320:	20 c0       	rjmp	.+64     	; 0x362 <vfprintf+0x166>
     322:	f5 01       	movw	r30, r10
     324:	80 81       	ld	r24, Z
     326:	89 83       	std	Y+1, r24	; 0x01
     328:	42 e0       	ldi	r20, 0x02	; 2
     32a:	50 e0       	ldi	r21, 0x00	; 0
     32c:	a4 0e       	add	r10, r20
     32e:	b5 1e       	adc	r11, r21
     330:	61 01       	movw	r12, r2
     332:	01 e0       	ldi	r16, 0x01	; 1
     334:	10 e0       	ldi	r17, 0x00	; 0
     336:	12 c0       	rjmp	.+36     	; 0x35c <vfprintf+0x160>
     338:	f5 01       	movw	r30, r10
     33a:	c0 80       	ld	r12, Z
     33c:	d1 80       	ldd	r13, Z+1	; 0x01
     33e:	f6 fc       	sbrc	r15, 6
     340:	03 c0       	rjmp	.+6      	; 0x348 <vfprintf+0x14c>
     342:	6f ef       	ldi	r22, 0xFF	; 255
     344:	7f ef       	ldi	r23, 0xFF	; 255
     346:	02 c0       	rjmp	.+4      	; 0x34c <vfprintf+0x150>
     348:	69 2d       	mov	r22, r9
     34a:	70 e0       	ldi	r23, 0x00	; 0
     34c:	42 e0       	ldi	r20, 0x02	; 2
     34e:	50 e0       	ldi	r21, 0x00	; 0
     350:	a4 0e       	add	r10, r20
     352:	b5 1e       	adc	r11, r21
     354:	c6 01       	movw	r24, r12
     356:	0e 94 e6 02 	call	0x5cc	; 0x5cc <strnlen>
     35a:	8c 01       	movw	r16, r24
     35c:	5f e7       	ldi	r21, 0x7F	; 127
     35e:	f5 22       	and	r15, r21
     360:	14 c0       	rjmp	.+40     	; 0x38a <vfprintf+0x18e>
     362:	f5 01       	movw	r30, r10
     364:	c0 80       	ld	r12, Z
     366:	d1 80       	ldd	r13, Z+1	; 0x01
     368:	f6 fc       	sbrc	r15, 6
     36a:	03 c0       	rjmp	.+6      	; 0x372 <vfprintf+0x176>
     36c:	6f ef       	ldi	r22, 0xFF	; 255
     36e:	7f ef       	ldi	r23, 0xFF	; 255
     370:	02 c0       	rjmp	.+4      	; 0x376 <vfprintf+0x17a>
     372:	69 2d       	mov	r22, r9
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	42 e0       	ldi	r20, 0x02	; 2
     378:	50 e0       	ldi	r21, 0x00	; 0
     37a:	a4 0e       	add	r10, r20
     37c:	b5 1e       	adc	r11, r21
     37e:	c6 01       	movw	r24, r12
     380:	0e 94 db 02 	call	0x5b6	; 0x5b6 <strnlen_P>
     384:	8c 01       	movw	r16, r24
     386:	50 e8       	ldi	r21, 0x80	; 128
     388:	f5 2a       	or	r15, r21
     38a:	f3 fe       	sbrs	r15, 3
     38c:	07 c0       	rjmp	.+14     	; 0x39c <vfprintf+0x1a0>
     38e:	1a c0       	rjmp	.+52     	; 0x3c4 <vfprintf+0x1c8>
     390:	80 e2       	ldi	r24, 0x20	; 32
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	b3 01       	movw	r22, r6
     396:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <fputc>
     39a:	ea 94       	dec	r14
     39c:	8e 2d       	mov	r24, r14
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	08 17       	cp	r16, r24
     3a2:	19 07       	cpc	r17, r25
     3a4:	a8 f3       	brcs	.-22     	; 0x390 <vfprintf+0x194>
     3a6:	0e c0       	rjmp	.+28     	; 0x3c4 <vfprintf+0x1c8>
     3a8:	f6 01       	movw	r30, r12
     3aa:	f7 fc       	sbrc	r15, 7
     3ac:	85 91       	lpm	r24, Z+
     3ae:	f7 fe       	sbrs	r15, 7
     3b0:	81 91       	ld	r24, Z+
     3b2:	6f 01       	movw	r12, r30
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	b3 01       	movw	r22, r6
     3b8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <fputc>
     3bc:	e1 10       	cpse	r14, r1
     3be:	ea 94       	dec	r14
     3c0:	01 50       	subi	r16, 0x01	; 1
     3c2:	10 40       	sbci	r17, 0x00	; 0
     3c4:	01 15       	cp	r16, r1
     3c6:	11 05       	cpc	r17, r1
     3c8:	79 f7       	brne	.-34     	; 0x3a8 <vfprintf+0x1ac>
     3ca:	ea c0       	rjmp	.+468    	; 0x5a0 <vfprintf+0x3a4>
     3cc:	94 36       	cpi	r25, 0x64	; 100
     3ce:	11 f0       	breq	.+4      	; 0x3d4 <vfprintf+0x1d8>
     3d0:	99 36       	cpi	r25, 0x69	; 105
     3d2:	69 f5       	brne	.+90     	; 0x42e <vfprintf+0x232>
     3d4:	f7 fe       	sbrs	r15, 7
     3d6:	08 c0       	rjmp	.+16     	; 0x3e8 <vfprintf+0x1ec>
     3d8:	f5 01       	movw	r30, r10
     3da:	20 81       	ld	r18, Z
     3dc:	31 81       	ldd	r19, Z+1	; 0x01
     3de:	42 81       	ldd	r20, Z+2	; 0x02
     3e0:	53 81       	ldd	r21, Z+3	; 0x03
     3e2:	84 e0       	ldi	r24, 0x04	; 4
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0a c0       	rjmp	.+20     	; 0x3fc <vfprintf+0x200>
     3e8:	f5 01       	movw	r30, r10
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	9c 01       	movw	r18, r24
     3f0:	44 27       	eor	r20, r20
     3f2:	37 fd       	sbrc	r19, 7
     3f4:	40 95       	com	r20
     3f6:	54 2f       	mov	r21, r20
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	a8 0e       	add	r10, r24
     3fe:	b9 1e       	adc	r11, r25
     400:	9f e6       	ldi	r25, 0x6F	; 111
     402:	f9 22       	and	r15, r25
     404:	57 ff       	sbrs	r21, 7
     406:	09 c0       	rjmp	.+18     	; 0x41a <vfprintf+0x21e>
     408:	50 95       	com	r21
     40a:	40 95       	com	r20
     40c:	30 95       	com	r19
     40e:	21 95       	neg	r18
     410:	3f 4f       	sbci	r19, 0xFF	; 255
     412:	4f 4f       	sbci	r20, 0xFF	; 255
     414:	5f 4f       	sbci	r21, 0xFF	; 255
     416:	e0 e8       	ldi	r30, 0x80	; 128
     418:	fe 2a       	or	r15, r30
     41a:	ca 01       	movw	r24, r20
     41c:	b9 01       	movw	r22, r18
     41e:	a1 01       	movw	r20, r2
     420:	2a e0       	ldi	r18, 0x0A	; 10
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	0e 94 1d 03 	call	0x63a	; 0x63a <__ultoa_invert>
     428:	d8 2e       	mov	r13, r24
     42a:	d2 18       	sub	r13, r2
     42c:	40 c0       	rjmp	.+128    	; 0x4ae <vfprintf+0x2b2>
     42e:	95 37       	cpi	r25, 0x75	; 117
     430:	29 f4       	brne	.+10     	; 0x43c <vfprintf+0x240>
     432:	1f 2d       	mov	r17, r15
     434:	1f 7e       	andi	r17, 0xEF	; 239
     436:	2a e0       	ldi	r18, 0x0A	; 10
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	1d c0       	rjmp	.+58     	; 0x476 <vfprintf+0x27a>
     43c:	1f 2d       	mov	r17, r15
     43e:	19 7f       	andi	r17, 0xF9	; 249
     440:	9f 36       	cpi	r25, 0x6F	; 111
     442:	61 f0       	breq	.+24     	; 0x45c <vfprintf+0x260>
     444:	90 37       	cpi	r25, 0x70	; 112
     446:	20 f4       	brcc	.+8      	; 0x450 <vfprintf+0x254>
     448:	98 35       	cpi	r25, 0x58	; 88
     44a:	09 f0       	breq	.+2      	; 0x44e <vfprintf+0x252>
     44c:	ac c0       	rjmp	.+344    	; 0x5a6 <vfprintf+0x3aa>
     44e:	0f c0       	rjmp	.+30     	; 0x46e <vfprintf+0x272>
     450:	90 37       	cpi	r25, 0x70	; 112
     452:	39 f0       	breq	.+14     	; 0x462 <vfprintf+0x266>
     454:	98 37       	cpi	r25, 0x78	; 120
     456:	09 f0       	breq	.+2      	; 0x45a <vfprintf+0x25e>
     458:	a6 c0       	rjmp	.+332    	; 0x5a6 <vfprintf+0x3aa>
     45a:	04 c0       	rjmp	.+8      	; 0x464 <vfprintf+0x268>
     45c:	28 e0       	ldi	r18, 0x08	; 8
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	0a c0       	rjmp	.+20     	; 0x476 <vfprintf+0x27a>
     462:	10 61       	ori	r17, 0x10	; 16
     464:	14 fd       	sbrc	r17, 4
     466:	14 60       	ori	r17, 0x04	; 4
     468:	20 e1       	ldi	r18, 0x10	; 16
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	04 c0       	rjmp	.+8      	; 0x476 <vfprintf+0x27a>
     46e:	14 fd       	sbrc	r17, 4
     470:	16 60       	ori	r17, 0x06	; 6
     472:	20 e1       	ldi	r18, 0x10	; 16
     474:	32 e0       	ldi	r19, 0x02	; 2
     476:	17 ff       	sbrs	r17, 7
     478:	08 c0       	rjmp	.+16     	; 0x48a <vfprintf+0x28e>
     47a:	f5 01       	movw	r30, r10
     47c:	60 81       	ld	r22, Z
     47e:	71 81       	ldd	r23, Z+1	; 0x01
     480:	82 81       	ldd	r24, Z+2	; 0x02
     482:	93 81       	ldd	r25, Z+3	; 0x03
     484:	44 e0       	ldi	r20, 0x04	; 4
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	08 c0       	rjmp	.+16     	; 0x49a <vfprintf+0x29e>
     48a:	f5 01       	movw	r30, r10
     48c:	80 81       	ld	r24, Z
     48e:	91 81       	ldd	r25, Z+1	; 0x01
     490:	bc 01       	movw	r22, r24
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	42 e0       	ldi	r20, 0x02	; 2
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	a4 0e       	add	r10, r20
     49c:	b5 1e       	adc	r11, r21
     49e:	a1 01       	movw	r20, r2
     4a0:	0e 94 1d 03 	call	0x63a	; 0x63a <__ultoa_invert>
     4a4:	d8 2e       	mov	r13, r24
     4a6:	d2 18       	sub	r13, r2
     4a8:	8f e7       	ldi	r24, 0x7F	; 127
     4aa:	f8 2e       	mov	r15, r24
     4ac:	f1 22       	and	r15, r17
     4ae:	f6 fe       	sbrs	r15, 6
     4b0:	0b c0       	rjmp	.+22     	; 0x4c8 <vfprintf+0x2cc>
     4b2:	5e ef       	ldi	r21, 0xFE	; 254
     4b4:	f5 22       	and	r15, r21
     4b6:	d9 14       	cp	r13, r9
     4b8:	38 f4       	brcc	.+14     	; 0x4c8 <vfprintf+0x2cc>
     4ba:	f4 fe       	sbrs	r15, 4
     4bc:	07 c0       	rjmp	.+14     	; 0x4cc <vfprintf+0x2d0>
     4be:	f2 fc       	sbrc	r15, 2
     4c0:	05 c0       	rjmp	.+10     	; 0x4cc <vfprintf+0x2d0>
     4c2:	8f ee       	ldi	r24, 0xEF	; 239
     4c4:	f8 22       	and	r15, r24
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <vfprintf+0x2d0>
     4c8:	1d 2d       	mov	r17, r13
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <vfprintf+0x2d2>
     4cc:	19 2d       	mov	r17, r9
     4ce:	f4 fe       	sbrs	r15, 4
     4d0:	0d c0       	rjmp	.+26     	; 0x4ec <vfprintf+0x2f0>
     4d2:	fe 01       	movw	r30, r28
     4d4:	ed 0d       	add	r30, r13
     4d6:	f1 1d       	adc	r31, r1
     4d8:	80 81       	ld	r24, Z
     4da:	80 33       	cpi	r24, 0x30	; 48
     4dc:	19 f4       	brne	.+6      	; 0x4e4 <vfprintf+0x2e8>
     4de:	99 ee       	ldi	r25, 0xE9	; 233
     4e0:	f9 22       	and	r15, r25
     4e2:	08 c0       	rjmp	.+16     	; 0x4f4 <vfprintf+0x2f8>
     4e4:	1f 5f       	subi	r17, 0xFF	; 255
     4e6:	f2 fe       	sbrs	r15, 2
     4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <vfprintf+0x2f8>
     4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <vfprintf+0x2f6>
     4ec:	8f 2d       	mov	r24, r15
     4ee:	86 78       	andi	r24, 0x86	; 134
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <vfprintf+0x2f8>
     4f2:	1f 5f       	subi	r17, 0xFF	; 255
     4f4:	0f 2d       	mov	r16, r15
     4f6:	f3 fc       	sbrc	r15, 3
     4f8:	14 c0       	rjmp	.+40     	; 0x522 <vfprintf+0x326>
     4fa:	f0 fe       	sbrs	r15, 0
     4fc:	0f c0       	rjmp	.+30     	; 0x51c <vfprintf+0x320>
     4fe:	1e 15       	cp	r17, r14
     500:	10 f0       	brcs	.+4      	; 0x506 <vfprintf+0x30a>
     502:	9d 2c       	mov	r9, r13
     504:	0b c0       	rjmp	.+22     	; 0x51c <vfprintf+0x320>
     506:	9d 2c       	mov	r9, r13
     508:	9e 0c       	add	r9, r14
     50a:	91 1a       	sub	r9, r17
     50c:	1e 2d       	mov	r17, r14
     50e:	06 c0       	rjmp	.+12     	; 0x51c <vfprintf+0x320>
     510:	80 e2       	ldi	r24, 0x20	; 32
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	b3 01       	movw	r22, r6
     516:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <fputc>
     51a:	1f 5f       	subi	r17, 0xFF	; 255
     51c:	1e 15       	cp	r17, r14
     51e:	c0 f3       	brcs	.-16     	; 0x510 <vfprintf+0x314>
     520:	04 c0       	rjmp	.+8      	; 0x52a <vfprintf+0x32e>
     522:	1e 15       	cp	r17, r14
     524:	10 f4       	brcc	.+4      	; 0x52a <vfprintf+0x32e>
     526:	e1 1a       	sub	r14, r17
     528:	01 c0       	rjmp	.+2      	; 0x52c <vfprintf+0x330>
     52a:	ee 24       	eor	r14, r14
     52c:	04 ff       	sbrs	r16, 4
     52e:	0f c0       	rjmp	.+30     	; 0x54e <vfprintf+0x352>
     530:	80 e3       	ldi	r24, 0x30	; 48
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	b3 01       	movw	r22, r6
     536:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <fputc>
     53a:	02 ff       	sbrs	r16, 2
     53c:	1d c0       	rjmp	.+58     	; 0x578 <vfprintf+0x37c>
     53e:	01 fd       	sbrc	r16, 1
     540:	03 c0       	rjmp	.+6      	; 0x548 <vfprintf+0x34c>
     542:	88 e7       	ldi	r24, 0x78	; 120
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e c0       	rjmp	.+28     	; 0x564 <vfprintf+0x368>
     548:	88 e5       	ldi	r24, 0x58	; 88
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0b c0       	rjmp	.+22     	; 0x564 <vfprintf+0x368>
     54e:	80 2f       	mov	r24, r16
     550:	86 78       	andi	r24, 0x86	; 134
     552:	91 f0       	breq	.+36     	; 0x578 <vfprintf+0x37c>
     554:	01 ff       	sbrs	r16, 1
     556:	02 c0       	rjmp	.+4      	; 0x55c <vfprintf+0x360>
     558:	8b e2       	ldi	r24, 0x2B	; 43
     55a:	01 c0       	rjmp	.+2      	; 0x55e <vfprintf+0x362>
     55c:	80 e2       	ldi	r24, 0x20	; 32
     55e:	f7 fc       	sbrc	r15, 7
     560:	8d e2       	ldi	r24, 0x2D	; 45
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	b3 01       	movw	r22, r6
     566:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <fputc>
     56a:	06 c0       	rjmp	.+12     	; 0x578 <vfprintf+0x37c>
     56c:	80 e3       	ldi	r24, 0x30	; 48
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	b3 01       	movw	r22, r6
     572:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <fputc>
     576:	9a 94       	dec	r9
     578:	d9 14       	cp	r13, r9
     57a:	c0 f3       	brcs	.-16     	; 0x56c <vfprintf+0x370>
     57c:	da 94       	dec	r13
     57e:	f1 01       	movw	r30, r2
     580:	ed 0d       	add	r30, r13
     582:	f1 1d       	adc	r31, r1
     584:	80 81       	ld	r24, Z
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	b3 01       	movw	r22, r6
     58a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <fputc>
     58e:	dd 20       	and	r13, r13
     590:	a9 f7       	brne	.-22     	; 0x57c <vfprintf+0x380>
     592:	06 c0       	rjmp	.+12     	; 0x5a0 <vfprintf+0x3a4>
     594:	80 e2       	ldi	r24, 0x20	; 32
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	b3 01       	movw	r22, r6
     59a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <fputc>
     59e:	ea 94       	dec	r14
     5a0:	ee 20       	and	r14, r14
     5a2:	c1 f7       	brne	.-16     	; 0x594 <vfprintf+0x398>
     5a4:	43 ce       	rjmp	.-890    	; 0x22c <vfprintf+0x30>
     5a6:	f3 01       	movw	r30, r6
     5a8:	66 81       	ldd	r22, Z+6	; 0x06
     5aa:	77 81       	ldd	r23, Z+7	; 0x07
     5ac:	cb 01       	movw	r24, r22
     5ae:	2b 96       	adiw	r28, 0x0b	; 11
     5b0:	e2 e1       	ldi	r30, 0x12	; 18
     5b2:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__epilogue_restores__>

000005b6 <strnlen_P>:
     5b6:	fc 01       	movw	r30, r24
     5b8:	05 90       	lpm	r0, Z+
     5ba:	61 50       	subi	r22, 0x01	; 1
     5bc:	70 40       	sbci	r23, 0x00	; 0
     5be:	01 10       	cpse	r0, r1
     5c0:	d8 f7       	brcc	.-10     	; 0x5b8 <strnlen_P+0x2>
     5c2:	80 95       	com	r24
     5c4:	90 95       	com	r25
     5c6:	8e 0f       	add	r24, r30
     5c8:	9f 1f       	adc	r25, r31
     5ca:	08 95       	ret

000005cc <strnlen>:
     5cc:	fc 01       	movw	r30, r24
     5ce:	61 50       	subi	r22, 0x01	; 1
     5d0:	70 40       	sbci	r23, 0x00	; 0
     5d2:	01 90       	ld	r0, Z+
     5d4:	01 10       	cpse	r0, r1
     5d6:	d8 f7       	brcc	.-10     	; 0x5ce <strnlen+0x2>
     5d8:	80 95       	com	r24
     5da:	90 95       	com	r25
     5dc:	8e 0f       	add	r24, r30
     5de:	9f 1f       	adc	r25, r31
     5e0:	08 95       	ret

000005e2 <fputc>:
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	8c 01       	movw	r16, r24
     5ec:	eb 01       	movw	r28, r22
     5ee:	8b 81       	ldd	r24, Y+3	; 0x03
     5f0:	81 ff       	sbrs	r24, 1
     5f2:	1b c0       	rjmp	.+54     	; 0x62a <fputc+0x48>
     5f4:	82 ff       	sbrs	r24, 2
     5f6:	0d c0       	rjmp	.+26     	; 0x612 <fputc+0x30>
     5f8:	2e 81       	ldd	r18, Y+6	; 0x06
     5fa:	3f 81       	ldd	r19, Y+7	; 0x07
     5fc:	8c 81       	ldd	r24, Y+4	; 0x04
     5fe:	9d 81       	ldd	r25, Y+5	; 0x05
     600:	28 17       	cp	r18, r24
     602:	39 07       	cpc	r19, r25
     604:	64 f4       	brge	.+24     	; 0x61e <fputc+0x3c>
     606:	e8 81       	ld	r30, Y
     608:	f9 81       	ldd	r31, Y+1	; 0x01
     60a:	01 93       	st	Z+, r16
     60c:	f9 83       	std	Y+1, r31	; 0x01
     60e:	e8 83       	st	Y, r30
     610:	06 c0       	rjmp	.+12     	; 0x61e <fputc+0x3c>
     612:	e8 85       	ldd	r30, Y+8	; 0x08
     614:	f9 85       	ldd	r31, Y+9	; 0x09
     616:	80 2f       	mov	r24, r16
     618:	09 95       	icall
     61a:	89 2b       	or	r24, r25
     61c:	31 f4       	brne	.+12     	; 0x62a <fputc+0x48>
     61e:	8e 81       	ldd	r24, Y+6	; 0x06
     620:	9f 81       	ldd	r25, Y+7	; 0x07
     622:	01 96       	adiw	r24, 0x01	; 1
     624:	9f 83       	std	Y+7, r25	; 0x07
     626:	8e 83       	std	Y+6, r24	; 0x06
     628:	02 c0       	rjmp	.+4      	; 0x62e <fputc+0x4c>
     62a:	0f ef       	ldi	r16, 0xFF	; 255
     62c:	1f ef       	ldi	r17, 0xFF	; 255
     62e:	c8 01       	movw	r24, r16
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	1f 91       	pop	r17
     636:	0f 91       	pop	r16
     638:	08 95       	ret

0000063a <__ultoa_invert>:
     63a:	fa 01       	movw	r30, r20
     63c:	aa 27       	eor	r26, r26
     63e:	28 30       	cpi	r18, 0x08	; 8
     640:	51 f1       	breq	.+84     	; 0x696 <__ultoa_invert+0x5c>
     642:	20 31       	cpi	r18, 0x10	; 16
     644:	81 f1       	breq	.+96     	; 0x6a6 <__ultoa_invert+0x6c>
     646:	e8 94       	clt
     648:	6f 93       	push	r22
     64a:	6e 7f       	andi	r22, 0xFE	; 254
     64c:	6e 5f       	subi	r22, 0xFE	; 254
     64e:	7f 4f       	sbci	r23, 0xFF	; 255
     650:	8f 4f       	sbci	r24, 0xFF	; 255
     652:	9f 4f       	sbci	r25, 0xFF	; 255
     654:	af 4f       	sbci	r26, 0xFF	; 255
     656:	b1 e0       	ldi	r27, 0x01	; 1
     658:	3e d0       	rcall	.+124    	; 0x6d6 <__ultoa_invert+0x9c>
     65a:	b4 e0       	ldi	r27, 0x04	; 4
     65c:	3c d0       	rcall	.+120    	; 0x6d6 <__ultoa_invert+0x9c>
     65e:	67 0f       	add	r22, r23
     660:	78 1f       	adc	r23, r24
     662:	89 1f       	adc	r24, r25
     664:	9a 1f       	adc	r25, r26
     666:	a1 1d       	adc	r26, r1
     668:	68 0f       	add	r22, r24
     66a:	79 1f       	adc	r23, r25
     66c:	8a 1f       	adc	r24, r26
     66e:	91 1d       	adc	r25, r1
     670:	a1 1d       	adc	r26, r1
     672:	6a 0f       	add	r22, r26
     674:	71 1d       	adc	r23, r1
     676:	81 1d       	adc	r24, r1
     678:	91 1d       	adc	r25, r1
     67a:	a1 1d       	adc	r26, r1
     67c:	20 d0       	rcall	.+64     	; 0x6be <__ultoa_invert+0x84>
     67e:	09 f4       	brne	.+2      	; 0x682 <__ultoa_invert+0x48>
     680:	68 94       	set
     682:	3f 91       	pop	r19
     684:	2a e0       	ldi	r18, 0x0A	; 10
     686:	26 9f       	mul	r18, r22
     688:	11 24       	eor	r1, r1
     68a:	30 19       	sub	r19, r0
     68c:	30 5d       	subi	r19, 0xD0	; 208
     68e:	31 93       	st	Z+, r19
     690:	de f6       	brtc	.-74     	; 0x648 <__ultoa_invert+0xe>
     692:	cf 01       	movw	r24, r30
     694:	08 95       	ret
     696:	46 2f       	mov	r20, r22
     698:	47 70       	andi	r20, 0x07	; 7
     69a:	40 5d       	subi	r20, 0xD0	; 208
     69c:	41 93       	st	Z+, r20
     69e:	b3 e0       	ldi	r27, 0x03	; 3
     6a0:	0f d0       	rcall	.+30     	; 0x6c0 <__ultoa_invert+0x86>
     6a2:	c9 f7       	brne	.-14     	; 0x696 <__ultoa_invert+0x5c>
     6a4:	f6 cf       	rjmp	.-20     	; 0x692 <__ultoa_invert+0x58>
     6a6:	46 2f       	mov	r20, r22
     6a8:	4f 70       	andi	r20, 0x0F	; 15
     6aa:	40 5d       	subi	r20, 0xD0	; 208
     6ac:	4a 33       	cpi	r20, 0x3A	; 58
     6ae:	18 f0       	brcs	.+6      	; 0x6b6 <__ultoa_invert+0x7c>
     6b0:	49 5d       	subi	r20, 0xD9	; 217
     6b2:	31 fd       	sbrc	r19, 1
     6b4:	40 52       	subi	r20, 0x20	; 32
     6b6:	41 93       	st	Z+, r20
     6b8:	02 d0       	rcall	.+4      	; 0x6be <__ultoa_invert+0x84>
     6ba:	a9 f7       	brne	.-22     	; 0x6a6 <__ultoa_invert+0x6c>
     6bc:	ea cf       	rjmp	.-44     	; 0x692 <__ultoa_invert+0x58>
     6be:	b4 e0       	ldi	r27, 0x04	; 4
     6c0:	a6 95       	lsr	r26
     6c2:	97 95       	ror	r25
     6c4:	87 95       	ror	r24
     6c6:	77 95       	ror	r23
     6c8:	67 95       	ror	r22
     6ca:	ba 95       	dec	r27
     6cc:	c9 f7       	brne	.-14     	; 0x6c0 <__ultoa_invert+0x86>
     6ce:	00 97       	sbiw	r24, 0x00	; 0
     6d0:	61 05       	cpc	r22, r1
     6d2:	71 05       	cpc	r23, r1
     6d4:	08 95       	ret
     6d6:	9b 01       	movw	r18, r22
     6d8:	ac 01       	movw	r20, r24
     6da:	0a 2e       	mov	r0, r26
     6dc:	06 94       	lsr	r0
     6de:	57 95       	ror	r21
     6e0:	47 95       	ror	r20
     6e2:	37 95       	ror	r19
     6e4:	27 95       	ror	r18
     6e6:	ba 95       	dec	r27
     6e8:	c9 f7       	brne	.-14     	; 0x6dc <__ultoa_invert+0xa2>
     6ea:	62 0f       	add	r22, r18
     6ec:	73 1f       	adc	r23, r19
     6ee:	84 1f       	adc	r24, r20
     6f0:	95 1f       	adc	r25, r21
     6f2:	a0 1d       	adc	r26, r0
     6f4:	08 95       	ret

000006f6 <delay_ms>:
uchar cmd_buf[100];

/**
 * Some basic delay function
 */
void delay_ms(unsigned short ms) {
     6f6:	df 93       	push	r29
     6f8:	cf 93       	push	r28
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <delay_ms+0x6>
     6fc:	00 d0       	rcall	.+0      	; 0x6fe <delay_ms+0x8>
     6fe:	00 d0       	rcall	.+0      	; 0x700 <delay_ms+0xa>
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62
     704:	9e 83       	std	Y+6, r25	; 0x06
     706:	8d 83       	std	Y+5, r24	; 0x05
	unsigned short outer1, outer2;
	outer1 = 200 * 12;
     708:	80 e6       	ldi	r24, 0x60	; 96
     70a:	99 e0       	ldi	r25, 0x09	; 9
     70c:	9c 83       	std	Y+4, r25	; 0x04
     70e:	8b 83       	std	Y+3, r24	; 0x03
     710:	1c c0       	rjmp	.+56     	; 0x74a <delay_ms+0x54>

	while (outer1) {
		outer2 = 100;
     712:	84 e6       	ldi	r24, 0x64	; 100
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	9a 83       	std	Y+2, r25	; 0x02
     718:	89 83       	std	Y+1, r24	; 0x01
     71a:	0e c0       	rjmp	.+28     	; 0x738 <delay_ms+0x42>
		while (outer2) {
			while (ms)
				ms--;
     71c:	8d 81       	ldd	r24, Y+5	; 0x05
     71e:	9e 81       	ldd	r25, Y+6	; 0x06
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	9e 83       	std	Y+6, r25	; 0x06
     724:	8d 83       	std	Y+5, r24	; 0x05
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
			while (ms)
     726:	8d 81       	ldd	r24, Y+5	; 0x05
     728:	9e 81       	ldd	r25, Y+6	; 0x06
     72a:	00 97       	sbiw	r24, 0x00	; 0
     72c:	b9 f7       	brne	.-18     	; 0x71c <delay_ms+0x26>
				ms--;
			outer2--;
     72e:	89 81       	ldd	r24, Y+1	; 0x01
     730:	9a 81       	ldd	r25, Y+2	; 0x02
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	9a 83       	std	Y+2, r25	; 0x02
     736:	89 83       	std	Y+1, r24	; 0x01
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	9a 81       	ldd	r25, Y+2	; 0x02
     73c:	00 97       	sbiw	r24, 0x00	; 0
     73e:	99 f7       	brne	.-26     	; 0x726 <delay_ms+0x30>
			while (ms)
				ms--;
			outer2--;
		}
		outer1--;
     740:	8b 81       	ldd	r24, Y+3	; 0x03
     742:	9c 81       	ldd	r25, Y+4	; 0x04
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	9c 83       	std	Y+4, r25	; 0x04
     748:	8b 83       	std	Y+3, r24	; 0x03
 */
void delay_ms(unsigned short ms) {
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
     74a:	8b 81       	ldd	r24, Y+3	; 0x03
     74c:	9c 81       	ldd	r25, Y+4	; 0x04
     74e:	00 97       	sbiw	r24, 0x00	; 0
     750:	01 f7       	brne	.-64     	; 0x712 <delay_ms+0x1c>
				ms--;
			outer2--;
		}
		outer1--;
	}
}
     752:	26 96       	adiw	r28, 0x06	; 6
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	de bf       	out	0x3e, r29	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	cd bf       	out	0x3d, r28	; 61
     75e:	cf 91       	pop	r28
     760:	df 91       	pop	r29
     762:	08 95       	ret

00000764 <gpib_init>:
 * Init GPIB pins and variables.
 * \brief All signal lines not related to the controller part
 * 		are initialized with useful values.
 *		(The controller part initialization is done on gpib_controller_assert())
 */
void gpib_init(void) {
     764:	df 93       	push	r29
     766:	cf 93       	push	r28
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
	// data lines - complete port A as input
	DDRA = 0x00;
     76c:	ea e3       	ldi	r30, 0x3A	; 58
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	10 82       	st	Z, r1

	// handshake lines - on port D , everything as input
	DDRD &= ~_BV(G_DAV); // DAV 
     772:	a1 e3       	ldi	r26, 0x31	; 49
     774:	b0 e0       	ldi	r27, 0x00	; 0
     776:	e1 e3       	ldi	r30, 0x31	; 49
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	8b 7f       	andi	r24, 0xFB	; 251
     77e:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_EOI); // EOI 
     780:	a1 e3       	ldi	r26, 0x31	; 49
     782:	b0 e0       	ldi	r27, 0x00	; 0
     784:	e1 e3       	ldi	r30, 0x31	; 49
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	80 81       	ld	r24, Z
     78a:	8f 7e       	andi	r24, 0xEF	; 239
     78c:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_SRQ); // SRQ 
     78e:	a1 e3       	ldi	r26, 0x31	; 49
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	e1 e3       	ldi	r30, 0x31	; 49
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	80 81       	ld	r24, Z
     798:	8f 7b       	andi	r24, 0xBF	; 191
     79a:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_ATN); // ATN  
     79c:	a1 e3       	ldi	r26, 0x31	; 49
     79e:	b0 e0       	ldi	r27, 0x00	; 0
     7a0:	e1 e3       	ldi	r30, 0x31	; 49
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	80 81       	ld	r24, Z
     7a6:	8f 77       	andi	r24, 0x7F	; 127
     7a8:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_REN); // REN  
     7aa:	a7 e3       	ldi	r26, 0x37	; 55
     7ac:	b0 e0       	ldi	r27, 0x00	; 0
     7ae:	e7 e3       	ldi	r30, 0x37	; 55
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	80 81       	ld	r24, Z
     7b4:	8d 7f       	andi	r24, 0xFD	; 253
     7b6:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_IFC); // IFC  
     7b8:	a7 e3       	ldi	r26, 0x37	; 55
     7ba:	b0 e0       	ldi	r27, 0x00	; 0
     7bc:	e7 e3       	ldi	r30, 0x37	; 55
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	80 81       	ld	r24, Z
     7c2:	8e 7f       	andi	r24, 0xFE	; 254
     7c4:	8c 93       	st	X, r24

	// init handshake lines
	assign_bit(DDRD, PORTD, G_NRFD);
     7c6:	a2 e3       	ldi	r26, 0x32	; 50
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	e2 e3       	ldi	r30, 0x32	; 50
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	80 81       	ld	r24, Z
     7d0:	87 7f       	andi	r24, 0xF7	; 247
     7d2:	8c 93       	st	X, r24
     7d4:	a1 e3       	ldi	r26, 0x31	; 49
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	e1 e3       	ldi	r30, 0x31	; 49
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	80 81       	ld	r24, Z
     7de:	88 60       	ori	r24, 0x08	; 8
     7e0:	8c 93       	st	X, r24
     7e2:	a2 e3       	ldi	r26, 0x32	; 50
     7e4:	b0 e0       	ldi	r27, 0x00	; 0
     7e6:	e2 e3       	ldi	r30, 0x32	; 50
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	80 81       	ld	r24, Z
     7ec:	87 7f       	andi	r24, 0xF7	; 247
     7ee:	8c 93       	st	X, r24
	// not ready for data now
	release_bit(DDRD, PORTD, G_NDAC);
     7f0:	a1 e3       	ldi	r26, 0x31	; 49
     7f2:	b0 e0       	ldi	r27, 0x00	; 0
     7f4:	e1 e3       	ldi	r30, 0x31	; 49
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	80 81       	ld	r24, Z
     7fa:	8f 7d       	andi	r24, 0xDF	; 223
     7fc:	8c 93       	st	X, r24
     7fe:	a2 e3       	ldi	r26, 0x32	; 50
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e2 e3       	ldi	r30, 0x32	; 50
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	80 81       	ld	r24, Z
     808:	80 62       	ori	r24, 0x20	; 32
     80a:	8c 93       	st	X, r24
	// initially: ok so far
}
     80c:	cf 91       	pop	r28
     80e:	df 91       	pop	r29
     810:	08 95       	ret

00000812 <gpib_receive>:
 *  \returns		On any error, 0xff is returned. in this case, the value of parameter *_byte is undefined.
 * 		Otherwise the value of the EOI signal line during read is returned. If EOI was assigned, a 0x01 is
 * 		returned. If EOI was not assigned, a 0x00 is returned. Assignment of EOI means that the talker
 * 		is sending the last character for this transmission.
 */
uchar gpib_receive(uchar* _byte) {
     812:	df 93       	push	r29
     814:	cf 93       	push	r28
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	27 97       	sbiw	r28, 0x07	; 7
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	de bf       	out	0x3e, r29	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	cd bf       	out	0x3d, r28	; 61
     826:	9e 83       	std	Y+6, r25	; 0x06
     828:	8d 83       	std	Y+5, r24	; 0x05
	int timeout;
	uchar byte, eoi;

	//uart_puts("\n\rgpib_receive()\n\r");

	if (controller.talks == 1) {
     82a:	80 91 a3 05 	lds	r24, 0x05A3
     82e:	81 30       	cpi	r24, 0x01	; 1
     830:	39 f4       	brne	.+14     	; 0x840 <gpib_receive+0x2e>
		*_byte = 0xff;
     832:	ed 81       	ldd	r30, Y+5	; 0x05
     834:	fe 81       	ldd	r31, Y+6	; 0x06
     836:	8f ef       	ldi	r24, 0xFF	; 255
     838:	80 83       	st	Z, r24
		return 0xff;
     83a:	8f ef       	ldi	r24, 0xFF	; 255
     83c:	8f 83       	std	Y+7, r24	; 0x07
     83e:	c6 c0       	rjmp	.+396    	; 0x9cc <__stack+0x16d>
	}

	// handshake: set nrfd, means i am ready to receive some data
	release_bit(DDRD, PORTD, G_NRFD);
     840:	a1 e3       	ldi	r26, 0x31	; 49
     842:	b0 e0       	ldi	r27, 0x00	; 0
     844:	e1 e3       	ldi	r30, 0x31	; 49
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	80 81       	ld	r24, Z
     84a:	87 7f       	andi	r24, 0xF7	; 247
     84c:	8c 93       	st	X, r24
     84e:	a2 e3       	ldi	r26, 0x32	; 50
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	e2 e3       	ldi	r30, 0x32	; 50
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	80 81       	ld	r24, Z
     858:	88 60       	ori	r24, 0x08	; 8
     85a:	8c 93       	st	X, r24
	assign_bit(DDRD, PORTD, G_NDAC);
     85c:	a2 e3       	ldi	r26, 0x32	; 50
     85e:	b0 e0       	ldi	r27, 0x00	; 0
     860:	e2 e3       	ldi	r30, 0x32	; 50
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	80 81       	ld	r24, Z
     866:	8f 7d       	andi	r24, 0xDF	; 223
     868:	8c 93       	st	X, r24
     86a:	a1 e3       	ldi	r26, 0x31	; 49
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	e1 e3       	ldi	r30, 0x31	; 49
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	80 81       	ld	r24, Z
     874:	80 62       	ori	r24, 0x20	; 32
     876:	8c 93       	st	X, r24
     878:	a2 e3       	ldi	r26, 0x32	; 50
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	e2 e3       	ldi	r30, 0x32	; 50
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	80 81       	ld	r24, Z
     882:	8f 7d       	andi	r24, 0xDF	; 223
     884:	8c 93       	st	X, r24

	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     886:	80 91 10 07 	lds	r24, 0x0710
     88a:	88 2f       	mov	r24, r24
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	05 96       	adiw	r24, 0x05	; 5
     890:	9c 83       	std	Y+4, r25	; 0x04
     892:	8b 83       	std	Y+3, r24	; 0x03
     894:	10 c0       	rjmp	.+32     	; 0x8b6 <__stack+0x57>
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     896:	80 91 10 07 	lds	r24, 0x0710
     89a:	28 2f       	mov	r18, r24
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	8b 81       	ldd	r24, Y+3	; 0x03
     8a0:	9c 81       	ldd	r25, Y+4	; 0x04
     8a2:	28 17       	cp	r18, r24
     8a4:	39 07       	cpc	r19, r25
     8a6:	39 f4       	brne	.+14     	; 0x8b6 <__stack+0x57>
			uart_puts("\n\rError: DAV timeout (1)\n\r");
     8a8:	80 e6       	ldi	r24, 0x60	; 96
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
			return 0xff;
     8b0:	8f ef       	ldi	r24, 0xFF	; 255
     8b2:	8f 83       	std	Y+7, r24	; 0x07
     8b4:	8b c0       	rjmp	.+278    	; 0x9cc <__stack+0x16d>
	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
     8b6:	e0 e3       	ldi	r30, 0x30	; 48
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	80 81       	ld	r24, Z
     8bc:	88 2f       	mov	r24, r24
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	84 70       	andi	r24, 0x04	; 4
     8c2:	90 70       	andi	r25, 0x00	; 0
     8c4:	00 97       	sbiw	r24, 0x00	; 0
     8c6:	49 f0       	breq	.+18     	; 0x8da <__stack+0x7b>
     8c8:	80 91 10 07 	lds	r24, 0x0710
     8cc:	28 2f       	mov	r18, r24
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	8b 81       	ldd	r24, Y+3	; 0x03
     8d2:	9c 81       	ldd	r25, Y+4	; 0x04
     8d4:	82 17       	cp	r24, r18
     8d6:	93 07       	cpc	r25, r19
     8d8:	f4 f6       	brge	.-68     	; 0x896 <__stack+0x37>
#else
	loop_until_bit_is_clear(PIND,G_DAV);
#endif

	// handshake: clear NRFD, means i am busy now to read data
	assign_bit(DDRD, PORTD, G_NRFD);
     8da:	a2 e3       	ldi	r26, 0x32	; 50
     8dc:	b0 e0       	ldi	r27, 0x00	; 0
     8de:	e2 e3       	ldi	r30, 0x32	; 50
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
     8e4:	87 7f       	andi	r24, 0xF7	; 247
     8e6:	8c 93       	st	X, r24
     8e8:	a1 e3       	ldi	r26, 0x31	; 49
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	e1 e3       	ldi	r30, 0x31	; 49
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	88 60       	ori	r24, 0x08	; 8
     8f4:	8c 93       	st	X, r24
     8f6:	a2 e3       	ldi	r26, 0x32	; 50
     8f8:	b0 e0       	ldi	r27, 0x00	; 0
     8fa:	e2 e3       	ldi	r30, 0x32	; 50
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	80 81       	ld	r24, Z
     900:	87 7f       	andi	r24, 0xF7	; 247
     902:	8c 93       	st	X, r24
	// read data
	byte = PINA ^ 0xff;
     904:	e9 e3       	ldi	r30, 0x39	; 57
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	80 81       	ld	r24, Z
     90a:	80 95       	com	r24
     90c:	8a 83       	std	Y+2, r24	; 0x02

	// handshake: set ndac, means i have completed/accepted the read
	release_bit(DDRD, PORTD, G_NDAC);
     90e:	a1 e3       	ldi	r26, 0x31	; 49
     910:	b0 e0       	ldi	r27, 0x00	; 0
     912:	e1 e3       	ldi	r30, 0x31	; 49
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	80 81       	ld	r24, Z
     918:	8f 7d       	andi	r24, 0xDF	; 223
     91a:	8c 93       	st	X, r24
     91c:	a2 e3       	ldi	r26, 0x32	; 50
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	e2 e3       	ldi	r30, 0x32	; 50
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 81       	ld	r24, Z
     926:	80 62       	ori	r24, 0x20	; 32
     928:	8c 93       	st	X, r24

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     92a:	80 91 10 07 	lds	r24, 0x0710
     92e:	88 2f       	mov	r24, r24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	05 96       	adiw	r24, 0x05	; 5
     934:	9c 83       	std	Y+4, r25	; 0x04
     936:	8b 83       	std	Y+3, r24	; 0x03
     938:	10 c0       	rjmp	.+32     	; 0x95a <__stack+0xfb>
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     93a:	80 91 10 07 	lds	r24, 0x0710
     93e:	28 2f       	mov	r18, r24
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	8b 81       	ldd	r24, Y+3	; 0x03
     944:	9c 81       	ldd	r25, Y+4	; 0x04
     946:	28 17       	cp	r18, r24
     948:	39 07       	cpc	r19, r25
     94a:	39 f4       	brne	.+14     	; 0x95a <__stack+0xfb>
			uart_puts("\n\rError: DAV timeout (2)\n\r");
     94c:	8b e7       	ldi	r24, 0x7B	; 123
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
			return 0xff;
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	8f 83       	std	Y+7, r24	; 0x07
     958:	39 c0       	rjmp	.+114    	; 0x9cc <__stack+0x16d>
	release_bit(DDRD, PORTD, G_NDAC);

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
     95a:	e0 e3       	ldi	r30, 0x30	; 48
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	80 81       	ld	r24, Z
     960:	88 2f       	mov	r24, r24
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	84 70       	andi	r24, 0x04	; 4
     966:	90 70       	andi	r25, 0x00	; 0
     968:	00 97       	sbiw	r24, 0x00	; 0
     96a:	49 f4       	brne	.+18     	; 0x97e <__stack+0x11f>
     96c:	80 91 10 07 	lds	r24, 0x0710
     970:	28 2f       	mov	r18, r24
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	8b 81       	ldd	r24, Y+3	; 0x03
     976:	9c 81       	ldd	r25, Y+4	; 0x04
     978:	82 17       	cp	r24, r18
     97a:	93 07       	cpc	r25, r19
     97c:	f4 f6       	brge	.-68     	; 0x93a <__stack+0xdb>
	}
#else
	loop_until_bit_is_set(PIND,G_DAV);
#endif
	// handshake: clear ndac (this is a prerequisite for receive next byte)
	assign_bit(DDRD, PORTD, G_NDAC);
     97e:	a2 e3       	ldi	r26, 0x32	; 50
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	e2 e3       	ldi	r30, 0x32	; 50
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 81       	ld	r24, Z
     988:	8f 7d       	andi	r24, 0xDF	; 223
     98a:	8c 93       	st	X, r24
     98c:	a1 e3       	ldi	r26, 0x31	; 49
     98e:	b0 e0       	ldi	r27, 0x00	; 0
     990:	e1 e3       	ldi	r30, 0x31	; 49
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	80 81       	ld	r24, Z
     996:	80 62       	ori	r24, 0x20	; 32
     998:	8c 93       	st	X, r24
     99a:	a2 e3       	ldi	r26, 0x32	; 50
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e2 e3       	ldi	r30, 0x32	; 50
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	80 81       	ld	r24, Z
     9a4:	8f 7d       	andi	r24, 0xDF	; 223
     9a6:	8c 93       	st	X, r24

	// check if last byte of transmission
	eoi = bit_is_clear(PIND, G_EOI);
     9a8:	e0 e3       	ldi	r30, 0x30	; 48
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	80 81       	ld	r24, Z
     9ae:	88 2f       	mov	r24, r24
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	80 71       	andi	r24, 0x10	; 16
     9b4:	90 70       	andi	r25, 0x00	; 0
     9b6:	19 82       	std	Y+1, r1	; 0x01
     9b8:	00 97       	sbiw	r24, 0x00	; 0
     9ba:	11 f4       	brne	.+4      	; 0x9c0 <__stack+0x161>
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	89 83       	std	Y+1, r24	; 0x01

	*_byte = byte;
     9c0:	ed 81       	ldd	r30, Y+5	; 0x05
     9c2:	fe 81       	ldd	r31, Y+6	; 0x06
     9c4:	8a 81       	ldd	r24, Y+2	; 0x02
     9c6:	80 83       	st	Z, r24

	return eoi;
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	8f 83       	std	Y+7, r24	; 0x07
     9cc:	8f 81       	ldd	r24, Y+7	; 0x07
}
     9ce:	27 96       	adiw	r28, 0x07	; 7
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	cf 91       	pop	r28
     9dc:	df 91       	pop	r29
     9de:	08 95       	ret

000009e0 <gpib_controller_assign>:
 * You have to change the initialization of the partner array according to your environment.
 * The partners-array is used by gpib_serial_poll() for looping over all existing devices.
 * 
 * \param address the address to be used by the controller. Usually 0x00.
 */
void gpib_controller_assign(uchar address) {
     9e0:	df 93       	push	r29
     9e2:	cf 93       	push	r28
     9e4:	0f 92       	push	r0
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	89 83       	std	Y+1, r24	; 0x01
	controller.myaddress = address;
     9ec:	89 81       	ldd	r24, Y+1	; 0x01
     9ee:	80 93 a0 05 	sts	0x05A0, r24
	controller.talks = 0;
     9f2:	10 92 a3 05 	sts	0x05A3, r1
	controller.partner.primary = ADDRESS_NOT_SET; // init default active partner
     9f6:	8f ef       	ldi	r24, 0xFF	; 255
     9f8:	80 93 a1 05 	sts	0x05A1, r24
	controller.partner.secondary = ADDRESS_NOT_SET;
     9fc:	8f ef       	ldi	r24, 0xFF	; 255
     9fe:	80 93 a2 05 	sts	0x05A2, r24
	controller.flavour = FLAVOUR_NONE;
     a02:	10 92 a4 05 	sts	0x05A4, r1
	/** clear list of partners */
	gpib_clear_partners();
     a06:	0e 94 56 0b 	call	0x16ac	; 0x16ac <gpib_clear_partners>
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     a0a:	a8 e3       	ldi	r26, 0x38	; 56
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	e8 e3       	ldi	r30, 0x38	; 56
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	8e 7f       	andi	r24, 0xFE	; 254
     a16:	8c 93       	st	X, r24
     a18:	a7 e3       	ldi	r26, 0x37	; 55
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	e7 e3       	ldi	r30, 0x37	; 55
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
     a22:	81 60       	ori	r24, 0x01	; 1
     a24:	8c 93       	st	X, r24
     a26:	a8 e3       	ldi	r26, 0x38	; 56
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	e8 e3       	ldi	r30, 0x38	; 56
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 81       	ld	r24, Z
     a30:	8e 7f       	andi	r24, 0xFE	; 254
     a32:	8c 93       	st	X, r24
	delay_ms(200);
     a34:	88 ec       	ldi	r24, 0xC8	; 200
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     a3c:	a7 e3       	ldi	r26, 0x37	; 55
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	e7 e3       	ldi	r30, 0x37	; 55
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	80 81       	ld	r24, Z
     a46:	8e 7f       	andi	r24, 0xFE	; 254
     a48:	8c 93       	st	X, r24
     a4a:	a8 e3       	ldi	r26, 0x38	; 56
     a4c:	b0 e0       	ldi	r27, 0x00	; 0
     a4e:	e8 e3       	ldi	r30, 0x38	; 56
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 81       	ld	r24, Z
     a54:	81 60       	ori	r24, 0x01	; 1
     a56:	8c 93       	st	X, r24
	// set up all devices for remote control
	assign_bit(DDRB, PORTB, G_REN);
     a58:	a8 e3       	ldi	r26, 0x38	; 56
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	e8 e3       	ldi	r30, 0x38	; 56
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	8d 7f       	andi	r24, 0xFD	; 253
     a64:	8c 93       	st	X, r24
     a66:	a7 e3       	ldi	r26, 0x37	; 55
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e7 e3       	ldi	r30, 0x37	; 55
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	82 60       	ori	r24, 0x02	; 2
     a72:	8c 93       	st	X, r24
     a74:	a8 e3       	ldi	r26, 0x38	; 56
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	e8 e3       	ldi	r30, 0x38	; 56
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	80 81       	ld	r24, Z
     a7e:	8d 7f       	andi	r24, 0xFD	; 253
     a80:	8c 93       	st	X, r24

	// DCL - device clear for all devices on bus
	cmd_buf[0] = G_CMD_DCL;
     a82:	84 e1       	ldi	r24, 0x14	; 20
     a84:	80 93 5b 06 	sts	0x065B, r24
	gpib_cmd(cmd_buf, 1);
     a88:	8b e5       	ldi	r24, 0x5B	; 91
     a8a:	96 e0       	ldi	r25, 0x06	; 6
     a8c:	61 e0       	ldi	r22, 0x01	; 1
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>
}
     a94:	0f 90       	pop	r0
     a96:	cf 91       	pop	r28
     a98:	df 91       	pop	r29
     a9a:	08 95       	ret

00000a9c <gpib_controller_release>:

/**
 * Release bus 
 */
void gpib_controller_release(void) {
     a9c:	df 93       	push	r29
     a9e:	cf 93       	push	r28
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     aa4:	a8 e3       	ldi	r26, 0x38	; 56
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	e8 e3       	ldi	r30, 0x38	; 56
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	80 81       	ld	r24, Z
     aae:	8e 7f       	andi	r24, 0xFE	; 254
     ab0:	8c 93       	st	X, r24
     ab2:	a7 e3       	ldi	r26, 0x37	; 55
     ab4:	b0 e0       	ldi	r27, 0x00	; 0
     ab6:	e7 e3       	ldi	r30, 0x37	; 55
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	81 60       	ori	r24, 0x01	; 1
     abe:	8c 93       	st	X, r24
     ac0:	a8 e3       	ldi	r26, 0x38	; 56
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	e8 e3       	ldi	r30, 0x38	; 56
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	80 81       	ld	r24, Z
     aca:	8e 7f       	andi	r24, 0xFE	; 254
     acc:	8c 93       	st	X, r24
	delay_ms(200);
     ace:	88 ec       	ldi	r24, 0xC8	; 200
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     ad6:	a7 e3       	ldi	r26, 0x37	; 55
     ad8:	b0 e0       	ldi	r27, 0x00	; 0
     ada:	e7 e3       	ldi	r30, 0x37	; 55
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	8e 7f       	andi	r24, 0xFE	; 254
     ae2:	8c 93       	st	X, r24
     ae4:	a8 e3       	ldi	r26, 0x38	; 56
     ae6:	b0 e0       	ldi	r27, 0x00	; 0
     ae8:	e8 e3       	ldi	r30, 0x38	; 56
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	80 81       	ld	r24, Z
     aee:	81 60       	ori	r24, 0x01	; 1
     af0:	8c 93       	st	X, r24
	// set up all devices for local control
	release_bit(DDRB, PORTB, G_REN);
     af2:	a7 e3       	ldi	r26, 0x37	; 55
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e7 e3       	ldi	r30, 0x37	; 55
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	80 81       	ld	r24, Z
     afc:	8d 7f       	andi	r24, 0xFD	; 253
     afe:	8c 93       	st	X, r24
     b00:	a8 e3       	ldi	r26, 0x38	; 56
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	e8 e3       	ldi	r30, 0x38	; 56
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	80 81       	ld	r24, Z
     b0a:	82 60       	ori	r24, 0x02	; 2
     b0c:	8c 93       	st	X, r24
}
     b0e:	cf 91       	pop	r28
     b10:	df 91       	pop	r29
     b12:	08 95       	ret

00000b14 <gpib_write>:

/**
 * Write GPIB string to bus
 * \brief See _gpib_write() for further information.
 */
uchar gpib_write(uchar *bytes, int length) {
     b14:	df 93       	push	r29
     b16:	cf 93       	push	r28
     b18:	00 d0       	rcall	.+0      	; 0xb1a <gpib_write+0x6>
     b1a:	00 d0       	rcall	.+0      	; 0xb1c <gpib_write+0x8>
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	9a 83       	std	Y+2, r25	; 0x02
     b22:	89 83       	std	Y+1, r24	; 0x01
     b24:	7c 83       	std	Y+4, r23	; 0x04
     b26:	6b 83       	std	Y+3, r22	; 0x03
	// set attention arg false for ordinary strings
	return _gpib_write(bytes, length, (uchar) 0);
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	9a 81       	ldd	r25, Y+2	; 0x02
     b2c:	2b 81       	ldd	r18, Y+3	; 0x03
     b2e:	3c 81       	ldd	r19, Y+4	; 0x04
     b30:	b9 01       	movw	r22, r18
     b32:	40 e0       	ldi	r20, 0x00	; 0
     b34:	0e 94 bc 05 	call	0xb78	; 0xb78 <_gpib_write>
}
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	cf 91       	pop	r28
     b42:	df 91       	pop	r29
     b44:	08 95       	ret

00000b46 <gpib_cmd>:

/**
 * Write GPIB command to bus
 * \brief See _gpib_write() for further information.
 */
uchar gpib_cmd(uchar *bytes, int length) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <gpib_cmd+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <gpib_cmd+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	7c 83       	std	Y+4, r23	; 0x04
     b58:	6b 83       	std	Y+3, r22	; 0x03
	// set attention arg true for commands
	return _gpib_write(bytes, length, (uchar) 1);
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	9a 81       	ldd	r25, Y+2	; 0x02
     b5e:	2b 81       	ldd	r18, Y+3	; 0x03
     b60:	3c 81       	ldd	r19, Y+4	; 0x04
     b62:	b9 01       	movw	r22, r18
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	0e 94 bc 05 	call	0xb78	; 0xb78 <_gpib_write>
}
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	0f 90       	pop	r0
     b70:	0f 90       	pop	r0
     b72:	cf 91       	pop	r28
     b74:	df 91       	pop	r29
     b76:	08 95       	ret

00000b78 <_gpib_write>:
 * \param length length of valid bytes in byte array or zero.
 * for binary data, lenght must be defined. For strings, length can be set to zero. Then the length of
 * the string is calculated internally.
 * \param attention attention tur means assign ATN signal line during write.
 */
uchar _gpib_write(uchar *bytes, int length, uchar attention) {
     b78:	df 93       	push	r29
     b7a:	cf 93       	push	r28
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	2b 97       	sbiw	r28, 0x0b	; 11
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	9f 83       	std	Y+7, r25	; 0x07
     b8e:	8e 83       	std	Y+6, r24	; 0x06
     b90:	79 87       	std	Y+9, r23	; 0x09
     b92:	68 87       	std	Y+8, r22	; 0x08
     b94:	4a 87       	std	Y+10, r20	; 0x0a
	int timeout;
	//uchar buf[64];

	// set talks state. This is used by ISR to recognize own talk
	// (controller must not talk to itself and must not take part in listener handshake when talking)
	controller.talks = 1;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	80 93 a3 05 	sts	0x05A3, r24

	if (attention) {
     b9c:	8a 85       	ldd	r24, Y+10	; 0x0a
     b9e:	88 23       	and	r24, r24
     ba0:	a9 f0       	breq	.+42     	; 0xbcc <_gpib_write+0x54>
		//uart_puts("\n\rgpib_controller_write()\n\r");
		// assign ATN for commands
		assign_bit(DDRD, PORTD, G_ATN);
     ba2:	a2 e3       	ldi	r26, 0x32	; 50
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e2 e3       	ldi	r30, 0x32	; 50
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8f 77       	andi	r24, 0x7F	; 127
     bae:	8c 93       	st	X, r24
     bb0:	a1 e3       	ldi	r26, 0x31	; 49
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e1 e3       	ldi	r30, 0x31	; 49
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24
     bbe:	a2 e3       	ldi	r26, 0x32	; 50
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e2 e3       	ldi	r30, 0x32	; 50
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8f 77       	andi	r24, 0x7F	; 127
     bca:	8c 93       	st	X, r24
	}

	if (length == 0) {
     bcc:	88 85       	ldd	r24, Y+8	; 0x08
     bce:	99 85       	ldd	r25, Y+9	; 0x09
     bd0:	00 97       	sbiw	r24, 0x00	; 0
     bd2:	31 f4       	brne	.+12     	; 0xbe0 <_gpib_write+0x68>
		// length==0 means this is a common C string, null-terminated.
		// then, length can be easily calculated
		length = strlen((char*) bytes);
     bd4:	8e 81       	ldd	r24, Y+6	; 0x06
     bd6:	9f 81       	ldd	r25, Y+7	; 0x07
     bd8:	0e 94 97 00 	call	0x12e	; 0x12e <strlen>
     bdc:	99 87       	std	Y+9, r25	; 0x09
     bde:	88 87       	std	Y+8, r24	; 0x08
	//	else 
	//		sprintf( buf, "gpib_write: 0x%02x\n\r", bytes[0] );
	//	uart_puts((char*)buf);

	// release EOI during transmission
	release_bit(DDRD, PORTD, G_EOI);
     be0:	a1 e3       	ldi	r26, 0x31	; 49
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e1 e3       	ldi	r30, 0x31	; 49
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	8f 7e       	andi	r24, 0xEF	; 239
     bec:	8c 93       	st	X, r24
     bee:	a2 e3       	ldi	r26, 0x32	; 50
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e2 e3       	ldi	r30, 0x32	; 50
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	80 61       	ori	r24, 0x10	; 16
     bfa:	8c 93       	st	X, r24
	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
     bfc:	a1 e3       	ldi	r26, 0x31	; 49
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e1 e3       	ldi	r30, 0x31	; 49
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	8b 7f       	andi	r24, 0xFB	; 251
     c08:	8c 93       	st	X, r24
     c0a:	a2 e3       	ldi	r26, 0x32	; 50
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e2 e3       	ldi	r30, 0x32	; 50
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	84 60       	ori	r24, 0x04	; 4
     c16:	8c 93       	st	X, r24
	// release NRFD (just to be sure)
	release_bit(DDRD, PORTD, G_NRFD);
     c18:	a1 e3       	ldi	r26, 0x31	; 49
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e1 e3       	ldi	r30, 0x31	; 49
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	87 7f       	andi	r24, 0xF7	; 247
     c24:	8c 93       	st	X, r24
     c26:	a2 e3       	ldi	r26, 0x32	; 50
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e2 e3       	ldi	r30, 0x32	; 50
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	88 60       	ori	r24, 0x08	; 8
     c32:	8c 93       	st	X, r24

	// bytes[0] = 'a'
	// bytes[1] = 'b'
	// length = 2
	for (i = 0; i < length; i++) {
     c34:	1c 82       	std	Y+4, r1	; 0x04
     c36:	1b 82       	std	Y+3, r1	; 0x03
     c38:	34 c2       	rjmp	.+1128   	; 0x10a2 <_gpib_write+0x52a>

		// put data on bus
		c = bytes[i];
     c3a:	2b 81       	ldd	r18, Y+3	; 0x03
     c3c:	3c 81       	ldd	r19, Y+4	; 0x04
     c3e:	8e 81       	ldd	r24, Y+6	; 0x06
     c40:	9f 81       	ldd	r25, Y+7	; 0x07
     c42:	fc 01       	movw	r30, r24
     c44:	e2 0f       	add	r30, r18
     c46:	f3 1f       	adc	r31, r19
     c48:	80 81       	ld	r24, Z
     c4a:	8d 83       	std	Y+5, r24	; 0x05
		//sprintf( buf, "char: %c\n\r", c );
		//uart_puts(buf);		

		release_bit(DDRD, PORTD, G_NDAC);
     c4c:	a1 e3       	ldi	r26, 0x31	; 49
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	e1 e3       	ldi	r30, 0x31	; 49
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	8f 7d       	andi	r24, 0xDF	; 223
     c58:	8c 93       	st	X, r24
     c5a:	a2 e3       	ldi	r26, 0x32	; 50
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e2 e3       	ldi	r30, 0x32	; 50
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	80 62       	ori	r24, 0x20	; 32
     c66:	8c 93       	st	X, r24
		//uart_puts("0");
		// wait for NDAC assign from all listeners
#ifdef WITH_TIMEOUT
		timeout = s + 5;
     c68:	80 91 10 07 	lds	r24, 0x0710
     c6c:	88 2f       	mov	r24, r24
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	05 96       	adiw	r24, 0x05	; 5
     c72:	9a 83       	std	Y+2, r25	; 0x02
     c74:	89 83       	std	Y+1, r24	; 0x01
     c76:	10 c0       	rjmp	.+32     	; 0xc98 <_gpib_write+0x120>
		//gpib_info();
		while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
			if (s == timeout) {
     c78:	80 91 10 07 	lds	r24, 0x0710
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
     c84:	28 17       	cp	r18, r24
     c86:	39 07       	cpc	r19, r25
     c88:	39 f4       	brne	.+14     	; 0xc98 <_gpib_write+0x120>
				uart_puts("\n\rError: NDAC timeout\n\r");
     c8a:	86 e9       	ldi	r24, 0x96	; 150
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
				return 0xff;
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	8b 87       	std	Y+11, r24	; 0x0b
     c96:	21 c2       	rjmp	.+1090   	; 0x10da <_gpib_write+0x562>
		//uart_puts("0");
		// wait for NDAC assign from all listeners
#ifdef WITH_TIMEOUT
		timeout = s + 5;
		//gpib_info();
		while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
     c98:	e0 e3       	ldi	r30, 0x30	; 48
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	88 2f       	mov	r24, r24
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	80 72       	andi	r24, 0x20	; 32
     ca4:	90 70       	andi	r25, 0x00	; 0
     ca6:	00 97       	sbiw	r24, 0x00	; 0
     ca8:	49 f0       	breq	.+18     	; 0xcbc <_gpib_write+0x144>
     caa:	80 91 10 07 	lds	r24, 0x0710
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	9a 81       	ldd	r25, Y+2	; 0x02
     cb6:	82 17       	cp	r24, r18
     cb8:	93 07       	cpc	r25, r19
     cba:	f4 f6       	brge	.-68     	; 0xc78 <_gpib_write+0x100>
		}
#else
		loop_until_bit_is_clear(PIND,G_NDAC);
#endif

		DDRA = 0x00;
     cbc:	ea e3       	ldi	r30, 0x3A	; 58
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	10 82       	st	Z, r1
		if (c & 0x01) {
     cc2:	8d 81       	ldd	r24, Y+5	; 0x05
     cc4:	88 2f       	mov	r24, r24
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	81 70       	andi	r24, 0x01	; 1
     cca:	90 70       	andi	r25, 0x00	; 0
     ccc:	88 23       	and	r24, r24
     cce:	b1 f0       	breq	.+44     	; 0xcfc <_gpib_write+0x184>
			assign_bit(DDRA, PORTA, PA0);
     cd0:	ab e3       	ldi	r26, 0x3B	; 59
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	eb e3       	ldi	r30, 0x3B	; 59
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8e 7f       	andi	r24, 0xFE	; 254
     cdc:	8c 93       	st	X, r24
     cde:	aa e3       	ldi	r26, 0x3A	; 58
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	ea e3       	ldi	r30, 0x3A	; 58
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	81 60       	ori	r24, 0x01	; 1
     cea:	8c 93       	st	X, r24
     cec:	ab e3       	ldi	r26, 0x3B	; 59
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	eb e3       	ldi	r30, 0x3B	; 59
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8e 7f       	andi	r24, 0xFE	; 254
     cf8:	8c 93       	st	X, r24
     cfa:	0e c0       	rjmp	.+28     	; 0xd18 <_gpib_write+0x1a0>
		} else {
			release_bit(DDRA, PORTA, PA0)
     cfc:	aa e3       	ldi	r26, 0x3A	; 58
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	ea e3       	ldi	r30, 0x3A	; 58
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	8e 7f       	andi	r24, 0xFE	; 254
     d08:	8c 93       	st	X, r24
     d0a:	ab e3       	ldi	r26, 0x3B	; 59
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	eb e3       	ldi	r30, 0x3B	; 59
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	81 60       	ori	r24, 0x01	; 1
     d16:	8c 93       	st	X, r24
		}

		if (c & 0x02) {
     d18:	8d 81       	ldd	r24, Y+5	; 0x05
     d1a:	88 2f       	mov	r24, r24
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	82 70       	andi	r24, 0x02	; 2
     d20:	90 70       	andi	r25, 0x00	; 0
     d22:	00 97       	sbiw	r24, 0x00	; 0
     d24:	b1 f0       	breq	.+44     	; 0xd52 <_gpib_write+0x1da>
			assign_bit(DDRA, PORTA, PA1)
     d26:	ab e3       	ldi	r26, 0x3B	; 59
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	eb e3       	ldi	r30, 0x3B	; 59
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	8d 7f       	andi	r24, 0xFD	; 253
     d32:	8c 93       	st	X, r24
     d34:	aa e3       	ldi	r26, 0x3A	; 58
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	ea e3       	ldi	r30, 0x3A	; 58
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	82 60       	ori	r24, 0x02	; 2
     d40:	8c 93       	st	X, r24
     d42:	ab e3       	ldi	r26, 0x3B	; 59
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	eb e3       	ldi	r30, 0x3B	; 59
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	8d 7f       	andi	r24, 0xFD	; 253
     d4e:	8c 93       	st	X, r24
     d50:	0e c0       	rjmp	.+28     	; 0xd6e <_gpib_write+0x1f6>
		} else {
			release_bit(DDRA, PORTA, PA1);
     d52:	aa e3       	ldi	r26, 0x3A	; 58
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	ea e3       	ldi	r30, 0x3A	; 58
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	8d 7f       	andi	r24, 0xFD	; 253
     d5e:	8c 93       	st	X, r24
     d60:	ab e3       	ldi	r26, 0x3B	; 59
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	eb e3       	ldi	r30, 0x3B	; 59
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	82 60       	ori	r24, 0x02	; 2
     d6c:	8c 93       	st	X, r24
		}

		if (c & 0x04) {
     d6e:	8d 81       	ldd	r24, Y+5	; 0x05
     d70:	88 2f       	mov	r24, r24
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	84 70       	andi	r24, 0x04	; 4
     d76:	90 70       	andi	r25, 0x00	; 0
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	b1 f0       	breq	.+44     	; 0xda8 <_gpib_write+0x230>
			assign_bit(DDRA, PORTA, PA2);
     d7c:	ab e3       	ldi	r26, 0x3B	; 59
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	eb e3       	ldi	r30, 0x3B	; 59
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	8b 7f       	andi	r24, 0xFB	; 251
     d88:	8c 93       	st	X, r24
     d8a:	aa e3       	ldi	r26, 0x3A	; 58
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	ea e3       	ldi	r30, 0x3A	; 58
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	84 60       	ori	r24, 0x04	; 4
     d96:	8c 93       	st	X, r24
     d98:	ab e3       	ldi	r26, 0x3B	; 59
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	eb e3       	ldi	r30, 0x3B	; 59
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8b 7f       	andi	r24, 0xFB	; 251
     da4:	8c 93       	st	X, r24
     da6:	0e c0       	rjmp	.+28     	; 0xdc4 <_gpib_write+0x24c>
		} else {
			release_bit(DDRA, PORTA, PA2);
     da8:	aa e3       	ldi	r26, 0x3A	; 58
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ea e3       	ldi	r30, 0x3A	; 58
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	8b 7f       	andi	r24, 0xFB	; 251
     db4:	8c 93       	st	X, r24
     db6:	ab e3       	ldi	r26, 0x3B	; 59
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	eb e3       	ldi	r30, 0x3B	; 59
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	84 60       	ori	r24, 0x04	; 4
     dc2:	8c 93       	st	X, r24
		}

		if (c & 0x08) {
     dc4:	8d 81       	ldd	r24, Y+5	; 0x05
     dc6:	88 2f       	mov	r24, r24
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	88 70       	andi	r24, 0x08	; 8
     dcc:	90 70       	andi	r25, 0x00	; 0
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	b1 f0       	breq	.+44     	; 0xdfe <_gpib_write+0x286>
			assign_bit(DDRA, PORTA, PA3);
     dd2:	ab e3       	ldi	r26, 0x3B	; 59
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	eb e3       	ldi	r30, 0x3B	; 59
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	87 7f       	andi	r24, 0xF7	; 247
     dde:	8c 93       	st	X, r24
     de0:	aa e3       	ldi	r26, 0x3A	; 58
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	ea e3       	ldi	r30, 0x3A	; 58
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	88 60       	ori	r24, 0x08	; 8
     dec:	8c 93       	st	X, r24
     dee:	ab e3       	ldi	r26, 0x3B	; 59
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	eb e3       	ldi	r30, 0x3B	; 59
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	87 7f       	andi	r24, 0xF7	; 247
     dfa:	8c 93       	st	X, r24
     dfc:	0e c0       	rjmp	.+28     	; 0xe1a <_gpib_write+0x2a2>
		} else {
			release_bit(DDRA, PORTA, PA3);
     dfe:	aa e3       	ldi	r26, 0x3A	; 58
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	ea e3       	ldi	r30, 0x3A	; 58
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	87 7f       	andi	r24, 0xF7	; 247
     e0a:	8c 93       	st	X, r24
     e0c:	ab e3       	ldi	r26, 0x3B	; 59
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	eb e3       	ldi	r30, 0x3B	; 59
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	88 60       	ori	r24, 0x08	; 8
     e18:	8c 93       	st	X, r24
		}

		if (c & 0x10) {
     e1a:	8d 81       	ldd	r24, Y+5	; 0x05
     e1c:	88 2f       	mov	r24, r24
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	80 71       	andi	r24, 0x10	; 16
     e22:	90 70       	andi	r25, 0x00	; 0
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	b1 f0       	breq	.+44     	; 0xe54 <_gpib_write+0x2dc>
			assign_bit(DDRA, PORTA, PA4);
     e28:	ab e3       	ldi	r26, 0x3B	; 59
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	eb e3       	ldi	r30, 0x3B	; 59
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	8f 7e       	andi	r24, 0xEF	; 239
     e34:	8c 93       	st	X, r24
     e36:	aa e3       	ldi	r26, 0x3A	; 58
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ea e3       	ldi	r30, 0x3A	; 58
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 61       	ori	r24, 0x10	; 16
     e42:	8c 93       	st	X, r24
     e44:	ab e3       	ldi	r26, 0x3B	; 59
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	eb e3       	ldi	r30, 0x3B	; 59
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 7e       	andi	r24, 0xEF	; 239
     e50:	8c 93       	st	X, r24
     e52:	0e c0       	rjmp	.+28     	; 0xe70 <_gpib_write+0x2f8>
		} else {
			release_bit(DDRA, PORTA, PA4);
     e54:	aa e3       	ldi	r26, 0x3A	; 58
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	ea e3       	ldi	r30, 0x3A	; 58
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	8f 7e       	andi	r24, 0xEF	; 239
     e60:	8c 93       	st	X, r24
     e62:	ab e3       	ldi	r26, 0x3B	; 59
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	eb e3       	ldi	r30, 0x3B	; 59
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	80 61       	ori	r24, 0x10	; 16
     e6e:	8c 93       	st	X, r24
		}

		if (c & 0x20) {
     e70:	8d 81       	ldd	r24, Y+5	; 0x05
     e72:	88 2f       	mov	r24, r24
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	80 72       	andi	r24, 0x20	; 32
     e78:	90 70       	andi	r25, 0x00	; 0
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	b1 f0       	breq	.+44     	; 0xeaa <_gpib_write+0x332>
			assign_bit(DDRA, PORTA, PA5);
     e7e:	ab e3       	ldi	r26, 0x3B	; 59
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	eb e3       	ldi	r30, 0x3B	; 59
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	8f 7d       	andi	r24, 0xDF	; 223
     e8a:	8c 93       	st	X, r24
     e8c:	aa e3       	ldi	r26, 0x3A	; 58
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	ea e3       	ldi	r30, 0x3A	; 58
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	80 62       	ori	r24, 0x20	; 32
     e98:	8c 93       	st	X, r24
     e9a:	ab e3       	ldi	r26, 0x3B	; 59
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	eb e3       	ldi	r30, 0x3B	; 59
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	8f 7d       	andi	r24, 0xDF	; 223
     ea6:	8c 93       	st	X, r24
     ea8:	0e c0       	rjmp	.+28     	; 0xec6 <_gpib_write+0x34e>
		} else {
			release_bit(DDRA, PORTA, PA5);
     eaa:	aa e3       	ldi	r26, 0x3A	; 58
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	ea e3       	ldi	r30, 0x3A	; 58
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8f 7d       	andi	r24, 0xDF	; 223
     eb6:	8c 93       	st	X, r24
     eb8:	ab e3       	ldi	r26, 0x3B	; 59
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	eb e3       	ldi	r30, 0x3B	; 59
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	80 62       	ori	r24, 0x20	; 32
     ec4:	8c 93       	st	X, r24
		}

		if (c & 0x40) {
     ec6:	8d 81       	ldd	r24, Y+5	; 0x05
     ec8:	88 2f       	mov	r24, r24
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	80 74       	andi	r24, 0x40	; 64
     ece:	90 70       	andi	r25, 0x00	; 0
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	b1 f0       	breq	.+44     	; 0xf00 <_gpib_write+0x388>
			assign_bit(DDRA, PORTA, PA6);
     ed4:	ab e3       	ldi	r26, 0x3B	; 59
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	eb e3       	ldi	r30, 0x3B	; 59
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	8f 7b       	andi	r24, 0xBF	; 191
     ee0:	8c 93       	st	X, r24
     ee2:	aa e3       	ldi	r26, 0x3A	; 58
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	ea e3       	ldi	r30, 0x3A	; 58
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	80 64       	ori	r24, 0x40	; 64
     eee:	8c 93       	st	X, r24
     ef0:	ab e3       	ldi	r26, 0x3B	; 59
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	eb e3       	ldi	r30, 0x3B	; 59
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	8f 7b       	andi	r24, 0xBF	; 191
     efc:	8c 93       	st	X, r24
     efe:	0e c0       	rjmp	.+28     	; 0xf1c <_gpib_write+0x3a4>
		} else {
			release_bit(DDRA, PORTA, PA6);
     f00:	aa e3       	ldi	r26, 0x3A	; 58
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	ea e3       	ldi	r30, 0x3A	; 58
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	8f 7b       	andi	r24, 0xBF	; 191
     f0c:	8c 93       	st	X, r24
     f0e:	ab e3       	ldi	r26, 0x3B	; 59
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	eb e3       	ldi	r30, 0x3B	; 59
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 64       	ori	r24, 0x40	; 64
     f1a:	8c 93       	st	X, r24
		}

		if (c & 0x80) {
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	88 23       	and	r24, r24
     f20:	b4 f4       	brge	.+44     	; 0xf4e <_gpib_write+0x3d6>
			assign_bit(DDRA, PORTA, PA7);
     f22:	ab e3       	ldi	r26, 0x3B	; 59
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	eb e3       	ldi	r30, 0x3B	; 59
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	8f 77       	andi	r24, 0x7F	; 127
     f2e:	8c 93       	st	X, r24
     f30:	aa e3       	ldi	r26, 0x3A	; 58
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	ea e3       	ldi	r30, 0x3A	; 58
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	80 68       	ori	r24, 0x80	; 128
     f3c:	8c 93       	st	X, r24
     f3e:	ab e3       	ldi	r26, 0x3B	; 59
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	eb e3       	ldi	r30, 0x3B	; 59
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	8f 77       	andi	r24, 0x7F	; 127
     f4a:	8c 93       	st	X, r24
     f4c:	0e c0       	rjmp	.+28     	; 0xf6a <_gpib_write+0x3f2>
		} else {
			release_bit(DDRA, PORTA, PA7);
     f4e:	aa e3       	ldi	r26, 0x3A	; 58
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	ea e3       	ldi	r30, 0x3A	; 58
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8f 77       	andi	r24, 0x7F	; 127
     f5a:	8c 93       	st	X, r24
     f5c:	ab e3       	ldi	r26, 0x3B	; 59
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	eb e3       	ldi	r30, 0x3B	; 59
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	80 68       	ori	r24, 0x80	; 128
     f68:	8c 93       	st	X, r24
		}

		// wait until listeners release NRFD
		//uart_puts("1");
		release_bit(DDRD, PORTD, G_NRFD);
     f6a:	a1 e3       	ldi	r26, 0x31	; 49
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e1 e3       	ldi	r30, 0x31	; 49
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	87 7f       	andi	r24, 0xF7	; 247
     f76:	8c 93       	st	X, r24
     f78:	a2 e3       	ldi	r26, 0x32	; 50
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e2 e3       	ldi	r30, 0x32	; 50
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	88 60       	ori	r24, 0x08	; 8
     f84:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
		//gpib_info();
		timeout = s + 5;
     f86:	80 91 10 07 	lds	r24, 0x0710
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	05 96       	adiw	r24, 0x05	; 5
     f90:	9a 83       	std	Y+2, r25	; 0x02
     f92:	89 83       	std	Y+1, r24	; 0x01
     f94:	10 c0       	rjmp	.+32     	; 0xfb6 <_gpib_write+0x43e>
		while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
			if (s == timeout) {
     f96:	80 91 10 07 	lds	r24, 0x0710
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	9a 81       	ldd	r25, Y+2	; 0x02
     fa2:	28 17       	cp	r18, r24
     fa4:	39 07       	cpc	r19, r25
     fa6:	39 f4       	brne	.+14     	; 0xfb6 <_gpib_write+0x43e>
				uart_puts("\n\rError: NRFD timeout\n\r");
     fa8:	8e ea       	ldi	r24, 0xAE	; 174
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
				return 0xff;
     fb0:	8f ef       	ldi	r24, 0xFF	; 255
     fb2:	8b 87       	std	Y+11, r24	; 0x0b
     fb4:	92 c0       	rjmp	.+292    	; 0x10da <_gpib_write+0x562>
		//uart_puts("1");
		release_bit(DDRD, PORTD, G_NRFD);
#ifdef WITH_TIMEOUT
		//gpib_info();
		timeout = s + 5;
		while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
     fb6:	e0 e3       	ldi	r30, 0x30	; 48
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	88 70       	andi	r24, 0x08	; 8
     fc2:	90 70       	andi	r25, 0x00	; 0
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	49 f4       	brne	.+18     	; 0xfda <_gpib_write+0x462>
     fc8:	80 91 10 07 	lds	r24, 0x0710
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	9a 81       	ldd	r25, Y+2	; 0x02
     fd4:	82 17       	cp	r24, r18
     fd6:	93 07       	cpc	r25, r19
     fd8:	f4 f6       	brge	.-68     	; 0xf96 <_gpib_write+0x41e>
#else
		loop_until_bit_is_set(PIND,G_NRFD);
#endif

		// assign EOI during transmission of only last byte
		if ((i == length - 1) && !attention) {
     fda:	88 85       	ldd	r24, Y+8	; 0x08
     fdc:	99 85       	ldd	r25, Y+9	; 0x09
     fde:	9c 01       	movw	r18, r24
     fe0:	21 50       	subi	r18, 0x01	; 1
     fe2:	30 40       	sbci	r19, 0x00	; 0
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	9c 81       	ldd	r25, Y+4	; 0x04
     fe8:	28 17       	cp	r18, r24
     fea:	39 07       	cpc	r19, r25
     fec:	c1 f4       	brne	.+48     	; 0x101e <_gpib_write+0x4a6>
     fee:	8a 85       	ldd	r24, Y+10	; 0x0a
     ff0:	88 23       	and	r24, r24
     ff2:	a9 f4       	brne	.+42     	; 0x101e <_gpib_write+0x4a6>
			//uart_puts("\n\rE\n\r");
			assign_bit(DDRD, PORTD, G_EOI);
     ff4:	a2 e3       	ldi	r26, 0x32	; 50
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e2 e3       	ldi	r30, 0x32	; 50
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	8f 7e       	andi	r24, 0xEF	; 239
    1000:	8c 93       	st	X, r24
    1002:	a1 e3       	ldi	r26, 0x31	; 49
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e1 e3       	ldi	r30, 0x31	; 49
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	80 61       	ori	r24, 0x10	; 16
    100e:	8c 93       	st	X, r24
    1010:	a2 e3       	ldi	r26, 0x32	; 50
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e2 e3       	ldi	r30, 0x32	; 50
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	8f 7e       	andi	r24, 0xEF	; 239
    101c:	8c 93       	st	X, r24
		}

		// assign DAV, data valid for listeners
		assign_bit(DDRD, PORTD, G_DAV);
    101e:	a2 e3       	ldi	r26, 0x32	; 50
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e2 e3       	ldi	r30, 0x32	; 50
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	8b 7f       	andi	r24, 0xFB	; 251
    102a:	8c 93       	st	X, r24
    102c:	a1 e3       	ldi	r26, 0x31	; 49
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e1 e3       	ldi	r30, 0x31	; 49
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	84 60       	ori	r24, 0x04	; 4
    1038:	8c 93       	st	X, r24
    103a:	a2 e3       	ldi	r26, 0x32	; 50
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e2 e3       	ldi	r30, 0x32	; 50
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	8b 7f       	andi	r24, 0xFB	; 251
    1046:	8c 93       	st	X, r24

		// wait for NDAC release
		//uart_puts("2");
		release_bit(DDRD, PORTD, G_NDAC);
    1048:	a1 e3       	ldi	r26, 0x31	; 49
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e1 e3       	ldi	r30, 0x31	; 49
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	8f 7d       	andi	r24, 0xDF	; 223
    1054:	8c 93       	st	X, r24
    1056:	a2 e3       	ldi	r26, 0x32	; 50
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e2 e3       	ldi	r30, 0x32	; 50
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	80 62       	ori	r24, 0x20	; 32
    1062:	8c 93       	st	X, r24
		loop_until_bit_is_set(PIND, G_NDAC);
    1064:	e0 e3       	ldi	r30, 0x30	; 48
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	88 2f       	mov	r24, r24
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	80 72       	andi	r24, 0x20	; 32
    1070:	90 70       	andi	r25, 0x00	; 0
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	b9 f3       	breq	.-18     	; 0x1064 <_gpib_write+0x4ec>

		// release DAV, data not valid anymore
		release_bit(DDRD, PORTD, G_DAV);
    1076:	a1 e3       	ldi	r26, 0x31	; 49
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e1 e3       	ldi	r30, 0x31	; 49
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	8b 7f       	andi	r24, 0xFB	; 251
    1082:	8c 93       	st	X, r24
    1084:	a2 e3       	ldi	r26, 0x32	; 50
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e2 e3       	ldi	r30, 0x32	; 50
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	84 60       	ori	r24, 0x04	; 4
    1090:	8c 93       	st	X, r24

		// reset Port to all input
		DDRA = 0x00;
    1092:	ea e3       	ldi	r30, 0x3A	; 58
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	10 82       	st	Z, r1
	release_bit(DDRD, PORTD, G_NRFD);

	// bytes[0] = 'a'
	// bytes[1] = 'b'
	// length = 2
	for (i = 0; i < length; i++) {
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	9c 83       	std	Y+4, r25	; 0x04
    10a0:	8b 83       	std	Y+3, r24	; 0x03
    10a2:	2b 81       	ldd	r18, Y+3	; 0x03
    10a4:	3c 81       	ldd	r19, Y+4	; 0x04
    10a6:	88 85       	ldd	r24, Y+8	; 0x08
    10a8:	99 85       	ldd	r25, Y+9	; 0x09
    10aa:	28 17       	cp	r18, r24
    10ac:	39 07       	cpc	r19, r25
    10ae:	0c f4       	brge	.+2      	; 0x10b2 <_gpib_write+0x53a>
    10b0:	c4 cd       	rjmp	.-1144   	; 0xc3a <_gpib_write+0xc2>
		DDRA = 0x00;

		//uart_puts("3\r\n");
	}

	if (attention) {
    10b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    10b4:	88 23       	and	r24, r24
    10b6:	71 f0       	breq	.+28     	; 0x10d4 <_gpib_write+0x55c>
		// assign ATN for commands
		release_bit(DDRD, PORTD, G_ATN);
    10b8:	a1 e3       	ldi	r26, 0x31	; 49
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e1 e3       	ldi	r30, 0x31	; 49
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	8f 77       	andi	r24, 0x7F	; 127
    10c4:	8c 93       	st	X, r24
    10c6:	a2 e3       	ldi	r26, 0x32	; 50
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e2 e3       	ldi	r30, 0x32	; 50
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	80 68       	ori	r24, 0x80	; 128
    10d2:	8c 93       	st	X, r24
	}

	// clear talk state.Controller does not talk anymore.
	controller.talks = 0;
    10d4:	10 92 a3 05 	sts	0x05A3, r1

	return 0x00;
    10d8:	1b 86       	std	Y+11, r1	; 0x0b
    10da:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    10dc:	2b 96       	adiw	r28, 0x0b	; 11
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <gpib_info>:

/**
 * print some useful info about bus state (for example value of handshake pins)
 */
void gpib_info(void) {
    10ee:	af 92       	push	r10
    10f0:	bf 92       	push	r11
    10f2:	cf 92       	push	r12
    10f4:	df 92       	push	r13
    10f6:	ef 92       	push	r14
    10f8:	ff 92       	push	r15
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	2a 97       	sbiw	r28, 0x0a	; 10
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61
	uchar dav, nrfd, ndac, eoi, atn, srq, ifc, ren;
	extern uchar buf[80];

	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    1112:	0e 94 25 0b 	call	0x164a	; 0x164a <gpib_get_partner_pad>
    1116:	08 2f       	mov	r16, r24
    1118:	10 e0       	ldi	r17, 0x00	; 0
    111a:	0e 94 2e 0b 	call	0x165c	; 0x165c <gpib_get_partner_sad>
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	8d b7       	in	r24, 0x3d	; 61
    1124:	9e b7       	in	r25, 0x3e	; 62
    1126:	08 97       	sbiw	r24, 0x08	; 8
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	9e bf       	out	0x3e, r25	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	8d bf       	out	0x3d, r24	; 61
    1132:	ed b7       	in	r30, 0x3d	; 61
    1134:	fe b7       	in	r31, 0x3e	; 62
    1136:	31 96       	adiw	r30, 0x01	; 1
    1138:	8f eb       	ldi	r24, 0xBF	; 191
    113a:	96 e0       	ldi	r25, 0x06	; 6
    113c:	91 83       	std	Z+1, r25	; 0x01
    113e:	80 83       	st	Z, r24
    1140:	86 ec       	ldi	r24, 0xC6	; 198
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	93 83       	std	Z+3, r25	; 0x03
    1146:	82 83       	std	Z+2, r24	; 0x02
    1148:	15 83       	std	Z+5, r17	; 0x05
    114a:	04 83       	std	Z+4, r16	; 0x04
    114c:	37 83       	std	Z+7, r19	; 0x07
    114e:	26 83       	std	Z+6, r18	; 0x06
    1150:	0e 94 da 00 	call	0x1b4	; 0x1b4 <sprintf>
    1154:	8d b7       	in	r24, 0x3d	; 61
    1156:	9e b7       	in	r25, 0x3e	; 62
    1158:	08 96       	adiw	r24, 0x08	; 8
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	9e bf       	out	0x3e, r25	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	8d bf       	out	0x3d, r24	; 61
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);
    1164:	8f eb       	ldi	r24, 0xBF	; 191
    1166:	96 e0       	ldi	r25, 0x06	; 6
    1168:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>

	uart_puts("Partner list\n\r");
    116c:	84 ef       	ldi	r24, 0xF4	; 244
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
	for (int i = 0; i < MAX_PARTNER; i++) {
    1174:	1a 82       	std	Y+2, r1	; 0x02
    1176:	19 82       	std	Y+1, r1	; 0x01
    1178:	49 c0       	rjmp	.+146    	; 0x120c <gpib_info+0x11e>
		if (controller.partners[i].primary != ADDRESS_NOT_SET) {
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	9a 81       	ldd	r25, Y+2	; 0x02
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	fc 01       	movw	r30, r24
    1184:	eb 55       	subi	r30, 0x5B	; 91
    1186:	fa 4f       	sbci	r31, 0xFA	; 250
    1188:	80 81       	ld	r24, Z
    118a:	8f 3f       	cpi	r24, 0xFF	; 255
    118c:	d1 f1       	breq	.+116    	; 0x1202 <gpib_info+0x114>
			sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	9a 81       	ldd	r25, Y+2	; 0x02
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	fc 01       	movw	r30, r24
    1198:	eb 55       	subi	r30, 0x5B	; 91
    119a:	fa 4f       	sbci	r31, 0xFA	; 250
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	9a 81       	ldd	r25, Y+2	; 0x02
    11a6:	03 96       	adiw	r24, 0x03	; 3
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	fc 01       	movw	r30, r24
    11ae:	e0 56       	subi	r30, 0x60	; 96
    11b0:	fa 4f       	sbci	r31, 0xFA	; 250
    11b2:	80 81       	ld	r24, Z
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	8d b7       	in	r24, 0x3d	; 61
    11ba:	9e b7       	in	r25, 0x3e	; 62
    11bc:	08 97       	sbiw	r24, 0x08	; 8
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	9e bf       	out	0x3e, r25	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	8d bf       	out	0x3d, r24	; 61
    11c8:	ed b7       	in	r30, 0x3d	; 61
    11ca:	fe b7       	in	r31, 0x3e	; 62
    11cc:	31 96       	adiw	r30, 0x01	; 1
    11ce:	8f eb       	ldi	r24, 0xBF	; 191
    11d0:	96 e0       	ldi	r25, 0x06	; 6
    11d2:	91 83       	std	Z+1, r25	; 0x01
    11d4:	80 83       	st	Z, r24
    11d6:	86 ec       	ldi	r24, 0xC6	; 198
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	93 83       	std	Z+3, r25	; 0x03
    11dc:	82 83       	std	Z+2, r24	; 0x02
    11de:	55 83       	std	Z+5, r21	; 0x05
    11e0:	44 83       	std	Z+4, r20	; 0x04
    11e2:	37 83       	std	Z+7, r19	; 0x07
    11e4:	26 83       	std	Z+6, r18	; 0x06
    11e6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <sprintf>
    11ea:	8d b7       	in	r24, 0x3d	; 61
    11ec:	9e b7       	in	r25, 0x3e	; 62
    11ee:	08 96       	adiw	r24, 0x08	; 8
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	9e bf       	out	0x3e, r25	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	8d bf       	out	0x3d, r24	; 61
					controller.partners[i].primary,
					controller.partners[i].secondary);
			uart_puts(buf);
    11fa:	8f eb       	ldi	r24, 0xBF	; 191
    11fc:	96 e0       	ldi	r25, 0x06	; 6
    11fe:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);

	uart_puts("Partner list\n\r");
	for (int i = 0; i < MAX_PARTNER; i++) {
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	9a 83       	std	Y+2, r25	; 0x02
    120a:	89 83       	std	Y+1, r24	; 0x01
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	9a 81       	ldd	r25, Y+2	; 0x02
    1210:	85 30       	cpi	r24, 0x05	; 5
    1212:	91 05       	cpc	r25, r1
    1214:	0c f4       	brge	.+2      	; 0x1218 <gpib_info+0x12a>
    1216:	b1 cf       	rjmp	.-158    	; 0x117a <gpib_info+0x8c>
					controller.partners[i].secondary);
			uart_puts(buf);
		}
	}

	dav = bit_is_set(PIND, G_DAV);
    1218:	e0 e3       	ldi	r30, 0x30	; 48
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	84 70       	andi	r24, 0x04	; 4
    1220:	8a 87       	std	Y+10, r24	; 0x0a
	nrfd = bit_is_set(PIND, G_NRFD);
    1222:	e0 e3       	ldi	r30, 0x30	; 48
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	88 70       	andi	r24, 0x08	; 8
    122a:	89 87       	std	Y+9, r24	; 0x09
	ndac = bit_is_set(PIND, G_NDAC);
    122c:	e0 e3       	ldi	r30, 0x30	; 48
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	80 72       	andi	r24, 0x20	; 32
    1234:	88 87       	std	Y+8, r24	; 0x08
	eoi = bit_is_set(PIND, G_EOI);
    1236:	e0 e3       	ldi	r30, 0x30	; 48
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	80 71       	andi	r24, 0x10	; 16
    123e:	8f 83       	std	Y+7, r24	; 0x07
	atn = bit_is_set(PIND, G_ATN);
    1240:	e0 e3       	ldi	r30, 0x30	; 48
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	80 78       	andi	r24, 0x80	; 128
    1248:	8e 83       	std	Y+6, r24	; 0x06
	srq = bit_is_set(PIND, G_SRQ);
    124a:	e0 e3       	ldi	r30, 0x30	; 48
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	80 74       	andi	r24, 0x40	; 64
    1252:	8d 83       	std	Y+5, r24	; 0x05
	ifc = bit_is_set(PINB, G_IFC);
    1254:	e6 e3       	ldi	r30, 0x36	; 54
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	81 70       	andi	r24, 0x01	; 1
    125c:	8c 83       	std	Y+4, r24	; 0x04
	ren = bit_is_set(PINB, G_REN);
    125e:	e6 e3       	ldi	r30, 0x36	; 54
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	82 70       	andi	r24, 0x02	; 2
    1266:	8b 83       	std	Y+3, r24	; 0x03
	//d = PINA;
	//di = d ^ 0xff;
	if (dav == 0x00)
    1268:	8a 85       	ldd	r24, Y+10	; 0x0a
    126a:	88 23       	and	r24, r24
    126c:	19 f4       	brne	.+6      	; 0x1274 <gpib_info+0x186>
		dav = '0';
    126e:	80 e3       	ldi	r24, 0x30	; 48
    1270:	8a 87       	std	Y+10, r24	; 0x0a
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <gpib_info+0x18a>
	else
		dav = '1';
    1274:	81 e3       	ldi	r24, 0x31	; 49
    1276:	8a 87       	std	Y+10, r24	; 0x0a
	if (nrfd == 0x00)
    1278:	89 85       	ldd	r24, Y+9	; 0x09
    127a:	88 23       	and	r24, r24
    127c:	19 f4       	brne	.+6      	; 0x1284 <gpib_info+0x196>
		nrfd = '0';
    127e:	80 e3       	ldi	r24, 0x30	; 48
    1280:	89 87       	std	Y+9, r24	; 0x09
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <gpib_info+0x19a>
	else
		nrfd = '1';
    1284:	81 e3       	ldi	r24, 0x31	; 49
    1286:	89 87       	std	Y+9, r24	; 0x09
	if (ndac == 0x00)
    1288:	88 85       	ldd	r24, Y+8	; 0x08
    128a:	88 23       	and	r24, r24
    128c:	19 f4       	brne	.+6      	; 0x1294 <gpib_info+0x1a6>
		ndac = '0';
    128e:	80 e3       	ldi	r24, 0x30	; 48
    1290:	88 87       	std	Y+8, r24	; 0x08
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <gpib_info+0x1aa>
	else
		ndac = '1';
    1294:	81 e3       	ldi	r24, 0x31	; 49
    1296:	88 87       	std	Y+8, r24	; 0x08
	if (eoi == 0x00)
    1298:	8f 81       	ldd	r24, Y+7	; 0x07
    129a:	88 23       	and	r24, r24
    129c:	19 f4       	brne	.+6      	; 0x12a4 <gpib_info+0x1b6>
		eoi = '0';
    129e:	80 e3       	ldi	r24, 0x30	; 48
    12a0:	8f 83       	std	Y+7, r24	; 0x07
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <gpib_info+0x1ba>
	else
		eoi = '1';
    12a4:	81 e3       	ldi	r24, 0x31	; 49
    12a6:	8f 83       	std	Y+7, r24	; 0x07
	if (atn == 0x00)
    12a8:	8e 81       	ldd	r24, Y+6	; 0x06
    12aa:	88 23       	and	r24, r24
    12ac:	19 f4       	brne	.+6      	; 0x12b4 <gpib_info+0x1c6>
		atn = '0';
    12ae:	80 e3       	ldi	r24, 0x30	; 48
    12b0:	8e 83       	std	Y+6, r24	; 0x06
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <gpib_info+0x1ca>
	else
		atn = '1';
    12b4:	81 e3       	ldi	r24, 0x31	; 49
    12b6:	8e 83       	std	Y+6, r24	; 0x06
	if (srq == 0x00)
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	88 23       	and	r24, r24
    12bc:	19 f4       	brne	.+6      	; 0x12c4 <gpib_info+0x1d6>
		srq = '0';
    12be:	80 e3       	ldi	r24, 0x30	; 48
    12c0:	8d 83       	std	Y+5, r24	; 0x05
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <gpib_info+0x1da>
	else
		srq = '1';
    12c4:	81 e3       	ldi	r24, 0x31	; 49
    12c6:	8d 83       	std	Y+5, r24	; 0x05
	if (ifc == 0x00)
    12c8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ca:	88 23       	and	r24, r24
    12cc:	19 f4       	brne	.+6      	; 0x12d4 <gpib_info+0x1e6>
		ifc = '0';
    12ce:	80 e3       	ldi	r24, 0x30	; 48
    12d0:	8c 83       	std	Y+4, r24	; 0x04
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <gpib_info+0x1ea>
	else
		ifc = '1';
    12d4:	81 e3       	ldi	r24, 0x31	; 49
    12d6:	8c 83       	std	Y+4, r24	; 0x04
	if (ren == 0x00)
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	88 23       	and	r24, r24
    12dc:	19 f4       	brne	.+6      	; 0x12e4 <gpib_info+0x1f6>
		ren = '0';
    12de:	80 e3       	ldi	r24, 0x30	; 48
    12e0:	8b 83       	std	Y+3, r24	; 0x03
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <gpib_info+0x1fa>
	else
		ren = '1';
    12e4:	81 e3       	ldi	r24, 0x31	; 49
    12e6:	8b 83       	std	Y+3, r24	; 0x03

	sprintf(buf,
    12e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ea:	a8 2e       	mov	r10, r24
    12ec:	bb 24       	eor	r11, r11
    12ee:	89 85       	ldd	r24, Y+9	; 0x09
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	88 85       	ldd	r24, Y+8	; 0x08
    12f6:	48 2f       	mov	r20, r24
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	8f 81       	ldd	r24, Y+7	; 0x07
    12fc:	68 2f       	mov	r22, r24
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	8c 81       	ldd	r24, Y+4	; 0x04
    1302:	a8 2f       	mov	r26, r24
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	08 2f       	mov	r16, r24
    130a:	10 e0       	ldi	r17, 0x00	; 0
    130c:	8e 81       	ldd	r24, Y+6	; 0x06
    130e:	e8 2e       	mov	r14, r24
    1310:	ff 24       	eor	r15, r15
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	c8 2e       	mov	r12, r24
    1316:	dd 24       	eor	r13, r13
    1318:	8d b7       	in	r24, 0x3d	; 61
    131a:	9e b7       	in	r25, 0x3e	; 62
    131c:	44 97       	sbiw	r24, 0x14	; 20
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	9e bf       	out	0x3e, r25	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	8d bf       	out	0x3d, r24	; 61
    1328:	ed b7       	in	r30, 0x3d	; 61
    132a:	fe b7       	in	r31, 0x3e	; 62
    132c:	31 96       	adiw	r30, 0x01	; 1
    132e:	8f eb       	ldi	r24, 0xBF	; 191
    1330:	96 e0       	ldi	r25, 0x06	; 6
    1332:	91 83       	std	Z+1, r25	; 0x01
    1334:	80 83       	st	Z, r24
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	93 83       	std	Z+3, r25	; 0x03
    133c:	82 83       	std	Z+2, r24	; 0x02
    133e:	b5 82       	std	Z+5, r11	; 0x05
    1340:	a4 82       	std	Z+4, r10	; 0x04
    1342:	37 83       	std	Z+7, r19	; 0x07
    1344:	26 83       	std	Z+6, r18	; 0x06
    1346:	51 87       	std	Z+9, r21	; 0x09
    1348:	40 87       	std	Z+8, r20	; 0x08
    134a:	73 87       	std	Z+11, r23	; 0x0b
    134c:	62 87       	std	Z+10, r22	; 0x0a
    134e:	b5 87       	std	Z+13, r27	; 0x0d
    1350:	a4 87       	std	Z+12, r26	; 0x0c
    1352:	17 87       	std	Z+15, r17	; 0x0f
    1354:	06 87       	std	Z+14, r16	; 0x0e
    1356:	f1 8a       	std	Z+17, r15	; 0x11
    1358:	e0 8a       	std	Z+16, r14	; 0x10
    135a:	d3 8a       	std	Z+19, r13	; 0x13
    135c:	c2 8a       	std	Z+18, r12	; 0x12
    135e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <sprintf>
    1362:	8d b7       	in	r24, 0x3d	; 61
    1364:	9e b7       	in	r25, 0x3e	; 62
    1366:	44 96       	adiw	r24, 0x14	; 20
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	9e bf       	out	0x3e, r25	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	8d bf       	out	0x3d, r24	; 61
			"dav=%c,nrfd=%c,ndac=%c, eoi=%c, ifc=%c,ren=%c,atn=%c,srq=%c\n\r",
			dav, nrfd, ndac, eoi, ifc, ren, atn, srq);
	uart_puts(buf);
    1372:	8f eb       	ldi	r24, 0xBF	; 191
    1374:	96 e0       	ldi	r25, 0x06	; 6
    1376:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
}
    137a:	2a 96       	adiw	r28, 0x0a	; 10
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	ff 90       	pop	r15
    1390:	ef 90       	pop	r14
    1392:	df 90       	pop	r13
    1394:	cf 90       	pop	r12
    1396:	bf 90       	pop	r11
    1398:	af 90       	pop	r10
    139a:	08 95       	ret

0000139c <gpib_serial_poll>:
 * I haven't looked how a device with two byte address behaves.
 *
 * Secondary/primary is returned in inout parameters
 * If any emitter is found, return value is != 0.
 */
uchar gpib_serial_poll(uint8_t *primary_v, uint8_t* secondary_v) {
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	2c 97       	sbiw	r28, 0x0c	; 12
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
    13b0:	9a 87       	std	Y+10, r25	; 0x0a
    13b2:	89 87       	std	Y+9, r24	; 0x09
    13b4:	7c 87       	std	Y+12, r23	; 0x0c
    13b6:	6b 87       	std	Y+11, r22	; 0x0b
	uchar b, e;
	uchar primary = 0, secondary = 0, found = 0,
    13b8:	1e 82       	std	Y+6, r1	; 0x06
    13ba:	1d 82       	std	Y+5, r1	; 0x05
    13bc:	1c 82       	std	Y+4, r1	; 0x04
			foundPhysical = ADDRESS_NOT_SET;
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	8b 83       	std	Y+3, r24	; 0x03
	int i;

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	cmd_buf[0] = G_CMD_UNT;
    13c2:	8f e5       	ldi	r24, 0x5F	; 95
    13c4:	80 93 5b 06 	sts	0x065B, r24
	gpib_cmd(cmd_buf, 1);
    13c8:	8b e5       	ldi	r24, 0x5B	; 91
    13ca:	96 e0       	ldi	r25, 0x06	; 6
    13cc:	61 e0       	ldi	r22, 0x01	; 1
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>
	cmd_buf[0] = G_CMD_UNL;
    13d4:	8f e3       	ldi	r24, 0x3F	; 63
    13d6:	80 93 5b 06 	sts	0x065B, r24
	gpib_cmd(cmd_buf, 1);
    13da:	8b e5       	ldi	r24, 0x5B	; 91
    13dc:	96 e0       	ldi	r25, 0x06	; 6
    13de:	61 e0       	ldi	r22, 0x01	; 1
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>

	// serial poll enable
	// effect: all devices will send status byte instead of normal data when addressed
	// as talker
	//uart_puts("before SPE\r\n");
	cmd_buf[0] = G_CMD_SPE;
    13e6:	88 e1       	ldi	r24, 0x18	; 24
    13e8:	80 93 5b 06 	sts	0x065B, r24
	gpib_cmd(cmd_buf, 1);
    13ec:	8b e5       	ldi	r24, 0x5B	; 91
    13ee:	96 e0       	ldi	r25, 0x06	; 6
    13f0:	61 e0       	ldi	r22, 0x01	; 1
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    13f8:	1a 82       	std	Y+2, r1	; 0x02
    13fa:	19 82       	std	Y+1, r1	; 0x01
    13fc:	de c0       	rjmp	.+444    	; 0x15ba <gpib_serial_poll+0x21e>
			i++) {

		// set partner to talker mode
		primary = address2TalkerAddress(controller.partners[i].primary);
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	9a 81       	ldd	r25, Y+2	; 0x02
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	fc 01       	movw	r30, r24
    1408:	eb 55       	subi	r30, 0x5B	; 91
    140a:	fa 4f       	sbci	r31, 0xFA	; 250
    140c:	80 81       	ld	r24, Z
    140e:	80 5c       	subi	r24, 0xC0	; 192
    1410:	8e 83       	std	Y+6, r24	; 0x06
		secondary = secondaryAdressToAdressByte(
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	9a 81       	ldd	r25, Y+2	; 0x02
    1416:	03 96       	adiw	r24, 0x03	; 3
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	fc 01       	movw	r30, r24
    141e:	e0 56       	subi	r30, 0x60	; 96
    1420:	fa 4f       	sbci	r31, 0xFA	; 250
    1422:	80 81       	ld	r24, Z
    1424:	80 66       	ori	r24, 0x60	; 96
    1426:	8d 83       	std	Y+5, r24	; 0x05
				controller.partners[i].secondary);

		cmd_buf[0] = primary;
    1428:	8e 81       	ldd	r24, Y+6	; 0x06
    142a:	80 93 5b 06 	sts	0x065B, r24
		//uart_puts("before talker address write\r\n");
		gpib_cmd(cmd_buf, 1);
    142e:	8b e5       	ldi	r24, 0x5B	; 91
    1430:	96 e0       	ldi	r25, 0x06	; 6
    1432:	61 e0       	ldi	r22, 0x01	; 1
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>
		//uart_puts("after talker address write\r\n");
		// handle secondary address if required
		if (secondary != ADDRESS_NOT_SET) {
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
    143c:	8f 3f       	cpi	r24, 0xFF	; 255
    143e:	49 f0       	breq	.+18     	; 0x1452 <gpib_serial_poll+0xb6>
			cmd_buf[0] = secondary;
    1440:	8d 81       	ldd	r24, Y+5	; 0x05
    1442:	80 93 5b 06 	sts	0x065B, r24
			//uart_puts("before talker address write\r\n");
			gpib_cmd(cmd_buf, 1);
    1446:	8b e5       	ldi	r24, 0x5B	; 91
    1448:	96 e0       	ldi	r25, 0x06	; 6
    144a:	61 e0       	ldi	r22, 0x01	; 1
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>
		}

		// now receive data
		//uart_puts("before status byte receive\r\n");
		e = gpib_receive(&b);
    1452:	ce 01       	movw	r24, r28
    1454:	08 96       	adiw	r24, 0x08	; 8
    1456:	0e 94 09 04 	call	0x812	; 0x812 <gpib_receive>
    145a:	8f 83       	std	Y+7, r24	; 0x07
		//uart_puts("after status byte receive\r\n");
		// status byte is now in b

		if (secondary != ADDRESS_NOT_SET) {
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	8f 3f       	cpi	r24, 0xFF	; 255
    1460:	81 f1       	breq	.+96     	; 0x14c2 <gpib_serial_poll+0x126>
			sprintf((char*) cmd_buf,
    1462:	8e 81       	ldd	r24, Y+6	; 0x06
    1464:	88 2f       	mov	r24, r24
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	bc 01       	movw	r22, r24
    146a:	60 54       	subi	r22, 0x40	; 64
    146c:	70 40       	sbci	r23, 0x00	; 0
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	88 85       	ldd	r24, Y+8	; 0x08
    1476:	48 2f       	mov	r20, r24
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	8d b7       	in	r24, 0x3d	; 61
    147c:	9e b7       	in	r25, 0x3e	; 62
    147e:	0a 97       	sbiw	r24, 0x0a	; 10
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	9e bf       	out	0x3e, r25	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	8d bf       	out	0x3d, r24	; 61
    148a:	ed b7       	in	r30, 0x3d	; 61
    148c:	fe b7       	in	r31, 0x3e	; 62
    148e:	31 96       	adiw	r30, 0x01	; 1
    1490:	8b e5       	ldi	r24, 0x5B	; 91
    1492:	96 e0       	ldi	r25, 0x06	; 6
    1494:	91 83       	std	Z+1, r25	; 0x01
    1496:	80 83       	st	Z, r24
    1498:	81 e4       	ldi	r24, 0x41	; 65
    149a:	91 e0       	ldi	r25, 0x01	; 1
    149c:	93 83       	std	Z+3, r25	; 0x03
    149e:	82 83       	std	Z+2, r24	; 0x02
    14a0:	75 83       	std	Z+5, r23	; 0x05
    14a2:	64 83       	std	Z+4, r22	; 0x04
    14a4:	37 83       	std	Z+7, r19	; 0x07
    14a6:	26 83       	std	Z+6, r18	; 0x06
    14a8:	51 87       	std	Z+9, r21	; 0x09
    14aa:	40 87       	std	Z+8, r20	; 0x08
    14ac:	0e 94 da 00 	call	0x1b4	; 0x1b4 <sprintf>
    14b0:	8d b7       	in	r24, 0x3d	; 61
    14b2:	9e b7       	in	r25, 0x3e	; 62
    14b4:	0a 96       	adiw	r24, 0x0a	; 10
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	9e bf       	out	0x3e, r25	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	8d bf       	out	0x3d, r24	; 61
    14c0:	2a c0       	rjmp	.+84     	; 0x1516 <gpib_serial_poll+0x17a>
					"Status byte from device primary=0x%02x,secondary=0x%02x (physical) = 0x%02x\n\r",
					TalkerAddress2Address(primary), secondary, b);
		} else {
			sprintf((char*) cmd_buf,
    14c2:	8e 81       	ldd	r24, Y+6	; 0x06
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	9c 01       	movw	r18, r24
    14ca:	20 54       	subi	r18, 0x40	; 64
    14cc:	30 40       	sbci	r19, 0x00	; 0
    14ce:	88 85       	ldd	r24, Y+8	; 0x08
    14d0:	48 2f       	mov	r20, r24
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	8d b7       	in	r24, 0x3d	; 61
    14d6:	9e b7       	in	r25, 0x3e	; 62
    14d8:	08 97       	sbiw	r24, 0x08	; 8
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	9e bf       	out	0x3e, r25	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	8d bf       	out	0x3d, r24	; 61
    14e4:	ed b7       	in	r30, 0x3d	; 61
    14e6:	fe b7       	in	r31, 0x3e	; 62
    14e8:	31 96       	adiw	r30, 0x01	; 1
    14ea:	8b e5       	ldi	r24, 0x5B	; 91
    14ec:	96 e0       	ldi	r25, 0x06	; 6
    14ee:	91 83       	std	Z+1, r25	; 0x01
    14f0:	80 83       	st	Z, r24
    14f2:	8f e8       	ldi	r24, 0x8F	; 143
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	93 83       	std	Z+3, r25	; 0x03
    14f8:	82 83       	std	Z+2, r24	; 0x02
    14fa:	35 83       	std	Z+5, r19	; 0x05
    14fc:	24 83       	std	Z+4, r18	; 0x04
    14fe:	57 83       	std	Z+7, r21	; 0x07
    1500:	46 83       	std	Z+6, r20	; 0x06
    1502:	0e 94 da 00 	call	0x1b4	; 0x1b4 <sprintf>
    1506:	8d b7       	in	r24, 0x3d	; 61
    1508:	9e b7       	in	r25, 0x3e	; 62
    150a:	08 96       	adiw	r24, 0x08	; 8
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	9e bf       	out	0x3e, r25	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	8d bf       	out	0x3d, r24	; 61
					"Status byte from device primary=0x%02x (physical) = 0x%02x\n\r",
					TalkerAddress2Address(primary), b);
		}
		uart_puts((char*) cmd_buf);
    1516:	8b e5       	ldi	r24, 0x5B	; 91
    1518:	96 e0       	ldi	r25, 0x06	; 6
    151a:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>

		// send UNT and UNL commands (unlisten and untalk)
		// effect: all talker stop talking and all listeners stop listening
		cmd_buf[0] = G_CMD_UNT;
    151e:	8f e5       	ldi	r24, 0x5F	; 95
    1520:	80 93 5b 06 	sts	0x065B, r24
		gpib_cmd(cmd_buf, 1);
    1524:	8b e5       	ldi	r24, 0x5B	; 91
    1526:	96 e0       	ldi	r25, 0x06	; 6
    1528:	61 e0       	ldi	r22, 0x01	; 1
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>
		cmd_buf[0] = G_CMD_UNL;
    1530:	8f e3       	ldi	r24, 0x3F	; 63
    1532:	80 93 5b 06 	sts	0x065B, r24
		gpib_cmd(cmd_buf, 1);
    1536:	8b e5       	ldi	r24, 0x5B	; 91
    1538:	96 e0       	ldi	r25, 0x06	; 6
    153a:	61 e0       	ldi	r22, 0x01	; 1
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>

		if (b & (1 << 6)) {
    1542:	88 85       	ldd	r24, Y+8	; 0x08
    1544:	88 2f       	mov	r24, r24
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	80 74       	andi	r24, 0x40	; 64
    154a:	90 70       	andi	r25, 0x00	; 0
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	81 f1       	breq	.+96     	; 0x15b0 <gpib_serial_poll+0x214>
			found = primary;
    1550:	8e 81       	ldd	r24, Y+6	; 0x06
    1552:	8c 83       	std	Y+4, r24	; 0x04
			foundPhysical = TalkerAddress2Address(found);
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	80 54       	subi	r24, 0x40	; 64
    1558:	8b 83       	std	Y+3, r24	; 0x03
			// bit 6 of status byte of SRQ emitter is 1
			// when reading status byte from emitter, he releases SRQ line (may also be tested here)
			sprintf((char*) cmd_buf,
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	8d 81       	ldd	r24, Y+5	; 0x05
    1562:	48 2f       	mov	r20, r24
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	8d b7       	in	r24, 0x3d	; 61
    1568:	9e b7       	in	r25, 0x3e	; 62
    156a:	08 97       	sbiw	r24, 0x08	; 8
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	9e bf       	out	0x3e, r25	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	8d bf       	out	0x3d, r24	; 61
    1576:	ed b7       	in	r30, 0x3d	; 61
    1578:	fe b7       	in	r31, 0x3e	; 62
    157a:	31 96       	adiw	r30, 0x01	; 1
    157c:	8b e5       	ldi	r24, 0x5B	; 91
    157e:	96 e0       	ldi	r25, 0x06	; 6
    1580:	91 83       	std	Z+1, r25	; 0x01
    1582:	80 83       	st	Z, r24
    1584:	8c ec       	ldi	r24, 0xCC	; 204
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	93 83       	std	Z+3, r25	; 0x03
    158a:	82 83       	std	Z+2, r24	; 0x02
    158c:	35 83       	std	Z+5, r19	; 0x05
    158e:	24 83       	std	Z+4, r18	; 0x04
    1590:	57 83       	std	Z+7, r21	; 0x07
    1592:	46 83       	std	Z+6, r20	; 0x06
    1594:	0e 94 da 00 	call	0x1b4	; 0x1b4 <sprintf>
    1598:	8d b7       	in	r24, 0x3d	; 61
    159a:	9e b7       	in	r25, 0x3e	; 62
    159c:	08 96       	adiw	r24, 0x08	; 8
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	9e bf       	out	0x3e, r25	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	8d bf       	out	0x3d, r24	; 61
					"SRQ emitter is device = 0x%02x (physical address), secondary = 0x%02x\n\r",
					foundPhysical, secondary);
			uart_puts((char*) cmd_buf);
    15a8:	8b e5       	ldi	r24, 0x5B	; 91
    15aa:	96 e0       	ldi	r25, 0x06	; 6
    15ac:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
	gpib_cmd(cmd_buf, 1);
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
			i++) {
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	9a 81       	ldd	r25, Y+2	; 0x02
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	9a 83       	std	Y+2, r25	; 0x02
    15b8:	89 83       	std	Y+1, r24	; 0x01
	cmd_buf[0] = G_CMD_SPE;
	gpib_cmd(cmd_buf, 1);
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	9a 81       	ldd	r25, Y+2	; 0x02
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	fc 01       	movw	r30, r24
    15c4:	eb 55       	subi	r30, 0x5B	; 91
    15c6:	fa 4f       	sbci	r31, 0xFA	; 250
    15c8:	80 81       	ld	r24, Z
    15ca:	8f 3f       	cpi	r24, 0xFF	; 255
    15cc:	21 f0       	breq	.+8      	; 0x15d6 <gpib_serial_poll+0x23a>
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	88 23       	and	r24, r24
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <gpib_serial_poll+0x23a>
    15d4:	14 cf       	rjmp	.-472    	; 0x13fe <gpib_serial_poll+0x62>
		}
	}

	// serial poll disable
	// effect: all devices will return to normal behaviour as talker
	cmd_buf[0] = G_CMD_SPD;
    15d6:	89 e1       	ldi	r24, 0x19	; 25
    15d8:	80 93 5b 06 	sts	0x065B, r24
	//uart_puts("before SPD\r\n");
	gpib_cmd(cmd_buf, 1);
    15dc:	8b e5       	ldi	r24, 0x5B	; 91
    15de:	96 e0       	ldi	r25, 0x06	; 6
    15e0:	61 e0       	ldi	r22, 0x01	; 1
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>
	//uart_puts("after SPD\r\n");

	// "return" values determined
	*primary_v = primary;
    15e8:	e9 85       	ldd	r30, Y+9	; 0x09
    15ea:	fa 85       	ldd	r31, Y+10	; 0x0a
    15ec:	8e 81       	ldd	r24, Y+6	; 0x06
    15ee:	80 83       	st	Z, r24
	*secondary_v = secondary;
    15f0:	eb 85       	ldd	r30, Y+11	; 0x0b
    15f2:	fc 85       	ldd	r31, Y+12	; 0x0c
    15f4:	8d 81       	ldd	r24, Y+5	; 0x05
    15f6:	80 83       	st	Z, r24

	return found;
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    15fa:	2c 96       	adiw	r28, 0x0c	; 12
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	cd bf       	out	0x3d, r28	; 61
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <gpib_set_partner_address>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_address(uchar primary, uchar secondary) {
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	00 d0       	rcall	.+0      	; 0x1612 <gpib_set_partner_address+0x6>
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	6a 83       	std	Y+2, r22	; 0x02
	controller.partner.primary = primary;
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	80 93 a1 05 	sts	0x05A1, r24
	controller.partner.secondary = secondary;
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	80 93 a2 05 	sts	0x05A2, r24
}
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <gpib_set_partner_secondary>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_secondary(uchar secondary) {
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	0f 92       	push	r0
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	89 83       	std	Y+1, r24	; 0x01
	controller.partner.secondary = secondary;
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	80 93 a2 05 	sts	0x05A2, r24
}
    1642:	0f 90       	pop	r0
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <gpib_get_partner_pad>:

/**
 * Get primary address of device currently controlled.
 * \returns primary address Address of device.
 */
uchar gpib_get_partner_pad(void) {
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.primary;
    1652:	80 91 a1 05 	lds	r24, 0x05A1
}
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <gpib_get_partner_sad>:

/**
 * Get secondary address of device currently controlled.
 * \returns secondary address Address of device.
 */
uchar gpib_get_partner_sad(void) {
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.secondary;
    1664:	80 91 a2 05 	lds	r24, 0x05A2
}
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <gpib_get_address>:

/**
 * Get controller address.
 * \returns address of controller.
 */
uchar gpib_get_address(void) {
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
	return controller.myaddress;
    1676:	80 91 a0 05 	lds	r24, 0x05A0
}
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <gpib_set_flavour>:

void gpib_set_flavour(uchar flavour) {
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	0f 92       	push	r0
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	89 83       	std	Y+1, r24	; 0x01
	controller.flavour = flavour;
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	80 93 a4 05 	sts	0x05A4, r24
}
    1692:	0f 90       	pop	r0
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <gpib_get_flavour>:

uchar gpib_get_flavour(void) {
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
	return controller.flavour;
    16a2:	80 91 a4 05 	lds	r24, 0x05A4
}
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <gpib_clear_partners>:

/**
 * Clear partners list
 */
void gpib_clear_partners() {
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <gpib_clear_partners+0x6>
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < MAX_PARTNER; i++) {
    16b6:	1a 82       	std	Y+2, r1	; 0x02
    16b8:	19 82       	std	Y+1, r1	; 0x01
    16ba:	0e c0       	rjmp	.+28     	; 0x16d8 <gpib_clear_partners+0x2c>
		controller.partners[i].primary = ADDRESS_NOT_SET;
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	9a 81       	ldd	r25, Y+2	; 0x02
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	fc 01       	movw	r30, r24
    16c6:	eb 55       	subi	r30, 0x5B	; 91
    16c8:	fa 4f       	sbci	r31, 0xFA	; 250
    16ca:	8f ef       	ldi	r24, 0xFF	; 255
    16cc:	80 83       	st	Z, r24

/**
 * Clear partners list
 */
void gpib_clear_partners() {
	for (int i = 0; i < MAX_PARTNER; i++) {
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	9a 81       	ldd	r25, Y+2	; 0x02
    16d2:	01 96       	adiw	r24, 0x01	; 1
    16d4:	9a 83       	std	Y+2, r25	; 0x02
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	85 30       	cpi	r24, 0x05	; 5
    16de:	91 05       	cpc	r25, r1
    16e0:	6c f3       	brlt	.-38     	; 0x16bc <gpib_clear_partners+0x10>
		controller.partners[i].primary = ADDRESS_NOT_SET;
	}
}
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	08 95       	ret

000016ec <gpib_add_partner_address>:

/**
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <gpib_add_partner_address+0x6>
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <gpib_add_partner_address+0x8>
    16f4:	0f 92       	push	r0
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	8b 83       	std	Y+3, r24	; 0x03
    16fc:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    16fe:	1a 82       	std	Y+2, r1	; 0x02
    1700:	19 82       	std	Y+1, r1	; 0x01
    1702:	05 c0       	rjmp	.+10     	; 0x170e <gpib_add_partner_address+0x22>
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
			i++) {
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	9a 81       	ldd	r25, Y+2	; 0x02
    1708:	01 96       	adiw	r24, 0x01	; 1
    170a:	9a 83       	std	Y+2, r25	; 0x02
    170c:	89 83       	std	Y+1, r24	; 0x01
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	9a 81       	ldd	r25, Y+2	; 0x02
    1712:	85 30       	cpi	r24, 0x05	; 5
    1714:	91 05       	cpc	r25, r1
    1716:	54 f4       	brge	.+20     	; 0x172c <gpib_add_partner_address+0x40>
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	fc 01       	movw	r30, r24
    1722:	eb 55       	subi	r30, 0x5B	; 91
    1724:	fa 4f       	sbci	r31, 0xFA	; 250
    1726:	80 81       	ld	r24, Z
    1728:	8f 3f       	cpi	r24, 0xFF	; 255
    172a:	61 f7       	brne	.-40     	; 0x1704 <gpib_add_partner_address+0x18>
			i++) {
	}
	if (i == MAX_PARTNER) {
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	9a 81       	ldd	r25, Y+2	; 0x02
    1730:	85 30       	cpi	r24, 0x05	; 5
    1732:	91 05       	cpc	r25, r1
    1734:	39 f4       	brne	.+14     	; 0x1744 <gpib_add_partner_address+0x58>
		uart_puts("Too much partners.\n\r");
    1736:	84 e1       	ldi	r24, 0x14	; 20
    1738:	92 e0       	ldi	r25, 0x02	; 2
    173a:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
		return 1;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	8d 83       	std	Y+5, r24	; 0x05
    1742:	14 c0       	rjmp	.+40     	; 0x176c <gpib_add_partner_address+0x80>
	}
	controller.partners[i].primary = primary;
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9a 81       	ldd	r25, Y+2	; 0x02
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	fc 01       	movw	r30, r24
    174e:	eb 55       	subi	r30, 0x5B	; 91
    1750:	fa 4f       	sbci	r31, 0xFA	; 250
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	80 83       	st	Z, r24
	controller.partners[i].secondary = secondary;
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	9a 81       	ldd	r25, Y+2	; 0x02
    175a:	03 96       	adiw	r24, 0x03	; 3
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	fc 01       	movw	r30, r24
    1762:	e0 56       	subi	r30, 0x60	; 96
    1764:	fa 4f       	sbci	r31, 0xFA	; 250
    1766:	8c 81       	ldd	r24, Y+4	; 0x04
    1768:	80 83       	st	Z, r24
	return 0;
    176a:	1d 82       	std	Y+5, r1	; 0x05
    176c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <gpib_remove_partner_address>:

/**
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	00 d0       	rcall	.+0      	; 0x1784 <gpib_remove_partner_address+0x6>
    1784:	00 d0       	rcall	.+0      	; 0x1786 <gpib_remove_partner_address+0x8>
    1786:	0f 92       	push	r0
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	8b 83       	std	Y+3, r24	; 0x03
    178e:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1790:	1a 82       	std	Y+2, r1	; 0x02
    1792:	19 82       	std	Y+1, r1	; 0x01
    1794:	05 c0       	rjmp	.+10     	; 0x17a0 <gpib_remove_partner_address+0x22>
			i < MAX_PARTNER
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	9a 81       	ldd	r25, Y+2	; 0x02
    179a:	01 96       	adiw	r24, 0x01	; 1
    179c:	9a 83       	std	Y+2, r25	; 0x02
    179e:	89 83       	std	Y+1, r24	; 0x01
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	9a 81       	ldd	r25, Y+2	; 0x02
    17a4:	85 30       	cpi	r24, 0x05	; 5
    17a6:	91 05       	cpc	r25, r1
    17a8:	bc f4       	brge	.+46     	; 0x17d8 <gpib_remove_partner_address+0x5a>
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	9a 81       	ldd	r25, Y+2	; 0x02
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	fc 01       	movw	r30, r24
    17b4:	eb 55       	subi	r30, 0x5B	; 91
    17b6:	fa 4f       	sbci	r31, 0xFA	; 250
    17b8:	90 81       	ld	r25, Z
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	98 17       	cp	r25, r24
    17be:	59 f7       	brne	.-42     	; 0x1796 <gpib_remove_partner_address+0x18>
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	9a 81       	ldd	r25, Y+2	; 0x02
    17c4:	03 96       	adiw	r24, 0x03	; 3
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	fc 01       	movw	r30, r24
    17cc:	e0 56       	subi	r30, 0x60	; 96
    17ce:	fa 4f       	sbci	r31, 0xFA	; 250
    17d0:	90 81       	ld	r25, Z
    17d2:	8c 81       	ldd	r24, Y+4	; 0x04
    17d4:	98 17       	cp	r25, r24
    17d6:	f9 f6       	brne	.-66     	; 0x1796 <gpib_remove_partner_address+0x18>
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
	}
	if (i == MAX_PARTNER) {
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	9a 81       	ldd	r25, Y+2	; 0x02
    17dc:	85 30       	cpi	r24, 0x05	; 5
    17de:	91 05       	cpc	r25, r1
    17e0:	39 f4       	brne	.+14     	; 0x17f0 <gpib_remove_partner_address+0x72>
		uart_puts("Partner unknown.\n\r");
    17e2:	89 e2       	ldi	r24, 0x29	; 41
    17e4:	92 e0       	ldi	r25, 0x02	; 2
    17e6:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
		return 1;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	8d 83       	std	Y+5, r24	; 0x05
    17ee:	14 c0       	rjmp	.+40     	; 0x1818 <gpib_remove_partner_address+0x9a>
	}
	controller.partners[i].primary = ADDRESS_NOT_SET;
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	9a 81       	ldd	r25, Y+2	; 0x02
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	fc 01       	movw	r30, r24
    17fa:	eb 55       	subi	r30, 0x5B	; 91
    17fc:	fa 4f       	sbci	r31, 0xFA	; 250
    17fe:	8f ef       	ldi	r24, 0xFF	; 255
    1800:	80 83       	st	Z, r24
	controller.partners[i].secondary = ADDRESS_NOT_SET;
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	03 96       	adiw	r24, 0x03	; 3
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	fc 01       	movw	r30, r24
    180e:	e0 56       	subi	r30, 0x60	; 96
    1810:	fa 4f       	sbci	r31, 0xFA	; 250
    1812:	8f ef       	ldi	r24, 0xFF	; 255
    1814:	80 83       	st	Z, r24
	return 0;
    1816:	1d 82       	std	Y+5, r1	; 0x05
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
}
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <stringToTwoUchars>:

/**
 * Read two integers from string like "45 56" or one integer. In latter case
 * the second integer is initialized with a special value.
 */
void stringToTwoUchars(char *string, uchar *a, uchar *b) {
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	28 97       	sbiw	r28, 0x08	; 8
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	9c 83       	std	Y+4, r25	; 0x04
    1840:	8b 83       	std	Y+3, r24	; 0x03
    1842:	7e 83       	std	Y+6, r23	; 0x06
    1844:	6d 83       	std	Y+5, r22	; 0x05
    1846:	58 87       	std	Y+8, r21	; 0x08
    1848:	4f 83       	std	Y+7, r20	; 0x07
	char *token = strtok(string, " ");
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	2c e3       	ldi	r18, 0x3C	; 60
    1850:	32 e0       	ldi	r19, 0x02	; 2
    1852:	b9 01       	movw	r22, r18
    1854:	0e 94 87 00 	call	0x10e	; 0x10e <strtok>
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	89 83       	std	Y+1, r24	; 0x01
	*a = atoi((char*) token);
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	9a 81       	ldd	r25, Y+2	; 0x02
    1860:	0e 94 69 00 	call	0xd2	; 0xd2 <atoi>
    1864:	ed 81       	ldd	r30, Y+5	; 0x05
    1866:	fe 81       	ldd	r31, Y+6	; 0x06
    1868:	80 83       	st	Z, r24
	token = strtok(NULL, " ");
    186a:	2c e3       	ldi	r18, 0x3C	; 60
    186c:	32 e0       	ldi	r19, 0x02	; 2
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	b9 01       	movw	r22, r18
    1874:	0e 94 87 00 	call	0x10e	; 0x10e <strtok>
    1878:	9a 83       	std	Y+2, r25	; 0x02
    187a:	89 83       	std	Y+1, r24	; 0x01
	if (token != NULL) {
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	9a 81       	ldd	r25, Y+2	; 0x02
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	41 f0       	breq	.+16     	; 0x1894 <stringToTwoUchars+0x6a>
		*b = atoi((char*) token);
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	9a 81       	ldd	r25, Y+2	; 0x02
    1888:	0e 94 69 00 	call	0xd2	; 0xd2 <atoi>
    188c:	ef 81       	ldd	r30, Y+7	; 0x07
    188e:	f8 85       	ldd	r31, Y+8	; 0x08
    1890:	80 83       	st	Z, r24
    1892:	04 c0       	rjmp	.+8      	; 0x189c <stringToTwoUchars+0x72>
	} else {
		*b = ADDRESS_NOT_SET;
    1894:	ef 81       	ldd	r30, Y+7	; 0x07
    1896:	f8 85       	ldd	r31, Y+8	; 0x08
    1898:	8f ef       	ldi	r24, 0xFF	; 255
    189a:	80 83       	st	Z, r24
	}
}
    189c:	28 96       	adiw	r28, 0x08	; 8
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	cd bf       	out	0x3d, r28	; 61
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <handle_internal_commands>:

/**
 * Handles builtin commands.
 */
void handle_internal_commands(uchar *commandString) {
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	c6 54       	subi	r28, 0x46	; 70
    18b8:	d0 40       	sbci	r29, 0x00	; 0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	fe 01       	movw	r30, r28
    18c6:	ed 5b       	subi	r30, 0xBD	; 189
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	91 83       	std	Z+1, r25	; 0x01
    18cc:	80 83       	st	Z, r24
	uchar sbuf[64];
	uchar val, val1;

	switch (buf[1]) {
    18ce:	80 91 c0 06 	lds	r24, 0x06C0
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	27 96       	adiw	r28, 0x07	; 7
    18d8:	3f af       	std	Y+63, r19	; 0x3f
    18da:	2e af       	std	Y+62, r18	; 0x3e
    18dc:	27 97       	sbiw	r28, 0x07	; 7
    18de:	27 96       	adiw	r28, 0x07	; 7
    18e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    18e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    18e4:	27 97       	sbiw	r28, 0x07	; 7
    18e6:	88 36       	cpi	r24, 0x68	; 104
    18e8:	91 05       	cpc	r25, r1
    18ea:	09 f4       	brne	.+2      	; 0x18ee <handle_internal_commands+0x40>
    18ec:	61 c1       	rjmp	.+706    	; 0x1bb0 <handle_internal_commands+0x302>
    18ee:	27 96       	adiw	r28, 0x07	; 7
    18f0:	2e ad       	ldd	r18, Y+62	; 0x3e
    18f2:	3f ad       	ldd	r19, Y+63	; 0x3f
    18f4:	27 97       	sbiw	r28, 0x07	; 7
    18f6:	29 36       	cpi	r18, 0x69	; 105
    18f8:	31 05       	cpc	r19, r1
    18fa:	c4 f4       	brge	.+48     	; 0x192c <handle_internal_commands+0x7e>
    18fc:	27 96       	adiw	r28, 0x07	; 7
    18fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    1900:	9f ad       	ldd	r25, Y+63	; 0x3f
    1902:	27 97       	sbiw	r28, 0x07	; 7
    1904:	8d 32       	cpi	r24, 0x2D	; 45
    1906:	91 05       	cpc	r25, r1
    1908:	09 f4       	brne	.+2      	; 0x190c <handle_internal_commands+0x5e>
    190a:	ee c0       	rjmp	.+476    	; 0x1ae8 <handle_internal_commands+0x23a>
    190c:	27 96       	adiw	r28, 0x07	; 7
    190e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1910:	3f ad       	ldd	r19, Y+63	; 0x3f
    1912:	27 97       	sbiw	r28, 0x07	; 7
    1914:	21 36       	cpi	r18, 0x61	; 97
    1916:	31 05       	cpc	r19, r1
    1918:	11 f1       	breq	.+68     	; 0x195e <handle_internal_commands+0xb0>
    191a:	27 96       	adiw	r28, 0x07	; 7
    191c:	8e ad       	ldd	r24, Y+62	; 0x3e
    191e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1920:	27 97       	sbiw	r28, 0x07	; 7
    1922:	8b 32       	cpi	r24, 0x2B	; 43
    1924:	91 05       	cpc	r25, r1
    1926:	09 f4       	brne	.+2      	; 0x192a <handle_internal_commands+0x7c>
    1928:	96 c0       	rjmp	.+300    	; 0x1a56 <handle_internal_commands+0x1a8>
    192a:	6a c1       	rjmp	.+724    	; 0x1c00 <handle_internal_commands+0x352>
    192c:	27 96       	adiw	r28, 0x07	; 7
    192e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1930:	3f ad       	ldd	r19, Y+63	; 0x3f
    1932:	27 97       	sbiw	r28, 0x07	; 7
    1934:	23 37       	cpi	r18, 0x73	; 115
    1936:	31 05       	cpc	r19, r1
    1938:	09 f4       	brne	.+2      	; 0x193c <handle_internal_commands+0x8e>
    193a:	5a c0       	rjmp	.+180    	; 0x19f0 <handle_internal_commands+0x142>
    193c:	27 96       	adiw	r28, 0x07	; 7
    193e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1940:	9f ad       	ldd	r25, Y+63	; 0x3f
    1942:	27 97       	sbiw	r28, 0x07	; 7
    1944:	88 37       	cpi	r24, 0x78	; 120
    1946:	91 05       	cpc	r25, r1
    1948:	09 f4       	brne	.+2      	; 0x194c <handle_internal_commands+0x9e>
    194a:	17 c1       	rjmp	.+558    	; 0x1b7a <handle_internal_commands+0x2cc>
    194c:	27 96       	adiw	r28, 0x07	; 7
    194e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1950:	3f ad       	ldd	r19, Y+63	; 0x3f
    1952:	27 97       	sbiw	r28, 0x07	; 7
    1954:	29 36       	cpi	r18, 0x69	; 105
    1956:	31 05       	cpc	r19, r1
    1958:	09 f4       	brne	.+2      	; 0x195c <handle_internal_commands+0xae>
    195a:	2d c1       	rjmp	.+602    	; 0x1bb6 <handle_internal_commands+0x308>
    195c:	51 c1       	rjmp	.+674    	; 0x1c00 <handle_internal_commands+0x352>
	case 'a':
		/* set partner primary+secondary address */
		stringToTwoUchars((char*) (&(buf[2])), &val, &val1);
    195e:	81 ec       	ldi	r24, 0xC1	; 193
    1960:	96 e0       	ldi	r25, 0x06	; 6
    1962:	9e 01       	movw	r18, r28
    1964:	2f 5b       	subi	r18, 0xBF	; 191
    1966:	3f 4f       	sbci	r19, 0xFF	; 255
    1968:	ae 01       	movw	r20, r28
    196a:	4e 5b       	subi	r20, 0xBE	; 190
    196c:	5f 4f       	sbci	r21, 0xFF	; 255
    196e:	b9 01       	movw	r22, r18
    1970:	0e 94 15 0c 	call	0x182a	; 0x182a <stringToTwoUchars>
		sprintf(sbuf, "Set partner address, primary: %u , secondary: %u\n\r",
    1974:	fe 01       	movw	r30, r28
    1976:	ef 5b       	subi	r30, 0xBF	; 191
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	80 81       	ld	r24, Z
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	fe 01       	movw	r30, r28
    1982:	ee 5b       	subi	r30, 0xBE	; 190
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	80 81       	ld	r24, Z
    1988:	48 2f       	mov	r20, r24
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	8d b7       	in	r24, 0x3d	; 61
    198e:	9e b7       	in	r25, 0x3e	; 62
    1990:	08 97       	sbiw	r24, 0x08	; 8
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	9e bf       	out	0x3e, r25	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	8d bf       	out	0x3d, r24	; 61
    199c:	ed b7       	in	r30, 0x3d	; 61
    199e:	fe b7       	in	r31, 0x3e	; 62
    19a0:	31 96       	adiw	r30, 0x01	; 1
    19a2:	ce 01       	movw	r24, r28
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	80 83       	st	Z, r24
    19aa:	8e e3       	ldi	r24, 0x3E	; 62
    19ac:	92 e0       	ldi	r25, 0x02	; 2
    19ae:	93 83       	std	Z+3, r25	; 0x03
    19b0:	82 83       	std	Z+2, r24	; 0x02
    19b2:	35 83       	std	Z+5, r19	; 0x05
    19b4:	24 83       	std	Z+4, r18	; 0x04
    19b6:	57 83       	std	Z+7, r21	; 0x07
    19b8:	46 83       	std	Z+6, r20	; 0x06
    19ba:	0e 94 da 00 	call	0x1b4	; 0x1b4 <sprintf>
    19be:	2d b7       	in	r18, 0x3d	; 61
    19c0:	3e b7       	in	r19, 0x3e	; 62
    19c2:	28 5f       	subi	r18, 0xF8	; 248
    19c4:	3f 4f       	sbci	r19, 0xFF	; 255
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	3e bf       	out	0x3e, r19	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	2d bf       	out	0x3d, r18	; 61
				val, val1);
		uart_puts(sbuf);
    19d0:	ce 01       	movw	r24, r28
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
		gpib_set_partner_address(val, val1);
    19d8:	fe 01       	movw	r30, r28
    19da:	ef 5b       	subi	r30, 0xBF	; 191
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	80 81       	ld	r24, Z
    19e0:	fe 01       	movw	r30, r28
    19e2:	ee 5b       	subi	r30, 0xBE	; 190
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	90 81       	ld	r25, Z
    19e8:	69 2f       	mov	r22, r25
    19ea:	0e 94 06 0b 	call	0x160c	; 0x160c <gpib_set_partner_address>
    19ee:	0e c1       	rjmp	.+540    	; 0x1c0c <handle_internal_commands+0x35e>
		break;
	case 's':
		/* set partner secondary address */
		val = atoi((char*) (&(buf[2])));
    19f0:	81 ec       	ldi	r24, 0xC1	; 193
    19f2:	96 e0       	ldi	r25, 0x06	; 6
    19f4:	0e 94 69 00 	call	0xd2	; 0xd2 <atoi>
    19f8:	fe 01       	movw	r30, r28
    19fa:	ef 5b       	subi	r30, 0xBF	; 191
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	80 83       	st	Z, r24
		sprintf(sbuf, "Set partner secondary address to %u\n\r", val);
    1a00:	fe 01       	movw	r30, r28
    1a02:	ef 5b       	subi	r30, 0xBF	; 191
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	80 81       	ld	r24, Z
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	00 d0       	rcall	.+0      	; 0x1a0e <handle_internal_commands+0x160>
    1a0e:	00 d0       	rcall	.+0      	; 0x1a10 <handle_internal_commands+0x162>
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <handle_internal_commands+0x164>
    1a12:	ed b7       	in	r30, 0x3d	; 61
    1a14:	fe b7       	in	r31, 0x3e	; 62
    1a16:	31 96       	adiw	r30, 0x01	; 1
    1a18:	ce 01       	movw	r24, r28
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	91 83       	std	Z+1, r25	; 0x01
    1a1e:	80 83       	st	Z, r24
    1a20:	81 e7       	ldi	r24, 0x71	; 113
    1a22:	92 e0       	ldi	r25, 0x02	; 2
    1a24:	93 83       	std	Z+3, r25	; 0x03
    1a26:	82 83       	std	Z+2, r24	; 0x02
    1a28:	35 83       	std	Z+5, r19	; 0x05
    1a2a:	24 83       	std	Z+4, r18	; 0x04
    1a2c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <sprintf>
    1a30:	8d b7       	in	r24, 0x3d	; 61
    1a32:	9e b7       	in	r25, 0x3e	; 62
    1a34:	06 96       	adiw	r24, 0x06	; 6
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	9e bf       	out	0x3e, r25	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	8d bf       	out	0x3d, r24	; 61
		uart_puts(sbuf);
    1a40:	ce 01       	movw	r24, r28
    1a42:	01 96       	adiw	r24, 0x01	; 1
    1a44:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
		gpib_set_partner_secondary(val);
    1a48:	fe 01       	movw	r30, r28
    1a4a:	ef 5b       	subi	r30, 0xBF	; 191
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	80 81       	ld	r24, Z
    1a50:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpib_set_partner_secondary>
    1a54:	db c0       	rjmp	.+438    	; 0x1c0c <handle_internal_commands+0x35e>
		break;
	case '+':
		/* add device */
		stringToTwoUchars((char*) (&(buf[2])), &val, &val1);
    1a56:	81 ec       	ldi	r24, 0xC1	; 193
    1a58:	96 e0       	ldi	r25, 0x06	; 6
    1a5a:	9e 01       	movw	r18, r28
    1a5c:	2f 5b       	subi	r18, 0xBF	; 191
    1a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a60:	ae 01       	movw	r20, r28
    1a62:	4e 5b       	subi	r20, 0xBE	; 190
    1a64:	5f 4f       	sbci	r21, 0xFF	; 255
    1a66:	b9 01       	movw	r22, r18
    1a68:	0e 94 15 0c 	call	0x182a	; 0x182a <stringToTwoUchars>
		sprintf(sbuf, "Add device, primary: %u , secondary: %u\n\r", val, val1);
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	ef 5b       	subi	r30, 0xBF	; 191
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 81       	ld	r24, Z
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	fe 01       	movw	r30, r28
    1a7a:	ee 5b       	subi	r30, 0xBE	; 190
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	80 81       	ld	r24, Z
    1a80:	48 2f       	mov	r20, r24
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	8d b7       	in	r24, 0x3d	; 61
    1a86:	9e b7       	in	r25, 0x3e	; 62
    1a88:	08 97       	sbiw	r24, 0x08	; 8
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	9e bf       	out	0x3e, r25	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	8d bf       	out	0x3d, r24	; 61
    1a94:	ed b7       	in	r30, 0x3d	; 61
    1a96:	fe b7       	in	r31, 0x3e	; 62
    1a98:	31 96       	adiw	r30, 0x01	; 1
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	01 96       	adiw	r24, 0x01	; 1
    1a9e:	91 83       	std	Z+1, r25	; 0x01
    1aa0:	80 83       	st	Z, r24
    1aa2:	87 e9       	ldi	r24, 0x97	; 151
    1aa4:	92 e0       	ldi	r25, 0x02	; 2
    1aa6:	93 83       	std	Z+3, r25	; 0x03
    1aa8:	82 83       	std	Z+2, r24	; 0x02
    1aaa:	35 83       	std	Z+5, r19	; 0x05
    1aac:	24 83       	std	Z+4, r18	; 0x04
    1aae:	57 83       	std	Z+7, r21	; 0x07
    1ab0:	46 83       	std	Z+6, r20	; 0x06
    1ab2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <sprintf>
    1ab6:	2d b7       	in	r18, 0x3d	; 61
    1ab8:	3e b7       	in	r19, 0x3e	; 62
    1aba:	28 5f       	subi	r18, 0xF8	; 248
    1abc:	3f 4f       	sbci	r19, 0xFF	; 255
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	3e bf       	out	0x3e, r19	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	2d bf       	out	0x3d, r18	; 61
		uart_puts(sbuf);
    1ac8:	ce 01       	movw	r24, r28
    1aca:	01 96       	adiw	r24, 0x01	; 1
    1acc:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
		gpib_add_partner_address(val, val1);
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	ef 5b       	subi	r30, 0xBF	; 191
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	80 81       	ld	r24, Z
    1ad8:	fe 01       	movw	r30, r28
    1ada:	ee 5b       	subi	r30, 0xBE	; 190
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	90 81       	ld	r25, Z
    1ae0:	69 2f       	mov	r22, r25
    1ae2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <gpib_add_partner_address>
    1ae6:	92 c0       	rjmp	.+292    	; 0x1c0c <handle_internal_commands+0x35e>
		break;
	case '-':
		/* add device */
		stringToTwoUchars((char*) (&(buf[2])), &val, &val1);
    1ae8:	81 ec       	ldi	r24, 0xC1	; 193
    1aea:	96 e0       	ldi	r25, 0x06	; 6
    1aec:	9e 01       	movw	r18, r28
    1aee:	2f 5b       	subi	r18, 0xBF	; 191
    1af0:	3f 4f       	sbci	r19, 0xFF	; 255
    1af2:	ae 01       	movw	r20, r28
    1af4:	4e 5b       	subi	r20, 0xBE	; 190
    1af6:	5f 4f       	sbci	r21, 0xFF	; 255
    1af8:	b9 01       	movw	r22, r18
    1afa:	0e 94 15 0c 	call	0x182a	; 0x182a <stringToTwoUchars>
		sprintf(sbuf, "Remove device, primary: %u , secondary: %u\n\r", val,
    1afe:	fe 01       	movw	r30, r28
    1b00:	ef 5b       	subi	r30, 0xBF	; 191
    1b02:	ff 4f       	sbci	r31, 0xFF	; 255
    1b04:	80 81       	ld	r24, Z
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	ee 5b       	subi	r30, 0xBE	; 190
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	80 81       	ld	r24, Z
    1b12:	48 2f       	mov	r20, r24
    1b14:	50 e0       	ldi	r21, 0x00	; 0
    1b16:	8d b7       	in	r24, 0x3d	; 61
    1b18:	9e b7       	in	r25, 0x3e	; 62
    1b1a:	08 97       	sbiw	r24, 0x08	; 8
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	9e bf       	out	0x3e, r25	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	8d bf       	out	0x3d, r24	; 61
    1b26:	ed b7       	in	r30, 0x3d	; 61
    1b28:	fe b7       	in	r31, 0x3e	; 62
    1b2a:	31 96       	adiw	r30, 0x01	; 1
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	01 96       	adiw	r24, 0x01	; 1
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	80 83       	st	Z, r24
    1b34:	81 ec       	ldi	r24, 0xC1	; 193
    1b36:	92 e0       	ldi	r25, 0x02	; 2
    1b38:	93 83       	std	Z+3, r25	; 0x03
    1b3a:	82 83       	std	Z+2, r24	; 0x02
    1b3c:	35 83       	std	Z+5, r19	; 0x05
    1b3e:	24 83       	std	Z+4, r18	; 0x04
    1b40:	57 83       	std	Z+7, r21	; 0x07
    1b42:	46 83       	std	Z+6, r20	; 0x06
    1b44:	0e 94 da 00 	call	0x1b4	; 0x1b4 <sprintf>
    1b48:	2d b7       	in	r18, 0x3d	; 61
    1b4a:	3e b7       	in	r19, 0x3e	; 62
    1b4c:	28 5f       	subi	r18, 0xF8	; 248
    1b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	3e bf       	out	0x3e, r19	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	2d bf       	out	0x3d, r18	; 61
				val1);
		uart_puts(sbuf);
    1b5a:	ce 01       	movw	r24, r28
    1b5c:	01 96       	adiw	r24, 0x01	; 1
    1b5e:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
		gpib_remove_partner_address(val, val1);
    1b62:	fe 01       	movw	r30, r28
    1b64:	ef 5b       	subi	r30, 0xBF	; 191
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	80 81       	ld	r24, Z
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	ee 5b       	subi	r30, 0xBE	; 190
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	90 81       	ld	r25, Z
    1b72:	69 2f       	mov	r22, r25
    1b74:	0e 94 bf 0b 	call	0x177e	; 0x177e <gpib_remove_partner_address>
    1b78:	49 c0       	rjmp	.+146    	; 0x1c0c <handle_internal_commands+0x35e>
		break;
	case 'x':
		/* Xon/Xoff flow control */
		if (!xonXoffMode) {
    1b7a:	80 91 b1 05 	lds	r24, 0x05B1
    1b7e:	88 23       	and	r24, r24
    1b80:	61 f4       	brne	.+24     	; 0x1b9a <handle_internal_commands+0x2ec>
			xonXoffMode = 1;
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	80 93 b1 05 	sts	0x05B1, r24
			uart_set_flow_control(FLOWCONTROL_XONXOFF);
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <uart_set_flow_control>
			uart_puts("xon/xoff flowcontrol on");
    1b90:	8e ee       	ldi	r24, 0xEE	; 238
    1b92:	92 e0       	ldi	r25, 0x02	; 2
    1b94:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
    1b98:	39 c0       	rjmp	.+114    	; 0x1c0c <handle_internal_commands+0x35e>
		} else {
			xonXoffMode = 0;
    1b9a:	10 92 b1 05 	sts	0x05B1, r1
			uart_set_flow_control(FLOWCONTROL_NONE);
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <uart_set_flow_control>
			uart_puts("xon/xoff flowcontrol off");
    1ba6:	86 e0       	ldi	r24, 0x06	; 6
    1ba8:	93 e0       	ldi	r25, 0x03	; 3
    1baa:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
    1bae:	2e c0       	rjmp	.+92     	; 0x1c0c <handle_internal_commands+0x35e>
		}
		break;
	case 'h':
		/* print some usage infos */
		printHelp();
    1bb0:	0e 94 59 10 	call	0x20b2	; 0x20b2 <printHelp>
    1bb4:	2b c0       	rjmp	.+86     	; 0x1c0c <handle_internal_commands+0x35e>
		break;
	case 'i':
		gpib_info();
    1bb6:	0e 94 77 08 	call	0x10ee	; 0x10ee <gpib_info>
		sprintf(sbuf, "Xon/Xoff flow control: %u\n\r", xonXoffMode);
    1bba:	80 91 b1 05 	lds	r24, 0x05B1
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <handle_internal_commands+0x316>
    1bc4:	00 d0       	rcall	.+0      	; 0x1bc6 <handle_internal_commands+0x318>
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <handle_internal_commands+0x31a>
    1bc8:	ed b7       	in	r30, 0x3d	; 61
    1bca:	fe b7       	in	r31, 0x3e	; 62
    1bcc:	31 96       	adiw	r30, 0x01	; 1
    1bce:	ce 01       	movw	r24, r28
    1bd0:	01 96       	adiw	r24, 0x01	; 1
    1bd2:	91 83       	std	Z+1, r25	; 0x01
    1bd4:	80 83       	st	Z, r24
    1bd6:	8f e1       	ldi	r24, 0x1F	; 31
    1bd8:	93 e0       	ldi	r25, 0x03	; 3
    1bda:	93 83       	std	Z+3, r25	; 0x03
    1bdc:	82 83       	std	Z+2, r24	; 0x02
    1bde:	35 83       	std	Z+5, r19	; 0x05
    1be0:	24 83       	std	Z+4, r18	; 0x04
    1be2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <sprintf>
    1be6:	8d b7       	in	r24, 0x3d	; 61
    1be8:	9e b7       	in	r25, 0x3e	; 62
    1bea:	06 96       	adiw	r24, 0x06	; 6
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	9e bf       	out	0x3e, r25	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	8d bf       	out	0x3d, r24	; 61
		uart_puts(sbuf);
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	01 96       	adiw	r24, 0x01	; 1
    1bfa:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
    1bfe:	06 c0       	rjmp	.+12     	; 0x1c0c <handle_internal_commands+0x35e>
		break;
	default:
		uart_puts("unknown command\n\r");
    1c00:	8b e3       	ldi	r24, 0x3B	; 59
    1c02:	93 e0       	ldi	r25, 0x03	; 3
    1c04:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
		printHelp();
    1c08:	0e 94 59 10 	call	0x20b2	; 0x20b2 <printHelp>
		break;
	}
}
    1c0c:	ca 5b       	subi	r28, 0xBA	; 186
    1c0e:	df 4f       	sbci	r29, 0xFF	; 255
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <send_command>:
/**
 * Sends a command.
 *
 * Returns 1 if command is a query, 0 otherwise.
 */
uchar send_command(uchar *commandString) {
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	2b 97       	sbiw	r28, 0x0b	; 11
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	9b 87       	std	Y+11, r25	; 0x0b
    1c36:	8a 87       	std	Y+10, r24	; 0x0a
	uchar controlString[8];
	uchar is_query;

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
    1c38:	8f e5       	ldi	r24, 0x5F	; 95
    1c3a:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	02 96       	adiw	r24, 0x02	; 2
    1c40:	61 e0       	ldi	r22, 0x01	; 1
    1c42:	70 e0       	ldi	r23, 0x00	; 0
    1c44:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    1c48:	8f e3       	ldi	r24, 0x3F	; 63
    1c4a:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	02 96       	adiw	r24, 0x02	; 2
    1c50:	61 e0       	ldi	r22, 0x01	; 1
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>

	// set device to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_partner_pad());
    1c58:	0e 94 25 0b 	call	0x164a	; 0x164a <gpib_get_partner_pad>
    1c5c:	80 5e       	subi	r24, 0xE0	; 224
    1c5e:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1c60:	ce 01       	movw	r24, r28
    1c62:	02 96       	adiw	r24, 0x02	; 2
    1c64:	61 e0       	ldi	r22, 0x01	; 1
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>
	// send secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
    1c6c:	0e 94 2e 0b 	call	0x165c	; 0x165c <gpib_get_partner_sad>
    1c70:	8f 3f       	cpi	r24, 0xFF	; 255
    1c72:	51 f0       	breq	.+20     	; 0x1c88 <send_command+0x68>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
    1c74:	0e 94 2e 0b 	call	0x165c	; 0x165c <gpib_get_partner_sad>
    1c78:	80 66       	ori	r24, 0x60	; 96
    1c7a:	8a 83       	std	Y+2, r24	; 0x02
		gpib_cmd(controlString, 1);
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	02 96       	adiw	r24, 0x02	; 2
    1c80:	61 e0       	ldi	r22, 0x01	; 1
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>
	}

	// set myself (controller) to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_address());
    1c88:	0e 94 37 0b 	call	0x166e	; 0x166e <gpib_get_address>
    1c8c:	80 5c       	subi	r24, 0xC0	; 192
    1c8e:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1c90:	ce 01       	movw	r24, r28
    1c92:	02 96       	adiw	r24, 0x02	; 2
    1c94:	61 e0       	ldi	r22, 0x01	; 1
    1c96:	70 e0       	ldi	r23, 0x00	; 0
    1c98:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>
	//uart_puts("\n\rcommand: ");
	//uart_puts((char*) commandString);
	//uart_puts("\n\r");
	// gpib bus write
	// put out command to listeners
	gpib_write(commandString, 0);
    1c9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ca0:	60 e0       	ldi	r22, 0x00	; 0
    1ca2:	70 e0       	ldi	r23, 0x00	; 0
    1ca4:	0e 94 8a 05 	call	0xb14	; 0xb14 <gpib_write>

	// check if query or command only
	if (strchr((char*) commandString, '?') != NULL) {
    1ca8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1caa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cac:	6f e3       	ldi	r22, 0x3F	; 63
    1cae:	70 e0       	ldi	r23, 0x00	; 0
    1cb0:	0e 94 8c 00 	call	0x118	; 0x118 <strchr>
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	19 f0       	breq	.+6      	; 0x1cbe <send_command+0x9e>
		//uart_puts("Query. Will check for answer.\n\r");
		is_query = 1;
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	89 83       	std	Y+1, r24	; 0x01
    1cbc:	01 c0       	rjmp	.+2      	; 0x1cc0 <send_command+0xa0>
	} else {
		//uart_puts("Command only.\n\r");
		is_query = 0;
    1cbe:	19 82       	std	Y+1, r1	; 0x01
	}
	return is_query;
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cc2:	2b 96       	adiw	r28, 0x0b	; 11
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <receiveAnswer>:

/**
 * Receives answer after command was sent.
 */
void receiveAnswer() {
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	2a 97       	sbiw	r28, 0x0a	; 10
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	uchar b, e;

	// UNT and UNL
	controlString[0] = G_CMD_UNT;
    1ce8:	8f e5       	ldi	r24, 0x5F	; 95
    1cea:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1cec:	ce 01       	movw	r24, r28
    1cee:	02 96       	adiw	r24, 0x02	; 2
    1cf0:	61 e0       	ldi	r22, 0x01	; 1
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    1cf8:	8f e3       	ldi	r24, 0x3F	; 63
    1cfa:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	02 96       	adiw	r24, 0x02	; 2
    1d00:	61 e0       	ldi	r22, 0x01	; 1
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>

	// set myself (controller) to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_address());
    1d08:	0e 94 37 0b 	call	0x166e	; 0x166e <gpib_get_address>
    1d0c:	80 5e       	subi	r24, 0xE0	; 224
    1d0e:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1d10:	ce 01       	movw	r24, r28
    1d12:	02 96       	adiw	r24, 0x02	; 2
    1d14:	61 e0       	ldi	r22, 0x01	; 1
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>

	// set device to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_partner_pad());
    1d1c:	0e 94 25 0b 	call	0x164a	; 0x164a <gpib_get_partner_pad>
    1d20:	80 5c       	subi	r24, 0xC0	; 192
    1d22:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1d24:	ce 01       	movw	r24, r28
    1d26:	02 96       	adiw	r24, 0x02	; 2
    1d28:	61 e0       	ldi	r22, 0x01	; 1
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>
	// secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
    1d30:	0e 94 2e 0b 	call	0x165c	; 0x165c <gpib_get_partner_sad>
    1d34:	8f 3f       	cpi	r24, 0xFF	; 255
    1d36:	51 f0       	breq	.+20     	; 0x1d4c <receiveAnswer+0x78>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
    1d38:	0e 94 2e 0b 	call	0x165c	; 0x165c <gpib_get_partner_sad>
    1d3c:	80 66       	ori	r24, 0x60	; 96
    1d3e:	8a 83       	std	Y+2, r24	; 0x02
		gpib_cmd(controlString, 1);
    1d40:	ce 01       	movw	r24, r28
    1d42:	02 96       	adiw	r24, 0x02	; 2
    1d44:	61 e0       	ldi	r22, 0x01	; 1
    1d46:	70 e0       	ldi	r23, 0x00	; 0
    1d48:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>
	}

	// read the answer until EOI is detected (then e becomes true)
	do {
		// gpib bus receive
		e = gpib_receive(&b);
    1d4c:	ce 01       	movw	r24, r28
    1d4e:	0a 96       	adiw	r24, 0x0a	; 10
    1d50:	0e 94 09 04 	call	0x812	; 0x812 <gpib_receive>
    1d54:	89 83       	std	Y+1, r24	; 0x01
		// write out character
		uart_putc(b);
    1d56:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d58:	0e 94 42 12 	call	0x2484	; 0x2484 <uart_putc>
		//sprintf((char*)buf,"%02x - %c\n\r", b, b);
		//uart_puts((char*)buf);
	} while (!e);
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	88 23       	and	r24, r24
    1d60:	a9 f3       	breq	.-22     	; 0x1d4c <receiveAnswer+0x78>

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
    1d62:	8f e5       	ldi	r24, 0x5F	; 95
    1d64:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1d66:	ce 01       	movw	r24, r28
    1d68:	02 96       	adiw	r24, 0x02	; 2
    1d6a:	61 e0       	ldi	r22, 0x01	; 1
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    1d72:	8f e3       	ldi	r24, 0x3F	; 63
    1d74:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1d76:	ce 01       	movw	r24, r28
    1d78:	02 96       	adiw	r24, 0x02	; 2
    1d7a:	61 e0       	ldi	r22, 0x01	; 1
    1d7c:	70 e0       	ldi	r23, 0x00	; 0
    1d7e:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpib_cmd>
}
    1d82:	2a 96       	adiw	r28, 0x0a	; 10
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	cd bf       	out	0x3d, r28	; 61
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <srq_occured>:

/**
 * Check if a SRQ occured
 */
uchar srq_occured(int* old_time) {
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <srq_occured+0x6>
    1d9a:	0f 92       	push	r0
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	9b 83       	std	Y+3, r25	; 0x03
    1da2:	8a 83       	std	Y+2, r24	; 0x02
	uchar srq = 0;
    1da4:	19 82       	std	Y+1, r1	; 0x01
	if (*old_time == 0) {
    1da6:	ea 81       	ldd	r30, Y+2	; 0x02
    1da8:	fb 81       	ldd	r31, Y+3	; 0x03
    1daa:	80 81       	ld	r24, Z
    1dac:	91 81       	ldd	r25, Z+1	; 0x01
    1dae:	00 97       	sbiw	r24, 0x00	; 0
    1db0:	49 f4       	brne	.+18     	; 0x1dc4 <srq_occured+0x30>
		// old_time value initialization on first call with value s
		*old_time = s;
    1db2:	80 91 10 07 	lds	r24, 0x0710
    1db6:	88 2f       	mov	r24, r24
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	ea 81       	ldd	r30, Y+2	; 0x02
    1dbc:	fb 81       	ldd	r31, Y+3	; 0x03
    1dbe:	91 83       	std	Z+1, r25	; 0x01
    1dc0:	80 83       	st	Z, r24
    1dc2:	1e c0       	rjmp	.+60     	; 0x1e00 <srq_occured+0x6c>
	} else {
		if (s > *old_time) {
    1dc4:	80 91 10 07 	lds	r24, 0x0710
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	ea 81       	ldd	r30, Y+2	; 0x02
    1dce:	fb 81       	ldd	r31, Y+3	; 0x03
    1dd0:	80 81       	ld	r24, Z
    1dd2:	91 81       	ldd	r25, Z+1	; 0x01
    1dd4:	82 17       	cp	r24, r18
    1dd6:	93 07       	cpc	r25, r19
    1dd8:	9c f4       	brge	.+38     	; 0x1e00 <srq_occured+0x6c>
			// some time has passed - check if srq was set
			srq = bit_is_clear(PIND, G_SRQ);
    1dda:	e0 e3       	ldi	r30, 0x30	; 48
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	80 74       	andi	r24, 0x40	; 64
    1de6:	90 70       	andi	r25, 0x00	; 0
    1de8:	19 82       	std	Y+1, r1	; 0x01
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	11 f4       	brne	.+4      	; 0x1df2 <srq_occured+0x5e>
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	89 83       	std	Y+1, r24	; 0x01
			if (srq)
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	88 23       	and	r24, r24
    1df6:	21 f0       	breq	.+8      	; 0x1e00 <srq_occured+0x6c>
				uart_puts("\n\rSRQ detected.\n\r");
    1df8:	8d e4       	ldi	r24, 0x4D	; 77
    1dfa:	93 e0       	ldi	r25, 0x03	; 3
    1dfc:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
		}
	}
	return srq;
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <handle_srq>:

/**
 * Handles SRQs by doing serial poll
 *
 */
uchar handle_srq(uchar *buf, int *buf_ptr) {
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	27 97       	sbiw	r28, 0x07	; 7
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	9d 83       	std	Y+5, r25	; 0x05
    1e24:	8c 83       	std	Y+4, r24	; 0x04
    1e26:	7f 83       	std	Y+7, r23	; 0x07
    1e28:	6e 83       	std	Y+6, r22	; 0x06
	uchar command_ready = 0;
    1e2a:	19 82       	std	Y+1, r1	; 0x01

	// handle srq with serial poll
	uint8_t primary, secondary;
	if (gpib_serial_poll(&primary, &secondary)) {
    1e2c:	ce 01       	movw	r24, r28
    1e2e:	02 96       	adiw	r24, 0x02	; 2
    1e30:	9e 01       	movw	r18, r28
    1e32:	2d 5f       	subi	r18, 0xFD	; 253
    1e34:	3f 4f       	sbci	r19, 0xFF	; 255
    1e36:	b9 01       	movw	r22, r18
    1e38:	0e 94 ce 09 	call	0x139c	; 0x139c <gpib_serial_poll>
    1e3c:	88 23       	and	r24, r24
    1e3e:	21 f0       	breq	.+8      	; 0x1e48 <handle_srq+0x3a>
		uart_puts(
    1e40:	8f e5       	ldi	r24, 0x5F	; 95
    1e42:	93 e0       	ldi	r25, 0x03	; 3
    1e44:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
				"\n\rSRQ emitter is not in list of known devices. SRQ Ignored.\n\r");
	}
	gpib_set_partner_address(primary, secondary);
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4c:	69 2f       	mov	r22, r25
    1e4e:	0e 94 06 0b 	call	0x160c	; 0x160c <gpib_set_partner_address>

	if (gpib_get_flavour() == FLAVOUR_TEK) {
    1e52:	0e 94 4d 0b 	call	0x169a	; 0x169a <gpib_get_flavour>
    1e56:	81 30       	cpi	r24, 0x01	; 1
    1e58:	79 f5       	brne	.+94     	; 0x1eb8 <handle_srq+0xaa>
		// Tek: check status for reason
		buf[0] = 'E';
    1e5a:	ec 81       	ldd	r30, Y+4	; 0x04
    1e5c:	fd 81       	ldd	r31, Y+5	; 0x05
    1e5e:	85 e4       	ldi	r24, 0x45	; 69
    1e60:	80 83       	st	Z, r24
		buf[1] = 'V';
    1e62:	8c 81       	ldd	r24, Y+4	; 0x04
    1e64:	9d 81       	ldd	r25, Y+5	; 0x05
    1e66:	fc 01       	movw	r30, r24
    1e68:	31 96       	adiw	r30, 0x01	; 1
    1e6a:	86 e5       	ldi	r24, 0x56	; 86
    1e6c:	80 83       	st	Z, r24
		buf[2] = 'E';
    1e6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e70:	9d 81       	ldd	r25, Y+5	; 0x05
    1e72:	fc 01       	movw	r30, r24
    1e74:	32 96       	adiw	r30, 0x02	; 2
    1e76:	85 e4       	ldi	r24, 0x45	; 69
    1e78:	80 83       	st	Z, r24
		buf[3] = 'N';
    1e7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7e:	fc 01       	movw	r30, r24
    1e80:	33 96       	adiw	r30, 0x03	; 3
    1e82:	8e e4       	ldi	r24, 0x4E	; 78
    1e84:	80 83       	st	Z, r24
		buf[4] = 'T';
    1e86:	8c 81       	ldd	r24, Y+4	; 0x04
    1e88:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	34 96       	adiw	r30, 0x04	; 4
    1e8e:	84 e5       	ldi	r24, 0x54	; 84
    1e90:	80 83       	st	Z, r24
		buf[5] = '?';
    1e92:	8c 81       	ldd	r24, Y+4	; 0x04
    1e94:	9d 81       	ldd	r25, Y+5	; 0x05
    1e96:	fc 01       	movw	r30, r24
    1e98:	35 96       	adiw	r30, 0x05	; 5
    1e9a:	8f e3       	ldi	r24, 0x3F	; 63
    1e9c:	80 83       	st	Z, r24
		buf[6] = '\0';
    1e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	36 96       	adiw	r30, 0x06	; 6
    1ea6:	10 82       	st	Z, r1
		*buf_ptr = 6;
    1ea8:	ee 81       	ldd	r30, Y+6	; 0x06
    1eaa:	ff 81       	ldd	r31, Y+7	; 0x07
    1eac:	86 e0       	ldi	r24, 0x06	; 6
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	91 83       	std	Z+1, r25	; 0x01
    1eb2:	80 83       	st	Z, r24
		command_ready = 1;
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	89 83       	std	Y+1, r24	; 0x01
	}
	return command_ready;
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eba:	27 96       	adiw	r28, 0x07	; 7
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <main>:
 * \brief Implementation of GPIB controller. Reads a command from RS232, sends it via bus.
 * If The command contains a '?', an answer from the device is expected and read in. The
 * answer then is printed out. If an SRQ occured, a serial poll is initiated.
 * 
 */
int main(void) {
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	00 d0       	rcall	.+0      	; 0x1ed2 <main+0x6>
    1ed2:	00 d0       	rcall	.+0      	; 0x1ed4 <main+0x8>
    1ed4:	0f 92       	push	r0
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
	int old_time = 0;
    1eda:	1d 82       	std	Y+5, r1	; 0x05
    1edc:	1c 82       	std	Y+4, r1	; 0x04
	uchar is_query = 0;
    1ede:	1b 82       	std	Y+3, r1	; 0x03
	uchar command_ready = 0;
    1ee0:	1a 82       	std	Y+2, r1	; 0x02
	uchar do_prompt = 1;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	89 83       	std	Y+1, r24	; 0x01

	/*
	 *  Initialize UART library, pass baudrate and avr cpu clock 
	 *  with the macro UART_BAUD_SELECT()
	 */DI();
    1ee6:	8c e0       	ldi	r24, 0x0C	; 12
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart_init>

	/*
	 * now enable interrupt, since UART and TIMER library is interrupt controlled
	 */sei();
    1eee:	78 94       	sei

	/** print some usage infos */
	printHelp();
    1ef0:	0e 94 59 10 	call	0x20b2	; 0x20b2 <printHelp>
	/*
	 * WRITE: Controller talks and listens
	 */

	// init timer for timeout detection
	timer16_init();
    1ef4:	0e 94 c2 10 	call	0x2184	; 0x2184 <timer16_init>

	// init gpib lines
	gpib_init();
    1ef8:	0e 94 b2 03 	call	0x764	; 0x764 <gpib_init>
	// init controller part - assign bus 
	gpib_controller_assign(0x00);
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <gpib_controller_assign>
	 * 3. if command was a query, read the answer from device (become listener and set device to talker)
	 * 	4. check if SRQ occured and handle that
	 */
	for (;;) {

		if (do_prompt) {
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	88 23       	and	r24, r24
    1f06:	29 f0       	breq	.+10     	; 0x1f12 <main+0x46>
			uart_puts("> ");
    1f08:	8d e9       	ldi	r24, 0x9D	; 157
    1f0a:	93 e0       	ldi	r25, 0x03	; 3
    1f0c:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
			do_prompt = 0;
    1f10:	19 82       	std	Y+1, r1	; 0x01
		}
		// input processing via rs232
		// command_ready may already been set by SRQ that occurred before
		if (!command_ready)
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	88 23       	and	r24, r24
    1f16:	19 f4       	brne	.+6      	; 0x1f1e <main+0x52>
			command_ready = input_process();
    1f18:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <input_process>
    1f1c:	8a 83       	std	Y+2, r24	; 0x02

		if (command_ready) {
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	88 23       	and	r24, r24
    1f22:	21 f0       	breq	.+8      	; 0x1f2c <main+0x60>
			uart_puts("\n\r");
    1f24:	80 ea       	ldi	r24, 0xA0	; 160
    1f26:	93 e0       	ldi	r25, 0x03	; 3
    1f28:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
		}

		// check for internal commands
		if (command_ready && buf[0] == '.') {
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	88 23       	and	r24, r24
    1f30:	81 f0       	breq	.+32     	; 0x1f52 <main+0x86>
    1f32:	80 91 bf 06 	lds	r24, 0x06BF
    1f36:	8e 32       	cpi	r24, 0x2E	; 46
    1f38:	61 f4       	brne	.+24     	; 0x1f52 <main+0x86>
			// all internal cmds start with a '.'
			//uart_puts("\n\rInternal command: ");
			//uart_puts((char*) buf);
			//uart_puts("\n\r");
			handle_internal_commands(buf);
    1f3a:	8f eb       	ldi	r24, 0xBF	; 191
    1f3c:	96 e0       	ldi	r25, 0x06	; 6
    1f3e:	0e 94 57 0c 	call	0x18ae	; 0x18ae <handle_internal_commands>
			// reset local vars for command string reading
			buf_ptr = 0;
    1f42:	10 92 b0 05 	sts	0x05B0, r1
    1f46:	10 92 af 05 	sts	0x05AF, r1
			command_ready = 0;
    1f4a:	1a 82       	std	Y+2, r1	; 0x02
			do_prompt = 1;
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	89 83       	std	Y+1, r24	; 0x01
			is_query = 0;
    1f50:	1b 82       	std	Y+3, r1	; 0x03
		}

		// GPIB command. Check if a partner was defined.
		if (command_ready && (gpib_get_partner_pad() == ADDRESS_NOT_SET)) {
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	88 23       	and	r24, r24
    1f56:	79 f0       	breq	.+30     	; 0x1f76 <main+0xaa>
    1f58:	0e 94 25 0b 	call	0x164a	; 0x164a <gpib_get_partner_pad>
    1f5c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f5e:	59 f4       	brne	.+22     	; 0x1f76 <main+0xaa>
			uart_puts("Device address is not set. Will not send commands.\n\r");
    1f60:	83 ea       	ldi	r24, 0xA3	; 163
    1f62:	93 e0       	ldi	r25, 0x03	; 3
    1f64:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
			// reset local vars for command string reading
			command_ready = 0;
    1f68:	1a 82       	std	Y+2, r1	; 0x02
			buf_ptr = 0;
    1f6a:	10 92 b0 05 	sts	0x05B0, r1
    1f6e:	10 92 af 05 	sts	0x05AF, r1
			do_prompt = 1;
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	89 83       	std	Y+1, r24	; 0x01
		}

		// GPIB command and valid partner. Send the command.
		if (command_ready) {
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	88 23       	and	r24, r24
    1f7a:	61 f0       	breq	.+24     	; 0x1f94 <main+0xc8>
			//uart_puts("\n\rGPIB command: ");
			//uart_puts((char*) buf);
			//uart_puts("\n\r");
			is_query = send_command(buf);
    1f7c:	8f eb       	ldi	r24, 0xBF	; 191
    1f7e:	96 e0       	ldi	r25, 0x06	; 6
    1f80:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <send_command>
    1f84:	8b 83       	std	Y+3, r24	; 0x03
			// reset local vars for command string reading
			command_ready = 0;
    1f86:	1a 82       	std	Y+2, r1	; 0x02
			buf_ptr = 0;
    1f88:	10 92 b0 05 	sts	0x05B0, r1
    1f8c:	10 92 af 05 	sts	0x05AF, r1
			do_prompt = 1;
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	89 83       	std	Y+1, r24	; 0x01
		}

		// if we sent a query, read the answer
		if (is_query) {
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	88 23       	and	r24, r24
    1f98:	49 f0       	breq	.+18     	; 0x1fac <main+0xe0>
			receiveAnswer();
    1f9a:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <receiveAnswer>
			// reset for next command
			is_query = 0;
    1f9e:	1b 82       	std	Y+3, r1	; 0x03
			// some devices do not send cr,lf at command end, so create it always itself
			uart_puts("\n\r");
    1fa0:	80 ea       	ldi	r24, 0xA0	; 160
    1fa2:	93 e0       	ldi	r25, 0x03	; 3
    1fa4:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
			do_prompt = 1;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	89 83       	std	Y+1, r24	; 0x01
		}

		// SRQ detection - do this every time when time value s has changed
		// s is incremented every second. So we check once a second.
		if (srq_occured(&old_time)) {
    1fac:	ce 01       	movw	r24, r28
    1fae:	04 96       	adiw	r24, 0x04	; 4
    1fb0:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <srq_occured>
    1fb4:	88 23       	and	r24, r24
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <main+0xee>
    1fb8:	a4 cf       	rjmp	.-184    	; 0x1f02 <main+0x36>
			command_ready = handle_srq(buf, &buf_ptr);
    1fba:	8f eb       	ldi	r24, 0xBF	; 191
    1fbc:	96 e0       	ldi	r25, 0x06	; 6
    1fbe:	2f ea       	ldi	r18, 0xAF	; 175
    1fc0:	35 e0       	ldi	r19, 0x05	; 5
    1fc2:	b9 01       	movw	r22, r18
    1fc4:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <handle_srq>
    1fc8:	8a 83       	std	Y+2, r24	; 0x02
    1fca:	9b cf       	rjmp	.-202    	; 0x1f02 <main+0x36>

00001fcc <input_process>:
 * Processing user input
 * \brief Read in user input via rs232 using peter fleurys UART library.
 * \returns The character read in
 */

uchar input_process(void) {
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	00 d0       	rcall	.+0      	; 0x1fd2 <input_process+0x6>
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <input_process+0x8>
    1fd4:	0f 92       	push	r0
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
	unsigned int c;
	uchar ch;
	uchar ret = 0;
    1fda:	19 82       	std	Y+1, r1	; 0x01
	 * uart_getc() returns in the lower byte the received character and 
	 * in the higher byte (bitmask) the last receive error
	 * UART_NO_DATA is returned when no data is available.
	 *
	 */
	c = uart_getc();
    1fdc:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <uart_getc>
    1fe0:	9c 83       	std	Y+4, r25	; 0x04
    1fe2:	8b 83       	std	Y+3, r24	; 0x03
	if (c & UART_NO_DATA) {
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe8:	80 70       	andi	r24, 0x00	; 0
    1fea:	91 70       	andi	r25, 0x01	; 1
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	11 f0       	breq	.+4      	; 0x1ff4 <input_process+0x28>
		// no data available from UART
		return 0;
    1ff0:	1d 82       	std	Y+5, r1	; 0x05
    1ff2:	56 c0       	rjmp	.+172    	; 0x20a0 <input_process+0xd4>

	/*
	 * new data available from UART
	 * check for Frame or Overrun error
	 */
	if (c & UART_FRAME_ERROR) {
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff8:	80 70       	andi	r24, 0x00	; 0
    1ffa:	98 70       	andi	r25, 0x08	; 8
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	21 f0       	breq	.+8      	; 0x2008 <input_process+0x3c>
		/* Framing Error detected, i.e no stop bit detected */
		uart_puts_P("UART Frame Error: ");
    2000:	81 e8       	ldi	r24, 0x81	; 129
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	0e 94 86 12 	call	0x250c	; 0x250c <uart_puts_p>
	}
	if (c & UART_OVERRUN_ERROR) {
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	80 70       	andi	r24, 0x00	; 0
    200e:	94 70       	andi	r25, 0x04	; 4
    2010:	00 97       	sbiw	r24, 0x00	; 0
    2012:	21 f0       	breq	.+8      	; 0x201c <input_process+0x50>
		/* 
		 * Overrun, a character already present in the UART UDR register was 
		 * not read by the interrupt handler before the next character arrived,
		 * one or more received characters have been dropped
		 */
		uart_puts_P("UART Overrun Error: ");
    2014:	8c e6       	ldi	r24, 0x6C	; 108
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	0e 94 86 12 	call	0x250c	; 0x250c <uart_puts_p>
	}
	if (c & UART_BUFFER_OVERFLOW) {
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	9c 81       	ldd	r25, Y+4	; 0x04
    2020:	80 70       	andi	r24, 0x00	; 0
    2022:	92 70       	andi	r25, 0x02	; 2
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	21 f0       	breq	.+8      	; 0x2030 <input_process+0x64>
		/* 
		 * We are not reading the receive buffer fast enough,
		 * one or more received character have been dropped 
		 */
		uart_puts_P("Buffer overflow error: ");
    2028:	84 e5       	ldi	r24, 0x54	; 84
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	0e 94 86 12 	call	0x250c	; 0x250c <uart_puts_p>
	}

	/* 
	 * send received character back depending on global flag
	 */
	if (rs232_remote_echo)
    2030:	80 91 9c 05 	lds	r24, 0x059C
    2034:	88 23       	and	r24, r24
    2036:	19 f0       	breq	.+6      	; 0x203e <input_process+0x72>
		uart_putc((unsigned char) c);
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	0e 94 42 12 	call	0x2484	; 0x2484 <uart_putc>

	// make uchar from character in int value
	ch = (uchar) c;
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	8a 83       	std	Y+2, r24	; 0x02
	// add to buffer
	buf[buf_ptr++] = ch;
    2042:	20 91 af 05 	lds	r18, 0x05AF
    2046:	30 91 b0 05 	lds	r19, 0x05B0
    204a:	f9 01       	movw	r30, r18
    204c:	e1 54       	subi	r30, 0x41	; 65
    204e:	f9 4f       	sbci	r31, 0xF9	; 249
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	80 83       	st	Z, r24
    2054:	c9 01       	movw	r24, r18
    2056:	01 96       	adiw	r24, 0x01	; 1
    2058:	90 93 b0 05 	sts	0x05B0, r25
    205c:	80 93 af 05 	sts	0x05AF, r24
	// terminate string
	buf[buf_ptr] = '\0';
    2060:	80 91 af 05 	lds	r24, 0x05AF
    2064:	90 91 b0 05 	lds	r25, 0x05B0
    2068:	fc 01       	movw	r30, r24
    206a:	e1 54       	subi	r30, 0x41	; 65
    206c:	f9 4f       	sbci	r31, 0xF9	; 249
    206e:	10 82       	st	Z, r1

	// <CR> means command input is complete
	if (ch == ASCII_CODE_CR) {
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	8d 30       	cpi	r24, 0x0D	; 13
    2074:	99 f4       	brne	.+38     	; 0x209c <input_process+0xd0>
		// adjust string terminator
		buf[--buf_ptr] = '\0';
    2076:	80 91 af 05 	lds	r24, 0x05AF
    207a:	90 91 b0 05 	lds	r25, 0x05B0
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	90 93 b0 05 	sts	0x05B0, r25
    2084:	80 93 af 05 	sts	0x05AF, r24
    2088:	80 91 af 05 	lds	r24, 0x05AF
    208c:	90 91 b0 05 	lds	r25, 0x05B0
    2090:	fc 01       	movw	r30, r24
    2092:	e1 54       	subi	r30, 0x41	; 65
    2094:	f9 4f       	sbci	r31, 0xF9	; 249
    2096:	10 82       	st	Z, r1
		ret = 1;
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	8d 83       	std	Y+5, r24	; 0x05
    20a0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	08 95       	ret

000020b2 <printHelp>:

#define REVISION "0.7"

void printHelp() {
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
#ifdef WRITE
	sprintf(buf,
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <printHelp+0xa>
    20bc:	00 d0       	rcall	.+0      	; 0x20be <printHelp+0xc>
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <printHelp+0xe>
    20c0:	ed b7       	in	r30, 0x3d	; 61
    20c2:	fe b7       	in	r31, 0x3e	; 62
    20c4:	31 96       	adiw	r30, 0x01	; 1
    20c6:	8f eb       	ldi	r24, 0xBF	; 191
    20c8:	96 e0       	ldi	r25, 0x06	; 6
    20ca:	91 83       	std	Z+1, r25	; 0x01
    20cc:	80 83       	st	Z, r24
    20ce:	88 ed       	ldi	r24, 0xD8	; 216
    20d0:	93 e0       	ldi	r25, 0x03	; 3
    20d2:	93 83       	std	Z+3, r25	; 0x03
    20d4:	82 83       	std	Z+2, r24	; 0x02
    20d6:	88 e1       	ldi	r24, 0x18	; 24
    20d8:	94 e0       	ldi	r25, 0x04	; 4
    20da:	95 83       	std	Z+5, r25	; 0x05
    20dc:	84 83       	std	Z+4, r24	; 0x04
    20de:	0e 94 da 00 	call	0x1b4	; 0x1b4 <sprintf>
    20e2:	8d b7       	in	r24, 0x3d	; 61
    20e4:	9e b7       	in	r25, 0x3e	; 62
    20e6:	06 96       	adiw	r24, 0x06	; 6
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	9e bf       	out	0x3e, r25	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	8d bf       	out	0x3d, r24	; 61
			"\n\rGPIB Controller (T/L/C) (Rev.%s) (c) spurtikus.de 2008-2015\n\r",
			REVISION);
	uart_puts(buf);
    20f2:	8f eb       	ldi	r24, 0xBF	; 191
    20f4:	96 e0       	ldi	r25, 0x06	; 6
    20f6:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
#else
	uart_puts("\n\rGPIB Listener Only (L) (Rev.%s) (c) spurtikus.de 2008-2015\n\r", REVISION);
	uart_puts(buf);
#endif
	uart_puts("Internal commands:\n\r");
    20fa:	8c e1       	ldi	r24, 0x1C	; 28
    20fc:	94 e0       	ldi	r25, 0x04	; 4
    20fe:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
	uart_puts(
    2102:	81 e3       	ldi	r24, 0x31	; 49
    2104:	94 e0       	ldi	r25, 0x04	; 4
    2106:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
			".a <primary> [<secondary>] - set primary/secondary address of remote device\n\r");
	uart_puts(".s <secondary> - set secondary address of of remote device\n\r");
    210a:	8f e7       	ldi	r24, 0x7F	; 127
    210c:	94 e0       	ldi	r25, 0x04	; 4
    210e:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
	uart_puts(
    2112:	8c eb       	ldi	r24, 0xBC	; 188
    2114:	94 e0       	ldi	r25, 0x04	; 4
    2116:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
			".+ <n> - add partner device address to list of known devices.\n\r");
	uart_puts(
    211a:	8c ef       	ldi	r24, 0xFC	; 252
    211c:	94 e0       	ldi	r25, 0x04	; 4
    211e:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
			".- <n> - remove partner device address from list of known devices.\n\r");
	uart_puts(".x - toggle Xon/Xoff flow control.\n\r");
    2122:	81 e4       	ldi	r24, 0x41	; 65
    2124:	95 e0       	ldi	r25, 0x05	; 5
    2126:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
	uart_puts(".h - print help.\n\r");
    212a:	86 e6       	ldi	r24, 0x66	; 102
    212c:	95 e0       	ldi	r25, 0x05	; 5
    212e:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
	uart_puts(".i - dump info about GPIB lines.\n\r");
    2132:	89 e7       	ldi	r24, 0x79	; 121
    2134:	95 e0       	ldi	r25, 0x05	; 5
    2136:	0e 94 69 12 	call	0x24d2	; 0x24d2 <uart_puts>
}
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <__vector_7>:

/**
 * Interrupt Service Routine - do not call directly
 *  This routine is called when the Timer Value TCNT1 reaches the Output Compare Register Value OCR1A
 */ 
ISR(TIMER1_COMPA_vect) {
    2140:	1f 92       	push	r1
    2142:	0f 92       	push	r0
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	0f 92       	push	r0
    2148:	11 24       	eor	r1, r1
    214a:	8f 93       	push	r24
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
#if XTAL_CPU % DEBOUNCE
	OCR1A = XTAL_CPU / DEBOUNCE - 1;
#endif
	if (--timer==0) {
    2154:	80 91 0f 07 	lds	r24, 0x070F
    2158:	81 50       	subi	r24, 0x01	; 1
    215a:	80 93 0f 07 	sts	0x070F, r24
    215e:	80 91 0f 07 	lds	r24, 0x070F
    2162:	88 23       	and	r24, r24
    2164:	39 f4       	brne	.+14     	; 0x2174 <__vector_7+0x34>
		timer=(uint8_t) DEBOUNCE;
    2166:	10 92 0f 07 	sts	0x070F, r1
		s++;
    216a:	80 91 10 07 	lds	r24, 0x0710
    216e:	8f 5f       	subi	r24, 0xFF	; 255
    2170:	80 93 10 07 	sts	0x0710, r24
#if XTAL_CPU % DEBOUNCE
		OCR1A = XTAL_CPU / DEBOUNCE + XTAL_CPU % DEBOUNCE - 1;
#endif
	}
}
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	8f 91       	pop	r24
    217a:	0f 90       	pop	r0
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	0f 90       	pop	r0
    2180:	1f 90       	pop	r1
    2182:	18 95       	reti

00002184 <timer16_init>:
/**
 * Timer initialisation.
 *  \brief initializes all registers ands sets second value 's' to zero. Timer is immediately
 * started.
 */ 
void timer16_init( void ) {
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62

	// OCR1A=XTAL/DEBOUNCE-1 -> Bei Erreichen dieses Wertes (31249) wird die ISR besucht
	// die ISR wird also alle 1/256s aufgerufen. Wenn man dort also bis 256 hochzählt, ist genau
	// 1 Sekunde um! 256 ist der Wert der Variable timer und wird über das define DEBOUNCE festgelegt

	TCCR1B = (1<<CS10) ^ (1<<WGM12);	// Prescaler of 1 | CTC mode
    218c:	ee e4       	ldi	r30, 0x4E	; 78
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	89 e0       	ldi	r24, 0x09	; 9
    2192:	80 83       	st	Z, r24
	OCR1A  = F_CPU/DEBOUNCE-1;		// Output compare register value 
    2194:	ea e4       	ldi	r30, 0x4A	; 74
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	81 e1       	ldi	r24, 0x11	; 17
    219a:	9a e7       	ldi	r25, 0x7A	; 122
    219c:	91 83       	std	Z+1, r25	; 0x01
    219e:	80 83       	st	Z, r24
	TCNT1 = 0; // Start value for timer register
    21a0:	ec e4       	ldi	r30, 0x4C	; 76
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	11 82       	std	Z+1, r1	; 0x01
    21a6:	10 82       	st	Z, r1
	s=0; // Initialize second value (s) to zero
    21a8:	10 92 10 07 	sts	0x0710, r1
	timer = (uint8_t)DEBOUNCE; 
    21ac:	10 92 0f 07 	sts	0x070F, r1
	TIMSK |= (1<<OCIE1A);		// activate timer interrupts which starts timer run
    21b0:	a9 e5       	ldi	r26, 0x59	; 89
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e9 e5       	ldi	r30, 0x59	; 89
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	80 61       	ori	r24, 0x10	; 16
    21bc:	8c 93       	st	X, r24
}
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	08 95       	ret

000021c4 <uart_set_flow_control>:
/** number of chars in rx buffer */
static volatile unsigned char chars_in_rx_buffer = 0;

void SendOutOfBand(unsigned char c);

void uart_set_flow_control(unsigned char _flowControl) {
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	0f 92       	push	r0
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	89 83       	std	Y+1, r24	; 0x01
	flowControl = _flowControl;
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	80 93 b2 05 	sts	0x05B2, r24
}
    21d6:	0f 90       	pop	r0
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
 Function: UART Receive Complete interrupt
 Purpose:  called when the UART has received a character
 **************************************************************************/
{
    21de:	1f 92       	push	r1
    21e0:	0f 92       	push	r0
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	0f 92       	push	r0
    21e6:	11 24       	eor	r1, r1
    21e8:	2f 93       	push	r18
    21ea:	3f 93       	push	r19
    21ec:	4f 93       	push	r20
    21ee:	5f 93       	push	r21
    21f0:	6f 93       	push	r22
    21f2:	7f 93       	push	r23
    21f4:	8f 93       	push	r24
    21f6:	9f 93       	push	r25
    21f8:	af 93       	push	r26
    21fa:	bf 93       	push	r27
    21fc:	ef 93       	push	r30
    21fe:	ff 93       	push	r31
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	00 d0       	rcall	.+0      	; 0x2206 <__vector_13+0x28>
    2206:	00 d0       	rcall	.+0      	; 0x2208 <__vector_13+0x2a>
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	unsigned char usr;
	unsigned char lastRxError;

	/* read UART status register and UART data register */
	usr = UART0_STATUS;
    220c:	eb e2       	ldi	r30, 0x2B	; 43
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	8a 83       	std	Y+2, r24	; 0x02
	data = UART0_DATA;
    2214:	ec e2       	ldi	r30, 0x2C	; 44
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	8b 83       	std	Y+3, r24	; 0x03

	/* */
#if defined( AT90_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	88 71       	andi	r24, 0x18	; 24
    2220:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif

	/* calculate buffer index */
	tmphead = (UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    2222:	80 91 58 06 	lds	r24, 0x0658
    2226:	8f 5f       	subi	r24, 0xFF	; 255
    2228:	8f 77       	andi	r24, 0x7F	; 127
    222a:	8c 83       	std	Y+4, r24	; 0x04

	if (tmphead == UART_RxTail) {
    222c:	90 91 59 06 	lds	r25, 0x0659
    2230:	8c 81       	ldd	r24, Y+4	; 0x04
    2232:	89 17       	cp	r24, r25
    2234:	19 f4       	brne	.+6      	; 0x223c <__vector_13+0x5e>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    2236:	82 e0       	ldi	r24, 0x02	; 2
    2238:	89 83       	std	Y+1, r24	; 0x01
    223a:	10 c0       	rjmp	.+32     	; 0x225c <__vector_13+0x7e>
	} else {
		/* store new index */
		UART_RxHead = tmphead;
    223c:	8c 81       	ldd	r24, Y+4	; 0x04
    223e:	80 93 58 06 	sts	0x0658, r24
		/* store received data in buffer */
		UART_RxBuf[tmphead] = data;
    2242:	8c 81       	ldd	r24, Y+4	; 0x04
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	fc 01       	movw	r30, r24
    224a:	ea 52       	subi	r30, 0x2A	; 42
    224c:	fa 4f       	sbci	r31, 0xFA	; 250
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	80 83       	st	Z, r24
		chars_in_rx_buffer++;
    2252:	80 91 b5 05 	lds	r24, 0x05B5
    2256:	8f 5f       	subi	r24, 0xFF	; 255
    2258:	80 93 b5 05 	sts	0x05B5, r24
	}

	if (flowControl == FLOWCONTROL_XONXOFF
    225c:	80 91 b2 05 	lds	r24, 0x05B2
    2260:	88 23       	and	r24, r24
    2262:	99 f4       	brne	.+38     	; 0x228a <__vector_13+0xac>
    2264:	80 91 b5 05 	lds	r24, 0x05B5
    2268:	81 36       	cpi	r24, 0x61	; 97
    226a:	78 f0       	brcs	.+30     	; 0x228a <__vector_13+0xac>
			&& chars_in_rx_buffer > UART_RX_BUFFER_MAX_MARK) {
		/* immediately send XOFF */
		oob_event = 1;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	80 93 b3 05 	sts	0x05B3, r24
		if (!after_xoff_sent) {
    2272:	80 91 b4 05 	lds	r24, 0x05B4
    2276:	88 23       	and	r24, r24
    2278:	31 f4       	brne	.+12     	; 0x2286 <__vector_13+0xa8>
			SendOutOfBand(XOFF);
    227a:	83 e1       	ldi	r24, 0x13	; 19
    227c:	0e 94 5f 11 	call	0x22be	; 0x22be <SendOutOfBand>
			after_xoff_sent = 1;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	80 93 b4 05 	sts	0x05B4, r24
		}
		oob_event = 0;
    2286:	10 92 b3 05 	sts	0x05B3, r1
	}

	UART_LastRxError = lastRxError;
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	80 93 5a 06 	sts	0x065A, r24
}
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	cf 91       	pop	r28
    229a:	df 91       	pop	r29
    229c:	ff 91       	pop	r31
    229e:	ef 91       	pop	r30
    22a0:	bf 91       	pop	r27
    22a2:	af 91       	pop	r26
    22a4:	9f 91       	pop	r25
    22a6:	8f 91       	pop	r24
    22a8:	7f 91       	pop	r23
    22aa:	6f 91       	pop	r22
    22ac:	5f 91       	pop	r21
    22ae:	4f 91       	pop	r20
    22b0:	3f 91       	pop	r19
    22b2:	2f 91       	pop	r18
    22b4:	0f 90       	pop	r0
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	0f 90       	pop	r0
    22ba:	1f 90       	pop	r1
    22bc:	18 95       	reti

000022be <SendOutOfBand>:

void SendOutOfBand(unsigned char c) {
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	0f 92       	push	r0
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << UDRE)))
    22ca:	eb e2       	ldi	r30, 0x2B	; 43
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	88 2f       	mov	r24, r24
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	80 72       	andi	r24, 0x20	; 32
    22d6:	90 70       	andi	r25, 0x00	; 0
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	b9 f3       	breq	.-18     	; 0x22ca <SendOutOfBand+0xc>
		;
	UDR = c;
    22dc:	ec e2       	ldi	r30, 0x2C	; 44
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	80 83       	st	Z, r24
}
    22e4:	0f 90       	pop	r0
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	08 95       	ret

000022ec <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
 Function: UART Data Register Empty interrupt
 Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
    22ec:	1f 92       	push	r1
    22ee:	0f 92       	push	r0
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	0f 92       	push	r0
    22f4:	11 24       	eor	r1, r1
    22f6:	8f 93       	push	r24
    22f8:	9f 93       	push	r25
    22fa:	af 93       	push	r26
    22fc:	bf 93       	push	r27
    22fe:	ef 93       	push	r30
    2300:	ff 93       	push	r31
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	0f 92       	push	r0
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;

	if (oob_event) {
    230c:	80 91 b3 05 	lds	r24, 0x05B3
    2310:	88 23       	and	r24, r24
    2312:	01 f5       	brne	.+64     	; 0x2354 <__vector_14+0x68>
		/* suppress transmitting during oob handling */
		return;
	}
	if (UART_TxHead != UART_TxTail) {
    2314:	90 91 56 06 	lds	r25, 0x0656
    2318:	80 91 57 06 	lds	r24, 0x0657
    231c:	98 17       	cp	r25, r24
    231e:	99 f0       	breq	.+38     	; 0x2346 <__vector_14+0x5a>
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    2320:	80 91 57 06 	lds	r24, 0x0657
    2324:	8f 5f       	subi	r24, 0xFF	; 255
    2326:	8f 71       	andi	r24, 0x1F	; 31
    2328:	89 83       	std	Y+1, r24	; 0x01
		UART_TxTail = tmptail;
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	80 93 57 06 	sts	0x0657, r24
		/* get one byte from buffer and write it to UART */
		UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
    2330:	ac e2       	ldi	r26, 0x2C	; 44
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	88 2f       	mov	r24, r24
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	fc 01       	movw	r30, r24
    233c:	ea 54       	subi	r30, 0x4A	; 74
    233e:	fa 4f       	sbci	r31, 0xFA	; 250
    2340:	80 81       	ld	r24, Z
    2342:	8c 93       	st	X, r24
    2344:	07 c0       	rjmp	.+14     	; 0x2354 <__vector_14+0x68>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
    2346:	aa e2       	ldi	r26, 0x2A	; 42
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	ea e2       	ldi	r30, 0x2A	; 42
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	8f 7d       	andi	r24, 0xDF	; 223
    2352:	8c 93       	st	X, r24
	}
}
    2354:	0f 90       	pop	r0
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	ff 91       	pop	r31
    235c:	ef 91       	pop	r30
    235e:	bf 91       	pop	r27
    2360:	af 91       	pop	r26
    2362:	9f 91       	pop	r25
    2364:	8f 91       	pop	r24
    2366:	0f 90       	pop	r0
    2368:	0f be       	out	0x3f, r0	; 63
    236a:	0f 90       	pop	r0
    236c:	1f 90       	pop	r1
    236e:	18 95       	reti

00002370 <uart_init>:
 Function: uart_init()
 Purpose:  initialize UART and set baudrate
 Input:    baudrate using macro UART_BAUD_SELECT()
 Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate) {
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	00 d0       	rcall	.+0      	; 0x2376 <uart_init+0x6>
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	9a 83       	std	Y+2, r25	; 0x02
    237c:	89 83       	std	Y+1, r24	; 0x01
	UART_TxHead = 0;
    237e:	10 92 56 06 	sts	0x0656, r1
	UART_TxTail = 0;
    2382:	10 92 57 06 	sts	0x0657, r1
	UART_RxHead = 0;
    2386:	10 92 58 06 	sts	0x0658, r1
	UART_RxTail = 0;
    238a:	10 92 59 06 	sts	0x0659, r1
	/* enable UART receiver and transmmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if (baudrate & 0x8000) {
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	99 23       	and	r25, r25
    2394:	4c f4       	brge	.+18     	; 0x23a8 <uart_init+0x38>
		UART0_STATUS = (1 << U2X);  //Enable 2x speed
    2396:	eb e2       	ldi	r30, 0x2B	; 43
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	82 e0       	ldi	r24, 0x02	; 2
    239c:	80 83       	st	Z, r24
		baudrate &= ~0x8000;
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	9a 81       	ldd	r25, Y+2	; 0x02
    23a2:	9f 77       	andi	r25, 0x7F	; 127
    23a4:	9a 83       	std	Y+2, r25	; 0x02
    23a6:	89 83       	std	Y+1, r24	; 0x01
	}
	UBRRH = (unsigned char) (baudrate >> 8);
    23a8:	e0 e4       	ldi	r30, 0x40	; 64
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	9a 81       	ldd	r25, Y+2	; 0x02
    23b0:	89 2f       	mov	r24, r25
    23b2:	99 27       	eor	r25, r25
    23b4:	80 83       	st	Z, r24
	UBRRL = (unsigned char) baudrate;
    23b6:	e9 e2       	ldi	r30, 0x29	; 41
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	80 83       	st	Z, r24

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | (1 << RXEN) | (1 << TXEN);
    23be:	ea e2       	ldi	r30, 0x2A	; 42
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	88 e9       	ldi	r24, 0x98	; 152
    23c4:	80 83       	st	Z, r24

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
    23c6:	e0 e4       	ldi	r30, 0x40	; 64
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	86 e8       	ldi	r24, 0x86	; 134
    23cc:	80 83       	st	Z, r24
	/* Enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <uart_getc>:
 Function: uart_getc()
 Purpose:  return byte from ringbuffer
 Returns:  lower byte:  received byte from ringbuffer
 higher byte: last receive error
 **************************************************************************/
unsigned int uart_getc(void) {
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	00 d0       	rcall	.+0      	; 0x23de <uart_getc+0x6>
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <uart_getc+0x8>
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;
	unsigned char data;

	if (UART_RxHead == UART_RxTail) {
    23e4:	90 91 58 06 	lds	r25, 0x0658
    23e8:	80 91 59 06 	lds	r24, 0x0659
    23ec:	98 17       	cp	r25, r24
    23ee:	29 f4       	brne	.+10     	; 0x23fa <uart_getc+0x22>
		return UART_NO_DATA; /* no data available */
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	91 e0       	ldi	r25, 0x01	; 1
    23f4:	9c 83       	std	Y+4, r25	; 0x04
    23f6:	8b 83       	std	Y+3, r24	; 0x03
    23f8:	3c c0       	rjmp	.+120    	; 0x2472 <uart_getc+0x9a>
	}

	/* calculate /store buffer index */
	tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    23fa:	80 91 59 06 	lds	r24, 0x0659
    23fe:	8f 5f       	subi	r24, 0xFF	; 255
    2400:	8f 77       	andi	r24, 0x7F	; 127
    2402:	8a 83       	std	Y+2, r24	; 0x02
	UART_RxTail = tmptail;
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	80 93 59 06 	sts	0x0659, r24

	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	88 2f       	mov	r24, r24
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	fc 01       	movw	r30, r24
    2412:	ea 52       	subi	r30, 0x2A	; 42
    2414:	fa 4f       	sbci	r31, 0xFA	; 250
    2416:	80 81       	ld	r24, Z
    2418:	89 83       	std	Y+1, r24	; 0x01
	if (chars_in_rx_buffer > 0) {
    241a:	80 91 b5 05 	lds	r24, 0x05B5
    241e:	88 23       	and	r24, r24
    2420:	29 f0       	breq	.+10     	; 0x242c <uart_getc+0x54>
		chars_in_rx_buffer--;
    2422:	80 91 b5 05 	lds	r24, 0x05B5
    2426:	81 50       	subi	r24, 0x01	; 1
    2428:	80 93 b5 05 	sts	0x05B5, r24
	}
	if ((flowControl == FLOWCONTROL_XONXOFF) && after_xoff_sent) {
    242c:	80 91 b2 05 	lds	r24, 0x05B2
    2430:	88 23       	and	r24, r24
    2432:	91 f4       	brne	.+36     	; 0x2458 <uart_getc+0x80>
    2434:	80 91 b4 05 	lds	r24, 0x05B4
    2438:	88 23       	and	r24, r24
    243a:	71 f0       	breq	.+28     	; 0x2458 <uart_getc+0x80>
		if (chars_in_rx_buffer <= UART_RX_BUFFER_MIN_MARK) {
    243c:	80 91 b5 05 	lds	r24, 0x05B5
    2440:	81 31       	cpi	r24, 0x11	; 17
    2442:	50 f4       	brcc	.+20     	; 0x2458 <uart_getc+0x80>
			/* immediately send XON */
			oob_event = 1;
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	80 93 b3 05 	sts	0x05B3, r24
			SendOutOfBand(XON);
    244a:	81 e1       	ldi	r24, 0x11	; 17
    244c:	0e 94 5f 11 	call	0x22be	; 0x22be <SendOutOfBand>
			after_xoff_sent = 0;
    2450:	10 92 b4 05 	sts	0x05B4, r1
			oob_event = 0;
    2454:	10 92 b3 05 	sts	0x05B3, r1
		}
	}

	return (UART_LastRxError << 8) + data;
    2458:	80 91 5a 06 	lds	r24, 0x065A
    245c:	88 2f       	mov	r24, r24
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	38 2f       	mov	r19, r24
    2462:	22 27       	eor	r18, r18
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	88 2f       	mov	r24, r24
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	82 0f       	add	r24, r18
    246c:	93 1f       	adc	r25, r19
    246e:	9c 83       	std	Y+4, r25	; 0x04
    2470:	8b 83       	std	Y+3, r24	; 0x03
    2472:	8b 81       	ldd	r24, Y+3	; 0x03
    2474:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	08 95       	ret

00002484 <uart_putc>:
 Function: uart_putc()
 Purpose:  write byte to ringbuffer for transmitting via UART
 Input:    byte to be transmitted
 Returns:  none
 **************************************************************************/
void uart_putc(unsigned char data) {
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	00 d0       	rcall	.+0      	; 0x248a <uart_putc+0x6>
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
    248e:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char tmphead;

	tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    2490:	80 91 56 06 	lds	r24, 0x0656
    2494:	8f 5f       	subi	r24, 0xFF	; 255
    2496:	8f 71       	andi	r24, 0x1F	; 31
    2498:	89 83       	std	Y+1, r24	; 0x01

	while (tmphead == UART_TxTail) {
    249a:	90 91 57 06 	lds	r25, 0x0657
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	89 17       	cp	r24, r25
    24a2:	d9 f3       	breq	.-10     	; 0x249a <uart_putc+0x16>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	88 2f       	mov	r24, r24
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	fc 01       	movw	r30, r24
    24ac:	ea 54       	subi	r30, 0x4A	; 74
    24ae:	fa 4f       	sbci	r31, 0xFA	; 250
    24b0:	8a 81       	ldd	r24, Y+2	; 0x02
    24b2:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	80 93 56 06 	sts	0x0656, r24

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    24ba:	aa e2       	ldi	r26, 0x2A	; 42
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	ea e2       	ldi	r30, 0x2A	; 42
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	80 62       	ori	r24, 0x20	; 32
    24c6:	8c 93       	st	X, r24

}/* uart_putc */
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	08 95       	ret

000024d2 <uart_puts>:
 Function: uart_puts()
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <uart_puts+0x6>
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	9a 83       	std	Y+2, r25	; 0x02
    24de:	89 83       	std	Y+1, r24	; 0x01
    24e0:	0b c0       	rjmp	.+22     	; 0x24f8 <uart_puts+0x26>
	while (*s)
		uart_putc(*s++);
    24e2:	e9 81       	ldd	r30, Y+1	; 0x01
    24e4:	fa 81       	ldd	r31, Y+2	; 0x02
    24e6:	20 81       	ld	r18, Z
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	9a 81       	ldd	r25, Y+2	; 0x02
    24ec:	01 96       	adiw	r24, 0x01	; 1
    24ee:	9a 83       	std	Y+2, r25	; 0x02
    24f0:	89 83       	std	Y+1, r24	; 0x01
    24f2:	82 2f       	mov	r24, r18
    24f4:	0e 94 42 12 	call	0x2484	; 0x2484 <uart_putc>
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
	while (*s)
    24f8:	e9 81       	ldd	r30, Y+1	; 0x01
    24fa:	fa 81       	ldd	r31, Y+2	; 0x02
    24fc:	80 81       	ld	r24, Z
    24fe:	88 23       	and	r24, r24
    2500:	81 f7       	brne	.-32     	; 0x24e2 <uart_puts+0x10>
		uart_putc(*s++);

}/* uart_puts */
    2502:	0f 90       	pop	r0
    2504:	0f 90       	pop	r0
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	08 95       	ret

0000250c <uart_puts_p>:
 Function: uart_puts_p()
 Purpose:  transmit string from program memory to UART
 Input:    program memory string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	00 d0       	rcall	.+0      	; 0x2512 <uart_puts_p+0x6>
    2512:	00 d0       	rcall	.+0      	; 0x2514 <uart_puts_p+0x8>
    2514:	00 d0       	rcall	.+0      	; 0x2516 <uart_puts_p+0xa>
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
    251a:	9d 83       	std	Y+5, r25	; 0x05
    251c:	8c 83       	std	Y+4, r24	; 0x04
    251e:	03 c0       	rjmp	.+6      	; 0x2526 <uart_puts_p+0x1a>
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
		uart_putc(c);
    2520:	8e 81       	ldd	r24, Y+6	; 0x06
    2522:	0e 94 42 12 	call	0x2484	; 0x2484 <uart_putc>
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
    2526:	8c 81       	ldd	r24, Y+4	; 0x04
    2528:	9d 81       	ldd	r25, Y+5	; 0x05
    252a:	9b 83       	std	Y+3, r25	; 0x03
    252c:	8a 83       	std	Y+2, r24	; 0x02
    252e:	8c 81       	ldd	r24, Y+4	; 0x04
    2530:	9d 81       	ldd	r25, Y+5	; 0x05
    2532:	01 96       	adiw	r24, 0x01	; 1
    2534:	9d 83       	std	Y+5, r25	; 0x05
    2536:	8c 83       	std	Y+4, r24	; 0x04
    2538:	ea 81       	ldd	r30, Y+2	; 0x02
    253a:	fb 81       	ldd	r31, Y+3	; 0x03
    253c:	84 91       	lpm	r24, Z+
    253e:	89 83       	std	Y+1, r24	; 0x01
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	8e 83       	std	Y+6, r24	; 0x06
    2544:	8e 81       	ldd	r24, Y+6	; 0x06
    2546:	88 23       	and	r24, r24
    2548:	59 f7       	brne	.-42     	; 0x2520 <uart_puts_p+0x14>
		uart_putc(c);

}/* uart_puts_p */
    254a:	26 96       	adiw	r28, 0x06	; 6
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	08 95       	ret

0000255c <__prologue_saves__>:
    255c:	2f 92       	push	r2
    255e:	3f 92       	push	r3
    2560:	4f 92       	push	r4
    2562:	5f 92       	push	r5
    2564:	6f 92       	push	r6
    2566:	7f 92       	push	r7
    2568:	8f 92       	push	r8
    256a:	9f 92       	push	r9
    256c:	af 92       	push	r10
    256e:	bf 92       	push	r11
    2570:	cf 92       	push	r12
    2572:	df 92       	push	r13
    2574:	ef 92       	push	r14
    2576:	ff 92       	push	r15
    2578:	0f 93       	push	r16
    257a:	1f 93       	push	r17
    257c:	cf 93       	push	r28
    257e:	df 93       	push	r29
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	ca 1b       	sub	r28, r26
    2586:	db 0b       	sbc	r29, r27
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	f8 94       	cli
    258c:	de bf       	out	0x3e, r29	; 62
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	cd bf       	out	0x3d, r28	; 61
    2592:	09 94       	ijmp

00002594 <__epilogue_restores__>:
    2594:	2a 88       	ldd	r2, Y+18	; 0x12
    2596:	39 88       	ldd	r3, Y+17	; 0x11
    2598:	48 88       	ldd	r4, Y+16	; 0x10
    259a:	5f 84       	ldd	r5, Y+15	; 0x0f
    259c:	6e 84       	ldd	r6, Y+14	; 0x0e
    259e:	7d 84       	ldd	r7, Y+13	; 0x0d
    25a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    25a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    25a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    25a6:	b9 84       	ldd	r11, Y+9	; 0x09
    25a8:	c8 84       	ldd	r12, Y+8	; 0x08
    25aa:	df 80       	ldd	r13, Y+7	; 0x07
    25ac:	ee 80       	ldd	r14, Y+6	; 0x06
    25ae:	fd 80       	ldd	r15, Y+5	; 0x05
    25b0:	0c 81       	ldd	r16, Y+4	; 0x04
    25b2:	1b 81       	ldd	r17, Y+3	; 0x03
    25b4:	aa 81       	ldd	r26, Y+2	; 0x02
    25b6:	b9 81       	ldd	r27, Y+1	; 0x01
    25b8:	ce 0f       	add	r28, r30
    25ba:	d1 1d       	adc	r29, r1
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	ed 01       	movw	r28, r26
    25c8:	08 95       	ret

000025ca <_exit>:
    25ca:	f8 94       	cli

000025cc <__stop_program>:
    25cc:	ff cf       	rjmp	.-2      	; 0x25cc <__stop_program>


gpib_004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000208c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000402  00800060  0000208c  00002100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010c  00800462  0000248e  00002502  2**0
                  ALLOC
  3 .stab         00004584  00000000  00000000  00002504  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000022b1  00000000  00000000  00006a88  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 72 0e 	jmp	0x1ce4	; 0x1ce4 <__vector_7>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__vector_13>
      38:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__vector_14>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000054 <__c.1957>:
      54:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
      64:	65 72 72 6f 72 3a 20 00                             error: .

0000006c <__c.1955>:
      6c:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
      7c:	6f 72 3a 20 00                                      or: .

00000081 <__c.1953>:
      81:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
      91:	3a 20 00                                            : .

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	14 e0       	ldi	r17, 0x04	; 4
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	ec e8       	ldi	r30, 0x8C	; 140
      a8:	f0 e2       	ldi	r31, 0x20	; 32
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
      b0:	a2 36       	cpi	r26, 0x62	; 98
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>

000000b6 <__do_clear_bss>:
      b6:	15 e0       	ldi	r17, 0x05	; 5
      b8:	a2 e6       	ldi	r26, 0x62	; 98
      ba:	b4 e0       	ldi	r27, 0x04	; 4
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	ae 36       	cpi	r26, 0x6E	; 110
      c2:	b1 07       	cpc	r27, r17
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <main>
      ca:	0c 94 44 10 	jmp	0x2088	; 0x2088 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000d2 <atoi>:
      d2:	fc 01       	movw	r30, r24
      d4:	88 27       	eor	r24, r24
      d6:	99 27       	eor	r25, r25
      d8:	e8 94       	clt
      da:	21 91       	ld	r18, Z+
      dc:	20 32       	cpi	r18, 0x20	; 32
      de:	e9 f3       	breq	.-6      	; 0xda <atoi+0x8>
      e0:	29 30       	cpi	r18, 0x09	; 9
      e2:	10 f0       	brcs	.+4      	; 0xe8 <atoi+0x16>
      e4:	2e 30       	cpi	r18, 0x0E	; 14
      e6:	c8 f3       	brcs	.-14     	; 0xda <atoi+0x8>
      e8:	2b 32       	cpi	r18, 0x2B	; 43
      ea:	41 f0       	breq	.+16     	; 0xfc <atoi+0x2a>
      ec:	2d 32       	cpi	r18, 0x2D	; 45
      ee:	39 f4       	brne	.+14     	; 0xfe <atoi+0x2c>
      f0:	68 94       	set
      f2:	04 c0       	rjmp	.+8      	; 0xfc <atoi+0x2a>
      f4:	0e 94 9b 00 	call	0x136	; 0x136 <__mulhi_const_10>
      f8:	82 0f       	add	r24, r18
      fa:	91 1d       	adc	r25, r1
      fc:	21 91       	ld	r18, Z+
      fe:	20 53       	subi	r18, 0x30	; 48
     100:	2a 30       	cpi	r18, 0x0A	; 10
     102:	c0 f3       	brcs	.-16     	; 0xf4 <atoi+0x22>
     104:	1e f4       	brtc	.+6      	; 0x10c <atoi+0x3a>
     106:	90 95       	com	r25
     108:	81 95       	neg	r24
     10a:	9f 4f       	sbci	r25, 0xFF	; 255
     10c:	08 95       	ret

0000010e <strchr>:
     10e:	fc 01       	movw	r30, r24
     110:	81 91       	ld	r24, Z+
     112:	86 17       	cp	r24, r22
     114:	21 f0       	breq	.+8      	; 0x11e <strchr+0x10>
     116:	88 23       	and	r24, r24
     118:	d9 f7       	brne	.-10     	; 0x110 <strchr+0x2>
     11a:	99 27       	eor	r25, r25
     11c:	08 95       	ret
     11e:	31 97       	sbiw	r30, 0x01	; 1
     120:	cf 01       	movw	r24, r30
     122:	08 95       	ret

00000124 <strlen>:
     124:	fc 01       	movw	r30, r24
     126:	01 90       	ld	r0, Z+
     128:	00 20       	and	r0, r0
     12a:	e9 f7       	brne	.-6      	; 0x126 <strlen+0x2>
     12c:	80 95       	com	r24
     12e:	90 95       	com	r25
     130:	8e 0f       	add	r24, r30
     132:	9f 1f       	adc	r25, r31
     134:	08 95       	ret

00000136 <__mulhi_const_10>:
     136:	7a e0       	ldi	r23, 0x0A	; 10
     138:	97 9f       	mul	r25, r23
     13a:	90 2d       	mov	r25, r0
     13c:	87 9f       	mul	r24, r23
     13e:	80 2d       	mov	r24, r0
     140:	91 0d       	add	r25, r1
     142:	11 24       	eor	r1, r1
     144:	08 95       	ret

00000146 <sprintf>:
     146:	ae e0       	ldi	r26, 0x0E	; 14
     148:	b0 e0       	ldi	r27, 0x00	; 0
     14a:	e9 ea       	ldi	r30, 0xA9	; 169
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__prologue_saves__+0x1c>
     152:	0d 89       	ldd	r16, Y+21	; 0x15
     154:	1e 89       	ldd	r17, Y+22	; 0x16
     156:	86 e0       	ldi	r24, 0x06	; 6
     158:	8c 83       	std	Y+4, r24	; 0x04
     15a:	1a 83       	std	Y+2, r17	; 0x02
     15c:	09 83       	std	Y+1, r16	; 0x01
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	9f e7       	ldi	r25, 0x7F	; 127
     162:	9e 83       	std	Y+6, r25	; 0x06
     164:	8d 83       	std	Y+5, r24	; 0x05
     166:	9e 01       	movw	r18, r28
     168:	27 5e       	subi	r18, 0xE7	; 231
     16a:	3f 4f       	sbci	r19, 0xFF	; 255
     16c:	ce 01       	movw	r24, r28
     16e:	01 96       	adiw	r24, 0x01	; 1
     170:	6f 89       	ldd	r22, Y+23	; 0x17
     172:	78 8d       	ldd	r23, Y+24	; 0x18
     174:	a9 01       	movw	r20, r18
     176:	0e 94 c7 00 	call	0x18e	; 0x18e <vfprintf>
     17a:	2f 81       	ldd	r18, Y+7	; 0x07
     17c:	38 85       	ldd	r19, Y+8	; 0x08
     17e:	02 0f       	add	r16, r18
     180:	13 1f       	adc	r17, r19
     182:	f8 01       	movw	r30, r16
     184:	10 82       	st	Z, r1
     186:	2e 96       	adiw	r28, 0x0e	; 14
     188:	e4 e0       	ldi	r30, 0x04	; 4
     18a:	0c 94 37 10 	jmp	0x206e	; 0x206e <__epilogue_restores__+0x1c>

0000018e <vfprintf>:
     18e:	ab e0       	ldi	r26, 0x0B	; 11
     190:	b0 e0       	ldi	r27, 0x00	; 0
     192:	ed ec       	ldi	r30, 0xCD	; 205
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__prologue_saves__>
     19a:	3c 01       	movw	r6, r24
     19c:	2b 01       	movw	r4, r22
     19e:	5a 01       	movw	r10, r20
     1a0:	fc 01       	movw	r30, r24
     1a2:	17 82       	std	Z+7, r1	; 0x07
     1a4:	16 82       	std	Z+6, r1	; 0x06
     1a6:	83 81       	ldd	r24, Z+3	; 0x03
     1a8:	81 fd       	sbrc	r24, 1
     1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <vfprintf+0x24>
     1ac:	6f ef       	ldi	r22, 0xFF	; 255
     1ae:	7f ef       	ldi	r23, 0xFF	; 255
     1b0:	c6 c1       	rjmp	.+908    	; 0x53e <vfprintf+0x3b0>
     1b2:	9a e0       	ldi	r25, 0x0A	; 10
     1b4:	89 2e       	mov	r8, r25
     1b6:	1e 01       	movw	r2, r28
     1b8:	08 94       	sec
     1ba:	21 1c       	adc	r2, r1
     1bc:	31 1c       	adc	r3, r1
     1be:	f3 01       	movw	r30, r6
     1c0:	23 81       	ldd	r18, Z+3	; 0x03
     1c2:	f2 01       	movw	r30, r4
     1c4:	23 fd       	sbrc	r18, 3
     1c6:	85 91       	lpm	r24, Z+
     1c8:	23 ff       	sbrs	r18, 3
     1ca:	81 91       	ld	r24, Z+
     1cc:	2f 01       	movw	r4, r30
     1ce:	88 23       	and	r24, r24
     1d0:	09 f4       	brne	.+2      	; 0x1d4 <vfprintf+0x46>
     1d2:	b2 c1       	rjmp	.+868    	; 0x538 <vfprintf+0x3aa>
     1d4:	85 32       	cpi	r24, 0x25	; 37
     1d6:	39 f4       	brne	.+14     	; 0x1e6 <vfprintf+0x58>
     1d8:	23 fd       	sbrc	r18, 3
     1da:	85 91       	lpm	r24, Z+
     1dc:	23 ff       	sbrs	r18, 3
     1de:	81 91       	ld	r24, Z+
     1e0:	2f 01       	movw	r4, r30
     1e2:	85 32       	cpi	r24, 0x25	; 37
     1e4:	29 f4       	brne	.+10     	; 0x1f0 <vfprintf+0x62>
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	b3 01       	movw	r22, r6
     1ea:	0e 94 ba 02 	call	0x574	; 0x574 <fputc>
     1ee:	e7 cf       	rjmp	.-50     	; 0x1be <vfprintf+0x30>
     1f0:	98 2f       	mov	r25, r24
     1f2:	ff 24       	eor	r15, r15
     1f4:	ee 24       	eor	r14, r14
     1f6:	99 24       	eor	r9, r9
     1f8:	ff e1       	ldi	r31, 0x1F	; 31
     1fa:	ff 15       	cp	r31, r15
     1fc:	d0 f0       	brcs	.+52     	; 0x232 <vfprintf+0xa4>
     1fe:	9b 32       	cpi	r25, 0x2B	; 43
     200:	69 f0       	breq	.+26     	; 0x21c <vfprintf+0x8e>
     202:	9c 32       	cpi	r25, 0x2C	; 44
     204:	28 f4       	brcc	.+10     	; 0x210 <vfprintf+0x82>
     206:	90 32       	cpi	r25, 0x20	; 32
     208:	59 f0       	breq	.+22     	; 0x220 <vfprintf+0x92>
     20a:	93 32       	cpi	r25, 0x23	; 35
     20c:	91 f4       	brne	.+36     	; 0x232 <vfprintf+0xa4>
     20e:	0e c0       	rjmp	.+28     	; 0x22c <vfprintf+0x9e>
     210:	9d 32       	cpi	r25, 0x2D	; 45
     212:	49 f0       	breq	.+18     	; 0x226 <vfprintf+0x98>
     214:	90 33       	cpi	r25, 0x30	; 48
     216:	69 f4       	brne	.+26     	; 0x232 <vfprintf+0xa4>
     218:	41 e0       	ldi	r20, 0x01	; 1
     21a:	24 c0       	rjmp	.+72     	; 0x264 <vfprintf+0xd6>
     21c:	52 e0       	ldi	r21, 0x02	; 2
     21e:	f5 2a       	or	r15, r21
     220:	84 e0       	ldi	r24, 0x04	; 4
     222:	f8 2a       	or	r15, r24
     224:	28 c0       	rjmp	.+80     	; 0x276 <vfprintf+0xe8>
     226:	98 e0       	ldi	r25, 0x08	; 8
     228:	f9 2a       	or	r15, r25
     22a:	25 c0       	rjmp	.+74     	; 0x276 <vfprintf+0xe8>
     22c:	e0 e1       	ldi	r30, 0x10	; 16
     22e:	fe 2a       	or	r15, r30
     230:	22 c0       	rjmp	.+68     	; 0x276 <vfprintf+0xe8>
     232:	f7 fc       	sbrc	r15, 7
     234:	29 c0       	rjmp	.+82     	; 0x288 <vfprintf+0xfa>
     236:	89 2f       	mov	r24, r25
     238:	80 53       	subi	r24, 0x30	; 48
     23a:	8a 30       	cpi	r24, 0x0A	; 10
     23c:	70 f4       	brcc	.+28     	; 0x25a <vfprintf+0xcc>
     23e:	f6 fe       	sbrs	r15, 6
     240:	05 c0       	rjmp	.+10     	; 0x24c <vfprintf+0xbe>
     242:	98 9c       	mul	r9, r8
     244:	90 2c       	mov	r9, r0
     246:	11 24       	eor	r1, r1
     248:	98 0e       	add	r9, r24
     24a:	15 c0       	rjmp	.+42     	; 0x276 <vfprintf+0xe8>
     24c:	e8 9c       	mul	r14, r8
     24e:	e0 2c       	mov	r14, r0
     250:	11 24       	eor	r1, r1
     252:	e8 0e       	add	r14, r24
     254:	f0 e2       	ldi	r31, 0x20	; 32
     256:	ff 2a       	or	r15, r31
     258:	0e c0       	rjmp	.+28     	; 0x276 <vfprintf+0xe8>
     25a:	9e 32       	cpi	r25, 0x2E	; 46
     25c:	29 f4       	brne	.+10     	; 0x268 <vfprintf+0xda>
     25e:	f6 fc       	sbrc	r15, 6
     260:	6b c1       	rjmp	.+726    	; 0x538 <vfprintf+0x3aa>
     262:	40 e4       	ldi	r20, 0x40	; 64
     264:	f4 2a       	or	r15, r20
     266:	07 c0       	rjmp	.+14     	; 0x276 <vfprintf+0xe8>
     268:	9c 36       	cpi	r25, 0x6C	; 108
     26a:	19 f4       	brne	.+6      	; 0x272 <vfprintf+0xe4>
     26c:	50 e8       	ldi	r21, 0x80	; 128
     26e:	f5 2a       	or	r15, r21
     270:	02 c0       	rjmp	.+4      	; 0x276 <vfprintf+0xe8>
     272:	98 36       	cpi	r25, 0x68	; 104
     274:	49 f4       	brne	.+18     	; 0x288 <vfprintf+0xfa>
     276:	f2 01       	movw	r30, r4
     278:	23 fd       	sbrc	r18, 3
     27a:	95 91       	lpm	r25, Z+
     27c:	23 ff       	sbrs	r18, 3
     27e:	91 91       	ld	r25, Z+
     280:	2f 01       	movw	r4, r30
     282:	99 23       	and	r25, r25
     284:	09 f0       	breq	.+2      	; 0x288 <vfprintf+0xfa>
     286:	b8 cf       	rjmp	.-144    	; 0x1f8 <vfprintf+0x6a>
     288:	89 2f       	mov	r24, r25
     28a:	85 54       	subi	r24, 0x45	; 69
     28c:	83 30       	cpi	r24, 0x03	; 3
     28e:	18 f0       	brcs	.+6      	; 0x296 <vfprintf+0x108>
     290:	80 52       	subi	r24, 0x20	; 32
     292:	83 30       	cpi	r24, 0x03	; 3
     294:	38 f4       	brcc	.+14     	; 0x2a4 <vfprintf+0x116>
     296:	44 e0       	ldi	r20, 0x04	; 4
     298:	50 e0       	ldi	r21, 0x00	; 0
     29a:	a4 0e       	add	r10, r20
     29c:	b5 1e       	adc	r11, r21
     29e:	5f e3       	ldi	r21, 0x3F	; 63
     2a0:	59 83       	std	Y+1, r21	; 0x01
     2a2:	0f c0       	rjmp	.+30     	; 0x2c2 <vfprintf+0x134>
     2a4:	93 36       	cpi	r25, 0x63	; 99
     2a6:	31 f0       	breq	.+12     	; 0x2b4 <vfprintf+0x126>
     2a8:	93 37       	cpi	r25, 0x73	; 115
     2aa:	79 f0       	breq	.+30     	; 0x2ca <vfprintf+0x13c>
     2ac:	93 35       	cpi	r25, 0x53	; 83
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <vfprintf+0x124>
     2b0:	56 c0       	rjmp	.+172    	; 0x35e <vfprintf+0x1d0>
     2b2:	20 c0       	rjmp	.+64     	; 0x2f4 <vfprintf+0x166>
     2b4:	f5 01       	movw	r30, r10
     2b6:	80 81       	ld	r24, Z
     2b8:	89 83       	std	Y+1, r24	; 0x01
     2ba:	42 e0       	ldi	r20, 0x02	; 2
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	a4 0e       	add	r10, r20
     2c0:	b5 1e       	adc	r11, r21
     2c2:	61 01       	movw	r12, r2
     2c4:	01 e0       	ldi	r16, 0x01	; 1
     2c6:	10 e0       	ldi	r17, 0x00	; 0
     2c8:	12 c0       	rjmp	.+36     	; 0x2ee <vfprintf+0x160>
     2ca:	f5 01       	movw	r30, r10
     2cc:	c0 80       	ld	r12, Z
     2ce:	d1 80       	ldd	r13, Z+1	; 0x01
     2d0:	f6 fc       	sbrc	r15, 6
     2d2:	03 c0       	rjmp	.+6      	; 0x2da <vfprintf+0x14c>
     2d4:	6f ef       	ldi	r22, 0xFF	; 255
     2d6:	7f ef       	ldi	r23, 0xFF	; 255
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <vfprintf+0x150>
     2da:	69 2d       	mov	r22, r9
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	42 e0       	ldi	r20, 0x02	; 2
     2e0:	50 e0       	ldi	r21, 0x00	; 0
     2e2:	a4 0e       	add	r10, r20
     2e4:	b5 1e       	adc	r11, r21
     2e6:	c6 01       	movw	r24, r12
     2e8:	0e 94 af 02 	call	0x55e	; 0x55e <strnlen>
     2ec:	8c 01       	movw	r16, r24
     2ee:	5f e7       	ldi	r21, 0x7F	; 127
     2f0:	f5 22       	and	r15, r21
     2f2:	14 c0       	rjmp	.+40     	; 0x31c <vfprintf+0x18e>
     2f4:	f5 01       	movw	r30, r10
     2f6:	c0 80       	ld	r12, Z
     2f8:	d1 80       	ldd	r13, Z+1	; 0x01
     2fa:	f6 fc       	sbrc	r15, 6
     2fc:	03 c0       	rjmp	.+6      	; 0x304 <vfprintf+0x176>
     2fe:	6f ef       	ldi	r22, 0xFF	; 255
     300:	7f ef       	ldi	r23, 0xFF	; 255
     302:	02 c0       	rjmp	.+4      	; 0x308 <vfprintf+0x17a>
     304:	69 2d       	mov	r22, r9
     306:	70 e0       	ldi	r23, 0x00	; 0
     308:	42 e0       	ldi	r20, 0x02	; 2
     30a:	50 e0       	ldi	r21, 0x00	; 0
     30c:	a4 0e       	add	r10, r20
     30e:	b5 1e       	adc	r11, r21
     310:	c6 01       	movw	r24, r12
     312:	0e 94 a4 02 	call	0x548	; 0x548 <strnlen_P>
     316:	8c 01       	movw	r16, r24
     318:	50 e8       	ldi	r21, 0x80	; 128
     31a:	f5 2a       	or	r15, r21
     31c:	f3 fe       	sbrs	r15, 3
     31e:	07 c0       	rjmp	.+14     	; 0x32e <vfprintf+0x1a0>
     320:	1a c0       	rjmp	.+52     	; 0x356 <vfprintf+0x1c8>
     322:	80 e2       	ldi	r24, 0x20	; 32
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	b3 01       	movw	r22, r6
     328:	0e 94 ba 02 	call	0x574	; 0x574 <fputc>
     32c:	ea 94       	dec	r14
     32e:	8e 2d       	mov	r24, r14
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	08 17       	cp	r16, r24
     334:	19 07       	cpc	r17, r25
     336:	a8 f3       	brcs	.-22     	; 0x322 <vfprintf+0x194>
     338:	0e c0       	rjmp	.+28     	; 0x356 <vfprintf+0x1c8>
     33a:	f6 01       	movw	r30, r12
     33c:	f7 fc       	sbrc	r15, 7
     33e:	85 91       	lpm	r24, Z+
     340:	f7 fe       	sbrs	r15, 7
     342:	81 91       	ld	r24, Z+
     344:	6f 01       	movw	r12, r30
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	b3 01       	movw	r22, r6
     34a:	0e 94 ba 02 	call	0x574	; 0x574 <fputc>
     34e:	e1 10       	cpse	r14, r1
     350:	ea 94       	dec	r14
     352:	01 50       	subi	r16, 0x01	; 1
     354:	10 40       	sbci	r17, 0x00	; 0
     356:	01 15       	cp	r16, r1
     358:	11 05       	cpc	r17, r1
     35a:	79 f7       	brne	.-34     	; 0x33a <vfprintf+0x1ac>
     35c:	ea c0       	rjmp	.+468    	; 0x532 <vfprintf+0x3a4>
     35e:	94 36       	cpi	r25, 0x64	; 100
     360:	11 f0       	breq	.+4      	; 0x366 <vfprintf+0x1d8>
     362:	99 36       	cpi	r25, 0x69	; 105
     364:	69 f5       	brne	.+90     	; 0x3c0 <vfprintf+0x232>
     366:	f7 fe       	sbrs	r15, 7
     368:	08 c0       	rjmp	.+16     	; 0x37a <vfprintf+0x1ec>
     36a:	f5 01       	movw	r30, r10
     36c:	20 81       	ld	r18, Z
     36e:	31 81       	ldd	r19, Z+1	; 0x01
     370:	42 81       	ldd	r20, Z+2	; 0x02
     372:	53 81       	ldd	r21, Z+3	; 0x03
     374:	84 e0       	ldi	r24, 0x04	; 4
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0a c0       	rjmp	.+20     	; 0x38e <vfprintf+0x200>
     37a:	f5 01       	movw	r30, r10
     37c:	80 81       	ld	r24, Z
     37e:	91 81       	ldd	r25, Z+1	; 0x01
     380:	9c 01       	movw	r18, r24
     382:	44 27       	eor	r20, r20
     384:	37 fd       	sbrc	r19, 7
     386:	40 95       	com	r20
     388:	54 2f       	mov	r21, r20
     38a:	82 e0       	ldi	r24, 0x02	; 2
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	a8 0e       	add	r10, r24
     390:	b9 1e       	adc	r11, r25
     392:	9f e6       	ldi	r25, 0x6F	; 111
     394:	f9 22       	and	r15, r25
     396:	57 ff       	sbrs	r21, 7
     398:	09 c0       	rjmp	.+18     	; 0x3ac <vfprintf+0x21e>
     39a:	50 95       	com	r21
     39c:	40 95       	com	r20
     39e:	30 95       	com	r19
     3a0:	21 95       	neg	r18
     3a2:	3f 4f       	sbci	r19, 0xFF	; 255
     3a4:	4f 4f       	sbci	r20, 0xFF	; 255
     3a6:	5f 4f       	sbci	r21, 0xFF	; 255
     3a8:	e0 e8       	ldi	r30, 0x80	; 128
     3aa:	fe 2a       	or	r15, r30
     3ac:	ca 01       	movw	r24, r20
     3ae:	b9 01       	movw	r22, r18
     3b0:	a1 01       	movw	r20, r2
     3b2:	2a e0       	ldi	r18, 0x0A	; 10
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__ultoa_invert>
     3ba:	d8 2e       	mov	r13, r24
     3bc:	d2 18       	sub	r13, r2
     3be:	40 c0       	rjmp	.+128    	; 0x440 <vfprintf+0x2b2>
     3c0:	95 37       	cpi	r25, 0x75	; 117
     3c2:	29 f4       	brne	.+10     	; 0x3ce <vfprintf+0x240>
     3c4:	1f 2d       	mov	r17, r15
     3c6:	1f 7e       	andi	r17, 0xEF	; 239
     3c8:	2a e0       	ldi	r18, 0x0A	; 10
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	1d c0       	rjmp	.+58     	; 0x408 <vfprintf+0x27a>
     3ce:	1f 2d       	mov	r17, r15
     3d0:	19 7f       	andi	r17, 0xF9	; 249
     3d2:	9f 36       	cpi	r25, 0x6F	; 111
     3d4:	61 f0       	breq	.+24     	; 0x3ee <vfprintf+0x260>
     3d6:	90 37       	cpi	r25, 0x70	; 112
     3d8:	20 f4       	brcc	.+8      	; 0x3e2 <vfprintf+0x254>
     3da:	98 35       	cpi	r25, 0x58	; 88
     3dc:	09 f0       	breq	.+2      	; 0x3e0 <vfprintf+0x252>
     3de:	ac c0       	rjmp	.+344    	; 0x538 <vfprintf+0x3aa>
     3e0:	0f c0       	rjmp	.+30     	; 0x400 <vfprintf+0x272>
     3e2:	90 37       	cpi	r25, 0x70	; 112
     3e4:	39 f0       	breq	.+14     	; 0x3f4 <vfprintf+0x266>
     3e6:	98 37       	cpi	r25, 0x78	; 120
     3e8:	09 f0       	breq	.+2      	; 0x3ec <vfprintf+0x25e>
     3ea:	a6 c0       	rjmp	.+332    	; 0x538 <vfprintf+0x3aa>
     3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <vfprintf+0x268>
     3ee:	28 e0       	ldi	r18, 0x08	; 8
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	0a c0       	rjmp	.+20     	; 0x408 <vfprintf+0x27a>
     3f4:	10 61       	ori	r17, 0x10	; 16
     3f6:	14 fd       	sbrc	r17, 4
     3f8:	14 60       	ori	r17, 0x04	; 4
     3fa:	20 e1       	ldi	r18, 0x10	; 16
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <vfprintf+0x27a>
     400:	14 fd       	sbrc	r17, 4
     402:	16 60       	ori	r17, 0x06	; 6
     404:	20 e1       	ldi	r18, 0x10	; 16
     406:	32 e0       	ldi	r19, 0x02	; 2
     408:	17 ff       	sbrs	r17, 7
     40a:	08 c0       	rjmp	.+16     	; 0x41c <vfprintf+0x28e>
     40c:	f5 01       	movw	r30, r10
     40e:	60 81       	ld	r22, Z
     410:	71 81       	ldd	r23, Z+1	; 0x01
     412:	82 81       	ldd	r24, Z+2	; 0x02
     414:	93 81       	ldd	r25, Z+3	; 0x03
     416:	44 e0       	ldi	r20, 0x04	; 4
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	08 c0       	rjmp	.+16     	; 0x42c <vfprintf+0x29e>
     41c:	f5 01       	movw	r30, r10
     41e:	80 81       	ld	r24, Z
     420:	91 81       	ldd	r25, Z+1	; 0x01
     422:	bc 01       	movw	r22, r24
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	42 e0       	ldi	r20, 0x02	; 2
     42a:	50 e0       	ldi	r21, 0x00	; 0
     42c:	a4 0e       	add	r10, r20
     42e:	b5 1e       	adc	r11, r21
     430:	a1 01       	movw	r20, r2
     432:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__ultoa_invert>
     436:	d8 2e       	mov	r13, r24
     438:	d2 18       	sub	r13, r2
     43a:	8f e7       	ldi	r24, 0x7F	; 127
     43c:	f8 2e       	mov	r15, r24
     43e:	f1 22       	and	r15, r17
     440:	f6 fe       	sbrs	r15, 6
     442:	0b c0       	rjmp	.+22     	; 0x45a <vfprintf+0x2cc>
     444:	5e ef       	ldi	r21, 0xFE	; 254
     446:	f5 22       	and	r15, r21
     448:	d9 14       	cp	r13, r9
     44a:	38 f4       	brcc	.+14     	; 0x45a <vfprintf+0x2cc>
     44c:	f4 fe       	sbrs	r15, 4
     44e:	07 c0       	rjmp	.+14     	; 0x45e <vfprintf+0x2d0>
     450:	f2 fc       	sbrc	r15, 2
     452:	05 c0       	rjmp	.+10     	; 0x45e <vfprintf+0x2d0>
     454:	8f ee       	ldi	r24, 0xEF	; 239
     456:	f8 22       	and	r15, r24
     458:	02 c0       	rjmp	.+4      	; 0x45e <vfprintf+0x2d0>
     45a:	1d 2d       	mov	r17, r13
     45c:	01 c0       	rjmp	.+2      	; 0x460 <vfprintf+0x2d2>
     45e:	19 2d       	mov	r17, r9
     460:	f4 fe       	sbrs	r15, 4
     462:	0d c0       	rjmp	.+26     	; 0x47e <vfprintf+0x2f0>
     464:	fe 01       	movw	r30, r28
     466:	ed 0d       	add	r30, r13
     468:	f1 1d       	adc	r31, r1
     46a:	80 81       	ld	r24, Z
     46c:	80 33       	cpi	r24, 0x30	; 48
     46e:	19 f4       	brne	.+6      	; 0x476 <vfprintf+0x2e8>
     470:	99 ee       	ldi	r25, 0xE9	; 233
     472:	f9 22       	and	r15, r25
     474:	08 c0       	rjmp	.+16     	; 0x486 <vfprintf+0x2f8>
     476:	1f 5f       	subi	r17, 0xFF	; 255
     478:	f2 fe       	sbrs	r15, 2
     47a:	05 c0       	rjmp	.+10     	; 0x486 <vfprintf+0x2f8>
     47c:	03 c0       	rjmp	.+6      	; 0x484 <vfprintf+0x2f6>
     47e:	8f 2d       	mov	r24, r15
     480:	86 78       	andi	r24, 0x86	; 134
     482:	09 f0       	breq	.+2      	; 0x486 <vfprintf+0x2f8>
     484:	1f 5f       	subi	r17, 0xFF	; 255
     486:	0f 2d       	mov	r16, r15
     488:	f3 fc       	sbrc	r15, 3
     48a:	14 c0       	rjmp	.+40     	; 0x4b4 <vfprintf+0x326>
     48c:	f0 fe       	sbrs	r15, 0
     48e:	0f c0       	rjmp	.+30     	; 0x4ae <vfprintf+0x320>
     490:	1e 15       	cp	r17, r14
     492:	10 f0       	brcs	.+4      	; 0x498 <vfprintf+0x30a>
     494:	9d 2c       	mov	r9, r13
     496:	0b c0       	rjmp	.+22     	; 0x4ae <vfprintf+0x320>
     498:	9d 2c       	mov	r9, r13
     49a:	9e 0c       	add	r9, r14
     49c:	91 1a       	sub	r9, r17
     49e:	1e 2d       	mov	r17, r14
     4a0:	06 c0       	rjmp	.+12     	; 0x4ae <vfprintf+0x320>
     4a2:	80 e2       	ldi	r24, 0x20	; 32
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	b3 01       	movw	r22, r6
     4a8:	0e 94 ba 02 	call	0x574	; 0x574 <fputc>
     4ac:	1f 5f       	subi	r17, 0xFF	; 255
     4ae:	1e 15       	cp	r17, r14
     4b0:	c0 f3       	brcs	.-16     	; 0x4a2 <vfprintf+0x314>
     4b2:	04 c0       	rjmp	.+8      	; 0x4bc <vfprintf+0x32e>
     4b4:	1e 15       	cp	r17, r14
     4b6:	10 f4       	brcc	.+4      	; 0x4bc <vfprintf+0x32e>
     4b8:	e1 1a       	sub	r14, r17
     4ba:	01 c0       	rjmp	.+2      	; 0x4be <vfprintf+0x330>
     4bc:	ee 24       	eor	r14, r14
     4be:	04 ff       	sbrs	r16, 4
     4c0:	0f c0       	rjmp	.+30     	; 0x4e0 <vfprintf+0x352>
     4c2:	80 e3       	ldi	r24, 0x30	; 48
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	b3 01       	movw	r22, r6
     4c8:	0e 94 ba 02 	call	0x574	; 0x574 <fputc>
     4cc:	02 ff       	sbrs	r16, 2
     4ce:	1d c0       	rjmp	.+58     	; 0x50a <vfprintf+0x37c>
     4d0:	01 fd       	sbrc	r16, 1
     4d2:	03 c0       	rjmp	.+6      	; 0x4da <vfprintf+0x34c>
     4d4:	88 e7       	ldi	r24, 0x78	; 120
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e c0       	rjmp	.+28     	; 0x4f6 <vfprintf+0x368>
     4da:	88 e5       	ldi	r24, 0x58	; 88
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0b c0       	rjmp	.+22     	; 0x4f6 <vfprintf+0x368>
     4e0:	80 2f       	mov	r24, r16
     4e2:	86 78       	andi	r24, 0x86	; 134
     4e4:	91 f0       	breq	.+36     	; 0x50a <vfprintf+0x37c>
     4e6:	01 ff       	sbrs	r16, 1
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <vfprintf+0x360>
     4ea:	8b e2       	ldi	r24, 0x2B	; 43
     4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <vfprintf+0x362>
     4ee:	80 e2       	ldi	r24, 0x20	; 32
     4f0:	f7 fc       	sbrc	r15, 7
     4f2:	8d e2       	ldi	r24, 0x2D	; 45
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	b3 01       	movw	r22, r6
     4f8:	0e 94 ba 02 	call	0x574	; 0x574 <fputc>
     4fc:	06 c0       	rjmp	.+12     	; 0x50a <vfprintf+0x37c>
     4fe:	80 e3       	ldi	r24, 0x30	; 48
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	b3 01       	movw	r22, r6
     504:	0e 94 ba 02 	call	0x574	; 0x574 <fputc>
     508:	9a 94       	dec	r9
     50a:	d9 14       	cp	r13, r9
     50c:	c0 f3       	brcs	.-16     	; 0x4fe <vfprintf+0x370>
     50e:	da 94       	dec	r13
     510:	f1 01       	movw	r30, r2
     512:	ed 0d       	add	r30, r13
     514:	f1 1d       	adc	r31, r1
     516:	80 81       	ld	r24, Z
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	b3 01       	movw	r22, r6
     51c:	0e 94 ba 02 	call	0x574	; 0x574 <fputc>
     520:	dd 20       	and	r13, r13
     522:	a9 f7       	brne	.-22     	; 0x50e <vfprintf+0x380>
     524:	06 c0       	rjmp	.+12     	; 0x532 <vfprintf+0x3a4>
     526:	80 e2       	ldi	r24, 0x20	; 32
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	b3 01       	movw	r22, r6
     52c:	0e 94 ba 02 	call	0x574	; 0x574 <fputc>
     530:	ea 94       	dec	r14
     532:	ee 20       	and	r14, r14
     534:	c1 f7       	brne	.-16     	; 0x526 <vfprintf+0x398>
     536:	43 ce       	rjmp	.-890    	; 0x1be <vfprintf+0x30>
     538:	f3 01       	movw	r30, r6
     53a:	66 81       	ldd	r22, Z+6	; 0x06
     53c:	77 81       	ldd	r23, Z+7	; 0x07
     53e:	cb 01       	movw	r24, r22
     540:	2b 96       	adiw	r28, 0x0b	; 11
     542:	e2 e1       	ldi	r30, 0x12	; 18
     544:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__epilogue_restores__>

00000548 <strnlen_P>:
     548:	fc 01       	movw	r30, r24
     54a:	05 90       	lpm	r0, Z+
     54c:	61 50       	subi	r22, 0x01	; 1
     54e:	70 40       	sbci	r23, 0x00	; 0
     550:	01 10       	cpse	r0, r1
     552:	d8 f7       	brcc	.-10     	; 0x54a <strnlen_P+0x2>
     554:	80 95       	com	r24
     556:	90 95       	com	r25
     558:	8e 0f       	add	r24, r30
     55a:	9f 1f       	adc	r25, r31
     55c:	08 95       	ret

0000055e <strnlen>:
     55e:	fc 01       	movw	r30, r24
     560:	61 50       	subi	r22, 0x01	; 1
     562:	70 40       	sbci	r23, 0x00	; 0
     564:	01 90       	ld	r0, Z+
     566:	01 10       	cpse	r0, r1
     568:	d8 f7       	brcc	.-10     	; 0x560 <strnlen+0x2>
     56a:	80 95       	com	r24
     56c:	90 95       	com	r25
     56e:	8e 0f       	add	r24, r30
     570:	9f 1f       	adc	r25, r31
     572:	08 95       	ret

00000574 <fputc>:
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	8c 01       	movw	r16, r24
     57e:	eb 01       	movw	r28, r22
     580:	8b 81       	ldd	r24, Y+3	; 0x03
     582:	81 ff       	sbrs	r24, 1
     584:	1b c0       	rjmp	.+54     	; 0x5bc <fputc+0x48>
     586:	82 ff       	sbrs	r24, 2
     588:	0d c0       	rjmp	.+26     	; 0x5a4 <fputc+0x30>
     58a:	2e 81       	ldd	r18, Y+6	; 0x06
     58c:	3f 81       	ldd	r19, Y+7	; 0x07
     58e:	8c 81       	ldd	r24, Y+4	; 0x04
     590:	9d 81       	ldd	r25, Y+5	; 0x05
     592:	28 17       	cp	r18, r24
     594:	39 07       	cpc	r19, r25
     596:	64 f4       	brge	.+24     	; 0x5b0 <fputc+0x3c>
     598:	e8 81       	ld	r30, Y
     59a:	f9 81       	ldd	r31, Y+1	; 0x01
     59c:	01 93       	st	Z+, r16
     59e:	f9 83       	std	Y+1, r31	; 0x01
     5a0:	e8 83       	st	Y, r30
     5a2:	06 c0       	rjmp	.+12     	; 0x5b0 <fputc+0x3c>
     5a4:	e8 85       	ldd	r30, Y+8	; 0x08
     5a6:	f9 85       	ldd	r31, Y+9	; 0x09
     5a8:	80 2f       	mov	r24, r16
     5aa:	09 95       	icall
     5ac:	89 2b       	or	r24, r25
     5ae:	31 f4       	brne	.+12     	; 0x5bc <fputc+0x48>
     5b0:	8e 81       	ldd	r24, Y+6	; 0x06
     5b2:	9f 81       	ldd	r25, Y+7	; 0x07
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	9f 83       	std	Y+7, r25	; 0x07
     5b8:	8e 83       	std	Y+6, r24	; 0x06
     5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <fputc+0x4c>
     5bc:	0f ef       	ldi	r16, 0xFF	; 255
     5be:	1f ef       	ldi	r17, 0xFF	; 255
     5c0:	c8 01       	movw	r24, r16
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	08 95       	ret

000005cc <__ultoa_invert>:
     5cc:	fa 01       	movw	r30, r20
     5ce:	aa 27       	eor	r26, r26
     5d0:	28 30       	cpi	r18, 0x08	; 8
     5d2:	51 f1       	breq	.+84     	; 0x628 <__ultoa_invert+0x5c>
     5d4:	20 31       	cpi	r18, 0x10	; 16
     5d6:	81 f1       	breq	.+96     	; 0x638 <__ultoa_invert+0x6c>
     5d8:	e8 94       	clt
     5da:	6f 93       	push	r22
     5dc:	6e 7f       	andi	r22, 0xFE	; 254
     5de:	6e 5f       	subi	r22, 0xFE	; 254
     5e0:	7f 4f       	sbci	r23, 0xFF	; 255
     5e2:	8f 4f       	sbci	r24, 0xFF	; 255
     5e4:	9f 4f       	sbci	r25, 0xFF	; 255
     5e6:	af 4f       	sbci	r26, 0xFF	; 255
     5e8:	b1 e0       	ldi	r27, 0x01	; 1
     5ea:	3e d0       	rcall	.+124    	; 0x668 <__ultoa_invert+0x9c>
     5ec:	b4 e0       	ldi	r27, 0x04	; 4
     5ee:	3c d0       	rcall	.+120    	; 0x668 <__ultoa_invert+0x9c>
     5f0:	67 0f       	add	r22, r23
     5f2:	78 1f       	adc	r23, r24
     5f4:	89 1f       	adc	r24, r25
     5f6:	9a 1f       	adc	r25, r26
     5f8:	a1 1d       	adc	r26, r1
     5fa:	68 0f       	add	r22, r24
     5fc:	79 1f       	adc	r23, r25
     5fe:	8a 1f       	adc	r24, r26
     600:	91 1d       	adc	r25, r1
     602:	a1 1d       	adc	r26, r1
     604:	6a 0f       	add	r22, r26
     606:	71 1d       	adc	r23, r1
     608:	81 1d       	adc	r24, r1
     60a:	91 1d       	adc	r25, r1
     60c:	a1 1d       	adc	r26, r1
     60e:	20 d0       	rcall	.+64     	; 0x650 <__ultoa_invert+0x84>
     610:	09 f4       	brne	.+2      	; 0x614 <__ultoa_invert+0x48>
     612:	68 94       	set
     614:	3f 91       	pop	r19
     616:	2a e0       	ldi	r18, 0x0A	; 10
     618:	26 9f       	mul	r18, r22
     61a:	11 24       	eor	r1, r1
     61c:	30 19       	sub	r19, r0
     61e:	30 5d       	subi	r19, 0xD0	; 208
     620:	31 93       	st	Z+, r19
     622:	de f6       	brtc	.-74     	; 0x5da <__ultoa_invert+0xe>
     624:	cf 01       	movw	r24, r30
     626:	08 95       	ret
     628:	46 2f       	mov	r20, r22
     62a:	47 70       	andi	r20, 0x07	; 7
     62c:	40 5d       	subi	r20, 0xD0	; 208
     62e:	41 93       	st	Z+, r20
     630:	b3 e0       	ldi	r27, 0x03	; 3
     632:	0f d0       	rcall	.+30     	; 0x652 <__ultoa_invert+0x86>
     634:	c9 f7       	brne	.-14     	; 0x628 <__ultoa_invert+0x5c>
     636:	f6 cf       	rjmp	.-20     	; 0x624 <__ultoa_invert+0x58>
     638:	46 2f       	mov	r20, r22
     63a:	4f 70       	andi	r20, 0x0F	; 15
     63c:	40 5d       	subi	r20, 0xD0	; 208
     63e:	4a 33       	cpi	r20, 0x3A	; 58
     640:	18 f0       	brcs	.+6      	; 0x648 <__ultoa_invert+0x7c>
     642:	49 5d       	subi	r20, 0xD9	; 217
     644:	31 fd       	sbrc	r19, 1
     646:	40 52       	subi	r20, 0x20	; 32
     648:	41 93       	st	Z+, r20
     64a:	02 d0       	rcall	.+4      	; 0x650 <__ultoa_invert+0x84>
     64c:	a9 f7       	brne	.-22     	; 0x638 <__ultoa_invert+0x6c>
     64e:	ea cf       	rjmp	.-44     	; 0x624 <__ultoa_invert+0x58>
     650:	b4 e0       	ldi	r27, 0x04	; 4
     652:	a6 95       	lsr	r26
     654:	97 95       	ror	r25
     656:	87 95       	ror	r24
     658:	77 95       	ror	r23
     65a:	67 95       	ror	r22
     65c:	ba 95       	dec	r27
     65e:	c9 f7       	brne	.-14     	; 0x652 <__ultoa_invert+0x86>
     660:	00 97       	sbiw	r24, 0x00	; 0
     662:	61 05       	cpc	r22, r1
     664:	71 05       	cpc	r23, r1
     666:	08 95       	ret
     668:	9b 01       	movw	r18, r22
     66a:	ac 01       	movw	r20, r24
     66c:	0a 2e       	mov	r0, r26
     66e:	06 94       	lsr	r0
     670:	57 95       	ror	r21
     672:	47 95       	ror	r20
     674:	37 95       	ror	r19
     676:	27 95       	ror	r18
     678:	ba 95       	dec	r27
     67a:	c9 f7       	brne	.-14     	; 0x66e <__ultoa_invert+0xa2>
     67c:	62 0f       	add	r22, r18
     67e:	73 1f       	adc	r23, r19
     680:	84 1f       	adc	r24, r20
     682:	95 1f       	adc	r25, r21
     684:	a0 1d       	adc	r26, r0
     686:	08 95       	ret

00000688 <delay_ms>:
uchar cmd_buf[100];

/**
 * Some basic delay function
 */
void delay_ms(unsigned short ms) {
     688:	df 93       	push	r29
     68a:	cf 93       	push	r28
     68c:	00 d0       	rcall	.+0      	; 0x68e <delay_ms+0x6>
     68e:	00 d0       	rcall	.+0      	; 0x690 <delay_ms+0x8>
     690:	00 d0       	rcall	.+0      	; 0x692 <delay_ms+0xa>
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	9e 83       	std	Y+6, r25	; 0x06
     698:	8d 83       	std	Y+5, r24	; 0x05
	unsigned short outer1, outer2;
	outer1 = 200 * 12;
     69a:	80 e6       	ldi	r24, 0x60	; 96
     69c:	99 e0       	ldi	r25, 0x09	; 9
     69e:	9c 83       	std	Y+4, r25	; 0x04
     6a0:	8b 83       	std	Y+3, r24	; 0x03
     6a2:	1c c0       	rjmp	.+56     	; 0x6dc <delay_ms+0x54>

	while (outer1) {
		outer2 = 100;
     6a4:	84 e6       	ldi	r24, 0x64	; 100
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	9a 83       	std	Y+2, r25	; 0x02
     6aa:	89 83       	std	Y+1, r24	; 0x01
     6ac:	0e c0       	rjmp	.+28     	; 0x6ca <delay_ms+0x42>
		while (outer2) {
			while (ms)
				ms--;
     6ae:	8d 81       	ldd	r24, Y+5	; 0x05
     6b0:	9e 81       	ldd	r25, Y+6	; 0x06
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	9e 83       	std	Y+6, r25	; 0x06
     6b6:	8d 83       	std	Y+5, r24	; 0x05
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
			while (ms)
     6b8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ba:	9e 81       	ldd	r25, Y+6	; 0x06
     6bc:	00 97       	sbiw	r24, 0x00	; 0
     6be:	b9 f7       	brne	.-18     	; 0x6ae <delay_ms+0x26>
				ms--;
			outer2--;
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	9a 81       	ldd	r25, Y+2	; 0x02
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	9a 83       	std	Y+2, r25	; 0x02
     6c8:	89 83       	std	Y+1, r24	; 0x01
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	9a 81       	ldd	r25, Y+2	; 0x02
     6ce:	00 97       	sbiw	r24, 0x00	; 0
     6d0:	99 f7       	brne	.-26     	; 0x6b8 <delay_ms+0x30>
			while (ms)
				ms--;
			outer2--;
		}
		outer1--;
     6d2:	8b 81       	ldd	r24, Y+3	; 0x03
     6d4:	9c 81       	ldd	r25, Y+4	; 0x04
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	9c 83       	std	Y+4, r25	; 0x04
     6da:	8b 83       	std	Y+3, r24	; 0x03
 */
void delay_ms(unsigned short ms) {
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
     6dc:	8b 81       	ldd	r24, Y+3	; 0x03
     6de:	9c 81       	ldd	r25, Y+4	; 0x04
     6e0:	00 97       	sbiw	r24, 0x00	; 0
     6e2:	01 f7       	brne	.-64     	; 0x6a4 <delay_ms+0x1c>
				ms--;
			outer2--;
		}
		outer1--;
	}
}
     6e4:	26 96       	adiw	r28, 0x06	; 6
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	cf 91       	pop	r28
     6f2:	df 91       	pop	r29
     6f4:	08 95       	ret

000006f6 <gpib_init>:
 * Init GPIB pins and variables.
 * \brief All signal lines not related to the controller part
 * 		are initialized with useful values.
 *		(The controller part initialization is done on gpib_controller_assert())
 */
void gpib_init(void) {
     6f6:	df 93       	push	r29
     6f8:	cf 93       	push	r28
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
	// data lines - complete port A as input
	DDRA = 0x00;
     6fe:	ea e3       	ldi	r30, 0x3A	; 58
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	10 82       	st	Z, r1

	// handshake lines - on port D , everything as input
	DDRD &= ~_BV(G_DAV); // DAV 
     704:	a1 e3       	ldi	r26, 0x31	; 49
     706:	b0 e0       	ldi	r27, 0x00	; 0
     708:	e1 e3       	ldi	r30, 0x31	; 49
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	8b 7f       	andi	r24, 0xFB	; 251
     710:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_EOI); // EOI 
     712:	a1 e3       	ldi	r26, 0x31	; 49
     714:	b0 e0       	ldi	r27, 0x00	; 0
     716:	e1 e3       	ldi	r30, 0x31	; 49
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	80 81       	ld	r24, Z
     71c:	8f 7e       	andi	r24, 0xEF	; 239
     71e:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_SRQ); // SRQ 
     720:	a1 e3       	ldi	r26, 0x31	; 49
     722:	b0 e0       	ldi	r27, 0x00	; 0
     724:	e1 e3       	ldi	r30, 0x31	; 49
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	80 81       	ld	r24, Z
     72a:	8f 7b       	andi	r24, 0xBF	; 191
     72c:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_ATN); // ATN  
     72e:	a1 e3       	ldi	r26, 0x31	; 49
     730:	b0 e0       	ldi	r27, 0x00	; 0
     732:	e1 e3       	ldi	r30, 0x31	; 49
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 81       	ld	r24, Z
     738:	8f 77       	andi	r24, 0x7F	; 127
     73a:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_REN); // REN  
     73c:	a7 e3       	ldi	r26, 0x37	; 55
     73e:	b0 e0       	ldi	r27, 0x00	; 0
     740:	e7 e3       	ldi	r30, 0x37	; 55
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	8d 7f       	andi	r24, 0xFD	; 253
     748:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_IFC); // IFC  
     74a:	a7 e3       	ldi	r26, 0x37	; 55
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	e7 e3       	ldi	r30, 0x37	; 55
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	80 81       	ld	r24, Z
     754:	8e 7f       	andi	r24, 0xFE	; 254
     756:	8c 93       	st	X, r24

	// init handshake lines
	assign_bit(DDRD, PORTD, G_NRFD);
     758:	a2 e3       	ldi	r26, 0x32	; 50
     75a:	b0 e0       	ldi	r27, 0x00	; 0
     75c:	e2 e3       	ldi	r30, 0x32	; 50
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	80 81       	ld	r24, Z
     762:	87 7f       	andi	r24, 0xF7	; 247
     764:	8c 93       	st	X, r24
     766:	a1 e3       	ldi	r26, 0x31	; 49
     768:	b0 e0       	ldi	r27, 0x00	; 0
     76a:	e1 e3       	ldi	r30, 0x31	; 49
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	80 81       	ld	r24, Z
     770:	88 60       	ori	r24, 0x08	; 8
     772:	8c 93       	st	X, r24
     774:	a2 e3       	ldi	r26, 0x32	; 50
     776:	b0 e0       	ldi	r27, 0x00	; 0
     778:	e2 e3       	ldi	r30, 0x32	; 50
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	87 7f       	andi	r24, 0xF7	; 247
     780:	8c 93       	st	X, r24
	// not ready for data now
	release_bit(DDRD, PORTD, G_NDAC);
     782:	a1 e3       	ldi	r26, 0x31	; 49
     784:	b0 e0       	ldi	r27, 0x00	; 0
     786:	e1 e3       	ldi	r30, 0x31	; 49
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	8f 7d       	andi	r24, 0xDF	; 223
     78e:	8c 93       	st	X, r24
     790:	a2 e3       	ldi	r26, 0x32	; 50
     792:	b0 e0       	ldi	r27, 0x00	; 0
     794:	e2 e3       	ldi	r30, 0x32	; 50
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	80 62       	ori	r24, 0x20	; 32
     79c:	8c 93       	st	X, r24
	// initially: ok so far
}
     79e:	cf 91       	pop	r28
     7a0:	df 91       	pop	r29
     7a2:	08 95       	ret

000007a4 <gpib_receive>:
 *  \returns		On any error, 0xff is returned. in this case, the value of parameter *_byte is undefined.
 * 		Otherwise the value of the EOI signal line during read is returned. If EOI was assigned, a 0x01 is
 * 		returned. If EOI was not assigned, a 0x00 is returned. Assignment of EOI means that the talker
 * 		is sending the last character for this transmission.
 */
uchar gpib_receive(uchar* _byte) {
     7a4:	df 93       	push	r29
     7a6:	cf 93       	push	r28
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
     7ac:	27 97       	sbiw	r28, 0x07	; 7
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	9e 83       	std	Y+6, r25	; 0x06
     7ba:	8d 83       	std	Y+5, r24	; 0x05
	int timeout;
	uchar byte, eoi;

	//uart_puts("\n\rgpib_receive()\n\r");

	if (controller.talks == 1) {
     7bc:	80 91 65 04 	lds	r24, 0x0465
     7c0:	81 30       	cpi	r24, 0x01	; 1
     7c2:	39 f4       	brne	.+14     	; 0x7d2 <gpib_receive+0x2e>
		*_byte = 0xff;
     7c4:	ed 81       	ldd	r30, Y+5	; 0x05
     7c6:	fe 81       	ldd	r31, Y+6	; 0x06
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
     7ca:	80 83       	st	Z, r24
		return 0xff;
     7cc:	8f ef       	ldi	r24, 0xFF	; 255
     7ce:	8f 83       	std	Y+7, r24	; 0x07
     7d0:	c6 c0       	rjmp	.+396    	; 0x95e <__stack+0xff>
	}

	// handshake: set nrfd, means i am ready to receive some data
	release_bit(DDRD, PORTD, G_NRFD);
     7d2:	a1 e3       	ldi	r26, 0x31	; 49
     7d4:	b0 e0       	ldi	r27, 0x00	; 0
     7d6:	e1 e3       	ldi	r30, 0x31	; 49
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	80 81       	ld	r24, Z
     7dc:	87 7f       	andi	r24, 0xF7	; 247
     7de:	8c 93       	st	X, r24
     7e0:	a2 e3       	ldi	r26, 0x32	; 50
     7e2:	b0 e0       	ldi	r27, 0x00	; 0
     7e4:	e2 e3       	ldi	r30, 0x32	; 50
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	80 81       	ld	r24, Z
     7ea:	88 60       	ori	r24, 0x08	; 8
     7ec:	8c 93       	st	X, r24
	assign_bit(DDRD, PORTD, G_NDAC);
     7ee:	a2 e3       	ldi	r26, 0x32	; 50
     7f0:	b0 e0       	ldi	r27, 0x00	; 0
     7f2:	e2 e3       	ldi	r30, 0x32	; 50
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	80 81       	ld	r24, Z
     7f8:	8f 7d       	andi	r24, 0xDF	; 223
     7fa:	8c 93       	st	X, r24
     7fc:	a1 e3       	ldi	r26, 0x31	; 49
     7fe:	b0 e0       	ldi	r27, 0x00	; 0
     800:	e1 e3       	ldi	r30, 0x31	; 49
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 81       	ld	r24, Z
     806:	80 62       	ori	r24, 0x20	; 32
     808:	8c 93       	st	X, r24
     80a:	a2 e3       	ldi	r26, 0x32	; 50
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e2 e3       	ldi	r30, 0x32	; 50
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	80 81       	ld	r24, Z
     814:	8f 7d       	andi	r24, 0xDF	; 223
     816:	8c 93       	st	X, r24

	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     818:	80 91 6d 05 	lds	r24, 0x056D
     81c:	88 2f       	mov	r24, r24
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	05 96       	adiw	r24, 0x05	; 5
     822:	9c 83       	std	Y+4, r25	; 0x04
     824:	8b 83       	std	Y+3, r24	; 0x03
     826:	10 c0       	rjmp	.+32     	; 0x848 <gpib_receive+0xa4>
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     828:	80 91 6d 05 	lds	r24, 0x056D
     82c:	28 2f       	mov	r18, r24
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	8b 81       	ldd	r24, Y+3	; 0x03
     832:	9c 81       	ldd	r25, Y+4	; 0x04
     834:	28 17       	cp	r18, r24
     836:	39 07       	cpc	r19, r25
     838:	39 f4       	brne	.+14     	; 0x848 <gpib_receive+0xa4>
			uart_puts("\n\rError: DAV timeout (1)\n\r");
     83a:	80 e6       	ldi	r24, 0x60	; 96
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
			return 0xff;
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	8f 83       	std	Y+7, r24	; 0x07
     846:	8b c0       	rjmp	.+278    	; 0x95e <__stack+0xff>
	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
     848:	e0 e3       	ldi	r30, 0x30	; 48
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	88 2f       	mov	r24, r24
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	84 70       	andi	r24, 0x04	; 4
     854:	90 70       	andi	r25, 0x00	; 0
     856:	00 97       	sbiw	r24, 0x00	; 0
     858:	49 f0       	breq	.+18     	; 0x86c <__stack+0xd>
     85a:	80 91 6d 05 	lds	r24, 0x056D
     85e:	28 2f       	mov	r18, r24
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	8b 81       	ldd	r24, Y+3	; 0x03
     864:	9c 81       	ldd	r25, Y+4	; 0x04
     866:	82 17       	cp	r24, r18
     868:	93 07       	cpc	r25, r19
     86a:	f4 f6       	brge	.-68     	; 0x828 <gpib_receive+0x84>
#else
	loop_until_bit_is_clear(PIND,G_DAV);
#endif

	// handshake: clear NRFD, means i am busy now to read data
	assign_bit(DDRD, PORTD, G_NRFD);
     86c:	a2 e3       	ldi	r26, 0x32	; 50
     86e:	b0 e0       	ldi	r27, 0x00	; 0
     870:	e2 e3       	ldi	r30, 0x32	; 50
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	87 7f       	andi	r24, 0xF7	; 247
     878:	8c 93       	st	X, r24
     87a:	a1 e3       	ldi	r26, 0x31	; 49
     87c:	b0 e0       	ldi	r27, 0x00	; 0
     87e:	e1 e3       	ldi	r30, 0x31	; 49
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	80 81       	ld	r24, Z
     884:	88 60       	ori	r24, 0x08	; 8
     886:	8c 93       	st	X, r24
     888:	a2 e3       	ldi	r26, 0x32	; 50
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	e2 e3       	ldi	r30, 0x32	; 50
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	80 81       	ld	r24, Z
     892:	87 7f       	andi	r24, 0xF7	; 247
     894:	8c 93       	st	X, r24
	// read data
	byte = PINA ^ 0xff;
     896:	e9 e3       	ldi	r30, 0x39	; 57
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	80 81       	ld	r24, Z
     89c:	80 95       	com	r24
     89e:	8a 83       	std	Y+2, r24	; 0x02

	// handshake: set ndac, means i have completed/accepted the read
	release_bit(DDRD, PORTD, G_NDAC);
     8a0:	a1 e3       	ldi	r26, 0x31	; 49
     8a2:	b0 e0       	ldi	r27, 0x00	; 0
     8a4:	e1 e3       	ldi	r30, 0x31	; 49
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	80 81       	ld	r24, Z
     8aa:	8f 7d       	andi	r24, 0xDF	; 223
     8ac:	8c 93       	st	X, r24
     8ae:	a2 e3       	ldi	r26, 0x32	; 50
     8b0:	b0 e0       	ldi	r27, 0x00	; 0
     8b2:	e2 e3       	ldi	r30, 0x32	; 50
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	80 81       	ld	r24, Z
     8b8:	80 62       	ori	r24, 0x20	; 32
     8ba:	8c 93       	st	X, r24

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     8bc:	80 91 6d 05 	lds	r24, 0x056D
     8c0:	88 2f       	mov	r24, r24
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	05 96       	adiw	r24, 0x05	; 5
     8c6:	9c 83       	std	Y+4, r25	; 0x04
     8c8:	8b 83       	std	Y+3, r24	; 0x03
     8ca:	10 c0       	rjmp	.+32     	; 0x8ec <__stack+0x8d>
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     8cc:	80 91 6d 05 	lds	r24, 0x056D
     8d0:	28 2f       	mov	r18, r24
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	8b 81       	ldd	r24, Y+3	; 0x03
     8d6:	9c 81       	ldd	r25, Y+4	; 0x04
     8d8:	28 17       	cp	r18, r24
     8da:	39 07       	cpc	r19, r25
     8dc:	39 f4       	brne	.+14     	; 0x8ec <__stack+0x8d>
			uart_puts("\n\rError: DAV timeout (2)\n\r");
     8de:	8b e7       	ldi	r24, 0x7B	; 123
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
			return 0xff;
     8e6:	8f ef       	ldi	r24, 0xFF	; 255
     8e8:	8f 83       	std	Y+7, r24	; 0x07
     8ea:	39 c0       	rjmp	.+114    	; 0x95e <__stack+0xff>
	release_bit(DDRD, PORTD, G_NDAC);

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
     8ec:	e0 e3       	ldi	r30, 0x30	; 48
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	88 2f       	mov	r24, r24
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	84 70       	andi	r24, 0x04	; 4
     8f8:	90 70       	andi	r25, 0x00	; 0
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	49 f4       	brne	.+18     	; 0x910 <__stack+0xb1>
     8fe:	80 91 6d 05 	lds	r24, 0x056D
     902:	28 2f       	mov	r18, r24
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	8b 81       	ldd	r24, Y+3	; 0x03
     908:	9c 81       	ldd	r25, Y+4	; 0x04
     90a:	82 17       	cp	r24, r18
     90c:	93 07       	cpc	r25, r19
     90e:	f4 f6       	brge	.-68     	; 0x8cc <__stack+0x6d>
	}
#else
	loop_until_bit_is_set(PIND,G_DAV);
#endif
	// handshake: clear ndac (this is a prerequisite for receive next byte)
	assign_bit(DDRD, PORTD, G_NDAC);
     910:	a2 e3       	ldi	r26, 0x32	; 50
     912:	b0 e0       	ldi	r27, 0x00	; 0
     914:	e2 e3       	ldi	r30, 0x32	; 50
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	8f 7d       	andi	r24, 0xDF	; 223
     91c:	8c 93       	st	X, r24
     91e:	a1 e3       	ldi	r26, 0x31	; 49
     920:	b0 e0       	ldi	r27, 0x00	; 0
     922:	e1 e3       	ldi	r30, 0x31	; 49
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	80 62       	ori	r24, 0x20	; 32
     92a:	8c 93       	st	X, r24
     92c:	a2 e3       	ldi	r26, 0x32	; 50
     92e:	b0 e0       	ldi	r27, 0x00	; 0
     930:	e2 e3       	ldi	r30, 0x32	; 50
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	8f 7d       	andi	r24, 0xDF	; 223
     938:	8c 93       	st	X, r24

	// check if last byte of transmission
	eoi = bit_is_clear(PIND, G_EOI);
     93a:	e0 e3       	ldi	r30, 0x30	; 48
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	88 2f       	mov	r24, r24
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	80 71       	andi	r24, 0x10	; 16
     946:	90 70       	andi	r25, 0x00	; 0
     948:	19 82       	std	Y+1, r1	; 0x01
     94a:	00 97       	sbiw	r24, 0x00	; 0
     94c:	11 f4       	brne	.+4      	; 0x952 <__stack+0xf3>
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	89 83       	std	Y+1, r24	; 0x01

	*_byte = byte;
     952:	ed 81       	ldd	r30, Y+5	; 0x05
     954:	fe 81       	ldd	r31, Y+6	; 0x06
     956:	8a 81       	ldd	r24, Y+2	; 0x02
     958:	80 83       	st	Z, r24

	return eoi;
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	8f 83       	std	Y+7, r24	; 0x07
     95e:	8f 81       	ldd	r24, Y+7	; 0x07
}
     960:	27 96       	adiw	r28, 0x07	; 7
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	f8 94       	cli
     966:	de bf       	out	0x3e, r29	; 62
     968:	0f be       	out	0x3f, r0	; 63
     96a:	cd bf       	out	0x3d, r28	; 61
     96c:	cf 91       	pop	r28
     96e:	df 91       	pop	r29
     970:	08 95       	ret

00000972 <gpib_add_partner_sad>:
//void queryPartners() {
//	controller.partners[0] = 0x02;
//	//controller.partners[1] = 0x01;
//	controller.partners[3] = 0x00; // end value is 0x00
//}
uchar gpib_add_partner_sad(uchar address) {
     972:	df 93       	push	r29
     974:	cf 93       	push	r28
     976:	00 d0       	rcall	.+0      	; 0x978 <gpib_add_partner_sad+0x6>
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	89 83       	std	Y+1, r24	; 0x01

}
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	cf 91       	pop	r28
     984:	df 91       	pop	r29
     986:	08 95       	ret

00000988 <gpib_remove_partner_sad>:

void gpib_remove_partner_sad(uchar address) {
     988:	df 93       	push	r29
     98a:	cf 93       	push	r28
     98c:	0f 92       	push	r0
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	89 83       	std	Y+1, r24	; 0x01

}
     994:	0f 90       	pop	r0
     996:	cf 91       	pop	r28
     998:	df 91       	pop	r29
     99a:	08 95       	ret

0000099c <gpib_controller_assign>:
 * You have to change the initialization of the partner array according to your environment.
 * The partners-array is used by gpib_serial_poll() for looping over all existing devices.
 * 
 * \param address the address to be used by the controller. Usually 0x00.
 */
void gpib_controller_assign(uchar address) {
     99c:	df 93       	push	r29
     99e:	cf 93       	push	r28
     9a0:	0f 92       	push	r0
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	89 83       	std	Y+1, r24	; 0x01
	controller.myaddress = address;
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	80 93 62 04 	sts	0x0462, r24
	controller.talks = 0;
     9ae:	10 92 65 04 	sts	0x0465, r1
	controller.partner.primary = ADDRESS_NOT_SET; // init default active partner
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
     9b4:	80 93 63 04 	sts	0x0463, r24
	controller.partner.secondary = ADDRESS_NOT_SET;
     9b8:	8f ef       	ldi	r24, 0xFF	; 255
     9ba:	80 93 64 04 	sts	0x0464, r24
	controller.flavour = FLAVOUR_NONE;
     9be:	10 92 66 04 	sts	0x0466, r1
	/** clear list of partners */
	gpib_clear_partners();
     9c2:	0e 94 b3 0a 	call	0x1566	; 0x1566 <gpib_clear_partners>
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     9c6:	a8 e3       	ldi	r26, 0x38	; 56
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e8 e3       	ldi	r30, 0x38	; 56
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	80 81       	ld	r24, Z
     9d0:	8e 7f       	andi	r24, 0xFE	; 254
     9d2:	8c 93       	st	X, r24
     9d4:	a7 e3       	ldi	r26, 0x37	; 55
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	e7 e3       	ldi	r30, 0x37	; 55
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	80 81       	ld	r24, Z
     9de:	81 60       	ori	r24, 0x01	; 1
     9e0:	8c 93       	st	X, r24
     9e2:	a8 e3       	ldi	r26, 0x38	; 56
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	e8 e3       	ldi	r30, 0x38	; 56
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	80 81       	ld	r24, Z
     9ec:	8e 7f       	andi	r24, 0xFE	; 254
     9ee:	8c 93       	st	X, r24
	delay_ms(200);
     9f0:	88 ec       	ldi	r24, 0xC8	; 200
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	0e 94 44 03 	call	0x688	; 0x688 <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     9f8:	a7 e3       	ldi	r26, 0x37	; 55
     9fa:	b0 e0       	ldi	r27, 0x00	; 0
     9fc:	e7 e3       	ldi	r30, 0x37	; 55
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	80 81       	ld	r24, Z
     a02:	8e 7f       	andi	r24, 0xFE	; 254
     a04:	8c 93       	st	X, r24
     a06:	a8 e3       	ldi	r26, 0x38	; 56
     a08:	b0 e0       	ldi	r27, 0x00	; 0
     a0a:	e8 e3       	ldi	r30, 0x38	; 56
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	80 81       	ld	r24, Z
     a10:	81 60       	ori	r24, 0x01	; 1
     a12:	8c 93       	st	X, r24
	// set up all devices for remote control
	assign_bit(DDRB, PORTB, G_REN);
     a14:	a8 e3       	ldi	r26, 0x38	; 56
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	e8 e3       	ldi	r30, 0x38	; 56
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	80 81       	ld	r24, Z
     a1e:	8d 7f       	andi	r24, 0xFD	; 253
     a20:	8c 93       	st	X, r24
     a22:	a7 e3       	ldi	r26, 0x37	; 55
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e7 e3       	ldi	r30, 0x37	; 55
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 81       	ld	r24, Z
     a2c:	82 60       	ori	r24, 0x02	; 2
     a2e:	8c 93       	st	X, r24
     a30:	a8 e3       	ldi	r26, 0x38	; 56
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	e8 e3       	ldi	r30, 0x38	; 56
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	80 81       	ld	r24, Z
     a3a:	8d 7f       	andi	r24, 0xFD	; 253
     a3c:	8c 93       	st	X, r24

	// DCL - device clear for all devices on bus
	cmd_buf[0] = G_CMD_DCL;
     a3e:	84 e1       	ldi	r24, 0x14	; 20
     a40:	80 93 b8 04 	sts	0x04B8, r24
	gpib_cmd(cmd_buf, 1);
     a44:	88 eb       	ldi	r24, 0xB8	; 184
     a46:	94 e0       	ldi	r25, 0x04	; 4
     a48:	61 e0       	ldi	r22, 0x01	; 1
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>
}
     a50:	0f 90       	pop	r0
     a52:	cf 91       	pop	r28
     a54:	df 91       	pop	r29
     a56:	08 95       	ret

00000a58 <gpib_controller_release>:

/**
 * Release bus 
 */
void gpib_controller_release(void) {
     a58:	df 93       	push	r29
     a5a:	cf 93       	push	r28
     a5c:	cd b7       	in	r28, 0x3d	; 61
     a5e:	de b7       	in	r29, 0x3e	; 62
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     a60:	a8 e3       	ldi	r26, 0x38	; 56
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e8 e3       	ldi	r30, 0x38	; 56
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	8e 7f       	andi	r24, 0xFE	; 254
     a6c:	8c 93       	st	X, r24
     a6e:	a7 e3       	ldi	r26, 0x37	; 55
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	e7 e3       	ldi	r30, 0x37	; 55
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	81 60       	ori	r24, 0x01	; 1
     a7a:	8c 93       	st	X, r24
     a7c:	a8 e3       	ldi	r26, 0x38	; 56
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	e8 e3       	ldi	r30, 0x38	; 56
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	8e 7f       	andi	r24, 0xFE	; 254
     a88:	8c 93       	st	X, r24
	delay_ms(200);
     a8a:	88 ec       	ldi	r24, 0xC8	; 200
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 44 03 	call	0x688	; 0x688 <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     a92:	a7 e3       	ldi	r26, 0x37	; 55
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	e7 e3       	ldi	r30, 0x37	; 55
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	8e 7f       	andi	r24, 0xFE	; 254
     a9e:	8c 93       	st	X, r24
     aa0:	a8 e3       	ldi	r26, 0x38	; 56
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	e8 e3       	ldi	r30, 0x38	; 56
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	80 81       	ld	r24, Z
     aaa:	81 60       	ori	r24, 0x01	; 1
     aac:	8c 93       	st	X, r24
	// set up all devices for local control
	release_bit(DDRB, PORTB, G_REN);
     aae:	a7 e3       	ldi	r26, 0x37	; 55
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
     ab2:	e7 e3       	ldi	r30, 0x37	; 55
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	80 81       	ld	r24, Z
     ab8:	8d 7f       	andi	r24, 0xFD	; 253
     aba:	8c 93       	st	X, r24
     abc:	a8 e3       	ldi	r26, 0x38	; 56
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e8 e3       	ldi	r30, 0x38	; 56
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	80 81       	ld	r24, Z
     ac6:	82 60       	ori	r24, 0x02	; 2
     ac8:	8c 93       	st	X, r24
}
     aca:	cf 91       	pop	r28
     acc:	df 91       	pop	r29
     ace:	08 95       	ret

00000ad0 <gpib_write>:

/**
 * Write GPIB string to bus
 * \brief See _gpib_write() for further information.
 */
uchar gpib_write(uchar *bytes, int length) {
     ad0:	df 93       	push	r29
     ad2:	cf 93       	push	r28
     ad4:	00 d0       	rcall	.+0      	; 0xad6 <gpib_write+0x6>
     ad6:	00 d0       	rcall	.+0      	; 0xad8 <gpib_write+0x8>
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
     adc:	9a 83       	std	Y+2, r25	; 0x02
     ade:	89 83       	std	Y+1, r24	; 0x01
     ae0:	7c 83       	std	Y+4, r23	; 0x04
     ae2:	6b 83       	std	Y+3, r22	; 0x03
	// set attention arg false for ordinary strings
	return _gpib_write(bytes, length, (uchar) 0);
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	9a 81       	ldd	r25, Y+2	; 0x02
     ae8:	2b 81       	ldd	r18, Y+3	; 0x03
     aea:	3c 81       	ldd	r19, Y+4	; 0x04
     aec:	b9 01       	movw	r22, r18
     aee:	40 e0       	ldi	r20, 0x00	; 0
     af0:	0e 94 9a 05 	call	0xb34	; 0xb34 <_gpib_write>
}
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	cf 91       	pop	r28
     afe:	df 91       	pop	r29
     b00:	08 95       	ret

00000b02 <gpib_cmd>:

/**
 * Write GPIB command to bus
 * \brief See _gpib_write() for further information.
 */
uchar gpib_cmd(uchar *bytes, int length) {
     b02:	df 93       	push	r29
     b04:	cf 93       	push	r28
     b06:	00 d0       	rcall	.+0      	; 0xb08 <gpib_cmd+0x6>
     b08:	00 d0       	rcall	.+0      	; 0xb0a <gpib_cmd+0x8>
     b0a:	cd b7       	in	r28, 0x3d	; 61
     b0c:	de b7       	in	r29, 0x3e	; 62
     b0e:	9a 83       	std	Y+2, r25	; 0x02
     b10:	89 83       	std	Y+1, r24	; 0x01
     b12:	7c 83       	std	Y+4, r23	; 0x04
     b14:	6b 83       	std	Y+3, r22	; 0x03
	// set attention arg true for commands
	return _gpib_write(bytes, length, (uchar) 1);
     b16:	89 81       	ldd	r24, Y+1	; 0x01
     b18:	9a 81       	ldd	r25, Y+2	; 0x02
     b1a:	2b 81       	ldd	r18, Y+3	; 0x03
     b1c:	3c 81       	ldd	r19, Y+4	; 0x04
     b1e:	b9 01       	movw	r22, r18
     b20:	41 e0       	ldi	r20, 0x01	; 1
     b22:	0e 94 9a 05 	call	0xb34	; 0xb34 <_gpib_write>
}
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	cf 91       	pop	r28
     b30:	df 91       	pop	r29
     b32:	08 95       	ret

00000b34 <_gpib_write>:
 * \param length length of valid bytes in byte array or zero.
 * for binary data, lenght must be defined. For strings, length can be set to zero. Then the length of
 * the string is calculated internally.
 * \param attention attention tur means assign ATN signal line during write.
 */
uchar _gpib_write(uchar *bytes, int length, uchar attention) {
     b34:	df 93       	push	r29
     b36:	cf 93       	push	r28
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	2b 97       	sbiw	r28, 0x0b	; 11
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	f8 94       	cli
     b42:	de bf       	out	0x3e, r29	; 62
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	cd bf       	out	0x3d, r28	; 61
     b48:	9f 83       	std	Y+7, r25	; 0x07
     b4a:	8e 83       	std	Y+6, r24	; 0x06
     b4c:	79 87       	std	Y+9, r23	; 0x09
     b4e:	68 87       	std	Y+8, r22	; 0x08
     b50:	4a 87       	std	Y+10, r20	; 0x0a
	int timeout;
	//uchar buf[64];

	// set talks state. This is used by ISR to recognize own talk
	// (controller must not talk to itself and must not take part in listener handshake when talking)
	controller.talks = 1;
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	80 93 65 04 	sts	0x0465, r24

	if (attention) {
     b58:	8a 85       	ldd	r24, Y+10	; 0x0a
     b5a:	88 23       	and	r24, r24
     b5c:	a9 f0       	breq	.+42     	; 0xb88 <_gpib_write+0x54>
		//uart_puts("\n\rgpib_controller_write()\n\r");
		// assign ATN for commands
		assign_bit(DDRD, PORTD, G_ATN);
     b5e:	a2 e3       	ldi	r26, 0x32	; 50
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e2 e3       	ldi	r30, 0x32	; 50
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	8f 77       	andi	r24, 0x7F	; 127
     b6a:	8c 93       	st	X, r24
     b6c:	a1 e3       	ldi	r26, 0x31	; 49
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	e1 e3       	ldi	r30, 0x31	; 49
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	80 68       	ori	r24, 0x80	; 128
     b78:	8c 93       	st	X, r24
     b7a:	a2 e3       	ldi	r26, 0x32	; 50
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	e2 e3       	ldi	r30, 0x32	; 50
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	8f 77       	andi	r24, 0x7F	; 127
     b86:	8c 93       	st	X, r24
	}

	if (length == 0) {
     b88:	88 85       	ldd	r24, Y+8	; 0x08
     b8a:	99 85       	ldd	r25, Y+9	; 0x09
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	31 f4       	brne	.+12     	; 0xb9c <_gpib_write+0x68>
		// length==0 means this is a common C string, null-terminated.
		// then, length can be easily calculated
		length = strlen((char*) bytes);
     b90:	8e 81       	ldd	r24, Y+6	; 0x06
     b92:	9f 81       	ldd	r25, Y+7	; 0x07
     b94:	0e 94 92 00 	call	0x124	; 0x124 <strlen>
     b98:	99 87       	std	Y+9, r25	; 0x09
     b9a:	88 87       	std	Y+8, r24	; 0x08
	//	else 
	//		sprintf( buf, "gpib_write: 0x%02x\n\r", bytes[0] );
	//	uart_puts((char*)buf);

	// release EOI during transmission
	release_bit(DDRD, PORTD, G_EOI);
     b9c:	a1 e3       	ldi	r26, 0x31	; 49
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e1 e3       	ldi	r30, 0x31	; 49
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	8f 7e       	andi	r24, 0xEF	; 239
     ba8:	8c 93       	st	X, r24
     baa:	a2 e3       	ldi	r26, 0x32	; 50
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e2 e3       	ldi	r30, 0x32	; 50
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	80 61       	ori	r24, 0x10	; 16
     bb6:	8c 93       	st	X, r24
	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
     bb8:	a1 e3       	ldi	r26, 0x31	; 49
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	e1 e3       	ldi	r30, 0x31	; 49
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	8b 7f       	andi	r24, 0xFB	; 251
     bc4:	8c 93       	st	X, r24
     bc6:	a2 e3       	ldi	r26, 0x32	; 50
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e2 e3       	ldi	r30, 0x32	; 50
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	84 60       	ori	r24, 0x04	; 4
     bd2:	8c 93       	st	X, r24
	// release NRFD (just to be sure)
	release_bit(DDRD, PORTD, G_NRFD);
     bd4:	a1 e3       	ldi	r26, 0x31	; 49
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	e1 e3       	ldi	r30, 0x31	; 49
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	87 7f       	andi	r24, 0xF7	; 247
     be0:	8c 93       	st	X, r24
     be2:	a2 e3       	ldi	r26, 0x32	; 50
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e2 e3       	ldi	r30, 0x32	; 50
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	88 60       	ori	r24, 0x08	; 8
     bee:	8c 93       	st	X, r24

	// bytes[0] = 'a'
	// bytes[1] = 'b'
	// length = 2
	for (i = 0; i < length; i++) {
     bf0:	1c 82       	std	Y+4, r1	; 0x04
     bf2:	1b 82       	std	Y+3, r1	; 0x03
     bf4:	34 c2       	rjmp	.+1128   	; 0x105e <_gpib_write+0x52a>

		// put data on bus
		c = bytes[i];
     bf6:	2b 81       	ldd	r18, Y+3	; 0x03
     bf8:	3c 81       	ldd	r19, Y+4	; 0x04
     bfa:	8e 81       	ldd	r24, Y+6	; 0x06
     bfc:	9f 81       	ldd	r25, Y+7	; 0x07
     bfe:	fc 01       	movw	r30, r24
     c00:	e2 0f       	add	r30, r18
     c02:	f3 1f       	adc	r31, r19
     c04:	80 81       	ld	r24, Z
     c06:	8d 83       	std	Y+5, r24	; 0x05
		//sprintf( buf, "char: %c\n\r", c );
		//uart_puts(buf);		

		release_bit(DDRD, PORTD, G_NDAC);
     c08:	a1 e3       	ldi	r26, 0x31	; 49
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e1 e3       	ldi	r30, 0x31	; 49
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	8f 7d       	andi	r24, 0xDF	; 223
     c14:	8c 93       	st	X, r24
     c16:	a2 e3       	ldi	r26, 0x32	; 50
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	e2 e3       	ldi	r30, 0x32	; 50
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	80 62       	ori	r24, 0x20	; 32
     c22:	8c 93       	st	X, r24
		//uart_puts("0");
		// wait for NDAC assign from all listeners
#ifdef WITH_TIMEOUT
		timeout = s + 5;
     c24:	80 91 6d 05 	lds	r24, 0x056D
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	05 96       	adiw	r24, 0x05	; 5
     c2e:	9a 83       	std	Y+2, r25	; 0x02
     c30:	89 83       	std	Y+1, r24	; 0x01
     c32:	10 c0       	rjmp	.+32     	; 0xc54 <_gpib_write+0x120>
		//gpib_info();
		while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
			if (s == timeout) {
     c34:	80 91 6d 05 	lds	r24, 0x056D
     c38:	28 2f       	mov	r18, r24
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	39 f4       	brne	.+14     	; 0xc54 <_gpib_write+0x120>
				uart_puts("\n\rError: NDAC timeout\n\r");
     c46:	86 e9       	ldi	r24, 0x96	; 150
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
				return 0xff;
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	8b 87       	std	Y+11, r24	; 0x0b
     c52:	21 c2       	rjmp	.+1090   	; 0x1096 <_gpib_write+0x562>
		//uart_puts("0");
		// wait for NDAC assign from all listeners
#ifdef WITH_TIMEOUT
		timeout = s + 5;
		//gpib_info();
		while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
     c54:	e0 e3       	ldi	r30, 0x30	; 48
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	88 2f       	mov	r24, r24
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	80 72       	andi	r24, 0x20	; 32
     c60:	90 70       	andi	r25, 0x00	; 0
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	49 f0       	breq	.+18     	; 0xc78 <_gpib_write+0x144>
     c66:	80 91 6d 05 	lds	r24, 0x056D
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	9a 81       	ldd	r25, Y+2	; 0x02
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	f4 f6       	brge	.-68     	; 0xc34 <_gpib_write+0x100>
		}
#else
		loop_until_bit_is_clear(PIND,G_NDAC);
#endif

		DDRA = 0x00;
     c78:	ea e3       	ldi	r30, 0x3A	; 58
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	10 82       	st	Z, r1
		if (c & 0x01) {
     c7e:	8d 81       	ldd	r24, Y+5	; 0x05
     c80:	88 2f       	mov	r24, r24
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	81 70       	andi	r24, 0x01	; 1
     c86:	90 70       	andi	r25, 0x00	; 0
     c88:	88 23       	and	r24, r24
     c8a:	b1 f0       	breq	.+44     	; 0xcb8 <_gpib_write+0x184>
			assign_bit(DDRA, PORTA, PA0);
     c8c:	ab e3       	ldi	r26, 0x3B	; 59
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	eb e3       	ldi	r30, 0x3B	; 59
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	8e 7f       	andi	r24, 0xFE	; 254
     c98:	8c 93       	st	X, r24
     c9a:	aa e3       	ldi	r26, 0x3A	; 58
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	ea e3       	ldi	r30, 0x3A	; 58
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	81 60       	ori	r24, 0x01	; 1
     ca6:	8c 93       	st	X, r24
     ca8:	ab e3       	ldi	r26, 0x3B	; 59
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	eb e3       	ldi	r30, 0x3B	; 59
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	8e 7f       	andi	r24, 0xFE	; 254
     cb4:	8c 93       	st	X, r24
     cb6:	0e c0       	rjmp	.+28     	; 0xcd4 <_gpib_write+0x1a0>
		} else {
			release_bit(DDRA, PORTA, PA0)
     cb8:	aa e3       	ldi	r26, 0x3A	; 58
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	ea e3       	ldi	r30, 0x3A	; 58
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	8e 7f       	andi	r24, 0xFE	; 254
     cc4:	8c 93       	st	X, r24
     cc6:	ab e3       	ldi	r26, 0x3B	; 59
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	eb e3       	ldi	r30, 0x3B	; 59
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	81 60       	ori	r24, 0x01	; 1
     cd2:	8c 93       	st	X, r24
		}

		if (c & 0x02) {
     cd4:	8d 81       	ldd	r24, Y+5	; 0x05
     cd6:	88 2f       	mov	r24, r24
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	82 70       	andi	r24, 0x02	; 2
     cdc:	90 70       	andi	r25, 0x00	; 0
     cde:	00 97       	sbiw	r24, 0x00	; 0
     ce0:	b1 f0       	breq	.+44     	; 0xd0e <_gpib_write+0x1da>
			assign_bit(DDRA, PORTA, PA1)
     ce2:	ab e3       	ldi	r26, 0x3B	; 59
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	eb e3       	ldi	r30, 0x3B	; 59
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8d 7f       	andi	r24, 0xFD	; 253
     cee:	8c 93       	st	X, r24
     cf0:	aa e3       	ldi	r26, 0x3A	; 58
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	ea e3       	ldi	r30, 0x3A	; 58
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	82 60       	ori	r24, 0x02	; 2
     cfc:	8c 93       	st	X, r24
     cfe:	ab e3       	ldi	r26, 0x3B	; 59
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	eb e3       	ldi	r30, 0x3B	; 59
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8d 7f       	andi	r24, 0xFD	; 253
     d0a:	8c 93       	st	X, r24
     d0c:	0e c0       	rjmp	.+28     	; 0xd2a <_gpib_write+0x1f6>
		} else {
			release_bit(DDRA, PORTA, PA1);
     d0e:	aa e3       	ldi	r26, 0x3A	; 58
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	ea e3       	ldi	r30, 0x3A	; 58
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	8d 7f       	andi	r24, 0xFD	; 253
     d1a:	8c 93       	st	X, r24
     d1c:	ab e3       	ldi	r26, 0x3B	; 59
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	eb e3       	ldi	r30, 0x3B	; 59
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	82 60       	ori	r24, 0x02	; 2
     d28:	8c 93       	st	X, r24
		}

		if (c & 0x04) {
     d2a:	8d 81       	ldd	r24, Y+5	; 0x05
     d2c:	88 2f       	mov	r24, r24
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	84 70       	andi	r24, 0x04	; 4
     d32:	90 70       	andi	r25, 0x00	; 0
     d34:	00 97       	sbiw	r24, 0x00	; 0
     d36:	b1 f0       	breq	.+44     	; 0xd64 <_gpib_write+0x230>
			assign_bit(DDRA, PORTA, PA2);
     d38:	ab e3       	ldi	r26, 0x3B	; 59
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	eb e3       	ldi	r30, 0x3B	; 59
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	8b 7f       	andi	r24, 0xFB	; 251
     d44:	8c 93       	st	X, r24
     d46:	aa e3       	ldi	r26, 0x3A	; 58
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	ea e3       	ldi	r30, 0x3A	; 58
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	84 60       	ori	r24, 0x04	; 4
     d52:	8c 93       	st	X, r24
     d54:	ab e3       	ldi	r26, 0x3B	; 59
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	eb e3       	ldi	r30, 0x3B	; 59
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	8b 7f       	andi	r24, 0xFB	; 251
     d60:	8c 93       	st	X, r24
     d62:	0e c0       	rjmp	.+28     	; 0xd80 <_gpib_write+0x24c>
		} else {
			release_bit(DDRA, PORTA, PA2);
     d64:	aa e3       	ldi	r26, 0x3A	; 58
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	ea e3       	ldi	r30, 0x3A	; 58
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	8b 7f       	andi	r24, 0xFB	; 251
     d70:	8c 93       	st	X, r24
     d72:	ab e3       	ldi	r26, 0x3B	; 59
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	eb e3       	ldi	r30, 0x3B	; 59
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	84 60       	ori	r24, 0x04	; 4
     d7e:	8c 93       	st	X, r24
		}

		if (c & 0x08) {
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	88 70       	andi	r24, 0x08	; 8
     d88:	90 70       	andi	r25, 0x00	; 0
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	b1 f0       	breq	.+44     	; 0xdba <_gpib_write+0x286>
			assign_bit(DDRA, PORTA, PA3);
     d8e:	ab e3       	ldi	r26, 0x3B	; 59
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	eb e3       	ldi	r30, 0x3B	; 59
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	87 7f       	andi	r24, 0xF7	; 247
     d9a:	8c 93       	st	X, r24
     d9c:	aa e3       	ldi	r26, 0x3A	; 58
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	ea e3       	ldi	r30, 0x3A	; 58
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	88 60       	ori	r24, 0x08	; 8
     da8:	8c 93       	st	X, r24
     daa:	ab e3       	ldi	r26, 0x3B	; 59
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	eb e3       	ldi	r30, 0x3B	; 59
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	87 7f       	andi	r24, 0xF7	; 247
     db6:	8c 93       	st	X, r24
     db8:	0e c0       	rjmp	.+28     	; 0xdd6 <_gpib_write+0x2a2>
		} else {
			release_bit(DDRA, PORTA, PA3);
     dba:	aa e3       	ldi	r26, 0x3A	; 58
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	ea e3       	ldi	r30, 0x3A	; 58
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	87 7f       	andi	r24, 0xF7	; 247
     dc6:	8c 93       	st	X, r24
     dc8:	ab e3       	ldi	r26, 0x3B	; 59
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	eb e3       	ldi	r30, 0x3B	; 59
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	88 60       	ori	r24, 0x08	; 8
     dd4:	8c 93       	st	X, r24
		}

		if (c & 0x10) {
     dd6:	8d 81       	ldd	r24, Y+5	; 0x05
     dd8:	88 2f       	mov	r24, r24
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	80 71       	andi	r24, 0x10	; 16
     dde:	90 70       	andi	r25, 0x00	; 0
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	b1 f0       	breq	.+44     	; 0xe10 <_gpib_write+0x2dc>
			assign_bit(DDRA, PORTA, PA4);
     de4:	ab e3       	ldi	r26, 0x3B	; 59
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	eb e3       	ldi	r30, 0x3B	; 59
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8f 7e       	andi	r24, 0xEF	; 239
     df0:	8c 93       	st	X, r24
     df2:	aa e3       	ldi	r26, 0x3A	; 58
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	ea e3       	ldi	r30, 0x3A	; 58
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	80 61       	ori	r24, 0x10	; 16
     dfe:	8c 93       	st	X, r24
     e00:	ab e3       	ldi	r26, 0x3B	; 59
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	eb e3       	ldi	r30, 0x3B	; 59
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	8f 7e       	andi	r24, 0xEF	; 239
     e0c:	8c 93       	st	X, r24
     e0e:	0e c0       	rjmp	.+28     	; 0xe2c <_gpib_write+0x2f8>
		} else {
			release_bit(DDRA, PORTA, PA4);
     e10:	aa e3       	ldi	r26, 0x3A	; 58
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	ea e3       	ldi	r30, 0x3A	; 58
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	8f 7e       	andi	r24, 0xEF	; 239
     e1c:	8c 93       	st	X, r24
     e1e:	ab e3       	ldi	r26, 0x3B	; 59
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	eb e3       	ldi	r30, 0x3B	; 59
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	80 61       	ori	r24, 0x10	; 16
     e2a:	8c 93       	st	X, r24
		}

		if (c & 0x20) {
     e2c:	8d 81       	ldd	r24, Y+5	; 0x05
     e2e:	88 2f       	mov	r24, r24
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	80 72       	andi	r24, 0x20	; 32
     e34:	90 70       	andi	r25, 0x00	; 0
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	b1 f0       	breq	.+44     	; 0xe66 <_gpib_write+0x332>
			assign_bit(DDRA, PORTA, PA5);
     e3a:	ab e3       	ldi	r26, 0x3B	; 59
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	eb e3       	ldi	r30, 0x3B	; 59
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8f 7d       	andi	r24, 0xDF	; 223
     e46:	8c 93       	st	X, r24
     e48:	aa e3       	ldi	r26, 0x3A	; 58
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	ea e3       	ldi	r30, 0x3A	; 58
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	80 62       	ori	r24, 0x20	; 32
     e54:	8c 93       	st	X, r24
     e56:	ab e3       	ldi	r26, 0x3B	; 59
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	eb e3       	ldi	r30, 0x3B	; 59
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	8f 7d       	andi	r24, 0xDF	; 223
     e62:	8c 93       	st	X, r24
     e64:	0e c0       	rjmp	.+28     	; 0xe82 <_gpib_write+0x34e>
		} else {
			release_bit(DDRA, PORTA, PA5);
     e66:	aa e3       	ldi	r26, 0x3A	; 58
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	ea e3       	ldi	r30, 0x3A	; 58
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8f 7d       	andi	r24, 0xDF	; 223
     e72:	8c 93       	st	X, r24
     e74:	ab e3       	ldi	r26, 0x3B	; 59
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	eb e3       	ldi	r30, 0x3B	; 59
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	80 62       	ori	r24, 0x20	; 32
     e80:	8c 93       	st	X, r24
		}

		if (c & 0x40) {
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	80 74       	andi	r24, 0x40	; 64
     e8a:	90 70       	andi	r25, 0x00	; 0
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	b1 f0       	breq	.+44     	; 0xebc <_gpib_write+0x388>
			assign_bit(DDRA, PORTA, PA6);
     e90:	ab e3       	ldi	r26, 0x3B	; 59
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	eb e3       	ldi	r30, 0x3B	; 59
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8f 7b       	andi	r24, 0xBF	; 191
     e9c:	8c 93       	st	X, r24
     e9e:	aa e3       	ldi	r26, 0x3A	; 58
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ea e3       	ldi	r30, 0x3A	; 58
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 64       	ori	r24, 0x40	; 64
     eaa:	8c 93       	st	X, r24
     eac:	ab e3       	ldi	r26, 0x3B	; 59
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	eb e3       	ldi	r30, 0x3B	; 59
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	8f 7b       	andi	r24, 0xBF	; 191
     eb8:	8c 93       	st	X, r24
     eba:	0e c0       	rjmp	.+28     	; 0xed8 <_gpib_write+0x3a4>
		} else {
			release_bit(DDRA, PORTA, PA6);
     ebc:	aa e3       	ldi	r26, 0x3A	; 58
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	ea e3       	ldi	r30, 0x3A	; 58
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8f 7b       	andi	r24, 0xBF	; 191
     ec8:	8c 93       	st	X, r24
     eca:	ab e3       	ldi	r26, 0x3B	; 59
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	eb e3       	ldi	r30, 0x3B	; 59
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	80 64       	ori	r24, 0x40	; 64
     ed6:	8c 93       	st	X, r24
		}

		if (c & 0x80) {
     ed8:	8d 81       	ldd	r24, Y+5	; 0x05
     eda:	88 23       	and	r24, r24
     edc:	b4 f4       	brge	.+44     	; 0xf0a <_gpib_write+0x3d6>
			assign_bit(DDRA, PORTA, PA7);
     ede:	ab e3       	ldi	r26, 0x3B	; 59
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	eb e3       	ldi	r30, 0x3B	; 59
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8f 77       	andi	r24, 0x7F	; 127
     eea:	8c 93       	st	X, r24
     eec:	aa e3       	ldi	r26, 0x3A	; 58
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	ea e3       	ldi	r30, 0x3A	; 58
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	80 68       	ori	r24, 0x80	; 128
     ef8:	8c 93       	st	X, r24
     efa:	ab e3       	ldi	r26, 0x3B	; 59
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	eb e3       	ldi	r30, 0x3B	; 59
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8f 77       	andi	r24, 0x7F	; 127
     f06:	8c 93       	st	X, r24
     f08:	0e c0       	rjmp	.+28     	; 0xf26 <_gpib_write+0x3f2>
		} else {
			release_bit(DDRA, PORTA, PA7);
     f0a:	aa e3       	ldi	r26, 0x3A	; 58
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	ea e3       	ldi	r30, 0x3A	; 58
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	8f 77       	andi	r24, 0x7F	; 127
     f16:	8c 93       	st	X, r24
     f18:	ab e3       	ldi	r26, 0x3B	; 59
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	eb e3       	ldi	r30, 0x3B	; 59
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	80 68       	ori	r24, 0x80	; 128
     f24:	8c 93       	st	X, r24
		}

		// wait until listeners release NRFD
		//uart_puts("1");
		release_bit(DDRD, PORTD, G_NRFD);
     f26:	a1 e3       	ldi	r26, 0x31	; 49
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e1 e3       	ldi	r30, 0x31	; 49
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	87 7f       	andi	r24, 0xF7	; 247
     f32:	8c 93       	st	X, r24
     f34:	a2 e3       	ldi	r26, 0x32	; 50
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e2 e3       	ldi	r30, 0x32	; 50
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	88 60       	ori	r24, 0x08	; 8
     f40:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
		//gpib_info();
		timeout = s + 5;
     f42:	80 91 6d 05 	lds	r24, 0x056D
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	05 96       	adiw	r24, 0x05	; 5
     f4c:	9a 83       	std	Y+2, r25	; 0x02
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	10 c0       	rjmp	.+32     	; 0xf72 <_gpib_write+0x43e>
		while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
			if (s == timeout) {
     f52:	80 91 6d 05 	lds	r24, 0x056D
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	9a 81       	ldd	r25, Y+2	; 0x02
     f5e:	28 17       	cp	r18, r24
     f60:	39 07       	cpc	r19, r25
     f62:	39 f4       	brne	.+14     	; 0xf72 <_gpib_write+0x43e>
				uart_puts("\n\rError: NRFD timeout\n\r");
     f64:	8e ea       	ldi	r24, 0xAE	; 174
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
				return 0xff;
     f6c:	8f ef       	ldi	r24, 0xFF	; 255
     f6e:	8b 87       	std	Y+11, r24	; 0x0b
     f70:	92 c0       	rjmp	.+292    	; 0x1096 <_gpib_write+0x562>
		//uart_puts("1");
		release_bit(DDRD, PORTD, G_NRFD);
#ifdef WITH_TIMEOUT
		//gpib_info();
		timeout = s + 5;
		while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
     f72:	e0 e3       	ldi	r30, 0x30	; 48
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	88 2f       	mov	r24, r24
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	88 70       	andi	r24, 0x08	; 8
     f7e:	90 70       	andi	r25, 0x00	; 0
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	49 f4       	brne	.+18     	; 0xf96 <_gpib_write+0x462>
     f84:	80 91 6d 05 	lds	r24, 0x056D
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	82 17       	cp	r24, r18
     f92:	93 07       	cpc	r25, r19
     f94:	f4 f6       	brge	.-68     	; 0xf52 <_gpib_write+0x41e>
#else
		loop_until_bit_is_set(PIND,G_NRFD);
#endif

		// assign EOI during transmission of only last byte
		if ((i == length - 1) && !attention) {
     f96:	88 85       	ldd	r24, Y+8	; 0x08
     f98:	99 85       	ldd	r25, Y+9	; 0x09
     f9a:	9c 01       	movw	r18, r24
     f9c:	21 50       	subi	r18, 0x01	; 1
     f9e:	30 40       	sbci	r19, 0x00	; 0
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	9c 81       	ldd	r25, Y+4	; 0x04
     fa4:	28 17       	cp	r18, r24
     fa6:	39 07       	cpc	r19, r25
     fa8:	c1 f4       	brne	.+48     	; 0xfda <_gpib_write+0x4a6>
     faa:	8a 85       	ldd	r24, Y+10	; 0x0a
     fac:	88 23       	and	r24, r24
     fae:	a9 f4       	brne	.+42     	; 0xfda <_gpib_write+0x4a6>
			//uart_puts("\n\rE\n\r");
			assign_bit(DDRD, PORTD, G_EOI);
     fb0:	a2 e3       	ldi	r26, 0x32	; 50
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e2 e3       	ldi	r30, 0x32	; 50
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8f 7e       	andi	r24, 0xEF	; 239
     fbc:	8c 93       	st	X, r24
     fbe:	a1 e3       	ldi	r26, 0x31	; 49
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e1 e3       	ldi	r30, 0x31	; 49
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	80 61       	ori	r24, 0x10	; 16
     fca:	8c 93       	st	X, r24
     fcc:	a2 e3       	ldi	r26, 0x32	; 50
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e2 e3       	ldi	r30, 0x32	; 50
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	8f 7e       	andi	r24, 0xEF	; 239
     fd8:	8c 93       	st	X, r24
		}

		// assign DAV, data valid for listeners
		assign_bit(DDRD, PORTD, G_DAV);
     fda:	a2 e3       	ldi	r26, 0x32	; 50
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e2 e3       	ldi	r30, 0x32	; 50
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	8b 7f       	andi	r24, 0xFB	; 251
     fe6:	8c 93       	st	X, r24
     fe8:	a1 e3       	ldi	r26, 0x31	; 49
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e1 e3       	ldi	r30, 0x31	; 49
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	84 60       	ori	r24, 0x04	; 4
     ff4:	8c 93       	st	X, r24
     ff6:	a2 e3       	ldi	r26, 0x32	; 50
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e2 e3       	ldi	r30, 0x32	; 50
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	8b 7f       	andi	r24, 0xFB	; 251
    1002:	8c 93       	st	X, r24

		// wait for NDAC release
		//uart_puts("2");
		release_bit(DDRD, PORTD, G_NDAC);
    1004:	a1 e3       	ldi	r26, 0x31	; 49
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e1 e3       	ldi	r30, 0x31	; 49
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	8f 7d       	andi	r24, 0xDF	; 223
    1010:	8c 93       	st	X, r24
    1012:	a2 e3       	ldi	r26, 0x32	; 50
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e2 e3       	ldi	r30, 0x32	; 50
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	80 62       	ori	r24, 0x20	; 32
    101e:	8c 93       	st	X, r24
		loop_until_bit_is_set(PIND, G_NDAC);
    1020:	e0 e3       	ldi	r30, 0x30	; 48
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	88 2f       	mov	r24, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	80 72       	andi	r24, 0x20	; 32
    102c:	90 70       	andi	r25, 0x00	; 0
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	b9 f3       	breq	.-18     	; 0x1020 <_gpib_write+0x4ec>

		// release DAV, data not valid anymore
		release_bit(DDRD, PORTD, G_DAV);
    1032:	a1 e3       	ldi	r26, 0x31	; 49
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e1 e3       	ldi	r30, 0x31	; 49
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8b 7f       	andi	r24, 0xFB	; 251
    103e:	8c 93       	st	X, r24
    1040:	a2 e3       	ldi	r26, 0x32	; 50
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e2 e3       	ldi	r30, 0x32	; 50
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	84 60       	ori	r24, 0x04	; 4
    104c:	8c 93       	st	X, r24

		// reset Port to all input
		DDRA = 0x00;
    104e:	ea e3       	ldi	r30, 0x3A	; 58
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	10 82       	st	Z, r1
	release_bit(DDRD, PORTD, G_NRFD);

	// bytes[0] = 'a'
	// bytes[1] = 'b'
	// length = 2
	for (i = 0; i < length; i++) {
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	9c 81       	ldd	r25, Y+4	; 0x04
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	9c 83       	std	Y+4, r25	; 0x04
    105c:	8b 83       	std	Y+3, r24	; 0x03
    105e:	2b 81       	ldd	r18, Y+3	; 0x03
    1060:	3c 81       	ldd	r19, Y+4	; 0x04
    1062:	88 85       	ldd	r24, Y+8	; 0x08
    1064:	99 85       	ldd	r25, Y+9	; 0x09
    1066:	28 17       	cp	r18, r24
    1068:	39 07       	cpc	r19, r25
    106a:	0c f4       	brge	.+2      	; 0x106e <_gpib_write+0x53a>
    106c:	c4 cd       	rjmp	.-1144   	; 0xbf6 <_gpib_write+0xc2>
		DDRA = 0x00;

		//uart_puts("3\r\n");
	}

	if (attention) {
    106e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1070:	88 23       	and	r24, r24
    1072:	71 f0       	breq	.+28     	; 0x1090 <_gpib_write+0x55c>
		// assign ATN for commands
		release_bit(DDRD, PORTD, G_ATN);
    1074:	a1 e3       	ldi	r26, 0x31	; 49
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e1 e3       	ldi	r30, 0x31	; 49
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	8f 77       	andi	r24, 0x7F	; 127
    1080:	8c 93       	st	X, r24
    1082:	a2 e3       	ldi	r26, 0x32	; 50
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e2 e3       	ldi	r30, 0x32	; 50
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	80 68       	ori	r24, 0x80	; 128
    108e:	8c 93       	st	X, r24
	}

	// clear talk state.Controller does not talk anymore.
	controller.talks = 0;
    1090:	10 92 65 04 	sts	0x0465, r1

	return 0x00;
    1094:	1b 86       	std	Y+11, r1	; 0x0b
    1096:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1098:	2b 96       	adiw	r28, 0x0b	; 11
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <gpib_info>:

/**
 * print some useful info about bus state (for example value of handshake pins)
 */
void gpib_info(void) {
    10aa:	af 92       	push	r10
    10ac:	bf 92       	push	r11
    10ae:	cf 92       	push	r12
    10b0:	df 92       	push	r13
    10b2:	ef 92       	push	r14
    10b4:	ff 92       	push	r15
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	2a 97       	sbiw	r28, 0x0a	; 10
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
	uchar dav, nrfd, ndac, eoi, atn, srq, ifc, ren;
	extern uchar buf[80];

	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    10ce:	0e 94 98 0a 	call	0x1530	; 0x1530 <gpib_get_partner_pad>
    10d2:	08 2f       	mov	r16, r24
    10d4:	10 e0       	ldi	r17, 0x00	; 0
    10d6:	0e 94 a1 0a 	call	0x1542	; 0x1542 <gpib_get_partner_sad>
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	8d b7       	in	r24, 0x3d	; 61
    10e0:	9e b7       	in	r25, 0x3e	; 62
    10e2:	08 97       	sbiw	r24, 0x08	; 8
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	9e bf       	out	0x3e, r25	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	8d bf       	out	0x3d, r24	; 61
    10ee:	ed b7       	in	r30, 0x3d	; 61
    10f0:	fe b7       	in	r31, 0x3e	; 62
    10f2:	31 96       	adiw	r30, 0x01	; 1
    10f4:	8c e1       	ldi	r24, 0x1C	; 28
    10f6:	95 e0       	ldi	r25, 0x05	; 5
    10f8:	91 83       	std	Z+1, r25	; 0x01
    10fa:	80 83       	st	Z, r24
    10fc:	86 ec       	ldi	r24, 0xC6	; 198
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	93 83       	std	Z+3, r25	; 0x03
    1102:	82 83       	std	Z+2, r24	; 0x02
    1104:	15 83       	std	Z+5, r17	; 0x05
    1106:	04 83       	std	Z+4, r16	; 0x04
    1108:	37 83       	std	Z+7, r19	; 0x07
    110a:	26 83       	std	Z+6, r18	; 0x06
    110c:	0e 94 a3 00 	call	0x146	; 0x146 <sprintf>
    1110:	8d b7       	in	r24, 0x3d	; 61
    1112:	9e b7       	in	r25, 0x3e	; 62
    1114:	08 96       	adiw	r24, 0x08	; 8
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	9e bf       	out	0x3e, r25	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	8d bf       	out	0x3d, r24	; 61
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);
    1120:	8c e1       	ldi	r24, 0x1C	; 28
    1122:	95 e0       	ldi	r25, 0x05	; 5
    1124:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>

	uart_puts("Partner list\n\r");
    1128:	84 ef       	ldi	r24, 0xF4	; 244
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
	for (int i = 0; i < MAX_PARTNER; i++) {
    1130:	1a 82       	std	Y+2, r1	; 0x02
    1132:	19 82       	std	Y+1, r1	; 0x01
    1134:	45 c0       	rjmp	.+138    	; 0x11c0 <gpib_info+0x116>
		if (controller.partners[i].primary != ADDRESS_NOT_SET) {
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	9a 81       	ldd	r25, Y+2	; 0x02
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	fc 01       	movw	r30, r24
    1140:	e9 59       	subi	r30, 0x99	; 153
    1142:	fb 4f       	sbci	r31, 0xFB	; 251
    1144:	80 81       	ld	r24, Z
    1146:	8f 3f       	cpi	r24, 0xFF	; 255
    1148:	b1 f1       	breq	.+108    	; 0x11b6 <gpib_info+0x10c>
			sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	9a 81       	ldd	r25, Y+2	; 0x02
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	fc 01       	movw	r30, r24
    1154:	e9 59       	subi	r30, 0x99	; 153
    1156:	fb 4f       	sbci	r31, 0xFB	; 251
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	9a 81       	ldd	r25, Y+2	; 0x02
    1162:	03 96       	adiw	r24, 0x03	; 3
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	fc 01       	movw	r30, r24
    116a:	ee 59       	subi	r30, 0x9E	; 158
    116c:	fb 4f       	sbci	r31, 0xFB	; 251
    116e:	80 81       	ld	r24, Z
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	8d b7       	in	r24, 0x3d	; 61
    1176:	9e b7       	in	r25, 0x3e	; 62
    1178:	08 97       	sbiw	r24, 0x08	; 8
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	9e bf       	out	0x3e, r25	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	8d bf       	out	0x3d, r24	; 61
    1184:	ed b7       	in	r30, 0x3d	; 61
    1186:	fe b7       	in	r31, 0x3e	; 62
    1188:	31 96       	adiw	r30, 0x01	; 1
    118a:	8c e1       	ldi	r24, 0x1C	; 28
    118c:	95 e0       	ldi	r25, 0x05	; 5
    118e:	91 83       	std	Z+1, r25	; 0x01
    1190:	80 83       	st	Z, r24
    1192:	86 ec       	ldi	r24, 0xC6	; 198
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	93 83       	std	Z+3, r25	; 0x03
    1198:	82 83       	std	Z+2, r24	; 0x02
    119a:	55 83       	std	Z+5, r21	; 0x05
    119c:	44 83       	std	Z+4, r20	; 0x04
    119e:	37 83       	std	Z+7, r19	; 0x07
    11a0:	26 83       	std	Z+6, r18	; 0x06
    11a2:	0e 94 a3 00 	call	0x146	; 0x146 <sprintf>
    11a6:	8d b7       	in	r24, 0x3d	; 61
    11a8:	9e b7       	in	r25, 0x3e	; 62
    11aa:	08 96       	adiw	r24, 0x08	; 8
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	9e bf       	out	0x3e, r25	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	8d bf       	out	0x3d, r24	; 61
	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);

	uart_puts("Partner list\n\r");
	for (int i = 0; i < MAX_PARTNER; i++) {
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ba:	01 96       	adiw	r24, 0x01	; 1
    11bc:	9a 83       	std	Y+2, r25	; 0x02
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	9a 81       	ldd	r25, Y+2	; 0x02
    11c4:	85 30       	cpi	r24, 0x05	; 5
    11c6:	91 05       	cpc	r25, r1
    11c8:	0c f4       	brge	.+2      	; 0x11cc <gpib_info+0x122>
    11ca:	b5 cf       	rjmp	.-150    	; 0x1136 <gpib_info+0x8c>
					controller.partners[i].primary,
					controller.partners[i].secondary);
		}
	}

	dav = bit_is_set(PIND, G_DAV);
    11cc:	e0 e3       	ldi	r30, 0x30	; 48
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	84 70       	andi	r24, 0x04	; 4
    11d4:	8a 87       	std	Y+10, r24	; 0x0a
	nrfd = bit_is_set(PIND, G_NRFD);
    11d6:	e0 e3       	ldi	r30, 0x30	; 48
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	88 70       	andi	r24, 0x08	; 8
    11de:	89 87       	std	Y+9, r24	; 0x09
	ndac = bit_is_set(PIND, G_NDAC);
    11e0:	e0 e3       	ldi	r30, 0x30	; 48
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	80 72       	andi	r24, 0x20	; 32
    11e8:	88 87       	std	Y+8, r24	; 0x08
	eoi = bit_is_set(PIND, G_EOI);
    11ea:	e0 e3       	ldi	r30, 0x30	; 48
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	80 71       	andi	r24, 0x10	; 16
    11f2:	8f 83       	std	Y+7, r24	; 0x07
	atn = bit_is_set(PIND, G_ATN);
    11f4:	e0 e3       	ldi	r30, 0x30	; 48
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	80 78       	andi	r24, 0x80	; 128
    11fc:	8e 83       	std	Y+6, r24	; 0x06
	srq = bit_is_set(PIND, G_SRQ);
    11fe:	e0 e3       	ldi	r30, 0x30	; 48
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	80 74       	andi	r24, 0x40	; 64
    1206:	8d 83       	std	Y+5, r24	; 0x05
	ifc = bit_is_set(PINB, G_IFC);
    1208:	e6 e3       	ldi	r30, 0x36	; 54
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	81 70       	andi	r24, 0x01	; 1
    1210:	8c 83       	std	Y+4, r24	; 0x04
	ren = bit_is_set(PINB, G_REN);
    1212:	e6 e3       	ldi	r30, 0x36	; 54
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	82 70       	andi	r24, 0x02	; 2
    121a:	8b 83       	std	Y+3, r24	; 0x03
	//d = PINA;
	//di = d ^ 0xff;
	if (dav == 0x00)
    121c:	8a 85       	ldd	r24, Y+10	; 0x0a
    121e:	88 23       	and	r24, r24
    1220:	19 f4       	brne	.+6      	; 0x1228 <gpib_info+0x17e>
		dav = '0';
    1222:	80 e3       	ldi	r24, 0x30	; 48
    1224:	8a 87       	std	Y+10, r24	; 0x0a
    1226:	02 c0       	rjmp	.+4      	; 0x122c <gpib_info+0x182>
	else
		dav = '1';
    1228:	81 e3       	ldi	r24, 0x31	; 49
    122a:	8a 87       	std	Y+10, r24	; 0x0a
	if (nrfd == 0x00)
    122c:	89 85       	ldd	r24, Y+9	; 0x09
    122e:	88 23       	and	r24, r24
    1230:	19 f4       	brne	.+6      	; 0x1238 <gpib_info+0x18e>
		nrfd = '0';
    1232:	80 e3       	ldi	r24, 0x30	; 48
    1234:	89 87       	std	Y+9, r24	; 0x09
    1236:	02 c0       	rjmp	.+4      	; 0x123c <gpib_info+0x192>
	else
		nrfd = '1';
    1238:	81 e3       	ldi	r24, 0x31	; 49
    123a:	89 87       	std	Y+9, r24	; 0x09
	if (ndac == 0x00)
    123c:	88 85       	ldd	r24, Y+8	; 0x08
    123e:	88 23       	and	r24, r24
    1240:	19 f4       	brne	.+6      	; 0x1248 <gpib_info+0x19e>
		ndac = '0';
    1242:	80 e3       	ldi	r24, 0x30	; 48
    1244:	88 87       	std	Y+8, r24	; 0x08
    1246:	02 c0       	rjmp	.+4      	; 0x124c <gpib_info+0x1a2>
	else
		ndac = '1';
    1248:	81 e3       	ldi	r24, 0x31	; 49
    124a:	88 87       	std	Y+8, r24	; 0x08
	if (eoi == 0x00)
    124c:	8f 81       	ldd	r24, Y+7	; 0x07
    124e:	88 23       	and	r24, r24
    1250:	19 f4       	brne	.+6      	; 0x1258 <gpib_info+0x1ae>
		eoi = '0';
    1252:	80 e3       	ldi	r24, 0x30	; 48
    1254:	8f 83       	std	Y+7, r24	; 0x07
    1256:	02 c0       	rjmp	.+4      	; 0x125c <gpib_info+0x1b2>
	else
		eoi = '1';
    1258:	81 e3       	ldi	r24, 0x31	; 49
    125a:	8f 83       	std	Y+7, r24	; 0x07
	if (atn == 0x00)
    125c:	8e 81       	ldd	r24, Y+6	; 0x06
    125e:	88 23       	and	r24, r24
    1260:	19 f4       	brne	.+6      	; 0x1268 <gpib_info+0x1be>
		atn = '0';
    1262:	80 e3       	ldi	r24, 0x30	; 48
    1264:	8e 83       	std	Y+6, r24	; 0x06
    1266:	02 c0       	rjmp	.+4      	; 0x126c <gpib_info+0x1c2>
	else
		atn = '1';
    1268:	81 e3       	ldi	r24, 0x31	; 49
    126a:	8e 83       	std	Y+6, r24	; 0x06
	if (srq == 0x00)
    126c:	8d 81       	ldd	r24, Y+5	; 0x05
    126e:	88 23       	and	r24, r24
    1270:	19 f4       	brne	.+6      	; 0x1278 <gpib_info+0x1ce>
		srq = '0';
    1272:	80 e3       	ldi	r24, 0x30	; 48
    1274:	8d 83       	std	Y+5, r24	; 0x05
    1276:	02 c0       	rjmp	.+4      	; 0x127c <gpib_info+0x1d2>
	else
		srq = '1';
    1278:	81 e3       	ldi	r24, 0x31	; 49
    127a:	8d 83       	std	Y+5, r24	; 0x05
	if (ifc == 0x00)
    127c:	8c 81       	ldd	r24, Y+4	; 0x04
    127e:	88 23       	and	r24, r24
    1280:	19 f4       	brne	.+6      	; 0x1288 <gpib_info+0x1de>
		ifc = '0';
    1282:	80 e3       	ldi	r24, 0x30	; 48
    1284:	8c 83       	std	Y+4, r24	; 0x04
    1286:	02 c0       	rjmp	.+4      	; 0x128c <gpib_info+0x1e2>
	else
		ifc = '1';
    1288:	81 e3       	ldi	r24, 0x31	; 49
    128a:	8c 83       	std	Y+4, r24	; 0x04
	if (ren == 0x00)
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	88 23       	and	r24, r24
    1290:	19 f4       	brne	.+6      	; 0x1298 <gpib_info+0x1ee>
		ren = '0';
    1292:	80 e3       	ldi	r24, 0x30	; 48
    1294:	8b 83       	std	Y+3, r24	; 0x03
    1296:	02 c0       	rjmp	.+4      	; 0x129c <gpib_info+0x1f2>
	else
		ren = '1';
    1298:	81 e3       	ldi	r24, 0x31	; 49
    129a:	8b 83       	std	Y+3, r24	; 0x03

	sprintf(buf,
    129c:	8a 85       	ldd	r24, Y+10	; 0x0a
    129e:	a8 2e       	mov	r10, r24
    12a0:	bb 24       	eor	r11, r11
    12a2:	89 85       	ldd	r24, Y+9	; 0x09
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	88 85       	ldd	r24, Y+8	; 0x08
    12aa:	48 2f       	mov	r20, r24
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	8f 81       	ldd	r24, Y+7	; 0x07
    12b0:	68 2f       	mov	r22, r24
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	a8 2f       	mov	r26, r24
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	08 2f       	mov	r16, r24
    12be:	10 e0       	ldi	r17, 0x00	; 0
    12c0:	8e 81       	ldd	r24, Y+6	; 0x06
    12c2:	e8 2e       	mov	r14, r24
    12c4:	ff 24       	eor	r15, r15
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	c8 2e       	mov	r12, r24
    12ca:	dd 24       	eor	r13, r13
    12cc:	8d b7       	in	r24, 0x3d	; 61
    12ce:	9e b7       	in	r25, 0x3e	; 62
    12d0:	44 97       	sbiw	r24, 0x14	; 20
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	9e bf       	out	0x3e, r25	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	8d bf       	out	0x3d, r24	; 61
    12dc:	ed b7       	in	r30, 0x3d	; 61
    12de:	fe b7       	in	r31, 0x3e	; 62
    12e0:	31 96       	adiw	r30, 0x01	; 1
    12e2:	8c e1       	ldi	r24, 0x1C	; 28
    12e4:	95 e0       	ldi	r25, 0x05	; 5
    12e6:	91 83       	std	Z+1, r25	; 0x01
    12e8:	80 83       	st	Z, r24
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	93 83       	std	Z+3, r25	; 0x03
    12f0:	82 83       	std	Z+2, r24	; 0x02
    12f2:	b5 82       	std	Z+5, r11	; 0x05
    12f4:	a4 82       	std	Z+4, r10	; 0x04
    12f6:	37 83       	std	Z+7, r19	; 0x07
    12f8:	26 83       	std	Z+6, r18	; 0x06
    12fa:	51 87       	std	Z+9, r21	; 0x09
    12fc:	40 87       	std	Z+8, r20	; 0x08
    12fe:	73 87       	std	Z+11, r23	; 0x0b
    1300:	62 87       	std	Z+10, r22	; 0x0a
    1302:	b5 87       	std	Z+13, r27	; 0x0d
    1304:	a4 87       	std	Z+12, r26	; 0x0c
    1306:	17 87       	std	Z+15, r17	; 0x0f
    1308:	06 87       	std	Z+14, r16	; 0x0e
    130a:	f1 8a       	std	Z+17, r15	; 0x11
    130c:	e0 8a       	std	Z+16, r14	; 0x10
    130e:	d3 8a       	std	Z+19, r13	; 0x13
    1310:	c2 8a       	std	Z+18, r12	; 0x12
    1312:	0e 94 a3 00 	call	0x146	; 0x146 <sprintf>
    1316:	8d b7       	in	r24, 0x3d	; 61
    1318:	9e b7       	in	r25, 0x3e	; 62
    131a:	44 96       	adiw	r24, 0x14	; 20
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	9e bf       	out	0x3e, r25	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	8d bf       	out	0x3d, r24	; 61
			"dav=%c,nrfd=%c,ndac=%c, eoi=%c, ifc=%c,ren=%c,atn=%c,srq=%c\n\r",
			dav, nrfd, ndac, eoi, ifc, ren, atn, srq);
	uart_puts(buf);
    1326:	8c e1       	ldi	r24, 0x1C	; 28
    1328:	95 e0       	ldi	r25, 0x05	; 5
    132a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
}
    132e:	2a 96       	adiw	r28, 0x0a	; 10
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	1f 91       	pop	r17
    1340:	0f 91       	pop	r16
    1342:	ff 90       	pop	r15
    1344:	ef 90       	pop	r14
    1346:	df 90       	pop	r13
    1348:	cf 90       	pop	r12
    134a:	bf 90       	pop	r11
    134c:	af 90       	pop	r10
    134e:	08 95       	ret

00001350 <gpib_serial_poll>:
/**
 * execute serial polling
 *
 * We return the physical address of the device that created the SRQ.
 */
uchar gpib_serial_poll(void) {
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	27 97       	sbiw	r28, 0x07	; 7
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
	uchar b, e;
	uchar address = 0, found = 0, foundPhysical = 0;
    1364:	1d 82       	std	Y+5, r1	; 0x05
    1366:	1c 82       	std	Y+4, r1	; 0x04
    1368:	1b 82       	std	Y+3, r1	; 0x03
	int i;

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	cmd_buf[0] = G_CMD_UNT;
    136a:	8f e5       	ldi	r24, 0x5F	; 95
    136c:	80 93 b8 04 	sts	0x04B8, r24
	gpib_cmd(cmd_buf, 1);
    1370:	88 eb       	ldi	r24, 0xB8	; 184
    1372:	94 e0       	ldi	r25, 0x04	; 4
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>
	cmd_buf[0] = G_CMD_UNL;
    137c:	8f e3       	ldi	r24, 0x3F	; 63
    137e:	80 93 b8 04 	sts	0x04B8, r24
	gpib_cmd(cmd_buf, 1);
    1382:	88 eb       	ldi	r24, 0xB8	; 184
    1384:	94 e0       	ldi	r25, 0x04	; 4
    1386:	61 e0       	ldi	r22, 0x01	; 1
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>

	// serial poll enable
	// effect: all devices will send status byte instead of normal data when addressed
	// as talker
	//uart_puts("before SPE\r\n");
	cmd_buf[0] = G_CMD_SPE;
    138e:	88 e1       	ldi	r24, 0x18	; 24
    1390:	80 93 b8 04 	sts	0x04B8, r24
	gpib_cmd(cmd_buf, 1);
    1394:	88 eb       	ldi	r24, 0xB8	; 184
    1396:	94 e0       	ldi	r25, 0x04	; 4
    1398:	61 e0       	ldi	r22, 0x01	; 1
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != 0x00) && !found; i++) {
    13a0:	1a 82       	std	Y+2, r1	; 0x02
    13a2:	19 82       	std	Y+1, r1	; 0x01
    13a4:	8a c0       	rjmp	.+276    	; 0x14ba <gpib_serial_poll+0x16a>

		// set partner to talker mode
		address = address2TalkerAddress(controller.partners[i].primary);
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	9a 81       	ldd	r25, Y+2	; 0x02
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	fc 01       	movw	r30, r24
    13b0:	e9 59       	subi	r30, 0x99	; 153
    13b2:	fb 4f       	sbci	r31, 0xFB	; 251
    13b4:	80 81       	ld	r24, Z
    13b6:	80 5c       	subi	r24, 0xC0	; 192
    13b8:	8d 83       	std	Y+5, r24	; 0x05
		// TODO: handle secondary address
		cmd_buf[0] = address;
    13ba:	8d 81       	ldd	r24, Y+5	; 0x05
    13bc:	80 93 b8 04 	sts	0x04B8, r24
		//uart_puts("before talker address write\r\n");
		gpib_cmd(cmd_buf, 1);
    13c0:	88 eb       	ldi	r24, 0xB8	; 184
    13c2:	94 e0       	ldi	r25, 0x04	; 4
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>
		//uart_puts("after talker address write\r\n");

		// now receive data
		//uart_puts("before status byte receive\r\n");
		e = gpib_receive(&b);
    13cc:	ce 01       	movw	r24, r28
    13ce:	07 96       	adiw	r24, 0x07	; 7
    13d0:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <gpib_receive>
    13d4:	8e 83       	std	Y+6, r24	; 0x06
		//uart_puts("after status byte receive\r\n");
		// status byte is now in b
		sprintf((char*) cmd_buf,
    13d6:	8d 81       	ldd	r24, Y+5	; 0x05
    13d8:	88 2f       	mov	r24, r24
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	9c 01       	movw	r18, r24
    13de:	20 54       	subi	r18, 0x40	; 64
    13e0:	30 40       	sbci	r19, 0x00	; 0
    13e2:	8f 81       	ldd	r24, Y+7	; 0x07
    13e4:	48 2f       	mov	r20, r24
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	8d b7       	in	r24, 0x3d	; 61
    13ea:	9e b7       	in	r25, 0x3e	; 62
    13ec:	08 97       	sbiw	r24, 0x08	; 8
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	9e bf       	out	0x3e, r25	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	8d bf       	out	0x3d, r24	; 61
    13f8:	ed b7       	in	r30, 0x3d	; 61
    13fa:	fe b7       	in	r31, 0x3e	; 62
    13fc:	31 96       	adiw	r30, 0x01	; 1
    13fe:	88 eb       	ldi	r24, 0xB8	; 184
    1400:	94 e0       	ldi	r25, 0x04	; 4
    1402:	91 83       	std	Z+1, r25	; 0x01
    1404:	80 83       	st	Z, r24
    1406:	81 e4       	ldi	r24, 0x41	; 65
    1408:	91 e0       	ldi	r25, 0x01	; 1
    140a:	93 83       	std	Z+3, r25	; 0x03
    140c:	82 83       	std	Z+2, r24	; 0x02
    140e:	35 83       	std	Z+5, r19	; 0x05
    1410:	24 83       	std	Z+4, r18	; 0x04
    1412:	57 83       	std	Z+7, r21	; 0x07
    1414:	46 83       	std	Z+6, r20	; 0x06
    1416:	0e 94 a3 00 	call	0x146	; 0x146 <sprintf>
    141a:	8d b7       	in	r24, 0x3d	; 61
    141c:	9e b7       	in	r25, 0x3e	; 62
    141e:	08 96       	adiw	r24, 0x08	; 8
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	9e bf       	out	0x3e, r25	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	8d bf       	out	0x3d, r24	; 61
				"Status byte from device 0x%02x (physical address) = 0x%02x\n\r",
				TalkerAddress2Address(address), b);
		uart_puts((char*) cmd_buf);
    142a:	88 eb       	ldi	r24, 0xB8	; 184
    142c:	94 e0       	ldi	r25, 0x04	; 4
    142e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>

		// send UNT and UNL commands (unlisten and untalk)
		// effect: all talker stop talking and all listeners stop listening
		cmd_buf[0] = G_CMD_UNT;
    1432:	8f e5       	ldi	r24, 0x5F	; 95
    1434:	80 93 b8 04 	sts	0x04B8, r24
		gpib_cmd(cmd_buf, 1);
    1438:	88 eb       	ldi	r24, 0xB8	; 184
    143a:	94 e0       	ldi	r25, 0x04	; 4
    143c:	61 e0       	ldi	r22, 0x01	; 1
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>
		cmd_buf[0] = G_CMD_UNL;
    1444:	8f e3       	ldi	r24, 0x3F	; 63
    1446:	80 93 b8 04 	sts	0x04B8, r24
		gpib_cmd(cmd_buf, 1);
    144a:	88 eb       	ldi	r24, 0xB8	; 184
    144c:	94 e0       	ldi	r25, 0x04	; 4
    144e:	61 e0       	ldi	r22, 0x01	; 1
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>

		if (b & (1 << 6)) {
    1456:	8f 81       	ldd	r24, Y+7	; 0x07
    1458:	88 2f       	mov	r24, r24
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	80 74       	andi	r24, 0x40	; 64
    145e:	90 70       	andi	r25, 0x00	; 0
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	31 f1       	breq	.+76     	; 0x14b0 <gpib_serial_poll+0x160>
			found = address;
    1464:	8d 81       	ldd	r24, Y+5	; 0x05
    1466:	8c 83       	std	Y+4, r24	; 0x04
			foundPhysical = TalkerAddress2Address(found);
    1468:	8c 81       	ldd	r24, Y+4	; 0x04
    146a:	80 54       	subi	r24, 0x40	; 64
    146c:	8b 83       	std	Y+3, r24	; 0x03
			// bit 6 of status byte of SRQ emitter is 1
			// when reading status byte from emitter, he releases SRQ line (may also be tested here)
			sprintf((char*) cmd_buf,
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	00 d0       	rcall	.+0      	; 0x1476 <gpib_serial_poll+0x126>
    1476:	00 d0       	rcall	.+0      	; 0x1478 <gpib_serial_poll+0x128>
    1478:	00 d0       	rcall	.+0      	; 0x147a <gpib_serial_poll+0x12a>
    147a:	ed b7       	in	r30, 0x3d	; 61
    147c:	fe b7       	in	r31, 0x3e	; 62
    147e:	31 96       	adiw	r30, 0x01	; 1
    1480:	88 eb       	ldi	r24, 0xB8	; 184
    1482:	94 e0       	ldi	r25, 0x04	; 4
    1484:	91 83       	std	Z+1, r25	; 0x01
    1486:	80 83       	st	Z, r24
    1488:	8e e7       	ldi	r24, 0x7E	; 126
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	93 83       	std	Z+3, r25	; 0x03
    148e:	82 83       	std	Z+2, r24	; 0x02
    1490:	35 83       	std	Z+5, r19	; 0x05
    1492:	24 83       	std	Z+4, r18	; 0x04
    1494:	0e 94 a3 00 	call	0x146	; 0x146 <sprintf>
    1498:	8d b7       	in	r24, 0x3d	; 61
    149a:	9e b7       	in	r25, 0x3e	; 62
    149c:	06 96       	adiw	r24, 0x06	; 6
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	9e bf       	out	0x3e, r25	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	8d bf       	out	0x3d, r24	; 61
					"SRQ emitter is device = 0x%02x (physical address)\n\r",
					foundPhysical);
			uart_puts((char*) cmd_buf);
    14a8:	88 eb       	ldi	r24, 0xB8	; 184
    14aa:	94 e0       	ldi	r25, 0x04	; 4
    14ac:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
	cmd_buf[0] = G_CMD_SPE;
	gpib_cmd(cmd_buf, 1);
	//uart_puts("after SPE\r\n");

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != 0x00) && !found; i++) {
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	9a 81       	ldd	r25, Y+2	; 0x02
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	9a 83       	std	Y+2, r25	; 0x02
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	9a 81       	ldd	r25, Y+2	; 0x02
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	fc 01       	movw	r30, r24
    14c4:	e9 59       	subi	r30, 0x99	; 153
    14c6:	fb 4f       	sbci	r31, 0xFB	; 251
    14c8:	80 81       	ld	r24, Z
    14ca:	88 23       	and	r24, r24
    14cc:	21 f0       	breq	.+8      	; 0x14d6 <gpib_serial_poll+0x186>
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	88 23       	and	r24, r24
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <gpib_serial_poll+0x186>
    14d4:	68 cf       	rjmp	.-304    	; 0x13a6 <gpib_serial_poll+0x56>
		}
	}

	// serial poll disable
	// effect: all devices will return to normal behaviour as talker
	cmd_buf[0] = G_CMD_SPD;
    14d6:	89 e1       	ldi	r24, 0x19	; 25
    14d8:	80 93 b8 04 	sts	0x04B8, r24
	//uart_puts("before SPD\r\n");
	gpib_cmd(cmd_buf, 1);
    14dc:	88 eb       	ldi	r24, 0xB8	; 184
    14de:	94 e0       	ldi	r25, 0x04	; 4
    14e0:	61 e0       	ldi	r22, 0x01	; 1
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>
	//uart_puts("after SPD\r\n");

	// return SRQ emitter address if found
	return foundPhysical;
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14ea:	27 96       	adiw	r28, 0x07	; 7
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <gpib_set_partner_pad>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_pad(uchar address) {
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	0f 92       	push	r0
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	89 83       	std	Y+1, r24	; 0x01
	controller.partner.primary = address;
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	80 93 63 04 	sts	0x0463, r24
}
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <gpib_set_partner_sad>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_sad(uchar address) {
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	0f 92       	push	r0
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	89 83       	std	Y+1, r24	; 0x01
	controller.partner.secondary = address;
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	80 93 64 04 	sts	0x0464, r24
}
    1528:	0f 90       	pop	r0
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <gpib_get_partner_pad>:

/**
 * Get primary address of device currently controlled.
 * \returns primary address Address of device.
 */
uchar gpib_get_partner_pad(void) {
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.primary;
    1538:	80 91 63 04 	lds	r24, 0x0463
}
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <gpib_get_partner_sad>:

/**
 * Get secondary address of device currently controlled.
 * \returns secondary address Address of device.
 */
uchar gpib_get_partner_sad(void) {
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.secondary;
    154a:	80 91 64 04 	lds	r24, 0x0464
}
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <gpib_get_address>:

/**
 * Get controller address.
 * \returns address of controller.
 */
uchar gpib_get_address(void) {
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
	return controller.myaddress;
    155c:	80 91 62 04 	lds	r24, 0x0462
}
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <gpib_clear_partners>:

void gpib_clear_partners() {
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	00 d0       	rcall	.+0      	; 0x156c <gpib_clear_partners+0x6>
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < MAX_PARTNER; i++) {
    1570:	1a 82       	std	Y+2, r1	; 0x02
    1572:	19 82       	std	Y+1, r1	; 0x01
    1574:	0e c0       	rjmp	.+28     	; 0x1592 <gpib_clear_partners+0x2c>
		controller.partners[i].primary = ADDRESS_NOT_SET;
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	9a 81       	ldd	r25, Y+2	; 0x02
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	fc 01       	movw	r30, r24
    1580:	e9 59       	subi	r30, 0x99	; 153
    1582:	fb 4f       	sbci	r31, 0xFB	; 251
    1584:	8f ef       	ldi	r24, 0xFF	; 255
    1586:	80 83       	st	Z, r24
uchar gpib_get_address(void) {
	return controller.myaddress;
}

void gpib_clear_partners() {
	for (int i = 0; i < MAX_PARTNER; i++) {
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	9a 81       	ldd	r25, Y+2	; 0x02
    158c:	01 96       	adiw	r24, 0x01	; 1
    158e:	9a 83       	std	Y+2, r25	; 0x02
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	9a 81       	ldd	r25, Y+2	; 0x02
    1596:	85 30       	cpi	r24, 0x05	; 5
    1598:	91 05       	cpc	r25, r1
    159a:	6c f3       	brlt	.-38     	; 0x1576 <gpib_clear_partners+0x10>
		controller.partners[i].primary = ADDRESS_NOT_SET;
	}
}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <gpib_set_flavour>:

void gpib_set_flavour(uchar flavour) {
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	0f 92       	push	r0
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	89 83       	std	Y+1, r24	; 0x01
	controller.flavour = flavour;
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	80 93 66 04 	sts	0x0466, r24
}
    15b8:	0f 90       	pop	r0
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <gpib_get_flavour>:

uchar gpib_get_flavour(void) {
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
	return controller.flavour;
    15c8:	80 91 66 04 	lds	r24, 0x0466
}
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <handle_internal_commands>:
int rs232_remote_echo = 1;

/**
 * Handles builtin commands.
 */
void handle_internal_commands(uchar *commandString) {
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	a5 97       	sbiw	r28, 0x25	; 37
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	9b a3       	std	Y+35, r25	; 0x23
    15e8:	8a a3       	std	Y+34, r24	; 0x22
	uchar sbuf[32];
	uchar val;

	switch (buf[1]) {
    15ea:	80 91 1d 05 	lds	r24, 0x051D
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	3d a3       	std	Y+37, r19	; 0x25
    15f4:	2c a3       	std	Y+36, r18	; 0x24
    15f6:	8c a1       	ldd	r24, Y+36	; 0x24
    15f8:	9d a1       	ldd	r25, Y+37	; 0x25
    15fa:	88 36       	cpi	r24, 0x68	; 104
    15fc:	91 05       	cpc	r25, r1
    15fe:	09 f4       	brne	.+2      	; 0x1602 <handle_internal_commands+0x30>
    1600:	cd c0       	rjmp	.+410    	; 0x179c <handle_internal_commands+0x1ca>
    1602:	2c a1       	ldd	r18, Y+36	; 0x24
    1604:	3d a1       	ldd	r19, Y+37	; 0x25
    1606:	29 36       	cpi	r18, 0x69	; 105
    1608:	31 05       	cpc	r19, r1
    160a:	94 f4       	brge	.+36     	; 0x1630 <handle_internal_commands+0x5e>
    160c:	8c a1       	ldd	r24, Y+36	; 0x24
    160e:	9d a1       	ldd	r25, Y+37	; 0x25
    1610:	8d 32       	cpi	r24, 0x2D	; 45
    1612:	91 05       	cpc	r25, r1
    1614:	09 f4       	brne	.+2      	; 0x1618 <handle_internal_commands+0x46>
    1616:	98 c0       	rjmp	.+304    	; 0x1748 <handle_internal_commands+0x176>
    1618:	2c a1       	ldd	r18, Y+36	; 0x24
    161a:	3d a1       	ldd	r19, Y+37	; 0x25
    161c:	21 36       	cpi	r18, 0x61	; 97
    161e:	31 05       	cpc	r19, r1
    1620:	99 f0       	breq	.+38     	; 0x1648 <handle_internal_commands+0x76>
    1622:	8c a1       	ldd	r24, Y+36	; 0x24
    1624:	9d a1       	ldd	r25, Y+37	; 0x25
    1626:	8b 32       	cpi	r24, 0x2B	; 43
    1628:	91 05       	cpc	r25, r1
    162a:	09 f4       	brne	.+2      	; 0x162e <handle_internal_commands+0x5c>
    162c:	62 c0       	rjmp	.+196    	; 0x16f2 <handle_internal_commands+0x120>
    162e:	bc c0       	rjmp	.+376    	; 0x17a8 <handle_internal_commands+0x1d6>
    1630:	2c a1       	ldd	r18, Y+36	; 0x24
    1632:	3d a1       	ldd	r19, Y+37	; 0x25
    1634:	29 36       	cpi	r18, 0x69	; 105
    1636:	31 05       	cpc	r19, r1
    1638:	09 f4       	brne	.+2      	; 0x163c <handle_internal_commands+0x6a>
    163a:	b3 c0       	rjmp	.+358    	; 0x17a2 <handle_internal_commands+0x1d0>
    163c:	8c a1       	ldd	r24, Y+36	; 0x24
    163e:	9d a1       	ldd	r25, Y+37	; 0x25
    1640:	83 37       	cpi	r24, 0x73	; 115
    1642:	91 05       	cpc	r25, r1
    1644:	61 f1       	breq	.+88     	; 0x169e <handle_internal_commands+0xcc>
    1646:	b0 c0       	rjmp	.+352    	; 0x17a8 <handle_internal_commands+0x1d6>
	case 'a':
		/* set partner address */
		val = atoi((char*) (&(buf[2])));
    1648:	8e e1       	ldi	r24, 0x1E	; 30
    164a:	95 e0       	ldi	r25, 0x05	; 5
    164c:	0e 94 69 00 	call	0xd2	; 0xd2 <atoi>
    1650:	89 83       	std	Y+1, r24	; 0x01
		sprintf(sbuf, "Set partner address to %u\n\r", val);
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	00 d0       	rcall	.+0      	; 0x165a <handle_internal_commands+0x88>
    165a:	00 d0       	rcall	.+0      	; 0x165c <handle_internal_commands+0x8a>
    165c:	00 d0       	rcall	.+0      	; 0x165e <handle_internal_commands+0x8c>
    165e:	ed b7       	in	r30, 0x3d	; 61
    1660:	fe b7       	in	r31, 0x3e	; 62
    1662:	31 96       	adiw	r30, 0x01	; 1
    1664:	ce 01       	movw	r24, r28
    1666:	02 96       	adiw	r24, 0x02	; 2
    1668:	91 83       	std	Z+1, r25	; 0x01
    166a:	80 83       	st	Z, r24
    166c:	82 eb       	ldi	r24, 0xB2	; 178
    166e:	91 e0       	ldi	r25, 0x01	; 1
    1670:	93 83       	std	Z+3, r25	; 0x03
    1672:	82 83       	std	Z+2, r24	; 0x02
    1674:	35 83       	std	Z+5, r19	; 0x05
    1676:	24 83       	std	Z+4, r18	; 0x04
    1678:	0e 94 a3 00 	call	0x146	; 0x146 <sprintf>
    167c:	2d b7       	in	r18, 0x3d	; 61
    167e:	3e b7       	in	r19, 0x3e	; 62
    1680:	2a 5f       	subi	r18, 0xFA	; 250
    1682:	3f 4f       	sbci	r19, 0xFF	; 255
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	3e bf       	out	0x3e, r19	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	2d bf       	out	0x3d, r18	; 61
		uart_puts(sbuf);
    168e:	ce 01       	movw	r24, r28
    1690:	02 96       	adiw	r24, 0x02	; 2
    1692:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
		gpib_set_partner_pad(val);
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <gpib_set_partner_pad>
    169c:	8b c0       	rjmp	.+278    	; 0x17b4 <handle_internal_commands+0x1e2>
		break;
	case 's':
		/* set partner secondary address */
		val = atoi((char*) (&(buf[2])));
    169e:	8e e1       	ldi	r24, 0x1E	; 30
    16a0:	95 e0       	ldi	r25, 0x05	; 5
    16a2:	0e 94 69 00 	call	0xd2	; 0xd2 <atoi>
    16a6:	89 83       	std	Y+1, r24	; 0x01
		sprintf(sbuf, "Set partner secondary address to %u\n\r", val);
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <handle_internal_commands+0xde>
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <handle_internal_commands+0xe0>
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <handle_internal_commands+0xe2>
    16b4:	ed b7       	in	r30, 0x3d	; 61
    16b6:	fe b7       	in	r31, 0x3e	; 62
    16b8:	31 96       	adiw	r30, 0x01	; 1
    16ba:	ce 01       	movw	r24, r28
    16bc:	02 96       	adiw	r24, 0x02	; 2
    16be:	91 83       	std	Z+1, r25	; 0x01
    16c0:	80 83       	st	Z, r24
    16c2:	8e ec       	ldi	r24, 0xCE	; 206
    16c4:	91 e0       	ldi	r25, 0x01	; 1
    16c6:	93 83       	std	Z+3, r25	; 0x03
    16c8:	82 83       	std	Z+2, r24	; 0x02
    16ca:	35 83       	std	Z+5, r19	; 0x05
    16cc:	24 83       	std	Z+4, r18	; 0x04
    16ce:	0e 94 a3 00 	call	0x146	; 0x146 <sprintf>
    16d2:	8d b7       	in	r24, 0x3d	; 61
    16d4:	9e b7       	in	r25, 0x3e	; 62
    16d6:	06 96       	adiw	r24, 0x06	; 6
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	9e bf       	out	0x3e, r25	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	8d bf       	out	0x3d, r24	; 61
		uart_puts(sbuf);
    16e2:	ce 01       	movw	r24, r28
    16e4:	02 96       	adiw	r24, 0x02	; 2
    16e6:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
		gpib_set_partner_sad(val);
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpib_set_partner_sad>
    16f0:	61 c0       	rjmp	.+194    	; 0x17b4 <handle_internal_commands+0x1e2>
		break;
	case '+':
		/* add device */
		val = atoi((char*) (&(buf[2])));
    16f2:	8e e1       	ldi	r24, 0x1E	; 30
    16f4:	95 e0       	ldi	r25, 0x05	; 5
    16f6:	0e 94 69 00 	call	0xd2	; 0xd2 <atoi>
    16fa:	89 83       	std	Y+1, r24	; 0x01
		sprintf(sbuf, "Added device with address %u\n\r", val);
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	00 d0       	rcall	.+0      	; 0x1704 <handle_internal_commands+0x132>
    1704:	00 d0       	rcall	.+0      	; 0x1706 <handle_internal_commands+0x134>
    1706:	00 d0       	rcall	.+0      	; 0x1708 <handle_internal_commands+0x136>
    1708:	ed b7       	in	r30, 0x3d	; 61
    170a:	fe b7       	in	r31, 0x3e	; 62
    170c:	31 96       	adiw	r30, 0x01	; 1
    170e:	ce 01       	movw	r24, r28
    1710:	02 96       	adiw	r24, 0x02	; 2
    1712:	91 83       	std	Z+1, r25	; 0x01
    1714:	80 83       	st	Z, r24
    1716:	84 ef       	ldi	r24, 0xF4	; 244
    1718:	91 e0       	ldi	r25, 0x01	; 1
    171a:	93 83       	std	Z+3, r25	; 0x03
    171c:	82 83       	std	Z+2, r24	; 0x02
    171e:	35 83       	std	Z+5, r19	; 0x05
    1720:	24 83       	std	Z+4, r18	; 0x04
    1722:	0e 94 a3 00 	call	0x146	; 0x146 <sprintf>
    1726:	2d b7       	in	r18, 0x3d	; 61
    1728:	3e b7       	in	r19, 0x3e	; 62
    172a:	2a 5f       	subi	r18, 0xFA	; 250
    172c:	3f 4f       	sbci	r19, 0xFF	; 255
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	3e bf       	out	0x3e, r19	; 62
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	2d bf       	out	0x3d, r18	; 61
		uart_puts(sbuf);
    1738:	ce 01       	movw	r24, r28
    173a:	02 96       	adiw	r24, 0x02	; 2
    173c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
		gpib_add_partner_sad(val);
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	0e 94 b9 04 	call	0x972	; 0x972 <gpib_add_partner_sad>
    1746:	36 c0       	rjmp	.+108    	; 0x17b4 <handle_internal_commands+0x1e2>
		break;
	case '-':
		/* add device */
		val = atoi((char*) (&(buf[2])));
    1748:	8e e1       	ldi	r24, 0x1E	; 30
    174a:	95 e0       	ldi	r25, 0x05	; 5
    174c:	0e 94 69 00 	call	0xd2	; 0xd2 <atoi>
    1750:	89 83       	std	Y+1, r24	; 0x01
		sprintf(sbuf, "Removed device with address %u\n\r", val);
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	00 d0       	rcall	.+0      	; 0x175a <handle_internal_commands+0x188>
    175a:	00 d0       	rcall	.+0      	; 0x175c <handle_internal_commands+0x18a>
    175c:	00 d0       	rcall	.+0      	; 0x175e <handle_internal_commands+0x18c>
    175e:	ed b7       	in	r30, 0x3d	; 61
    1760:	fe b7       	in	r31, 0x3e	; 62
    1762:	31 96       	adiw	r30, 0x01	; 1
    1764:	ce 01       	movw	r24, r28
    1766:	02 96       	adiw	r24, 0x02	; 2
    1768:	91 83       	std	Z+1, r25	; 0x01
    176a:	80 83       	st	Z, r24
    176c:	83 e1       	ldi	r24, 0x13	; 19
    176e:	92 e0       	ldi	r25, 0x02	; 2
    1770:	93 83       	std	Z+3, r25	; 0x03
    1772:	82 83       	std	Z+2, r24	; 0x02
    1774:	35 83       	std	Z+5, r19	; 0x05
    1776:	24 83       	std	Z+4, r18	; 0x04
    1778:	0e 94 a3 00 	call	0x146	; 0x146 <sprintf>
    177c:	8d b7       	in	r24, 0x3d	; 61
    177e:	9e b7       	in	r25, 0x3e	; 62
    1780:	06 96       	adiw	r24, 0x06	; 6
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	9e bf       	out	0x3e, r25	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	8d bf       	out	0x3d, r24	; 61
		uart_puts(sbuf);
    178c:	ce 01       	movw	r24, r28
    178e:	02 96       	adiw	r24, 0x02	; 2
    1790:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
		gpib_remove_partner_sad(val);
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	0e 94 c4 04 	call	0x988	; 0x988 <gpib_remove_partner_sad>
    179a:	0c c0       	rjmp	.+24     	; 0x17b4 <handle_internal_commands+0x1e2>
		break;
	case 'h':
		/* print some usage infos */
		printHelp();
    179c:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <printHelp>
    17a0:	09 c0       	rjmp	.+18     	; 0x17b4 <handle_internal_commands+0x1e2>
		break;
	case 'i':
		gpib_info();
    17a2:	0e 94 55 08 	call	0x10aa	; 0x10aa <gpib_info>
    17a6:	06 c0       	rjmp	.+12     	; 0x17b4 <handle_internal_commands+0x1e2>
		break;
	default:
		uart_puts("unknown command\n\r");
    17a8:	84 e3       	ldi	r24, 0x34	; 52
    17aa:	92 e0       	ldi	r25, 0x02	; 2
    17ac:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
		printHelp();
    17b0:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <printHelp>
		break;
	}
}
    17b4:	a5 96       	adiw	r28, 0x25	; 37
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	08 95       	ret

000017c6 <send_command>:
/**
 * Sends a command.
 *
 * Returns 1 if command is a query, 0 otherwise.
 */
uchar send_command(uchar *commandString) {
    17c6:	df 93       	push	r29
    17c8:	cf 93       	push	r28
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	2b 97       	sbiw	r28, 0x0b	; 11
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	9b 87       	std	Y+11, r25	; 0x0b
    17dc:	8a 87       	std	Y+10, r24	; 0x0a
	uchar controlString[8];
	uchar is_query;

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
    17de:	8f e5       	ldi	r24, 0x5F	; 95
    17e0:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    17e2:	ce 01       	movw	r24, r28
    17e4:	02 96       	adiw	r24, 0x02	; 2
    17e6:	61 e0       	ldi	r22, 0x01	; 1
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    17ee:	8f e3       	ldi	r24, 0x3F	; 63
    17f0:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    17f2:	ce 01       	movw	r24, r28
    17f4:	02 96       	adiw	r24, 0x02	; 2
    17f6:	61 e0       	ldi	r22, 0x01	; 1
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>

	// set device to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_partner_pad());
    17fe:	0e 94 98 0a 	call	0x1530	; 0x1530 <gpib_get_partner_pad>
    1802:	80 5e       	subi	r24, 0xE0	; 224
    1804:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1806:	ce 01       	movw	r24, r28
    1808:	02 96       	adiw	r24, 0x02	; 2
    180a:	61 e0       	ldi	r22, 0x01	; 1
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>
	// send secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
    1812:	0e 94 a1 0a 	call	0x1542	; 0x1542 <gpib_get_partner_sad>
    1816:	8f 3f       	cpi	r24, 0xFF	; 255
    1818:	51 f0       	breq	.+20     	; 0x182e <send_command+0x68>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
    181a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <gpib_get_partner_sad>
    181e:	80 66       	ori	r24, 0x60	; 96
    1820:	8a 83       	std	Y+2, r24	; 0x02
		gpib_cmd(controlString, 1);
    1822:	ce 01       	movw	r24, r28
    1824:	02 96       	adiw	r24, 0x02	; 2
    1826:	61 e0       	ldi	r22, 0x01	; 1
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>
	}

	// set myself (controller) to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_address());
    182e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <gpib_get_address>
    1832:	80 5c       	subi	r24, 0xC0	; 192
    1834:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1836:	ce 01       	movw	r24, r28
    1838:	02 96       	adiw	r24, 0x02	; 2
    183a:	61 e0       	ldi	r22, 0x01	; 1
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>

	// put out command to listeners
	uart_puts("\n\rcommand: ");
    1842:	86 e4       	ldi	r24, 0x46	; 70
    1844:	92 e0       	ldi	r25, 0x02	; 2
    1846:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
	uart_puts((char*) commandString);
    184a:	8a 85       	ldd	r24, Y+10	; 0x0a
    184c:	9b 85       	ldd	r25, Y+11	; 0x0b
    184e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
	uart_puts("\n\r");
    1852:	82 e5       	ldi	r24, 0x52	; 82
    1854:	92 e0       	ldi	r25, 0x02	; 2
    1856:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
	// gpib bus write
	gpib_write(commandString, 0);
    185a:	8a 85       	ldd	r24, Y+10	; 0x0a
    185c:	9b 85       	ldd	r25, Y+11	; 0x0b
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	0e 94 68 05 	call	0xad0	; 0xad0 <gpib_write>

	// check if query or command only
	if (strchr((char*) commandString, '?') != NULL) {
    1866:	8a 85       	ldd	r24, Y+10	; 0x0a
    1868:	9b 85       	ldd	r25, Y+11	; 0x0b
    186a:	6f e3       	ldi	r22, 0x3F	; 63
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	0e 94 87 00 	call	0x10e	; 0x10e <strchr>
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	39 f0       	breq	.+14     	; 0x1884 <send_command+0xbe>
		uart_puts("Query. Will check for answer.\n\r");
    1876:	85 e5       	ldi	r24, 0x55	; 85
    1878:	92 e0       	ldi	r25, 0x02	; 2
    187a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
		is_query = 1;
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	05 c0       	rjmp	.+10     	; 0x188e <send_command+0xc8>
	} else {
		uart_puts("Command only.\n\r");
    1884:	85 e7       	ldi	r24, 0x75	; 117
    1886:	92 e0       	ldi	r25, 0x02	; 2
    1888:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
		is_query = 0;
    188c:	19 82       	std	Y+1, r1	; 0x01
	}
	return is_query;
    188e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1890:	2b 96       	adiw	r28, 0x0b	; 11
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	de bf       	out	0x3e, r29	; 62
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	cd bf       	out	0x3d, r28	; 61
    189c:	cf 91       	pop	r28
    189e:	df 91       	pop	r29
    18a0:	08 95       	ret

000018a2 <receiveAnswer>:

/**
 * Receives answer after command was sent.
 */
void receiveAnswer() {
    18a2:	df 93       	push	r29
    18a4:	cf 93       	push	r28
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	2a 97       	sbiw	r28, 0x0a	; 10
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	uchar b, e;

	// UNT and UNL
	controlString[0] = G_CMD_UNT;
    18b6:	8f e5       	ldi	r24, 0x5F	; 95
    18b8:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    18ba:	ce 01       	movw	r24, r28
    18bc:	02 96       	adiw	r24, 0x02	; 2
    18be:	61 e0       	ldi	r22, 0x01	; 1
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    18c6:	8f e3       	ldi	r24, 0x3F	; 63
    18c8:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    18ca:	ce 01       	movw	r24, r28
    18cc:	02 96       	adiw	r24, 0x02	; 2
    18ce:	61 e0       	ldi	r22, 0x01	; 1
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>

	// set myself (controller) to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_address());
    18d6:	0e 94 aa 0a 	call	0x1554	; 0x1554 <gpib_get_address>
    18da:	80 5e       	subi	r24, 0xE0	; 224
    18dc:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    18de:	ce 01       	movw	r24, r28
    18e0:	02 96       	adiw	r24, 0x02	; 2
    18e2:	61 e0       	ldi	r22, 0x01	; 1
    18e4:	70 e0       	ldi	r23, 0x00	; 0
    18e6:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>

	// set device to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_partner_pad());
    18ea:	0e 94 98 0a 	call	0x1530	; 0x1530 <gpib_get_partner_pad>
    18ee:	80 5c       	subi	r24, 0xC0	; 192
    18f0:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    18f2:	ce 01       	movw	r24, r28
    18f4:	02 96       	adiw	r24, 0x02	; 2
    18f6:	61 e0       	ldi	r22, 0x01	; 1
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>
	// secondary address if required
	if (gpib_get_partner_sad() != ADDRESS_NOT_SET) {
    18fe:	0e 94 a1 0a 	call	0x1542	; 0x1542 <gpib_get_partner_sad>
    1902:	8f 3f       	cpi	r24, 0xFF	; 255
    1904:	51 f0       	breq	.+20     	; 0x191a <receiveAnswer+0x78>
		controlString[0] = secondaryAdressToAdressByte(gpib_get_partner_sad());
    1906:	0e 94 a1 0a 	call	0x1542	; 0x1542 <gpib_get_partner_sad>
    190a:	80 66       	ori	r24, 0x60	; 96
    190c:	8a 83       	std	Y+2, r24	; 0x02
		gpib_cmd(controlString, 1);
    190e:	ce 01       	movw	r24, r28
    1910:	02 96       	adiw	r24, 0x02	; 2
    1912:	61 e0       	ldi	r22, 0x01	; 1
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>
	}

	// read the answer until EOI is detected (then e becomes true)
	do {
		// gpib bus receive
		e = gpib_receive(&b);
    191a:	ce 01       	movw	r24, r28
    191c:	0a 96       	adiw	r24, 0x0a	; 10
    191e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <gpib_receive>
    1922:	89 83       	std	Y+1, r24	; 0x01
		// write out character
		uart_putc(b);
    1924:	8a 85       	ldd	r24, Y+10	; 0x0a
    1926:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <uart_putc>
		//sprintf((char*)buf,"%02x - %c\n\r", b, b);
		//uart_puts((char*)buf);
	} while (!e);
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	88 23       	and	r24, r24
    192e:	a9 f3       	breq	.-22     	; 0x191a <receiveAnswer+0x78>

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
    1930:	8f e5       	ldi	r24, 0x5F	; 95
    1932:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1934:	ce 01       	movw	r24, r28
    1936:	02 96       	adiw	r24, 0x02	; 2
    1938:	61 e0       	ldi	r22, 0x01	; 1
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>
	controlString[0] = G_CMD_UNL;
    1940:	8f e3       	ldi	r24, 0x3F	; 63
    1942:	8a 83       	std	Y+2, r24	; 0x02
	gpib_cmd(controlString, 1);
    1944:	ce 01       	movw	r24, r28
    1946:	02 96       	adiw	r24, 0x02	; 2
    1948:	61 e0       	ldi	r22, 0x01	; 1
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	0e 94 81 05 	call	0xb02	; 0xb02 <gpib_cmd>
}
    1950:	2a 96       	adiw	r28, 0x0a	; 10
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <srq_occured>:

/**
 * Check if a SRQ occured
 */
uchar srq_occured(int* old_time) {
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	00 d0       	rcall	.+0      	; 0x1968 <srq_occured+0x6>
    1968:	0f 92       	push	r0
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	9b 83       	std	Y+3, r25	; 0x03
    1970:	8a 83       	std	Y+2, r24	; 0x02
	uchar srq = 0;
    1972:	19 82       	std	Y+1, r1	; 0x01
	if (*old_time == 0) {
    1974:	ea 81       	ldd	r30, Y+2	; 0x02
    1976:	fb 81       	ldd	r31, Y+3	; 0x03
    1978:	80 81       	ld	r24, Z
    197a:	91 81       	ldd	r25, Z+1	; 0x01
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	49 f4       	brne	.+18     	; 0x1992 <srq_occured+0x30>
		// old_time value initialization on first call with value s
		*old_time = s;
    1980:	80 91 6d 05 	lds	r24, 0x056D
    1984:	88 2f       	mov	r24, r24
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	ea 81       	ldd	r30, Y+2	; 0x02
    198a:	fb 81       	ldd	r31, Y+3	; 0x03
    198c:	91 83       	std	Z+1, r25	; 0x01
    198e:	80 83       	st	Z, r24
    1990:	1e c0       	rjmp	.+60     	; 0x19ce <srq_occured+0x6c>
	} else {
		if (s > *old_time) {
    1992:	80 91 6d 05 	lds	r24, 0x056D
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	ea 81       	ldd	r30, Y+2	; 0x02
    199c:	fb 81       	ldd	r31, Y+3	; 0x03
    199e:	80 81       	ld	r24, Z
    19a0:	91 81       	ldd	r25, Z+1	; 0x01
    19a2:	82 17       	cp	r24, r18
    19a4:	93 07       	cpc	r25, r19
    19a6:	9c f4       	brge	.+38     	; 0x19ce <srq_occured+0x6c>
			// some time has passed - check if srq was set
			srq = bit_is_clear(PIND, G_SRQ);
    19a8:	e0 e3       	ldi	r30, 0x30	; 48
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	88 2f       	mov	r24, r24
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	80 74       	andi	r24, 0x40	; 64
    19b4:	90 70       	andi	r25, 0x00	; 0
    19b6:	19 82       	std	Y+1, r1	; 0x01
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	11 f4       	brne	.+4      	; 0x19c0 <srq_occured+0x5e>
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	89 83       	std	Y+1, r24	; 0x01
			if (srq)
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	88 23       	and	r24, r24
    19c4:	21 f0       	breq	.+8      	; 0x19ce <srq_occured+0x6c>
				uart_puts("\n\rSRQ detected.\n\r");
    19c6:	85 e8       	ldi	r24, 0x85	; 133
    19c8:	92 e0       	ldi	r25, 0x02	; 2
    19ca:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
		}
	}
	return srq;
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <handle_srq>:

/**
 * Handles SRQs by doing serial poll
 *
 */
uchar handle_srq(uchar *buf, int *buf_ptr) {
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <handle_srq+0x6>
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <handle_srq+0x8>
    19e4:	0f 92       	push	r0
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	9b 83       	std	Y+3, r25	; 0x03
    19ec:	8a 83       	std	Y+2, r24	; 0x02
    19ee:	7d 83       	std	Y+5, r23	; 0x05
    19f0:	6c 83       	std	Y+4, r22	; 0x04
	uchar command_ready = 0;
    19f2:	19 82       	std	Y+1, r1	; 0x01

	// handle srq with serial poll
	gpib_set_partner_pad(gpib_serial_poll());
    19f4:	0e 94 a8 09 	call	0x1350	; 0x1350 <gpib_serial_poll>
    19f8:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <gpib_set_partner_pad>

	if (gpib_get_flavour() == FLAVOUR_TEK) {
    19fc:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <gpib_get_flavour>
    1a00:	81 30       	cpi	r24, 0x01	; 1
    1a02:	79 f5       	brne	.+94     	; 0x1a62 <handle_srq+0x86>
		// Tek: check status for reason
		buf[0] = 'E';
    1a04:	ea 81       	ldd	r30, Y+2	; 0x02
    1a06:	fb 81       	ldd	r31, Y+3	; 0x03
    1a08:	85 e4       	ldi	r24, 0x45	; 69
    1a0a:	80 83       	st	Z, r24
		buf[1] = 'V';
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a10:	fc 01       	movw	r30, r24
    1a12:	31 96       	adiw	r30, 0x01	; 1
    1a14:	86 e5       	ldi	r24, 0x56	; 86
    1a16:	80 83       	st	Z, r24
		buf[2] = 'E';
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	32 96       	adiw	r30, 0x02	; 2
    1a20:	85 e4       	ldi	r24, 0x45	; 69
    1a22:	80 83       	st	Z, r24
		buf[3] = 'N';
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	9b 81       	ldd	r25, Y+3	; 0x03
    1a28:	fc 01       	movw	r30, r24
    1a2a:	33 96       	adiw	r30, 0x03	; 3
    1a2c:	8e e4       	ldi	r24, 0x4E	; 78
    1a2e:	80 83       	st	Z, r24
		buf[4] = 'T';
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	9b 81       	ldd	r25, Y+3	; 0x03
    1a34:	fc 01       	movw	r30, r24
    1a36:	34 96       	adiw	r30, 0x04	; 4
    1a38:	84 e5       	ldi	r24, 0x54	; 84
    1a3a:	80 83       	st	Z, r24
		buf[5] = '?';
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a40:	fc 01       	movw	r30, r24
    1a42:	35 96       	adiw	r30, 0x05	; 5
    1a44:	8f e3       	ldi	r24, 0x3F	; 63
    1a46:	80 83       	st	Z, r24
		buf[6] = '\0';
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	36 96       	adiw	r30, 0x06	; 6
    1a50:	10 82       	st	Z, r1
		*buf_ptr = 6;
    1a52:	ec 81       	ldd	r30, Y+4	; 0x04
    1a54:	fd 81       	ldd	r31, Y+5	; 0x05
    1a56:	86 e0       	ldi	r24, 0x06	; 6
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	91 83       	std	Z+1, r25	; 0x01
    1a5c:	80 83       	st	Z, r24
		command_ready = 1;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	89 83       	std	Y+1, r24	; 0x01
	}
	return command_ready;
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <main>:
 * \brief Implementation of GPIB controller. Reads a command from RS232, sends it via bus.
 * If The command contains a '?', an answer from the device is expected and read in. The
 * answer then is printed out. If an SRQ occured, a serial poll is initiated.
 * 
 */
int main(void) {
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <main+0x6>
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <main+0x8>
    1a7c:	0f 92       	push	r0
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
	int old_time = 0;
    1a82:	1d 82       	std	Y+5, r1	; 0x05
    1a84:	1c 82       	std	Y+4, r1	; 0x04
	uchar is_query = 0;
    1a86:	1b 82       	std	Y+3, r1	; 0x03
	uchar command_ready = 0;
    1a88:	1a 82       	std	Y+2, r1	; 0x02
	uchar do_prompt = 1;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	89 83       	std	Y+1, r24	; 0x01

	/*
	 *  Initialize UART library, pass baudrate and avr cpu clock 
	 *  with the macro UART_BAUD_SELECT()
	 */DI();
    1a8e:	8c e0       	ldi	r24, 0x0C	; 12
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <uart_init>

	/*
	 * now enable interrupt, since UART and TIMER library is interrupt controlled
	 */sei();
    1a96:	78 94       	sei

	/** print some usage infos */
	printHelp();
    1a98:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <printHelp>
	/*
	 * WRITE: Controller talks and listens
	 */

	// init timer for timeout detection
	timer16_init();
    1a9c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <timer16_init>

	// init gpib lines
	gpib_init();
    1aa0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <gpib_init>
	// init controller part - assign bus 
	gpib_controller_assign(0x00);
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	0e 94 ce 04 	call	0x99c	; 0x99c <gpib_controller_assign>
	 * 3. if command was a query, read the answer from device (become listener and set device to talker)
	 * 	4. check if SRQ occured and handle that
	 */
	for (;;) {

		if (do_prompt) {
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	88 23       	and	r24, r24
    1aae:	29 f0       	breq	.+10     	; 0x1aba <main+0x46>
			uart_puts("> ");
    1ab0:	87 e9       	ldi	r24, 0x97	; 151
    1ab2:	92 e0       	ldi	r25, 0x02	; 2
    1ab4:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
			do_prompt = 0;
    1ab8:	19 82       	std	Y+1, r1	; 0x01
		}
		// input processing via rs232
		// command_ready may already been set by SRQ that occured before
		if (!command_ready)
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	88 23       	and	r24, r24
    1abe:	19 f4       	brne	.+6      	; 0x1ac6 <main+0x52>
			command_ready = input_process();
    1ac0:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <input_process>
    1ac4:	8a 83       	std	Y+2, r24	; 0x02

		if (command_ready) {
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	88 23       	and	r24, r24
    1aca:	21 f0       	breq	.+8      	; 0x1ad4 <main+0x60>
			uart_puts("\n\r");
    1acc:	82 e5       	ldi	r24, 0x52	; 82
    1ace:	92 e0       	ldi	r25, 0x02	; 2
    1ad0:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
		}

		// check for internal commands
		if (command_ready && buf[0] == '.') {
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	88 23       	and	r24, r24
    1ad8:	81 f0       	breq	.+32     	; 0x1afa <main+0x86>
    1ada:	80 91 1c 05 	lds	r24, 0x051C
    1ade:	8e 32       	cpi	r24, 0x2E	; 46
    1ae0:	61 f4       	brne	.+24     	; 0x1afa <main+0x86>
			// all internal cmds start with a '.'
			//uart_puts("\n\rInternal command: ");
			//uart_puts((char*) buf);
			//uart_puts("\n\r");
			handle_internal_commands(buf);
    1ae2:	8c e1       	ldi	r24, 0x1C	; 28
    1ae4:	95 e0       	ldi	r25, 0x05	; 5
    1ae6:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <handle_internal_commands>
			// reset local vars for command string reading
			buf_ptr = 0;
    1aea:	10 92 72 04 	sts	0x0472, r1
    1aee:	10 92 71 04 	sts	0x0471, r1
			command_ready = 0;
    1af2:	1a 82       	std	Y+2, r1	; 0x02
			do_prompt = 1;
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	89 83       	std	Y+1, r24	; 0x01
			is_query = 0;
    1af8:	1b 82       	std	Y+3, r1	; 0x03
		}

		// GPIB command. Check if a partner was defined.
		if (command_ready && (gpib_get_partner_pad() == ADDRESS_NOT_SET)) {
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	88 23       	and	r24, r24
    1afe:	79 f0       	breq	.+30     	; 0x1b1e <main+0xaa>
    1b00:	0e 94 98 0a 	call	0x1530	; 0x1530 <gpib_get_partner_pad>
    1b04:	8f 3f       	cpi	r24, 0xFF	; 255
    1b06:	59 f4       	brne	.+22     	; 0x1b1e <main+0xaa>
			uart_puts("Device address is not set. Will not send commands.\n\r");
    1b08:	8a e9       	ldi	r24, 0x9A	; 154
    1b0a:	92 e0       	ldi	r25, 0x02	; 2
    1b0c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
			// reset local vars for command string reading
			command_ready = 0;
    1b10:	1a 82       	std	Y+2, r1	; 0x02
			buf_ptr = 0;
    1b12:	10 92 72 04 	sts	0x0472, r1
    1b16:	10 92 71 04 	sts	0x0471, r1
			do_prompt = 1;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	89 83       	std	Y+1, r24	; 0x01
		}

		// GPIB command and valid partner. Send the command.
		if (command_ready) {
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	88 23       	and	r24, r24
    1b22:	61 f0       	breq	.+24     	; 0x1b3c <main+0xc8>
			//uart_puts("\n\rGPIB command: ");
			//uart_puts((char*) buf);
			//uart_puts("\n\r");
			is_query = send_command(buf);
    1b24:	8c e1       	ldi	r24, 0x1C	; 28
    1b26:	95 e0       	ldi	r25, 0x05	; 5
    1b28:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <send_command>
    1b2c:	8b 83       	std	Y+3, r24	; 0x03
			// reset local vars for command string reading
			command_ready = 0;
    1b2e:	1a 82       	std	Y+2, r1	; 0x02
			buf_ptr = 0;
    1b30:	10 92 72 04 	sts	0x0472, r1
    1b34:	10 92 71 04 	sts	0x0471, r1
			do_prompt = 1;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	89 83       	std	Y+1, r24	; 0x01
		}

		// if we sent a query, read the answer
		if (is_query) {
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	88 23       	and	r24, r24
    1b40:	49 f0       	breq	.+18     	; 0x1b54 <main+0xe0>
			receiveAnswer();
    1b42:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <receiveAnswer>
			// reset for next command
			is_query = 0;
    1b46:	1b 82       	std	Y+3, r1	; 0x03
			// some devices do not send cr,lf at command end, so create it always itself
			uart_puts("\n\r");
    1b48:	82 e5       	ldi	r24, 0x52	; 82
    1b4a:	92 e0       	ldi	r25, 0x02	; 2
    1b4c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
			do_prompt = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	89 83       	std	Y+1, r24	; 0x01
		}

		// SRQ detection - do this every time when time value s has changed
		// s is incremented every second. So we check once a second.
		if (srq_occured(&old_time)) {
    1b54:	ce 01       	movw	r24, r28
    1b56:	04 96       	adiw	r24, 0x04	; 4
    1b58:	0e 94 b1 0c 	call	0x1962	; 0x1962 <srq_occured>
    1b5c:	88 23       	and	r24, r24
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <main+0xee>
    1b60:	a4 cf       	rjmp	.-184    	; 0x1aaa <main+0x36>
			command_ready = handle_srq(buf, &buf_ptr);
    1b62:	8c e1       	ldi	r24, 0x1C	; 28
    1b64:	95 e0       	ldi	r25, 0x05	; 5
    1b66:	21 e7       	ldi	r18, 0x71	; 113
    1b68:	34 e0       	ldi	r19, 0x04	; 4
    1b6a:	b9 01       	movw	r22, r18
    1b6c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <handle_srq>
    1b70:	8a 83       	std	Y+2, r24	; 0x02
    1b72:	9b cf       	rjmp	.-202    	; 0x1aaa <main+0x36>

00001b74 <input_process>:
 * Processing user input
 * \brief Read in user input via rs232 using peter fleurys UART library.
 * \returns The character read in
 */

uchar input_process(void) {
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <input_process+0x6>
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <input_process+0x8>
    1b7c:	0f 92       	push	r0
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
	unsigned int c;
	uchar ch;
	uchar ret = 0;
    1b82:	19 82       	std	Y+1, r1	; 0x01
	 * uart_getc() returns in the lower byte the received character and 
	 * in the higher byte (bitmask) the last receive error
	 * UART_NO_DATA is returned when no data is available.
	 *
	 */
	c = uart_getc();
    1b84:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <uart_getc>
    1b88:	9c 83       	std	Y+4, r25	; 0x04
    1b8a:	8b 83       	std	Y+3, r24	; 0x03
	if (c & UART_NO_DATA) {
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b90:	80 70       	andi	r24, 0x00	; 0
    1b92:	91 70       	andi	r25, 0x01	; 1
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	11 f0       	breq	.+4      	; 0x1b9c <input_process+0x28>
		// no data available from UART
		return 0;
    1b98:	1d 82       	std	Y+5, r1	; 0x05
    1b9a:	58 c0       	rjmp	.+176    	; 0x1c4c <input_process+0xd8>

	/*
	 * new data available from UART
	 * check for Frame or Overrun error
	 */
	if (c & UART_FRAME_ERROR) {
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba0:	80 70       	andi	r24, 0x00	; 0
    1ba2:	98 70       	andi	r25, 0x08	; 8
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	21 f0       	breq	.+8      	; 0x1bb0 <input_process+0x3c>
		/* Framing Error detected, i.e no stop bit detected */
		uart_puts_P("UART Frame Error: ");
    1ba8:	81 e8       	ldi	r24, 0x81	; 129
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <uart_puts_p>
	}
	if (c & UART_OVERRUN_ERROR) {
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb4:	80 70       	andi	r24, 0x00	; 0
    1bb6:	94 70       	andi	r25, 0x04	; 4
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	21 f0       	breq	.+8      	; 0x1bc4 <input_process+0x50>
		/* 
		 * Overrun, a character already present in the UART UDR register was 
		 * not read by the interrupt handler before the next character arrived,
		 * one or more received characters have been dropped
		 */
		uart_puts_P("UART Overrun Error: ");
    1bbc:	8c e6       	ldi	r24, 0x6C	; 108
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <uart_puts_p>
	}
	if (c & UART_BUFFER_OVERFLOW) {
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	80 70       	andi	r24, 0x00	; 0
    1bca:	92 70       	andi	r25, 0x02	; 2
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	21 f0       	breq	.+8      	; 0x1bd8 <input_process+0x64>
		/* 
		 * We are not reading the receive buffer fast enough,
		 * one or more received character have been dropped 
		 */
		uart_puts_P("Buffer overflow error: ");
    1bd0:	84 e5       	ldi	r24, 0x54	; 84
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <uart_puts_p>
	}

	/* 
	 * send received character back depending on global flag
	 */
	if (rs232_remote_echo)
    1bd8:	80 91 60 04 	lds	r24, 0x0460
    1bdc:	90 91 61 04 	lds	r25, 0x0461
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	19 f0       	breq	.+6      	; 0x1bea <input_process+0x76>
		uart_putc((unsigned char) c);
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <uart_putc>

	// make uchar from character in int value
	ch = (uchar) c;
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	8a 83       	std	Y+2, r24	; 0x02
	// add to buffer
	buf[buf_ptr++] = ch;
    1bee:	20 91 71 04 	lds	r18, 0x0471
    1bf2:	30 91 72 04 	lds	r19, 0x0472
    1bf6:	f9 01       	movw	r30, r18
    1bf8:	e4 5e       	subi	r30, 0xE4	; 228
    1bfa:	fa 4f       	sbci	r31, 0xFA	; 250
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	80 83       	st	Z, r24
    1c00:	c9 01       	movw	r24, r18
    1c02:	01 96       	adiw	r24, 0x01	; 1
    1c04:	90 93 72 04 	sts	0x0472, r25
    1c08:	80 93 71 04 	sts	0x0471, r24
	// terminate string
	buf[buf_ptr] = '\0';
    1c0c:	80 91 71 04 	lds	r24, 0x0471
    1c10:	90 91 72 04 	lds	r25, 0x0472
    1c14:	fc 01       	movw	r30, r24
    1c16:	e4 5e       	subi	r30, 0xE4	; 228
    1c18:	fa 4f       	sbci	r31, 0xFA	; 250
    1c1a:	10 82       	st	Z, r1

	// <CR> means command input is complete
	if (ch == ASCII_CODE_CR) {
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	8d 30       	cpi	r24, 0x0D	; 13
    1c20:	99 f4       	brne	.+38     	; 0x1c48 <input_process+0xd4>
		// adjust string terminator
		buf[--buf_ptr] = '\0';
    1c22:	80 91 71 04 	lds	r24, 0x0471
    1c26:	90 91 72 04 	lds	r25, 0x0472
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	90 93 72 04 	sts	0x0472, r25
    1c30:	80 93 71 04 	sts	0x0471, r24
    1c34:	80 91 71 04 	lds	r24, 0x0471
    1c38:	90 91 72 04 	lds	r25, 0x0472
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	e4 5e       	subi	r30, 0xE4	; 228
    1c40:	fa 4f       	sbci	r31, 0xFA	; 250
    1c42:	10 82       	st	Z, r1
		ret = 1;
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	8d 83       	std	Y+5, r24	; 0x05
    1c4c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <printHelp>:

#define REVISION "0.7"

void printHelp() {
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
#ifdef WRITE
	sprintf(buf,
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <printHelp+0xa>
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <printHelp+0xc>
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <printHelp+0xe>
    1c6c:	ed b7       	in	r30, 0x3d	; 61
    1c6e:	fe b7       	in	r31, 0x3e	; 62
    1c70:	31 96       	adiw	r30, 0x01	; 1
    1c72:	8c e1       	ldi	r24, 0x1C	; 28
    1c74:	95 e0       	ldi	r25, 0x05	; 5
    1c76:	91 83       	std	Z+1, r25	; 0x01
    1c78:	80 83       	st	Z, r24
    1c7a:	8f ec       	ldi	r24, 0xCF	; 207
    1c7c:	92 e0       	ldi	r25, 0x02	; 2
    1c7e:	93 83       	std	Z+3, r25	; 0x03
    1c80:	82 83       	std	Z+2, r24	; 0x02
    1c82:	8f e0       	ldi	r24, 0x0F	; 15
    1c84:	93 e0       	ldi	r25, 0x03	; 3
    1c86:	95 83       	std	Z+5, r25	; 0x05
    1c88:	84 83       	std	Z+4, r24	; 0x04
    1c8a:	0e 94 a3 00 	call	0x146	; 0x146 <sprintf>
    1c8e:	8d b7       	in	r24, 0x3d	; 61
    1c90:	9e b7       	in	r25, 0x3e	; 62
    1c92:	06 96       	adiw	r24, 0x06	; 6
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	9e bf       	out	0x3e, r25	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	8d bf       	out	0x3d, r24	; 61
			"\n\rGPIB Controller (T/L/C) (Rev.%s) (c) spurtikus.de 2008-2015\n\r",
			REVISION);
	uart_puts(buf);
    1c9e:	8c e1       	ldi	r24, 0x1C	; 28
    1ca0:	95 e0       	ldi	r25, 0x05	; 5
    1ca2:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
#else
	uart_puts("\n\rGPIB Listener Only (L) (Rev.%s) (c) spurtikus.de 2008-2015\n\r", REVISION);
	uart_puts(buf);
#endif
	uart_puts("Internal commands:\n\r");
    1ca6:	83 e1       	ldi	r24, 0x13	; 19
    1ca8:	93 e0       	ldi	r25, 0x03	; 3
    1caa:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
	uart_puts(".a <device address> - set primary address of remote device\n\r");
    1cae:	88 e2       	ldi	r24, 0x28	; 40
    1cb0:	93 e0       	ldi	r25, 0x03	; 3
    1cb2:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
	uart_puts(
    1cb6:	85 e6       	ldi	r24, 0x65	; 101
    1cb8:	93 e0       	ldi	r25, 0x03	; 3
    1cba:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
			".+ <n> - add partner device address to list of known devices.\n\r");
	uart_puts(
    1cbe:	85 ea       	ldi	r24, 0xA5	; 165
    1cc0:	93 e0       	ldi	r25, 0x03	; 3
    1cc2:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
			".- <n> - remove partner device address from list of known devices.\n\r");
	uart_puts(
    1cc6:	8a ee       	ldi	r24, 0xEA	; 234
    1cc8:	93 e0       	ldi	r25, 0x03	; 3
    1cca:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
			".s <device address> - set secondary address of of remote device\n\r");
	uart_puts(".h - print help\n\r");
    1cce:	8c e2       	ldi	r24, 0x2C	; 44
    1cd0:	94 e0       	ldi	r25, 0x04	; 4
    1cd2:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
	uart_puts(".i - dump info about GPIB lines\n\r");
    1cd6:	8e e3       	ldi	r24, 0x3E	; 62
    1cd8:	94 e0       	ldi	r25, 0x04	; 4
    1cda:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <uart_puts>
}
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <__vector_7>:

/**
 * Interrupt Service Routine - do not call directly
 *  This routine is called when the Timer Value TCNT1 reaches the Output Compare Register Value OCR1A
 */ 
ISR(TIMER1_COMPA_vect) {
    1ce4:	1f 92       	push	r1
    1ce6:	0f 92       	push	r0
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	0f 92       	push	r0
    1cec:	11 24       	eor	r1, r1
    1cee:	8f 93       	push	r24
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
#if XTAL_CPU % DEBOUNCE
	OCR1A = XTAL_CPU / DEBOUNCE - 1;
#endif
	if (--timer==0) {
    1cf8:	80 91 6c 05 	lds	r24, 0x056C
    1cfc:	81 50       	subi	r24, 0x01	; 1
    1cfe:	80 93 6c 05 	sts	0x056C, r24
    1d02:	80 91 6c 05 	lds	r24, 0x056C
    1d06:	88 23       	and	r24, r24
    1d08:	39 f4       	brne	.+14     	; 0x1d18 <__vector_7+0x34>
		timer=(uint8_t) DEBOUNCE;
    1d0a:	10 92 6c 05 	sts	0x056C, r1
		s++;
    1d0e:	80 91 6d 05 	lds	r24, 0x056D
    1d12:	8f 5f       	subi	r24, 0xFF	; 255
    1d14:	80 93 6d 05 	sts	0x056D, r24
#if XTAL_CPU % DEBOUNCE
		OCR1A = XTAL_CPU / DEBOUNCE + XTAL_CPU % DEBOUNCE - 1;
#endif
	}
}
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	8f 91       	pop	r24
    1d1e:	0f 90       	pop	r0
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	0f 90       	pop	r0
    1d24:	1f 90       	pop	r1
    1d26:	18 95       	reti

00001d28 <timer16_init>:
/**
 * Timer initialisation.
 *  \brief initializes all registers ands sets second value 's' to zero. Timer is immediately
 * started.
 */ 
void timer16_init( void ) {
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62

	// OCR1A=XTAL/DEBOUNCE-1 -> Bei Erreichen dieses Wertes (31249) wird die ISR besucht
	// die ISR wird also alle 1/256s aufgerufen. Wenn man dort also bis 256 hochzählt, ist genau
	// 1 Sekunde um! 256 ist der Wert der Variable timer und wird über das define DEBOUNCE festgelegt

	TCCR1B = (1<<CS10) ^ (1<<WGM12);	// Prescaler of 1 | CTC mode
    1d30:	ee e4       	ldi	r30, 0x4E	; 78
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	89 e0       	ldi	r24, 0x09	; 9
    1d36:	80 83       	st	Z, r24
	OCR1A  = F_CPU/DEBOUNCE-1;		// Output compare register value 
    1d38:	ea e4       	ldi	r30, 0x4A	; 74
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	81 e1       	ldi	r24, 0x11	; 17
    1d3e:	9a e7       	ldi	r25, 0x7A	; 122
    1d40:	91 83       	std	Z+1, r25	; 0x01
    1d42:	80 83       	st	Z, r24
	TCNT1 = 0; // Start value for timer register
    1d44:	ec e4       	ldi	r30, 0x4C	; 76
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	11 82       	std	Z+1, r1	; 0x01
    1d4a:	10 82       	st	Z, r1
	s=0; // Initialize second value (s) to zero
    1d4c:	10 92 6d 05 	sts	0x056D, r1
	timer = (uint8_t)DEBOUNCE; 
    1d50:	10 92 6c 05 	sts	0x056C, r1
	TIMSK |= (1<<OCIE1A);		// activate timer interrupts which starts timer run
    1d54:	a9 e5       	ldi	r26, 0x59	; 89
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e9 e5       	ldi	r30, 0x59	; 89
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	80 61       	ori	r24, 0x10	; 16
    1d60:	8c 93       	st	X, r24
}
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	08 95       	ret

00001d68 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    1d68:	1f 92       	push	r1
    1d6a:	0f 92       	push	r0
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	0f 92       	push	r0
    1d70:	11 24       	eor	r1, r1
    1d72:	8f 93       	push	r24
    1d74:	9f 93       	push	r25
    1d76:	ef 93       	push	r30
    1d78:	ff 93       	push	r31
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <__vector_13+0x18>
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <__vector_13+0x1a>
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    1d86:	eb e2       	ldi	r30, 0x2B	; 43
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	8a 83       	std	Y+2, r24	; 0x02
    data = UART0_DATA;
    1d8e:	ec e2       	ldi	r30, 0x2C	; 44
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	8b 83       	std	Y+3, r24	; 0x03
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	88 71       	andi	r24, 0x18	; 24
    1d9a:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    1d9c:	80 91 b5 04 	lds	r24, 0x04B5
    1da0:	8f 5f       	subi	r24, 0xFF	; 255
    1da2:	8f 71       	andi	r24, 0x1F	; 31
    1da4:	8c 83       	std	Y+4, r24	; 0x04
    
    if ( tmphead == UART_RxTail ) {
    1da6:	90 91 b6 04 	lds	r25, 0x04B6
    1daa:	8c 81       	ldd	r24, Y+4	; 0x04
    1dac:	89 17       	cp	r24, r25
    1dae:	19 f4       	brne	.+6      	; 0x1db6 <__vector_13+0x4e>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	89 83       	std	Y+1, r24	; 0x01
    1db4:	0b c0       	rjmp	.+22     	; 0x1dcc <__vector_13+0x64>
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    1db6:	8c 81       	ldd	r24, Y+4	; 0x04
    1db8:	80 93 b5 04 	sts	0x04B5, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    1dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbe:	88 2f       	mov	r24, r24
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	ed 56       	subi	r30, 0x6D	; 109
    1dc6:	fb 4f       	sbci	r31, 0xFB	; 251
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	80 83       	st	Z, r24
    }
    UART_LastRxError = lastRxError;   
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	80 93 b7 04 	sts	0x04B7, r24
}
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	ff 91       	pop	r31
    1de0:	ef 91       	pop	r30
    1de2:	9f 91       	pop	r25
    1de4:	8f 91       	pop	r24
    1de6:	0f 90       	pop	r0
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	0f 90       	pop	r0
    1dec:	1f 90       	pop	r1
    1dee:	18 95       	reti

00001df0 <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    1df0:	1f 92       	push	r1
    1df2:	0f 92       	push	r0
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	0f 92       	push	r0
    1df8:	11 24       	eor	r1, r1
    1dfa:	8f 93       	push	r24
    1dfc:	9f 93       	push	r25
    1dfe:	af 93       	push	r26
    1e00:	bf 93       	push	r27
    1e02:	ef 93       	push	r30
    1e04:	ff 93       	push	r31
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	0f 92       	push	r0
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    1e10:	90 91 b3 04 	lds	r25, 0x04B3
    1e14:	80 91 b4 04 	lds	r24, 0x04B4
    1e18:	98 17       	cp	r25, r24
    1e1a:	99 f0       	breq	.+38     	; 0x1e42 <__vector_14+0x52>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    1e1c:	80 91 b4 04 	lds	r24, 0x04B4
    1e20:	8f 5f       	subi	r24, 0xFF	; 255
    1e22:	8f 71       	andi	r24, 0x1F	; 31
    1e24:	89 83       	std	Y+1, r24	; 0x01
        UART_TxTail = tmptail;
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	80 93 b4 04 	sts	0x04B4, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    1e2c:	ac e2       	ldi	r26, 0x2C	; 44
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	88 2f       	mov	r24, r24
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	fc 01       	movw	r30, r24
    1e38:	ed 58       	subi	r30, 0x8D	; 141
    1e3a:	fb 4f       	sbci	r31, 0xFB	; 251
    1e3c:	80 81       	ld	r24, Z
    1e3e:	8c 93       	st	X, r24
    1e40:	07 c0       	rjmp	.+14     	; 0x1e50 <__vector_14+0x60>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    1e42:	aa e2       	ldi	r26, 0x2A	; 42
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	ea e2       	ldi	r30, 0x2A	; 42
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	8f 7d       	andi	r24, 0xDF	; 223
    1e4e:	8c 93       	st	X, r24
    }
}
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	ff 91       	pop	r31
    1e58:	ef 91       	pop	r30
    1e5a:	bf 91       	pop	r27
    1e5c:	af 91       	pop	r26
    1e5e:	9f 91       	pop	r25
    1e60:	8f 91       	pop	r24
    1e62:	0f 90       	pop	r0
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	0f 90       	pop	r0
    1e68:	1f 90       	pop	r1
    1e6a:	18 95       	reti

00001e6c <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <uart_init+0x6>
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    1e76:	9a 83       	std	Y+2, r25	; 0x02
    1e78:	89 83       	std	Y+1, r24	; 0x01
    UART_TxHead = 0;
    1e7a:	10 92 b3 04 	sts	0x04B3, r1
    UART_TxTail = 0;
    1e7e:	10 92 b4 04 	sts	0x04B4, r1
    UART_RxHead = 0;
    1e82:	10 92 b5 04 	sts	0x04B5, r1
    UART_RxTail = 0;
    1e86:	10 92 b6 04 	sts	0x04B6, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8e:	99 23       	and	r25, r25
    1e90:	4c f4       	brge	.+18     	; 0x1ea4 <uart_init+0x38>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
    1e92:	eb e2       	ldi	r30, 0x2B	; 43
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	82 e0       	ldi	r24, 0x02	; 2
    1e98:	80 83       	st	Z, r24
    	 baudrate &= ~0x8000;
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9e:	9f 77       	andi	r25, 0x7F	; 127
    1ea0:	9a 83       	std	Y+2, r25	; 0x02
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    }
    UBRRH = (unsigned char)(baudrate>>8);
    1ea4:	e0 e4       	ldi	r30, 0x40	; 64
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1eac:	89 2f       	mov	r24, r25
    1eae:	99 27       	eor	r25, r25
    1eb0:	80 83       	st	Z, r24
    UBRRL = (unsigned char) baudrate;
    1eb2:	e9 e2       	ldi	r30, 0x29	; 41
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	80 83       	st	Z, r24
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
    1eba:	ea e2       	ldi	r30, 0x2A	; 42
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	88 e9       	ldi	r24, 0x98	; 152
    1ec0:	80 83       	st	Z, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
    1ec2:	e0 e4       	ldi	r30, 0x40	; 64
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	86 e8       	ldi	r24, 0x86	; 134
    1ec8:	80 83       	st	Z, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <uart_getc>:
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <uart_getc+0x6>
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <uart_getc+0x8>
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
    1ee0:	90 91 b5 04 	lds	r25, 0x04B5
    1ee4:	80 91 b6 04 	lds	r24, 0x04B6
    1ee8:	98 17       	cp	r25, r24
    1eea:	29 f4       	brne	.+10     	; 0x1ef6 <uart_getc+0x22>
        return UART_NO_DATA;   /* no data available */
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	91 e0       	ldi	r25, 0x01	; 1
    1ef0:	9c 83       	std	Y+4, r25	; 0x04
    1ef2:	8b 83       	std	Y+3, r24	; 0x03
    1ef4:	1d c0       	rjmp	.+58     	; 0x1f30 <uart_getc+0x5c>
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    1ef6:	80 91 b6 04 	lds	r24, 0x04B6
    1efa:	8f 5f       	subi	r24, 0xFF	; 255
    1efc:	8f 71       	andi	r24, 0x1F	; 31
    1efe:	8a 83       	std	Y+2, r24	; 0x02
    UART_RxTail = tmptail; 
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	80 93 b6 04 	sts	0x04B6, r24
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    1f06:	8a 81       	ldd	r24, Y+2	; 0x02
    1f08:	88 2f       	mov	r24, r24
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	ed 56       	subi	r30, 0x6D	; 109
    1f10:	fb 4f       	sbci	r31, 0xFB	; 251
    1f12:	80 81       	ld	r24, Z
    1f14:	89 83       	std	Y+1, r24	; 0x01
    
    return (UART_LastRxError << 8) + data;
    1f16:	80 91 b7 04 	lds	r24, 0x04B7
    1f1a:	88 2f       	mov	r24, r24
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	38 2f       	mov	r19, r24
    1f20:	22 27       	eor	r18, r18
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	88 2f       	mov	r24, r24
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	82 0f       	add	r24, r18
    1f2a:	93 1f       	adc	r25, r19
    1f2c:	9c 83       	std	Y+4, r25	; 0x04
    1f2e:	8b 83       	std	Y+3, r24	; 0x03
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <uart_putc+0x6>
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1f4e:	80 91 b3 04 	lds	r24, 0x04B3
    1f52:	8f 5f       	subi	r24, 0xFF	; 255
    1f54:	8f 71       	andi	r24, 0x1F	; 31
    1f56:	89 83       	std	Y+1, r24	; 0x01
    
    while ( tmphead == UART_TxTail ){
    1f58:	90 91 b4 04 	lds	r25, 0x04B4
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	89 17       	cp	r24, r25
    1f60:	d9 f3       	breq	.-10     	; 0x1f58 <uart_putc+0x16>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	88 2f       	mov	r24, r24
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	fc 01       	movw	r30, r24
    1f6a:	ed 58       	subi	r30, 0x8D	; 141
    1f6c:	fb 4f       	sbci	r31, 0xFB	; 251
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	80 93 b3 04 	sts	0x04B3, r24

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    1f78:	aa e2       	ldi	r26, 0x2A	; 42
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	ea e2       	ldi	r30, 0x2A	; 42
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	80 62       	ori	r24, 0x20	; 32
    1f84:	8c 93       	st	X, r24

}/* uart_putc */
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <uart_puts+0x6>
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	9a 83       	std	Y+2, r25	; 0x02
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	0b c0       	rjmp	.+22     	; 0x1fb6 <uart_puts+0x26>
    while (*s) 
      uart_putc(*s++);
    1fa0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa4:	20 81       	ld	r18, Z
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1faa:	01 96       	adiw	r24, 0x01	; 1
    1fac:	9a 83       	std	Y+2, r25	; 0x02
    1fae:	89 83       	std	Y+1, r24	; 0x01
    1fb0:	82 2f       	mov	r24, r18
    1fb2:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    1fb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fba:	80 81       	ld	r24, Z
    1fbc:	88 23       	and	r24, r24
    1fbe:	81 f7       	brne	.-32     	; 0x1fa0 <uart_puts+0x10>
      uart_putc(*s++);

}/* uart_puts */
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	08 95       	ret

00001fca <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	00 d0       	rcall	.+0      	; 0x1fd0 <uart_puts_p+0x6>
    1fd0:	00 d0       	rcall	.+0      	; 0x1fd2 <uart_puts_p+0x8>
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <uart_puts_p+0xa>
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	9d 83       	std	Y+5, r25	; 0x05
    1fda:	8c 83       	std	Y+4, r24	; 0x04
    1fdc:	03 c0       	rjmp	.+6      	; 0x1fe4 <uart_puts_p+0x1a>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
    1fde:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe0:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe8:	9b 83       	std	Y+3, r25	; 0x03
    1fea:	8a 83       	std	Y+2, r24	; 0x02
    1fec:	8c 81       	ldd	r24, Y+4	; 0x04
    1fee:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff0:	01 96       	adiw	r24, 0x01	; 1
    1ff2:	9d 83       	std	Y+5, r25	; 0x05
    1ff4:	8c 83       	std	Y+4, r24	; 0x04
    1ff6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ff8:	fb 81       	ldd	r31, Y+3	; 0x03
    1ffa:	84 91       	lpm	r24, Z+
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	8e 83       	std	Y+6, r24	; 0x06
    2002:	8e 81       	ldd	r24, Y+6	; 0x06
    2004:	88 23       	and	r24, r24
    2006:	59 f7       	brne	.-42     	; 0x1fde <uart_puts_p+0x14>
      uart_putc(c);

}/* uart_puts_p */
    2008:	26 96       	adiw	r28, 0x06	; 6
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <__prologue_saves__>:
    201a:	2f 92       	push	r2
    201c:	3f 92       	push	r3
    201e:	4f 92       	push	r4
    2020:	5f 92       	push	r5
    2022:	6f 92       	push	r6
    2024:	7f 92       	push	r7
    2026:	8f 92       	push	r8
    2028:	9f 92       	push	r9
    202a:	af 92       	push	r10
    202c:	bf 92       	push	r11
    202e:	cf 92       	push	r12
    2030:	df 92       	push	r13
    2032:	ef 92       	push	r14
    2034:	ff 92       	push	r15
    2036:	0f 93       	push	r16
    2038:	1f 93       	push	r17
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	ca 1b       	sub	r28, r26
    2044:	db 0b       	sbc	r29, r27
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	09 94       	ijmp

00002052 <__epilogue_restores__>:
    2052:	2a 88       	ldd	r2, Y+18	; 0x12
    2054:	39 88       	ldd	r3, Y+17	; 0x11
    2056:	48 88       	ldd	r4, Y+16	; 0x10
    2058:	5f 84       	ldd	r5, Y+15	; 0x0f
    205a:	6e 84       	ldd	r6, Y+14	; 0x0e
    205c:	7d 84       	ldd	r7, Y+13	; 0x0d
    205e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2060:	9b 84       	ldd	r9, Y+11	; 0x0b
    2062:	aa 84       	ldd	r10, Y+10	; 0x0a
    2064:	b9 84       	ldd	r11, Y+9	; 0x09
    2066:	c8 84       	ldd	r12, Y+8	; 0x08
    2068:	df 80       	ldd	r13, Y+7	; 0x07
    206a:	ee 80       	ldd	r14, Y+6	; 0x06
    206c:	fd 80       	ldd	r15, Y+5	; 0x05
    206e:	0c 81       	ldd	r16, Y+4	; 0x04
    2070:	1b 81       	ldd	r17, Y+3	; 0x03
    2072:	aa 81       	ldd	r26, Y+2	; 0x02
    2074:	b9 81       	ldd	r27, Y+1	; 0x01
    2076:	ce 0f       	add	r28, r30
    2078:	d1 1d       	adc	r29, r1
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	cd bf       	out	0x3d, r28	; 61
    2084:	ed 01       	movw	r28, r26
    2086:	08 95       	ret

00002088 <_exit>:
    2088:	f8 94       	cli

0000208a <__stop_program>:
    208a:	ff cf       	rjmp	.-2      	; 0x208a <__stop_program>

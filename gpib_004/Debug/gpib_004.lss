
gpib_004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003042  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000472  00800060  00003042  000030b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000170  008004d2  000034b4  00003528  2**0
                  ALLOC
  3 .stab         00005ebc  00000000  00000000  00003528  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002b14  00000000  00000000  000093e4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 85 01 	jmp	0x30a	; 0x30a <__ctors_end>
       4:	0c 94 a2 01 	jmp	0x344	; 0x344 <__bad_interrupt>
       8:	0c 94 a2 01 	jmp	0x344	; 0x344 <__bad_interrupt>
       c:	0c 94 a2 01 	jmp	0x344	; 0x344 <__bad_interrupt>
      10:	0c 94 a2 01 	jmp	0x344	; 0x344 <__bad_interrupt>
      14:	0c 94 a2 01 	jmp	0x344	; 0x344 <__bad_interrupt>
      18:	0c 94 a2 01 	jmp	0x344	; 0x344 <__bad_interrupt>
      1c:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__vector_7>
      20:	0c 94 a2 01 	jmp	0x344	; 0x344 <__bad_interrupt>
      24:	0c 94 a2 01 	jmp	0x344	; 0x344 <__bad_interrupt>
      28:	0c 94 a2 01 	jmp	0x344	; 0x344 <__bad_interrupt>
      2c:	0c 94 a2 01 	jmp	0x344	; 0x344 <__bad_interrupt>
      30:	0c 94 a2 01 	jmp	0x344	; 0x344 <__bad_interrupt>
      34:	0c 94 02 16 	jmp	0x2c04	; 0x2c04 <__vector_13>
      38:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__vector_14>
      3c:	0c 94 a2 01 	jmp	0x344	; 0x344 <__bad_interrupt>
      40:	0c 94 a2 01 	jmp	0x344	; 0x344 <__bad_interrupt>
      44:	0c 94 a2 01 	jmp	0x344	; 0x344 <__bad_interrupt>
      48:	0c 94 a2 01 	jmp	0x344	; 0x344 <__bad_interrupt>
      4c:	0c 94 a2 01 	jmp	0x344	; 0x344 <__bad_interrupt>
      50:	0c 94 a2 01 	jmp	0x344	; 0x344 <__bad_interrupt>

00000054 <__c.1890>:
      54:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
      64:	65 72 72 6f 72 3a 20 00                             error: .

0000006c <__c.1888>:
      6c:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
      7c:	6f 72 3a 20 00                                      or: .

00000081 <__c.1886>:
      81:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
      91:	3a 20 00                                            : .

00000094 <__c.1914>:
      94:	43 6f 6d 6d 61 6e 64 20 6f 76 65 72 66 6c 6f 77     Command overflow
      a4:	2e 00                                               ..

000000a6 <__c.1992>:
      a6:	75 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 0a     unknown command.
      b6:	0d 00                                               ..

000000b8 <__c.1988>:
      b8:	43 68 65 63 6b 20 65 72 72 6f 72 73 0a 0d 00        Check errors...

000000c7 <__c.1983>:
      c7:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      d7:	74 72 6f 6c 20 6f 66 66 0a 0d 00                    trol off...

000000e2 <__c.1981>:
      e2:	78 6f 6e 2f 78 6f 66 66 20 66 6c 6f 77 63 6f 6e     xon/xoff flowcon
      f2:	74 72 6f 6c 20 6f 6e 0a 0d 00                       trol on...

000000fc <__c.2044>:
      fc:	0a 0d 00                                            ...

000000ff <__c.2061>:
      ff:	0a 0d 53 52 51 20 64 65 74 65 63 74 65 64 2e 0a     ..SRQ detected..
     10f:	0d 00                                               ..

00000111 <__c.2091>:
     111:	0a 0d 53 52 51 73 20 61 72 65 20 64 69 73 61 62     ..SRQs are disab
     121:	6c 65 64 20 6e 6f 77 2e 0a 0d 00                    led now....

0000012c <__c.2089>:
     12c:	0a 0d 53 52 51 20 65 6d 69 74 74 65 72 20 69 73     ..SRQ emitter is
     13c:	20 6e 6f 74 20 69 6e 20 6c 69 73 74 20 6f 66 20      not in list of 
     14c:	6b 6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 20 53     known devices. S
     15c:	52 51 20 49 67 6e 6f 72 65 64 2e 0a 0d 00           RQ Ignored....

0000016a <__c.2128>:
     16a:	2e 69 20 2d 20 64 75 6d 70 20 69 6e 66 6f 20 61     .i - dump info a
     17a:	62 6f 75 74 20 63 6f 6e 74 72 6f 6c 6c 65 72 20     bout controller 
     18a:	73 74 61 74 65 2e 0a 0d 00                          state....

00000193 <__c.2126>:
     193:	2e 66 20 2d 20 66 69 6e 64 20 70 61 72 74 6e 65     .f - find partne
     1a3:	72 73 2e 0a 0d 00                                   rs....

000001a9 <__c.2124>:
     1a9:	2e 65 20 2d 20 64 75 6d 70 20 65 72 72 6f 72 20     .e - dump error 
     1b9:	71 75 65 75 65 2e 0a 0d 00                          queue....

000001c2 <__c.2122>:
     1c2:	2e 68 20 2d 20 70 72 69 6e 74 20 68 65 6c 70 2e     .h - print help.
     1d2:	0a 0d 00                                            ...

000001d5 <__c.2120>:
     1d5:	2e 78 20 2d 20 74 6f 67 67 6c 65 20 58 6f 6e 2f     .x - toggle Xon/
     1e5:	58 6f 66 66 20 66 6c 6f 77 20 63 6f 6e 74 72 6f     Xoff flow contro
     1f5:	6c 2e 0a 0d 00                                      l....

000001fa <__c.2118>:
     1fa:	2e 2d 20 3c 6e 3e 20 2d 20 72 65 6d 6f 76 65 20     .- <n> - remove 
     20a:	70 61 72 74 6e 65 72 20 64 65 76 69 63 65 20 61     partner device a
     21a:	64 64 72 65 73 73 20 66 72 6f 6d 20 6c 69 73 74     ddress from list
     22a:	20 6f 66 20 6b 6e 6f 77 6e 20 64 65 76 69 63 65      of known device
     23a:	73 2e 0a 0d 00                                      s....

0000023f <__c.2116>:
     23f:	2e 2b 20 3c 6e 3e 20 2d 20 61 64 64 20 70 61 72     .+ <n> - add par
     24f:	74 6e 65 72 20 64 65 76 69 63 65 20 61 64 64 72     tner device addr
     25f:	65 73 73 20 74 6f 20 6c 69 73 74 20 6f 66 20 6b     ess to list of k
     26f:	6e 6f 77 6e 20 64 65 76 69 63 65 73 2e 0a 0d 00     nown devices....

0000027f <__c.2114>:
     27f:	2e 73 20 3c 73 65 63 6f 6e 64 61 72 79 3e 20 2d     .s <secondary> -
     28f:	20 73 65 74 20 73 65 63 6f 6e 64 61 72 79 20 61      set secondary a
     29f:	64 64 72 65 73 73 20 6f 66 20 72 65 6d 6f 74 65     ddress of remote
     2af:	20 64 65 76 69 63 65 0a 0d 00                        device...

000002b9 <__c.2112>:
     2b9:	49 6e 74 65 72 6e 61 6c 20 63 6f 6d 6d 61 6e 64     Internal command
     2c9:	73 3a 0a 0d 00                                      s:...

000002ce <__c.2150>:
     2ce:	0a 0d 00                                            ...

000002d1 <__c.2148>:
     2d1:	0a 0d 00                                            ...

000002d4 <__c.2145>:
     2d4:	44 65 76 69 63 65 20 61 64 64 72 65 73 73 20 69     Device address i
     2e4:	73 20 6e 6f 74 20 73 65 74 2e 20 43 61 6e 20 6e     s not set. Can n
     2f4:	6f 74 20 73 65 6e 64 20 63 6f 6d 6d 61 6e 64 2e     ot send command.
     304:	0a 0d 00                                            ...

00000307 <__c.2143>:
     307:	0a 0d 00                                            ...

0000030a <__ctors_end>:
     30a:	11 24       	eor	r1, r1
     30c:	1f be       	out	0x3f, r1	; 63
     30e:	cf e5       	ldi	r28, 0x5F	; 95
     310:	d8 e0       	ldi	r29, 0x08	; 8
     312:	de bf       	out	0x3e, r29	; 62
     314:	cd bf       	out	0x3d, r28	; 61

00000316 <__do_copy_data>:
     316:	14 e0       	ldi	r17, 0x04	; 4
     318:	a0 e6       	ldi	r26, 0x60	; 96
     31a:	b0 e0       	ldi	r27, 0x00	; 0
     31c:	e2 e4       	ldi	r30, 0x42	; 66
     31e:	f0 e3       	ldi	r31, 0x30	; 48
     320:	02 c0       	rjmp	.+4      	; 0x326 <.do_copy_data_start>

00000322 <.do_copy_data_loop>:
     322:	05 90       	lpm	r0, Z+
     324:	0d 92       	st	X+, r0

00000326 <.do_copy_data_start>:
     326:	a2 3d       	cpi	r26, 0xD2	; 210
     328:	b1 07       	cpc	r27, r17
     32a:	d9 f7       	brne	.-10     	; 0x322 <.do_copy_data_loop>

0000032c <__do_clear_bss>:
     32c:	16 e0       	ldi	r17, 0x06	; 6
     32e:	a2 ed       	ldi	r26, 0xD2	; 210
     330:	b4 e0       	ldi	r27, 0x04	; 4
     332:	01 c0       	rjmp	.+2      	; 0x336 <.do_clear_bss_start>

00000334 <.do_clear_bss_loop>:
     334:	1d 92       	st	X+, r1

00000336 <.do_clear_bss_start>:
     336:	a2 34       	cpi	r26, 0x42	; 66
     338:	b1 07       	cpc	r27, r17
     33a:	e1 f7       	brne	.-8      	; 0x334 <.do_clear_bss_loop>
     33c:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <main>
     340:	0c 94 1f 18 	jmp	0x303e	; 0x303e <_exit>

00000344 <__bad_interrupt>:
     344:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000348 <atoi>:
     348:	fc 01       	movw	r30, r24
     34a:	88 27       	eor	r24, r24
     34c:	99 27       	eor	r25, r25
     34e:	e8 94       	clt
     350:	21 91       	ld	r18, Z+
     352:	20 32       	cpi	r18, 0x20	; 32
     354:	e9 f3       	breq	.-6      	; 0x350 <atoi+0x8>
     356:	29 30       	cpi	r18, 0x09	; 9
     358:	10 f0       	brcs	.+4      	; 0x35e <atoi+0x16>
     35a:	2e 30       	cpi	r18, 0x0E	; 14
     35c:	c8 f3       	brcs	.-14     	; 0x350 <atoi+0x8>
     35e:	2b 32       	cpi	r18, 0x2B	; 43
     360:	41 f0       	breq	.+16     	; 0x372 <atoi+0x2a>
     362:	2d 32       	cpi	r18, 0x2D	; 45
     364:	39 f4       	brne	.+14     	; 0x374 <atoi+0x2c>
     366:	68 94       	set
     368:	04 c0       	rjmp	.+8      	; 0x372 <atoi+0x2a>
     36a:	0e 94 10 02 	call	0x420	; 0x420 <__mulhi_const_10>
     36e:	82 0f       	add	r24, r18
     370:	91 1d       	adc	r25, r1
     372:	21 91       	ld	r18, Z+
     374:	20 53       	subi	r18, 0x30	; 48
     376:	2a 30       	cpi	r18, 0x0A	; 10
     378:	c0 f3       	brcs	.-16     	; 0x36a <atoi+0x22>
     37a:	1e f4       	brtc	.+6      	; 0x382 <atoi+0x3a>
     37c:	90 95       	com	r25
     37e:	81 95       	neg	r24
     380:	9f 4f       	sbci	r25, 0xFF	; 255
     382:	08 95       	ret

00000384 <strtok>:
     384:	42 ed       	ldi	r20, 0xD2	; 210
     386:	54 e0       	ldi	r21, 0x04	; 4
     388:	0e 94 de 01 	call	0x3bc	; 0x3bc <strtok_r>
     38c:	08 95       	ret

0000038e <strlen>:
     38e:	fc 01       	movw	r30, r24
     390:	01 90       	ld	r0, Z+
     392:	00 20       	and	r0, r0
     394:	e9 f7       	brne	.-6      	; 0x390 <strlen+0x2>
     396:	80 95       	com	r24
     398:	90 95       	com	r25
     39a:	8e 0f       	add	r24, r30
     39c:	9f 1f       	adc	r25, r31
     39e:	08 95       	ret

000003a0 <strncmp>:
     3a0:	fb 01       	movw	r30, r22
     3a2:	dc 01       	movw	r26, r24
     3a4:	41 50       	subi	r20, 0x01	; 1
     3a6:	50 40       	sbci	r21, 0x00	; 0
     3a8:	30 f0       	brcs	.+12     	; 0x3b6 <strncmp+0x16>
     3aa:	8d 91       	ld	r24, X+
     3ac:	01 90       	ld	r0, Z+
     3ae:	80 19       	sub	r24, r0
     3b0:	19 f4       	brne	.+6      	; 0x3b8 <strncmp+0x18>
     3b2:	00 20       	and	r0, r0
     3b4:	b9 f7       	brne	.-18     	; 0x3a4 <strncmp+0x4>
     3b6:	88 1b       	sub	r24, r24
     3b8:	99 0b       	sbc	r25, r25
     3ba:	08 95       	ret

000003bc <strtok_r>:
     3bc:	00 97       	sbiw	r24, 0x00	; 0
     3be:	31 f4       	brne	.+12     	; 0x3cc <strtok_r+0x10>
     3c0:	da 01       	movw	r26, r20
     3c2:	8d 91       	ld	r24, X+
     3c4:	9c 91       	ld	r25, X
     3c6:	00 97       	sbiw	r24, 0x00	; 0
     3c8:	09 f4       	brne	.+2      	; 0x3cc <strtok_r+0x10>
     3ca:	0e c0       	rjmp	.+28     	; 0x3e8 <strtok_r+0x2c>
     3cc:	dc 01       	movw	r26, r24
     3ce:	fb 01       	movw	r30, r22
     3d0:	3d 91       	ld	r19, X+
     3d2:	21 91       	ld	r18, Z+
     3d4:	22 23       	and	r18, r18
     3d6:	19 f0       	breq	.+6      	; 0x3de <strtok_r+0x22>
     3d8:	32 17       	cp	r19, r18
     3da:	c9 f3       	breq	.-14     	; 0x3ce <strtok_r+0x12>
     3dc:	fa cf       	rjmp	.-12     	; 0x3d2 <strtok_r+0x16>
     3de:	33 23       	and	r19, r19
     3e0:	31 f4       	brne	.+12     	; 0x3ee <strtok_r+0x32>
     3e2:	da 01       	movw	r26, r20
     3e4:	1d 92       	st	X+, r1
     3e6:	1c 92       	st	X, r1
     3e8:	88 27       	eor	r24, r24
     3ea:	99 27       	eor	r25, r25
     3ec:	08 95       	ret
     3ee:	11 97       	sbiw	r26, 0x01	; 1
     3f0:	af 93       	push	r26
     3f2:	bf 93       	push	r27
     3f4:	fb 01       	movw	r30, r22
     3f6:	3d 91       	ld	r19, X+
     3f8:	21 91       	ld	r18, Z+
     3fa:	32 17       	cp	r19, r18
     3fc:	71 f4       	brne	.+28     	; 0x41a <strtok_r+0x5e>
     3fe:	33 23       	and	r19, r19
     400:	21 f4       	brne	.+8      	; 0x40a <strtok_r+0x4e>
     402:	88 27       	eor	r24, r24
     404:	99 27       	eor	r25, r25
     406:	11 97       	sbiw	r26, 0x01	; 1
     408:	02 c0       	rjmp	.+4      	; 0x40e <strtok_r+0x52>
     40a:	1e 92       	st	-X, r1
     40c:	11 96       	adiw	r26, 0x01	; 1
     40e:	fa 01       	movw	r30, r20
     410:	a1 93       	st	Z+, r26
     412:	b0 83       	st	Z, r27
     414:	9f 91       	pop	r25
     416:	8f 91       	pop	r24
     418:	08 95       	ret
     41a:	22 23       	and	r18, r18
     41c:	69 f7       	brne	.-38     	; 0x3f8 <strtok_r+0x3c>
     41e:	ea cf       	rjmp	.-44     	; 0x3f4 <strtok_r+0x38>

00000420 <__mulhi_const_10>:
     420:	7a e0       	ldi	r23, 0x0A	; 10
     422:	97 9f       	mul	r25, r23
     424:	90 2d       	mov	r25, r0
     426:	87 9f       	mul	r24, r23
     428:	80 2d       	mov	r24, r0
     42a:	91 0d       	add	r25, r1
     42c:	11 24       	eor	r1, r1
     42e:	08 95       	ret

00000430 <sprintf>:
     430:	ae e0       	ldi	r26, 0x0E	; 14
     432:	b0 e0       	ldi	r27, 0x00	; 0
     434:	ee e1       	ldi	r30, 0x1E	; 30
     436:	f2 e0       	ldi	r31, 0x02	; 2
     438:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x1c>
     43c:	0d 89       	ldd	r16, Y+21	; 0x15
     43e:	1e 89       	ldd	r17, Y+22	; 0x16
     440:	86 e0       	ldi	r24, 0x06	; 6
     442:	8c 83       	std	Y+4, r24	; 0x04
     444:	1a 83       	std	Y+2, r17	; 0x02
     446:	09 83       	std	Y+1, r16	; 0x01
     448:	8f ef       	ldi	r24, 0xFF	; 255
     44a:	9f e7       	ldi	r25, 0x7F	; 127
     44c:	9e 83       	std	Y+6, r25	; 0x06
     44e:	8d 83       	std	Y+5, r24	; 0x05
     450:	9e 01       	movw	r18, r28
     452:	27 5e       	subi	r18, 0xE7	; 231
     454:	3f 4f       	sbci	r19, 0xFF	; 255
     456:	ce 01       	movw	r24, r28
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	6f 89       	ldd	r22, Y+23	; 0x17
     45c:	78 8d       	ldd	r23, Y+24	; 0x18
     45e:	a9 01       	movw	r20, r18
     460:	0e 94 3c 02 	call	0x478	; 0x478 <vfprintf>
     464:	2f 81       	ldd	r18, Y+7	; 0x07
     466:	38 85       	ldd	r19, Y+8	; 0x08
     468:	02 0f       	add	r16, r18
     46a:	13 1f       	adc	r17, r19
     46c:	f8 01       	movw	r30, r16
     46e:	10 82       	st	Z, r1
     470:	2e 96       	adiw	r28, 0x0e	; 14
     472:	e4 e0       	ldi	r30, 0x04	; 4
     474:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x1c>

00000478 <vfprintf>:
     478:	ab e0       	ldi	r26, 0x0B	; 11
     47a:	b0 e0       	ldi	r27, 0x00	; 0
     47c:	e2 e4       	ldi	r30, 0x42	; 66
     47e:	f2 e0       	ldi	r31, 0x02	; 2
     480:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__prologue_saves__>
     484:	3c 01       	movw	r6, r24
     486:	2b 01       	movw	r4, r22
     488:	5a 01       	movw	r10, r20
     48a:	fc 01       	movw	r30, r24
     48c:	17 82       	std	Z+7, r1	; 0x07
     48e:	16 82       	std	Z+6, r1	; 0x06
     490:	83 81       	ldd	r24, Z+3	; 0x03
     492:	81 fd       	sbrc	r24, 1
     494:	03 c0       	rjmp	.+6      	; 0x49c <vfprintf+0x24>
     496:	6f ef       	ldi	r22, 0xFF	; 255
     498:	7f ef       	ldi	r23, 0xFF	; 255
     49a:	c6 c1       	rjmp	.+908    	; 0x828 <vfprintf+0x3b0>
     49c:	9a e0       	ldi	r25, 0x0A	; 10
     49e:	89 2e       	mov	r8, r25
     4a0:	1e 01       	movw	r2, r28
     4a2:	08 94       	sec
     4a4:	21 1c       	adc	r2, r1
     4a6:	31 1c       	adc	r3, r1
     4a8:	f3 01       	movw	r30, r6
     4aa:	23 81       	ldd	r18, Z+3	; 0x03
     4ac:	f2 01       	movw	r30, r4
     4ae:	23 fd       	sbrc	r18, 3
     4b0:	85 91       	lpm	r24, Z+
     4b2:	23 ff       	sbrs	r18, 3
     4b4:	81 91       	ld	r24, Z+
     4b6:	2f 01       	movw	r4, r30
     4b8:	88 23       	and	r24, r24
     4ba:	09 f4       	brne	.+2      	; 0x4be <vfprintf+0x46>
     4bc:	b2 c1       	rjmp	.+868    	; 0x822 <vfprintf+0x3aa>
     4be:	85 32       	cpi	r24, 0x25	; 37
     4c0:	39 f4       	brne	.+14     	; 0x4d0 <vfprintf+0x58>
     4c2:	23 fd       	sbrc	r18, 3
     4c4:	85 91       	lpm	r24, Z+
     4c6:	23 ff       	sbrs	r18, 3
     4c8:	81 91       	ld	r24, Z+
     4ca:	2f 01       	movw	r4, r30
     4cc:	85 32       	cpi	r24, 0x25	; 37
     4ce:	29 f4       	brne	.+10     	; 0x4da <vfprintf+0x62>
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	b3 01       	movw	r22, r6
     4d4:	0e 94 2f 04 	call	0x85e	; 0x85e <fputc>
     4d8:	e7 cf       	rjmp	.-50     	; 0x4a8 <vfprintf+0x30>
     4da:	98 2f       	mov	r25, r24
     4dc:	ff 24       	eor	r15, r15
     4de:	ee 24       	eor	r14, r14
     4e0:	99 24       	eor	r9, r9
     4e2:	ff e1       	ldi	r31, 0x1F	; 31
     4e4:	ff 15       	cp	r31, r15
     4e6:	d0 f0       	brcs	.+52     	; 0x51c <vfprintf+0xa4>
     4e8:	9b 32       	cpi	r25, 0x2B	; 43
     4ea:	69 f0       	breq	.+26     	; 0x506 <vfprintf+0x8e>
     4ec:	9c 32       	cpi	r25, 0x2C	; 44
     4ee:	28 f4       	brcc	.+10     	; 0x4fa <vfprintf+0x82>
     4f0:	90 32       	cpi	r25, 0x20	; 32
     4f2:	59 f0       	breq	.+22     	; 0x50a <vfprintf+0x92>
     4f4:	93 32       	cpi	r25, 0x23	; 35
     4f6:	91 f4       	brne	.+36     	; 0x51c <vfprintf+0xa4>
     4f8:	0e c0       	rjmp	.+28     	; 0x516 <vfprintf+0x9e>
     4fa:	9d 32       	cpi	r25, 0x2D	; 45
     4fc:	49 f0       	breq	.+18     	; 0x510 <vfprintf+0x98>
     4fe:	90 33       	cpi	r25, 0x30	; 48
     500:	69 f4       	brne	.+26     	; 0x51c <vfprintf+0xa4>
     502:	41 e0       	ldi	r20, 0x01	; 1
     504:	24 c0       	rjmp	.+72     	; 0x54e <vfprintf+0xd6>
     506:	52 e0       	ldi	r21, 0x02	; 2
     508:	f5 2a       	or	r15, r21
     50a:	84 e0       	ldi	r24, 0x04	; 4
     50c:	f8 2a       	or	r15, r24
     50e:	28 c0       	rjmp	.+80     	; 0x560 <vfprintf+0xe8>
     510:	98 e0       	ldi	r25, 0x08	; 8
     512:	f9 2a       	or	r15, r25
     514:	25 c0       	rjmp	.+74     	; 0x560 <vfprintf+0xe8>
     516:	e0 e1       	ldi	r30, 0x10	; 16
     518:	fe 2a       	or	r15, r30
     51a:	22 c0       	rjmp	.+68     	; 0x560 <vfprintf+0xe8>
     51c:	f7 fc       	sbrc	r15, 7
     51e:	29 c0       	rjmp	.+82     	; 0x572 <vfprintf+0xfa>
     520:	89 2f       	mov	r24, r25
     522:	80 53       	subi	r24, 0x30	; 48
     524:	8a 30       	cpi	r24, 0x0A	; 10
     526:	70 f4       	brcc	.+28     	; 0x544 <vfprintf+0xcc>
     528:	f6 fe       	sbrs	r15, 6
     52a:	05 c0       	rjmp	.+10     	; 0x536 <vfprintf+0xbe>
     52c:	98 9c       	mul	r9, r8
     52e:	90 2c       	mov	r9, r0
     530:	11 24       	eor	r1, r1
     532:	98 0e       	add	r9, r24
     534:	15 c0       	rjmp	.+42     	; 0x560 <vfprintf+0xe8>
     536:	e8 9c       	mul	r14, r8
     538:	e0 2c       	mov	r14, r0
     53a:	11 24       	eor	r1, r1
     53c:	e8 0e       	add	r14, r24
     53e:	f0 e2       	ldi	r31, 0x20	; 32
     540:	ff 2a       	or	r15, r31
     542:	0e c0       	rjmp	.+28     	; 0x560 <vfprintf+0xe8>
     544:	9e 32       	cpi	r25, 0x2E	; 46
     546:	29 f4       	brne	.+10     	; 0x552 <vfprintf+0xda>
     548:	f6 fc       	sbrc	r15, 6
     54a:	6b c1       	rjmp	.+726    	; 0x822 <vfprintf+0x3aa>
     54c:	40 e4       	ldi	r20, 0x40	; 64
     54e:	f4 2a       	or	r15, r20
     550:	07 c0       	rjmp	.+14     	; 0x560 <vfprintf+0xe8>
     552:	9c 36       	cpi	r25, 0x6C	; 108
     554:	19 f4       	brne	.+6      	; 0x55c <vfprintf+0xe4>
     556:	50 e8       	ldi	r21, 0x80	; 128
     558:	f5 2a       	or	r15, r21
     55a:	02 c0       	rjmp	.+4      	; 0x560 <vfprintf+0xe8>
     55c:	98 36       	cpi	r25, 0x68	; 104
     55e:	49 f4       	brne	.+18     	; 0x572 <vfprintf+0xfa>
     560:	f2 01       	movw	r30, r4
     562:	23 fd       	sbrc	r18, 3
     564:	95 91       	lpm	r25, Z+
     566:	23 ff       	sbrs	r18, 3
     568:	91 91       	ld	r25, Z+
     56a:	2f 01       	movw	r4, r30
     56c:	99 23       	and	r25, r25
     56e:	09 f0       	breq	.+2      	; 0x572 <vfprintf+0xfa>
     570:	b8 cf       	rjmp	.-144    	; 0x4e2 <vfprintf+0x6a>
     572:	89 2f       	mov	r24, r25
     574:	85 54       	subi	r24, 0x45	; 69
     576:	83 30       	cpi	r24, 0x03	; 3
     578:	18 f0       	brcs	.+6      	; 0x580 <vfprintf+0x108>
     57a:	80 52       	subi	r24, 0x20	; 32
     57c:	83 30       	cpi	r24, 0x03	; 3
     57e:	38 f4       	brcc	.+14     	; 0x58e <vfprintf+0x116>
     580:	44 e0       	ldi	r20, 0x04	; 4
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	a4 0e       	add	r10, r20
     586:	b5 1e       	adc	r11, r21
     588:	5f e3       	ldi	r21, 0x3F	; 63
     58a:	59 83       	std	Y+1, r21	; 0x01
     58c:	0f c0       	rjmp	.+30     	; 0x5ac <vfprintf+0x134>
     58e:	93 36       	cpi	r25, 0x63	; 99
     590:	31 f0       	breq	.+12     	; 0x59e <vfprintf+0x126>
     592:	93 37       	cpi	r25, 0x73	; 115
     594:	79 f0       	breq	.+30     	; 0x5b4 <vfprintf+0x13c>
     596:	93 35       	cpi	r25, 0x53	; 83
     598:	09 f0       	breq	.+2      	; 0x59c <vfprintf+0x124>
     59a:	56 c0       	rjmp	.+172    	; 0x648 <vfprintf+0x1d0>
     59c:	20 c0       	rjmp	.+64     	; 0x5de <vfprintf+0x166>
     59e:	f5 01       	movw	r30, r10
     5a0:	80 81       	ld	r24, Z
     5a2:	89 83       	std	Y+1, r24	; 0x01
     5a4:	42 e0       	ldi	r20, 0x02	; 2
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	a4 0e       	add	r10, r20
     5aa:	b5 1e       	adc	r11, r21
     5ac:	61 01       	movw	r12, r2
     5ae:	01 e0       	ldi	r16, 0x01	; 1
     5b0:	10 e0       	ldi	r17, 0x00	; 0
     5b2:	12 c0       	rjmp	.+36     	; 0x5d8 <vfprintf+0x160>
     5b4:	f5 01       	movw	r30, r10
     5b6:	c0 80       	ld	r12, Z
     5b8:	d1 80       	ldd	r13, Z+1	; 0x01
     5ba:	f6 fc       	sbrc	r15, 6
     5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <vfprintf+0x14c>
     5be:	6f ef       	ldi	r22, 0xFF	; 255
     5c0:	7f ef       	ldi	r23, 0xFF	; 255
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <vfprintf+0x150>
     5c4:	69 2d       	mov	r22, r9
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	42 e0       	ldi	r20, 0x02	; 2
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	a4 0e       	add	r10, r20
     5ce:	b5 1e       	adc	r11, r21
     5d0:	c6 01       	movw	r24, r12
     5d2:	0e 94 24 04 	call	0x848	; 0x848 <strnlen>
     5d6:	8c 01       	movw	r16, r24
     5d8:	5f e7       	ldi	r21, 0x7F	; 127
     5da:	f5 22       	and	r15, r21
     5dc:	14 c0       	rjmp	.+40     	; 0x606 <vfprintf+0x18e>
     5de:	f5 01       	movw	r30, r10
     5e0:	c0 80       	ld	r12, Z
     5e2:	d1 80       	ldd	r13, Z+1	; 0x01
     5e4:	f6 fc       	sbrc	r15, 6
     5e6:	03 c0       	rjmp	.+6      	; 0x5ee <vfprintf+0x176>
     5e8:	6f ef       	ldi	r22, 0xFF	; 255
     5ea:	7f ef       	ldi	r23, 0xFF	; 255
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <vfprintf+0x17a>
     5ee:	69 2d       	mov	r22, r9
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	42 e0       	ldi	r20, 0x02	; 2
     5f4:	50 e0       	ldi	r21, 0x00	; 0
     5f6:	a4 0e       	add	r10, r20
     5f8:	b5 1e       	adc	r11, r21
     5fa:	c6 01       	movw	r24, r12
     5fc:	0e 94 19 04 	call	0x832	; 0x832 <strnlen_P>
     600:	8c 01       	movw	r16, r24
     602:	50 e8       	ldi	r21, 0x80	; 128
     604:	f5 2a       	or	r15, r21
     606:	f3 fe       	sbrs	r15, 3
     608:	07 c0       	rjmp	.+14     	; 0x618 <vfprintf+0x1a0>
     60a:	1a c0       	rjmp	.+52     	; 0x640 <vfprintf+0x1c8>
     60c:	80 e2       	ldi	r24, 0x20	; 32
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	b3 01       	movw	r22, r6
     612:	0e 94 2f 04 	call	0x85e	; 0x85e <fputc>
     616:	ea 94       	dec	r14
     618:	8e 2d       	mov	r24, r14
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	08 17       	cp	r16, r24
     61e:	19 07       	cpc	r17, r25
     620:	a8 f3       	brcs	.-22     	; 0x60c <vfprintf+0x194>
     622:	0e c0       	rjmp	.+28     	; 0x640 <vfprintf+0x1c8>
     624:	f6 01       	movw	r30, r12
     626:	f7 fc       	sbrc	r15, 7
     628:	85 91       	lpm	r24, Z+
     62a:	f7 fe       	sbrs	r15, 7
     62c:	81 91       	ld	r24, Z+
     62e:	6f 01       	movw	r12, r30
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	b3 01       	movw	r22, r6
     634:	0e 94 2f 04 	call	0x85e	; 0x85e <fputc>
     638:	e1 10       	cpse	r14, r1
     63a:	ea 94       	dec	r14
     63c:	01 50       	subi	r16, 0x01	; 1
     63e:	10 40       	sbci	r17, 0x00	; 0
     640:	01 15       	cp	r16, r1
     642:	11 05       	cpc	r17, r1
     644:	79 f7       	brne	.-34     	; 0x624 <vfprintf+0x1ac>
     646:	ea c0       	rjmp	.+468    	; 0x81c <vfprintf+0x3a4>
     648:	94 36       	cpi	r25, 0x64	; 100
     64a:	11 f0       	breq	.+4      	; 0x650 <vfprintf+0x1d8>
     64c:	99 36       	cpi	r25, 0x69	; 105
     64e:	69 f5       	brne	.+90     	; 0x6aa <vfprintf+0x232>
     650:	f7 fe       	sbrs	r15, 7
     652:	08 c0       	rjmp	.+16     	; 0x664 <vfprintf+0x1ec>
     654:	f5 01       	movw	r30, r10
     656:	20 81       	ld	r18, Z
     658:	31 81       	ldd	r19, Z+1	; 0x01
     65a:	42 81       	ldd	r20, Z+2	; 0x02
     65c:	53 81       	ldd	r21, Z+3	; 0x03
     65e:	84 e0       	ldi	r24, 0x04	; 4
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0a c0       	rjmp	.+20     	; 0x678 <vfprintf+0x200>
     664:	f5 01       	movw	r30, r10
     666:	80 81       	ld	r24, Z
     668:	91 81       	ldd	r25, Z+1	; 0x01
     66a:	9c 01       	movw	r18, r24
     66c:	44 27       	eor	r20, r20
     66e:	37 fd       	sbrc	r19, 7
     670:	40 95       	com	r20
     672:	54 2f       	mov	r21, r20
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	a8 0e       	add	r10, r24
     67a:	b9 1e       	adc	r11, r25
     67c:	9f e6       	ldi	r25, 0x6F	; 111
     67e:	f9 22       	and	r15, r25
     680:	57 ff       	sbrs	r21, 7
     682:	09 c0       	rjmp	.+18     	; 0x696 <vfprintf+0x21e>
     684:	50 95       	com	r21
     686:	40 95       	com	r20
     688:	30 95       	com	r19
     68a:	21 95       	neg	r18
     68c:	3f 4f       	sbci	r19, 0xFF	; 255
     68e:	4f 4f       	sbci	r20, 0xFF	; 255
     690:	5f 4f       	sbci	r21, 0xFF	; 255
     692:	e0 e8       	ldi	r30, 0x80	; 128
     694:	fe 2a       	or	r15, r30
     696:	ca 01       	movw	r24, r20
     698:	b9 01       	movw	r22, r18
     69a:	a1 01       	movw	r20, r2
     69c:	2a e0       	ldi	r18, 0x0A	; 10
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__ultoa_invert>
     6a4:	d8 2e       	mov	r13, r24
     6a6:	d2 18       	sub	r13, r2
     6a8:	40 c0       	rjmp	.+128    	; 0x72a <vfprintf+0x2b2>
     6aa:	95 37       	cpi	r25, 0x75	; 117
     6ac:	29 f4       	brne	.+10     	; 0x6b8 <vfprintf+0x240>
     6ae:	1f 2d       	mov	r17, r15
     6b0:	1f 7e       	andi	r17, 0xEF	; 239
     6b2:	2a e0       	ldi	r18, 0x0A	; 10
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	1d c0       	rjmp	.+58     	; 0x6f2 <vfprintf+0x27a>
     6b8:	1f 2d       	mov	r17, r15
     6ba:	19 7f       	andi	r17, 0xF9	; 249
     6bc:	9f 36       	cpi	r25, 0x6F	; 111
     6be:	61 f0       	breq	.+24     	; 0x6d8 <vfprintf+0x260>
     6c0:	90 37       	cpi	r25, 0x70	; 112
     6c2:	20 f4       	brcc	.+8      	; 0x6cc <vfprintf+0x254>
     6c4:	98 35       	cpi	r25, 0x58	; 88
     6c6:	09 f0       	breq	.+2      	; 0x6ca <vfprintf+0x252>
     6c8:	ac c0       	rjmp	.+344    	; 0x822 <vfprintf+0x3aa>
     6ca:	0f c0       	rjmp	.+30     	; 0x6ea <vfprintf+0x272>
     6cc:	90 37       	cpi	r25, 0x70	; 112
     6ce:	39 f0       	breq	.+14     	; 0x6de <vfprintf+0x266>
     6d0:	98 37       	cpi	r25, 0x78	; 120
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <vfprintf+0x25e>
     6d4:	a6 c0       	rjmp	.+332    	; 0x822 <vfprintf+0x3aa>
     6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <vfprintf+0x268>
     6d8:	28 e0       	ldi	r18, 0x08	; 8
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	0a c0       	rjmp	.+20     	; 0x6f2 <vfprintf+0x27a>
     6de:	10 61       	ori	r17, 0x10	; 16
     6e0:	14 fd       	sbrc	r17, 4
     6e2:	14 60       	ori	r17, 0x04	; 4
     6e4:	20 e1       	ldi	r18, 0x10	; 16
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <vfprintf+0x27a>
     6ea:	14 fd       	sbrc	r17, 4
     6ec:	16 60       	ori	r17, 0x06	; 6
     6ee:	20 e1       	ldi	r18, 0x10	; 16
     6f0:	32 e0       	ldi	r19, 0x02	; 2
     6f2:	17 ff       	sbrs	r17, 7
     6f4:	08 c0       	rjmp	.+16     	; 0x706 <vfprintf+0x28e>
     6f6:	f5 01       	movw	r30, r10
     6f8:	60 81       	ld	r22, Z
     6fa:	71 81       	ldd	r23, Z+1	; 0x01
     6fc:	82 81       	ldd	r24, Z+2	; 0x02
     6fe:	93 81       	ldd	r25, Z+3	; 0x03
     700:	44 e0       	ldi	r20, 0x04	; 4
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	08 c0       	rjmp	.+16     	; 0x716 <vfprintf+0x29e>
     706:	f5 01       	movw	r30, r10
     708:	80 81       	ld	r24, Z
     70a:	91 81       	ldd	r25, Z+1	; 0x01
     70c:	bc 01       	movw	r22, r24
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	42 e0       	ldi	r20, 0x02	; 2
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	a4 0e       	add	r10, r20
     718:	b5 1e       	adc	r11, r21
     71a:	a1 01       	movw	r20, r2
     71c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__ultoa_invert>
     720:	d8 2e       	mov	r13, r24
     722:	d2 18       	sub	r13, r2
     724:	8f e7       	ldi	r24, 0x7F	; 127
     726:	f8 2e       	mov	r15, r24
     728:	f1 22       	and	r15, r17
     72a:	f6 fe       	sbrs	r15, 6
     72c:	0b c0       	rjmp	.+22     	; 0x744 <vfprintf+0x2cc>
     72e:	5e ef       	ldi	r21, 0xFE	; 254
     730:	f5 22       	and	r15, r21
     732:	d9 14       	cp	r13, r9
     734:	38 f4       	brcc	.+14     	; 0x744 <vfprintf+0x2cc>
     736:	f4 fe       	sbrs	r15, 4
     738:	07 c0       	rjmp	.+14     	; 0x748 <vfprintf+0x2d0>
     73a:	f2 fc       	sbrc	r15, 2
     73c:	05 c0       	rjmp	.+10     	; 0x748 <vfprintf+0x2d0>
     73e:	8f ee       	ldi	r24, 0xEF	; 239
     740:	f8 22       	and	r15, r24
     742:	02 c0       	rjmp	.+4      	; 0x748 <vfprintf+0x2d0>
     744:	1d 2d       	mov	r17, r13
     746:	01 c0       	rjmp	.+2      	; 0x74a <vfprintf+0x2d2>
     748:	19 2d       	mov	r17, r9
     74a:	f4 fe       	sbrs	r15, 4
     74c:	0d c0       	rjmp	.+26     	; 0x768 <vfprintf+0x2f0>
     74e:	fe 01       	movw	r30, r28
     750:	ed 0d       	add	r30, r13
     752:	f1 1d       	adc	r31, r1
     754:	80 81       	ld	r24, Z
     756:	80 33       	cpi	r24, 0x30	; 48
     758:	19 f4       	brne	.+6      	; 0x760 <vfprintf+0x2e8>
     75a:	99 ee       	ldi	r25, 0xE9	; 233
     75c:	f9 22       	and	r15, r25
     75e:	08 c0       	rjmp	.+16     	; 0x770 <vfprintf+0x2f8>
     760:	1f 5f       	subi	r17, 0xFF	; 255
     762:	f2 fe       	sbrs	r15, 2
     764:	05 c0       	rjmp	.+10     	; 0x770 <vfprintf+0x2f8>
     766:	03 c0       	rjmp	.+6      	; 0x76e <vfprintf+0x2f6>
     768:	8f 2d       	mov	r24, r15
     76a:	86 78       	andi	r24, 0x86	; 134
     76c:	09 f0       	breq	.+2      	; 0x770 <vfprintf+0x2f8>
     76e:	1f 5f       	subi	r17, 0xFF	; 255
     770:	0f 2d       	mov	r16, r15
     772:	f3 fc       	sbrc	r15, 3
     774:	14 c0       	rjmp	.+40     	; 0x79e <vfprintf+0x326>
     776:	f0 fe       	sbrs	r15, 0
     778:	0f c0       	rjmp	.+30     	; 0x798 <vfprintf+0x320>
     77a:	1e 15       	cp	r17, r14
     77c:	10 f0       	brcs	.+4      	; 0x782 <vfprintf+0x30a>
     77e:	9d 2c       	mov	r9, r13
     780:	0b c0       	rjmp	.+22     	; 0x798 <vfprintf+0x320>
     782:	9d 2c       	mov	r9, r13
     784:	9e 0c       	add	r9, r14
     786:	91 1a       	sub	r9, r17
     788:	1e 2d       	mov	r17, r14
     78a:	06 c0       	rjmp	.+12     	; 0x798 <vfprintf+0x320>
     78c:	80 e2       	ldi	r24, 0x20	; 32
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	b3 01       	movw	r22, r6
     792:	0e 94 2f 04 	call	0x85e	; 0x85e <fputc>
     796:	1f 5f       	subi	r17, 0xFF	; 255
     798:	1e 15       	cp	r17, r14
     79a:	c0 f3       	brcs	.-16     	; 0x78c <vfprintf+0x314>
     79c:	04 c0       	rjmp	.+8      	; 0x7a6 <vfprintf+0x32e>
     79e:	1e 15       	cp	r17, r14
     7a0:	10 f4       	brcc	.+4      	; 0x7a6 <vfprintf+0x32e>
     7a2:	e1 1a       	sub	r14, r17
     7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <vfprintf+0x330>
     7a6:	ee 24       	eor	r14, r14
     7a8:	04 ff       	sbrs	r16, 4
     7aa:	0f c0       	rjmp	.+30     	; 0x7ca <vfprintf+0x352>
     7ac:	80 e3       	ldi	r24, 0x30	; 48
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	b3 01       	movw	r22, r6
     7b2:	0e 94 2f 04 	call	0x85e	; 0x85e <fputc>
     7b6:	02 ff       	sbrs	r16, 2
     7b8:	1d c0       	rjmp	.+58     	; 0x7f4 <vfprintf+0x37c>
     7ba:	01 fd       	sbrc	r16, 1
     7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <vfprintf+0x34c>
     7be:	88 e7       	ldi	r24, 0x78	; 120
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e c0       	rjmp	.+28     	; 0x7e0 <vfprintf+0x368>
     7c4:	88 e5       	ldi	r24, 0x58	; 88
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0b c0       	rjmp	.+22     	; 0x7e0 <vfprintf+0x368>
     7ca:	80 2f       	mov	r24, r16
     7cc:	86 78       	andi	r24, 0x86	; 134
     7ce:	91 f0       	breq	.+36     	; 0x7f4 <vfprintf+0x37c>
     7d0:	01 ff       	sbrs	r16, 1
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <vfprintf+0x360>
     7d4:	8b e2       	ldi	r24, 0x2B	; 43
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <vfprintf+0x362>
     7d8:	80 e2       	ldi	r24, 0x20	; 32
     7da:	f7 fc       	sbrc	r15, 7
     7dc:	8d e2       	ldi	r24, 0x2D	; 45
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	b3 01       	movw	r22, r6
     7e2:	0e 94 2f 04 	call	0x85e	; 0x85e <fputc>
     7e6:	06 c0       	rjmp	.+12     	; 0x7f4 <vfprintf+0x37c>
     7e8:	80 e3       	ldi	r24, 0x30	; 48
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	b3 01       	movw	r22, r6
     7ee:	0e 94 2f 04 	call	0x85e	; 0x85e <fputc>
     7f2:	9a 94       	dec	r9
     7f4:	d9 14       	cp	r13, r9
     7f6:	c0 f3       	brcs	.-16     	; 0x7e8 <vfprintf+0x370>
     7f8:	da 94       	dec	r13
     7fa:	f1 01       	movw	r30, r2
     7fc:	ed 0d       	add	r30, r13
     7fe:	f1 1d       	adc	r31, r1
     800:	80 81       	ld	r24, Z
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	b3 01       	movw	r22, r6
     806:	0e 94 2f 04 	call	0x85e	; 0x85e <fputc>
     80a:	dd 20       	and	r13, r13
     80c:	a9 f7       	brne	.-22     	; 0x7f8 <vfprintf+0x380>
     80e:	06 c0       	rjmp	.+12     	; 0x81c <vfprintf+0x3a4>
     810:	80 e2       	ldi	r24, 0x20	; 32
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	b3 01       	movw	r22, r6
     816:	0e 94 2f 04 	call	0x85e	; 0x85e <fputc>
     81a:	ea 94       	dec	r14
     81c:	ee 20       	and	r14, r14
     81e:	c1 f7       	brne	.-16     	; 0x810 <vfprintf+0x398>
     820:	43 ce       	rjmp	.-890    	; 0x4a8 <vfprintf+0x30>
     822:	f3 01       	movw	r30, r6
     824:	66 81       	ldd	r22, Z+6	; 0x06
     826:	77 81       	ldd	r23, Z+7	; 0x07
     828:	cb 01       	movw	r24, r22
     82a:	2b 96       	adiw	r28, 0x0b	; 11
     82c:	e2 e1       	ldi	r30, 0x12	; 18
     82e:	0c 94 04 18 	jmp	0x3008	; 0x3008 <__epilogue_restores__>

00000832 <strnlen_P>:
     832:	fc 01       	movw	r30, r24
     834:	05 90       	lpm	r0, Z+
     836:	61 50       	subi	r22, 0x01	; 1
     838:	70 40       	sbci	r23, 0x00	; 0
     83a:	01 10       	cpse	r0, r1
     83c:	d8 f7       	brcc	.-10     	; 0x834 <strnlen_P+0x2>
     83e:	80 95       	com	r24
     840:	90 95       	com	r25
     842:	8e 0f       	add	r24, r30
     844:	9f 1f       	adc	r25, r31
     846:	08 95       	ret

00000848 <strnlen>:
     848:	fc 01       	movw	r30, r24
     84a:	61 50       	subi	r22, 0x01	; 1
     84c:	70 40       	sbci	r23, 0x00	; 0
     84e:	01 90       	ld	r0, Z+
     850:	01 10       	cpse	r0, r1
     852:	d8 f7       	brcc	.-10     	; 0x84a <strnlen+0x2>
     854:	80 95       	com	r24
     856:	90 95       	com	r25
     858:	8e 0f       	add	r24, r30
     85a:	9f 1f       	adc	r25, r31
     85c:	08 95       	ret

0000085e <fputc>:
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	8c 01       	movw	r16, r24
     868:	eb 01       	movw	r28, r22
     86a:	8b 81       	ldd	r24, Y+3	; 0x03
     86c:	81 ff       	sbrs	r24, 1
     86e:	1b c0       	rjmp	.+54     	; 0x8a6 <__stack+0x47>
     870:	82 ff       	sbrs	r24, 2
     872:	0d c0       	rjmp	.+26     	; 0x88e <__stack+0x2f>
     874:	2e 81       	ldd	r18, Y+6	; 0x06
     876:	3f 81       	ldd	r19, Y+7	; 0x07
     878:	8c 81       	ldd	r24, Y+4	; 0x04
     87a:	9d 81       	ldd	r25, Y+5	; 0x05
     87c:	28 17       	cp	r18, r24
     87e:	39 07       	cpc	r19, r25
     880:	64 f4       	brge	.+24     	; 0x89a <__stack+0x3b>
     882:	e8 81       	ld	r30, Y
     884:	f9 81       	ldd	r31, Y+1	; 0x01
     886:	01 93       	st	Z+, r16
     888:	f9 83       	std	Y+1, r31	; 0x01
     88a:	e8 83       	st	Y, r30
     88c:	06 c0       	rjmp	.+12     	; 0x89a <__stack+0x3b>
     88e:	e8 85       	ldd	r30, Y+8	; 0x08
     890:	f9 85       	ldd	r31, Y+9	; 0x09
     892:	80 2f       	mov	r24, r16
     894:	09 95       	icall
     896:	89 2b       	or	r24, r25
     898:	31 f4       	brne	.+12     	; 0x8a6 <__stack+0x47>
     89a:	8e 81       	ldd	r24, Y+6	; 0x06
     89c:	9f 81       	ldd	r25, Y+7	; 0x07
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	9f 83       	std	Y+7, r25	; 0x07
     8a2:	8e 83       	std	Y+6, r24	; 0x06
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
     8a6:	0f ef       	ldi	r16, 0xFF	; 255
     8a8:	1f ef       	ldi	r17, 0xFF	; 255
     8aa:	c8 01       	movw	r24, r16
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	08 95       	ret

000008b6 <__ultoa_invert>:
     8b6:	fa 01       	movw	r30, r20
     8b8:	aa 27       	eor	r26, r26
     8ba:	28 30       	cpi	r18, 0x08	; 8
     8bc:	51 f1       	breq	.+84     	; 0x912 <__ultoa_invert+0x5c>
     8be:	20 31       	cpi	r18, 0x10	; 16
     8c0:	81 f1       	breq	.+96     	; 0x922 <__ultoa_invert+0x6c>
     8c2:	e8 94       	clt
     8c4:	6f 93       	push	r22
     8c6:	6e 7f       	andi	r22, 0xFE	; 254
     8c8:	6e 5f       	subi	r22, 0xFE	; 254
     8ca:	7f 4f       	sbci	r23, 0xFF	; 255
     8cc:	8f 4f       	sbci	r24, 0xFF	; 255
     8ce:	9f 4f       	sbci	r25, 0xFF	; 255
     8d0:	af 4f       	sbci	r26, 0xFF	; 255
     8d2:	b1 e0       	ldi	r27, 0x01	; 1
     8d4:	3e d0       	rcall	.+124    	; 0x952 <__ultoa_invert+0x9c>
     8d6:	b4 e0       	ldi	r27, 0x04	; 4
     8d8:	3c d0       	rcall	.+120    	; 0x952 <__ultoa_invert+0x9c>
     8da:	67 0f       	add	r22, r23
     8dc:	78 1f       	adc	r23, r24
     8de:	89 1f       	adc	r24, r25
     8e0:	9a 1f       	adc	r25, r26
     8e2:	a1 1d       	adc	r26, r1
     8e4:	68 0f       	add	r22, r24
     8e6:	79 1f       	adc	r23, r25
     8e8:	8a 1f       	adc	r24, r26
     8ea:	91 1d       	adc	r25, r1
     8ec:	a1 1d       	adc	r26, r1
     8ee:	6a 0f       	add	r22, r26
     8f0:	71 1d       	adc	r23, r1
     8f2:	81 1d       	adc	r24, r1
     8f4:	91 1d       	adc	r25, r1
     8f6:	a1 1d       	adc	r26, r1
     8f8:	20 d0       	rcall	.+64     	; 0x93a <__ultoa_invert+0x84>
     8fa:	09 f4       	brne	.+2      	; 0x8fe <__ultoa_invert+0x48>
     8fc:	68 94       	set
     8fe:	3f 91       	pop	r19
     900:	2a e0       	ldi	r18, 0x0A	; 10
     902:	26 9f       	mul	r18, r22
     904:	11 24       	eor	r1, r1
     906:	30 19       	sub	r19, r0
     908:	30 5d       	subi	r19, 0xD0	; 208
     90a:	31 93       	st	Z+, r19
     90c:	de f6       	brtc	.-74     	; 0x8c4 <__ultoa_invert+0xe>
     90e:	cf 01       	movw	r24, r30
     910:	08 95       	ret
     912:	46 2f       	mov	r20, r22
     914:	47 70       	andi	r20, 0x07	; 7
     916:	40 5d       	subi	r20, 0xD0	; 208
     918:	41 93       	st	Z+, r20
     91a:	b3 e0       	ldi	r27, 0x03	; 3
     91c:	0f d0       	rcall	.+30     	; 0x93c <__ultoa_invert+0x86>
     91e:	c9 f7       	brne	.-14     	; 0x912 <__ultoa_invert+0x5c>
     920:	f6 cf       	rjmp	.-20     	; 0x90e <__ultoa_invert+0x58>
     922:	46 2f       	mov	r20, r22
     924:	4f 70       	andi	r20, 0x0F	; 15
     926:	40 5d       	subi	r20, 0xD0	; 208
     928:	4a 33       	cpi	r20, 0x3A	; 58
     92a:	18 f0       	brcs	.+6      	; 0x932 <__ultoa_invert+0x7c>
     92c:	49 5d       	subi	r20, 0xD9	; 217
     92e:	31 fd       	sbrc	r19, 1
     930:	40 52       	subi	r20, 0x20	; 32
     932:	41 93       	st	Z+, r20
     934:	02 d0       	rcall	.+4      	; 0x93a <__ultoa_invert+0x84>
     936:	a9 f7       	brne	.-22     	; 0x922 <__ultoa_invert+0x6c>
     938:	ea cf       	rjmp	.-44     	; 0x90e <__ultoa_invert+0x58>
     93a:	b4 e0       	ldi	r27, 0x04	; 4
     93c:	a6 95       	lsr	r26
     93e:	97 95       	ror	r25
     940:	87 95       	ror	r24
     942:	77 95       	ror	r23
     944:	67 95       	ror	r22
     946:	ba 95       	dec	r27
     948:	c9 f7       	brne	.-14     	; 0x93c <__ultoa_invert+0x86>
     94a:	00 97       	sbiw	r24, 0x00	; 0
     94c:	61 05       	cpc	r22, r1
     94e:	71 05       	cpc	r23, r1
     950:	08 95       	ret
     952:	9b 01       	movw	r18, r22
     954:	ac 01       	movw	r20, r24
     956:	0a 2e       	mov	r0, r26
     958:	06 94       	lsr	r0
     95a:	57 95       	ror	r21
     95c:	47 95       	ror	r20
     95e:	37 95       	ror	r19
     960:	27 95       	ror	r18
     962:	ba 95       	dec	r27
     964:	c9 f7       	brne	.-14     	; 0x958 <__ultoa_invert+0xa2>
     966:	62 0f       	add	r22, r18
     968:	73 1f       	adc	r23, r19
     96a:	84 1f       	adc	r24, r20
     96c:	95 1f       	adc	r25, r21
     96e:	a0 1d       	adc	r26, r0
     970:	08 95       	ret

00000972 <delay_ms>:
uchar buf[80];

/**
 * Some basic delay function
 */
void delay_ms(unsigned short ms) {
     972:	df 93       	push	r29
     974:	cf 93       	push	r28
     976:	00 d0       	rcall	.+0      	; 0x978 <delay_ms+0x6>
     978:	00 d0       	rcall	.+0      	; 0x97a <delay_ms+0x8>
     97a:	00 d0       	rcall	.+0      	; 0x97c <delay_ms+0xa>
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
     980:	9e 83       	std	Y+6, r25	; 0x06
     982:	8d 83       	std	Y+5, r24	; 0x05
	unsigned short outer1, outer2;
	outer1 = 200 * 12;
     984:	80 e6       	ldi	r24, 0x60	; 96
     986:	99 e0       	ldi	r25, 0x09	; 9
     988:	9c 83       	std	Y+4, r25	; 0x04
     98a:	8b 83       	std	Y+3, r24	; 0x03
     98c:	1c c0       	rjmp	.+56     	; 0x9c6 <delay_ms+0x54>

	while (outer1) {
		outer2 = 100;
     98e:	84 e6       	ldi	r24, 0x64	; 100
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	9a 83       	std	Y+2, r25	; 0x02
     994:	89 83       	std	Y+1, r24	; 0x01
     996:	0e c0       	rjmp	.+28     	; 0x9b4 <delay_ms+0x42>
		while (outer2) {
			while (ms)
				ms--;
     998:	8d 81       	ldd	r24, Y+5	; 0x05
     99a:	9e 81       	ldd	r25, Y+6	; 0x06
     99c:	01 97       	sbiw	r24, 0x01	; 1
     99e:	9e 83       	std	Y+6, r25	; 0x06
     9a0:	8d 83       	std	Y+5, r24	; 0x05
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
			while (ms)
     9a2:	8d 81       	ldd	r24, Y+5	; 0x05
     9a4:	9e 81       	ldd	r25, Y+6	; 0x06
     9a6:	00 97       	sbiw	r24, 0x00	; 0
     9a8:	b9 f7       	brne	.-18     	; 0x998 <delay_ms+0x26>
				ms--;
			outer2--;
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	9a 81       	ldd	r25, Y+2	; 0x02
     9ae:	01 97       	sbiw	r24, 0x01	; 1
     9b0:	9a 83       	std	Y+2, r25	; 0x02
     9b2:	89 83       	std	Y+1, r24	; 0x01
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
		outer2 = 100;
		while (outer2) {
     9b4:	89 81       	ldd	r24, Y+1	; 0x01
     9b6:	9a 81       	ldd	r25, Y+2	; 0x02
     9b8:	00 97       	sbiw	r24, 0x00	; 0
     9ba:	99 f7       	brne	.-26     	; 0x9a2 <delay_ms+0x30>
			while (ms)
				ms--;
			outer2--;
		}
		outer1--;
     9bc:	8b 81       	ldd	r24, Y+3	; 0x03
     9be:	9c 81       	ldd	r25, Y+4	; 0x04
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	9c 83       	std	Y+4, r25	; 0x04
     9c4:	8b 83       	std	Y+3, r24	; 0x03
 */
void delay_ms(unsigned short ms) {
	unsigned short outer1, outer2;
	outer1 = 200 * 12;

	while (outer1) {
     9c6:	8b 81       	ldd	r24, Y+3	; 0x03
     9c8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ca:	00 97       	sbiw	r24, 0x00	; 0
     9cc:	01 f7       	brne	.-64     	; 0x98e <delay_ms+0x1c>
				ms--;
			outer2--;
		}
		outer1--;
	}
}
     9ce:	26 96       	adiw	r28, 0x06	; 6
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	cf 91       	pop	r28
     9dc:	df 91       	pop	r29
     9de:	08 95       	ret

000009e0 <gpib_init>:
 * Init GPIB pins and variables.
 * \brief All signal lines not related to the controller part
 * 		are initialized with useful values.
 *		(The controller part initialization is done on gpib_controller_assert())
 */
void gpib_init(void) {
     9e0:	df 93       	push	r29
     9e2:	cf 93       	push	r28
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
	// data lines - complete port A as input
	DDRA = 0x00;
     9e8:	ea e3       	ldi	r30, 0x3A	; 58
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	10 82       	st	Z, r1

	// handshake lines - on port D , everything as input
	DDRD &= ~_BV(G_DAV); // DAV 
     9ee:	a1 e3       	ldi	r26, 0x31	; 49
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	e1 e3       	ldi	r30, 0x31	; 49
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	80 81       	ld	r24, Z
     9f8:	8b 7f       	andi	r24, 0xFB	; 251
     9fa:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_EOI); // EOI 
     9fc:	a1 e3       	ldi	r26, 0x31	; 49
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	e1 e3       	ldi	r30, 0x31	; 49
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	8f 7e       	andi	r24, 0xEF	; 239
     a08:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_SRQ); // SRQ 
     a0a:	a1 e3       	ldi	r26, 0x31	; 49
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	e1 e3       	ldi	r30, 0x31	; 49
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	8f 7b       	andi	r24, 0xBF	; 191
     a16:	8c 93       	st	X, r24
	DDRD &= ~_BV(G_ATN); // ATN  
     a18:	a1 e3       	ldi	r26, 0x31	; 49
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	e1 e3       	ldi	r30, 0x31	; 49
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_REN); // REN  
     a26:	a7 e3       	ldi	r26, 0x37	; 55
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	e7 e3       	ldi	r30, 0x37	; 55
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 81       	ld	r24, Z
     a30:	8d 7f       	andi	r24, 0xFD	; 253
     a32:	8c 93       	st	X, r24
	DDRB &= ~_BV(G_IFC); // IFC  
     a34:	a7 e3       	ldi	r26, 0x37	; 55
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	e7 e3       	ldi	r30, 0x37	; 55
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	8e 7f       	andi	r24, 0xFE	; 254
     a40:	8c 93       	st	X, r24

	// init handshake lines
	assign_bit(DDRD, PORTD, G_NRFD);
     a42:	a2 e3       	ldi	r26, 0x32	; 50
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e2 e3       	ldi	r30, 0x32	; 50
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	87 7f       	andi	r24, 0xF7	; 247
     a4e:	8c 93       	st	X, r24
     a50:	a1 e3       	ldi	r26, 0x31	; 49
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	e1 e3       	ldi	r30, 0x31	; 49
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	80 81       	ld	r24, Z
     a5a:	88 60       	ori	r24, 0x08	; 8
     a5c:	8c 93       	st	X, r24
     a5e:	a2 e3       	ldi	r26, 0x32	; 50
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	e2 e3       	ldi	r30, 0x32	; 50
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	80 81       	ld	r24, Z
     a68:	87 7f       	andi	r24, 0xF7	; 247
     a6a:	8c 93       	st	X, r24
	// not ready for data now
	release_bit(DDRD, PORTD, G_NDAC);
     a6c:	a1 e3       	ldi	r26, 0x31	; 49
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	e1 e3       	ldi	r30, 0x31	; 49
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	80 81       	ld	r24, Z
     a76:	8f 7d       	andi	r24, 0xDF	; 223
     a78:	8c 93       	st	X, r24
     a7a:	a2 e3       	ldi	r26, 0x32	; 50
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	e2 e3       	ldi	r30, 0x32	; 50
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	80 81       	ld	r24, Z
     a84:	80 62       	ori	r24, 0x20	; 32
     a86:	8c 93       	st	X, r24
	// initially: ok so far
}
     a88:	cf 91       	pop	r28
     a8a:	df 91       	pop	r29
     a8c:	08 95       	ret

00000a8e <gpib_send_address>:
 * Sends address bytes to address a partner. Caller of this function must decide
 * if talker or listener address is used.
 * \param primary primary address of device
 * \param secondary secondary address of device
 */
void gpib_send_address(uchar primary, uchar secondary) {
     a8e:	df 93       	push	r29
     a90:	cf 93       	push	r28
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
     a96:	2c 97       	sbiw	r28, 0x0c	; 12
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	8b 87       	std	Y+11, r24	; 0x0b
     aa4:	6c 87       	std	Y+12, r22	; 0x0c
	uchar controlString[10];
	controlString[0] = primary;
     aa6:	8b 85       	ldd	r24, Y+11	; 0x0b
     aa8:	89 83       	std	Y+1, r24	; 0x01
	//uart_puts("before talker address p write\r\n");
	gpib_cmd(controlString, 1);
     aaa:	ce 01       	movw	r24, r28
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	0e 94 7d 07 	call	0xefa	; 0xefa <gpib_cmd>
	// handle secondary address if required
	if (secondary != ADDRESS_NOT_SET) {
     ab6:	8c 85       	ldd	r24, Y+12	; 0x0c
     ab8:	8f 3f       	cpi	r24, 0xFF	; 255
     aba:	41 f0       	breq	.+16     	; 0xacc <gpib_send_address+0x3e>
		controlString[0] = secondary;
     abc:	8c 85       	ldd	r24, Y+12	; 0x0c
     abe:	89 83       	std	Y+1, r24	; 0x01
		//uart_puts("before talker address s write\r\n");
		gpib_cmd(controlString, 1);
     ac0:	ce 01       	movw	r24, r28
     ac2:	01 96       	adiw	r24, 0x01	; 1
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	0e 94 7d 07 	call	0xefa	; 0xefa <gpib_cmd>
	}
	//uart_puts("after talker address write\r\n");
}
     acc:	2c 96       	adiw	r28, 0x0c	; 12
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	f8 94       	cli
     ad2:	de bf       	out	0x3e, r29	; 62
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	cd bf       	out	0x3d, r28	; 61
     ad8:	cf 91       	pop	r28
     ada:	df 91       	pop	r29
     adc:	08 95       	ret

00000ade <gpib_prepare_write>:

/**
 * Prepare partner for writing
 */
void gpib_prepare_write() {
     ade:	df 93       	push	r29
     ae0:	cf 93       	push	r28
     ae2:	cd b7       	in	r28, 0x3d	; 61
     ae4:	de b7       	in	r29, 0x3e	; 62
     ae6:	2b 97       	sbiw	r28, 0x0b	; 11
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	f8 94       	cli
     aec:	de bf       	out	0x3e, r29	; 62
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// send UNT and UNL commands (unlisten and untalk)
	gpib_untalkUnlisten();
     af2:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <gpib_untalkUnlisten>

	// set device to listener mode
	uchar primary = address2ListenerAddress(gpib_get_partner_pad());
     af6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <gpib_get_partner_pad>
     afa:	80 5e       	subi	r24, 0xE0	; 224
     afc:	8a 83       	std	Y+2, r24	; 0x02
	uchar secondary =
			(gpib_get_partner_sad() == ADDRESS_NOT_SET) ?
					ADDRESS_NOT_SET :
					secondaryAdressToAdressByte(gpib_get_partner_sad());
     afe:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <gpib_get_partner_sad>
     b02:	8f 3f       	cpi	r24, 0xFF	; 255
     b04:	31 f0       	breq	.+12     	; 0xb12 <gpib_prepare_write+0x34>
     b06:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <gpib_get_partner_sad>
     b0a:	98 2f       	mov	r25, r24
     b0c:	90 66       	ori	r25, 0x60	; 96
     b0e:	9b 87       	std	Y+11, r25	; 0x0b
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <gpib_prepare_write+0x38>
     b12:	8f ef       	ldi	r24, 0xFF	; 255
     b14:	8b 87       	std	Y+11, r24	; 0x0b
     b16:	9b 85       	ldd	r25, Y+11	; 0x0b
     b18:	99 83       	std	Y+1, r25	; 0x01
	gpib_send_address(primary, secondary);
     b1a:	8a 81       	ldd	r24, Y+2	; 0x02
     b1c:	69 81       	ldd	r22, Y+1	; 0x01
     b1e:	0e 94 47 05 	call	0xa8e	; 0xa8e <gpib_send_address>

	// set myself (controller) to talker mode
	controlString[0] = address2TalkerAddress(gpib_get_address());
     b22:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <gpib_get_address>
     b26:	80 5c       	subi	r24, 0xC0	; 192
     b28:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
     b2a:	ce 01       	movw	r24, r28
     b2c:	03 96       	adiw	r24, 0x03	; 3
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	0e 94 7d 07 	call	0xefa	; 0xefa <gpib_cmd>
}
     b36:	2b 96       	adiw	r28, 0x0b	; 11
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	cf 91       	pop	r28
     b44:	df 91       	pop	r29
     b46:	08 95       	ret

00000b48 <gpib_prepare_read>:

/**
 * Prepare partner for writing
 */
void gpib_prepare_read() {
     b48:	df 93       	push	r29
     b4a:	cf 93       	push	r28
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	2b 97       	sbiw	r28, 0x0b	; 11
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// untalk/unlisten all partners
	gpib_untalkUnlisten();
     b5c:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <gpib_untalkUnlisten>

	// set myself (controller) to listener mode
	controlString[0] = address2ListenerAddress(gpib_get_address());
     b60:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <gpib_get_address>
     b64:	80 5e       	subi	r24, 0xE0	; 224
     b66:	8b 83       	std	Y+3, r24	; 0x03
	gpib_cmd(controlString, 1);
     b68:	ce 01       	movw	r24, r28
     b6a:	03 96       	adiw	r24, 0x03	; 3
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	0e 94 7d 07 	call	0xefa	; 0xefa <gpib_cmd>

	// set device to talker mode
	uchar primary = address2TalkerAddress(gpib_get_partner_pad());
     b74:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <gpib_get_partner_pad>
     b78:	80 5c       	subi	r24, 0xC0	; 192
     b7a:	8a 83       	std	Y+2, r24	; 0x02
	uchar secondary =
			(gpib_get_partner_sad() == ADDRESS_NOT_SET) ?
					ADDRESS_NOT_SET :
					secondaryAdressToAdressByte(gpib_get_partner_sad());
     b7c:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <gpib_get_partner_sad>
     b80:	8f 3f       	cpi	r24, 0xFF	; 255
     b82:	31 f0       	breq	.+12     	; 0xb90 <gpib_prepare_read+0x48>
     b84:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <gpib_get_partner_sad>
     b88:	98 2f       	mov	r25, r24
     b8a:	90 66       	ori	r25, 0x60	; 96
     b8c:	9b 87       	std	Y+11, r25	; 0x0b
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <gpib_prepare_read+0x4c>
     b90:	8f ef       	ldi	r24, 0xFF	; 255
     b92:	8b 87       	std	Y+11, r24	; 0x0b
     b94:	9b 85       	ldd	r25, Y+11	; 0x0b
     b96:	99 83       	std	Y+1, r25	; 0x01
	gpib_send_address(primary, secondary);
     b98:	8a 81       	ldd	r24, Y+2	; 0x02
     b9a:	69 81       	ldd	r22, Y+1	; 0x01
     b9c:	0e 94 47 05 	call	0xa8e	; 0xa8e <gpib_send_address>
}
     ba0:	2b 96       	adiw	r28, 0x0b	; 11
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
     bac:	cf 91       	pop	r28
     bae:	df 91       	pop	r29
     bb0:	08 95       	ret

00000bb2 <gpib_untalkUnlisten>:

/**
 * Untalk / unlisten all partners on bus.
 */
void gpib_untalkUnlisten() {
     bb2:	df 93       	push	r29
     bb4:	cf 93       	push	r28
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
     bba:	28 97       	sbiw	r28, 0x08	; 8
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	cd bf       	out	0x3d, r28	; 61
	uchar controlString[8];
	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	controlString[0] = G_CMD_UNT;
     bc6:	8f e5       	ldi	r24, 0x5F	; 95
     bc8:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     bca:	ce 01       	movw	r24, r28
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	61 e0       	ldi	r22, 0x01	; 1
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	0e 94 7d 07 	call	0xefa	; 0xefa <gpib_cmd>
	controlString[0] = G_CMD_UNL;
     bd6:	8f e3       	ldi	r24, 0x3F	; 63
     bd8:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
     bda:	ce 01       	movw	r24, r28
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	0e 94 7d 07 	call	0xefa	; 0xefa <gpib_cmd>
}
     be6:	28 96       	adiw	r28, 0x08	; 8
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	cf 91       	pop	r28
     bf4:	df 91       	pop	r29
     bf6:	08 95       	ret

00000bf8 <gpib_receive>:
 *  \returns		On any error, 0xff is returned. in this case, the value of parameter *_byte is undefined.
 * 		Otherwise the value of the EOI signal line during read is returned. If EOI was assigned, a 0x01 is
 * 		returned. If EOI was not assigned, a 0x00 is returned. Assignment of EOI means that the talker
 * 		is sending the last character for this transmission.
 */
uchar gpib_receive(uchar* _byte) {
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	27 97       	sbiw	r28, 0x07	; 7
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	9e 83       	std	Y+6, r25	; 0x06
     c0e:	8d 83       	std	Y+5, r24	; 0x05
	int timeout;
	uchar byte, eoi;

	//uart_puts("\n\rgpib_receive()\n\r");

	if (controller.talks == 1) {
     c10:	80 91 d7 04 	lds	r24, 0x04D7
     c14:	81 30       	cpi	r24, 0x01	; 1
     c16:	39 f4       	brne	.+14     	; 0xc26 <gpib_receive+0x2e>
		*_byte = 0xff;
     c18:	ed 81       	ldd	r30, Y+5	; 0x05
     c1a:	fe 81       	ldd	r31, Y+6	; 0x06
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	80 83       	st	Z, r24
		return 0xff;
     c20:	8f ef       	ldi	r24, 0xFF	; 255
     c22:	8f 83       	std	Y+7, r24	; 0x07
     c24:	c6 c0       	rjmp	.+396    	; 0xdb2 <gpib_receive+0x1ba>
	}

	// handshake: set nrfd, means i am ready to receive some data
	release_bit(DDRD, PORTD, G_NRFD);
     c26:	a1 e3       	ldi	r26, 0x31	; 49
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e1 e3       	ldi	r30, 0x31	; 49
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	87 7f       	andi	r24, 0xF7	; 247
     c32:	8c 93       	st	X, r24
     c34:	a2 e3       	ldi	r26, 0x32	; 50
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e2 e3       	ldi	r30, 0x32	; 50
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	88 60       	ori	r24, 0x08	; 8
     c40:	8c 93       	st	X, r24
	assign_bit(DDRD, PORTD, G_NDAC);
     c42:	a2 e3       	ldi	r26, 0x32	; 50
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e2 e3       	ldi	r30, 0x32	; 50
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	8f 7d       	andi	r24, 0xDF	; 223
     c4e:	8c 93       	st	X, r24
     c50:	a1 e3       	ldi	r26, 0x31	; 49
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e1 e3       	ldi	r30, 0x31	; 49
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	80 62       	ori	r24, 0x20	; 32
     c5c:	8c 93       	st	X, r24
     c5e:	a2 e3       	ldi	r26, 0x32	; 50
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e2 e3       	ldi	r30, 0x32	; 50
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	8f 7d       	andi	r24, 0xDF	; 223
     c6a:	8c 93       	st	X, r24

	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     c6c:	80 91 41 06 	lds	r24, 0x0641
     c70:	88 2f       	mov	r24, r24
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	05 96       	adiw	r24, 0x05	; 5
     c76:	9c 83       	std	Y+4, r25	; 0x04
     c78:	8b 83       	std	Y+3, r24	; 0x03
     c7a:	10 c0       	rjmp	.+32     	; 0xc9c <gpib_receive+0xa4>
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     c7c:	80 91 41 06 	lds	r24, 0x0641
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	8b 81       	ldd	r24, Y+3	; 0x03
     c86:	9c 81       	ldd	r25, Y+4	; 0x04
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	39 f4       	brne	.+14     	; 0xc9c <gpib_receive+0xa4>
			uart_puts("\n\rError: DAV timeout (1)\n\r");
     c8e:	80 e6       	ldi	r24, 0x60	; 96
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
			return 0xff;
     c96:	8f ef       	ldi	r24, 0xFF	; 255
     c98:	8f 83       	std	Y+7, r24	; 0x07
     c9a:	8b c0       	rjmp	.+278    	; 0xdb2 <gpib_receive+0x1ba>
	//gpib_info();

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_DAV)) && (s <= timeout)) {
     c9c:	e0 e3       	ldi	r30, 0x30	; 48
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	88 2f       	mov	r24, r24
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	84 70       	andi	r24, 0x04	; 4
     ca8:	90 70       	andi	r25, 0x00	; 0
     caa:	00 97       	sbiw	r24, 0x00	; 0
     cac:	49 f0       	breq	.+18     	; 0xcc0 <gpib_receive+0xc8>
     cae:	80 91 41 06 	lds	r24, 0x0641
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	9c 81       	ldd	r25, Y+4	; 0x04
     cba:	82 17       	cp	r24, r18
     cbc:	93 07       	cpc	r25, r19
     cbe:	f4 f6       	brge	.-68     	; 0xc7c <gpib_receive+0x84>
#else
	loop_until_bit_is_clear(PIND,G_DAV);
#endif

	// handshake: clear NRFD, means i am busy now to read data
	assign_bit(DDRD, PORTD, G_NRFD);
     cc0:	a2 e3       	ldi	r26, 0x32	; 50
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e2 e3       	ldi	r30, 0x32	; 50
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	87 7f       	andi	r24, 0xF7	; 247
     ccc:	8c 93       	st	X, r24
     cce:	a1 e3       	ldi	r26, 0x31	; 49
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e1 e3       	ldi	r30, 0x31	; 49
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	88 60       	ori	r24, 0x08	; 8
     cda:	8c 93       	st	X, r24
     cdc:	a2 e3       	ldi	r26, 0x32	; 50
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e2 e3       	ldi	r30, 0x32	; 50
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	87 7f       	andi	r24, 0xF7	; 247
     ce8:	8c 93       	st	X, r24
	// read data
	byte = PINA ^ 0xff;
     cea:	e9 e3       	ldi	r30, 0x39	; 57
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	80 95       	com	r24
     cf2:	8a 83       	std	Y+2, r24	; 0x02

	// handshake: set ndac, means i have completed/accepted the read
	release_bit(DDRD, PORTD, G_NDAC);
     cf4:	a1 e3       	ldi	r26, 0x31	; 49
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e1 e3       	ldi	r30, 0x31	; 49
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	8f 7d       	andi	r24, 0xDF	; 223
     d00:	8c 93       	st	X, r24
     d02:	a2 e3       	ldi	r26, 0x32	; 50
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e2 e3       	ldi	r30, 0x32	; 50
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	80 62       	ori	r24, 0x20	; 32
     d0e:	8c 93       	st	X, r24

#ifdef WITH_TIMEOUT
	timeout = s + 5;
     d10:	80 91 41 06 	lds	r24, 0x0641
     d14:	88 2f       	mov	r24, r24
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	05 96       	adiw	r24, 0x05	; 5
     d1a:	9c 83       	std	Y+4, r25	; 0x04
     d1c:	8b 83       	std	Y+3, r24	; 0x03
     d1e:	10 c0       	rjmp	.+32     	; 0xd40 <gpib_receive+0x148>
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
		if (s == timeout) {
     d20:	80 91 41 06 	lds	r24, 0x0641
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	9c 81       	ldd	r25, Y+4	; 0x04
     d2c:	28 17       	cp	r18, r24
     d2e:	39 07       	cpc	r19, r25
     d30:	39 f4       	brne	.+14     	; 0xd40 <gpib_receive+0x148>
			uart_puts("\n\rError: DAV timeout (2)\n\r");
     d32:	8b e7       	ldi	r24, 0x7B	; 123
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
			return 0xff;
     d3a:	8f ef       	ldi	r24, 0xFF	; 255
     d3c:	8f 83       	std	Y+7, r24	; 0x07
     d3e:	39 c0       	rjmp	.+114    	; 0xdb2 <gpib_receive+0x1ba>
	release_bit(DDRD, PORTD, G_NDAC);

#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while (!(PIND & _BV(G_DAV)) && (s <= timeout)) {
     d40:	e0 e3       	ldi	r30, 0x30	; 48
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	88 2f       	mov	r24, r24
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	84 70       	andi	r24, 0x04	; 4
     d4c:	90 70       	andi	r25, 0x00	; 0
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	49 f4       	brne	.+18     	; 0xd64 <gpib_receive+0x16c>
     d52:	80 91 41 06 	lds	r24, 0x0641
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	82 17       	cp	r24, r18
     d60:	93 07       	cpc	r25, r19
     d62:	f4 f6       	brge	.-68     	; 0xd20 <gpib_receive+0x128>
	}
#else
	loop_until_bit_is_set(PIND,G_DAV);
#endif
	// handshake: clear ndac (this is a prerequisite for receive next byte)
	assign_bit(DDRD, PORTD, G_NDAC);
     d64:	a2 e3       	ldi	r26, 0x32	; 50
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e2 e3       	ldi	r30, 0x32	; 50
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	8f 7d       	andi	r24, 0xDF	; 223
     d70:	8c 93       	st	X, r24
     d72:	a1 e3       	ldi	r26, 0x31	; 49
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e1 e3       	ldi	r30, 0x31	; 49
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	80 62       	ori	r24, 0x20	; 32
     d7e:	8c 93       	st	X, r24
     d80:	a2 e3       	ldi	r26, 0x32	; 50
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e2 e3       	ldi	r30, 0x32	; 50
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	8f 7d       	andi	r24, 0xDF	; 223
     d8c:	8c 93       	st	X, r24

	// check if last byte of transmission
	eoi = bit_is_clear(PIND, G_EOI);
     d8e:	e0 e3       	ldi	r30, 0x30	; 48
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	80 71       	andi	r24, 0x10	; 16
     d9a:	90 70       	andi	r25, 0x00	; 0
     d9c:	19 82       	std	Y+1, r1	; 0x01
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	11 f4       	brne	.+4      	; 0xda6 <gpib_receive+0x1ae>
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	89 83       	std	Y+1, r24	; 0x01

	*_byte = byte;
     da6:	ed 81       	ldd	r30, Y+5	; 0x05
     da8:	fe 81       	ldd	r31, Y+6	; 0x06
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	80 83       	st	Z, r24

	return eoi;
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	8f 83       	std	Y+7, r24	; 0x07
     db2:	8f 81       	ldd	r24, Y+7	; 0x07
}
     db4:	27 96       	adiw	r28, 0x07	; 7
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <gpib_controller_assign>:
 * You have to change the initialization of the partner array according to your environment.
 * The partners-array is used by gpib_serial_poll() for looping over all existing devices.
 * 
 * \param address the address to be used by the controller. Usually 0x00.
 */
void gpib_controller_assign(uchar address) {
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	0f 92       	push	r0
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	89 83       	std	Y+1, r24	; 0x01
	controller.myaddress = address;
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	80 93 d4 04 	sts	0x04D4, r24
	controller.talks = 0;
     dd8:	10 92 d7 04 	sts	0x04D7, r1
	controller.partner.primary = ADDRESS_NOT_SET; // init default active partner
     ddc:	8f ef       	ldi	r24, 0xFF	; 255
     dde:	80 93 d5 04 	sts	0x04D5, r24
	controller.partner.secondary = ADDRESS_NOT_SET;
     de2:	8f ef       	ldi	r24, 0xFF	; 255
     de4:	80 93 d6 04 	sts	0x04D6, r24
	controller.flavour = FLAVOUR_NONE;
     de8:	10 92 d8 04 	sts	0x04D8, r1
	/** clear list of partners */
	gpib_clear_partners();
     dec:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <gpib_clear_partners>
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     df0:	a8 e3       	ldi	r26, 0x38	; 56
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e8 e3       	ldi	r30, 0x38	; 56
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8e 7f       	andi	r24, 0xFE	; 254
     dfc:	8c 93       	st	X, r24
     dfe:	a7 e3       	ldi	r26, 0x37	; 55
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e7 e3       	ldi	r30, 0x37	; 55
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	81 60       	ori	r24, 0x01	; 1
     e0a:	8c 93       	st	X, r24
     e0c:	a8 e3       	ldi	r26, 0x38	; 56
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e8 e3       	ldi	r30, 0x38	; 56
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	8e 7f       	andi	r24, 0xFE	; 254
     e18:	8c 93       	st	X, r24
	delay_ms(200);
     e1a:	88 ec       	ldi	r24, 0xC8	; 200
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 b9 04 	call	0x972	; 0x972 <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     e22:	a7 e3       	ldi	r26, 0x37	; 55
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e7 e3       	ldi	r30, 0x37	; 55
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	8e 7f       	andi	r24, 0xFE	; 254
     e2e:	8c 93       	st	X, r24
     e30:	a8 e3       	ldi	r26, 0x38	; 56
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e8 e3       	ldi	r30, 0x38	; 56
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	81 60       	ori	r24, 0x01	; 1
     e3c:	8c 93       	st	X, r24
	// set up all devices for remote control
	assign_bit(DDRB, PORTB, G_REN);
     e3e:	a8 e3       	ldi	r26, 0x38	; 56
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e8 e3       	ldi	r30, 0x38	; 56
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	8d 7f       	andi	r24, 0xFD	; 253
     e4a:	8c 93       	st	X, r24
     e4c:	a7 e3       	ldi	r26, 0x37	; 55
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e7 e3       	ldi	r30, 0x37	; 55
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	82 60       	ori	r24, 0x02	; 2
     e58:	8c 93       	st	X, r24
     e5a:	a8 e3       	ldi	r26, 0x38	; 56
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e8 e3       	ldi	r30, 0x38	; 56
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	8d 7f       	andi	r24, 0xFD	; 253
     e66:	8c 93       	st	X, r24

	// DCL - device clear for all devices on bus
	cmd_buf[0] = G_CMD_DCL;
     e68:	84 e1       	ldi	r24, 0x14	; 20
     e6a:	80 93 8c 05 	sts	0x058C, r24
	gpib_cmd(cmd_buf, 1);
     e6e:	8c e8       	ldi	r24, 0x8C	; 140
     e70:	95 e0       	ldi	r25, 0x05	; 5
     e72:	61 e0       	ldi	r22, 0x01	; 1
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	0e 94 7d 07 	call	0xefa	; 0xefa <gpib_cmd>
}
     e7a:	0f 90       	pop	r0
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <gpib_controller_release>:

/**
 * Release bus 
 */
void gpib_controller_release(void) {
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	// set up initial state of bus
	assign_bit(DDRB, PORTB, G_IFC);
     e8a:	a8 e3       	ldi	r26, 0x38	; 56
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e8 e3       	ldi	r30, 0x38	; 56
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8e 7f       	andi	r24, 0xFE	; 254
     e96:	8c 93       	st	X, r24
     e98:	a7 e3       	ldi	r26, 0x37	; 55
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e7 e3       	ldi	r30, 0x37	; 55
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	81 60       	ori	r24, 0x01	; 1
     ea4:	8c 93       	st	X, r24
     ea6:	a8 e3       	ldi	r26, 0x38	; 56
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e8 e3       	ldi	r30, 0x38	; 56
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8e 7f       	andi	r24, 0xFE	; 254
     eb2:	8c 93       	st	X, r24
	delay_ms(200);
     eb4:	88 ec       	ldi	r24, 0xC8	; 200
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 b9 04 	call	0x972	; 0x972 <delay_ms>
	release_bit(DDRB, PORTB, G_IFC);
     ebc:	a7 e3       	ldi	r26, 0x37	; 55
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e7 e3       	ldi	r30, 0x37	; 55
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8e 7f       	andi	r24, 0xFE	; 254
     ec8:	8c 93       	st	X, r24
     eca:	a8 e3       	ldi	r26, 0x38	; 56
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e8 e3       	ldi	r30, 0x38	; 56
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	81 60       	ori	r24, 0x01	; 1
     ed6:	8c 93       	st	X, r24
	// set up all devices for local control
	release_bit(DDRB, PORTB, G_REN);
     ed8:	a7 e3       	ldi	r26, 0x37	; 55
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e7 e3       	ldi	r30, 0x37	; 55
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	8d 7f       	andi	r24, 0xFD	; 253
     ee4:	8c 93       	st	X, r24
     ee6:	a8 e3       	ldi	r26, 0x38	; 56
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e8 e3       	ldi	r30, 0x38	; 56
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	82 60       	ori	r24, 0x02	; 2
     ef2:	8c 93       	st	X, r24
}
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <gpib_cmd>:
 * \param bytes byte array containing bytes to be send
 * \param length length of valid bytes in byte array or zero.
 * for binary data, lenght must be defined. For strings, length can be set to zero. Then the length of
 * the string is calculated internally.
 */
uchar gpib_cmd(uchar *bytes, int length) {
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	2b 97       	sbiw	r28, 0x0b	; 11
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	de bf       	out	0x3e, r29	; 62
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	cd bf       	out	0x3d, r28	; 61
     f0e:	9f 83       	std	Y+7, r25	; 0x07
     f10:	8e 83       	std	Y+6, r24	; 0x06
     f12:	79 87       	std	Y+9, r23	; 0x09
     f14:	68 87       	std	Y+8, r22	; 0x08
	uchar c;
	int i;
	// set attention arg true for commands
	uchar attention = 1;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	8a 83       	std	Y+2, r24	; 0x02

	gpib_write_prologue(attention);
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <gpib_write_prologue>

	if (length == 0) {
     f20:	88 85       	ldd	r24, Y+8	; 0x08
     f22:	99 85       	ldd	r25, Y+9	; 0x09
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	31 f4       	brne	.+12     	; 0xf34 <gpib_cmd+0x3a>
		// length==0 means this is a common C string, null-terminated.
		// then, length can be easily calculated
		length = strlen((char*) bytes);
     f28:	8e 81       	ldd	r24, Y+6	; 0x06
     f2a:	9f 81       	ldd	r25, Y+7	; 0x07
     f2c:	0e 94 c7 01 	call	0x38e	; 0x38e <strlen>
     f30:	99 87       	std	Y+9, r25	; 0x09
     f32:	88 87       	std	Y+8, r24	; 0x08
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif

	for (i = 0; i < length; i++) {
     f34:	1c 82       	std	Y+4, r1	; 0x04
     f36:	1b 82       	std	Y+3, r1	; 0x03
     f38:	28 c0       	rjmp	.+80     	; 0xf8a <gpib_cmd+0x90>
		// put data on bus
		c = bytes[i];
     f3a:	2b 81       	ldd	r18, Y+3	; 0x03
     f3c:	3c 81       	ldd	r19, Y+4	; 0x04
     f3e:	8e 81       	ldd	r24, Y+6	; 0x06
     f40:	9f 81       	ldd	r25, Y+7	; 0x07
     f42:	fc 01       	movw	r30, r24
     f44:	e2 0f       	add	r30, r18
     f46:	f3 1f       	adc	r31, r19
     f48:	80 81       	ld	r24, Z
     f4a:	8d 83       	std	Y+5, r24	; 0x05
		//sprintf( buf, "char: %c\n\r", c );
		//uart_puts(buf);

		uchar isLastByte = (i == length - 1) && !attention;
     f4c:	88 85       	ldd	r24, Y+8	; 0x08
     f4e:	99 85       	ldd	r25, Y+9	; 0x09
     f50:	9c 01       	movw	r18, r24
     f52:	21 50       	subi	r18, 0x01	; 1
     f54:	30 40       	sbci	r19, 0x00	; 0
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	28 17       	cp	r18, r24
     f5c:	39 07       	cpc	r19, r25
     f5e:	41 f4       	brne	.+16     	; 0xf70 <gpib_cmd+0x76>
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	88 23       	and	r24, r24
     f64:	29 f4       	brne	.+10     	; 0xf70 <gpib_cmd+0x76>
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	9b 87       	std	Y+11, r25	; 0x0b
     f6c:	8a 87       	std	Y+10, r24	; 0x0a
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <gpib_cmd+0x7a>
     f70:	1b 86       	std	Y+11, r1	; 0x0b
     f72:	1a 86       	std	Y+10, r1	; 0x0a
     f74:	9a 85       	ldd	r25, Y+10	; 0x0a
     f76:	99 83       	std	Y+1, r25	; 0x01
		gpib_write_byte(c, isLastByte);
     f78:	8d 81       	ldd	r24, Y+5	; 0x05
     f7a:	69 81       	ldd	r22, Y+1	; 0x01
     f7c:	0e 94 92 08 	call	0x1124	; 0x1124 <gpib_write_byte>
		sprintf(buf, "gpib_write: 0x%02x\n\r", bytes[0]);
		uart_puts((char*) buf);
	}
#endif

	for (i = 0; i < length; i++) {
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	9c 81       	ldd	r25, Y+4	; 0x04
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	9c 83       	std	Y+4, r25	; 0x04
     f88:	8b 83       	std	Y+3, r24	; 0x03
     f8a:	2b 81       	ldd	r18, Y+3	; 0x03
     f8c:	3c 81       	ldd	r19, Y+4	; 0x04
     f8e:	88 85       	ldd	r24, Y+8	; 0x08
     f90:	99 85       	ldd	r25, Y+9	; 0x09
     f92:	28 17       	cp	r18, r24
     f94:	39 07       	cpc	r19, r25
     f96:	8c f2       	brlt	.-94     	; 0xf3a <gpib_cmd+0x40>

		uchar isLastByte = (i == length - 1) && !attention;
		gpib_write_byte(c, isLastByte);
	}

	gpib_write_epilogue(attention);
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	0e 94 28 08 	call	0x1050	; 0x1050 <gpib_write_epilogue>

	return 0x00;
     f9e:	80 e0       	ldi	r24, 0x00	; 0
}
     fa0:	2b 96       	adiw	r28, 0x0b	; 11
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <gpib_write_prologue>:

/**
 * Emits prologue before writing to a listener.
 *
 */
void gpib_write_prologue(uchar attention) {
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	0f 92       	push	r0
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	89 83       	std	Y+1, r24	; 0x01
	// set talks state. This is used by ISR to recognize own talk
	// (controller must not talk to itself and must not take part in listener handshake when talking)
	controller.talks = 1;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	80 93 d7 04 	sts	0x04D7, r24
	if (attention) {
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	88 23       	and	r24, r24
     fc8:	a9 f0       	breq	.+42     	; 0xff4 <gpib_write_prologue+0x42>
		//uart_puts("\n\rgpib_controller_write()\n\r");
		// assign ATN for commands
		assign_bit(DDRD, PORTD, G_ATN);
     fca:	a2 e3       	ldi	r26, 0x32	; 50
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e2 e3       	ldi	r30, 0x32	; 50
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	8f 77       	andi	r24, 0x7F	; 127
     fd6:	8c 93       	st	X, r24
     fd8:	a1 e3       	ldi	r26, 0x31	; 49
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e1 e3       	ldi	r30, 0x31	; 49
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	80 68       	ori	r24, 0x80	; 128
     fe4:	8c 93       	st	X, r24
     fe6:	a2 e3       	ldi	r26, 0x32	; 50
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e2 e3       	ldi	r30, 0x32	; 50
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	8f 77       	andi	r24, 0x7F	; 127
     ff2:	8c 93       	st	X, r24
	}
	// release EOI during transmission
	release_bit(DDRD, PORTD, G_EOI);
     ff4:	a1 e3       	ldi	r26, 0x31	; 49
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e1 e3       	ldi	r30, 0x31	; 49
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	8f 7e       	andi	r24, 0xEF	; 239
    1000:	8c 93       	st	X, r24
    1002:	a2 e3       	ldi	r26, 0x32	; 50
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e2 e3       	ldi	r30, 0x32	; 50
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	80 61       	ori	r24, 0x10	; 16
    100e:	8c 93       	st	X, r24
	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
    1010:	a1 e3       	ldi	r26, 0x31	; 49
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e1 e3       	ldi	r30, 0x31	; 49
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	8b 7f       	andi	r24, 0xFB	; 251
    101c:	8c 93       	st	X, r24
    101e:	a2 e3       	ldi	r26, 0x32	; 50
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e2 e3       	ldi	r30, 0x32	; 50
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	84 60       	ori	r24, 0x04	; 4
    102a:	8c 93       	st	X, r24
	// release NRFD (just to be sure)
	release_bit(DDRD, PORTD, G_NRFD);
    102c:	a1 e3       	ldi	r26, 0x31	; 49
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e1 e3       	ldi	r30, 0x31	; 49
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	87 7f       	andi	r24, 0xF7	; 247
    1038:	8c 93       	st	X, r24
    103a:	a2 e3       	ldi	r26, 0x32	; 50
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e2 e3       	ldi	r30, 0x32	; 50
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	88 60       	ori	r24, 0x08	; 8
    1046:	8c 93       	st	X, r24
}
    1048:	0f 90       	pop	r0
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <gpib_write_epilogue>:

/**
 * Emits epilogue after writing to a listener.
 *
 */
void gpib_write_epilogue(uchar attention) {
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	0f 92       	push	r0
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	89 83       	std	Y+1, r24	; 0x01
	if (attention) {
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	88 23       	and	r24, r24
    1060:	71 f0       	breq	.+28     	; 0x107e <gpib_write_epilogue+0x2e>
		// assign ATN for commands
		release_bit(DDRD, PORTD, G_ATN);
    1062:	a1 e3       	ldi	r26, 0x31	; 49
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e1 e3       	ldi	r30, 0x31	; 49
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	8f 77       	andi	r24, 0x7F	; 127
    106e:	8c 93       	st	X, r24
    1070:	a2 e3       	ldi	r26, 0x32	; 50
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e2 e3       	ldi	r30, 0x32	; 50
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	80 68       	ori	r24, 0x80	; 128
    107c:	8c 93       	st	X, r24
	}
	// clear talk state.Controller does not talk anymore.
	controller.talks = 0;
    107e:	10 92 d7 04 	sts	0x04D7, r1
}
    1082:	0f 90       	pop	r0
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <gpib_write_command>:
 * - prefix with GPIB write prologue
 * - the string
 * - postfix with GPIB epilogue
 * - postfix that untalks/unlistens all partners
 */
void gpib_write_command(uchar *s) {
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	00 d0       	rcall	.+0      	; 0x1090 <gpib_write_command+0x6>
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
	gpib_prepare_write();
    1098:	0e 94 6f 05 	call	0xade	; 0xade <gpib_prepare_write>
	gpib_write_prologue(0);
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <gpib_write_prologue>
	gpib_write_string(s);
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	9a 81       	ldd	r25, Y+2	; 0x02
    10a6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <gpib_write_string>
	gpib_write_byte(ASCII_CODE_CR, 1);
    10aa:	8d e0       	ldi	r24, 0x0D	; 13
    10ac:	61 e0       	ldi	r22, 0x01	; 1
    10ae:	0e 94 92 08 	call	0x1124	; 0x1124 <gpib_write_byte>
	gpib_write_epilogue(0);
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	0e 94 28 08 	call	0x1050	; 0x1050 <gpib_write_epilogue>
	gpib_untalkUnlisten();
    10b8:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <gpib_untalkUnlisten>
}
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <gpib_write_string>:

/**
 * Write string. Only the raw string is written, no prefix and no postfix.
 */
void gpib_write_string(uchar *s) {
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <gpib_write_string+0xa>
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <gpib_write_string+0xc>
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	9c 83       	std	Y+4, r25	; 0x04
    10d8:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < strlen(s); i++) {
    10da:	1a 82       	std	Y+2, r1	; 0x02
    10dc:	19 82       	std	Y+1, r1	; 0x01
    10de:	10 c0       	rjmp	.+32     	; 0x1100 <gpib_write_string+0x3a>
		gpib_write_byte(s[i], 0);
    10e0:	29 81       	ldd	r18, Y+1	; 0x01
    10e2:	3a 81       	ldd	r19, Y+2	; 0x02
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	fc 01       	movw	r30, r24
    10ea:	e2 0f       	add	r30, r18
    10ec:	f3 1f       	adc	r31, r19
    10ee:	80 81       	ld	r24, Z
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	0e 94 92 08 	call	0x1124	; 0x1124 <gpib_write_byte>

/**
 * Write string. Only the raw string is written, no prefix and no postfix.
 */
void gpib_write_string(uchar *s) {
	for (int i = 0; i < strlen(s); i++) {
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	9a 81       	ldd	r25, Y+2	; 0x02
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	9a 83       	std	Y+2, r25	; 0x02
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	09 81       	ldd	r16, Y+1	; 0x01
    1102:	1a 81       	ldd	r17, Y+2	; 0x02
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	9c 81       	ldd	r25, Y+4	; 0x04
    1108:	0e 94 c7 01 	call	0x38e	; 0x38e <strlen>
    110c:	08 17       	cp	r16, r24
    110e:	19 07       	cpc	r17, r25
    1110:	38 f3       	brcs	.-50     	; 0x10e0 <gpib_write_string+0x1a>
		gpib_write_byte(s[i], 0);
	}
}
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <gpib_write_byte>:

/**
 * Emits single byte to GPIB port pins.
 */
uchar gpib_write_byte(uchar c, uchar isLastByte) {
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	00 d0       	rcall	.+0      	; 0x112a <gpib_write_byte+0x6>
    112a:	00 d0       	rcall	.+0      	; 0x112c <gpib_write_byte+0x8>
    112c:	0f 92       	push	r0
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	8b 83       	std	Y+3, r24	; 0x03
    1134:	6c 83       	std	Y+4, r22	; 0x04
	int timeout;

	// wait for NDAC assign from all listeners
	release_bit(DDRD, PORTD, G_NDAC);
    1136:	a1 e3       	ldi	r26, 0x31	; 49
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e1 e3       	ldi	r30, 0x31	; 49
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	8f 7d       	andi	r24, 0xDF	; 223
    1142:	8c 93       	st	X, r24
    1144:	a2 e3       	ldi	r26, 0x32	; 50
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e2 e3       	ldi	r30, 0x32	; 50
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	80 62       	ori	r24, 0x20	; 32
    1150:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
	timeout = s + 5;
    1152:	80 91 41 06 	lds	r24, 0x0641
    1156:	88 2f       	mov	r24, r24
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	05 96       	adiw	r24, 0x05	; 5
    115c:	9a 83       	std	Y+2, r25	; 0x02
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	10 c0       	rjmp	.+32     	; 0x1182 <gpib_write_byte+0x5e>
	//gpib_info();
	while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
		if (s == timeout) {
    1162:	80 91 41 06 	lds	r24, 0x0641
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
    116e:	28 17       	cp	r18, r24
    1170:	39 07       	cpc	r19, r25
    1172:	39 f4       	brne	.+14     	; 0x1182 <gpib_write_byte+0x5e>
			uart_puts("\n\rError: NDAC timeout\n\r");
    1174:	86 e9       	ldi	r24, 0x96	; 150
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
			return 0xff;
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	8d 83       	std	Y+5, r24	; 0x05
    1180:	f7 c1       	rjmp	.+1006   	; 0x1570 <gpib_write_byte+0x44c>
	// wait for NDAC assign from all listeners
	release_bit(DDRD, PORTD, G_NDAC);
#ifdef WITH_TIMEOUT
	timeout = s + 5;
	//gpib_info();
	while ((PIND & _BV(G_NDAC)) && (s <= timeout)) {
    1182:	e0 e3       	ldi	r30, 0x30	; 48
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	80 72       	andi	r24, 0x20	; 32
    118e:	90 70       	andi	r25, 0x00	; 0
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	49 f0       	breq	.+18     	; 0x11a6 <gpib_write_byte+0x82>
    1194:	80 91 41 06 	lds	r24, 0x0641
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	9a 81       	ldd	r25, Y+2	; 0x02
    11a0:	82 17       	cp	r24, r18
    11a2:	93 07       	cpc	r25, r19
    11a4:	f4 f6       	brge	.-68     	; 0x1162 <gpib_write_byte+0x3e>
	}
#else
	loop_until_bit_is_clear(PIND,G_NDAC);
#endif

	DDRA = 0x00;
    11a6:	ea e3       	ldi	r30, 0x3A	; 58
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	10 82       	st	Z, r1
	if (c & 0x01) {
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	88 2f       	mov	r24, r24
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	81 70       	andi	r24, 0x01	; 1
    11b4:	90 70       	andi	r25, 0x00	; 0
    11b6:	88 23       	and	r24, r24
    11b8:	b1 f0       	breq	.+44     	; 0x11e6 <gpib_write_byte+0xc2>
		assign_bit(DDRA, PORTA, PA0);
    11ba:	ab e3       	ldi	r26, 0x3B	; 59
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	eb e3       	ldi	r30, 0x3B	; 59
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	8e 7f       	andi	r24, 0xFE	; 254
    11c6:	8c 93       	st	X, r24
    11c8:	aa e3       	ldi	r26, 0x3A	; 58
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	ea e3       	ldi	r30, 0x3A	; 58
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	81 60       	ori	r24, 0x01	; 1
    11d4:	8c 93       	st	X, r24
    11d6:	ab e3       	ldi	r26, 0x3B	; 59
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	eb e3       	ldi	r30, 0x3B	; 59
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	8e 7f       	andi	r24, 0xFE	; 254
    11e2:	8c 93       	st	X, r24
    11e4:	0e c0       	rjmp	.+28     	; 0x1202 <gpib_write_byte+0xde>
	} else {
		release_bit(DDRA, PORTA, PA0)
    11e6:	aa e3       	ldi	r26, 0x3A	; 58
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	ea e3       	ldi	r30, 0x3A	; 58
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	8e 7f       	andi	r24, 0xFE	; 254
    11f2:	8c 93       	st	X, r24
    11f4:	ab e3       	ldi	r26, 0x3B	; 59
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	eb e3       	ldi	r30, 0x3B	; 59
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	81 60       	ori	r24, 0x01	; 1
    1200:	8c 93       	st	X, r24
	}
	if (c & 0x02) {
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	82 70       	andi	r24, 0x02	; 2
    120a:	90 70       	andi	r25, 0x00	; 0
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	b1 f0       	breq	.+44     	; 0x123c <gpib_write_byte+0x118>
		assign_bit(DDRA, PORTA, PA1)
    1210:	ab e3       	ldi	r26, 0x3B	; 59
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	eb e3       	ldi	r30, 0x3B	; 59
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	8d 7f       	andi	r24, 0xFD	; 253
    121c:	8c 93       	st	X, r24
    121e:	aa e3       	ldi	r26, 0x3A	; 58
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	ea e3       	ldi	r30, 0x3A	; 58
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	82 60       	ori	r24, 0x02	; 2
    122a:	8c 93       	st	X, r24
    122c:	ab e3       	ldi	r26, 0x3B	; 59
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	eb e3       	ldi	r30, 0x3B	; 59
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8d 7f       	andi	r24, 0xFD	; 253
    1238:	8c 93       	st	X, r24
    123a:	0e c0       	rjmp	.+28     	; 0x1258 <gpib_write_byte+0x134>
	} else {
		release_bit(DDRA, PORTA, PA1);
    123c:	aa e3       	ldi	r26, 0x3A	; 58
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	ea e3       	ldi	r30, 0x3A	; 58
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	8d 7f       	andi	r24, 0xFD	; 253
    1248:	8c 93       	st	X, r24
    124a:	ab e3       	ldi	r26, 0x3B	; 59
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	eb e3       	ldi	r30, 0x3B	; 59
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	82 60       	ori	r24, 0x02	; 2
    1256:	8c 93       	st	X, r24
	}
	if (c & 0x04) {
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	88 2f       	mov	r24, r24
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	84 70       	andi	r24, 0x04	; 4
    1260:	90 70       	andi	r25, 0x00	; 0
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	b1 f0       	breq	.+44     	; 0x1292 <gpib_write_byte+0x16e>
		assign_bit(DDRA, PORTA, PA2);
    1266:	ab e3       	ldi	r26, 0x3B	; 59
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	eb e3       	ldi	r30, 0x3B	; 59
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	8b 7f       	andi	r24, 0xFB	; 251
    1272:	8c 93       	st	X, r24
    1274:	aa e3       	ldi	r26, 0x3A	; 58
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	ea e3       	ldi	r30, 0x3A	; 58
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	84 60       	ori	r24, 0x04	; 4
    1280:	8c 93       	st	X, r24
    1282:	ab e3       	ldi	r26, 0x3B	; 59
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	eb e3       	ldi	r30, 0x3B	; 59
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	8b 7f       	andi	r24, 0xFB	; 251
    128e:	8c 93       	st	X, r24
    1290:	0e c0       	rjmp	.+28     	; 0x12ae <gpib_write_byte+0x18a>
	} else {
		release_bit(DDRA, PORTA, PA2);
    1292:	aa e3       	ldi	r26, 0x3A	; 58
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	ea e3       	ldi	r30, 0x3A	; 58
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	8b 7f       	andi	r24, 0xFB	; 251
    129e:	8c 93       	st	X, r24
    12a0:	ab e3       	ldi	r26, 0x3B	; 59
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	eb e3       	ldi	r30, 0x3B	; 59
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	84 60       	ori	r24, 0x04	; 4
    12ac:	8c 93       	st	X, r24
	}
	if (c & 0x08) {
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	88 2f       	mov	r24, r24
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	88 70       	andi	r24, 0x08	; 8
    12b6:	90 70       	andi	r25, 0x00	; 0
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	b1 f0       	breq	.+44     	; 0x12e8 <gpib_write_byte+0x1c4>
		assign_bit(DDRA, PORTA, PA3);
    12bc:	ab e3       	ldi	r26, 0x3B	; 59
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	eb e3       	ldi	r30, 0x3B	; 59
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	87 7f       	andi	r24, 0xF7	; 247
    12c8:	8c 93       	st	X, r24
    12ca:	aa e3       	ldi	r26, 0x3A	; 58
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	ea e3       	ldi	r30, 0x3A	; 58
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	88 60       	ori	r24, 0x08	; 8
    12d6:	8c 93       	st	X, r24
    12d8:	ab e3       	ldi	r26, 0x3B	; 59
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	eb e3       	ldi	r30, 0x3B	; 59
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	87 7f       	andi	r24, 0xF7	; 247
    12e4:	8c 93       	st	X, r24
    12e6:	0e c0       	rjmp	.+28     	; 0x1304 <gpib_write_byte+0x1e0>
	} else {
		release_bit(DDRA, PORTA, PA3);
    12e8:	aa e3       	ldi	r26, 0x3A	; 58
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ea e3       	ldi	r30, 0x3A	; 58
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	87 7f       	andi	r24, 0xF7	; 247
    12f4:	8c 93       	st	X, r24
    12f6:	ab e3       	ldi	r26, 0x3B	; 59
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	eb e3       	ldi	r30, 0x3B	; 59
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	88 60       	ori	r24, 0x08	; 8
    1302:	8c 93       	st	X, r24
	}
	if (c & 0x10) {
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	80 71       	andi	r24, 0x10	; 16
    130c:	90 70       	andi	r25, 0x00	; 0
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	b1 f0       	breq	.+44     	; 0x133e <gpib_write_byte+0x21a>
		assign_bit(DDRA, PORTA, PA4);
    1312:	ab e3       	ldi	r26, 0x3B	; 59
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	eb e3       	ldi	r30, 0x3B	; 59
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	8f 7e       	andi	r24, 0xEF	; 239
    131e:	8c 93       	st	X, r24
    1320:	aa e3       	ldi	r26, 0x3A	; 58
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	ea e3       	ldi	r30, 0x3A	; 58
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	80 61       	ori	r24, 0x10	; 16
    132c:	8c 93       	st	X, r24
    132e:	ab e3       	ldi	r26, 0x3B	; 59
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	eb e3       	ldi	r30, 0x3B	; 59
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	8f 7e       	andi	r24, 0xEF	; 239
    133a:	8c 93       	st	X, r24
    133c:	0e c0       	rjmp	.+28     	; 0x135a <gpib_write_byte+0x236>
	} else {
		release_bit(DDRA, PORTA, PA4);
    133e:	aa e3       	ldi	r26, 0x3A	; 58
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	ea e3       	ldi	r30, 0x3A	; 58
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	8f 7e       	andi	r24, 0xEF	; 239
    134a:	8c 93       	st	X, r24
    134c:	ab e3       	ldi	r26, 0x3B	; 59
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	eb e3       	ldi	r30, 0x3B	; 59
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	80 61       	ori	r24, 0x10	; 16
    1358:	8c 93       	st	X, r24
	}
	if (c & 0x20) {
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	88 2f       	mov	r24, r24
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	80 72       	andi	r24, 0x20	; 32
    1362:	90 70       	andi	r25, 0x00	; 0
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	b1 f0       	breq	.+44     	; 0x1394 <gpib_write_byte+0x270>
		assign_bit(DDRA, PORTA, PA5);
    1368:	ab e3       	ldi	r26, 0x3B	; 59
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	eb e3       	ldi	r30, 0x3B	; 59
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	8f 7d       	andi	r24, 0xDF	; 223
    1374:	8c 93       	st	X, r24
    1376:	aa e3       	ldi	r26, 0x3A	; 58
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	ea e3       	ldi	r30, 0x3A	; 58
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	80 62       	ori	r24, 0x20	; 32
    1382:	8c 93       	st	X, r24
    1384:	ab e3       	ldi	r26, 0x3B	; 59
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	eb e3       	ldi	r30, 0x3B	; 59
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	8f 7d       	andi	r24, 0xDF	; 223
    1390:	8c 93       	st	X, r24
    1392:	0e c0       	rjmp	.+28     	; 0x13b0 <gpib_write_byte+0x28c>
	} else {
		release_bit(DDRA, PORTA, PA5);
    1394:	aa e3       	ldi	r26, 0x3A	; 58
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	ea e3       	ldi	r30, 0x3A	; 58
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	8f 7d       	andi	r24, 0xDF	; 223
    13a0:	8c 93       	st	X, r24
    13a2:	ab e3       	ldi	r26, 0x3B	; 59
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	eb e3       	ldi	r30, 0x3B	; 59
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	80 62       	ori	r24, 0x20	; 32
    13ae:	8c 93       	st	X, r24
	}
	if (c & 0x40) {
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	88 2f       	mov	r24, r24
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	80 74       	andi	r24, 0x40	; 64
    13b8:	90 70       	andi	r25, 0x00	; 0
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	b1 f0       	breq	.+44     	; 0x13ea <gpib_write_byte+0x2c6>
		assign_bit(DDRA, PORTA, PA6);
    13be:	ab e3       	ldi	r26, 0x3B	; 59
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	eb e3       	ldi	r30, 0x3B	; 59
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	8f 7b       	andi	r24, 0xBF	; 191
    13ca:	8c 93       	st	X, r24
    13cc:	aa e3       	ldi	r26, 0x3A	; 58
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	ea e3       	ldi	r30, 0x3A	; 58
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	80 64       	ori	r24, 0x40	; 64
    13d8:	8c 93       	st	X, r24
    13da:	ab e3       	ldi	r26, 0x3B	; 59
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	eb e3       	ldi	r30, 0x3B	; 59
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	8f 7b       	andi	r24, 0xBF	; 191
    13e6:	8c 93       	st	X, r24
    13e8:	0e c0       	rjmp	.+28     	; 0x1406 <gpib_write_byte+0x2e2>
	} else {
		release_bit(DDRA, PORTA, PA6);
    13ea:	aa e3       	ldi	r26, 0x3A	; 58
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	ea e3       	ldi	r30, 0x3A	; 58
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	8f 7b       	andi	r24, 0xBF	; 191
    13f6:	8c 93       	st	X, r24
    13f8:	ab e3       	ldi	r26, 0x3B	; 59
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	eb e3       	ldi	r30, 0x3B	; 59
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	80 64       	ori	r24, 0x40	; 64
    1404:	8c 93       	st	X, r24
	}
	if (c & 0x80) {
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	88 23       	and	r24, r24
    140a:	b4 f4       	brge	.+44     	; 0x1438 <gpib_write_byte+0x314>
		assign_bit(DDRA, PORTA, PA7);
    140c:	ab e3       	ldi	r26, 0x3B	; 59
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	eb e3       	ldi	r30, 0x3B	; 59
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8f 77       	andi	r24, 0x7F	; 127
    1418:	8c 93       	st	X, r24
    141a:	aa e3       	ldi	r26, 0x3A	; 58
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	ea e3       	ldi	r30, 0x3A	; 58
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	80 68       	ori	r24, 0x80	; 128
    1426:	8c 93       	st	X, r24
    1428:	ab e3       	ldi	r26, 0x3B	; 59
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	eb e3       	ldi	r30, 0x3B	; 59
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	8f 77       	andi	r24, 0x7F	; 127
    1434:	8c 93       	st	X, r24
    1436:	0e c0       	rjmp	.+28     	; 0x1454 <gpib_write_byte+0x330>
	} else {
		release_bit(DDRA, PORTA, PA7);
    1438:	aa e3       	ldi	r26, 0x3A	; 58
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	ea e3       	ldi	r30, 0x3A	; 58
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8f 77       	andi	r24, 0x7F	; 127
    1444:	8c 93       	st	X, r24
    1446:	ab e3       	ldi	r26, 0x3B	; 59
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	eb e3       	ldi	r30, 0x3B	; 59
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	80 68       	ori	r24, 0x80	; 128
    1452:	8c 93       	st	X, r24
	}

	// wait until listeners release NRFD
	//uart_puts("1");
	release_bit(DDRD, PORTD, G_NRFD);
    1454:	a1 e3       	ldi	r26, 0x31	; 49
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e1 e3       	ldi	r30, 0x31	; 49
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	87 7f       	andi	r24, 0xF7	; 247
    1460:	8c 93       	st	X, r24
    1462:	a2 e3       	ldi	r26, 0x32	; 50
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e2 e3       	ldi	r30, 0x32	; 50
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	88 60       	ori	r24, 0x08	; 8
    146e:	8c 93       	st	X, r24
#ifdef WITH_TIMEOUT
	//gpib_info();
	timeout = s + 5;
    1470:	80 91 41 06 	lds	r24, 0x0641
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	05 96       	adiw	r24, 0x05	; 5
    147a:	9a 83       	std	Y+2, r25	; 0x02
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	10 c0       	rjmp	.+32     	; 0x14a0 <gpib_write_byte+0x37c>
	while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
		if (s == timeout) {
    1480:	80 91 41 06 	lds	r24, 0x0641
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	9a 81       	ldd	r25, Y+2	; 0x02
    148c:	28 17       	cp	r18, r24
    148e:	39 07       	cpc	r19, r25
    1490:	39 f4       	brne	.+14     	; 0x14a0 <gpib_write_byte+0x37c>
			uart_puts("\n\rError: NRFD timeout\n\r");
    1492:	8e ea       	ldi	r24, 0xAE	; 174
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
			return 0xff;
    149a:	8f ef       	ldi	r24, 0xFF	; 255
    149c:	8d 83       	std	Y+5, r24	; 0x05
    149e:	68 c0       	rjmp	.+208    	; 0x1570 <gpib_write_byte+0x44c>
	//uart_puts("1");
	release_bit(DDRD, PORTD, G_NRFD);
#ifdef WITH_TIMEOUT
	//gpib_info();
	timeout = s + 5;
	while (!(PIND & _BV(G_NRFD)) && (s <= timeout)) {
    14a0:	e0 e3       	ldi	r30, 0x30	; 48
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	88 2f       	mov	r24, r24
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	88 70       	andi	r24, 0x08	; 8
    14ac:	90 70       	andi	r25, 0x00	; 0
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	49 f4       	brne	.+18     	; 0x14c4 <gpib_write_byte+0x3a0>
    14b2:	80 91 41 06 	lds	r24, 0x0641
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	9a 81       	ldd	r25, Y+2	; 0x02
    14be:	82 17       	cp	r24, r18
    14c0:	93 07       	cpc	r25, r19
    14c2:	f4 f6       	brge	.-68     	; 0x1480 <gpib_write_byte+0x35c>
#else
	loop_until_bit_is_set(PIND,G_NRFD);
#endif

	// assign EOI during transmission of only last byte
	if (isLastByte) {
    14c4:	8c 81       	ldd	r24, Y+4	; 0x04
    14c6:	88 23       	and	r24, r24
    14c8:	a9 f0       	breq	.+42     	; 0x14f4 <gpib_write_byte+0x3d0>
		//uart_puts("\n\rE\n\r");
		assign_bit(DDRD, PORTD, G_EOI);
    14ca:	a2 e3       	ldi	r26, 0x32	; 50
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e2 e3       	ldi	r30, 0x32	; 50
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	8f 7e       	andi	r24, 0xEF	; 239
    14d6:	8c 93       	st	X, r24
    14d8:	a1 e3       	ldi	r26, 0x31	; 49
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e1 e3       	ldi	r30, 0x31	; 49
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	80 61       	ori	r24, 0x10	; 16
    14e4:	8c 93       	st	X, r24
    14e6:	a2 e3       	ldi	r26, 0x32	; 50
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e2 e3       	ldi	r30, 0x32	; 50
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	8f 7e       	andi	r24, 0xEF	; 239
    14f2:	8c 93       	st	X, r24
	}

	// assign DAV, data valid for listeners
	assign_bit(DDRD, PORTD, G_DAV);
    14f4:	a2 e3       	ldi	r26, 0x32	; 50
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e2 e3       	ldi	r30, 0x32	; 50
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	8b 7f       	andi	r24, 0xFB	; 251
    1500:	8c 93       	st	X, r24
    1502:	a1 e3       	ldi	r26, 0x31	; 49
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e1 e3       	ldi	r30, 0x31	; 49
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	84 60       	ori	r24, 0x04	; 4
    150e:	8c 93       	st	X, r24
    1510:	a2 e3       	ldi	r26, 0x32	; 50
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e2 e3       	ldi	r30, 0x32	; 50
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	8b 7f       	andi	r24, 0xFB	; 251
    151c:	8c 93       	st	X, r24

	// wait for NDAC release
	//uart_puts("2");
	release_bit(DDRD, PORTD, G_NDAC);
    151e:	a1 e3       	ldi	r26, 0x31	; 49
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e1 e3       	ldi	r30, 0x31	; 49
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	8f 7d       	andi	r24, 0xDF	; 223
    152a:	8c 93       	st	X, r24
    152c:	a2 e3       	ldi	r26, 0x32	; 50
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e2 e3       	ldi	r30, 0x32	; 50
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	80 62       	ori	r24, 0x20	; 32
    1538:	8c 93       	st	X, r24
	loop_until_bit_is_set(PIND, G_NDAC);
    153a:	e0 e3       	ldi	r30, 0x30	; 48
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	88 2f       	mov	r24, r24
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	80 72       	andi	r24, 0x20	; 32
    1546:	90 70       	andi	r25, 0x00	; 0
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	b9 f3       	breq	.-18     	; 0x153a <gpib_write_byte+0x416>

	// release DAV, data not valid anymore
	release_bit(DDRD, PORTD, G_DAV);
    154c:	a1 e3       	ldi	r26, 0x31	; 49
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e1 e3       	ldi	r30, 0x31	; 49
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	8b 7f       	andi	r24, 0xFB	; 251
    1558:	8c 93       	st	X, r24
    155a:	a2 e3       	ldi	r26, 0x32	; 50
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e2 e3       	ldi	r30, 0x32	; 50
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	84 60       	ori	r24, 0x04	; 4
    1566:	8c 93       	st	X, r24

	// reset Port to all input
	DDRA = 0x00;
    1568:	ea e3       	ldi	r30, 0x3A	; 58
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	10 82       	st	Z, r1

	//uart_puts("3\r\n");

	return 0;
    156e:	1d 82       	std	Y+5, r1	; 0x05
    1570:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <gpib_info>:

/**
 * print some useful info about bus state (for example value of handshake pins)
 */
void gpib_info(void) {
    1582:	af 92       	push	r10
    1584:	bf 92       	push	r11
    1586:	cf 92       	push	r12
    1588:	df 92       	push	r13
    158a:	ef 92       	push	r14
    158c:	ff 92       	push	r15
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	2a 97       	sbiw	r28, 0x0a	; 10
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
	uchar dav, nrfd, ndac, eoi, atn, srq, ifc, ren;
	extern uchar buf[80];

	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    15a6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <gpib_get_partner_pad>
    15aa:	08 2f       	mov	r16, r24
    15ac:	10 e0       	ldi	r17, 0x00	; 0
    15ae:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <gpib_get_partner_sad>
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	8d b7       	in	r24, 0x3d	; 61
    15b8:	9e b7       	in	r25, 0x3e	; 62
    15ba:	08 97       	sbiw	r24, 0x08	; 8
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	9e bf       	out	0x3e, r25	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	8d bf       	out	0x3d, r24	; 61
    15c6:	ed b7       	in	r30, 0x3d	; 61
    15c8:	fe b7       	in	r31, 0x3e	; 62
    15ca:	31 96       	adiw	r30, 0x01	; 1
    15cc:	80 ef       	ldi	r24, 0xF0	; 240
    15ce:	95 e0       	ldi	r25, 0x05	; 5
    15d0:	91 83       	std	Z+1, r25	; 0x01
    15d2:	80 83       	st	Z, r24
    15d4:	86 ec       	ldi	r24, 0xC6	; 198
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	93 83       	std	Z+3, r25	; 0x03
    15da:	82 83       	std	Z+2, r24	; 0x02
    15dc:	15 83       	std	Z+5, r17	; 0x05
    15de:	04 83       	std	Z+4, r16	; 0x04
    15e0:	37 83       	std	Z+7, r19	; 0x07
    15e2:	26 83       	std	Z+6, r18	; 0x06
    15e4:	0e 94 18 02 	call	0x430	; 0x430 <sprintf>
    15e8:	8d b7       	in	r24, 0x3d	; 61
    15ea:	9e b7       	in	r25, 0x3e	; 62
    15ec:	08 96       	adiw	r24, 0x08	; 8
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	9e bf       	out	0x3e, r25	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	8d bf       	out	0x3d, r24	; 61
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);
    15f8:	80 ef       	ldi	r24, 0xF0	; 240
    15fa:	95 e0       	ldi	r25, 0x05	; 5
    15fc:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>

	uart_puts("Partner list\n\r");
    1600:	84 ef       	ldi	r24, 0xF4	; 244
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
	for (int i = 0; i < MAX_PARTNER; i++) {
    1608:	1a 82       	std	Y+2, r1	; 0x02
    160a:	19 82       	std	Y+1, r1	; 0x01
    160c:	49 c0       	rjmp	.+146    	; 0x16a0 <gpib_info+0x11e>
		if (controller.partners[i].primary != ADDRESS_NOT_SET) {
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	9a 81       	ldd	r25, Y+2	; 0x02
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	fc 01       	movw	r30, r24
    1618:	e7 52       	subi	r30, 0x27	; 39
    161a:	fb 4f       	sbci	r31, 0xFB	; 251
    161c:	80 81       	ld	r24, Z
    161e:	8f 3f       	cpi	r24, 0xFF	; 255
    1620:	d1 f1       	breq	.+116    	; 0x1696 <gpib_info+0x114>
			sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	fc 01       	movw	r30, r24
    162c:	e7 52       	subi	r30, 0x27	; 39
    162e:	fb 4f       	sbci	r31, 0xFB	; 251
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	9a 81       	ldd	r25, Y+2	; 0x02
    163a:	03 96       	adiw	r24, 0x03	; 3
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	fc 01       	movw	r30, r24
    1642:	ec 52       	subi	r30, 0x2C	; 44
    1644:	fb 4f       	sbci	r31, 0xFB	; 251
    1646:	80 81       	ld	r24, Z
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	8d b7       	in	r24, 0x3d	; 61
    164e:	9e b7       	in	r25, 0x3e	; 62
    1650:	08 97       	sbiw	r24, 0x08	; 8
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	9e bf       	out	0x3e, r25	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	8d bf       	out	0x3d, r24	; 61
    165c:	ed b7       	in	r30, 0x3d	; 61
    165e:	fe b7       	in	r31, 0x3e	; 62
    1660:	31 96       	adiw	r30, 0x01	; 1
    1662:	80 ef       	ldi	r24, 0xF0	; 240
    1664:	95 e0       	ldi	r25, 0x05	; 5
    1666:	91 83       	std	Z+1, r25	; 0x01
    1668:	80 83       	st	Z, r24
    166a:	86 ec       	ldi	r24, 0xC6	; 198
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	93 83       	std	Z+3, r25	; 0x03
    1670:	82 83       	std	Z+2, r24	; 0x02
    1672:	55 83       	std	Z+5, r21	; 0x05
    1674:	44 83       	std	Z+4, r20	; 0x04
    1676:	37 83       	std	Z+7, r19	; 0x07
    1678:	26 83       	std	Z+6, r18	; 0x06
    167a:	0e 94 18 02 	call	0x430	; 0x430 <sprintf>
    167e:	8d b7       	in	r24, 0x3d	; 61
    1680:	9e b7       	in	r25, 0x3e	; 62
    1682:	08 96       	adiw	r24, 0x08	; 8
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	9e bf       	out	0x3e, r25	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	8d bf       	out	0x3d, r24	; 61
					controller.partners[i].primary,
					controller.partners[i].secondary);
			uart_puts(buf);
    168e:	80 ef       	ldi	r24, 0xF0	; 240
    1690:	95 e0       	ldi	r25, 0x05	; 5
    1692:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
	sprintf(buf, "Partner address: primary: %u, secondary: %u\n\r",
			gpib_get_partner_pad(), gpib_get_partner_sad());
	uart_puts(buf);

	uart_puts("Partner list\n\r");
	for (int i = 0; i < MAX_PARTNER; i++) {
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	9a 81       	ldd	r25, Y+2	; 0x02
    169a:	01 96       	adiw	r24, 0x01	; 1
    169c:	9a 83       	std	Y+2, r25	; 0x02
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	9a 81       	ldd	r25, Y+2	; 0x02
    16a4:	85 30       	cpi	r24, 0x05	; 5
    16a6:	91 05       	cpc	r25, r1
    16a8:	0c f4       	brge	.+2      	; 0x16ac <gpib_info+0x12a>
    16aa:	b1 cf       	rjmp	.-158    	; 0x160e <gpib_info+0x8c>
					controller.partners[i].secondary);
			uart_puts(buf);
		}
	}

	dav = bit_is_set(PIND, G_DAV);
    16ac:	e0 e3       	ldi	r30, 0x30	; 48
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	84 70       	andi	r24, 0x04	; 4
    16b4:	8a 87       	std	Y+10, r24	; 0x0a
	nrfd = bit_is_set(PIND, G_NRFD);
    16b6:	e0 e3       	ldi	r30, 0x30	; 48
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	88 70       	andi	r24, 0x08	; 8
    16be:	89 87       	std	Y+9, r24	; 0x09
	ndac = bit_is_set(PIND, G_NDAC);
    16c0:	e0 e3       	ldi	r30, 0x30	; 48
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	80 72       	andi	r24, 0x20	; 32
    16c8:	88 87       	std	Y+8, r24	; 0x08
	eoi = bit_is_set(PIND, G_EOI);
    16ca:	e0 e3       	ldi	r30, 0x30	; 48
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	80 71       	andi	r24, 0x10	; 16
    16d2:	8f 83       	std	Y+7, r24	; 0x07
	atn = bit_is_set(PIND, G_ATN);
    16d4:	e0 e3       	ldi	r30, 0x30	; 48
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	80 78       	andi	r24, 0x80	; 128
    16dc:	8e 83       	std	Y+6, r24	; 0x06
	srq = bit_is_set(PIND, G_SRQ);
    16de:	e0 e3       	ldi	r30, 0x30	; 48
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	80 74       	andi	r24, 0x40	; 64
    16e6:	8d 83       	std	Y+5, r24	; 0x05
	ifc = bit_is_set(PINB, G_IFC);
    16e8:	e6 e3       	ldi	r30, 0x36	; 54
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	81 70       	andi	r24, 0x01	; 1
    16f0:	8c 83       	std	Y+4, r24	; 0x04
	ren = bit_is_set(PINB, G_REN);
    16f2:	e6 e3       	ldi	r30, 0x36	; 54
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	82 70       	andi	r24, 0x02	; 2
    16fa:	8b 83       	std	Y+3, r24	; 0x03
	//d = PINA;
	//di = d ^ 0xff;
	if (dav == 0x00)
    16fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    16fe:	88 23       	and	r24, r24
    1700:	19 f4       	brne	.+6      	; 0x1708 <gpib_info+0x186>
		dav = '0';
    1702:	80 e3       	ldi	r24, 0x30	; 48
    1704:	8a 87       	std	Y+10, r24	; 0x0a
    1706:	02 c0       	rjmp	.+4      	; 0x170c <gpib_info+0x18a>
	else
		dav = '1';
    1708:	81 e3       	ldi	r24, 0x31	; 49
    170a:	8a 87       	std	Y+10, r24	; 0x0a
	if (nrfd == 0x00)
    170c:	89 85       	ldd	r24, Y+9	; 0x09
    170e:	88 23       	and	r24, r24
    1710:	19 f4       	brne	.+6      	; 0x1718 <gpib_info+0x196>
		nrfd = '0';
    1712:	80 e3       	ldi	r24, 0x30	; 48
    1714:	89 87       	std	Y+9, r24	; 0x09
    1716:	02 c0       	rjmp	.+4      	; 0x171c <gpib_info+0x19a>
	else
		nrfd = '1';
    1718:	81 e3       	ldi	r24, 0x31	; 49
    171a:	89 87       	std	Y+9, r24	; 0x09
	if (ndac == 0x00)
    171c:	88 85       	ldd	r24, Y+8	; 0x08
    171e:	88 23       	and	r24, r24
    1720:	19 f4       	brne	.+6      	; 0x1728 <gpib_info+0x1a6>
		ndac = '0';
    1722:	80 e3       	ldi	r24, 0x30	; 48
    1724:	88 87       	std	Y+8, r24	; 0x08
    1726:	02 c0       	rjmp	.+4      	; 0x172c <gpib_info+0x1aa>
	else
		ndac = '1';
    1728:	81 e3       	ldi	r24, 0x31	; 49
    172a:	88 87       	std	Y+8, r24	; 0x08
	if (eoi == 0x00)
    172c:	8f 81       	ldd	r24, Y+7	; 0x07
    172e:	88 23       	and	r24, r24
    1730:	19 f4       	brne	.+6      	; 0x1738 <gpib_info+0x1b6>
		eoi = '0';
    1732:	80 e3       	ldi	r24, 0x30	; 48
    1734:	8f 83       	std	Y+7, r24	; 0x07
    1736:	02 c0       	rjmp	.+4      	; 0x173c <gpib_info+0x1ba>
	else
		eoi = '1';
    1738:	81 e3       	ldi	r24, 0x31	; 49
    173a:	8f 83       	std	Y+7, r24	; 0x07
	if (atn == 0x00)
    173c:	8e 81       	ldd	r24, Y+6	; 0x06
    173e:	88 23       	and	r24, r24
    1740:	19 f4       	brne	.+6      	; 0x1748 <gpib_info+0x1c6>
		atn = '0';
    1742:	80 e3       	ldi	r24, 0x30	; 48
    1744:	8e 83       	std	Y+6, r24	; 0x06
    1746:	02 c0       	rjmp	.+4      	; 0x174c <gpib_info+0x1ca>
	else
		atn = '1';
    1748:	81 e3       	ldi	r24, 0x31	; 49
    174a:	8e 83       	std	Y+6, r24	; 0x06
	if (srq == 0x00)
    174c:	8d 81       	ldd	r24, Y+5	; 0x05
    174e:	88 23       	and	r24, r24
    1750:	19 f4       	brne	.+6      	; 0x1758 <gpib_info+0x1d6>
		srq = '0';
    1752:	80 e3       	ldi	r24, 0x30	; 48
    1754:	8d 83       	std	Y+5, r24	; 0x05
    1756:	02 c0       	rjmp	.+4      	; 0x175c <gpib_info+0x1da>
	else
		srq = '1';
    1758:	81 e3       	ldi	r24, 0x31	; 49
    175a:	8d 83       	std	Y+5, r24	; 0x05
	if (ifc == 0x00)
    175c:	8c 81       	ldd	r24, Y+4	; 0x04
    175e:	88 23       	and	r24, r24
    1760:	19 f4       	brne	.+6      	; 0x1768 <gpib_info+0x1e6>
		ifc = '0';
    1762:	80 e3       	ldi	r24, 0x30	; 48
    1764:	8c 83       	std	Y+4, r24	; 0x04
    1766:	02 c0       	rjmp	.+4      	; 0x176c <gpib_info+0x1ea>
	else
		ifc = '1';
    1768:	81 e3       	ldi	r24, 0x31	; 49
    176a:	8c 83       	std	Y+4, r24	; 0x04
	if (ren == 0x00)
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	88 23       	and	r24, r24
    1770:	19 f4       	brne	.+6      	; 0x1778 <gpib_info+0x1f6>
		ren = '0';
    1772:	80 e3       	ldi	r24, 0x30	; 48
    1774:	8b 83       	std	Y+3, r24	; 0x03
    1776:	02 c0       	rjmp	.+4      	; 0x177c <gpib_info+0x1fa>
	else
		ren = '1';
    1778:	81 e3       	ldi	r24, 0x31	; 49
    177a:	8b 83       	std	Y+3, r24	; 0x03

	sprintf(buf,
    177c:	8a 85       	ldd	r24, Y+10	; 0x0a
    177e:	a8 2e       	mov	r10, r24
    1780:	bb 24       	eor	r11, r11
    1782:	89 85       	ldd	r24, Y+9	; 0x09
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	88 85       	ldd	r24, Y+8	; 0x08
    178a:	48 2f       	mov	r20, r24
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	8f 81       	ldd	r24, Y+7	; 0x07
    1790:	68 2f       	mov	r22, r24
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
    1796:	a8 2f       	mov	r26, r24
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	08 2f       	mov	r16, r24
    179e:	10 e0       	ldi	r17, 0x00	; 0
    17a0:	8e 81       	ldd	r24, Y+6	; 0x06
    17a2:	e8 2e       	mov	r14, r24
    17a4:	ff 24       	eor	r15, r15
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	c8 2e       	mov	r12, r24
    17aa:	dd 24       	eor	r13, r13
    17ac:	8d b7       	in	r24, 0x3d	; 61
    17ae:	9e b7       	in	r25, 0x3e	; 62
    17b0:	44 97       	sbiw	r24, 0x14	; 20
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	9e bf       	out	0x3e, r25	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	8d bf       	out	0x3d, r24	; 61
    17bc:	ed b7       	in	r30, 0x3d	; 61
    17be:	fe b7       	in	r31, 0x3e	; 62
    17c0:	31 96       	adiw	r30, 0x01	; 1
    17c2:	80 ef       	ldi	r24, 0xF0	; 240
    17c4:	95 e0       	ldi	r25, 0x05	; 5
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24
    17ca:	83 e0       	ldi	r24, 0x03	; 3
    17cc:	91 e0       	ldi	r25, 0x01	; 1
    17ce:	93 83       	std	Z+3, r25	; 0x03
    17d0:	82 83       	std	Z+2, r24	; 0x02
    17d2:	b5 82       	std	Z+5, r11	; 0x05
    17d4:	a4 82       	std	Z+4, r10	; 0x04
    17d6:	37 83       	std	Z+7, r19	; 0x07
    17d8:	26 83       	std	Z+6, r18	; 0x06
    17da:	51 87       	std	Z+9, r21	; 0x09
    17dc:	40 87       	std	Z+8, r20	; 0x08
    17de:	73 87       	std	Z+11, r23	; 0x0b
    17e0:	62 87       	std	Z+10, r22	; 0x0a
    17e2:	b5 87       	std	Z+13, r27	; 0x0d
    17e4:	a4 87       	std	Z+12, r26	; 0x0c
    17e6:	17 87       	std	Z+15, r17	; 0x0f
    17e8:	06 87       	std	Z+14, r16	; 0x0e
    17ea:	f1 8a       	std	Z+17, r15	; 0x11
    17ec:	e0 8a       	std	Z+16, r14	; 0x10
    17ee:	d3 8a       	std	Z+19, r13	; 0x13
    17f0:	c2 8a       	std	Z+18, r12	; 0x12
    17f2:	0e 94 18 02 	call	0x430	; 0x430 <sprintf>
    17f6:	8d b7       	in	r24, 0x3d	; 61
    17f8:	9e b7       	in	r25, 0x3e	; 62
    17fa:	44 96       	adiw	r24, 0x14	; 20
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	9e bf       	out	0x3e, r25	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	8d bf       	out	0x3d, r24	; 61
			"dav=%c,nrfd=%c,ndac=%c, eoi=%c, ifc=%c,ren=%c,atn=%c,srq=%c\n\r",
			dav, nrfd, ndac, eoi, ifc, ren, atn, srq);
	uart_puts(buf);
    1806:	80 ef       	ldi	r24, 0xF0	; 240
    1808:	95 e0       	ldi	r25, 0x05	; 5
    180a:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
}
    180e:	2a 96       	adiw	r28, 0x0a	; 10
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	1f 91       	pop	r17
    1820:	0f 91       	pop	r16
    1822:	ff 90       	pop	r15
    1824:	ef 90       	pop	r14
    1826:	df 90       	pop	r13
    1828:	cf 90       	pop	r12
    182a:	bf 90       	pop	r11
    182c:	af 90       	pop	r10
    182e:	08 95       	ret

00001830 <gpib_spoll_start>:

/**
 * Enable serial poll.
 * Effect: all devices will send status byte instead of normal data when addressed as talker
 */
void gpib_spoll_start() {
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	00 d0       	rcall	.+0      	; 0x1836 <gpib_spoll_start+0x6>
    1836:	00 d0       	rcall	.+0      	; 0x1838 <gpib_spoll_start+0x8>
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
	uchar controlString[4];
	//uart_puts("before SPE\r\n");
	controlString[0] = G_CMD_SPE;
    183c:	88 e1       	ldi	r24, 0x18	; 24
    183e:	89 83       	std	Y+1, r24	; 0x01
	gpib_cmd(controlString, 1);
    1840:	ce 01       	movw	r24, r28
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	61 e0       	ldi	r22, 0x01	; 1
    1846:	70 e0       	ldi	r23, 0x00	; 0
    1848:	0e 94 7d 07 	call	0xefa	; 0xefa <gpib_cmd>
	//uart_puts("after SPE\r\n");
}
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <gpib_spoll_end>:

/**
 * Disable (end) serial poll.All devices will return to normal behaviour as talker
 */
void gpib_spoll_end() {
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	00 d0       	rcall	.+0      	; 0x1860 <gpib_spoll_end+0x6>
    1860:	00 d0       	rcall	.+0      	; 0x1862 <gpib_spoll_end+0x8>
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
	uchar controlString[4];
	controlString[0] = G_CMD_SPD;
    1866:	89 e1       	ldi	r24, 0x19	; 25
    1868:	89 83       	std	Y+1, r24	; 0x01
	//uart_puts("before SPD\r\n");
	gpib_cmd(controlString, 1);
    186a:	ce 01       	movw	r24, r28
    186c:	01 96       	adiw	r24, 0x01	; 1
    186e:	61 e0       	ldi	r22, 0x01	; 1
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	0e 94 7d 07 	call	0xefa	; 0xefa <gpib_cmd>
}
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <gpib_spoll_single>:
 * \param primary primary talker address of device
 * \param secondary secondary talker address of device
 * \param status byte
 * \returns 0xff on failure.
 */
uchar gpib_spoll_single(uchar primary, uchar secondary, uchar *b) {
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	c9 56       	subi	r28, 0x69	; 105
    188e:	d0 40       	sbci	r29, 0x00	; 0
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	fe 01       	movw	r30, r28
    189c:	ea 59       	subi	r30, 0x9A	; 154
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	80 83       	st	Z, r24
    18a2:	fe 01       	movw	r30, r28
    18a4:	e9 59       	subi	r30, 0x99	; 153
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	60 83       	st	Z, r22
    18aa:	fe 01       	movw	r30, r28
    18ac:	e8 59       	subi	r30, 0x98	; 152
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	51 83       	std	Z+1, r21	; 0x01
    18b2:	40 83       	st	Z, r20
	uchar controlString[100];
	uchar e;

	// address device
	gpib_send_address(primary, secondary);
    18b4:	fe 01       	movw	r30, r28
    18b6:	ea 59       	subi	r30, 0x9A	; 154
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	de 01       	movw	r26, r28
    18bc:	a9 59       	subi	r26, 0x99	; 153
    18be:	bf 4f       	sbci	r27, 0xFF	; 255
    18c0:	80 81       	ld	r24, Z
    18c2:	6c 91       	ld	r22, X
    18c4:	0e 94 47 05 	call	0xa8e	; 0xa8e <gpib_send_address>

	// now receive data
	//uart_puts("before status byte receive\r\n");
	e = gpib_receive(b);
    18c8:	fe 01       	movw	r30, r28
    18ca:	e8 59       	subi	r30, 0x98	; 152
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	80 81       	ld	r24, Z
    18d0:	91 81       	ldd	r25, Z+1	; 0x01
    18d2:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <gpib_receive>
    18d6:	89 83       	std	Y+1, r24	; 0x01
	//uart_puts("after status byte receive\r\n");
	// status byte is now in b
	if (secondary != ADDRESS_NOT_SET) {
    18d8:	fe 01       	movw	r30, r28
    18da:	e9 59       	subi	r30, 0x99	; 153
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	80 81       	ld	r24, Z
    18e0:	8f 3f       	cpi	r24, 0xFF	; 255
    18e2:	e1 f1       	breq	.+120    	; 0x195c <gpib_spoll_single+0xd8>
		sprintf((char*) controlString,
    18e4:	fe 01       	movw	r30, r28
    18e6:	ea 59       	subi	r30, 0x9A	; 154
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	80 81       	ld	r24, Z
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	ac 01       	movw	r20, r24
    18f2:	40 54       	subi	r20, 0x40	; 64
    18f4:	50 40       	sbci	r21, 0x00	; 0
    18f6:	fe 01       	movw	r30, r28
    18f8:	e9 59       	subi	r30, 0x99	; 153
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	80 81       	ld	r24, Z
    18fe:	68 2f       	mov	r22, r24
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	fe 01       	movw	r30, r28
    1904:	e8 59       	subi	r30, 0x98	; 152
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	01 90       	ld	r0, Z+
    190a:	f0 81       	ld	r31, Z
    190c:	e0 2d       	mov	r30, r0
    190e:	80 81       	ld	r24, Z
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	8d b7       	in	r24, 0x3d	; 61
    1916:	9e b7       	in	r25, 0x3e	; 62
    1918:	0a 97       	sbiw	r24, 0x0a	; 10
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	9e bf       	out	0x3e, r25	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	8d bf       	out	0x3d, r24	; 61
    1924:	ed b7       	in	r30, 0x3d	; 61
    1926:	fe b7       	in	r31, 0x3e	; 62
    1928:	31 96       	adiw	r30, 0x01	; 1
    192a:	ce 01       	movw	r24, r28
    192c:	02 96       	adiw	r24, 0x02	; 2
    192e:	91 83       	std	Z+1, r25	; 0x01
    1930:	80 83       	st	Z, r24
    1932:	81 e4       	ldi	r24, 0x41	; 65
    1934:	91 e0       	ldi	r25, 0x01	; 1
    1936:	93 83       	std	Z+3, r25	; 0x03
    1938:	82 83       	std	Z+2, r24	; 0x02
    193a:	55 83       	std	Z+5, r21	; 0x05
    193c:	44 83       	std	Z+4, r20	; 0x04
    193e:	77 83       	std	Z+7, r23	; 0x07
    1940:	66 83       	std	Z+6, r22	; 0x06
    1942:	31 87       	std	Z+9, r19	; 0x09
    1944:	20 87       	std	Z+8, r18	; 0x08
    1946:	0e 94 18 02 	call	0x430	; 0x430 <sprintf>
    194a:	8d b7       	in	r24, 0x3d	; 61
    194c:	9e b7       	in	r25, 0x3e	; 62
    194e:	0a 96       	adiw	r24, 0x0a	; 10
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	9e bf       	out	0x3e, r25	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	8d bf       	out	0x3d, r24	; 61
    195a:	33 c0       	rjmp	.+102    	; 0x19c2 <gpib_spoll_single+0x13e>
				"Status byte from device primary=0x%02x,secondary=0x%02x (physical) = 0x%02x\n\r",
				TalkerAddress2Address(primary), secondary, *b);
	} else {
		sprintf((char*) controlString,
    195c:	fe 01       	movw	r30, r28
    195e:	ea 59       	subi	r30, 0x9A	; 154
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	80 81       	ld	r24, Z
    1964:	88 2f       	mov	r24, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	ac 01       	movw	r20, r24
    196a:	40 54       	subi	r20, 0x40	; 64
    196c:	50 40       	sbci	r21, 0x00	; 0
    196e:	fe 01       	movw	r30, r28
    1970:	e8 59       	subi	r30, 0x98	; 152
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	01 90       	ld	r0, Z+
    1976:	f0 81       	ld	r31, Z
    1978:	e0 2d       	mov	r30, r0
    197a:	80 81       	ld	r24, Z
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	8d b7       	in	r24, 0x3d	; 61
    1982:	9e b7       	in	r25, 0x3e	; 62
    1984:	08 97       	sbiw	r24, 0x08	; 8
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	9e bf       	out	0x3e, r25	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	8d bf       	out	0x3d, r24	; 61
    1990:	ed b7       	in	r30, 0x3d	; 61
    1992:	fe b7       	in	r31, 0x3e	; 62
    1994:	31 96       	adiw	r30, 0x01	; 1
    1996:	ce 01       	movw	r24, r28
    1998:	02 96       	adiw	r24, 0x02	; 2
    199a:	91 83       	std	Z+1, r25	; 0x01
    199c:	80 83       	st	Z, r24
    199e:	8f e8       	ldi	r24, 0x8F	; 143
    19a0:	91 e0       	ldi	r25, 0x01	; 1
    19a2:	93 83       	std	Z+3, r25	; 0x03
    19a4:	82 83       	std	Z+2, r24	; 0x02
    19a6:	55 83       	std	Z+5, r21	; 0x05
    19a8:	44 83       	std	Z+4, r20	; 0x04
    19aa:	37 83       	std	Z+7, r19	; 0x07
    19ac:	26 83       	std	Z+6, r18	; 0x06
    19ae:	0e 94 18 02 	call	0x430	; 0x430 <sprintf>
    19b2:	8d b7       	in	r24, 0x3d	; 61
    19b4:	9e b7       	in	r25, 0x3e	; 62
    19b6:	08 96       	adiw	r24, 0x08	; 8
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	9e bf       	out	0x3e, r25	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	8d bf       	out	0x3d, r24	; 61
				"Status byte from device primary=0x%02x (physical) = 0x%02x\n\r",
				TalkerAddress2Address(primary), *b);
	}
	uart_puts((char*) controlString);
    19c2:	ce 01       	movw	r24, r28
    19c4:	02 96       	adiw	r24, 0x02	; 2
    19c6:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>

	// send UNT and UNL commands (unlisten and untalk)
	// effect: all talker stop talking and all listeners stop listening
	gpib_untalkUnlisten();
    19ca:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <gpib_untalkUnlisten>
	return e;
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d0:	c7 59       	subi	r28, 0x97	; 151
    19d2:	df 4f       	sbci	r29, 0xFF	; 255
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	cd bf       	out	0x3d, r28	; 61
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	08 95       	ret

000019e4 <gpib_serial_poll>:
 * I haven't looked how a device with two byte address behaves.
 *
 * Secondary/primary is returned in inout parameters
 * If any emitter is found, return value is != 0.
 */
uchar gpib_serial_poll(uint8_t *primary_v, uint8_t* secondary_v) {
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	2c 97       	sbiw	r28, 0x0c	; 12
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	9a 87       	std	Y+10, r25	; 0x0a
    19fa:	89 87       	std	Y+9, r24	; 0x09
    19fc:	7c 87       	std	Y+12, r23	; 0x0c
    19fe:	6b 87       	std	Y+11, r22	; 0x0b
	uchar b, e;
	uchar primary = 0, secondary = 0, found = 0,
    1a00:	1e 82       	std	Y+6, r1	; 0x06
    1a02:	1d 82       	std	Y+5, r1	; 0x05
    1a04:	1c 82       	std	Y+4, r1	; 0x04
			foundPhysical = ADDRESS_NOT_SET;
    1a06:	8f ef       	ldi	r24, 0xFF	; 255
    1a08:	8b 83       	std	Y+3, r24	; 0x03
	int i;

	// send unlisten and untalk to all
	gpib_untalkUnlisten();
    1a0a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <gpib_untalkUnlisten>

	// serial poll sequence start
	gpib_spoll_start();
    1a0e:	0e 94 18 0c 	call	0x1830	; 0x1830 <gpib_spoll_start>

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    1a12:	1a 82       	std	Y+2, r1	; 0x02
    1a14:	19 82       	std	Y+1, r1	; 0x01
    1a16:	5d c0       	rjmp	.+186    	; 0x1ad2 <gpib_serial_poll+0xee>
			i++) {

		// set partner to talker mode
		primary = address2TalkerAddress(controller.partners[i].primary);
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	fc 01       	movw	r30, r24
    1a22:	e7 52       	subi	r30, 0x27	; 39
    1a24:	fb 4f       	sbci	r31, 0xFB	; 251
    1a26:	80 81       	ld	r24, Z
    1a28:	80 5c       	subi	r24, 0xC0	; 192
    1a2a:	8e 83       	std	Y+6, r24	; 0x06
		secondary = secondaryAdressToAdressByte(
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a30:	03 96       	adiw	r24, 0x03	; 3
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	fc 01       	movw	r30, r24
    1a38:	ec 52       	subi	r30, 0x2C	; 44
    1a3a:	fb 4f       	sbci	r31, 0xFB	; 251
    1a3c:	80 81       	ld	r24, Z
    1a3e:	80 66       	ori	r24, 0x60	; 96
    1a40:	8d 83       	std	Y+5, r24	; 0x05
				controller.partners[i].secondary);
		// query status byte from device
		e = gpib_spoll_single(primary, secondary, &b);
    1a42:	9e 01       	movw	r18, r28
    1a44:	28 5f       	subi	r18, 0xF8	; 248
    1a46:	3f 4f       	sbci	r19, 0xFF	; 255
    1a48:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4a:	6d 81       	ldd	r22, Y+5	; 0x05
    1a4c:	a9 01       	movw	r20, r18
    1a4e:	0e 94 42 0c 	call	0x1884	; 0x1884 <gpib_spoll_single>
    1a52:	8f 83       	std	Y+7, r24	; 0x07
		if (e==0xff) {
    1a54:	8f 81       	ldd	r24, Y+7	; 0x07
    1a56:	8f 3f       	cpi	r24, 0xFF	; 255
    1a58:	b9 f1       	breq	.+110    	; 0x1ac8 <gpib_serial_poll+0xe4>
			continue;
		}

		// bit 6 of status byte of SRQ emitter is 1; check this
		// when reading status byte from emitter, he releases SRQ line (may also be tested here)
		if (b & (1 << 6)) {
    1a5a:	88 85       	ldd	r24, Y+8	; 0x08
    1a5c:	88 2f       	mov	r24, r24
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	80 74       	andi	r24, 0x40	; 64
    1a62:	90 70       	andi	r25, 0x00	; 0
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	81 f1       	breq	.+96     	; 0x1ac8 <gpib_serial_poll+0xe4>
			found = primary;
    1a68:	8e 81       	ldd	r24, Y+6	; 0x06
    1a6a:	8c 83       	std	Y+4, r24	; 0x04
			foundPhysical = TalkerAddress2Address(found);
    1a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6e:	80 54       	subi	r24, 0x40	; 64
    1a70:	8b 83       	std	Y+3, r24	; 0x03
			sprintf((char*) cmd_buf,
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7a:	48 2f       	mov	r20, r24
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	8d b7       	in	r24, 0x3d	; 61
    1a80:	9e b7       	in	r25, 0x3e	; 62
    1a82:	08 97       	sbiw	r24, 0x08	; 8
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	9e bf       	out	0x3e, r25	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	8d bf       	out	0x3d, r24	; 61
    1a8e:	ed b7       	in	r30, 0x3d	; 61
    1a90:	fe b7       	in	r31, 0x3e	; 62
    1a92:	31 96       	adiw	r30, 0x01	; 1
    1a94:	8c e8       	ldi	r24, 0x8C	; 140
    1a96:	95 e0       	ldi	r25, 0x05	; 5
    1a98:	91 83       	std	Z+1, r25	; 0x01
    1a9a:	80 83       	st	Z, r24
    1a9c:	8c ec       	ldi	r24, 0xCC	; 204
    1a9e:	91 e0       	ldi	r25, 0x01	; 1
    1aa0:	93 83       	std	Z+3, r25	; 0x03
    1aa2:	82 83       	std	Z+2, r24	; 0x02
    1aa4:	35 83       	std	Z+5, r19	; 0x05
    1aa6:	24 83       	std	Z+4, r18	; 0x04
    1aa8:	57 83       	std	Z+7, r21	; 0x07
    1aaa:	46 83       	std	Z+6, r20	; 0x06
    1aac:	0e 94 18 02 	call	0x430	; 0x430 <sprintf>
    1ab0:	8d b7       	in	r24, 0x3d	; 61
    1ab2:	9e b7       	in	r25, 0x3e	; 62
    1ab4:	08 96       	adiw	r24, 0x08	; 8
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	9e bf       	out	0x3e, r25	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	8d bf       	out	0x3d, r24	; 61
					"SRQ emitter is device = 0x%02x (physical address), secondary = 0x%02x\n\r",
					foundPhysical, secondary);
			uart_puts((char*) cmd_buf);
    1ac0:	8c e8       	ldi	r24, 0x8C	; 140
    1ac2:	95 e0       	ldi	r25, 0x05	; 5
    1ac4:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
	// serial poll sequence start
	gpib_spoll_start();

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
			i++) {
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	9a 81       	ldd	r25, Y+2	; 0x02
    1acc:	01 96       	adiw	r24, 0x01	; 1
    1ace:	9a 83       	std	Y+2, r25	; 0x02
    1ad0:	89 83       	std	Y+1, r24	; 0x01

	// serial poll sequence start
	gpib_spoll_start();

	// searching for SRQ emitter in a loop ...
	for (i = 0; (controller.partners[i].primary != ADDRESS_NOT_SET) && !found;
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	fc 01       	movw	r30, r24
    1adc:	e7 52       	subi	r30, 0x27	; 39
    1ade:	fb 4f       	sbci	r31, 0xFB	; 251
    1ae0:	80 81       	ld	r24, Z
    1ae2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ae4:	21 f0       	breq	.+8      	; 0x1aee <gpib_serial_poll+0x10a>
    1ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae8:	88 23       	and	r24, r24
    1aea:	09 f4       	brne	.+2      	; 0x1aee <gpib_serial_poll+0x10a>
    1aec:	95 cf       	rjmp	.-214    	; 0x1a18 <gpib_serial_poll+0x34>
			uart_puts((char*) cmd_buf);
		}
	}

	// serial poll sequence end
	gpib_spoll_end(cmd_buf);
    1aee:	8c e8       	ldi	r24, 0x8C	; 140
    1af0:	95 e0       	ldi	r25, 0x05	; 5
    1af2:	0e 94 2d 0c 	call	0x185a	; 0x185a <gpib_spoll_end>

	// "return" values determined
	*primary_v = primary;
    1af6:	e9 85       	ldd	r30, Y+9	; 0x09
    1af8:	fa 85       	ldd	r31, Y+10	; 0x0a
    1afa:	8e 81       	ldd	r24, Y+6	; 0x06
    1afc:	80 83       	st	Z, r24
	*secondary_v = secondary;
    1afe:	eb 85       	ldd	r30, Y+11	; 0x0b
    1b00:	fc 85       	ldd	r31, Y+12	; 0x0c
    1b02:	8d 81       	ldd	r24, Y+5	; 0x05
    1b04:	80 83       	st	Z, r24

	return found;
    1b06:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b08:	2c 96       	adiw	r28, 0x0c	; 12
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	de bf       	out	0x3e, r29	; 62
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	cd bf       	out	0x3d, r28	; 61
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <gpib_set_partner_address>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_address(uchar primary, uchar secondary) {
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <gpib_set_partner_address+0x6>
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	6a 83       	std	Y+2, r22	; 0x02
	controller.partner.primary = primary;
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	80 93 d5 04 	sts	0x04D5, r24
	controller.partner.secondary = secondary;
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	80 93 d6 04 	sts	0x04D6, r24
}
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <gpib_set_partner_secondary>:

/**
 * Set device to be controlled.
 * \param address Address of device.
 */
void gpib_set_partner_secondary(uchar secondary) {
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	0f 92       	push	r0
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	89 83       	std	Y+1, r24	; 0x01
	controller.partner.secondary = secondary;
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	80 93 d6 04 	sts	0x04D6, r24
}
    1b50:	0f 90       	pop	r0
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <gpib_get_partner_pad>:

/**
 * Get primary address of device currently controlled.
 * \returns primary address Address of device.
 */
uchar gpib_get_partner_pad(void) {
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.primary;
    1b60:	80 91 d5 04 	lds	r24, 0x04D5
}
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <gpib_get_partner_sad>:

/**
 * Get secondary address of device currently controlled.
 * \returns secondary address Address of device.
 */
uchar gpib_get_partner_sad(void) {
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
	return controller.partner.secondary;
    1b72:	80 91 d6 04 	lds	r24, 0x04D6
}
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <gpib_get_address>:

/**
 * Get controller address.
 * \returns address of controller.
 */
uchar gpib_get_address(void) {
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
	return controller.myaddress;
    1b84:	80 91 d4 04 	lds	r24, 0x04D4
}
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <gpib_set_flavour>:

void gpib_set_flavour(uchar flavour) {
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	0f 92       	push	r0
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	89 83       	std	Y+1, r24	; 0x01
	controller.flavour = flavour;
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	80 93 d8 04 	sts	0x04D8, r24
}
    1ba0:	0f 90       	pop	r0
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	08 95       	ret

00001ba8 <gpib_get_flavour>:

uchar gpib_get_flavour(void) {
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
	return controller.flavour;
    1bb0:	80 91 d8 04 	lds	r24, 0x04D8
}
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret

00001bba <gpib_clear_partners>:

/**
 * Clear partners list
 */
void gpib_clear_partners() {
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <gpib_clear_partners+0x6>
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < MAX_PARTNER; i++) {
    1bc4:	1a 82       	std	Y+2, r1	; 0x02
    1bc6:	19 82       	std	Y+1, r1	; 0x01
    1bc8:	0e c0       	rjmp	.+28     	; 0x1be6 <gpib_clear_partners+0x2c>
		controller.partners[i].primary = ADDRESS_NOT_SET;
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	e7 52       	subi	r30, 0x27	; 39
    1bd6:	fb 4f       	sbci	r31, 0xFB	; 251
    1bd8:	8f ef       	ldi	r24, 0xFF	; 255
    1bda:	80 83       	st	Z, r24

/**
 * Clear partners list
 */
void gpib_clear_partners() {
	for (int i = 0; i < MAX_PARTNER; i++) {
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	9a 83       	std	Y+2, r25	; 0x02
    1be4:	89 83       	std	Y+1, r24	; 0x01
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bea:	85 30       	cpi	r24, 0x05	; 5
    1bec:	91 05       	cpc	r25, r1
    1bee:	6c f3       	brlt	.-38     	; 0x1bca <gpib_clear_partners+0x10>
		controller.partners[i].primary = ADDRESS_NOT_SET;
	}
}
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <gpib_add_partner_address>:

/**
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <gpib_add_partner_address+0x6>
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <gpib_add_partner_address+0x8>
    1c02:	0f 92       	push	r0
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	8b 83       	std	Y+3, r24	; 0x03
    1c0a:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1c0c:	1a 82       	std	Y+2, r1	; 0x02
    1c0e:	19 82       	std	Y+1, r1	; 0x01
    1c10:	05 c0       	rjmp	.+10     	; 0x1c1c <gpib_add_partner_address+0x22>
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
			i++) {
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	9a 81       	ldd	r25, Y+2	; 0x02
    1c16:	01 96       	adiw	r24, 0x01	; 1
    1c18:	9a 83       	std	Y+2, r25	; 0x02
    1c1a:	89 83       	std	Y+1, r24	; 0x01
 * Add partner to list of known devices. Only these acre scanned during a serial poll.
 */
uchar gpib_add_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER && controller.partners[i].primary != ADDRESS_NOT_SET;
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	85 30       	cpi	r24, 0x05	; 5
    1c22:	91 05       	cpc	r25, r1
    1c24:	54 f4       	brge	.+20     	; 0x1c3a <gpib_add_partner_address+0x40>
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	fc 01       	movw	r30, r24
    1c30:	e7 52       	subi	r30, 0x27	; 39
    1c32:	fb 4f       	sbci	r31, 0xFB	; 251
    1c34:	80 81       	ld	r24, Z
    1c36:	8f 3f       	cpi	r24, 0xFF	; 255
    1c38:	61 f7       	brne	.-40     	; 0x1c12 <gpib_add_partner_address+0x18>
			i++) {
	}
	if (i == MAX_PARTNER) {
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3e:	85 30       	cpi	r24, 0x05	; 5
    1c40:	91 05       	cpc	r25, r1
    1c42:	39 f4       	brne	.+14     	; 0x1c52 <gpib_add_partner_address+0x58>
		uart_puts("Too much partners.\n\r");
    1c44:	84 e1       	ldi	r24, 0x14	; 20
    1c46:	92 e0       	ldi	r25, 0x02	; 2
    1c48:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
		return 1;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	8d 83       	std	Y+5, r24	; 0x05
    1c50:	14 c0       	rjmp	.+40     	; 0x1c7a <gpib_add_partner_address+0x80>
	}
	controller.partners[i].primary = primary;
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	9a 81       	ldd	r25, Y+2	; 0x02
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	e7 52       	subi	r30, 0x27	; 39
    1c5e:	fb 4f       	sbci	r31, 0xFB	; 251
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	80 83       	st	Z, r24
	controller.partners[i].secondary = secondary;
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	9a 81       	ldd	r25, Y+2	; 0x02
    1c68:	03 96       	adiw	r24, 0x03	; 3
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	fc 01       	movw	r30, r24
    1c70:	ec 52       	subi	r30, 0x2C	; 44
    1c72:	fb 4f       	sbci	r31, 0xFB	; 251
    1c74:	8c 81       	ldd	r24, Y+4	; 0x04
    1c76:	80 83       	st	Z, r24
	return 0;
    1c78:	1d 82       	std	Y+5, r1	; 0x05
    1c7a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <gpib_remove_partner_address>:

/**
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <gpib_remove_partner_address+0x6>
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <gpib_remove_partner_address+0x8>
    1c94:	0f 92       	push	r0
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	8b 83       	std	Y+3, r24	; 0x03
    1c9c:	6c 83       	std	Y+4, r22	; 0x04
	int i;
	for (i = 0;
    1c9e:	1a 82       	std	Y+2, r1	; 0x02
    1ca0:	19 82       	std	Y+1, r1	; 0x01
    1ca2:	05 c0       	rjmp	.+10     	; 0x1cae <gpib_remove_partner_address+0x22>
			i < MAX_PARTNER
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca8:	01 96       	adiw	r24, 0x01	; 1
    1caa:	9a 83       	std	Y+2, r25	; 0x02
    1cac:	89 83       	std	Y+1, r24	; 0x01
 * Remove partner from list of known devices.
 */
uchar gpib_remove_partner_address(uchar primary, uchar secondary) {
	int i;
	for (i = 0;
			i < MAX_PARTNER
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb2:	85 30       	cpi	r24, 0x05	; 5
    1cb4:	91 05       	cpc	r25, r1
    1cb6:	bc f4       	brge	.+46     	; 0x1ce6 <gpib_remove_partner_address+0x5a>
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbc:	88 0f       	add	r24, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	e7 52       	subi	r30, 0x27	; 39
    1cc4:	fb 4f       	sbci	r31, 0xFB	; 251
    1cc6:	90 81       	ld	r25, Z
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	98 17       	cp	r25, r24
    1ccc:	59 f7       	brne	.-42     	; 0x1ca4 <gpib_remove_partner_address+0x18>
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd2:	03 96       	adiw	r24, 0x03	; 3
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	fc 01       	movw	r30, r24
    1cda:	ec 52       	subi	r30, 0x2C	; 44
    1cdc:	fb 4f       	sbci	r31, 0xFB	; 251
    1cde:	90 81       	ld	r25, Z
    1ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce2:	98 17       	cp	r25, r24
    1ce4:	f9 f6       	brne	.-66     	; 0x1ca4 <gpib_remove_partner_address+0x18>
					&& (controller.partners[i].primary != primary
							|| controller.partners[i].secondary != secondary);
			i++) {
	}
	if (i == MAX_PARTNER) {
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cea:	85 30       	cpi	r24, 0x05	; 5
    1cec:	91 05       	cpc	r25, r1
    1cee:	39 f4       	brne	.+14     	; 0x1cfe <gpib_remove_partner_address+0x72>
		uart_puts("Partner unknown.\n\r");
    1cf0:	89 e2       	ldi	r24, 0x29	; 41
    1cf2:	92 e0       	ldi	r25, 0x02	; 2
    1cf4:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
		return 1;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
    1cfc:	14 c0       	rjmp	.+40     	; 0x1d26 <gpib_remove_partner_address+0x9a>
	}
	controller.partners[i].primary = ADDRESS_NOT_SET;
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	9a 81       	ldd	r25, Y+2	; 0x02
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	fc 01       	movw	r30, r24
    1d08:	e7 52       	subi	r30, 0x27	; 39
    1d0a:	fb 4f       	sbci	r31, 0xFB	; 251
    1d0c:	8f ef       	ldi	r24, 0xFF	; 255
    1d0e:	80 83       	st	Z, r24
	controller.partners[i].secondary = ADDRESS_NOT_SET;
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	9a 81       	ldd	r25, Y+2	; 0x02
    1d14:	03 96       	adiw	r24, 0x03	; 3
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	ec 52       	subi	r30, 0x2C	; 44
    1d1e:	fb 4f       	sbci	r31, 0xFB	; 251
    1d20:	8f ef       	ldi	r24, 0xFF	; 255
    1d22:	80 83       	st	Z, r24
	return 0;
    1d24:	1d 82       	std	Y+5, r1	; 0x05
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <gpib_device_exists>:
/**
 * Returns true if device exists.
 *
 * Existence is checked by reading in the status byte of the device in a serial poll sequence.
 */
uchar gpib_device_exists(uchar primary, uchar secondary) {
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	27 97       	sbiw	r28, 0x07	; 7
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
    1d4e:	6e 83       	std	Y+6, r22	; 0x06
	uchar b, e;
	uchar found = 0, foundPhysical = ADDRESS_NOT_SET;
    1d50:	1a 82       	std	Y+2, r1	; 0x02
    1d52:	8f ef       	ldi	r24, 0xFF	; 255
    1d54:	89 83       	std	Y+1, r24	; 0x01

	// send unlisten and untalk to all
	gpib_untalkUnlisten();
    1d56:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <gpib_untalkUnlisten>

	// serial poll sequence start
	gpib_spoll_start();
    1d5a:	0e 94 18 0c 	call	0x1830	; 0x1830 <gpib_spoll_start>

	// TODO: do next line with a timeout!!!
	// query status byte from device
	e = gpib_spoll_single(primary, secondary, &b);
    1d5e:	9e 01       	movw	r18, r28
    1d60:	2c 5f       	subi	r18, 0xFC	; 252
    1d62:	3f 4f       	sbci	r19, 0xFF	; 255
    1d64:	8d 81       	ldd	r24, Y+5	; 0x05
    1d66:	6e 81       	ldd	r22, Y+6	; 0x06
    1d68:	a9 01       	movw	r20, r18
    1d6a:	0e 94 42 0c 	call	0x1884	; 0x1884 <gpib_spoll_single>
    1d6e:	8b 83       	std	Y+3, r24	; 0x03

	// serial poll sequence end
	gpib_spoll_end(cmd_buf);
    1d70:	8c e8       	ldi	r24, 0x8C	; 140
    1d72:	95 e0       	ldi	r25, 0x05	; 5
    1d74:	0e 94 2d 0c 	call	0x185a	; 0x185a <gpib_spoll_end>

	return e!=0xff;
    1d78:	1f 82       	std	Y+7, r1	; 0x07
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d7e:	11 f0       	breq	.+4      	; 0x1d84 <gpib_device_exists+0x4c>
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	8f 83       	std	Y+7, r24	; 0x07
    1d84:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1d86:	27 96       	adiw	r28, 0x07	; 7
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	08 95       	ret

00001d98 <gpib_find_devices>:

void gpib_find_devices(uchar maxAdress ) {
    1d98:	df 93       	push	r29
    1d9a:	cf 93       	push	r28
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	e5 97       	sbiw	r28, 0x35	; 53
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	8d ab       	std	Y+53, r24	; 0x35
	char txt[50];
	for (int i=1; i<maxAdress; i++) {
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	9a 83       	std	Y+2, r25	; 0x02
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	39 c0       	rjmp	.+114    	; 0x1e2a <gpib_find_devices+0x92>
		if (gpib_device_exists(address2TalkerAddress(i), ADDRESS_NOT_SET)) {
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	80 5c       	subi	r24, 0xC0	; 192
    1dbc:	6f ef       	ldi	r22, 0xFF	; 255
    1dbe:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <gpib_device_exists>
    1dc2:	88 23       	and	r24, r24
    1dc4:	99 f0       	breq	.+38     	; 0x1dec <gpib_find_devices+0x54>
			sprintf("Device found at address: %d", i);
    1dc6:	29 81       	ldd	r18, Y+1	; 0x01
    1dc8:	3a 81       	ldd	r19, Y+2	; 0x02
    1dca:	00 d0       	rcall	.+0      	; 0x1dcc <gpib_find_devices+0x34>
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <gpib_find_devices+0x36>
    1dce:	ed b7       	in	r30, 0x3d	; 61
    1dd0:	fe b7       	in	r31, 0x3e	; 62
    1dd2:	31 96       	adiw	r30, 0x01	; 1
    1dd4:	8c e3       	ldi	r24, 0x3C	; 60
    1dd6:	92 e0       	ldi	r25, 0x02	; 2
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	80 83       	st	Z, r24
    1ddc:	33 83       	std	Z+3, r19	; 0x03
    1dde:	22 83       	std	Z+2, r18	; 0x02
    1de0:	0e 94 18 02 	call	0x430	; 0x430 <sprintf>
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
		}
		if (gpib_device_exists(address2TalkerAddress(i),0)) {
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	80 5c       	subi	r24, 0xC0	; 192
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <gpib_device_exists>
    1df6:	88 23       	and	r24, r24
    1df8:	99 f0       	breq	.+38     	; 0x1e20 <gpib_find_devices+0x88>
			sprintf("Device found at address: (%d,0)", i);
    1dfa:	29 81       	ldd	r18, Y+1	; 0x01
    1dfc:	3a 81       	ldd	r19, Y+2	; 0x02
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <gpib_find_devices+0x68>
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <gpib_find_devices+0x6a>
    1e02:	ed b7       	in	r30, 0x3d	; 61
    1e04:	fe b7       	in	r31, 0x3e	; 62
    1e06:	31 96       	adiw	r30, 0x01	; 1
    1e08:	88 e5       	ldi	r24, 0x58	; 88
    1e0a:	92 e0       	ldi	r25, 0x02	; 2
    1e0c:	91 83       	std	Z+1, r25	; 0x01
    1e0e:	80 83       	st	Z, r24
    1e10:	33 83       	std	Z+3, r19	; 0x03
    1e12:	22 83       	std	Z+2, r18	; 0x02
    1e14:	0e 94 18 02 	call	0x430	; 0x430 <sprintf>
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
	return e!=0xff;
}

void gpib_find_devices(uchar maxAdress ) {
	char txt[50];
	for (int i=1; i<maxAdress; i++) {
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	9a 81       	ldd	r25, Y+2	; 0x02
    1e24:	01 96       	adiw	r24, 0x01	; 1
    1e26:	9a 83       	std	Y+2, r25	; 0x02
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	8d a9       	ldd	r24, Y+53	; 0x35
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	9a 81       	ldd	r25, Y+2	; 0x02
    1e34:	82 17       	cp	r24, r18
    1e36:	93 07       	cpc	r25, r19
    1e38:	0c f4       	brge	.+2      	; 0x1e3c <gpib_find_devices+0xa4>
    1e3a:	be cf       	rjmp	.-132    	; 0x1db8 <gpib_find_devices+0x20>
		}
		if (gpib_device_exists(address2TalkerAddress(i),0)) {
			sprintf("Device found at address: (%d,0)", i);
		}
	}
}
    1e3c:	e5 96       	adiw	r28, 0x35	; 53
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <arb_ramp>:
void receiveAnswer();

#define ARB_TEST
#ifdef ARB_TEST

void arb_ramp() {
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	2e 97       	sbiw	r28, 0x0e	; 14
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
	uchar b[10];

	gpib_prepare_write();
    1e62:	0e 94 6f 05 	call	0xade	; 0xade <gpib_prepare_write>
	gpib_write_prologue(0);
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <gpib_write_prologue>

	gpib_write_string("SOUR:LIST:SEGM:VOLT ");
    1e6c:	88 e7       	ldi	r24, 0x78	; 120
    1e6e:	92 e0       	ldi	r25, 0x02	; 2
    1e70:	0e 94 63 08 	call	0x10c6	; 0x10c6 <gpib_write_string>

	for (int i = 0; i < 4096; i++) {
    1e74:	1c 82       	std	Y+4, r1	; 0x04
    1e76:	1b 82       	std	Y+3, r1	; 0x03
    1e78:	39 c0       	rjmp	.+114    	; 0x1eec <arb_ramp+0x9e>
		int f = i / 1000;
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	28 ee       	ldi	r18, 0xE8	; 232
    1e80:	33 e0       	ldi	r19, 0x03	; 3
    1e82:	b9 01       	movw	r22, r18
    1e84:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <__divmodhi4>
    1e88:	cb 01       	movw	r24, r22
    1e8a:	9a 83       	std	Y+2, r25	; 0x02
    1e8c:	89 83       	std	Y+1, r24	; 0x01
		sprintf(b, "%d", f);
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <arb_ramp+0x42>
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <arb_ramp+0x44>
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <arb_ramp+0x46>
    1e94:	ed b7       	in	r30, 0x3d	; 61
    1e96:	fe b7       	in	r31, 0x3e	; 62
    1e98:	31 96       	adiw	r30, 0x01	; 1
    1e9a:	ce 01       	movw	r24, r28
    1e9c:	05 96       	adiw	r24, 0x05	; 5
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	80 83       	st	Z, r24
    1ea2:	8d e8       	ldi	r24, 0x8D	; 141
    1ea4:	92 e0       	ldi	r25, 0x02	; 2
    1ea6:	93 83       	std	Z+3, r25	; 0x03
    1ea8:	82 83       	std	Z+2, r24	; 0x02
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	9a 81       	ldd	r25, Y+2	; 0x02
    1eae:	95 83       	std	Z+5, r25	; 0x05
    1eb0:	84 83       	std	Z+4, r24	; 0x04
    1eb2:	0e 94 18 02 	call	0x430	; 0x430 <sprintf>
    1eb6:	8d b7       	in	r24, 0x3d	; 61
    1eb8:	9e b7       	in	r25, 0x3e	; 62
    1eba:	06 96       	adiw	r24, 0x06	; 6
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	9e bf       	out	0x3e, r25	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	8d bf       	out	0x3d, r24	; 61
		gpib_write_byte(b[0], 0);
    1ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec8:	60 e0       	ldi	r22, 0x00	; 0
    1eca:	0e 94 92 08 	call	0x1124	; 0x1124 <gpib_write_byte>
		if (i < 4096 - 1) {
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed2:	2f e0       	ldi	r18, 0x0F	; 15
    1ed4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ed6:	92 07       	cpc	r25, r18
    1ed8:	24 f4       	brge	.+8      	; 0x1ee2 <arb_ramp+0x94>
			gpib_write_byte(',', 0);
    1eda:	8c e2       	ldi	r24, 0x2C	; 44
    1edc:	60 e0       	ldi	r22, 0x00	; 0
    1ede:	0e 94 92 08 	call	0x1124	; 0x1124 <gpib_write_byte>
	gpib_prepare_write();
	gpib_write_prologue(0);

	gpib_write_string("SOUR:LIST:SEGM:VOLT ");

	for (int i = 0; i < 4096; i++) {
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee6:	01 96       	adiw	r24, 0x01	; 1
    1ee8:	9c 83       	std	Y+4, r25	; 0x04
    1eea:	8b 83       	std	Y+3, r24	; 0x03
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef0:	20 e1       	ldi	r18, 0x10	; 16
    1ef2:	80 30       	cpi	r24, 0x00	; 0
    1ef4:	92 07       	cpc	r25, r18
    1ef6:	0c f2       	brlt	.-126    	; 0x1e7a <arb_ramp+0x2c>
		if (i < 4096 - 1) {
			gpib_write_byte(',', 0);
		}
	}

	gpib_write_byte(ASCII_CODE_CR, 1);
    1ef8:	8d e0       	ldi	r24, 0x0D	; 13
    1efa:	61 e0       	ldi	r22, 0x01	; 1
    1efc:	0e 94 92 08 	call	0x1124	; 0x1124 <gpib_write_byte>
	gpib_write_epilogue(0);
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	0e 94 28 08 	call	0x1050	; 0x1050 <gpib_write_epilogue>
	gpib_untalkUnlisten();
    1f06:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <gpib_untalkUnlisten>
}
    1f0a:	2e 96       	adiw	r28, 0x0e	; 14
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	de bf       	out	0x3e, r29	; 62
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	cd bf       	out	0x3d, r28	; 61
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <arb>:

void arb() {
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
	gpib_write_command("*RST");
    1f24:	80 e9       	ldi	r24, 0x90	; 144
    1f26:	92 e0       	ldi	r25, 0x02	; 2
    1f28:	0e 94 45 08 	call	0x108a	; 0x108a <gpib_write_command>
	gpib_write_command("SOUR:ROSC:SOUR INT;");
    1f2c:	85 e9       	ldi	r24, 0x95	; 149
    1f2e:	92 e0       	ldi	r25, 0x02	; 2
    1f30:	0e 94 45 08 	call	0x108a	; 0x108a <gpib_write_command>
	gpib_write_command(":SOUR:FREQ:FIX 1E3;");
    1f34:	89 ea       	ldi	r24, 0xA9	; 169
    1f36:	92 e0       	ldi	r25, 0x02	; 2
    1f38:	0e 94 45 08 	call	0x108a	; 0x108a <gpib_write_command>
	gpib_write_command(":SOUR:FUNC:SHAP USER;");
    1f3c:	8d eb       	ldi	r24, 0xBD	; 189
    1f3e:	92 e0       	ldi	r25, 0x02	; 2
    1f40:	0e 94 45 08 	call	0x108a	; 0x108a <gpib_write_command>
	gpib_write_command(":SOUR:VOLT:LEV:IMM:AMPL 5V");
    1f44:	83 ed       	ldi	r24, 0xD3	; 211
    1f46:	92 e0       	ldi	r25, 0x02	; 2
    1f48:	0e 94 45 08 	call	0x108a	; 0x108a <gpib_write_command>
	gpib_write_command("SOUR:LIST:SEGM:SEL A"); // no ';' at end!
    1f4c:	8e ee       	ldi	r24, 0xEE	; 238
    1f4e:	92 e0       	ldi	r25, 0x02	; 2
    1f50:	0e 94 45 08 	call	0x108a	; 0x108a <gpib_write_command>
	arb_ramp();
    1f54:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <arb_ramp>
	gpib_write_command("SOUR:FUNC:USER A");
    1f58:	83 e0       	ldi	r24, 0x03	; 3
    1f5a:	93 e0       	ldi	r25, 0x03	; 3
    1f5c:	0e 94 45 08 	call	0x108a	; 0x108a <gpib_write_command>
	gpib_write_command("INIT:IMM");
    1f60:	84 e1       	ldi	r24, 0x14	; 20
    1f62:	93 e0       	ldi	r25, 0x03	; 3
    1f64:	0e 94 45 08 	call	0x108a	; 0x108a <gpib_write_command>
	//send_command("SOUR:LIST:SEGM:SEL?");
}
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <stringToTwoUchars>:

/**
 * Read two integers from string like "45 56" or one integer. In latter case
 * the second integer is initialized with a special value.
 */
static void stringToTwoUchars(char *string, uchar *a, uchar *b) {
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	28 97       	sbiw	r28, 0x08	; 8
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	9c 83       	std	Y+4, r25	; 0x04
    1f84:	8b 83       	std	Y+3, r24	; 0x03
    1f86:	7e 83       	std	Y+6, r23	; 0x06
    1f88:	6d 83       	std	Y+5, r22	; 0x05
    1f8a:	58 87       	std	Y+8, r21	; 0x08
    1f8c:	4f 83       	std	Y+7, r20	; 0x07
	char *token = strtok(string, " ");
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	9c 81       	ldd	r25, Y+4	; 0x04
    1f92:	2d e1       	ldi	r18, 0x1D	; 29
    1f94:	33 e0       	ldi	r19, 0x03	; 3
    1f96:	b9 01       	movw	r22, r18
    1f98:	0e 94 c2 01 	call	0x384	; 0x384 <strtok>
    1f9c:	9a 83       	std	Y+2, r25	; 0x02
    1f9e:	89 83       	std	Y+1, r24	; 0x01
	*a = atoi((char*) token);
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa4:	0e 94 a4 01 	call	0x348	; 0x348 <atoi>
    1fa8:	ed 81       	ldd	r30, Y+5	; 0x05
    1faa:	fe 81       	ldd	r31, Y+6	; 0x06
    1fac:	80 83       	st	Z, r24
	token = strtok(NULL, " ");
    1fae:	2d e1       	ldi	r18, 0x1D	; 29
    1fb0:	33 e0       	ldi	r19, 0x03	; 3
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	b9 01       	movw	r22, r18
    1fb8:	0e 94 c2 01 	call	0x384	; 0x384 <strtok>
    1fbc:	9a 83       	std	Y+2, r25	; 0x02
    1fbe:	89 83       	std	Y+1, r24	; 0x01
	if (token != NULL) {
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	41 f0       	breq	.+16     	; 0x1fd8 <stringToTwoUchars+0x6a>
		*b = atoi((char*) token);
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	0e 94 a4 01 	call	0x348	; 0x348 <atoi>
    1fd0:	ef 81       	ldd	r30, Y+7	; 0x07
    1fd2:	f8 85       	ldd	r31, Y+8	; 0x08
    1fd4:	80 83       	st	Z, r24
    1fd6:	04 c0       	rjmp	.+8      	; 0x1fe0 <stringToTwoUchars+0x72>
	} else {
		*b = ADDRESS_NOT_SET;
    1fd8:	ef 81       	ldd	r30, Y+7	; 0x07
    1fda:	f8 85       	ldd	r31, Y+8	; 0x08
    1fdc:	8f ef       	ldi	r24, 0xFF	; 255
    1fde:	80 83       	st	Z, r24
	}
}
    1fe0:	28 96       	adiw	r28, 0x08	; 8
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <check_errors>:
 * Checks for errors.
 *
 * Reads error queue. output is one error per line.
 *
 */
void check_errors() {
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	c7 55       	subi	r28, 0x57	; 87
    1ffc:	d0 40       	sbci	r29, 0x00	; 0
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
	char *error_cmd = "SYST:ERR?";
    2008:	8f e1       	ldi	r24, 0x1F	; 31
    200a:	93 e0       	ldi	r25, 0x03	; 3
    200c:	9e 83       	std	Y+6, r25	; 0x06
    200e:	8d 83       	std	Y+5, r24	; 0x05
	uchar msg[80];
	uchar b, e;
	uchar colptr = 0;
    2010:	1b 82       	std	Y+3, r1	; 0x03
	uchar allErrorsRead = 0;
    2012:	1a 82       	std	Y+2, r1	; 0x02
    2014:	48 c0       	rjmp	.+144    	; 0x20a6 <check_errors+0xb4>

	while (!allErrorsRead) {
		gpib_write_command(error_cmd);
    2016:	8d 81       	ldd	r24, Y+5	; 0x05
    2018:	9e 81       	ldd	r25, Y+6	; 0x06
    201a:	0e 94 45 08 	call	0x108a	; 0x108a <gpib_write_command>
		gpib_prepare_read();
    201e:	0e 94 a4 05 	call	0xb48	; 0xb48 <gpib_prepare_read>
		// read the answer until EOI is detected (then e becomes true)
		uchar i = 0;
    2022:	19 82       	std	Y+1, r1	; 0x01
		do {
			// gpib bus receive
			e = gpib_receive(&b);
    2024:	ce 01       	movw	r24, r28
    2026:	89 5a       	subi	r24, 0xA9	; 169
    2028:	9f 4f       	sbci	r25, 0xFF	; 255
    202a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <gpib_receive>
    202e:	8c 83       	std	Y+4, r24	; 0x04
			msg[i++] = b;
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	28 2f       	mov	r18, r24
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	fe 01       	movw	r30, r28
    2038:	e9 5a       	subi	r30, 0xA9	; 169
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	40 81       	ld	r20, Z
    203e:	ce 01       	movw	r24, r28
    2040:	07 96       	adiw	r24, 0x07	; 7
    2042:	fc 01       	movw	r30, r24
    2044:	e2 0f       	add	r30, r18
    2046:	f3 1f       	adc	r31, r19
    2048:	40 83       	st	Z, r20
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	8f 5f       	subi	r24, 0xFF	; 255
    204e:	89 83       	std	Y+1, r24	; 0x01
		} while (!e);
    2050:	8c 81       	ldd	r24, Y+4	; 0x04
    2052:	88 23       	and	r24, r24
    2054:	39 f3       	breq	.-50     	; 0x2024 <check_errors+0x32>
		// terminate string
		//msg[i++] = '\n';
		msg[i++] = '\r';
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	28 2f       	mov	r18, r24
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	ce 01       	movw	r24, r28
    205e:	07 96       	adiw	r24, 0x07	; 7
    2060:	fc 01       	movw	r30, r24
    2062:	e2 0f       	add	r30, r18
    2064:	f3 1f       	adc	r31, r19
    2066:	8d e0       	ldi	r24, 0x0D	; 13
    2068:	80 83       	st	Z, r24
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	8f 5f       	subi	r24, 0xFF	; 255
    206e:	89 83       	std	Y+1, r24	; 0x01
		msg[i] = 0x00;
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	ce 01       	movw	r24, r28
    2078:	07 96       	adiw	r24, 0x07	; 7
    207a:	fc 01       	movw	r30, r24
    207c:	e2 0f       	add	r30, r18
    207e:	f3 1f       	adc	r31, r19
    2080:	10 82       	st	Z, r1
		// check if all errors have been read
		if (strncmp(msg,"+0,",3)==0) {
    2082:	ce 01       	movw	r24, r28
    2084:	07 96       	adiw	r24, 0x07	; 7
    2086:	29 e2       	ldi	r18, 0x29	; 41
    2088:	33 e0       	ldi	r19, 0x03	; 3
    208a:	b9 01       	movw	r22, r18
    208c:	43 e0       	ldi	r20, 0x03	; 3
    208e:	50 e0       	ldi	r21, 0x00	; 0
    2090:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <strncmp>
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	19 f4       	brne	.+6      	; 0x209e <check_errors+0xac>
			allErrorsRead=1;
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	8a 83       	std	Y+2, r24	; 0x02
    209c:	04 c0       	rjmp	.+8      	; 0x20a6 <check_errors+0xb4>
		} else {
			uart_puts((char*) msg);
    209e:	ce 01       	movw	r24, r28
    20a0:	07 96       	adiw	r24, 0x07	; 7
    20a2:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
	uchar msg[80];
	uchar b, e;
	uchar colptr = 0;
	uchar allErrorsRead = 0;

	while (!allErrorsRead) {
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	88 23       	and	r24, r24
    20aa:	09 f4       	brne	.+2      	; 0x20ae <check_errors+0xbc>
    20ac:	b4 cf       	rjmp	.-152    	; 0x2016 <check_errors+0x24>
			allErrorsRead=1;
		} else {
			uart_puts((char*) msg);
		}
	}
}
    20ae:	c9 5a       	subi	r28, 0xA9	; 169
    20b0:	df 4f       	sbci	r29, 0xFF	; 255
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <input_char>:

/**
 * Reads in character into parameter c. Checks for errors and prints them out.
 * Returns 0 if there is no char to read, 1 if there was a char read in.
 */
uchar input_char(uchar *ch) {
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <input_char+0x6>
    20c8:	00 d0       	rcall	.+0      	; 0x20ca <input_char+0x8>
    20ca:	0f 92       	push	r0
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	9c 83       	std	Y+4, r25	; 0x04
    20d2:	8b 83       	std	Y+3, r24	; 0x03
	 * uart_getc() returns in the lower byte the received character and
	 * in the higher byte (bitmask) the last receive error
	 * UART_NO_DATA is returned when no data is available.
	 *
	 */
	c = uart_getc();
    20d4:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <uart_getc>
    20d8:	9a 83       	std	Y+2, r25	; 0x02
    20da:	89 83       	std	Y+1, r24	; 0x01
	if (c & UART_NO_DATA) {
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	9a 81       	ldd	r25, Y+2	; 0x02
    20e0:	80 70       	andi	r24, 0x00	; 0
    20e2:	91 70       	andi	r25, 0x01	; 1
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	11 f0       	breq	.+4      	; 0x20ec <input_char+0x2a>
		// no data available from UART
		return 0;
    20e8:	1d 82       	std	Y+5, r1	; 0x05
    20ea:	24 c0       	rjmp	.+72     	; 0x2134 <input_char+0x72>
	}
	// make uchar from character in int value
	*ch = (uchar) c;
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	eb 81       	ldd	r30, Y+3	; 0x03
    20f0:	fc 81       	ldd	r31, Y+4	; 0x04
    20f2:	80 83       	st	Z, r24

	/*
	 * new data available from UART
	 * check for Frame or Overrun error
	 */
	if (c & UART_FRAME_ERROR) {
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	9a 81       	ldd	r25, Y+2	; 0x02
    20f8:	80 70       	andi	r24, 0x00	; 0
    20fa:	98 70       	andi	r25, 0x08	; 8
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	21 f0       	breq	.+8      	; 0x2108 <input_char+0x46>
		/* Framing Error detected, i.e no stop bit detected */
		uart_puts_P("UART Frame Error: ");
    2100:	81 e8       	ldi	r24, 0x81	; 129
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
	}
	if (c & UART_OVERRUN_ERROR) {
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	9a 81       	ldd	r25, Y+2	; 0x02
    210c:	80 70       	andi	r24, 0x00	; 0
    210e:	94 70       	andi	r25, 0x04	; 4
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	21 f0       	breq	.+8      	; 0x211c <input_char+0x5a>
		/*
		 * Overrun, a character already present in the UART UDR register was
		 * not read by the interrupt handler before the next character arrived,
		 * one or more received characters have been dropped
		 */
		uart_puts_P("UART Overrun Error: ");
    2114:	8c e6       	ldi	r24, 0x6C	; 108
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
	}
	if (c & UART_BUFFER_OVERFLOW) {
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	9a 81       	ldd	r25, Y+2	; 0x02
    2120:	80 70       	andi	r24, 0x00	; 0
    2122:	92 70       	andi	r25, 0x02	; 2
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	21 f0       	breq	.+8      	; 0x2130 <input_char+0x6e>
		/*
		 * We are not reading the receive buffer fast enough,
		 * one or more received character have been dropped
		 */
		uart_puts_P("Buffer overflow error: ");
    2128:	84 e5       	ldi	r24, 0x54	; 84
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
	}
	return 1;
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	8d 83       	std	Y+5, r24	; 0x05
    2134:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	08 95       	ret

00002146 <process_char>:
 * a) xon/xoff mode forward buffer to GPIB
 * b) no flow control: prints error message that input buffer is full.
 *
 * Returns 1 if command end is detected, 0 otherwise.
 */
uchar process_char(uchar *buf, uchar ch, int *ptr) {
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	00 d0       	rcall	.+0      	; 0x214c <process_char+0x6>
    214c:	00 d0       	rcall	.+0      	; 0x214e <process_char+0x8>
    214e:	00 d0       	rcall	.+0      	; 0x2150 <process_char+0xa>
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    2154:	9b 83       	std	Y+3, r25	; 0x03
    2156:	8a 83       	std	Y+2, r24	; 0x02
    2158:	6c 83       	std	Y+4, r22	; 0x04
    215a:	5e 83       	std	Y+6, r21	; 0x06
    215c:	4d 83       	std	Y+5, r20	; 0x05
	uchar ret = 0;
    215e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * send received character back depending on global flag
	 */
	if (rs232_remote_echo) {
    2160:	80 91 cd 04 	lds	r24, 0x04CD
    2164:	88 23       	and	r24, r24
    2166:	19 f0       	breq	.+6      	; 0x216e <process_char+0x28>
		uart_putc((unsigned char) ch);
    2168:	8c 81       	ldd	r24, Y+4	; 0x04
    216a:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <uart_putc>
	}

	// if input buffer is not full, add char
	if (*ptr < COMMAND_INPUT_BUFFER_SIZE - 1) {
    216e:	ed 81       	ldd	r30, Y+5	; 0x05
    2170:	fe 81       	ldd	r31, Y+6	; 0x06
    2172:	80 81       	ld	r24, Z
    2174:	91 81       	ldd	r25, Z+1	; 0x01
    2176:	8f 34       	cpi	r24, 0x4F	; 79
    2178:	91 05       	cpc	r25, r1
    217a:	ec f4       	brge	.+58     	; 0x21b6 <process_char+0x70>
		buf[(*ptr)++] = ch;
    217c:	ed 81       	ldd	r30, Y+5	; 0x05
    217e:	fe 81       	ldd	r31, Y+6	; 0x06
    2180:	40 81       	ld	r20, Z
    2182:	51 81       	ldd	r21, Z+1	; 0x01
    2184:	9a 01       	movw	r18, r20
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	9b 81       	ldd	r25, Y+3	; 0x03
    218a:	fc 01       	movw	r30, r24
    218c:	e2 0f       	add	r30, r18
    218e:	f3 1f       	adc	r31, r19
    2190:	8c 81       	ldd	r24, Y+4	; 0x04
    2192:	80 83       	st	Z, r24
    2194:	ca 01       	movw	r24, r20
    2196:	01 96       	adiw	r24, 0x01	; 1
    2198:	ed 81       	ldd	r30, Y+5	; 0x05
    219a:	fe 81       	ldd	r31, Y+6	; 0x06
    219c:	91 83       	std	Z+1, r25	; 0x01
    219e:	80 83       	st	Z, r24
		buf[*ptr] = '\0';
    21a0:	ed 81       	ldd	r30, Y+5	; 0x05
    21a2:	fe 81       	ldd	r31, Y+6	; 0x06
    21a4:	80 81       	ld	r24, Z
    21a6:	91 81       	ldd	r25, Z+1	; 0x01
    21a8:	9c 01       	movw	r18, r24
    21aa:	8a 81       	ldd	r24, Y+2	; 0x02
    21ac:	9b 81       	ldd	r25, Y+3	; 0x03
    21ae:	fc 01       	movw	r30, r24
    21b0:	e2 0f       	add	r30, r18
    21b2:	f3 1f       	adc	r31, r19
    21b4:	10 82       	st	Z, r1
	}

	// if command ends or buffer is full ...
	if (ch == ASCII_CODE_CR || *ptr >= COMMAND_INPUT_BUFFER_SIZE - 1) {
    21b6:	8c 81       	ldd	r24, Y+4	; 0x04
    21b8:	8d 30       	cpi	r24, 0x0D	; 13
    21ba:	39 f0       	breq	.+14     	; 0x21ca <process_char+0x84>
    21bc:	ed 81       	ldd	r30, Y+5	; 0x05
    21be:	fe 81       	ldd	r31, Y+6	; 0x06
    21c0:	80 81       	ld	r24, Z
    21c2:	91 81       	ldd	r25, Z+1	; 0x01
    21c4:	8f 34       	cpi	r24, 0x4F	; 79
    21c6:	91 05       	cpc	r25, r1
    21c8:	14 f1       	brlt	.+68     	; 0x220e <process_char+0xc8>
		if (ch == ASCII_CODE_CR) {
    21ca:	8c 81       	ldd	r24, Y+4	; 0x04
    21cc:	8d 30       	cpi	r24, 0x0D	; 13
    21ce:	b9 f4       	brne	.+46     	; 0x21fe <process_char+0xb8>
			// adjust string terminator
			buf[--(*ptr)] = '\0';
    21d0:	ed 81       	ldd	r30, Y+5	; 0x05
    21d2:	fe 81       	ldd	r31, Y+6	; 0x06
    21d4:	80 81       	ld	r24, Z
    21d6:	91 81       	ldd	r25, Z+1	; 0x01
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	ed 81       	ldd	r30, Y+5	; 0x05
    21dc:	fe 81       	ldd	r31, Y+6	; 0x06
    21de:	91 83       	std	Z+1, r25	; 0x01
    21e0:	80 83       	st	Z, r24
    21e2:	ed 81       	ldd	r30, Y+5	; 0x05
    21e4:	fe 81       	ldd	r31, Y+6	; 0x06
    21e6:	80 81       	ld	r24, Z
    21e8:	91 81       	ldd	r25, Z+1	; 0x01
    21ea:	9c 01       	movw	r18, r24
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	9b 81       	ldd	r25, Y+3	; 0x03
    21f0:	fc 01       	movw	r30, r24
    21f2:	e2 0f       	add	r30, r18
    21f4:	f3 1f       	adc	r31, r19
    21f6:	10 82       	st	Z, r1
			// let calling function send last command part (or command itself)
			ret = 1;
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	08 c0       	rjmp	.+16     	; 0x220e <process_char+0xc8>
		} else {
			// send intermediate part of command.
			uart_puts_P("Command overflow.");
    21fe:	84 e9       	ldi	r24, 0x94	; 148
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
			*ptr = 0;
    2206:	ed 81       	ldd	r30, Y+5	; 0x05
    2208:	fe 81       	ldd	r31, Y+6	; 0x06
    220a:	11 82       	std	Z+1, r1	; 0x01
    220c:	10 82       	st	Z, r1
		}
	}
	return ret;
    220e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2210:	26 96       	adiw	r28, 0x06	; 6
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <input_process>:
 * This approach handles small single line commands (needing no flow control) and large
 * multi-line commands if flow control is xon/xoff.
 *
 * \returns The character read in
 */
uchar input_process(uchar *buf, int *ptr) {
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	27 97       	sbiw	r28, 0x07	; 7
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	9c 83       	std	Y+4, r25	; 0x04
    2238:	8b 83       	std	Y+3, r24	; 0x03
    223a:	7e 83       	std	Y+6, r23	; 0x06
    223c:	6d 83       	std	Y+5, r22	; 0x05
	uchar ch, ret = 0;
    223e:	19 82       	std	Y+1, r1	; 0x01

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
    2240:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <uart_get_flow_control>
    2244:	81 30       	cpi	r24, 0x01	; 1
    2246:	b9 f4       	brne	.+46     	; 0x2276 <input_process+0x54>
    2248:	12 c0       	rjmp	.+36     	; 0x226e <input_process+0x4c>
		while (!ret) {
			// if nothing can be read in, return
			if (!input_char(&ch)) {
    224a:	ce 01       	movw	r24, r28
    224c:	02 96       	adiw	r24, 0x02	; 2
    224e:	0e 94 61 10 	call	0x20c2	; 0x20c2 <input_char>
    2252:	88 23       	and	r24, r24
    2254:	11 f4       	brne	.+4      	; 0x225a <input_process+0x38>
				return 0;
    2256:	1f 82       	std	Y+7, r1	; 0x07
    2258:	22 c0       	rjmp	.+68     	; 0x229e <input_process+0x7c>
			}
			ret = process_char(buf, ch, ptr);
    225a:	4a 81       	ldd	r20, Y+2	; 0x02
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	2d 81       	ldd	r18, Y+5	; 0x05
    2262:	3e 81       	ldd	r19, Y+6	; 0x06
    2264:	64 2f       	mov	r22, r20
    2266:	a9 01       	movw	r20, r18
    2268:	0e 94 a3 10 	call	0x2146	; 0x2146 <process_char>
    226c:	89 83       	std	Y+1, r24	; 0x01
 */
uchar input_process(uchar *buf, int *ptr) {
	uchar ch, ret = 0;

	if (uart_get_flow_control() == FLOWCONTROL_XONXOFF) {
		while (!ret) {
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	88 23       	and	r24, r24
    2272:	59 f3       	breq	.-42     	; 0x224a <input_process+0x28>
    2274:	12 c0       	rjmp	.+36     	; 0x229a <input_process+0x78>
			}
			ret = process_char(buf, ch, ptr);
		}
	} else {
		// if nothing can be read in, return
		if (!input_char(&ch)) {
    2276:	ce 01       	movw	r24, r28
    2278:	02 96       	adiw	r24, 0x02	; 2
    227a:	0e 94 61 10 	call	0x20c2	; 0x20c2 <input_char>
    227e:	88 23       	and	r24, r24
    2280:	11 f4       	brne	.+4      	; 0x2286 <input_process+0x64>
			return 0;
    2282:	1f 82       	std	Y+7, r1	; 0x07
    2284:	0c c0       	rjmp	.+24     	; 0x229e <input_process+0x7c>
		}
		ret = process_char(buf, ch, ptr);
    2286:	4a 81       	ldd	r20, Y+2	; 0x02
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	9c 81       	ldd	r25, Y+4	; 0x04
    228c:	2d 81       	ldd	r18, Y+5	; 0x05
    228e:	3e 81       	ldd	r19, Y+6	; 0x06
    2290:	64 2f       	mov	r22, r20
    2292:	a9 01       	movw	r20, r18
    2294:	0e 94 a3 10 	call	0x2146	; 0x2146 <process_char>
    2298:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	8f 83       	std	Y+7, r24	; 0x07
    229e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    22a0:	27 96       	adiw	r28, 0x07	; 7
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	cf 91       	pop	r28
    22ae:	df 91       	pop	r29
    22b0:	08 95       	ret

000022b2 <handle_internal_commands>:

/**
 * Handles builtin commands.
 */
void handle_internal_commands(uchar *cmd) {
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <handle_internal_commands+0x6>
    22b8:	00 d0       	rcall	.+0      	; 0x22ba <handle_internal_commands+0x8>
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <handle_internal_commands+0xa>
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
    22c0:	9c 83       	std	Y+4, r25	; 0x04
    22c2:	8b 83       	std	Y+3, r24	; 0x03
	uchar val, val1;

	switch (cmd[1]) {
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	9c 81       	ldd	r25, Y+4	; 0x04
    22c8:	fc 01       	movw	r30, r24
    22ca:	31 96       	adiw	r30, 0x01	; 1
    22cc:	80 81       	ld	r24, Z
    22ce:	28 2f       	mov	r18, r24
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	3e 83       	std	Y+6, r19	; 0x06
    22d4:	2d 83       	std	Y+5, r18	; 0x05
    22d6:	8d 81       	ldd	r24, Y+5	; 0x05
    22d8:	9e 81       	ldd	r25, Y+6	; 0x06
    22da:	88 36       	cpi	r24, 0x68	; 104
    22dc:	91 05       	cpc	r25, r1
    22de:	09 f4       	brne	.+2      	; 0x22e2 <handle_internal_commands+0x30>
    22e0:	4c c1       	rjmp	.+664    	; 0x257a <handle_internal_commands+0x2c8>
    22e2:	2d 81       	ldd	r18, Y+5	; 0x05
    22e4:	3e 81       	ldd	r19, Y+6	; 0x06
    22e6:	29 36       	cpi	r18, 0x69	; 105
    22e8:	31 05       	cpc	r19, r1
    22ea:	2c f5       	brge	.+74     	; 0x2336 <handle_internal_commands+0x84>
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05
    22ee:	9e 81       	ldd	r25, Y+6	; 0x06
    22f0:	81 36       	cpi	r24, 0x61	; 97
    22f2:	91 05       	cpc	r25, r1
    22f4:	09 f4       	brne	.+2      	; 0x22f8 <handle_internal_commands+0x46>
    22f6:	3e c0       	rjmp	.+124    	; 0x2374 <handle_internal_commands+0xc2>
    22f8:	2d 81       	ldd	r18, Y+5	; 0x05
    22fa:	3e 81       	ldd	r19, Y+6	; 0x06
    22fc:	22 36       	cpi	r18, 0x62	; 98
    22fe:	31 05       	cpc	r19, r1
    2300:	6c f4       	brge	.+26     	; 0x231c <handle_internal_commands+0x6a>
    2302:	8d 81       	ldd	r24, Y+5	; 0x05
    2304:	9e 81       	ldd	r25, Y+6	; 0x06
    2306:	8b 32       	cpi	r24, 0x2B	; 43
    2308:	91 05       	cpc	r25, r1
    230a:	09 f4       	brne	.+2      	; 0x230e <handle_internal_commands+0x5c>
    230c:	a1 c0       	rjmp	.+322    	; 0x2450 <handle_internal_commands+0x19e>
    230e:	2d 81       	ldd	r18, Y+5	; 0x05
    2310:	3e 81       	ldd	r19, Y+6	; 0x06
    2312:	2d 32       	cpi	r18, 0x2D	; 45
    2314:	31 05       	cpc	r19, r1
    2316:	09 f4       	brne	.+2      	; 0x231a <handle_internal_commands+0x68>
    2318:	d9 c0       	rjmp	.+434    	; 0x24cc <handle_internal_commands+0x21a>
    231a:	d1 c1       	rjmp	.+930    	; 0x26be <handle_internal_commands+0x40c>
    231c:	8d 81       	ldd	r24, Y+5	; 0x05
    231e:	9e 81       	ldd	r25, Y+6	; 0x06
    2320:	85 36       	cpi	r24, 0x65	; 101
    2322:	91 05       	cpc	r25, r1
    2324:	09 f4       	brne	.+2      	; 0x2328 <handle_internal_commands+0x76>
    2326:	b9 c1       	rjmp	.+882    	; 0x269a <handle_internal_commands+0x3e8>
    2328:	2d 81       	ldd	r18, Y+5	; 0x05
    232a:	3e 81       	ldd	r19, Y+6	; 0x06
    232c:	26 36       	cpi	r18, 0x66	; 102
    232e:	31 05       	cpc	r19, r1
    2330:	09 f4       	brne	.+2      	; 0x2334 <handle_internal_commands+0x82>
    2332:	5e c0       	rjmp	.+188    	; 0x23f0 <handle_internal_commands+0x13e>
    2334:	c4 c1       	rjmp	.+904    	; 0x26be <handle_internal_commands+0x40c>
    2336:	8d 81       	ldd	r24, Y+5	; 0x05
    2338:	9e 81       	ldd	r25, Y+6	; 0x06
    233a:	83 37       	cpi	r24, 0x73	; 115
    233c:	91 05       	cpc	r25, r1
    233e:	09 f4       	brne	.+2      	; 0x2342 <handle_internal_commands+0x90>
    2340:	5c c0       	rjmp	.+184    	; 0x23fa <handle_internal_commands+0x148>
    2342:	2d 81       	ldd	r18, Y+5	; 0x05
    2344:	3e 81       	ldd	r19, Y+6	; 0x06
    2346:	24 37       	cpi	r18, 0x74	; 116
    2348:	31 05       	cpc	r19, r1
    234a:	3c f4       	brge	.+14     	; 0x235a <handle_internal_commands+0xa8>
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	9e 81       	ldd	r25, Y+6	; 0x06
    2350:	89 36       	cpi	r24, 0x69	; 105
    2352:	91 05       	cpc	r25, r1
    2354:	09 f4       	brne	.+2      	; 0x2358 <handle_internal_commands+0xa6>
    2356:	14 c1       	rjmp	.+552    	; 0x2580 <handle_internal_commands+0x2ce>
    2358:	b2 c1       	rjmp	.+868    	; 0x26be <handle_internal_commands+0x40c>
    235a:	2d 81       	ldd	r18, Y+5	; 0x05
    235c:	3e 81       	ldd	r19, Y+6	; 0x06
    235e:	28 37       	cpi	r18, 0x78	; 120
    2360:	31 05       	cpc	r19, r1
    2362:	09 f4       	brne	.+2      	; 0x2366 <handle_internal_commands+0xb4>
    2364:	f1 c0       	rjmp	.+482    	; 0x2548 <handle_internal_commands+0x296>
    2366:	8d 81       	ldd	r24, Y+5	; 0x05
    2368:	9e 81       	ldd	r25, Y+6	; 0x06
    236a:	8a 37       	cpi	r24, 0x7A	; 122
    236c:	91 05       	cpc	r25, r1
    236e:	09 f4       	brne	.+2      	; 0x2372 <handle_internal_commands+0xc0>
    2370:	9b c1       	rjmp	.+822    	; 0x26a8 <handle_internal_commands+0x3f6>
    2372:	a5 c1       	rjmp	.+842    	; 0x26be <handle_internal_commands+0x40c>
	case 'a':
		/* set partner primary+secondary address */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	02 96       	adiw	r24, 0x02	; 2
    237a:	ae 01       	movw	r20, r28
    237c:	4e 5f       	subi	r20, 0xFE	; 254
    237e:	5f 4f       	sbci	r21, 0xFF	; 255
    2380:	9e 01       	movw	r18, r28
    2382:	2f 5f       	subi	r18, 0xFF	; 255
    2384:	3f 4f       	sbci	r19, 0xFF	; 255
    2386:	b9 01       	movw	r22, r18
    2388:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <stringToTwoUchars>
		sprintf(cmd, "Set partner address, primary: %u , secondary: %u\n\r",
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	28 2f       	mov	r18, r24
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	48 2f       	mov	r20, r24
    2396:	50 e0       	ldi	r21, 0x00	; 0
    2398:	8d b7       	in	r24, 0x3d	; 61
    239a:	9e b7       	in	r25, 0x3e	; 62
    239c:	08 97       	sbiw	r24, 0x08	; 8
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	9e bf       	out	0x3e, r25	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	8d bf       	out	0x3d, r24	; 61
    23a8:	ed b7       	in	r30, 0x3d	; 61
    23aa:	fe b7       	in	r31, 0x3e	; 62
    23ac:	31 96       	adiw	r30, 0x01	; 1
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	9c 81       	ldd	r25, Y+4	; 0x04
    23b2:	91 83       	std	Z+1, r25	; 0x01
    23b4:	80 83       	st	Z, r24
    23b6:	8d e2       	ldi	r24, 0x2D	; 45
    23b8:	93 e0       	ldi	r25, 0x03	; 3
    23ba:	93 83       	std	Z+3, r25	; 0x03
    23bc:	82 83       	std	Z+2, r24	; 0x02
    23be:	35 83       	std	Z+5, r19	; 0x05
    23c0:	24 83       	std	Z+4, r18	; 0x04
    23c2:	57 83       	std	Z+7, r21	; 0x07
    23c4:	46 83       	std	Z+6, r20	; 0x06
    23c6:	0e 94 18 02 	call	0x430	; 0x430 <sprintf>
    23ca:	2d b7       	in	r18, 0x3d	; 61
    23cc:	3e b7       	in	r19, 0x3e	; 62
    23ce:	28 5f       	subi	r18, 0xF8	; 248
    23d0:	3f 4f       	sbci	r19, 0xFF	; 255
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	3e bf       	out	0x3e, r19	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	2d bf       	out	0x3d, r18	; 61
				val, val1);
		uart_puts(cmd);
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	9c 81       	ldd	r25, Y+4	; 0x04
    23e0:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
		gpib_set_partner_address(val, val1);
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	9a 81       	ldd	r25, Y+2	; 0x02
    23e8:	69 2f       	mov	r22, r25
    23ea:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <gpib_set_partner_address>
    23ee:	6d c1       	rjmp	.+730    	; 0x26ca <handle_internal_commands+0x418>
		/* find devices */
		//stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
//		sprintf(cmd, "Set partner address, primary: %u , secondary: %u\n\r",
//				val, val1);
//		uart_puts(cmd);
		gpib_find_devices(10);
    23f0:	8a e0       	ldi	r24, 0x0A	; 10
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <gpib_find_devices>
    23f8:	68 c1       	rjmp	.+720    	; 0x26ca <handle_internal_commands+0x418>
		break;
	case 's':
		/* set partner secondary address */
		val = atoi((char*) (&(cmd[2])));
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	9c 81       	ldd	r25, Y+4	; 0x04
    23fe:	02 96       	adiw	r24, 0x02	; 2
    2400:	0e 94 a4 01 	call	0x348	; 0x348 <atoi>
    2404:	89 83       	std	Y+1, r24	; 0x01
		sprintf(cmd, "Set partner secondary address to %u\n\r", val);
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	28 2f       	mov	r18, r24
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	00 d0       	rcall	.+0      	; 0x240e <handle_internal_commands+0x15c>
    240e:	00 d0       	rcall	.+0      	; 0x2410 <handle_internal_commands+0x15e>
    2410:	00 d0       	rcall	.+0      	; 0x2412 <handle_internal_commands+0x160>
    2412:	ed b7       	in	r30, 0x3d	; 61
    2414:	fe b7       	in	r31, 0x3e	; 62
    2416:	31 96       	adiw	r30, 0x01	; 1
    2418:	8b 81       	ldd	r24, Y+3	; 0x03
    241a:	9c 81       	ldd	r25, Y+4	; 0x04
    241c:	91 83       	std	Z+1, r25	; 0x01
    241e:	80 83       	st	Z, r24
    2420:	80 e6       	ldi	r24, 0x60	; 96
    2422:	93 e0       	ldi	r25, 0x03	; 3
    2424:	93 83       	std	Z+3, r25	; 0x03
    2426:	82 83       	std	Z+2, r24	; 0x02
    2428:	35 83       	std	Z+5, r19	; 0x05
    242a:	24 83       	std	Z+4, r18	; 0x04
    242c:	0e 94 18 02 	call	0x430	; 0x430 <sprintf>
    2430:	8d b7       	in	r24, 0x3d	; 61
    2432:	9e b7       	in	r25, 0x3e	; 62
    2434:	06 96       	adiw	r24, 0x06	; 6
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	9e bf       	out	0x3e, r25	; 62
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	8d bf       	out	0x3d, r24	; 61
		uart_puts(cmd);
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	9c 81       	ldd	r25, Y+4	; 0x04
    2444:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
		gpib_set_partner_secondary(val);
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <gpib_set_partner_secondary>
    244e:	3d c1       	rjmp	.+634    	; 0x26ca <handle_internal_commands+0x418>
		break;
	case '+':
		/* add device */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	9c 81       	ldd	r25, Y+4	; 0x04
    2454:	02 96       	adiw	r24, 0x02	; 2
    2456:	ae 01       	movw	r20, r28
    2458:	4e 5f       	subi	r20, 0xFE	; 254
    245a:	5f 4f       	sbci	r21, 0xFF	; 255
    245c:	9e 01       	movw	r18, r28
    245e:	2f 5f       	subi	r18, 0xFF	; 255
    2460:	3f 4f       	sbci	r19, 0xFF	; 255
    2462:	b9 01       	movw	r22, r18
    2464:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <stringToTwoUchars>
		sprintf(cmd, "Add device, primary: %u , secondary: %u\n\r", val, val1);
    2468:	89 81       	ldd	r24, Y+1	; 0x01
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	8a 81       	ldd	r24, Y+2	; 0x02
    2470:	48 2f       	mov	r20, r24
    2472:	50 e0       	ldi	r21, 0x00	; 0
    2474:	8d b7       	in	r24, 0x3d	; 61
    2476:	9e b7       	in	r25, 0x3e	; 62
    2478:	08 97       	sbiw	r24, 0x08	; 8
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	f8 94       	cli
    247e:	9e bf       	out	0x3e, r25	; 62
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	8d bf       	out	0x3d, r24	; 61
    2484:	ed b7       	in	r30, 0x3d	; 61
    2486:	fe b7       	in	r31, 0x3e	; 62
    2488:	31 96       	adiw	r30, 0x01	; 1
    248a:	8b 81       	ldd	r24, Y+3	; 0x03
    248c:	9c 81       	ldd	r25, Y+4	; 0x04
    248e:	91 83       	std	Z+1, r25	; 0x01
    2490:	80 83       	st	Z, r24
    2492:	86 e8       	ldi	r24, 0x86	; 134
    2494:	93 e0       	ldi	r25, 0x03	; 3
    2496:	93 83       	std	Z+3, r25	; 0x03
    2498:	82 83       	std	Z+2, r24	; 0x02
    249a:	35 83       	std	Z+5, r19	; 0x05
    249c:	24 83       	std	Z+4, r18	; 0x04
    249e:	57 83       	std	Z+7, r21	; 0x07
    24a0:	46 83       	std	Z+6, r20	; 0x06
    24a2:	0e 94 18 02 	call	0x430	; 0x430 <sprintf>
    24a6:	2d b7       	in	r18, 0x3d	; 61
    24a8:	3e b7       	in	r19, 0x3e	; 62
    24aa:	28 5f       	subi	r18, 0xF8	; 248
    24ac:	3f 4f       	sbci	r19, 0xFF	; 255
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	3e bf       	out	0x3e, r19	; 62
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	2d bf       	out	0x3d, r18	; 61
		uart_puts(cmd);
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
		gpib_add_partner_address(val, val1);
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	9a 81       	ldd	r25, Y+2	; 0x02
    24c4:	69 2f       	mov	r22, r25
    24c6:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <gpib_add_partner_address>
    24ca:	ff c0       	rjmp	.+510    	; 0x26ca <handle_internal_commands+0x418>
		break;
	case '-':
		/* add device */
		stringToTwoUchars((char*) (&(cmd[2])), &val, &val1);
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9c 81       	ldd	r25, Y+4	; 0x04
    24d0:	02 96       	adiw	r24, 0x02	; 2
    24d2:	ae 01       	movw	r20, r28
    24d4:	4e 5f       	subi	r20, 0xFE	; 254
    24d6:	5f 4f       	sbci	r21, 0xFF	; 255
    24d8:	9e 01       	movw	r18, r28
    24da:	2f 5f       	subi	r18, 0xFF	; 255
    24dc:	3f 4f       	sbci	r19, 0xFF	; 255
    24de:	b9 01       	movw	r22, r18
    24e0:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <stringToTwoUchars>
		sprintf(cmd, "Remove device, primary: %u , secondary: %u\n\r", val,
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	28 2f       	mov	r18, r24
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	48 2f       	mov	r20, r24
    24ee:	50 e0       	ldi	r21, 0x00	; 0
    24f0:	8d b7       	in	r24, 0x3d	; 61
    24f2:	9e b7       	in	r25, 0x3e	; 62
    24f4:	08 97       	sbiw	r24, 0x08	; 8
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	9e bf       	out	0x3e, r25	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	8d bf       	out	0x3d, r24	; 61
    2500:	ed b7       	in	r30, 0x3d	; 61
    2502:	fe b7       	in	r31, 0x3e	; 62
    2504:	31 96       	adiw	r30, 0x01	; 1
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	9c 81       	ldd	r25, Y+4	; 0x04
    250a:	91 83       	std	Z+1, r25	; 0x01
    250c:	80 83       	st	Z, r24
    250e:	80 eb       	ldi	r24, 0xB0	; 176
    2510:	93 e0       	ldi	r25, 0x03	; 3
    2512:	93 83       	std	Z+3, r25	; 0x03
    2514:	82 83       	std	Z+2, r24	; 0x02
    2516:	35 83       	std	Z+5, r19	; 0x05
    2518:	24 83       	std	Z+4, r18	; 0x04
    251a:	57 83       	std	Z+7, r21	; 0x07
    251c:	46 83       	std	Z+6, r20	; 0x06
    251e:	0e 94 18 02 	call	0x430	; 0x430 <sprintf>
    2522:	2d b7       	in	r18, 0x3d	; 61
    2524:	3e b7       	in	r19, 0x3e	; 62
    2526:	28 5f       	subi	r18, 0xF8	; 248
    2528:	3f 4f       	sbci	r19, 0xFF	; 255
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	3e bf       	out	0x3e, r19	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	2d bf       	out	0x3d, r18	; 61
				val1);
		uart_puts(cmd);
    2534:	8b 81       	ldd	r24, Y+3	; 0x03
    2536:	9c 81       	ldd	r25, Y+4	; 0x04
    2538:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
		gpib_remove_partner_address(val, val1);
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	9a 81       	ldd	r25, Y+2	; 0x02
    2540:	69 2f       	mov	r22, r25
    2542:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <gpib_remove_partner_address>
    2546:	c1 c0       	rjmp	.+386    	; 0x26ca <handle_internal_commands+0x418>
		break;
	case 'x':
		/* Xon/Xoff flow control */
		if (!xonXoffMode) {
    2548:	80 91 ce 04 	lds	r24, 0x04CE
    254c:	88 23       	and	r24, r24
    254e:	59 f4       	brne	.+22     	; 0x2566 <handle_internal_commands+0x2b4>
			xonXoffMode = 1;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	80 93 ce 04 	sts	0x04CE, r24
			uart_set_flow_control(FLOWCONTROL_XONXOFF);
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol on\n\r");
    255c:	82 ee       	ldi	r24, 0xE2	; 226
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
    2564:	b2 c0       	rjmp	.+356    	; 0x26ca <handle_internal_commands+0x418>
		} else {
			xonXoffMode = 0;
    2566:	10 92 ce 04 	sts	0x04CE, r1
			uart_set_flow_control(FLOWCONTROL_NONE);
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <uart_set_flow_control>
			uart_puts_P("xon/xoff flowcontrol off\n\r");
    2570:	87 ec       	ldi	r24, 0xC7	; 199
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
    2578:	a8 c0       	rjmp	.+336    	; 0x26ca <handle_internal_commands+0x418>
		}
		break;
	case 'h':
		/* print some usage infos */
		printHelp();
    257a:	0e 94 47 14 	call	0x288e	; 0x288e <printHelp>
    257e:	a5 c0       	rjmp	.+330    	; 0x26ca <handle_internal_commands+0x418>
		break;
	case 'i':
		gpib_info();
    2580:	0e 94 c1 0a 	call	0x1582	; 0x1582 <gpib_info>
		sprintf(cmd, "Xon/Xoff flow control: %u\n\r", xonXoffMode);
    2584:	80 91 ce 04 	lds	r24, 0x04CE
    2588:	28 2f       	mov	r18, r24
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	00 d0       	rcall	.+0      	; 0x258e <handle_internal_commands+0x2dc>
    258e:	00 d0       	rcall	.+0      	; 0x2590 <handle_internal_commands+0x2de>
    2590:	00 d0       	rcall	.+0      	; 0x2592 <handle_internal_commands+0x2e0>
    2592:	ed b7       	in	r30, 0x3d	; 61
    2594:	fe b7       	in	r31, 0x3e	; 62
    2596:	31 96       	adiw	r30, 0x01	; 1
    2598:	8b 81       	ldd	r24, Y+3	; 0x03
    259a:	9c 81       	ldd	r25, Y+4	; 0x04
    259c:	91 83       	std	Z+1, r25	; 0x01
    259e:	80 83       	st	Z, r24
    25a0:	8d ed       	ldi	r24, 0xDD	; 221
    25a2:	93 e0       	ldi	r25, 0x03	; 3
    25a4:	93 83       	std	Z+3, r25	; 0x03
    25a6:	82 83       	std	Z+2, r24	; 0x02
    25a8:	35 83       	std	Z+5, r19	; 0x05
    25aa:	24 83       	std	Z+4, r18	; 0x04
    25ac:	0e 94 18 02 	call	0x430	; 0x430 <sprintf>
    25b0:	8d b7       	in	r24, 0x3d	; 61
    25b2:	9e b7       	in	r25, 0x3e	; 62
    25b4:	06 96       	adiw	r24, 0x06	; 6
    25b6:	0f b6       	in	r0, 0x3f	; 63
    25b8:	f8 94       	cli
    25ba:	9e bf       	out	0x3e, r25	; 62
    25bc:	0f be       	out	0x3f, r0	; 63
    25be:	8d bf       	out	0x3d, r24	; 61
		uart_puts(cmd);
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	9c 81       	ldd	r25, Y+4	; 0x04
    25c4:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
		sprintf(cmd, "RS232 echo: %u\n\r", rs232_remote_echo);
    25c8:	80 91 cd 04 	lds	r24, 0x04CD
    25cc:	28 2f       	mov	r18, r24
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <handle_internal_commands+0x320>
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <handle_internal_commands+0x322>
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <handle_internal_commands+0x324>
    25d6:	ed b7       	in	r30, 0x3d	; 61
    25d8:	fe b7       	in	r31, 0x3e	; 62
    25da:	31 96       	adiw	r30, 0x01	; 1
    25dc:	8b 81       	ldd	r24, Y+3	; 0x03
    25de:	9c 81       	ldd	r25, Y+4	; 0x04
    25e0:	91 83       	std	Z+1, r25	; 0x01
    25e2:	80 83       	st	Z, r24
    25e4:	89 ef       	ldi	r24, 0xF9	; 249
    25e6:	93 e0       	ldi	r25, 0x03	; 3
    25e8:	93 83       	std	Z+3, r25	; 0x03
    25ea:	82 83       	std	Z+2, r24	; 0x02
    25ec:	35 83       	std	Z+5, r19	; 0x05
    25ee:	24 83       	std	Z+4, r18	; 0x04
    25f0:	0e 94 18 02 	call	0x430	; 0x430 <sprintf>
    25f4:	2d b7       	in	r18, 0x3d	; 61
    25f6:	3e b7       	in	r19, 0x3e	; 62
    25f8:	2a 5f       	subi	r18, 0xFA	; 250
    25fa:	3f 4f       	sbci	r19, 0xFF	; 255
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	3e bf       	out	0x3e, r19	; 62
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	2d bf       	out	0x3d, r18	; 61
		uart_puts(cmd);
    2606:	8b 81       	ldd	r24, Y+3	; 0x03
    2608:	9c 81       	ldd	r25, Y+4	; 0x04
    260a:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
		sprintf(cmd, "SRQs enabled: %u\n\r", srq_enabled);
    260e:	80 91 cf 04 	lds	r24, 0x04CF
    2612:	28 2f       	mov	r18, r24
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	00 d0       	rcall	.+0      	; 0x2618 <handle_internal_commands+0x366>
    2618:	00 d0       	rcall	.+0      	; 0x261a <handle_internal_commands+0x368>
    261a:	00 d0       	rcall	.+0      	; 0x261c <handle_internal_commands+0x36a>
    261c:	ed b7       	in	r30, 0x3d	; 61
    261e:	fe b7       	in	r31, 0x3e	; 62
    2620:	31 96       	adiw	r30, 0x01	; 1
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	9c 81       	ldd	r25, Y+4	; 0x04
    2626:	91 83       	std	Z+1, r25	; 0x01
    2628:	80 83       	st	Z, r24
    262a:	8a e0       	ldi	r24, 0x0A	; 10
    262c:	94 e0       	ldi	r25, 0x04	; 4
    262e:	93 83       	std	Z+3, r25	; 0x03
    2630:	82 83       	std	Z+2, r24	; 0x02
    2632:	35 83       	std	Z+5, r19	; 0x05
    2634:	24 83       	std	Z+4, r18	; 0x04
    2636:	0e 94 18 02 	call	0x430	; 0x430 <sprintf>
    263a:	8d b7       	in	r24, 0x3d	; 61
    263c:	9e b7       	in	r25, 0x3e	; 62
    263e:	06 96       	adiw	r24, 0x06	; 6
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	9e bf       	out	0x3e, r25	; 62
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	8d bf       	out	0x3d, r24	; 61
		uart_puts(cmd);
    264a:	8b 81       	ldd	r24, Y+3	; 0x03
    264c:	9c 81       	ldd	r25, Y+4	; 0x04
    264e:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
		sprintf(cmd, "Linebreak value: %u\n\r", linebreak);
    2652:	80 91 d0 04 	lds	r24, 0x04D0
    2656:	28 2f       	mov	r18, r24
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	00 d0       	rcall	.+0      	; 0x265c <handle_internal_commands+0x3aa>
    265c:	00 d0       	rcall	.+0      	; 0x265e <handle_internal_commands+0x3ac>
    265e:	00 d0       	rcall	.+0      	; 0x2660 <handle_internal_commands+0x3ae>
    2660:	ed b7       	in	r30, 0x3d	; 61
    2662:	fe b7       	in	r31, 0x3e	; 62
    2664:	31 96       	adiw	r30, 0x01	; 1
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	9c 81       	ldd	r25, Y+4	; 0x04
    266a:	91 83       	std	Z+1, r25	; 0x01
    266c:	80 83       	st	Z, r24
    266e:	8d e1       	ldi	r24, 0x1D	; 29
    2670:	94 e0       	ldi	r25, 0x04	; 4
    2672:	93 83       	std	Z+3, r25	; 0x03
    2674:	82 83       	std	Z+2, r24	; 0x02
    2676:	35 83       	std	Z+5, r19	; 0x05
    2678:	24 83       	std	Z+4, r18	; 0x04
    267a:	0e 94 18 02 	call	0x430	; 0x430 <sprintf>
    267e:	2d b7       	in	r18, 0x3d	; 61
    2680:	3e b7       	in	r19, 0x3e	; 62
    2682:	2a 5f       	subi	r18, 0xFA	; 250
    2684:	3f 4f       	sbci	r19, 0xFF	; 255
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	3e bf       	out	0x3e, r19	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	2d bf       	out	0x3d, r18	; 61
		uart_puts(cmd);
    2690:	8b 81       	ldd	r24, Y+3	; 0x03
    2692:	9c 81       	ldd	r25, Y+4	; 0x04
    2694:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
    2698:	18 c0       	rjmp	.+48     	; 0x26ca <handle_internal_commands+0x418>
		break;
	case 'e':
		uart_puts_P("Check errors\n\r");
    269a:	88 eb       	ldi	r24, 0xB8	; 184
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
		check_errors();
    26a2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <check_errors>
    26a6:	11 c0       	rjmp	.+34     	; 0x26ca <handle_internal_commands+0x418>
		break;
#ifdef ARB_TEST
	case 'z':
		uart_puts("arb\n\r");
    26a8:	83 e3       	ldi	r24, 0x33	; 51
    26aa:	94 e0       	ldi	r25, 0x04	; 4
    26ac:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
		arb();
    26b0:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <arb>
		uart_puts("arb done\n\r");
    26b4:	89 e3       	ldi	r24, 0x39	; 57
    26b6:	94 e0       	ldi	r25, 0x04	; 4
    26b8:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
    26bc:	06 c0       	rjmp	.+12     	; 0x26ca <handle_internal_commands+0x418>
		break;
#endif
	default:
		uart_puts_P("unknown command\n\r");
    26be:	86 ea       	ldi	r24, 0xA6	; 166
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
		printHelp();
    26c6:	0e 94 47 14 	call	0x288e	; 0x288e <printHelp>
		break;
	}
}
    26ca:	26 96       	adiw	r28, 0x06	; 6
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	cd bf       	out	0x3d, r28	; 61
    26d6:	cf 91       	pop	r28
    26d8:	df 91       	pop	r29
    26da:	08 95       	ret

000026dc <receiveAnswer>:

/**
 * Receives answer after command was sent.
 */
void receiveAnswer() {
    26dc:	df 93       	push	r29
    26de:	cf 93       	push	r28
    26e0:	00 d0       	rcall	.+0      	; 0x26e2 <receiveAnswer+0x6>
    26e2:	00 d0       	rcall	.+0      	; 0x26e4 <receiveAnswer+0x8>
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
	uchar b, e;
	uchar colptr = 0;
    26e8:	19 82       	std	Y+1, r1	; 0x01

	gpib_prepare_read();
    26ea:	0e 94 a4 05 	call	0xb48	; 0xb48 <gpib_prepare_read>
	// read the answer until EOI is detected (then e becomes true)
	do {
		// gpib bus receive
		e = gpib_receive(&b);
    26ee:	ce 01       	movw	r24, r28
    26f0:	03 96       	adiw	r24, 0x03	; 3
    26f2:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <gpib_receive>
    26f6:	8a 83       	std	Y+2, r24	; 0x02
		// write out character
		uart_putc(b);
    26f8:	8b 81       	ldd	r24, Y+3	; 0x03
    26fa:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <uart_putc>
		if (linebreak && (colptr++ == linebreak)) {
    26fe:	80 91 d0 04 	lds	r24, 0x04D0
    2702:	88 23       	and	r24, r24
    2704:	99 f0       	breq	.+38     	; 0x272c <receiveAnswer+0x50>
    2706:	90 91 d0 04 	lds	r25, 0x04D0
    270a:	1c 82       	std	Y+4, r1	; 0x04
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	89 17       	cp	r24, r25
    2710:	11 f4       	brne	.+4      	; 0x2716 <receiveAnswer+0x3a>
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	8c 83       	std	Y+4, r24	; 0x04
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	8f 5f       	subi	r24, 0xFF	; 255
    271a:	89 83       	std	Y+1, r24	; 0x01
    271c:	8c 81       	ldd	r24, Y+4	; 0x04
    271e:	88 23       	and	r24, r24
    2720:	29 f0       	breq	.+10     	; 0x272c <receiveAnswer+0x50>
			uart_puts_P("\n\r");
    2722:	8c ef       	ldi	r24, 0xFC	; 252
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
			colptr = 0;
    272a:	19 82       	std	Y+1, r1	; 0x01
		}
		//sprintf((char*)buf,"%02x - %c\n\r", b, b);
		//uart_puts((char*)buf);
	} while (!e);
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	88 23       	and	r24, r24
    2730:	f1 f2       	breq	.-68     	; 0x26ee <receiveAnswer+0x12>
}
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	08 95       	ret

00002740 <srq_occured>:

/**
 * Check if a SRQ occured
 */
uchar srq_occured(int* old_time) {
    2740:	df 93       	push	r29
    2742:	cf 93       	push	r28
    2744:	00 d0       	rcall	.+0      	; 0x2746 <srq_occured+0x6>
    2746:	0f 92       	push	r0
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	9b 83       	std	Y+3, r25	; 0x03
    274e:	8a 83       	std	Y+2, r24	; 0x02
	uchar srq = 0;
    2750:	19 82       	std	Y+1, r1	; 0x01
	if (*old_time == 0) {
    2752:	ea 81       	ldd	r30, Y+2	; 0x02
    2754:	fb 81       	ldd	r31, Y+3	; 0x03
    2756:	80 81       	ld	r24, Z
    2758:	91 81       	ldd	r25, Z+1	; 0x01
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	49 f4       	brne	.+18     	; 0x2770 <srq_occured+0x30>
		// old_time value initialization on first call with value s
		*old_time = s;
    275e:	80 91 41 06 	lds	r24, 0x0641
    2762:	88 2f       	mov	r24, r24
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	ea 81       	ldd	r30, Y+2	; 0x02
    2768:	fb 81       	ldd	r31, Y+3	; 0x03
    276a:	91 83       	std	Z+1, r25	; 0x01
    276c:	80 83       	st	Z, r24
    276e:	1e c0       	rjmp	.+60     	; 0x27ac <srq_occured+0x6c>
	} else {
		if (s > *old_time) {
    2770:	80 91 41 06 	lds	r24, 0x0641
    2774:	28 2f       	mov	r18, r24
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	ea 81       	ldd	r30, Y+2	; 0x02
    277a:	fb 81       	ldd	r31, Y+3	; 0x03
    277c:	80 81       	ld	r24, Z
    277e:	91 81       	ldd	r25, Z+1	; 0x01
    2780:	82 17       	cp	r24, r18
    2782:	93 07       	cpc	r25, r19
    2784:	9c f4       	brge	.+38     	; 0x27ac <srq_occured+0x6c>
			// some time has passed - check if srq was set
			srq = bit_is_clear(PIND, G_SRQ);
    2786:	e0 e3       	ldi	r30, 0x30	; 48
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	88 2f       	mov	r24, r24
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	80 74       	andi	r24, 0x40	; 64
    2792:	90 70       	andi	r25, 0x00	; 0
    2794:	19 82       	std	Y+1, r1	; 0x01
    2796:	00 97       	sbiw	r24, 0x00	; 0
    2798:	11 f4       	brne	.+4      	; 0x279e <srq_occured+0x5e>
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	89 83       	std	Y+1, r24	; 0x01
			if (srq)
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	88 23       	and	r24, r24
    27a2:	21 f0       	breq	.+8      	; 0x27ac <srq_occured+0x6c>
				uart_puts_P("\n\rSRQ detected.\n\r");
    27a4:	8f ef       	ldi	r24, 0xFF	; 255
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
		}
	}
	return srq;
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	08 95       	ret

000027ba <handle_srq>:

/**
 * Handles SRQs by doing serial poll
 *
 */
uchar handle_srq(uchar *buf, int *buf_ptr) {
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	28 97       	sbiw	r28, 0x08	; 8
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	9d 83       	std	Y+5, r25	; 0x05
    27d0:	8c 83       	std	Y+4, r24	; 0x04
    27d2:	7f 83       	std	Y+7, r23	; 0x07
    27d4:	6e 83       	std	Y+6, r22	; 0x06
	uchar command_ready = 0;
    27d6:	19 82       	std	Y+1, r1	; 0x01
	uint8_t primary, secondary;

	if (!gpib_serial_poll(&primary, &secondary)) {
    27d8:	ce 01       	movw	r24, r28
    27da:	02 96       	adiw	r24, 0x02	; 2
    27dc:	9e 01       	movw	r18, r28
    27de:	2d 5f       	subi	r18, 0xFD	; 253
    27e0:	3f 4f       	sbci	r19, 0xFF	; 255
    27e2:	b9 01       	movw	r22, r18
    27e4:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <gpib_serial_poll>
    27e8:	88 23       	and	r24, r24
    27ea:	69 f4       	brne	.+26     	; 0x2806 <handle_srq+0x4c>
		uart_puts_P(
    27ec:	8c e2       	ldi	r24, 0x2C	; 44
    27ee:	91 e0       	ldi	r25, 0x01	; 1
    27f0:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
				"\n\rSRQ emitter is not in list of known devices. SRQ Ignored.\n\r");
		uart_puts_P("\n\rSRQs are disabled now.\n\r");
    27f4:	81 e1       	ldi	r24, 0x11	; 17
    27f6:	91 e0       	ldi	r25, 0x01	; 1
    27f8:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
		srq_enabled = 0;
    27fc:	10 92 cf 04 	sts	0x04CF, r1
		return command_ready;
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	88 87       	std	Y+8, r24	; 0x08
    2804:	3a c0       	rjmp	.+116    	; 0x287a <handle_srq+0xc0>
	}
	gpib_set_partner_address(primary, secondary);
    2806:	8a 81       	ldd	r24, Y+2	; 0x02
    2808:	9b 81       	ldd	r25, Y+3	; 0x03
    280a:	69 2f       	mov	r22, r25
    280c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <gpib_set_partner_address>

	if (gpib_get_flavour() == FLAVOUR_TEK) {
    2810:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <gpib_get_flavour>
    2814:	81 30       	cpi	r24, 0x01	; 1
    2816:	79 f5       	brne	.+94     	; 0x2876 <handle_srq+0xbc>
		// Tek: check status for reason
		buf[0] = 'E';
    2818:	ec 81       	ldd	r30, Y+4	; 0x04
    281a:	fd 81       	ldd	r31, Y+5	; 0x05
    281c:	85 e4       	ldi	r24, 0x45	; 69
    281e:	80 83       	st	Z, r24
		buf[1] = 'V';
    2820:	8c 81       	ldd	r24, Y+4	; 0x04
    2822:	9d 81       	ldd	r25, Y+5	; 0x05
    2824:	fc 01       	movw	r30, r24
    2826:	31 96       	adiw	r30, 0x01	; 1
    2828:	86 e5       	ldi	r24, 0x56	; 86
    282a:	80 83       	st	Z, r24
		buf[2] = 'E';
    282c:	8c 81       	ldd	r24, Y+4	; 0x04
    282e:	9d 81       	ldd	r25, Y+5	; 0x05
    2830:	fc 01       	movw	r30, r24
    2832:	32 96       	adiw	r30, 0x02	; 2
    2834:	85 e4       	ldi	r24, 0x45	; 69
    2836:	80 83       	st	Z, r24
		buf[3] = 'N';
    2838:	8c 81       	ldd	r24, Y+4	; 0x04
    283a:	9d 81       	ldd	r25, Y+5	; 0x05
    283c:	fc 01       	movw	r30, r24
    283e:	33 96       	adiw	r30, 0x03	; 3
    2840:	8e e4       	ldi	r24, 0x4E	; 78
    2842:	80 83       	st	Z, r24
		buf[4] = 'T';
    2844:	8c 81       	ldd	r24, Y+4	; 0x04
    2846:	9d 81       	ldd	r25, Y+5	; 0x05
    2848:	fc 01       	movw	r30, r24
    284a:	34 96       	adiw	r30, 0x04	; 4
    284c:	84 e5       	ldi	r24, 0x54	; 84
    284e:	80 83       	st	Z, r24
		buf[5] = '?';
    2850:	8c 81       	ldd	r24, Y+4	; 0x04
    2852:	9d 81       	ldd	r25, Y+5	; 0x05
    2854:	fc 01       	movw	r30, r24
    2856:	35 96       	adiw	r30, 0x05	; 5
    2858:	8f e3       	ldi	r24, 0x3F	; 63
    285a:	80 83       	st	Z, r24
		buf[6] = '\0';
    285c:	8c 81       	ldd	r24, Y+4	; 0x04
    285e:	9d 81       	ldd	r25, Y+5	; 0x05
    2860:	fc 01       	movw	r30, r24
    2862:	36 96       	adiw	r30, 0x06	; 6
    2864:	10 82       	st	Z, r1
		*buf_ptr = 6;
    2866:	ee 81       	ldd	r30, Y+6	; 0x06
    2868:	ff 81       	ldd	r31, Y+7	; 0x07
    286a:	86 e0       	ldi	r24, 0x06	; 6
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	91 83       	std	Z+1, r25	; 0x01
    2870:	80 83       	st	Z, r24
		command_ready = 1;
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	89 83       	std	Y+1, r24	; 0x01
	}
	return command_ready;
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	88 87       	std	Y+8, r24	; 0x08
    287a:	88 85       	ldd	r24, Y+8	; 0x08
}
    287c:	28 96       	adiw	r28, 0x08	; 8
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	f8 94       	cli
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	0f be       	out	0x3f, r0	; 63
    2886:	cd bf       	out	0x3d, r28	; 61
    2888:	cf 91       	pop	r28
    288a:	df 91       	pop	r29
    288c:	08 95       	ret

0000288e <printHelp>:

void printHelp() {
    288e:	df 93       	push	r29
    2890:	cf 93       	push	r28
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
    2896:	c0 55       	subi	r28, 0x50	; 80
    2898:	d0 40       	sbci	r29, 0x00	; 0
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	f8 94       	cli
    289e:	de bf       	out	0x3e, r29	; 62
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	cd bf       	out	0x3d, r28	; 61
	char buf[COMMAND_INPUT_BUFFER_SIZE];
	sprintf(buf, "\n\rGPIB Controller (Rev.%s) (c) spurtikus.de 2008-2015\n\r",
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <printHelp+0x18>
    28a6:	00 d0       	rcall	.+0      	; 0x28a8 <printHelp+0x1a>
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <printHelp+0x1c>
    28aa:	ed b7       	in	r30, 0x3d	; 61
    28ac:	fe b7       	in	r31, 0x3e	; 62
    28ae:	31 96       	adiw	r30, 0x01	; 1
    28b0:	ce 01       	movw	r24, r28
    28b2:	01 96       	adiw	r24, 0x01	; 1
    28b4:	91 83       	std	Z+1, r25	; 0x01
    28b6:	80 83       	st	Z, r24
    28b8:	84 e4       	ldi	r24, 0x44	; 68
    28ba:	94 e0       	ldi	r25, 0x04	; 4
    28bc:	93 83       	std	Z+3, r25	; 0x03
    28be:	82 83       	std	Z+2, r24	; 0x02
    28c0:	8c e7       	ldi	r24, 0x7C	; 124
    28c2:	94 e0       	ldi	r25, 0x04	; 4
    28c4:	95 83       	std	Z+5, r25	; 0x05
    28c6:	84 83       	std	Z+4, r24	; 0x04
    28c8:	0e 94 18 02 	call	0x430	; 0x430 <sprintf>
    28cc:	8d b7       	in	r24, 0x3d	; 61
    28ce:	9e b7       	in	r25, 0x3e	; 62
    28d0:	06 96       	adiw	r24, 0x06	; 6
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	9e bf       	out	0x3e, r25	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	8d bf       	out	0x3d, r24	; 61
	REVISION);
	uart_puts(buf);
    28dc:	ce 01       	movw	r24, r28
    28de:	01 96       	adiw	r24, 0x01	; 1
    28e0:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
	uart_puts_P("Internal commands:\n\r");
    28e4:	89 eb       	ldi	r24, 0xB9	; 185
    28e6:	92 e0       	ldi	r25, 0x02	; 2
    28e8:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
	uart_puts(
    28ec:	80 e8       	ldi	r24, 0x80	; 128
    28ee:	94 e0       	ldi	r25, 0x04	; 4
    28f0:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
			".a <primary> [<secondary>] - set prim./second. address of remote device\n\r");
	uart_puts_P(".s <secondary> - set secondary address of remote device\n\r");
    28f4:	8f e7       	ldi	r24, 0x7F	; 127
    28f6:	92 e0       	ldi	r25, 0x02	; 2
    28f8:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
	uart_puts_P(
    28fc:	8f e3       	ldi	r24, 0x3F	; 63
    28fe:	92 e0       	ldi	r25, 0x02	; 2
    2900:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
			".+ <n> - add partner device address to list of known devices.\n\r");
	uart_puts_P(
    2904:	8a ef       	ldi	r24, 0xFA	; 250
    2906:	91 e0       	ldi	r25, 0x01	; 1
    2908:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
			".- <n> - remove partner device address from list of known devices.\n\r");
	uart_puts_P(".x - toggle Xon/Xoff flow control.\n\r");
    290c:	85 ed       	ldi	r24, 0xD5	; 213
    290e:	91 e0       	ldi	r25, 0x01	; 1
    2910:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
	uart_puts_P(".h - print help.\n\r");
    2914:	82 ec       	ldi	r24, 0xC2	; 194
    2916:	91 e0       	ldi	r25, 0x01	; 1
    2918:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
	uart_puts_P(".e - dump error queue.\n\r");
    291c:	89 ea       	ldi	r24, 0xA9	; 169
    291e:	91 e0       	ldi	r25, 0x01	; 1
    2920:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
	uart_puts_P(".f - find partners.\n\r");
    2924:	83 e9       	ldi	r24, 0x93	; 147
    2926:	91 e0       	ldi	r25, 0x01	; 1
    2928:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
	uart_puts_P(".i - dump info about controller state.\n\r");
    292c:	8a e6       	ldi	r24, 0x6A	; 106
    292e:	91 e0       	ldi	r25, 0x01	; 1
    2930:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
}
    2934:	c0 5b       	subi	r28, 0xB0	; 176
    2936:	df 4f       	sbci	r29, 0xFF	; 255
    2938:	0f b6       	in	r0, 0x3f	; 63
    293a:	f8 94       	cli
    293c:	de bf       	out	0x3e, r29	; 62
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	cd bf       	out	0x3d, r28	; 61
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	08 95       	ret

00002948 <state_machine>:
 * 2. send user entered command, if available, to listeners (act as talker, set devices to listeners)
 * 3. if command was a query, read the answer from device (become listener and set device to talker)
 * 4. check if SRQ occured and handle that
 *
 */
void state_machine() {
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	c9 55       	subi	r28, 0x59	; 89
    2952:	d0 40       	sbci	r29, 0x00	; 0
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	cd bf       	out	0x3d, r28	; 61
	int old_time = 0;
    295e:	1e 82       	std	Y+6, r1	; 0x06
    2960:	1d 82       	std	Y+5, r1	; 0x05
	uchar is_query = 0;
    2962:	1c 82       	std	Y+4, r1	; 0x04
	uchar do_prompt = 1;
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	8b 83       	std	Y+3, r24	; 0x03
	uchar ch;

	/** buffers used for commands and output strings */
	uchar buf[COMMAND_INPUT_BUFFER_SIZE];
	/** pointer in buffer */
	int buf_ptr = 0;
    2968:	fe 01       	movw	r30, r28
    296a:	e8 5a       	subi	r30, 0xA8	; 168
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	11 82       	std	Z+1, r1	; 0x01
    2970:	10 82       	st	Z, r1

	uchar state = S_INITIAL;
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	8a 83       	std	Y+2, r24	; 0x02
	for (;;) {
		if (state == S_INITIAL) {
    2976:	8a 81       	ldd	r24, Y+2	; 0x02
    2978:	81 30       	cpi	r24, 0x01	; 1
    297a:	49 f4       	brne	.+18     	; 0x298e <state_machine+0x46>
			if (do_prompt) {
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	88 23       	and	r24, r24
    2980:	31 f0       	breq	.+12     	; 0x298e <state_machine+0x46>
				uart_puts("> ");
    2982:	8a ec       	ldi	r24, 0xCA	; 202
    2984:	94 e0       	ldi	r25, 0x04	; 4
    2986:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <uart_puts>
				do_prompt = 0;
    298a:	1b 82       	std	Y+3, r1	; 0x03
				is_query = 0;
    298c:	1c 82       	std	Y+4, r1	; 0x04
			}
		}

		if (!input_char(&ch))
    298e:	ce 01       	movw	r24, r28
    2990:	07 96       	adiw	r24, 0x07	; 7
    2992:	0e 94 61 10 	call	0x20c2	; 0x20c2 <input_char>
    2996:	88 23       	and	r24, r24
    2998:	71 f3       	breq	.-36     	; 0x2976 <state_machine+0x2e>
			continue;

		// byte received. Decide with state what to do.

		if (state == S_INITIAL) {
    299a:	8a 81       	ldd	r24, Y+2	; 0x02
    299c:	81 30       	cpi	r24, 0x01	; 1
    299e:	41 f4       	brne	.+16     	; 0x29b0 <state_machine+0x68>
			// internal or external command?
			if (ch == '.') {
    29a0:	8f 81       	ldd	r24, Y+7	; 0x07
    29a2:	8e 32       	cpi	r24, 0x2E	; 46
    29a4:	19 f4       	brne	.+6      	; 0x29ac <state_machine+0x64>
				// internal command
				state = S_FIRST_BYTE_INT;
    29a6:	82 e0       	ldi	r24, 0x02	; 2
    29a8:	8a 83       	std	Y+2, r24	; 0x02
    29aa:	02 c0       	rjmp	.+4      	; 0x29b0 <state_machine+0x68>
			} else {
				// gpib command
				state = S_FIRST_BYTE_GPIB;
    29ac:	83 e0       	ldi	r24, 0x03	; 3
    29ae:	8a 83       	std	Y+2, r24	; 0x02

			}
		}

		if (state == S_FIRST_BYTE_INT) {
    29b0:	8a 81       	ldd	r24, Y+2	; 0x02
    29b2:	82 30       	cpi	r24, 0x02	; 2
    29b4:	59 f5       	brne	.+86     	; 0x2a0c <state_machine+0xc4>
			buf[0] = ch;
    29b6:	8f 81       	ldd	r24, Y+7	; 0x07
    29b8:	88 87       	std	Y+8, r24	; 0x08
			buf_ptr = 1;
    29ba:	fe 01       	movw	r30, r28
    29bc:	e8 5a       	subi	r30, 0xA8	; 168
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	91 83       	std	Z+1, r25	; 0x01
    29c6:	80 83       	st	Z, r24
			// send received character back depending on global flag
			if (rs232_remote_echo) {
    29c8:	80 91 cd 04 	lds	r24, 0x04CD
    29cc:	88 23       	and	r24, r24
    29ce:	19 f0       	breq	.+6      	; 0x29d6 <state_machine+0x8e>
				uart_putc((unsigned char) ch);
    29d0:	8f 81       	ldd	r24, Y+7	; 0x07
    29d2:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <uart_putc>
			}
			// collect line until CR
			while (!input_process(buf, &buf_ptr))
    29d6:	ce 01       	movw	r24, r28
    29d8:	08 96       	adiw	r24, 0x08	; 8
    29da:	9e 01       	movw	r18, r28
    29dc:	28 5a       	subi	r18, 0xA8	; 168
    29de:	3f 4f       	sbci	r19, 0xFF	; 255
    29e0:	b9 01       	movw	r22, r18
    29e2:	0e 94 11 11 	call	0x2222	; 0x2222 <input_process>
    29e6:	88 23       	and	r24, r24
    29e8:	b1 f3       	breq	.-20     	; 0x29d6 <state_machine+0x8e>
				;
			uart_puts_P("\n\r");
    29ea:	87 e0       	ldi	r24, 0x07	; 7
    29ec:	93 e0       	ldi	r25, 0x03	; 3
    29ee:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
			// execute internal command
			handle_internal_commands(buf);
    29f2:	ce 01       	movw	r24, r28
    29f4:	08 96       	adiw	r24, 0x08	; 8
    29f6:	0e 94 59 11 	call	0x22b2	; 0x22b2 <handle_internal_commands>
			// reset local vars
			state = S_INITIAL;
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	8a 83       	std	Y+2, r24	; 0x02
			buf_ptr = 0;
    29fe:	fe 01       	movw	r30, r28
    2a00:	e8 5a       	subi	r30, 0xA8	; 168
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	11 82       	std	Z+1, r1	; 0x01
    2a06:	10 82       	st	Z, r1
			do_prompt = 1;
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
		}

		if (state == S_FIRST_BYTE_GPIB) {
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0e:	83 30       	cpi	r24, 0x03	; 3
    2a10:	d1 f4       	brne	.+52     	; 0x2a46 <state_machine+0xfe>
			// GPIB command. Check if a partner was defined.
			if (gpib_get_partner_pad() == ADDRESS_NOT_SET) {
    2a12:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <gpib_get_partner_pad>
    2a16:	8f 3f       	cpi	r24, 0xFF	; 255
    2a18:	79 f4       	brne	.+30     	; 0x2a38 <state_machine+0xf0>
				uart_puts_P(
    2a1a:	84 ed       	ldi	r24, 0xD4	; 212
    2a1c:	92 e0       	ldi	r25, 0x02	; 2
    2a1e:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
						"Device address is not set. Can not send command.\n\r");
				// reset local vars
				state = S_INITIAL;
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	8a 83       	std	Y+2, r24	; 0x02
				buf_ptr = 0;
    2a26:	fe 01       	movw	r30, r28
    2a28:	e8 5a       	subi	r30, 0xA8	; 168
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	11 82       	std	Z+1, r1	; 0x01
    2a2e:	10 82       	st	Z, r1
				do_prompt = 1;
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	8b 83       	std	Y+3, r24	; 0x03
				is_query = 0;
    2a34:	1c 82       	std	Y+4, r1	; 0x04
    2a36:	07 c0       	rjmp	.+14     	; 0x2a46 <state_machine+0xfe>
			} else {
				// write prologue
				state = S_SEND_BYTES;
    2a38:	84 e0       	ldi	r24, 0x04	; 4
    2a3a:	8a 83       	std	Y+2, r24	; 0x02
				gpib_prepare_write();
    2a3c:	0e 94 6f 05 	call	0xade	; 0xade <gpib_prepare_write>
				gpib_write_prologue(0);
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <gpib_write_prologue>
			}
		}

		if (state == S_SEND_BYTES) {
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	84 30       	cpi	r24, 0x04	; 4
    2a4a:	29 f5       	brne	.+74     	; 0x2a96 <state_machine+0x14e>
			// send received character back depending on global flag
			if (rs232_remote_echo) {
    2a4c:	80 91 cd 04 	lds	r24, 0x04CD
    2a50:	88 23       	and	r24, r24
    2a52:	19 f0       	breq	.+6      	; 0x2a5a <state_machine+0x112>
				uart_putc((unsigned char) ch);
    2a54:	8f 81       	ldd	r24, Y+7	; 0x07
    2a56:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <uart_putc>
			}
			uchar isLastByte = (ch == ASCII_CODE_CR);
    2a5a:	8f 81       	ldd	r24, Y+7	; 0x07
    2a5c:	19 82       	std	Y+1, r1	; 0x01
    2a5e:	8d 30       	cpi	r24, 0x0D	; 13
    2a60:	11 f4       	brne	.+4      	; 0x2a66 <state_machine+0x11e>
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	89 83       	std	Y+1, r24	; 0x01
			gpib_write_byte(ch, isLastByte);
    2a66:	8f 81       	ldd	r24, Y+7	; 0x07
    2a68:	69 81       	ldd	r22, Y+1	; 0x01
    2a6a:	0e 94 92 08 	call	0x1124	; 0x1124 <gpib_write_byte>

			if (ch == '?') {
    2a6e:	8f 81       	ldd	r24, Y+7	; 0x07
    2a70:	8f 33       	cpi	r24, 0x3F	; 63
    2a72:	11 f4       	brne	.+4      	; 0x2a78 <state_machine+0x130>
				is_query = 1;
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	8c 83       	std	Y+4, r24	; 0x04
			}

			if (isLastByte) {
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	88 23       	and	r24, r24
    2a7c:	61 f0       	breq	.+24     	; 0x2a96 <state_machine+0x14e>
				uart_puts_P("\n\r");
    2a7e:	81 ed       	ldi	r24, 0xD1	; 209
    2a80:	92 e0       	ldi	r25, 0x02	; 2
    2a82:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
				if (is_query) {
    2a86:	8c 81       	ldd	r24, Y+4	; 0x04
    2a88:	88 23       	and	r24, r24
    2a8a:	19 f0       	breq	.+6      	; 0x2a92 <state_machine+0x14a>
					//uart_puts("Query. Will check for answer.\n\r");
					state = S_GPIB_ANSWER;
    2a8c:	85 e0       	ldi	r24, 0x05	; 5
    2a8e:	8a 83       	std	Y+2, r24	; 0x02
    2a90:	02 c0       	rjmp	.+4      	; 0x2a96 <state_machine+0x14e>
				} else {
					//uart_puts("Command only.\n\r");
					state = S_GPIB_NO_ANSWER;
    2a92:	86 e0       	ldi	r24, 0x06	; 6
    2a94:	8a 83       	std	Y+2, r24	; 0x02
				}
			}
		}

		// write epilogue
		if (state == S_GPIB_ANSWER || state == S_GPIB_NO_ANSWER) {
    2a96:	8a 81       	ldd	r24, Y+2	; 0x02
    2a98:	85 30       	cpi	r24, 0x05	; 5
    2a9a:	19 f0       	breq	.+6      	; 0x2aa2 <state_machine+0x15a>
    2a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9e:	86 30       	cpi	r24, 0x06	; 6
    2aa0:	41 f4       	brne	.+16     	; 0x2ab2 <state_machine+0x16a>
			gpib_write_epilogue(0);
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	0e 94 28 08 	call	0x1050	; 0x1050 <gpib_write_epilogue>
			buf_ptr = 0;
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	e8 5a       	subi	r30, 0xA8	; 168
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	11 82       	std	Z+1, r1	; 0x01
    2ab0:	10 82       	st	Z, r1
		}

		// if we sent a query, read the answer
		if (state == S_GPIB_ANSWER) {
    2ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab4:	85 30       	cpi	r24, 0x05	; 5
    2ab6:	21 f4       	brne	.+8      	; 0x2ac0 <state_machine+0x178>
			receiveAnswer();
    2ab8:	0e 94 6e 13 	call	0x26dc	; 0x26dc <receiveAnswer>
			state = S_FINAL;
    2abc:	87 e0       	ldi	r24, 0x07	; 7
    2abe:	8a 83       	std	Y+2, r24	; 0x02
		}

		// finalize state machine
		if (state == S_GPIB_NO_ANSWER || state == S_FINAL) {
    2ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac2:	86 30       	cpi	r24, 0x06	; 6
    2ac4:	19 f0       	breq	.+6      	; 0x2acc <state_machine+0x184>
    2ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac8:	87 30       	cpi	r24, 0x07	; 7
    2aca:	51 f4       	brne	.+20     	; 0x2ae0 <state_machine+0x198>
			// untalk/unlisten all partners
			gpib_untalkUnlisten();
    2acc:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <gpib_untalkUnlisten>
			// some devices do not send cr,lf at command end, so create it always itself
			uart_puts_P("\n\r");
    2ad0:	8e ec       	ldi	r24, 0xCE	; 206
    2ad2:	92 e0       	ldi	r25, 0x02	; 2
    2ad4:	0e 94 99 17 	call	0x2f32	; 0x2f32 <uart_puts_p>
			do_prompt = 1;
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	8b 83       	std	Y+3, r24	; 0x03
			state = S_INITIAL;
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	8a 83       	std	Y+2, r24	; 0x02
		}

		// SRQ detection - do this every time when time value s has changed
		// s is incremented every second. So we check once a second.
		if (srq_enabled && srq_occured(&old_time)) {
    2ae0:	80 91 cf 04 	lds	r24, 0x04CF
    2ae4:	88 23       	and	r24, r24
    2ae6:	09 f4       	brne	.+2      	; 0x2aea <state_machine+0x1a2>
    2ae8:	46 cf       	rjmp	.-372    	; 0x2976 <state_machine+0x2e>
    2aea:	ce 01       	movw	r24, r28
    2aec:	05 96       	adiw	r24, 0x05	; 5
    2aee:	0e 94 a0 13 	call	0x2740	; 0x2740 <srq_occured>
    2af2:	88 23       	and	r24, r24
    2af4:	09 f4       	brne	.+2      	; 0x2af8 <state_machine+0x1b0>
    2af6:	3f cf       	rjmp	.-386    	; 0x2976 <state_machine+0x2e>
			// TODO: make handle srq work again
			// the returned command_ready was interpreted to read in an answer
			// but this was turned of for new input loop
			// next two lines replace that but must be tested.
			if (handle_srq(buf, &buf_ptr)) {
    2af8:	ce 01       	movw	r24, r28
    2afa:	08 96       	adiw	r24, 0x08	; 8
    2afc:	9e 01       	movw	r18, r28
    2afe:	28 5a       	subi	r18, 0xA8	; 168
    2b00:	3f 4f       	sbci	r19, 0xFF	; 255
    2b02:	b9 01       	movw	r22, r18
    2b04:	0e 94 dd 13 	call	0x27ba	; 0x27ba <handle_srq>
    2b08:	88 23       	and	r24, r24
    2b0a:	09 f4       	brne	.+2      	; 0x2b0e <state_machine+0x1c6>
    2b0c:	34 cf       	rjmp	.-408    	; 0x2976 <state_machine+0x2e>
				state = S_GPIB_ANSWER;
    2b0e:	85 e0       	ldi	r24, 0x05	; 5
    2b10:	8a 83       	std	Y+2, r24	; 0x02
    2b12:	31 cf       	rjmp	.-414    	; 0x2976 <state_machine+0x2e>

00002b14 <main>:
 * \brief Implementation of GPIB controller. Reads a command from RS232, sends it via bus.
 * If The command contains a '?', an answer from the device is expected and read in. The
 * answer then is printed out. If an SRQ occured, a serial poll is initiated.
 * 
 */
int main(void) {
    2b14:	df 93       	push	r29
    2b16:	cf 93       	push	r28
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62
	/*
	 *  Initialize UART library, pass baudrate and avr cpu clock 
	 *  with the macro UART_BAUD_SELECT()
	 */DI();
    2b1c:	8c e0       	ldi	r24, 0x0C	; 12
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <uart_init>

	/*
	 * now enable interrupt, since UART and TIMER library is interrupt controlled
	 */sei();
    2b24:	78 94       	sei

	/** print some usage infos */
	printHelp();
    2b26:	0e 94 47 14 	call	0x288e	; 0x288e <printHelp>

	// init timer for timeout detection
	timer16_init();
    2b2a:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <timer16_init>

	// init gpib lines
	gpib_init();
    2b2e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <gpib_init>
	// init controller part - assign bus 
	gpib_controller_assign(0x00);
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <gpib_controller_assign>

	if (xonXoffMode) {
    2b38:	80 91 ce 04 	lds	r24, 0x04CE
    2b3c:	88 23       	and	r24, r24
    2b3e:	19 f0       	breq	.+6      	; 0x2b46 <main+0x32>
		uart_set_flow_control(FLOWCONTROL_XONXOFF);
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <uart_set_flow_control>
	}

	// state machine loops forever
	state_machine();
    2b46:	0e 94 a4 14 	call	0x2948	; 0x2948 <state_machine>
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
}
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret

00002b54 <__vector_7>:

/**
 * Interrupt Service Routine - do not call directly
 *  This routine is called when the Timer Value TCNT1 reaches the Output Compare Register Value OCR1A
 */ 
ISR(TIMER1_COMPA_vect) {
    2b54:	1f 92       	push	r1
    2b56:	0f 92       	push	r0
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	0f 92       	push	r0
    2b5c:	11 24       	eor	r1, r1
    2b5e:	8f 93       	push	r24
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
#if XTAL_CPU % DEBOUNCE
	OCR1A = XTAL_CPU / DEBOUNCE - 1;
#endif
	if (--timer==0) {
    2b68:	80 91 40 06 	lds	r24, 0x0640
    2b6c:	81 50       	subi	r24, 0x01	; 1
    2b6e:	80 93 40 06 	sts	0x0640, r24
    2b72:	80 91 40 06 	lds	r24, 0x0640
    2b76:	88 23       	and	r24, r24
    2b78:	39 f4       	brne	.+14     	; 0x2b88 <__vector_7+0x34>
		timer=(uint8_t) DEBOUNCE;
    2b7a:	10 92 40 06 	sts	0x0640, r1
		s++;
    2b7e:	80 91 41 06 	lds	r24, 0x0641
    2b82:	8f 5f       	subi	r24, 0xFF	; 255
    2b84:	80 93 41 06 	sts	0x0641, r24
#if XTAL_CPU % DEBOUNCE
		OCR1A = XTAL_CPU / DEBOUNCE + XTAL_CPU % DEBOUNCE - 1;
#endif
	}
}
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	8f 91       	pop	r24
    2b8e:	0f 90       	pop	r0
    2b90:	0f be       	out	0x3f, r0	; 63
    2b92:	0f 90       	pop	r0
    2b94:	1f 90       	pop	r1
    2b96:	18 95       	reti

00002b98 <timer16_init>:
/**
 * Timer initialisation.
 *  \brief initializes all registers ands sets second value 's' to zero. Timer is immediately
 * started.
 */ 
void timer16_init( void ) {
    2b98:	df 93       	push	r29
    2b9a:	cf 93       	push	r28
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62

	// OCR1A=XTAL/DEBOUNCE-1 -> Bei Erreichen dieses Wertes (31249) wird die ISR besucht
	// die ISR wird also alle 1/256s aufgerufen. Wenn man dort also bis 256 hochzählt, ist genau
	// 1 Sekunde um! 256 ist der Wert der Variable timer und wird über das define DEBOUNCE festgelegt

	TCCR1B = (1<<CS10) ^ (1<<WGM12);	// Prescaler of 1 | CTC mode
    2ba0:	ee e4       	ldi	r30, 0x4E	; 78
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	89 e0       	ldi	r24, 0x09	; 9
    2ba6:	80 83       	st	Z, r24
	OCR1A  = F_CPU/DEBOUNCE-1;		// Output compare register value 
    2ba8:	ea e4       	ldi	r30, 0x4A	; 74
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	81 e1       	ldi	r24, 0x11	; 17
    2bae:	9a e7       	ldi	r25, 0x7A	; 122
    2bb0:	91 83       	std	Z+1, r25	; 0x01
    2bb2:	80 83       	st	Z, r24
	TCNT1 = 0; // Start value for timer register
    2bb4:	ec e4       	ldi	r30, 0x4C	; 76
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	11 82       	std	Z+1, r1	; 0x01
    2bba:	10 82       	st	Z, r1
	s=0; // Initialize second value (s) to zero
    2bbc:	10 92 41 06 	sts	0x0641, r1
	timer = (uint8_t)DEBOUNCE; 
    2bc0:	10 92 40 06 	sts	0x0640, r1
	TIMSK |= (1<<OCIE1A);		// activate timer interrupts which starts timer run
    2bc4:	a9 e5       	ldi	r26, 0x59	; 89
    2bc6:	b0 e0       	ldi	r27, 0x00	; 0
    2bc8:	e9 e5       	ldi	r30, 0x59	; 89
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	80 61       	ori	r24, 0x10	; 16
    2bd0:	8c 93       	st	X, r24
}
    2bd2:	cf 91       	pop	r28
    2bd4:	df 91       	pop	r29
    2bd6:	08 95       	ret

00002bd8 <uart_set_flow_control>:
/** number of chars in rx buffer */
static volatile unsigned char chars_in_rx_buffer = 0;

void SendOutOfBand(unsigned char c);

void uart_set_flow_control(unsigned char _flowControl) {
    2bd8:	df 93       	push	r29
    2bda:	cf 93       	push	r28
    2bdc:	0f 92       	push	r0
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
    2be2:	89 83       	std	Y+1, r24	; 0x01
	flowControl = _flowControl;
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	80 93 e3 04 	sts	0x04E3, r24
}
    2bea:	0f 90       	pop	r0
    2bec:	cf 91       	pop	r28
    2bee:	df 91       	pop	r29
    2bf0:	08 95       	ret

00002bf2 <uart_get_flow_control>:

unsigned char uart_get_flow_control() {
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
	return flowControl;
    2bfa:	80 91 e3 04 	lds	r24, 0x04E3
}
    2bfe:	cf 91       	pop	r28
    2c00:	df 91       	pop	r29
    2c02:	08 95       	ret

00002c04 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
 Function: UART Receive Complete interrupt
 Purpose:  called when the UART has received a character
 **************************************************************************/
{
    2c04:	1f 92       	push	r1
    2c06:	0f 92       	push	r0
    2c08:	0f b6       	in	r0, 0x3f	; 63
    2c0a:	0f 92       	push	r0
    2c0c:	11 24       	eor	r1, r1
    2c0e:	2f 93       	push	r18
    2c10:	3f 93       	push	r19
    2c12:	4f 93       	push	r20
    2c14:	5f 93       	push	r21
    2c16:	6f 93       	push	r22
    2c18:	7f 93       	push	r23
    2c1a:	8f 93       	push	r24
    2c1c:	9f 93       	push	r25
    2c1e:	af 93       	push	r26
    2c20:	bf 93       	push	r27
    2c22:	ef 93       	push	r30
    2c24:	ff 93       	push	r31
    2c26:	df 93       	push	r29
    2c28:	cf 93       	push	r28
    2c2a:	00 d0       	rcall	.+0      	; 0x2c2c <__vector_13+0x28>
    2c2c:	00 d0       	rcall	.+0      	; 0x2c2e <__vector_13+0x2a>
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	unsigned char usr;
	unsigned char lastRxError;

	/* read UART status register and UART data register */
	usr = UART0_STATUS;
    2c32:	eb e2       	ldi	r30, 0x2B	; 43
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	8a 83       	std	Y+2, r24	; 0x02
	data = UART0_DATA;
    2c3a:	ec e2       	ldi	r30, 0x2C	; 44
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	80 81       	ld	r24, Z
    2c40:	8b 83       	std	Y+3, r24	; 0x03

	/* */
#if defined( AT90_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	88 71       	andi	r24, 0x18	; 24
    2c46:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif

	/* calculate buffer index */
	tmphead = (UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    2c48:	80 91 89 05 	lds	r24, 0x0589
    2c4c:	8f 5f       	subi	r24, 0xFF	; 255
    2c4e:	8f 77       	andi	r24, 0x7F	; 127
    2c50:	8c 83       	std	Y+4, r24	; 0x04

	if (tmphead == UART_RxTail) {
    2c52:	90 91 8a 05 	lds	r25, 0x058A
    2c56:	8c 81       	ldd	r24, Y+4	; 0x04
    2c58:	89 17       	cp	r24, r25
    2c5a:	19 f4       	brne	.+6      	; 0x2c62 <__vector_13+0x5e>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    2c5c:	82 e0       	ldi	r24, 0x02	; 2
    2c5e:	89 83       	std	Y+1, r24	; 0x01
    2c60:	10 c0       	rjmp	.+32     	; 0x2c82 <__vector_13+0x7e>
	} else {
		/* store new index */
		UART_RxHead = tmphead;
    2c62:	8c 81       	ldd	r24, Y+4	; 0x04
    2c64:	80 93 89 05 	sts	0x0589, r24
		/* store received data in buffer */
		UART_RxBuf[tmphead] = data;
    2c68:	8c 81       	ldd	r24, Y+4	; 0x04
    2c6a:	88 2f       	mov	r24, r24
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	fc 01       	movw	r30, r24
    2c70:	e9 5f       	subi	r30, 0xF9	; 249
    2c72:	fa 4f       	sbci	r31, 0xFA	; 250
    2c74:	8b 81       	ldd	r24, Y+3	; 0x03
    2c76:	80 83       	st	Z, r24
		chars_in_rx_buffer++;
    2c78:	80 91 e6 04 	lds	r24, 0x04E6
    2c7c:	8f 5f       	subi	r24, 0xFF	; 255
    2c7e:	80 93 e6 04 	sts	0x04E6, r24
	}

	if (flowControl == FLOWCONTROL_XONXOFF
    2c82:	80 91 e3 04 	lds	r24, 0x04E3
    2c86:	81 30       	cpi	r24, 0x01	; 1
    2c88:	99 f4       	brne	.+38     	; 0x2cb0 <__vector_13+0xac>
    2c8a:	80 91 e6 04 	lds	r24, 0x04E6
    2c8e:	81 36       	cpi	r24, 0x61	; 97
    2c90:	78 f0       	brcs	.+30     	; 0x2cb0 <__vector_13+0xac>
			&& chars_in_rx_buffer > UART_RX_BUFFER_MAX_MARK) {
		/* immediately send XOFF */
		oob_event = 1;
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	80 93 e4 04 	sts	0x04E4, r24
		if (!after_xoff_sent) {
    2c98:	80 91 e5 04 	lds	r24, 0x04E5
    2c9c:	88 23       	and	r24, r24
    2c9e:	31 f4       	brne	.+12     	; 0x2cac <__vector_13+0xa8>
			SendOutOfBand(XOFF);
    2ca0:	83 e1       	ldi	r24, 0x13	; 19
    2ca2:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <SendOutOfBand>
			after_xoff_sent = 1;
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	80 93 e5 04 	sts	0x04E5, r24
		}
		oob_event = 0;
    2cac:	10 92 e4 04 	sts	0x04E4, r1
	}

	UART_LastRxError = lastRxError;
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	80 93 8b 05 	sts	0x058B, r24
}
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	cf 91       	pop	r28
    2cc0:	df 91       	pop	r29
    2cc2:	ff 91       	pop	r31
    2cc4:	ef 91       	pop	r30
    2cc6:	bf 91       	pop	r27
    2cc8:	af 91       	pop	r26
    2cca:	9f 91       	pop	r25
    2ccc:	8f 91       	pop	r24
    2cce:	7f 91       	pop	r23
    2cd0:	6f 91       	pop	r22
    2cd2:	5f 91       	pop	r21
    2cd4:	4f 91       	pop	r20
    2cd6:	3f 91       	pop	r19
    2cd8:	2f 91       	pop	r18
    2cda:	0f 90       	pop	r0
    2cdc:	0f be       	out	0x3f, r0	; 63
    2cde:	0f 90       	pop	r0
    2ce0:	1f 90       	pop	r1
    2ce2:	18 95       	reti

00002ce4 <SendOutOfBand>:

void SendOutOfBand(unsigned char c) {
    2ce4:	df 93       	push	r29
    2ce6:	cf 93       	push	r28
    2ce8:	0f 92       	push	r0
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
    2cee:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << UDRE)))
    2cf0:	eb e2       	ldi	r30, 0x2B	; 43
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	88 2f       	mov	r24, r24
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	80 72       	andi	r24, 0x20	; 32
    2cfc:	90 70       	andi	r25, 0x00	; 0
    2cfe:	00 97       	sbiw	r24, 0x00	; 0
    2d00:	b9 f3       	breq	.-18     	; 0x2cf0 <SendOutOfBand+0xc>
		;
	UDR = c;
    2d02:	ec e2       	ldi	r30, 0x2C	; 44
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	80 83       	st	Z, r24
}
    2d0a:	0f 90       	pop	r0
    2d0c:	cf 91       	pop	r28
    2d0e:	df 91       	pop	r29
    2d10:	08 95       	ret

00002d12 <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
 Function: UART Data Register Empty interrupt
 Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
    2d12:	1f 92       	push	r1
    2d14:	0f 92       	push	r0
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	0f 92       	push	r0
    2d1a:	11 24       	eor	r1, r1
    2d1c:	8f 93       	push	r24
    2d1e:	9f 93       	push	r25
    2d20:	af 93       	push	r26
    2d22:	bf 93       	push	r27
    2d24:	ef 93       	push	r30
    2d26:	ff 93       	push	r31
    2d28:	df 93       	push	r29
    2d2a:	cf 93       	push	r28
    2d2c:	0f 92       	push	r0
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;

	if (oob_event) {
    2d32:	80 91 e4 04 	lds	r24, 0x04E4
    2d36:	88 23       	and	r24, r24
    2d38:	01 f5       	brne	.+64     	; 0x2d7a <__vector_14+0x68>
		/* suppress transmitting during oob handling */
		return;
	}
	if (UART_TxHead != UART_TxTail) {
    2d3a:	90 91 87 05 	lds	r25, 0x0587
    2d3e:	80 91 88 05 	lds	r24, 0x0588
    2d42:	98 17       	cp	r25, r24
    2d44:	99 f0       	breq	.+38     	; 0x2d6c <__vector_14+0x5a>
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    2d46:	80 91 88 05 	lds	r24, 0x0588
    2d4a:	8f 5f       	subi	r24, 0xFF	; 255
    2d4c:	8f 71       	andi	r24, 0x1F	; 31
    2d4e:	89 83       	std	Y+1, r24	; 0x01
		UART_TxTail = tmptail;
    2d50:	89 81       	ldd	r24, Y+1	; 0x01
    2d52:	80 93 88 05 	sts	0x0588, r24
		/* get one byte from buffer and write it to UART */
		UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
    2d56:	ac e2       	ldi	r26, 0x2C	; 44
    2d58:	b0 e0       	ldi	r27, 0x00	; 0
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	88 2f       	mov	r24, r24
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	fc 01       	movw	r30, r24
    2d62:	e9 51       	subi	r30, 0x19	; 25
    2d64:	fb 4f       	sbci	r31, 0xFB	; 251
    2d66:	80 81       	ld	r24, Z
    2d68:	8c 93       	st	X, r24
    2d6a:	07 c0       	rjmp	.+14     	; 0x2d7a <__vector_14+0x68>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
    2d6c:	aa e2       	ldi	r26, 0x2A	; 42
    2d6e:	b0 e0       	ldi	r27, 0x00	; 0
    2d70:	ea e2       	ldi	r30, 0x2A	; 42
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	80 81       	ld	r24, Z
    2d76:	8f 7d       	andi	r24, 0xDF	; 223
    2d78:	8c 93       	st	X, r24
	}
}
    2d7a:	0f 90       	pop	r0
    2d7c:	cf 91       	pop	r28
    2d7e:	df 91       	pop	r29
    2d80:	ff 91       	pop	r31
    2d82:	ef 91       	pop	r30
    2d84:	bf 91       	pop	r27
    2d86:	af 91       	pop	r26
    2d88:	9f 91       	pop	r25
    2d8a:	8f 91       	pop	r24
    2d8c:	0f 90       	pop	r0
    2d8e:	0f be       	out	0x3f, r0	; 63
    2d90:	0f 90       	pop	r0
    2d92:	1f 90       	pop	r1
    2d94:	18 95       	reti

00002d96 <uart_init>:
 Function: uart_init()
 Purpose:  initialize UART and set baudrate
 Input:    baudrate using macro UART_BAUD_SELECT()
 Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate) {
    2d96:	df 93       	push	r29
    2d98:	cf 93       	push	r28
    2d9a:	00 d0       	rcall	.+0      	; 0x2d9c <uart_init+0x6>
    2d9c:	cd b7       	in	r28, 0x3d	; 61
    2d9e:	de b7       	in	r29, 0x3e	; 62
    2da0:	9a 83       	std	Y+2, r25	; 0x02
    2da2:	89 83       	std	Y+1, r24	; 0x01
	UART_TxHead = 0;
    2da4:	10 92 87 05 	sts	0x0587, r1
	UART_TxTail = 0;
    2da8:	10 92 88 05 	sts	0x0588, r1
	UART_RxHead = 0;
    2dac:	10 92 89 05 	sts	0x0589, r1
	UART_RxTail = 0;
    2db0:	10 92 8a 05 	sts	0x058A, r1
	/* enable UART receiver and transmmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if (baudrate & 0x8000) {
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	9a 81       	ldd	r25, Y+2	; 0x02
    2db8:	99 23       	and	r25, r25
    2dba:	4c f4       	brge	.+18     	; 0x2dce <uart_init+0x38>
		UART0_STATUS = (1 << U2X);  //Enable 2x speed
    2dbc:	eb e2       	ldi	r30, 0x2B	; 43
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	82 e0       	ldi	r24, 0x02	; 2
    2dc2:	80 83       	st	Z, r24
		baudrate &= ~0x8000;
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc8:	9f 77       	andi	r25, 0x7F	; 127
    2dca:	9a 83       	std	Y+2, r25	; 0x02
    2dcc:	89 83       	std	Y+1, r24	; 0x01
	}
	UBRRH = (unsigned char) (baudrate >> 8);
    2dce:	e0 e4       	ldi	r30, 0x40	; 64
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd6:	89 2f       	mov	r24, r25
    2dd8:	99 27       	eor	r25, r25
    2dda:	80 83       	st	Z, r24
	UBRRL = (unsigned char) baudrate;
    2ddc:	e9 e2       	ldi	r30, 0x29	; 41
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	80 83       	st	Z, r24

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | (1 << RXEN) | (1 << TXEN);
    2de4:	ea e2       	ldi	r30, 0x2A	; 42
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	88 e9       	ldi	r24, 0x98	; 152
    2dea:	80 83       	st	Z, r24

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
    2dec:	e0 e4       	ldi	r30, 0x40	; 64
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	86 e8       	ldi	r24, 0x86	; 134
    2df2:	80 83       	st	Z, r24
	/* Enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    2df4:	0f 90       	pop	r0
    2df6:	0f 90       	pop	r0
    2df8:	cf 91       	pop	r28
    2dfa:	df 91       	pop	r29
    2dfc:	08 95       	ret

00002dfe <uart_getc>:
 Function: uart_getc()
 Purpose:  return byte from ringbuffer
 Returns:  lower byte:  received byte from ringbuffer
 higher byte: last receive error
 **************************************************************************/
unsigned int uart_getc(void) {
    2dfe:	df 93       	push	r29
    2e00:	cf 93       	push	r28
    2e02:	00 d0       	rcall	.+0      	; 0x2e04 <uart_getc+0x6>
    2e04:	00 d0       	rcall	.+0      	; 0x2e06 <uart_getc+0x8>
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmptail;
	unsigned char data;

	if (UART_RxHead == UART_RxTail) {
    2e0a:	90 91 89 05 	lds	r25, 0x0589
    2e0e:	80 91 8a 05 	lds	r24, 0x058A
    2e12:	98 17       	cp	r25, r24
    2e14:	29 f4       	brne	.+10     	; 0x2e20 <uart_getc+0x22>
		return UART_NO_DATA; /* no data available */
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	91 e0       	ldi	r25, 0x01	; 1
    2e1a:	9c 83       	std	Y+4, r25	; 0x04
    2e1c:	8b 83       	std	Y+3, r24	; 0x03
    2e1e:	3c c0       	rjmp	.+120    	; 0x2e98 <uart_getc+0x9a>
	}

	/* calculate /store buffer index */
	tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    2e20:	80 91 8a 05 	lds	r24, 0x058A
    2e24:	8f 5f       	subi	r24, 0xFF	; 255
    2e26:	8f 77       	andi	r24, 0x7F	; 127
    2e28:	8a 83       	std	Y+2, r24	; 0x02
	UART_RxTail = tmptail;
    2e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2c:	80 93 8a 05 	sts	0x058A, r24

	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];
    2e30:	8a 81       	ldd	r24, Y+2	; 0x02
    2e32:	88 2f       	mov	r24, r24
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	fc 01       	movw	r30, r24
    2e38:	e9 5f       	subi	r30, 0xF9	; 249
    2e3a:	fa 4f       	sbci	r31, 0xFA	; 250
    2e3c:	80 81       	ld	r24, Z
    2e3e:	89 83       	std	Y+1, r24	; 0x01
	if (chars_in_rx_buffer > 0) {
    2e40:	80 91 e6 04 	lds	r24, 0x04E6
    2e44:	88 23       	and	r24, r24
    2e46:	29 f0       	breq	.+10     	; 0x2e52 <uart_getc+0x54>
		chars_in_rx_buffer--;
    2e48:	80 91 e6 04 	lds	r24, 0x04E6
    2e4c:	81 50       	subi	r24, 0x01	; 1
    2e4e:	80 93 e6 04 	sts	0x04E6, r24
	}
	if ((flowControl == FLOWCONTROL_XONXOFF) && after_xoff_sent) {
    2e52:	80 91 e3 04 	lds	r24, 0x04E3
    2e56:	81 30       	cpi	r24, 0x01	; 1
    2e58:	91 f4       	brne	.+36     	; 0x2e7e <uart_getc+0x80>
    2e5a:	80 91 e5 04 	lds	r24, 0x04E5
    2e5e:	88 23       	and	r24, r24
    2e60:	71 f0       	breq	.+28     	; 0x2e7e <uart_getc+0x80>
		if (chars_in_rx_buffer <= UART_RX_BUFFER_MIN_MARK) {
    2e62:	80 91 e6 04 	lds	r24, 0x04E6
    2e66:	81 31       	cpi	r24, 0x11	; 17
    2e68:	50 f4       	brcc	.+20     	; 0x2e7e <uart_getc+0x80>
			/* immediately send XON */
			oob_event = 1;
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	80 93 e4 04 	sts	0x04E4, r24
			SendOutOfBand(XON);
    2e70:	81 e1       	ldi	r24, 0x11	; 17
    2e72:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <SendOutOfBand>
			after_xoff_sent = 0;
    2e76:	10 92 e5 04 	sts	0x04E5, r1
			oob_event = 0;
    2e7a:	10 92 e4 04 	sts	0x04E4, r1
		}
	}

	return (UART_LastRxError << 8) + data;
    2e7e:	80 91 8b 05 	lds	r24, 0x058B
    2e82:	88 2f       	mov	r24, r24
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	38 2f       	mov	r19, r24
    2e88:	22 27       	eor	r18, r18
    2e8a:	89 81       	ldd	r24, Y+1	; 0x01
    2e8c:	88 2f       	mov	r24, r24
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	82 0f       	add	r24, r18
    2e92:	93 1f       	adc	r25, r19
    2e94:	9c 83       	std	Y+4, r25	; 0x04
    2e96:	8b 83       	std	Y+3, r24	; 0x03
    2e98:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9a:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	0f 90       	pop	r0
    2ea4:	cf 91       	pop	r28
    2ea6:	df 91       	pop	r29
    2ea8:	08 95       	ret

00002eaa <uart_putc>:
 Function: uart_putc()
 Purpose:  write byte to ringbuffer for transmitting via UART
 Input:    byte to be transmitted
 Returns:  none
 **************************************************************************/
void uart_putc(unsigned char data) {
    2eaa:	df 93       	push	r29
    2eac:	cf 93       	push	r28
    2eae:	00 d0       	rcall	.+0      	; 0x2eb0 <uart_putc+0x6>
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
    2eb4:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char tmphead;

	tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    2eb6:	80 91 87 05 	lds	r24, 0x0587
    2eba:	8f 5f       	subi	r24, 0xFF	; 255
    2ebc:	8f 71       	andi	r24, 0x1F	; 31
    2ebe:	89 83       	std	Y+1, r24	; 0x01

	while (tmphead == UART_TxTail) {
    2ec0:	90 91 88 05 	lds	r25, 0x0588
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
    2ec6:	89 17       	cp	r24, r25
    2ec8:	d9 f3       	breq	.-10     	; 0x2ec0 <uart_putc+0x16>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	88 2f       	mov	r24, r24
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	fc 01       	movw	r30, r24
    2ed2:	e9 51       	subi	r30, 0x19	; 25
    2ed4:	fb 4f       	sbci	r31, 0xFB	; 251
    2ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed8:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    2eda:	89 81       	ldd	r24, Y+1	; 0x01
    2edc:	80 93 87 05 	sts	0x0587, r24

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    2ee0:	aa e2       	ldi	r26, 0x2A	; 42
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	ea e2       	ldi	r30, 0x2A	; 42
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	80 81       	ld	r24, Z
    2eea:	80 62       	ori	r24, 0x20	; 32
    2eec:	8c 93       	st	X, r24

}/* uart_putc */
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	cf 91       	pop	r28
    2ef4:	df 91       	pop	r29
    2ef6:	08 95       	ret

00002ef8 <uart_puts>:
 Function: uart_puts()
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	00 d0       	rcall	.+0      	; 0x2efe <uart_puts+0x6>
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	9a 83       	std	Y+2, r25	; 0x02
    2f04:	89 83       	std	Y+1, r24	; 0x01
    2f06:	0b c0       	rjmp	.+22     	; 0x2f1e <uart_puts+0x26>
	while (*s)
		uart_putc(*s++);
    2f08:	e9 81       	ldd	r30, Y+1	; 0x01
    2f0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f0c:	20 81       	ld	r18, Z
    2f0e:	89 81       	ldd	r24, Y+1	; 0x01
    2f10:	9a 81       	ldd	r25, Y+2	; 0x02
    2f12:	01 96       	adiw	r24, 0x01	; 1
    2f14:	9a 83       	std	Y+2, r25	; 0x02
    2f16:	89 83       	std	Y+1, r24	; 0x01
    2f18:	82 2f       	mov	r24, r18
    2f1a:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <uart_putc>
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts(const char *s) {
	while (*s)
    2f1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f20:	fa 81       	ldd	r31, Y+2	; 0x02
    2f22:	80 81       	ld	r24, Z
    2f24:	88 23       	and	r24, r24
    2f26:	81 f7       	brne	.-32     	; 0x2f08 <uart_puts+0x10>
		uart_putc(*s++);

}/* uart_puts */
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	cf 91       	pop	r28
    2f2e:	df 91       	pop	r29
    2f30:	08 95       	ret

00002f32 <uart_puts_p>:
 Function: uart_puts_p()
 Purpose:  transmit string from program memory to UART
 Input:    program memory string to be transmitted
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
    2f32:	df 93       	push	r29
    2f34:	cf 93       	push	r28
    2f36:	00 d0       	rcall	.+0      	; 0x2f38 <uart_puts_p+0x6>
    2f38:	00 d0       	rcall	.+0      	; 0x2f3a <uart_puts_p+0x8>
    2f3a:	00 d0       	rcall	.+0      	; 0x2f3c <uart_puts_p+0xa>
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	9d 83       	std	Y+5, r25	; 0x05
    2f42:	8c 83       	std	Y+4, r24	; 0x04
    2f44:	03 c0       	rjmp	.+6      	; 0x2f4c <uart_puts_p+0x1a>
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
		uart_putc(c);
    2f46:	8e 81       	ldd	r24, Y+6	; 0x06
    2f48:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <uart_putc>
 Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s) {
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
    2f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f50:	9b 83       	std	Y+3, r25	; 0x03
    2f52:	8a 83       	std	Y+2, r24	; 0x02
    2f54:	8c 81       	ldd	r24, Y+4	; 0x04
    2f56:	9d 81       	ldd	r25, Y+5	; 0x05
    2f58:	01 96       	adiw	r24, 0x01	; 1
    2f5a:	9d 83       	std	Y+5, r25	; 0x05
    2f5c:	8c 83       	std	Y+4, r24	; 0x04
    2f5e:	ea 81       	ldd	r30, Y+2	; 0x02
    2f60:	fb 81       	ldd	r31, Y+3	; 0x03
    2f62:	84 91       	lpm	r24, Z+
    2f64:	89 83       	std	Y+1, r24	; 0x01
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	8e 83       	std	Y+6, r24	; 0x06
    2f6a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f6c:	88 23       	and	r24, r24
    2f6e:	59 f7       	brne	.-42     	; 0x2f46 <uart_puts_p+0x14>
		uart_putc(c);

}/* uart_puts_p */
    2f70:	26 96       	adiw	r28, 0x06	; 6
    2f72:	0f b6       	in	r0, 0x3f	; 63
    2f74:	f8 94       	cli
    2f76:	de bf       	out	0x3e, r29	; 62
    2f78:	0f be       	out	0x3f, r0	; 63
    2f7a:	cd bf       	out	0x3d, r28	; 61
    2f7c:	cf 91       	pop	r28
    2f7e:	df 91       	pop	r29
    2f80:	08 95       	ret

00002f82 <__divmodhi4>:
    2f82:	97 fb       	bst	r25, 7
    2f84:	09 2e       	mov	r0, r25
    2f86:	07 26       	eor	r0, r23
    2f88:	0a d0       	rcall	.+20     	; 0x2f9e <__divmodhi4_neg1>
    2f8a:	77 fd       	sbrc	r23, 7
    2f8c:	04 d0       	rcall	.+8      	; 0x2f96 <__divmodhi4_neg2>
    2f8e:	0c d0       	rcall	.+24     	; 0x2fa8 <__udivmodhi4>
    2f90:	06 d0       	rcall	.+12     	; 0x2f9e <__divmodhi4_neg1>
    2f92:	00 20       	and	r0, r0
    2f94:	1a f4       	brpl	.+6      	; 0x2f9c <__divmodhi4_exit>

00002f96 <__divmodhi4_neg2>:
    2f96:	70 95       	com	r23
    2f98:	61 95       	neg	r22
    2f9a:	7f 4f       	sbci	r23, 0xFF	; 255

00002f9c <__divmodhi4_exit>:
    2f9c:	08 95       	ret

00002f9e <__divmodhi4_neg1>:
    2f9e:	f6 f7       	brtc	.-4      	; 0x2f9c <__divmodhi4_exit>
    2fa0:	90 95       	com	r25
    2fa2:	81 95       	neg	r24
    2fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa6:	08 95       	ret

00002fa8 <__udivmodhi4>:
    2fa8:	aa 1b       	sub	r26, r26
    2faa:	bb 1b       	sub	r27, r27
    2fac:	51 e1       	ldi	r21, 0x11	; 17
    2fae:	07 c0       	rjmp	.+14     	; 0x2fbe <__udivmodhi4_ep>

00002fb0 <__udivmodhi4_loop>:
    2fb0:	aa 1f       	adc	r26, r26
    2fb2:	bb 1f       	adc	r27, r27
    2fb4:	a6 17       	cp	r26, r22
    2fb6:	b7 07       	cpc	r27, r23
    2fb8:	10 f0       	brcs	.+4      	; 0x2fbe <__udivmodhi4_ep>
    2fba:	a6 1b       	sub	r26, r22
    2fbc:	b7 0b       	sbc	r27, r23

00002fbe <__udivmodhi4_ep>:
    2fbe:	88 1f       	adc	r24, r24
    2fc0:	99 1f       	adc	r25, r25
    2fc2:	5a 95       	dec	r21
    2fc4:	a9 f7       	brne	.-22     	; 0x2fb0 <__udivmodhi4_loop>
    2fc6:	80 95       	com	r24
    2fc8:	90 95       	com	r25
    2fca:	bc 01       	movw	r22, r24
    2fcc:	cd 01       	movw	r24, r26
    2fce:	08 95       	ret

00002fd0 <__prologue_saves__>:
    2fd0:	2f 92       	push	r2
    2fd2:	3f 92       	push	r3
    2fd4:	4f 92       	push	r4
    2fd6:	5f 92       	push	r5
    2fd8:	6f 92       	push	r6
    2fda:	7f 92       	push	r7
    2fdc:	8f 92       	push	r8
    2fde:	9f 92       	push	r9
    2fe0:	af 92       	push	r10
    2fe2:	bf 92       	push	r11
    2fe4:	cf 92       	push	r12
    2fe6:	df 92       	push	r13
    2fe8:	ef 92       	push	r14
    2fea:	ff 92       	push	r15
    2fec:	0f 93       	push	r16
    2fee:	1f 93       	push	r17
    2ff0:	cf 93       	push	r28
    2ff2:	df 93       	push	r29
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
    2ff8:	ca 1b       	sub	r28, r26
    2ffa:	db 0b       	sbc	r29, r27
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	f8 94       	cli
    3000:	de bf       	out	0x3e, r29	; 62
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	cd bf       	out	0x3d, r28	; 61
    3006:	09 94       	ijmp

00003008 <__epilogue_restores__>:
    3008:	2a 88       	ldd	r2, Y+18	; 0x12
    300a:	39 88       	ldd	r3, Y+17	; 0x11
    300c:	48 88       	ldd	r4, Y+16	; 0x10
    300e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3010:	6e 84       	ldd	r6, Y+14	; 0x0e
    3012:	7d 84       	ldd	r7, Y+13	; 0x0d
    3014:	8c 84       	ldd	r8, Y+12	; 0x0c
    3016:	9b 84       	ldd	r9, Y+11	; 0x0b
    3018:	aa 84       	ldd	r10, Y+10	; 0x0a
    301a:	b9 84       	ldd	r11, Y+9	; 0x09
    301c:	c8 84       	ldd	r12, Y+8	; 0x08
    301e:	df 80       	ldd	r13, Y+7	; 0x07
    3020:	ee 80       	ldd	r14, Y+6	; 0x06
    3022:	fd 80       	ldd	r15, Y+5	; 0x05
    3024:	0c 81       	ldd	r16, Y+4	; 0x04
    3026:	1b 81       	ldd	r17, Y+3	; 0x03
    3028:	aa 81       	ldd	r26, Y+2	; 0x02
    302a:	b9 81       	ldd	r27, Y+1	; 0x01
    302c:	ce 0f       	add	r28, r30
    302e:	d1 1d       	adc	r29, r1
    3030:	0f b6       	in	r0, 0x3f	; 63
    3032:	f8 94       	cli
    3034:	de bf       	out	0x3e, r29	; 62
    3036:	0f be       	out	0x3f, r0	; 63
    3038:	cd bf       	out	0x3d, r28	; 61
    303a:	ed 01       	movw	r28, r26
    303c:	08 95       	ret

0000303e <_exit>:
    303e:	f8 94       	cli

00003040 <__stop_program>:
    3040:	ff cf       	rjmp	.-2      	; 0x3040 <__stop_program>
